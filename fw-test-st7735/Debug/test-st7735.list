
test-st7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002aa0  0800807c  0800807c  0001807c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab1c  0800ab1c  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  0800ab1c  0800ab1c  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ab1c  0800ab1c  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab1c  0800ab1c  0001ab1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab20  0800ab20  0001ab20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800ab24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  2000004c  0800ab70  0002004c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  0800ab70  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000952b  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d36  00000000  00000000  0002959f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0002b2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  0002bbe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011841  00000000  00000000  0002c3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf47  00000000  00000000  0003dc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065509  00000000  00000000  00049b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000af069  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000231c  00000000  00000000  000af0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000004c 	.word	0x2000004c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008064 	.word	0x08008064

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000050 	.word	0x20000050
 8000100:	08008064 	.word	0x08008064

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fb8b 	bl	8000b14 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fb17 	bl	8000a3c <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fb7d 	bl	8000b14 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fb73 	bl	8000b14 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb23 	bl	8000a88 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fb19 	bl	8000a88 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_f2uiz>:
 8000464:	219e      	movs	r1, #158	; 0x9e
 8000466:	b510      	push	{r4, lr}
 8000468:	05c9      	lsls	r1, r1, #23
 800046a:	1c04      	adds	r4, r0, #0
 800046c:	f7ff fff0 	bl	8000450 <__aeabi_fcmpge>
 8000470:	2800      	cmp	r0, #0
 8000472:	d103      	bne.n	800047c <__aeabi_f2uiz+0x18>
 8000474:	1c20      	adds	r0, r4, #0
 8000476:	f000 fe65 	bl	8001144 <__aeabi_f2iz>
 800047a:	bd10      	pop	{r4, pc}
 800047c:	219e      	movs	r1, #158	; 0x9e
 800047e:	1c20      	adds	r0, r4, #0
 8000480:	05c9      	lsls	r1, r1, #23
 8000482:	f000 fcb1 	bl	8000de8 <__aeabi_fsub>
 8000486:	f000 fe5d 	bl	8001144 <__aeabi_f2iz>
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	061b      	lsls	r3, r3, #24
 800048e:	469c      	mov	ip, r3
 8000490:	4460      	add	r0, ip
 8000492:	e7f2      	b.n	800047a <__aeabi_f2uiz+0x16>

08000494 <__aeabi_d2uiz>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	2200      	movs	r2, #0
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <__aeabi_d2uiz+0x38>)
 800049a:	0004      	movs	r4, r0
 800049c:	000d      	movs	r5, r1
 800049e:	f002 f937 	bl	8002710 <__aeabi_dcmpge>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d104      	bne.n	80004b0 <__aeabi_d2uiz+0x1c>
 80004a6:	0020      	movs	r0, r4
 80004a8:	0029      	movs	r1, r5
 80004aa:	f001 ffa1 	bl	80023f0 <__aeabi_d2iz>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <__aeabi_d2uiz+0x38>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	0020      	movs	r0, r4
 80004b6:	0029      	movs	r1, r5
 80004b8:	f001 fc08 	bl	8001ccc <__aeabi_dsub>
 80004bc:	f001 ff98 	bl	80023f0 <__aeabi_d2iz>
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	061b      	lsls	r3, r3, #24
 80004c4:	469c      	mov	ip, r3
 80004c6:	4460      	add	r0, ip
 80004c8:	e7f1      	b.n	80004ae <__aeabi_d2uiz+0x1a>
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	41e00000 	.word	0x41e00000

080004d0 <__aeabi_fadd>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	46c6      	mov	lr, r8
 80004d4:	0243      	lsls	r3, r0, #9
 80004d6:	0a5b      	lsrs	r3, r3, #9
 80004d8:	024e      	lsls	r6, r1, #9
 80004da:	0045      	lsls	r5, r0, #1
 80004dc:	004f      	lsls	r7, r1, #1
 80004de:	00da      	lsls	r2, r3, #3
 80004e0:	0fc4      	lsrs	r4, r0, #31
 80004e2:	469c      	mov	ip, r3
 80004e4:	0a70      	lsrs	r0, r6, #9
 80004e6:	4690      	mov	r8, r2
 80004e8:	b500      	push	{lr}
 80004ea:	0e2d      	lsrs	r5, r5, #24
 80004ec:	0e3f      	lsrs	r7, r7, #24
 80004ee:	0fc9      	lsrs	r1, r1, #31
 80004f0:	09b6      	lsrs	r6, r6, #6
 80004f2:	428c      	cmp	r4, r1
 80004f4:	d04b      	beq.n	800058e <__aeabi_fadd+0xbe>
 80004f6:	1bea      	subs	r2, r5, r7
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	dd36      	ble.n	800056a <__aeabi_fadd+0x9a>
 80004fc:	2f00      	cmp	r7, #0
 80004fe:	d061      	beq.n	80005c4 <__aeabi_fadd+0xf4>
 8000500:	2dff      	cmp	r5, #255	; 0xff
 8000502:	d100      	bne.n	8000506 <__aeabi_fadd+0x36>
 8000504:	e0ad      	b.n	8000662 <__aeabi_fadd+0x192>
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	04db      	lsls	r3, r3, #19
 800050a:	431e      	orrs	r6, r3
 800050c:	2a1b      	cmp	r2, #27
 800050e:	dc00      	bgt.n	8000512 <__aeabi_fadd+0x42>
 8000510:	e0d3      	b.n	80006ba <__aeabi_fadd+0x1ea>
 8000512:	2001      	movs	r0, #1
 8000514:	4643      	mov	r3, r8
 8000516:	1a18      	subs	r0, r3, r0
 8000518:	0143      	lsls	r3, r0, #5
 800051a:	d400      	bmi.n	800051e <__aeabi_fadd+0x4e>
 800051c:	e08c      	b.n	8000638 <__aeabi_fadd+0x168>
 800051e:	0180      	lsls	r0, r0, #6
 8000520:	0987      	lsrs	r7, r0, #6
 8000522:	0038      	movs	r0, r7
 8000524:	f002 f8fe 	bl	8002724 <__clzsi2>
 8000528:	3805      	subs	r0, #5
 800052a:	4087      	lsls	r7, r0
 800052c:	4285      	cmp	r5, r0
 800052e:	dc00      	bgt.n	8000532 <__aeabi_fadd+0x62>
 8000530:	e0b6      	b.n	80006a0 <__aeabi_fadd+0x1d0>
 8000532:	1a2d      	subs	r5, r5, r0
 8000534:	48b3      	ldr	r0, [pc, #716]	; (8000804 <__aeabi_fadd+0x334>)
 8000536:	4038      	ands	r0, r7
 8000538:	0743      	lsls	r3, r0, #29
 800053a:	d004      	beq.n	8000546 <__aeabi_fadd+0x76>
 800053c:	230f      	movs	r3, #15
 800053e:	4003      	ands	r3, r0
 8000540:	2b04      	cmp	r3, #4
 8000542:	d000      	beq.n	8000546 <__aeabi_fadd+0x76>
 8000544:	3004      	adds	r0, #4
 8000546:	0143      	lsls	r3, r0, #5
 8000548:	d400      	bmi.n	800054c <__aeabi_fadd+0x7c>
 800054a:	e078      	b.n	800063e <__aeabi_fadd+0x16e>
 800054c:	1c6a      	adds	r2, r5, #1
 800054e:	2dfe      	cmp	r5, #254	; 0xfe
 8000550:	d065      	beq.n	800061e <__aeabi_fadd+0x14e>
 8000552:	0180      	lsls	r0, r0, #6
 8000554:	0a43      	lsrs	r3, r0, #9
 8000556:	469c      	mov	ip, r3
 8000558:	b2d2      	uxtb	r2, r2
 800055a:	4663      	mov	r3, ip
 800055c:	05d0      	lsls	r0, r2, #23
 800055e:	4318      	orrs	r0, r3
 8000560:	07e4      	lsls	r4, r4, #31
 8000562:	4320      	orrs	r0, r4
 8000564:	bc80      	pop	{r7}
 8000566:	46b8      	mov	r8, r7
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	2a00      	cmp	r2, #0
 800056c:	d035      	beq.n	80005da <__aeabi_fadd+0x10a>
 800056e:	1b7a      	subs	r2, r7, r5
 8000570:	2d00      	cmp	r5, #0
 8000572:	d000      	beq.n	8000576 <__aeabi_fadd+0xa6>
 8000574:	e0af      	b.n	80006d6 <__aeabi_fadd+0x206>
 8000576:	4643      	mov	r3, r8
 8000578:	2b00      	cmp	r3, #0
 800057a:	d100      	bne.n	800057e <__aeabi_fadd+0xae>
 800057c:	e0a7      	b.n	80006ce <__aeabi_fadd+0x1fe>
 800057e:	1e53      	subs	r3, r2, #1
 8000580:	2a01      	cmp	r2, #1
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0xb6>
 8000584:	e12f      	b.n	80007e6 <__aeabi_fadd+0x316>
 8000586:	2aff      	cmp	r2, #255	; 0xff
 8000588:	d069      	beq.n	800065e <__aeabi_fadd+0x18e>
 800058a:	001a      	movs	r2, r3
 800058c:	e0aa      	b.n	80006e4 <__aeabi_fadd+0x214>
 800058e:	1be9      	subs	r1, r5, r7
 8000590:	2900      	cmp	r1, #0
 8000592:	dd70      	ble.n	8000676 <__aeabi_fadd+0x1a6>
 8000594:	2f00      	cmp	r7, #0
 8000596:	d037      	beq.n	8000608 <__aeabi_fadd+0x138>
 8000598:	2dff      	cmp	r5, #255	; 0xff
 800059a:	d062      	beq.n	8000662 <__aeabi_fadd+0x192>
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	04db      	lsls	r3, r3, #19
 80005a0:	431e      	orrs	r6, r3
 80005a2:	291b      	cmp	r1, #27
 80005a4:	dc00      	bgt.n	80005a8 <__aeabi_fadd+0xd8>
 80005a6:	e0b0      	b.n	800070a <__aeabi_fadd+0x23a>
 80005a8:	2001      	movs	r0, #1
 80005aa:	4440      	add	r0, r8
 80005ac:	0143      	lsls	r3, r0, #5
 80005ae:	d543      	bpl.n	8000638 <__aeabi_fadd+0x168>
 80005b0:	3501      	adds	r5, #1
 80005b2:	2dff      	cmp	r5, #255	; 0xff
 80005b4:	d033      	beq.n	800061e <__aeabi_fadd+0x14e>
 80005b6:	2301      	movs	r3, #1
 80005b8:	4a93      	ldr	r2, [pc, #588]	; (8000808 <__aeabi_fadd+0x338>)
 80005ba:	4003      	ands	r3, r0
 80005bc:	0840      	lsrs	r0, r0, #1
 80005be:	4010      	ands	r0, r2
 80005c0:	4318      	orrs	r0, r3
 80005c2:	e7b9      	b.n	8000538 <__aeabi_fadd+0x68>
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0xfa>
 80005c8:	e083      	b.n	80006d2 <__aeabi_fadd+0x202>
 80005ca:	1e51      	subs	r1, r2, #1
 80005cc:	2a01      	cmp	r2, #1
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0x102>
 80005d0:	e0d8      	b.n	8000784 <__aeabi_fadd+0x2b4>
 80005d2:	2aff      	cmp	r2, #255	; 0xff
 80005d4:	d045      	beq.n	8000662 <__aeabi_fadd+0x192>
 80005d6:	000a      	movs	r2, r1
 80005d8:	e798      	b.n	800050c <__aeabi_fadd+0x3c>
 80005da:	27fe      	movs	r7, #254	; 0xfe
 80005dc:	1c6a      	adds	r2, r5, #1
 80005de:	4217      	tst	r7, r2
 80005e0:	d000      	beq.n	80005e4 <__aeabi_fadd+0x114>
 80005e2:	e086      	b.n	80006f2 <__aeabi_fadd+0x222>
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d000      	beq.n	80005ea <__aeabi_fadd+0x11a>
 80005e8:	e0b7      	b.n	800075a <__aeabi_fadd+0x28a>
 80005ea:	4643      	mov	r3, r8
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x122>
 80005f0:	e0f3      	b.n	80007da <__aeabi_fadd+0x30a>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d0b0      	beq.n	800055a <__aeabi_fadd+0x8a>
 80005f8:	1b98      	subs	r0, r3, r6
 80005fa:	0143      	lsls	r3, r0, #5
 80005fc:	d400      	bmi.n	8000600 <__aeabi_fadd+0x130>
 80005fe:	e0fa      	b.n	80007f6 <__aeabi_fadd+0x326>
 8000600:	4643      	mov	r3, r8
 8000602:	000c      	movs	r4, r1
 8000604:	1af0      	subs	r0, r6, r3
 8000606:	e797      	b.n	8000538 <__aeabi_fadd+0x68>
 8000608:	2e00      	cmp	r6, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x13e>
 800060c:	e0c8      	b.n	80007a0 <__aeabi_fadd+0x2d0>
 800060e:	1e4a      	subs	r2, r1, #1
 8000610:	2901      	cmp	r1, #1
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x146>
 8000614:	e0ae      	b.n	8000774 <__aeabi_fadd+0x2a4>
 8000616:	29ff      	cmp	r1, #255	; 0xff
 8000618:	d023      	beq.n	8000662 <__aeabi_fadd+0x192>
 800061a:	0011      	movs	r1, r2
 800061c:	e7c1      	b.n	80005a2 <__aeabi_fadd+0xd2>
 800061e:	2300      	movs	r3, #0
 8000620:	22ff      	movs	r2, #255	; 0xff
 8000622:	469c      	mov	ip, r3
 8000624:	e799      	b.n	800055a <__aeabi_fadd+0x8a>
 8000626:	21fe      	movs	r1, #254	; 0xfe
 8000628:	1c6a      	adds	r2, r5, #1
 800062a:	4211      	tst	r1, r2
 800062c:	d077      	beq.n	800071e <__aeabi_fadd+0x24e>
 800062e:	2aff      	cmp	r2, #255	; 0xff
 8000630:	d0f5      	beq.n	800061e <__aeabi_fadd+0x14e>
 8000632:	0015      	movs	r5, r2
 8000634:	4446      	add	r6, r8
 8000636:	0870      	lsrs	r0, r6, #1
 8000638:	0743      	lsls	r3, r0, #29
 800063a:	d000      	beq.n	800063e <__aeabi_fadd+0x16e>
 800063c:	e77e      	b.n	800053c <__aeabi_fadd+0x6c>
 800063e:	08c3      	lsrs	r3, r0, #3
 8000640:	2dff      	cmp	r5, #255	; 0xff
 8000642:	d00e      	beq.n	8000662 <__aeabi_fadd+0x192>
 8000644:	025b      	lsls	r3, r3, #9
 8000646:	0a5b      	lsrs	r3, r3, #9
 8000648:	469c      	mov	ip, r3
 800064a:	b2ea      	uxtb	r2, r5
 800064c:	e785      	b.n	800055a <__aeabi_fadd+0x8a>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d007      	beq.n	8000662 <__aeabi_fadd+0x192>
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	03d2      	lsls	r2, r2, #15
 8000656:	4213      	tst	r3, r2
 8000658:	d003      	beq.n	8000662 <__aeabi_fadd+0x192>
 800065a:	4210      	tst	r0, r2
 800065c:	d101      	bne.n	8000662 <__aeabi_fadd+0x192>
 800065e:	000c      	movs	r4, r1
 8000660:	0003      	movs	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0db      	beq.n	800061e <__aeabi_fadd+0x14e>
 8000666:	2080      	movs	r0, #128	; 0x80
 8000668:	03c0      	lsls	r0, r0, #15
 800066a:	4318      	orrs	r0, r3
 800066c:	0240      	lsls	r0, r0, #9
 800066e:	0a43      	lsrs	r3, r0, #9
 8000670:	469c      	mov	ip, r3
 8000672:	22ff      	movs	r2, #255	; 0xff
 8000674:	e771      	b.n	800055a <__aeabi_fadd+0x8a>
 8000676:	2900      	cmp	r1, #0
 8000678:	d0d5      	beq.n	8000626 <__aeabi_fadd+0x156>
 800067a:	1b7a      	subs	r2, r7, r5
 800067c:	2d00      	cmp	r5, #0
 800067e:	d160      	bne.n	8000742 <__aeabi_fadd+0x272>
 8000680:	4643      	mov	r3, r8
 8000682:	2b00      	cmp	r3, #0
 8000684:	d024      	beq.n	80006d0 <__aeabi_fadd+0x200>
 8000686:	1e53      	subs	r3, r2, #1
 8000688:	2a01      	cmp	r2, #1
 800068a:	d073      	beq.n	8000774 <__aeabi_fadd+0x2a4>
 800068c:	2aff      	cmp	r2, #255	; 0xff
 800068e:	d0e7      	beq.n	8000660 <__aeabi_fadd+0x190>
 8000690:	001a      	movs	r2, r3
 8000692:	2a1b      	cmp	r2, #27
 8000694:	dc00      	bgt.n	8000698 <__aeabi_fadd+0x1c8>
 8000696:	e085      	b.n	80007a4 <__aeabi_fadd+0x2d4>
 8000698:	2001      	movs	r0, #1
 800069a:	003d      	movs	r5, r7
 800069c:	1980      	adds	r0, r0, r6
 800069e:	e785      	b.n	80005ac <__aeabi_fadd+0xdc>
 80006a0:	2320      	movs	r3, #32
 80006a2:	003a      	movs	r2, r7
 80006a4:	1b45      	subs	r5, r0, r5
 80006a6:	0038      	movs	r0, r7
 80006a8:	3501      	adds	r5, #1
 80006aa:	40ea      	lsrs	r2, r5
 80006ac:	1b5d      	subs	r5, r3, r5
 80006ae:	40a8      	lsls	r0, r5
 80006b0:	1e43      	subs	r3, r0, #1
 80006b2:	4198      	sbcs	r0, r3
 80006b4:	2500      	movs	r5, #0
 80006b6:	4310      	orrs	r0, r2
 80006b8:	e73e      	b.n	8000538 <__aeabi_fadd+0x68>
 80006ba:	2320      	movs	r3, #32
 80006bc:	0030      	movs	r0, r6
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	0031      	movs	r1, r6
 80006c2:	4098      	lsls	r0, r3
 80006c4:	40d1      	lsrs	r1, r2
 80006c6:	1e43      	subs	r3, r0, #1
 80006c8:	4198      	sbcs	r0, r3
 80006ca:	4308      	orrs	r0, r1
 80006cc:	e722      	b.n	8000514 <__aeabi_fadd+0x44>
 80006ce:	000c      	movs	r4, r1
 80006d0:	0003      	movs	r3, r0
 80006d2:	0015      	movs	r5, r2
 80006d4:	e7b4      	b.n	8000640 <__aeabi_fadd+0x170>
 80006d6:	2fff      	cmp	r7, #255	; 0xff
 80006d8:	d0c1      	beq.n	800065e <__aeabi_fadd+0x18e>
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	4640      	mov	r0, r8
 80006de:	04db      	lsls	r3, r3, #19
 80006e0:	4318      	orrs	r0, r3
 80006e2:	4680      	mov	r8, r0
 80006e4:	2a1b      	cmp	r2, #27
 80006e6:	dd51      	ble.n	800078c <__aeabi_fadd+0x2bc>
 80006e8:	2001      	movs	r0, #1
 80006ea:	000c      	movs	r4, r1
 80006ec:	003d      	movs	r5, r7
 80006ee:	1a30      	subs	r0, r6, r0
 80006f0:	e712      	b.n	8000518 <__aeabi_fadd+0x48>
 80006f2:	4643      	mov	r3, r8
 80006f4:	1b9f      	subs	r7, r3, r6
 80006f6:	017b      	lsls	r3, r7, #5
 80006f8:	d42b      	bmi.n	8000752 <__aeabi_fadd+0x282>
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	d000      	beq.n	8000700 <__aeabi_fadd+0x230>
 80006fe:	e710      	b.n	8000522 <__aeabi_fadd+0x52>
 8000700:	2300      	movs	r3, #0
 8000702:	2400      	movs	r4, #0
 8000704:	2200      	movs	r2, #0
 8000706:	469c      	mov	ip, r3
 8000708:	e727      	b.n	800055a <__aeabi_fadd+0x8a>
 800070a:	2320      	movs	r3, #32
 800070c:	0032      	movs	r2, r6
 800070e:	0030      	movs	r0, r6
 8000710:	40ca      	lsrs	r2, r1
 8000712:	1a59      	subs	r1, r3, r1
 8000714:	4088      	lsls	r0, r1
 8000716:	1e43      	subs	r3, r0, #1
 8000718:	4198      	sbcs	r0, r3
 800071a:	4310      	orrs	r0, r2
 800071c:	e745      	b.n	80005aa <__aeabi_fadd+0xda>
 800071e:	2d00      	cmp	r5, #0
 8000720:	d14a      	bne.n	80007b8 <__aeabi_fadd+0x2e8>
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d063      	beq.n	80007f0 <__aeabi_fadd+0x320>
 8000728:	2200      	movs	r2, #0
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x260>
 800072e:	e714      	b.n	800055a <__aeabi_fadd+0x8a>
 8000730:	0030      	movs	r0, r6
 8000732:	4440      	add	r0, r8
 8000734:	0143      	lsls	r3, r0, #5
 8000736:	d400      	bmi.n	800073a <__aeabi_fadd+0x26a>
 8000738:	e77e      	b.n	8000638 <__aeabi_fadd+0x168>
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <__aeabi_fadd+0x334>)
 800073c:	3501      	adds	r5, #1
 800073e:	4018      	ands	r0, r3
 8000740:	e77a      	b.n	8000638 <__aeabi_fadd+0x168>
 8000742:	2fff      	cmp	r7, #255	; 0xff
 8000744:	d08c      	beq.n	8000660 <__aeabi_fadd+0x190>
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	4641      	mov	r1, r8
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	4319      	orrs	r1, r3
 800074e:	4688      	mov	r8, r1
 8000750:	e79f      	b.n	8000692 <__aeabi_fadd+0x1c2>
 8000752:	4643      	mov	r3, r8
 8000754:	000c      	movs	r4, r1
 8000756:	1af7      	subs	r7, r6, r3
 8000758:	e6e3      	b.n	8000522 <__aeabi_fadd+0x52>
 800075a:	4642      	mov	r2, r8
 800075c:	2a00      	cmp	r2, #0
 800075e:	d000      	beq.n	8000762 <__aeabi_fadd+0x292>
 8000760:	e775      	b.n	800064e <__aeabi_fadd+0x17e>
 8000762:	2e00      	cmp	r6, #0
 8000764:	d000      	beq.n	8000768 <__aeabi_fadd+0x298>
 8000766:	e77a      	b.n	800065e <__aeabi_fadd+0x18e>
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	03db      	lsls	r3, r3, #15
 800076c:	2400      	movs	r4, #0
 800076e:	469c      	mov	ip, r3
 8000770:	22ff      	movs	r2, #255	; 0xff
 8000772:	e6f2      	b.n	800055a <__aeabi_fadd+0x8a>
 8000774:	0030      	movs	r0, r6
 8000776:	4440      	add	r0, r8
 8000778:	2501      	movs	r5, #1
 800077a:	0143      	lsls	r3, r0, #5
 800077c:	d400      	bmi.n	8000780 <__aeabi_fadd+0x2b0>
 800077e:	e75b      	b.n	8000638 <__aeabi_fadd+0x168>
 8000780:	2502      	movs	r5, #2
 8000782:	e718      	b.n	80005b6 <__aeabi_fadd+0xe6>
 8000784:	4643      	mov	r3, r8
 8000786:	2501      	movs	r5, #1
 8000788:	1b98      	subs	r0, r3, r6
 800078a:	e6c5      	b.n	8000518 <__aeabi_fadd+0x48>
 800078c:	2320      	movs	r3, #32
 800078e:	4644      	mov	r4, r8
 8000790:	4640      	mov	r0, r8
 8000792:	40d4      	lsrs	r4, r2
 8000794:	1a9a      	subs	r2, r3, r2
 8000796:	4090      	lsls	r0, r2
 8000798:	1e43      	subs	r3, r0, #1
 800079a:	4198      	sbcs	r0, r3
 800079c:	4320      	orrs	r0, r4
 800079e:	e7a4      	b.n	80006ea <__aeabi_fadd+0x21a>
 80007a0:	000d      	movs	r5, r1
 80007a2:	e74d      	b.n	8000640 <__aeabi_fadd+0x170>
 80007a4:	2320      	movs	r3, #32
 80007a6:	4641      	mov	r1, r8
 80007a8:	4640      	mov	r0, r8
 80007aa:	40d1      	lsrs	r1, r2
 80007ac:	1a9a      	subs	r2, r3, r2
 80007ae:	4090      	lsls	r0, r2
 80007b0:	1e43      	subs	r3, r0, #1
 80007b2:	4198      	sbcs	r0, r3
 80007b4:	4308      	orrs	r0, r1
 80007b6:	e770      	b.n	800069a <__aeabi_fadd+0x1ca>
 80007b8:	4642      	mov	r2, r8
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fadd+0x2f0>
 80007be:	e74f      	b.n	8000660 <__aeabi_fadd+0x190>
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0x2f6>
 80007c4:	e74d      	b.n	8000662 <__aeabi_fadd+0x192>
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	03d2      	lsls	r2, r2, #15
 80007ca:	4213      	tst	r3, r2
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x300>
 80007ce:	e748      	b.n	8000662 <__aeabi_fadd+0x192>
 80007d0:	4210      	tst	r0, r2
 80007d2:	d000      	beq.n	80007d6 <__aeabi_fadd+0x306>
 80007d4:	e745      	b.n	8000662 <__aeabi_fadd+0x192>
 80007d6:	0003      	movs	r3, r0
 80007d8:	e743      	b.n	8000662 <__aeabi_fadd+0x192>
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d090      	beq.n	8000700 <__aeabi_fadd+0x230>
 80007de:	000c      	movs	r4, r1
 80007e0:	4684      	mov	ip, r0
 80007e2:	2200      	movs	r2, #0
 80007e4:	e6b9      	b.n	800055a <__aeabi_fadd+0x8a>
 80007e6:	4643      	mov	r3, r8
 80007e8:	000c      	movs	r4, r1
 80007ea:	1af0      	subs	r0, r6, r3
 80007ec:	3501      	adds	r5, #1
 80007ee:	e693      	b.n	8000518 <__aeabi_fadd+0x48>
 80007f0:	4684      	mov	ip, r0
 80007f2:	2200      	movs	r2, #0
 80007f4:	e6b1      	b.n	800055a <__aeabi_fadd+0x8a>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d000      	beq.n	80007fc <__aeabi_fadd+0x32c>
 80007fa:	e71d      	b.n	8000638 <__aeabi_fadd+0x168>
 80007fc:	2300      	movs	r3, #0
 80007fe:	2400      	movs	r4, #0
 8000800:	469c      	mov	ip, r3
 8000802:	e6aa      	b.n	800055a <__aeabi_fadd+0x8a>
 8000804:	fbffffff 	.word	0xfbffffff
 8000808:	7dffffff 	.word	0x7dffffff

0800080c <__aeabi_fdiv>:
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080e:	464f      	mov	r7, r9
 8000810:	4646      	mov	r6, r8
 8000812:	46d6      	mov	lr, sl
 8000814:	0245      	lsls	r5, r0, #9
 8000816:	b5c0      	push	{r6, r7, lr}
 8000818:	0047      	lsls	r7, r0, #1
 800081a:	1c0c      	adds	r4, r1, #0
 800081c:	0a6d      	lsrs	r5, r5, #9
 800081e:	0e3f      	lsrs	r7, r7, #24
 8000820:	0fc6      	lsrs	r6, r0, #31
 8000822:	2f00      	cmp	r7, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fdiv+0x1c>
 8000826:	e070      	b.n	800090a <__aeabi_fdiv+0xfe>
 8000828:	2fff      	cmp	r7, #255	; 0xff
 800082a:	d100      	bne.n	800082e <__aeabi_fdiv+0x22>
 800082c:	e075      	b.n	800091a <__aeabi_fdiv+0x10e>
 800082e:	00eb      	lsls	r3, r5, #3
 8000830:	2580      	movs	r5, #128	; 0x80
 8000832:	04ed      	lsls	r5, r5, #19
 8000834:	431d      	orrs	r5, r3
 8000836:	2300      	movs	r3, #0
 8000838:	4699      	mov	r9, r3
 800083a:	469a      	mov	sl, r3
 800083c:	3f7f      	subs	r7, #127	; 0x7f
 800083e:	0260      	lsls	r0, r4, #9
 8000840:	0a43      	lsrs	r3, r0, #9
 8000842:	4698      	mov	r8, r3
 8000844:	0063      	lsls	r3, r4, #1
 8000846:	0e1b      	lsrs	r3, r3, #24
 8000848:	0fe4      	lsrs	r4, r4, #31
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04e      	beq.n	80008ec <__aeabi_fdiv+0xe0>
 800084e:	2bff      	cmp	r3, #255	; 0xff
 8000850:	d046      	beq.n	80008e0 <__aeabi_fdiv+0xd4>
 8000852:	4642      	mov	r2, r8
 8000854:	00d0      	lsls	r0, r2, #3
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	04d2      	lsls	r2, r2, #19
 800085a:	4302      	orrs	r2, r0
 800085c:	4690      	mov	r8, r2
 800085e:	2200      	movs	r2, #0
 8000860:	3b7f      	subs	r3, #127	; 0x7f
 8000862:	0031      	movs	r1, r6
 8000864:	1aff      	subs	r7, r7, r3
 8000866:	464b      	mov	r3, r9
 8000868:	4061      	eors	r1, r4
 800086a:	b2c9      	uxtb	r1, r1
 800086c:	4313      	orrs	r3, r2
 800086e:	2b0f      	cmp	r3, #15
 8000870:	d900      	bls.n	8000874 <__aeabi_fdiv+0x68>
 8000872:	e0b5      	b.n	80009e0 <__aeabi_fdiv+0x1d4>
 8000874:	486e      	ldr	r0, [pc, #440]	; (8000a30 <__aeabi_fdiv+0x224>)
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	58c3      	ldr	r3, [r0, r3]
 800087a:	469f      	mov	pc, r3
 800087c:	2300      	movs	r3, #0
 800087e:	4698      	mov	r8, r3
 8000880:	0026      	movs	r6, r4
 8000882:	4645      	mov	r5, r8
 8000884:	4692      	mov	sl, r2
 8000886:	4653      	mov	r3, sl
 8000888:	2b02      	cmp	r3, #2
 800088a:	d100      	bne.n	800088e <__aeabi_fdiv+0x82>
 800088c:	e089      	b.n	80009a2 <__aeabi_fdiv+0x196>
 800088e:	2b03      	cmp	r3, #3
 8000890:	d100      	bne.n	8000894 <__aeabi_fdiv+0x88>
 8000892:	e09e      	b.n	80009d2 <__aeabi_fdiv+0x1c6>
 8000894:	2b01      	cmp	r3, #1
 8000896:	d018      	beq.n	80008ca <__aeabi_fdiv+0xbe>
 8000898:	003b      	movs	r3, r7
 800089a:	337f      	adds	r3, #127	; 0x7f
 800089c:	2b00      	cmp	r3, #0
 800089e:	dd69      	ble.n	8000974 <__aeabi_fdiv+0x168>
 80008a0:	076a      	lsls	r2, r5, #29
 80008a2:	d004      	beq.n	80008ae <__aeabi_fdiv+0xa2>
 80008a4:	220f      	movs	r2, #15
 80008a6:	402a      	ands	r2, r5
 80008a8:	2a04      	cmp	r2, #4
 80008aa:	d000      	beq.n	80008ae <__aeabi_fdiv+0xa2>
 80008ac:	3504      	adds	r5, #4
 80008ae:	012a      	lsls	r2, r5, #4
 80008b0:	d503      	bpl.n	80008ba <__aeabi_fdiv+0xae>
 80008b2:	4b60      	ldr	r3, [pc, #384]	; (8000a34 <__aeabi_fdiv+0x228>)
 80008b4:	401d      	ands	r5, r3
 80008b6:	003b      	movs	r3, r7
 80008b8:	3380      	adds	r3, #128	; 0x80
 80008ba:	2bfe      	cmp	r3, #254	; 0xfe
 80008bc:	dd00      	ble.n	80008c0 <__aeabi_fdiv+0xb4>
 80008be:	e070      	b.n	80009a2 <__aeabi_fdiv+0x196>
 80008c0:	01ad      	lsls	r5, r5, #6
 80008c2:	0a6d      	lsrs	r5, r5, #9
 80008c4:	b2d8      	uxtb	r0, r3
 80008c6:	e002      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80008c8:	000e      	movs	r6, r1
 80008ca:	2000      	movs	r0, #0
 80008cc:	2500      	movs	r5, #0
 80008ce:	05c0      	lsls	r0, r0, #23
 80008d0:	4328      	orrs	r0, r5
 80008d2:	07f6      	lsls	r6, r6, #31
 80008d4:	4330      	orrs	r0, r6
 80008d6:	bce0      	pop	{r5, r6, r7}
 80008d8:	46ba      	mov	sl, r7
 80008da:	46b1      	mov	r9, r6
 80008dc:	46a8      	mov	r8, r5
 80008de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e0:	4643      	mov	r3, r8
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d13f      	bne.n	8000966 <__aeabi_fdiv+0x15a>
 80008e6:	2202      	movs	r2, #2
 80008e8:	3fff      	subs	r7, #255	; 0xff
 80008ea:	e003      	b.n	80008f4 <__aeabi_fdiv+0xe8>
 80008ec:	4643      	mov	r3, r8
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fdiv+0x142>
 80008f2:	2201      	movs	r2, #1
 80008f4:	0031      	movs	r1, r6
 80008f6:	464b      	mov	r3, r9
 80008f8:	4061      	eors	r1, r4
 80008fa:	b2c9      	uxtb	r1, r1
 80008fc:	4313      	orrs	r3, r2
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	d834      	bhi.n	800096c <__aeabi_fdiv+0x160>
 8000902:	484d      	ldr	r0, [pc, #308]	; (8000a38 <__aeabi_fdiv+0x22c>)
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	58c3      	ldr	r3, [r0, r3]
 8000908:	469f      	mov	pc, r3
 800090a:	2d00      	cmp	r5, #0
 800090c:	d113      	bne.n	8000936 <__aeabi_fdiv+0x12a>
 800090e:	2304      	movs	r3, #4
 8000910:	4699      	mov	r9, r3
 8000912:	3b03      	subs	r3, #3
 8000914:	2700      	movs	r7, #0
 8000916:	469a      	mov	sl, r3
 8000918:	e791      	b.n	800083e <__aeabi_fdiv+0x32>
 800091a:	2d00      	cmp	r5, #0
 800091c:	d105      	bne.n	800092a <__aeabi_fdiv+0x11e>
 800091e:	2308      	movs	r3, #8
 8000920:	4699      	mov	r9, r3
 8000922:	3b06      	subs	r3, #6
 8000924:	27ff      	movs	r7, #255	; 0xff
 8000926:	469a      	mov	sl, r3
 8000928:	e789      	b.n	800083e <__aeabi_fdiv+0x32>
 800092a:	230c      	movs	r3, #12
 800092c:	4699      	mov	r9, r3
 800092e:	3b09      	subs	r3, #9
 8000930:	27ff      	movs	r7, #255	; 0xff
 8000932:	469a      	mov	sl, r3
 8000934:	e783      	b.n	800083e <__aeabi_fdiv+0x32>
 8000936:	0028      	movs	r0, r5
 8000938:	f001 fef4 	bl	8002724 <__clzsi2>
 800093c:	2776      	movs	r7, #118	; 0x76
 800093e:	1f43      	subs	r3, r0, #5
 8000940:	409d      	lsls	r5, r3
 8000942:	2300      	movs	r3, #0
 8000944:	427f      	negs	r7, r7
 8000946:	4699      	mov	r9, r3
 8000948:	469a      	mov	sl, r3
 800094a:	1a3f      	subs	r7, r7, r0
 800094c:	e777      	b.n	800083e <__aeabi_fdiv+0x32>
 800094e:	4640      	mov	r0, r8
 8000950:	f001 fee8 	bl	8002724 <__clzsi2>
 8000954:	4642      	mov	r2, r8
 8000956:	1f43      	subs	r3, r0, #5
 8000958:	409a      	lsls	r2, r3
 800095a:	2376      	movs	r3, #118	; 0x76
 800095c:	425b      	negs	r3, r3
 800095e:	4690      	mov	r8, r2
 8000960:	1a1b      	subs	r3, r3, r0
 8000962:	2200      	movs	r2, #0
 8000964:	e77d      	b.n	8000862 <__aeabi_fdiv+0x56>
 8000966:	23ff      	movs	r3, #255	; 0xff
 8000968:	2203      	movs	r2, #3
 800096a:	e77a      	b.n	8000862 <__aeabi_fdiv+0x56>
 800096c:	000e      	movs	r6, r1
 800096e:	20ff      	movs	r0, #255	; 0xff
 8000970:	2500      	movs	r5, #0
 8000972:	e7ac      	b.n	80008ce <__aeabi_fdiv+0xc2>
 8000974:	2001      	movs	r0, #1
 8000976:	1ac0      	subs	r0, r0, r3
 8000978:	281b      	cmp	r0, #27
 800097a:	dca6      	bgt.n	80008ca <__aeabi_fdiv+0xbe>
 800097c:	379e      	adds	r7, #158	; 0x9e
 800097e:	002a      	movs	r2, r5
 8000980:	40bd      	lsls	r5, r7
 8000982:	40c2      	lsrs	r2, r0
 8000984:	1e6b      	subs	r3, r5, #1
 8000986:	419d      	sbcs	r5, r3
 8000988:	4315      	orrs	r5, r2
 800098a:	076b      	lsls	r3, r5, #29
 800098c:	d004      	beq.n	8000998 <__aeabi_fdiv+0x18c>
 800098e:	230f      	movs	r3, #15
 8000990:	402b      	ands	r3, r5
 8000992:	2b04      	cmp	r3, #4
 8000994:	d000      	beq.n	8000998 <__aeabi_fdiv+0x18c>
 8000996:	3504      	adds	r5, #4
 8000998:	016b      	lsls	r3, r5, #5
 800099a:	d544      	bpl.n	8000a26 <__aeabi_fdiv+0x21a>
 800099c:	2001      	movs	r0, #1
 800099e:	2500      	movs	r5, #0
 80009a0:	e795      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80009a2:	20ff      	movs	r0, #255	; 0xff
 80009a4:	2500      	movs	r5, #0
 80009a6:	e792      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80009a8:	2580      	movs	r5, #128	; 0x80
 80009aa:	2600      	movs	r6, #0
 80009ac:	20ff      	movs	r0, #255	; 0xff
 80009ae:	03ed      	lsls	r5, r5, #15
 80009b0:	e78d      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80009b2:	2300      	movs	r3, #0
 80009b4:	4698      	mov	r8, r3
 80009b6:	2080      	movs	r0, #128	; 0x80
 80009b8:	03c0      	lsls	r0, r0, #15
 80009ba:	4205      	tst	r5, r0
 80009bc:	d009      	beq.n	80009d2 <__aeabi_fdiv+0x1c6>
 80009be:	4643      	mov	r3, r8
 80009c0:	4203      	tst	r3, r0
 80009c2:	d106      	bne.n	80009d2 <__aeabi_fdiv+0x1c6>
 80009c4:	4645      	mov	r5, r8
 80009c6:	4305      	orrs	r5, r0
 80009c8:	026d      	lsls	r5, r5, #9
 80009ca:	0026      	movs	r6, r4
 80009cc:	20ff      	movs	r0, #255	; 0xff
 80009ce:	0a6d      	lsrs	r5, r5, #9
 80009d0:	e77d      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80009d2:	2080      	movs	r0, #128	; 0x80
 80009d4:	03c0      	lsls	r0, r0, #15
 80009d6:	4305      	orrs	r5, r0
 80009d8:	026d      	lsls	r5, r5, #9
 80009da:	20ff      	movs	r0, #255	; 0xff
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	e776      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80009e0:	4642      	mov	r2, r8
 80009e2:	016b      	lsls	r3, r5, #5
 80009e4:	0150      	lsls	r0, r2, #5
 80009e6:	4283      	cmp	r3, r0
 80009e8:	d219      	bcs.n	8000a1e <__aeabi_fdiv+0x212>
 80009ea:	221b      	movs	r2, #27
 80009ec:	2500      	movs	r5, #0
 80009ee:	3f01      	subs	r7, #1
 80009f0:	2601      	movs	r6, #1
 80009f2:	001c      	movs	r4, r3
 80009f4:	006d      	lsls	r5, r5, #1
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2c00      	cmp	r4, #0
 80009fa:	db01      	blt.n	8000a00 <__aeabi_fdiv+0x1f4>
 80009fc:	4298      	cmp	r0, r3
 80009fe:	d801      	bhi.n	8000a04 <__aeabi_fdiv+0x1f8>
 8000a00:	1a1b      	subs	r3, r3, r0
 8000a02:	4335      	orrs	r5, r6
 8000a04:	3a01      	subs	r2, #1
 8000a06:	2a00      	cmp	r2, #0
 8000a08:	d1f3      	bne.n	80009f2 <__aeabi_fdiv+0x1e6>
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4193      	sbcs	r3, r2
 8000a0e:	431d      	orrs	r5, r3
 8000a10:	003b      	movs	r3, r7
 8000a12:	337f      	adds	r3, #127	; 0x7f
 8000a14:	000e      	movs	r6, r1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	dd00      	ble.n	8000a1c <__aeabi_fdiv+0x210>
 8000a1a:	e741      	b.n	80008a0 <__aeabi_fdiv+0x94>
 8000a1c:	e7aa      	b.n	8000974 <__aeabi_fdiv+0x168>
 8000a1e:	221a      	movs	r2, #26
 8000a20:	2501      	movs	r5, #1
 8000a22:	1a1b      	subs	r3, r3, r0
 8000a24:	e7e4      	b.n	80009f0 <__aeabi_fdiv+0x1e4>
 8000a26:	01ad      	lsls	r5, r5, #6
 8000a28:	2000      	movs	r0, #0
 8000a2a:	0a6d      	lsrs	r5, r5, #9
 8000a2c:	e74f      	b.n	80008ce <__aeabi_fdiv+0xc2>
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	08008124 	.word	0x08008124
 8000a34:	f7ffffff 	.word	0xf7ffffff
 8000a38:	08008164 	.word	0x08008164

08000a3c <__eqsf2>:
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	0042      	lsls	r2, r0, #1
 8000a40:	0245      	lsls	r5, r0, #9
 8000a42:	024e      	lsls	r6, r1, #9
 8000a44:	004c      	lsls	r4, r1, #1
 8000a46:	0fc3      	lsrs	r3, r0, #31
 8000a48:	0a6d      	lsrs	r5, r5, #9
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	0e12      	lsrs	r2, r2, #24
 8000a4e:	0a76      	lsrs	r6, r6, #9
 8000a50:	0e24      	lsrs	r4, r4, #24
 8000a52:	0fc9      	lsrs	r1, r1, #31
 8000a54:	2aff      	cmp	r2, #255	; 0xff
 8000a56:	d006      	beq.n	8000a66 <__eqsf2+0x2a>
 8000a58:	2cff      	cmp	r4, #255	; 0xff
 8000a5a:	d003      	beq.n	8000a64 <__eqsf2+0x28>
 8000a5c:	42a2      	cmp	r2, r4
 8000a5e:	d101      	bne.n	8000a64 <__eqsf2+0x28>
 8000a60:	42b5      	cmp	r5, r6
 8000a62:	d006      	beq.n	8000a72 <__eqsf2+0x36>
 8000a64:	bd70      	pop	{r4, r5, r6, pc}
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d1fc      	bne.n	8000a64 <__eqsf2+0x28>
 8000a6a:	2cff      	cmp	r4, #255	; 0xff
 8000a6c:	d1fa      	bne.n	8000a64 <__eqsf2+0x28>
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d1f8      	bne.n	8000a64 <__eqsf2+0x28>
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d006      	beq.n	8000a84 <__eqsf2+0x48>
 8000a76:	2001      	movs	r0, #1
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d1f3      	bne.n	8000a64 <__eqsf2+0x28>
 8000a7c:	0028      	movs	r0, r5
 8000a7e:	1e43      	subs	r3, r0, #1
 8000a80:	4198      	sbcs	r0, r3
 8000a82:	e7ef      	b.n	8000a64 <__eqsf2+0x28>
 8000a84:	2000      	movs	r0, #0
 8000a86:	e7ed      	b.n	8000a64 <__eqsf2+0x28>

08000a88 <__gesf2>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	0245      	lsls	r5, r0, #9
 8000a8e:	024e      	lsls	r6, r1, #9
 8000a90:	004c      	lsls	r4, r1, #1
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a6d      	lsrs	r5, r5, #9
 8000a96:	0e12      	lsrs	r2, r2, #24
 8000a98:	0a76      	lsrs	r6, r6, #9
 8000a9a:	0e24      	lsrs	r4, r4, #24
 8000a9c:	0fc8      	lsrs	r0, r1, #31
 8000a9e:	2aff      	cmp	r2, #255	; 0xff
 8000aa0:	d01b      	beq.n	8000ada <__gesf2+0x52>
 8000aa2:	2cff      	cmp	r4, #255	; 0xff
 8000aa4:	d00e      	beq.n	8000ac4 <__gesf2+0x3c>
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d11b      	bne.n	8000ae2 <__gesf2+0x5a>
 8000aaa:	2c00      	cmp	r4, #0
 8000aac:	d101      	bne.n	8000ab2 <__gesf2+0x2a>
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d01c      	beq.n	8000aec <__gesf2+0x64>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d00c      	beq.n	8000ad0 <__gesf2+0x48>
 8000ab6:	4283      	cmp	r3, r0
 8000ab8:	d01c      	beq.n	8000af4 <__gesf2+0x6c>
 8000aba:	2102      	movs	r1, #2
 8000abc:	1e58      	subs	r0, r3, #1
 8000abe:	4008      	ands	r0, r1
 8000ac0:	3801      	subs	r0, #1
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d122      	bne.n	8000b0e <__gesf2+0x86>
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d1f4      	bne.n	8000ab6 <__gesf2+0x2e>
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d1f2      	bne.n	8000ab6 <__gesf2+0x2e>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d1f6      	bne.n	8000ac2 <__gesf2+0x3a>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	4240      	negs	r0, r0
 8000ad8:	e7f3      	b.n	8000ac2 <__gesf2+0x3a>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d117      	bne.n	8000b0e <__gesf2+0x86>
 8000ade:	2cff      	cmp	r4, #255	; 0xff
 8000ae0:	d0f0      	beq.n	8000ac4 <__gesf2+0x3c>
 8000ae2:	2c00      	cmp	r4, #0
 8000ae4:	d1e7      	bne.n	8000ab6 <__gesf2+0x2e>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d1e5      	bne.n	8000ab6 <__gesf2+0x2e>
 8000aea:	e7e6      	b.n	8000aba <__gesf2+0x32>
 8000aec:	2000      	movs	r0, #0
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d0e7      	beq.n	8000ac2 <__gesf2+0x3a>
 8000af2:	e7e2      	b.n	8000aba <__gesf2+0x32>
 8000af4:	42a2      	cmp	r2, r4
 8000af6:	dc05      	bgt.n	8000b04 <__gesf2+0x7c>
 8000af8:	dbea      	blt.n	8000ad0 <__gesf2+0x48>
 8000afa:	42b5      	cmp	r5, r6
 8000afc:	d802      	bhi.n	8000b04 <__gesf2+0x7c>
 8000afe:	d3e7      	bcc.n	8000ad0 <__gesf2+0x48>
 8000b00:	2000      	movs	r0, #0
 8000b02:	e7de      	b.n	8000ac2 <__gesf2+0x3a>
 8000b04:	4243      	negs	r3, r0
 8000b06:	4158      	adcs	r0, r3
 8000b08:	0040      	lsls	r0, r0, #1
 8000b0a:	3801      	subs	r0, #1
 8000b0c:	e7d9      	b.n	8000ac2 <__gesf2+0x3a>
 8000b0e:	2002      	movs	r0, #2
 8000b10:	4240      	negs	r0, r0
 8000b12:	e7d6      	b.n	8000ac2 <__gesf2+0x3a>

08000b14 <__lesf2>:
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	0042      	lsls	r2, r0, #1
 8000b18:	0245      	lsls	r5, r0, #9
 8000b1a:	024e      	lsls	r6, r1, #9
 8000b1c:	004c      	lsls	r4, r1, #1
 8000b1e:	0fc3      	lsrs	r3, r0, #31
 8000b20:	0a6d      	lsrs	r5, r5, #9
 8000b22:	0e12      	lsrs	r2, r2, #24
 8000b24:	0a76      	lsrs	r6, r6, #9
 8000b26:	0e24      	lsrs	r4, r4, #24
 8000b28:	0fc8      	lsrs	r0, r1, #31
 8000b2a:	2aff      	cmp	r2, #255	; 0xff
 8000b2c:	d00b      	beq.n	8000b46 <__lesf2+0x32>
 8000b2e:	2cff      	cmp	r4, #255	; 0xff
 8000b30:	d00d      	beq.n	8000b4e <__lesf2+0x3a>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d11f      	bne.n	8000b76 <__lesf2+0x62>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d116      	bne.n	8000b68 <__lesf2+0x54>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d114      	bne.n	8000b68 <__lesf2+0x54>
 8000b3e:	2000      	movs	r0, #0
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d010      	beq.n	8000b66 <__lesf2+0x52>
 8000b44:	e009      	b.n	8000b5a <__lesf2+0x46>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d10c      	bne.n	8000b64 <__lesf2+0x50>
 8000b4a:	2cff      	cmp	r4, #255	; 0xff
 8000b4c:	d113      	bne.n	8000b76 <__lesf2+0x62>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d108      	bne.n	8000b64 <__lesf2+0x50>
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	d008      	beq.n	8000b68 <__lesf2+0x54>
 8000b56:	4283      	cmp	r3, r0
 8000b58:	d012      	beq.n	8000b80 <__lesf2+0x6c>
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	1e58      	subs	r0, r3, #1
 8000b5e:	4008      	ands	r0, r1
 8000b60:	3801      	subs	r0, #1
 8000b62:	e000      	b.n	8000b66 <__lesf2+0x52>
 8000b64:	2002      	movs	r0, #2
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d1f4      	bne.n	8000b56 <__lesf2+0x42>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d1fa      	bne.n	8000b66 <__lesf2+0x52>
 8000b70:	2001      	movs	r0, #1
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7f7      	b.n	8000b66 <__lesf2+0x52>
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d1ed      	bne.n	8000b56 <__lesf2+0x42>
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d1eb      	bne.n	8000b56 <__lesf2+0x42>
 8000b7e:	e7ec      	b.n	8000b5a <__lesf2+0x46>
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	dc05      	bgt.n	8000b90 <__lesf2+0x7c>
 8000b84:	dbf2      	blt.n	8000b6c <__lesf2+0x58>
 8000b86:	42b5      	cmp	r5, r6
 8000b88:	d802      	bhi.n	8000b90 <__lesf2+0x7c>
 8000b8a:	d3ef      	bcc.n	8000b6c <__lesf2+0x58>
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	e7ea      	b.n	8000b66 <__lesf2+0x52>
 8000b90:	4243      	negs	r3, r0
 8000b92:	4158      	adcs	r0, r3
 8000b94:	0040      	lsls	r0, r0, #1
 8000b96:	3801      	subs	r0, #1
 8000b98:	e7e5      	b.n	8000b66 <__lesf2+0x52>
 8000b9a:	46c0      	nop			; (mov r8, r8)

08000b9c <__aeabi_fmul>:
 8000b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9e:	464f      	mov	r7, r9
 8000ba0:	4646      	mov	r6, r8
 8000ba2:	46d6      	mov	lr, sl
 8000ba4:	0244      	lsls	r4, r0, #9
 8000ba6:	0045      	lsls	r5, r0, #1
 8000ba8:	b5c0      	push	{r6, r7, lr}
 8000baa:	0a64      	lsrs	r4, r4, #9
 8000bac:	1c0f      	adds	r7, r1, #0
 8000bae:	0e2d      	lsrs	r5, r5, #24
 8000bb0:	0fc6      	lsrs	r6, r0, #31
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fmul+0x1c>
 8000bb6:	e08d      	b.n	8000cd4 <__aeabi_fmul+0x138>
 8000bb8:	2dff      	cmp	r5, #255	; 0xff
 8000bba:	d100      	bne.n	8000bbe <__aeabi_fmul+0x22>
 8000bbc:	e092      	b.n	8000ce4 <__aeabi_fmul+0x148>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2080      	movs	r0, #128	; 0x80
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	00e4      	lsls	r4, r4, #3
 8000bc8:	04c0      	lsls	r0, r0, #19
 8000bca:	4304      	orrs	r4, r0
 8000bcc:	3d7f      	subs	r5, #127	; 0x7f
 8000bce:	0278      	lsls	r0, r7, #9
 8000bd0:	0a43      	lsrs	r3, r0, #9
 8000bd2:	4698      	mov	r8, r3
 8000bd4:	007b      	lsls	r3, r7, #1
 8000bd6:	0e1b      	lsrs	r3, r3, #24
 8000bd8:	0fff      	lsrs	r7, r7, #31
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fmul+0x44>
 8000bde:	e070      	b.n	8000cc2 <__aeabi_fmul+0x126>
 8000be0:	2bff      	cmp	r3, #255	; 0xff
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fmul+0x4a>
 8000be4:	e086      	b.n	8000cf4 <__aeabi_fmul+0x158>
 8000be6:	4642      	mov	r2, r8
 8000be8:	00d0      	lsls	r0, r2, #3
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	3b7f      	subs	r3, #127	; 0x7f
 8000bee:	18ed      	adds	r5, r5, r3
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	04d2      	lsls	r2, r2, #19
 8000bf4:	4302      	orrs	r2, r0
 8000bf6:	4690      	mov	r8, r2
 8000bf8:	469c      	mov	ip, r3
 8000bfa:	0031      	movs	r1, r6
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	4079      	eors	r1, r7
 8000c00:	1c68      	adds	r0, r5, #1
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d81c      	bhi.n	8000c40 <__aeabi_fmul+0xa4>
 8000c06:	4a76      	ldr	r2, [pc, #472]	; (8000de0 <__aeabi_fmul+0x244>)
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	58d3      	ldr	r3, [r2, r3]
 8000c0c:	469f      	mov	pc, r3
 8000c0e:	0039      	movs	r1, r7
 8000c10:	4644      	mov	r4, r8
 8000c12:	46e2      	mov	sl, ip
 8000c14:	4653      	mov	r3, sl
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d00f      	beq.n	8000c3a <__aeabi_fmul+0x9e>
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_fmul+0x84>
 8000c1e:	e0d7      	b.n	8000dd0 <__aeabi_fmul+0x234>
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d137      	bne.n	8000c94 <__aeabi_fmul+0xf8>
 8000c24:	2000      	movs	r0, #0
 8000c26:	2400      	movs	r4, #0
 8000c28:	05c0      	lsls	r0, r0, #23
 8000c2a:	4320      	orrs	r0, r4
 8000c2c:	07c9      	lsls	r1, r1, #31
 8000c2e:	4308      	orrs	r0, r1
 8000c30:	bce0      	pop	{r5, r6, r7}
 8000c32:	46ba      	mov	sl, r7
 8000c34:	46b1      	mov	r9, r6
 8000c36:	46a8      	mov	r8, r5
 8000c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3a:	20ff      	movs	r0, #255	; 0xff
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	e7f3      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000c40:	0c26      	lsrs	r6, r4, #16
 8000c42:	0424      	lsls	r4, r4, #16
 8000c44:	0c22      	lsrs	r2, r4, #16
 8000c46:	4644      	mov	r4, r8
 8000c48:	0424      	lsls	r4, r4, #16
 8000c4a:	0c24      	lsrs	r4, r4, #16
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	0027      	movs	r7, r4
 8000c50:	0c1b      	lsrs	r3, r3, #16
 8000c52:	4357      	muls	r7, r2
 8000c54:	4374      	muls	r4, r6
 8000c56:	435a      	muls	r2, r3
 8000c58:	435e      	muls	r6, r3
 8000c5a:	1912      	adds	r2, r2, r4
 8000c5c:	0c3b      	lsrs	r3, r7, #16
 8000c5e:	189b      	adds	r3, r3, r2
 8000c60:	429c      	cmp	r4, r3
 8000c62:	d903      	bls.n	8000c6c <__aeabi_fmul+0xd0>
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	4694      	mov	ip, r2
 8000c6a:	4466      	add	r6, ip
 8000c6c:	043f      	lsls	r7, r7, #16
 8000c6e:	041a      	lsls	r2, r3, #16
 8000c70:	0c3f      	lsrs	r7, r7, #16
 8000c72:	19d2      	adds	r2, r2, r7
 8000c74:	0194      	lsls	r4, r2, #6
 8000c76:	1e67      	subs	r7, r4, #1
 8000c78:	41bc      	sbcs	r4, r7
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	0e92      	lsrs	r2, r2, #26
 8000c7e:	199b      	adds	r3, r3, r6
 8000c80:	4314      	orrs	r4, r2
 8000c82:	019b      	lsls	r3, r3, #6
 8000c84:	431c      	orrs	r4, r3
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	d400      	bmi.n	8000c8c <__aeabi_fmul+0xf0>
 8000c8a:	e09b      	b.n	8000dc4 <__aeabi_fmul+0x228>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	0862      	lsrs	r2, r4, #1
 8000c90:	401c      	ands	r4, r3
 8000c92:	4314      	orrs	r4, r2
 8000c94:	0002      	movs	r2, r0
 8000c96:	327f      	adds	r2, #127	; 0x7f
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	dd64      	ble.n	8000d66 <__aeabi_fmul+0x1ca>
 8000c9c:	0763      	lsls	r3, r4, #29
 8000c9e:	d004      	beq.n	8000caa <__aeabi_fmul+0x10e>
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	4023      	ands	r3, r4
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fmul+0x10e>
 8000ca8:	3404      	adds	r4, #4
 8000caa:	0123      	lsls	r3, r4, #4
 8000cac:	d503      	bpl.n	8000cb6 <__aeabi_fmul+0x11a>
 8000cae:	0002      	movs	r2, r0
 8000cb0:	4b4c      	ldr	r3, [pc, #304]	; (8000de4 <__aeabi_fmul+0x248>)
 8000cb2:	3280      	adds	r2, #128	; 0x80
 8000cb4:	401c      	ands	r4, r3
 8000cb6:	2afe      	cmp	r2, #254	; 0xfe
 8000cb8:	dcbf      	bgt.n	8000c3a <__aeabi_fmul+0x9e>
 8000cba:	01a4      	lsls	r4, r4, #6
 8000cbc:	0a64      	lsrs	r4, r4, #9
 8000cbe:	b2d0      	uxtb	r0, r2
 8000cc0:	e7b2      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000cc2:	4643      	mov	r3, r8
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d13d      	bne.n	8000d44 <__aeabi_fmul+0x1a8>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	3301      	adds	r3, #1
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	4691      	mov	r9, r2
 8000cd0:	469c      	mov	ip, r3
 8000cd2:	e792      	b.n	8000bfa <__aeabi_fmul+0x5e>
 8000cd4:	2c00      	cmp	r4, #0
 8000cd6:	d129      	bne.n	8000d2c <__aeabi_fmul+0x190>
 8000cd8:	2304      	movs	r3, #4
 8000cda:	4699      	mov	r9, r3
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	2500      	movs	r5, #0
 8000ce0:	469a      	mov	sl, r3
 8000ce2:	e774      	b.n	8000bce <__aeabi_fmul+0x32>
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	d11b      	bne.n	8000d20 <__aeabi_fmul+0x184>
 8000ce8:	2308      	movs	r3, #8
 8000cea:	4699      	mov	r9, r3
 8000cec:	3b06      	subs	r3, #6
 8000cee:	25ff      	movs	r5, #255	; 0xff
 8000cf0:	469a      	mov	sl, r3
 8000cf2:	e76c      	b.n	8000bce <__aeabi_fmul+0x32>
 8000cf4:	4643      	mov	r3, r8
 8000cf6:	35ff      	adds	r5, #255	; 0xff
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10b      	bne.n	8000d14 <__aeabi_fmul+0x178>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	464a      	mov	r2, r9
 8000d00:	431a      	orrs	r2, r3
 8000d02:	4691      	mov	r9, r2
 8000d04:	469c      	mov	ip, r3
 8000d06:	e778      	b.n	8000bfa <__aeabi_fmul+0x5e>
 8000d08:	4653      	mov	r3, sl
 8000d0a:	0031      	movs	r1, r6
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_fmul+0x176>
 8000d10:	e783      	b.n	8000c1a <__aeabi_fmul+0x7e>
 8000d12:	e792      	b.n	8000c3a <__aeabi_fmul+0x9e>
 8000d14:	2303      	movs	r3, #3
 8000d16:	464a      	mov	r2, r9
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	469c      	mov	ip, r3
 8000d1e:	e76c      	b.n	8000bfa <__aeabi_fmul+0x5e>
 8000d20:	230c      	movs	r3, #12
 8000d22:	4699      	mov	r9, r3
 8000d24:	3b09      	subs	r3, #9
 8000d26:	25ff      	movs	r5, #255	; 0xff
 8000d28:	469a      	mov	sl, r3
 8000d2a:	e750      	b.n	8000bce <__aeabi_fmul+0x32>
 8000d2c:	0020      	movs	r0, r4
 8000d2e:	f001 fcf9 	bl	8002724 <__clzsi2>
 8000d32:	2576      	movs	r5, #118	; 0x76
 8000d34:	1f43      	subs	r3, r0, #5
 8000d36:	409c      	lsls	r4, r3
 8000d38:	2300      	movs	r3, #0
 8000d3a:	426d      	negs	r5, r5
 8000d3c:	4699      	mov	r9, r3
 8000d3e:	469a      	mov	sl, r3
 8000d40:	1a2d      	subs	r5, r5, r0
 8000d42:	e744      	b.n	8000bce <__aeabi_fmul+0x32>
 8000d44:	4640      	mov	r0, r8
 8000d46:	f001 fced 	bl	8002724 <__clzsi2>
 8000d4a:	4642      	mov	r2, r8
 8000d4c:	1f43      	subs	r3, r0, #5
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	1a2d      	subs	r5, r5, r0
 8000d54:	4690      	mov	r8, r2
 8000d56:	469c      	mov	ip, r3
 8000d58:	3d76      	subs	r5, #118	; 0x76
 8000d5a:	e74e      	b.n	8000bfa <__aeabi_fmul+0x5e>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	2100      	movs	r1, #0
 8000d60:	20ff      	movs	r0, #255	; 0xff
 8000d62:	03e4      	lsls	r4, r4, #15
 8000d64:	e760      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000d66:	2301      	movs	r3, #1
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	2b1b      	cmp	r3, #27
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_fmul+0x1d4>
 8000d6e:	e759      	b.n	8000c24 <__aeabi_fmul+0x88>
 8000d70:	0022      	movs	r2, r4
 8000d72:	309e      	adds	r0, #158	; 0x9e
 8000d74:	40da      	lsrs	r2, r3
 8000d76:	4084      	lsls	r4, r0
 8000d78:	0013      	movs	r3, r2
 8000d7a:	1e62      	subs	r2, r4, #1
 8000d7c:	4194      	sbcs	r4, r2
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	0763      	lsls	r3, r4, #29
 8000d82:	d004      	beq.n	8000d8e <__aeabi_fmul+0x1f2>
 8000d84:	230f      	movs	r3, #15
 8000d86:	4023      	ands	r3, r4
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_fmul+0x1f2>
 8000d8c:	3404      	adds	r4, #4
 8000d8e:	0163      	lsls	r3, r4, #5
 8000d90:	d51a      	bpl.n	8000dc8 <__aeabi_fmul+0x22c>
 8000d92:	2001      	movs	r0, #1
 8000d94:	2400      	movs	r4, #0
 8000d96:	e747      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000d98:	2080      	movs	r0, #128	; 0x80
 8000d9a:	03c0      	lsls	r0, r0, #15
 8000d9c:	4204      	tst	r4, r0
 8000d9e:	d009      	beq.n	8000db4 <__aeabi_fmul+0x218>
 8000da0:	4643      	mov	r3, r8
 8000da2:	4203      	tst	r3, r0
 8000da4:	d106      	bne.n	8000db4 <__aeabi_fmul+0x218>
 8000da6:	4644      	mov	r4, r8
 8000da8:	4304      	orrs	r4, r0
 8000daa:	0264      	lsls	r4, r4, #9
 8000dac:	0039      	movs	r1, r7
 8000dae:	20ff      	movs	r0, #255	; 0xff
 8000db0:	0a64      	lsrs	r4, r4, #9
 8000db2:	e739      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000db4:	2080      	movs	r0, #128	; 0x80
 8000db6:	03c0      	lsls	r0, r0, #15
 8000db8:	4304      	orrs	r4, r0
 8000dba:	0264      	lsls	r4, r4, #9
 8000dbc:	0031      	movs	r1, r6
 8000dbe:	20ff      	movs	r0, #255	; 0xff
 8000dc0:	0a64      	lsrs	r4, r4, #9
 8000dc2:	e731      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000dc4:	0028      	movs	r0, r5
 8000dc6:	e765      	b.n	8000c94 <__aeabi_fmul+0xf8>
 8000dc8:	01a4      	lsls	r4, r4, #6
 8000dca:	2000      	movs	r0, #0
 8000dcc:	0a64      	lsrs	r4, r4, #9
 8000dce:	e72b      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000dd0:	2080      	movs	r0, #128	; 0x80
 8000dd2:	03c0      	lsls	r0, r0, #15
 8000dd4:	4304      	orrs	r4, r0
 8000dd6:	0264      	lsls	r4, r4, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a64      	lsrs	r4, r4, #9
 8000ddc:	e724      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	080081a4 	.word	0x080081a4
 8000de4:	f7ffffff 	.word	0xf7ffffff

08000de8 <__aeabi_fsub>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	46ce      	mov	lr, r9
 8000dec:	4647      	mov	r7, r8
 8000dee:	0243      	lsls	r3, r0, #9
 8000df0:	0a5b      	lsrs	r3, r3, #9
 8000df2:	024e      	lsls	r6, r1, #9
 8000df4:	00da      	lsls	r2, r3, #3
 8000df6:	4694      	mov	ip, r2
 8000df8:	0a72      	lsrs	r2, r6, #9
 8000dfa:	4691      	mov	r9, r2
 8000dfc:	0045      	lsls	r5, r0, #1
 8000dfe:	004a      	lsls	r2, r1, #1
 8000e00:	b580      	push	{r7, lr}
 8000e02:	0e2d      	lsrs	r5, r5, #24
 8000e04:	001f      	movs	r7, r3
 8000e06:	0fc4      	lsrs	r4, r0, #31
 8000e08:	0e12      	lsrs	r2, r2, #24
 8000e0a:	0fc9      	lsrs	r1, r1, #31
 8000e0c:	09b6      	lsrs	r6, r6, #6
 8000e0e:	2aff      	cmp	r2, #255	; 0xff
 8000e10:	d05b      	beq.n	8000eca <__aeabi_fsub+0xe2>
 8000e12:	2001      	movs	r0, #1
 8000e14:	4041      	eors	r1, r0
 8000e16:	428c      	cmp	r4, r1
 8000e18:	d039      	beq.n	8000e8e <__aeabi_fsub+0xa6>
 8000e1a:	1aa8      	subs	r0, r5, r2
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	dd5a      	ble.n	8000ed6 <__aeabi_fsub+0xee>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	d06a      	beq.n	8000efa <__aeabi_fsub+0x112>
 8000e24:	2dff      	cmp	r5, #255	; 0xff
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x42>
 8000e28:	e0d9      	b.n	8000fde <__aeabi_fsub+0x1f6>
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	04d2      	lsls	r2, r2, #19
 8000e2e:	4316      	orrs	r6, r2
 8000e30:	281b      	cmp	r0, #27
 8000e32:	dc00      	bgt.n	8000e36 <__aeabi_fsub+0x4e>
 8000e34:	e0e9      	b.n	800100a <__aeabi_fsub+0x222>
 8000e36:	2001      	movs	r0, #1
 8000e38:	4663      	mov	r3, ip
 8000e3a:	1a18      	subs	r0, r3, r0
 8000e3c:	0143      	lsls	r3, r0, #5
 8000e3e:	d400      	bmi.n	8000e42 <__aeabi_fsub+0x5a>
 8000e40:	e0b4      	b.n	8000fac <__aeabi_fsub+0x1c4>
 8000e42:	0180      	lsls	r0, r0, #6
 8000e44:	0987      	lsrs	r7, r0, #6
 8000e46:	0038      	movs	r0, r7
 8000e48:	f001 fc6c 	bl	8002724 <__clzsi2>
 8000e4c:	3805      	subs	r0, #5
 8000e4e:	4087      	lsls	r7, r0
 8000e50:	4285      	cmp	r5, r0
 8000e52:	dc00      	bgt.n	8000e56 <__aeabi_fsub+0x6e>
 8000e54:	e0cc      	b.n	8000ff0 <__aeabi_fsub+0x208>
 8000e56:	1a2d      	subs	r5, r5, r0
 8000e58:	48b5      	ldr	r0, [pc, #724]	; (8001130 <__aeabi_fsub+0x348>)
 8000e5a:	4038      	ands	r0, r7
 8000e5c:	0743      	lsls	r3, r0, #29
 8000e5e:	d004      	beq.n	8000e6a <__aeabi_fsub+0x82>
 8000e60:	230f      	movs	r3, #15
 8000e62:	4003      	ands	r3, r0
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d000      	beq.n	8000e6a <__aeabi_fsub+0x82>
 8000e68:	3004      	adds	r0, #4
 8000e6a:	0143      	lsls	r3, r0, #5
 8000e6c:	d400      	bmi.n	8000e70 <__aeabi_fsub+0x88>
 8000e6e:	e0a0      	b.n	8000fb2 <__aeabi_fsub+0x1ca>
 8000e70:	1c6a      	adds	r2, r5, #1
 8000e72:	2dfe      	cmp	r5, #254	; 0xfe
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0x90>
 8000e76:	e08d      	b.n	8000f94 <__aeabi_fsub+0x1ac>
 8000e78:	0180      	lsls	r0, r0, #6
 8000e7a:	0a47      	lsrs	r7, r0, #9
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	05d0      	lsls	r0, r2, #23
 8000e80:	4338      	orrs	r0, r7
 8000e82:	07e4      	lsls	r4, r4, #31
 8000e84:	4320      	orrs	r0, r4
 8000e86:	bcc0      	pop	{r6, r7}
 8000e88:	46b9      	mov	r9, r7
 8000e8a:	46b0      	mov	r8, r6
 8000e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e8e:	1aa8      	subs	r0, r5, r2
 8000e90:	4680      	mov	r8, r0
 8000e92:	2800      	cmp	r0, #0
 8000e94:	dd45      	ble.n	8000f22 <__aeabi_fsub+0x13a>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d070      	beq.n	8000f7c <__aeabi_fsub+0x194>
 8000e9a:	2dff      	cmp	r5, #255	; 0xff
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_fsub+0xb8>
 8000e9e:	e09e      	b.n	8000fde <__aeabi_fsub+0x1f6>
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	04db      	lsls	r3, r3, #19
 8000ea4:	431e      	orrs	r6, r3
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	2b1b      	cmp	r3, #27
 8000eaa:	dc00      	bgt.n	8000eae <__aeabi_fsub+0xc6>
 8000eac:	e0d2      	b.n	8001054 <__aeabi_fsub+0x26c>
 8000eae:	2001      	movs	r0, #1
 8000eb0:	4460      	add	r0, ip
 8000eb2:	0143      	lsls	r3, r0, #5
 8000eb4:	d57a      	bpl.n	8000fac <__aeabi_fsub+0x1c4>
 8000eb6:	3501      	adds	r5, #1
 8000eb8:	2dff      	cmp	r5, #255	; 0xff
 8000eba:	d06b      	beq.n	8000f94 <__aeabi_fsub+0x1ac>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	4a9d      	ldr	r2, [pc, #628]	; (8001134 <__aeabi_fsub+0x34c>)
 8000ec0:	4003      	ands	r3, r0
 8000ec2:	0840      	lsrs	r0, r0, #1
 8000ec4:	4010      	ands	r0, r2
 8000ec6:	4318      	orrs	r0, r3
 8000ec8:	e7c8      	b.n	8000e5c <__aeabi_fsub+0x74>
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d020      	beq.n	8000f10 <__aeabi_fsub+0x128>
 8000ece:	428c      	cmp	r4, r1
 8000ed0:	d023      	beq.n	8000f1a <__aeabi_fsub+0x132>
 8000ed2:	0028      	movs	r0, r5
 8000ed4:	38ff      	subs	r0, #255	; 0xff
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d039      	beq.n	8000f4e <__aeabi_fsub+0x166>
 8000eda:	1b57      	subs	r7, r2, r5
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	d000      	beq.n	8000ee2 <__aeabi_fsub+0xfa>
 8000ee0:	e09d      	b.n	800101e <__aeabi_fsub+0x236>
 8000ee2:	4663      	mov	r3, ip
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d100      	bne.n	8000eea <__aeabi_fsub+0x102>
 8000ee8:	e0db      	b.n	80010a2 <__aeabi_fsub+0x2ba>
 8000eea:	1e7b      	subs	r3, r7, #1
 8000eec:	2f01      	cmp	r7, #1
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x10a>
 8000ef0:	e10d      	b.n	800110e <__aeabi_fsub+0x326>
 8000ef2:	2fff      	cmp	r7, #255	; 0xff
 8000ef4:	d071      	beq.n	8000fda <__aeabi_fsub+0x1f2>
 8000ef6:	001f      	movs	r7, r3
 8000ef8:	e098      	b.n	800102c <__aeabi_fsub+0x244>
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x118>
 8000efe:	e0a7      	b.n	8001050 <__aeabi_fsub+0x268>
 8000f00:	1e42      	subs	r2, r0, #1
 8000f02:	2801      	cmp	r0, #1
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x120>
 8000f06:	e0e6      	b.n	80010d6 <__aeabi_fsub+0x2ee>
 8000f08:	28ff      	cmp	r0, #255	; 0xff
 8000f0a:	d068      	beq.n	8000fde <__aeabi_fsub+0x1f6>
 8000f0c:	0010      	movs	r0, r2
 8000f0e:	e78f      	b.n	8000e30 <__aeabi_fsub+0x48>
 8000f10:	2001      	movs	r0, #1
 8000f12:	4041      	eors	r1, r0
 8000f14:	42a1      	cmp	r1, r4
 8000f16:	d000      	beq.n	8000f1a <__aeabi_fsub+0x132>
 8000f18:	e77f      	b.n	8000e1a <__aeabi_fsub+0x32>
 8000f1a:	20ff      	movs	r0, #255	; 0xff
 8000f1c:	4240      	negs	r0, r0
 8000f1e:	4680      	mov	r8, r0
 8000f20:	44a8      	add	r8, r5
 8000f22:	4640      	mov	r0, r8
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d038      	beq.n	8000f9a <__aeabi_fsub+0x1b2>
 8000f28:	1b51      	subs	r1, r2, r5
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x148>
 8000f2e:	e0ae      	b.n	800108e <__aeabi_fsub+0x2a6>
 8000f30:	2aff      	cmp	r2, #255	; 0xff
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x14e>
 8000f34:	e0df      	b.n	80010f6 <__aeabi_fsub+0x30e>
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	4660      	mov	r0, ip
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	4318      	orrs	r0, r3
 8000f3e:	4684      	mov	ip, r0
 8000f40:	291b      	cmp	r1, #27
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_fsub+0x15e>
 8000f44:	e0d9      	b.n	80010fa <__aeabi_fsub+0x312>
 8000f46:	2001      	movs	r0, #1
 8000f48:	0015      	movs	r5, r2
 8000f4a:	1980      	adds	r0, r0, r6
 8000f4c:	e7b1      	b.n	8000eb2 <__aeabi_fsub+0xca>
 8000f4e:	20fe      	movs	r0, #254	; 0xfe
 8000f50:	1c6a      	adds	r2, r5, #1
 8000f52:	4210      	tst	r0, r2
 8000f54:	d171      	bne.n	800103a <__aeabi_fsub+0x252>
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	d000      	beq.n	8000f5c <__aeabi_fsub+0x174>
 8000f5a:	e0a6      	b.n	80010aa <__aeabi_fsub+0x2c2>
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x17c>
 8000f62:	e0d9      	b.n	8001118 <__aeabi_fsub+0x330>
 8000f64:	2200      	movs	r2, #0
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x184>
 8000f6a:	e788      	b.n	8000e7e <__aeabi_fsub+0x96>
 8000f6c:	1b98      	subs	r0, r3, r6
 8000f6e:	0143      	lsls	r3, r0, #5
 8000f70:	d400      	bmi.n	8000f74 <__aeabi_fsub+0x18c>
 8000f72:	e0e1      	b.n	8001138 <__aeabi_fsub+0x350>
 8000f74:	4663      	mov	r3, ip
 8000f76:	000c      	movs	r4, r1
 8000f78:	1af0      	subs	r0, r6, r3
 8000f7a:	e76f      	b.n	8000e5c <__aeabi_fsub+0x74>
 8000f7c:	2e00      	cmp	r6, #0
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x19a>
 8000f80:	e0b7      	b.n	80010f2 <__aeabi_fsub+0x30a>
 8000f82:	0002      	movs	r2, r0
 8000f84:	3a01      	subs	r2, #1
 8000f86:	2801      	cmp	r0, #1
 8000f88:	d100      	bne.n	8000f8c <__aeabi_fsub+0x1a4>
 8000f8a:	e09c      	b.n	80010c6 <__aeabi_fsub+0x2de>
 8000f8c:	28ff      	cmp	r0, #255	; 0xff
 8000f8e:	d026      	beq.n	8000fde <__aeabi_fsub+0x1f6>
 8000f90:	4690      	mov	r8, r2
 8000f92:	e788      	b.n	8000ea6 <__aeabi_fsub+0xbe>
 8000f94:	22ff      	movs	r2, #255	; 0xff
 8000f96:	2700      	movs	r7, #0
 8000f98:	e771      	b.n	8000e7e <__aeabi_fsub+0x96>
 8000f9a:	20fe      	movs	r0, #254	; 0xfe
 8000f9c:	1c6a      	adds	r2, r5, #1
 8000f9e:	4210      	tst	r0, r2
 8000fa0:	d064      	beq.n	800106c <__aeabi_fsub+0x284>
 8000fa2:	2aff      	cmp	r2, #255	; 0xff
 8000fa4:	d0f6      	beq.n	8000f94 <__aeabi_fsub+0x1ac>
 8000fa6:	0015      	movs	r5, r2
 8000fa8:	4466      	add	r6, ip
 8000faa:	0870      	lsrs	r0, r6, #1
 8000fac:	0743      	lsls	r3, r0, #29
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x1ca>
 8000fb0:	e756      	b.n	8000e60 <__aeabi_fsub+0x78>
 8000fb2:	08c3      	lsrs	r3, r0, #3
 8000fb4:	2dff      	cmp	r5, #255	; 0xff
 8000fb6:	d012      	beq.n	8000fde <__aeabi_fsub+0x1f6>
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	0a5f      	lsrs	r7, r3, #9
 8000fbc:	b2ea      	uxtb	r2, r5
 8000fbe:	e75e      	b.n	8000e7e <__aeabi_fsub+0x96>
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x1e0>
 8000fc6:	e096      	b.n	80010f6 <__aeabi_fsub+0x30e>
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d008      	beq.n	8000fde <__aeabi_fsub+0x1f6>
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	03d2      	lsls	r2, r2, #15
 8000fd0:	4213      	tst	r3, r2
 8000fd2:	d004      	beq.n	8000fde <__aeabi_fsub+0x1f6>
 8000fd4:	4648      	mov	r0, r9
 8000fd6:	4210      	tst	r0, r2
 8000fd8:	d101      	bne.n	8000fde <__aeabi_fsub+0x1f6>
 8000fda:	000c      	movs	r4, r1
 8000fdc:	464b      	mov	r3, r9
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0d8      	beq.n	8000f94 <__aeabi_fsub+0x1ac>
 8000fe2:	2780      	movs	r7, #128	; 0x80
 8000fe4:	03ff      	lsls	r7, r7, #15
 8000fe6:	431f      	orrs	r7, r3
 8000fe8:	027f      	lsls	r7, r7, #9
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	0a7f      	lsrs	r7, r7, #9
 8000fee:	e746      	b.n	8000e7e <__aeabi_fsub+0x96>
 8000ff0:	2320      	movs	r3, #32
 8000ff2:	003a      	movs	r2, r7
 8000ff4:	1b45      	subs	r5, r0, r5
 8000ff6:	0038      	movs	r0, r7
 8000ff8:	3501      	adds	r5, #1
 8000ffa:	40ea      	lsrs	r2, r5
 8000ffc:	1b5d      	subs	r5, r3, r5
 8000ffe:	40a8      	lsls	r0, r5
 8001000:	1e43      	subs	r3, r0, #1
 8001002:	4198      	sbcs	r0, r3
 8001004:	2500      	movs	r5, #0
 8001006:	4310      	orrs	r0, r2
 8001008:	e728      	b.n	8000e5c <__aeabi_fsub+0x74>
 800100a:	2320      	movs	r3, #32
 800100c:	1a1b      	subs	r3, r3, r0
 800100e:	0032      	movs	r2, r6
 8001010:	409e      	lsls	r6, r3
 8001012:	40c2      	lsrs	r2, r0
 8001014:	0030      	movs	r0, r6
 8001016:	1e43      	subs	r3, r0, #1
 8001018:	4198      	sbcs	r0, r3
 800101a:	4310      	orrs	r0, r2
 800101c:	e70c      	b.n	8000e38 <__aeabi_fsub+0x50>
 800101e:	2aff      	cmp	r2, #255	; 0xff
 8001020:	d0db      	beq.n	8000fda <__aeabi_fsub+0x1f2>
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	4660      	mov	r0, ip
 8001026:	04db      	lsls	r3, r3, #19
 8001028:	4318      	orrs	r0, r3
 800102a:	4684      	mov	ip, r0
 800102c:	2f1b      	cmp	r7, #27
 800102e:	dd56      	ble.n	80010de <__aeabi_fsub+0x2f6>
 8001030:	2001      	movs	r0, #1
 8001032:	000c      	movs	r4, r1
 8001034:	0015      	movs	r5, r2
 8001036:	1a30      	subs	r0, r6, r0
 8001038:	e700      	b.n	8000e3c <__aeabi_fsub+0x54>
 800103a:	4663      	mov	r3, ip
 800103c:	1b9f      	subs	r7, r3, r6
 800103e:	017b      	lsls	r3, r7, #5
 8001040:	d43d      	bmi.n	80010be <__aeabi_fsub+0x2d6>
 8001042:	2f00      	cmp	r7, #0
 8001044:	d000      	beq.n	8001048 <__aeabi_fsub+0x260>
 8001046:	e6fe      	b.n	8000e46 <__aeabi_fsub+0x5e>
 8001048:	2400      	movs	r4, #0
 800104a:	2200      	movs	r2, #0
 800104c:	2700      	movs	r7, #0
 800104e:	e716      	b.n	8000e7e <__aeabi_fsub+0x96>
 8001050:	0005      	movs	r5, r0
 8001052:	e7af      	b.n	8000fb4 <__aeabi_fsub+0x1cc>
 8001054:	0032      	movs	r2, r6
 8001056:	4643      	mov	r3, r8
 8001058:	4641      	mov	r1, r8
 800105a:	40da      	lsrs	r2, r3
 800105c:	2320      	movs	r3, #32
 800105e:	1a5b      	subs	r3, r3, r1
 8001060:	409e      	lsls	r6, r3
 8001062:	0030      	movs	r0, r6
 8001064:	1e43      	subs	r3, r0, #1
 8001066:	4198      	sbcs	r0, r3
 8001068:	4310      	orrs	r0, r2
 800106a:	e721      	b.n	8000eb0 <__aeabi_fsub+0xc8>
 800106c:	2d00      	cmp	r5, #0
 800106e:	d1a7      	bne.n	8000fc0 <__aeabi_fsub+0x1d8>
 8001070:	4663      	mov	r3, ip
 8001072:	2b00      	cmp	r3, #0
 8001074:	d059      	beq.n	800112a <__aeabi_fsub+0x342>
 8001076:	2200      	movs	r2, #0
 8001078:	2e00      	cmp	r6, #0
 800107a:	d100      	bne.n	800107e <__aeabi_fsub+0x296>
 800107c:	e6ff      	b.n	8000e7e <__aeabi_fsub+0x96>
 800107e:	0030      	movs	r0, r6
 8001080:	4460      	add	r0, ip
 8001082:	0143      	lsls	r3, r0, #5
 8001084:	d592      	bpl.n	8000fac <__aeabi_fsub+0x1c4>
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <__aeabi_fsub+0x348>)
 8001088:	3501      	adds	r5, #1
 800108a:	4018      	ands	r0, r3
 800108c:	e78e      	b.n	8000fac <__aeabi_fsub+0x1c4>
 800108e:	4663      	mov	r3, ip
 8001090:	2b00      	cmp	r3, #0
 8001092:	d047      	beq.n	8001124 <__aeabi_fsub+0x33c>
 8001094:	1e4b      	subs	r3, r1, #1
 8001096:	2901      	cmp	r1, #1
 8001098:	d015      	beq.n	80010c6 <__aeabi_fsub+0x2de>
 800109a:	29ff      	cmp	r1, #255	; 0xff
 800109c:	d02b      	beq.n	80010f6 <__aeabi_fsub+0x30e>
 800109e:	0019      	movs	r1, r3
 80010a0:	e74e      	b.n	8000f40 <__aeabi_fsub+0x158>
 80010a2:	000c      	movs	r4, r1
 80010a4:	464b      	mov	r3, r9
 80010a6:	003d      	movs	r5, r7
 80010a8:	e784      	b.n	8000fb4 <__aeabi_fsub+0x1cc>
 80010aa:	4662      	mov	r2, ip
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d18b      	bne.n	8000fc8 <__aeabi_fsub+0x1e0>
 80010b0:	2e00      	cmp	r6, #0
 80010b2:	d192      	bne.n	8000fda <__aeabi_fsub+0x1f2>
 80010b4:	2780      	movs	r7, #128	; 0x80
 80010b6:	2400      	movs	r4, #0
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	03ff      	lsls	r7, r7, #15
 80010bc:	e6df      	b.n	8000e7e <__aeabi_fsub+0x96>
 80010be:	4663      	mov	r3, ip
 80010c0:	000c      	movs	r4, r1
 80010c2:	1af7      	subs	r7, r6, r3
 80010c4:	e6bf      	b.n	8000e46 <__aeabi_fsub+0x5e>
 80010c6:	0030      	movs	r0, r6
 80010c8:	4460      	add	r0, ip
 80010ca:	2501      	movs	r5, #1
 80010cc:	0143      	lsls	r3, r0, #5
 80010ce:	d400      	bmi.n	80010d2 <__aeabi_fsub+0x2ea>
 80010d0:	e76c      	b.n	8000fac <__aeabi_fsub+0x1c4>
 80010d2:	2502      	movs	r5, #2
 80010d4:	e6f2      	b.n	8000ebc <__aeabi_fsub+0xd4>
 80010d6:	4663      	mov	r3, ip
 80010d8:	2501      	movs	r5, #1
 80010da:	1b98      	subs	r0, r3, r6
 80010dc:	e6ae      	b.n	8000e3c <__aeabi_fsub+0x54>
 80010de:	2320      	movs	r3, #32
 80010e0:	4664      	mov	r4, ip
 80010e2:	4660      	mov	r0, ip
 80010e4:	40fc      	lsrs	r4, r7
 80010e6:	1bdf      	subs	r7, r3, r7
 80010e8:	40b8      	lsls	r0, r7
 80010ea:	1e43      	subs	r3, r0, #1
 80010ec:	4198      	sbcs	r0, r3
 80010ee:	4320      	orrs	r0, r4
 80010f0:	e79f      	b.n	8001032 <__aeabi_fsub+0x24a>
 80010f2:	0005      	movs	r5, r0
 80010f4:	e75e      	b.n	8000fb4 <__aeabi_fsub+0x1cc>
 80010f6:	464b      	mov	r3, r9
 80010f8:	e771      	b.n	8000fde <__aeabi_fsub+0x1f6>
 80010fa:	2320      	movs	r3, #32
 80010fc:	4665      	mov	r5, ip
 80010fe:	4660      	mov	r0, ip
 8001100:	40cd      	lsrs	r5, r1
 8001102:	1a59      	subs	r1, r3, r1
 8001104:	4088      	lsls	r0, r1
 8001106:	1e43      	subs	r3, r0, #1
 8001108:	4198      	sbcs	r0, r3
 800110a:	4328      	orrs	r0, r5
 800110c:	e71c      	b.n	8000f48 <__aeabi_fsub+0x160>
 800110e:	4663      	mov	r3, ip
 8001110:	000c      	movs	r4, r1
 8001112:	2501      	movs	r5, #1
 8001114:	1af0      	subs	r0, r6, r3
 8001116:	e691      	b.n	8000e3c <__aeabi_fsub+0x54>
 8001118:	2e00      	cmp	r6, #0
 800111a:	d095      	beq.n	8001048 <__aeabi_fsub+0x260>
 800111c:	000c      	movs	r4, r1
 800111e:	464f      	mov	r7, r9
 8001120:	2200      	movs	r2, #0
 8001122:	e6ac      	b.n	8000e7e <__aeabi_fsub+0x96>
 8001124:	464b      	mov	r3, r9
 8001126:	000d      	movs	r5, r1
 8001128:	e744      	b.n	8000fb4 <__aeabi_fsub+0x1cc>
 800112a:	464f      	mov	r7, r9
 800112c:	2200      	movs	r2, #0
 800112e:	e6a6      	b.n	8000e7e <__aeabi_fsub+0x96>
 8001130:	fbffffff 	.word	0xfbffffff
 8001134:	7dffffff 	.word	0x7dffffff
 8001138:	2800      	cmp	r0, #0
 800113a:	d000      	beq.n	800113e <__aeabi_fsub+0x356>
 800113c:	e736      	b.n	8000fac <__aeabi_fsub+0x1c4>
 800113e:	2400      	movs	r4, #0
 8001140:	2700      	movs	r7, #0
 8001142:	e69c      	b.n	8000e7e <__aeabi_fsub+0x96>

08001144 <__aeabi_f2iz>:
 8001144:	0241      	lsls	r1, r0, #9
 8001146:	0042      	lsls	r2, r0, #1
 8001148:	0fc3      	lsrs	r3, r0, #31
 800114a:	0a49      	lsrs	r1, r1, #9
 800114c:	2000      	movs	r0, #0
 800114e:	0e12      	lsrs	r2, r2, #24
 8001150:	2a7e      	cmp	r2, #126	; 0x7e
 8001152:	dd03      	ble.n	800115c <__aeabi_f2iz+0x18>
 8001154:	2a9d      	cmp	r2, #157	; 0x9d
 8001156:	dd02      	ble.n	800115e <__aeabi_f2iz+0x1a>
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_f2iz+0x3c>)
 800115a:	1898      	adds	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	2080      	movs	r0, #128	; 0x80
 8001160:	0400      	lsls	r0, r0, #16
 8001162:	4301      	orrs	r1, r0
 8001164:	2a95      	cmp	r2, #149	; 0x95
 8001166:	dc07      	bgt.n	8001178 <__aeabi_f2iz+0x34>
 8001168:	2096      	movs	r0, #150	; 0x96
 800116a:	1a82      	subs	r2, r0, r2
 800116c:	40d1      	lsrs	r1, r2
 800116e:	4248      	negs	r0, r1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f3      	bne.n	800115c <__aeabi_f2iz+0x18>
 8001174:	0008      	movs	r0, r1
 8001176:	e7f1      	b.n	800115c <__aeabi_f2iz+0x18>
 8001178:	3a96      	subs	r2, #150	; 0x96
 800117a:	4091      	lsls	r1, r2
 800117c:	e7f7      	b.n	800116e <__aeabi_f2iz+0x2a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	7fffffff 	.word	0x7fffffff

08001184 <__aeabi_ui2f>:
 8001184:	b570      	push	{r4, r5, r6, lr}
 8001186:	1e05      	subs	r5, r0, #0
 8001188:	d00e      	beq.n	80011a8 <__aeabi_ui2f+0x24>
 800118a:	f001 facb 	bl	8002724 <__clzsi2>
 800118e:	239e      	movs	r3, #158	; 0x9e
 8001190:	0004      	movs	r4, r0
 8001192:	1a1b      	subs	r3, r3, r0
 8001194:	2b96      	cmp	r3, #150	; 0x96
 8001196:	dc0c      	bgt.n	80011b2 <__aeabi_ui2f+0x2e>
 8001198:	2808      	cmp	r0, #8
 800119a:	dd01      	ble.n	80011a0 <__aeabi_ui2f+0x1c>
 800119c:	3c08      	subs	r4, #8
 800119e:	40a5      	lsls	r5, r4
 80011a0:	026d      	lsls	r5, r5, #9
 80011a2:	0a6d      	lsrs	r5, r5, #9
 80011a4:	b2d8      	uxtb	r0, r3
 80011a6:	e001      	b.n	80011ac <__aeabi_ui2f+0x28>
 80011a8:	2000      	movs	r0, #0
 80011aa:	2500      	movs	r5, #0
 80011ac:	05c0      	lsls	r0, r0, #23
 80011ae:	4328      	orrs	r0, r5
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
 80011b2:	2b99      	cmp	r3, #153	; 0x99
 80011b4:	dd09      	ble.n	80011ca <__aeabi_ui2f+0x46>
 80011b6:	0002      	movs	r2, r0
 80011b8:	0029      	movs	r1, r5
 80011ba:	321b      	adds	r2, #27
 80011bc:	4091      	lsls	r1, r2
 80011be:	1e4a      	subs	r2, r1, #1
 80011c0:	4191      	sbcs	r1, r2
 80011c2:	2205      	movs	r2, #5
 80011c4:	1a12      	subs	r2, r2, r0
 80011c6:	40d5      	lsrs	r5, r2
 80011c8:	430d      	orrs	r5, r1
 80011ca:	2c05      	cmp	r4, #5
 80011cc:	dc12      	bgt.n	80011f4 <__aeabi_ui2f+0x70>
 80011ce:	0029      	movs	r1, r5
 80011d0:	4e0c      	ldr	r6, [pc, #48]	; (8001204 <__aeabi_ui2f+0x80>)
 80011d2:	4031      	ands	r1, r6
 80011d4:	076a      	lsls	r2, r5, #29
 80011d6:	d009      	beq.n	80011ec <__aeabi_ui2f+0x68>
 80011d8:	200f      	movs	r0, #15
 80011da:	4028      	ands	r0, r5
 80011dc:	2804      	cmp	r0, #4
 80011de:	d005      	beq.n	80011ec <__aeabi_ui2f+0x68>
 80011e0:	3104      	adds	r1, #4
 80011e2:	014a      	lsls	r2, r1, #5
 80011e4:	d502      	bpl.n	80011ec <__aeabi_ui2f+0x68>
 80011e6:	239f      	movs	r3, #159	; 0x9f
 80011e8:	4031      	ands	r1, r6
 80011ea:	1b1b      	subs	r3, r3, r4
 80011ec:	0189      	lsls	r1, r1, #6
 80011ee:	0a4d      	lsrs	r5, r1, #9
 80011f0:	b2d8      	uxtb	r0, r3
 80011f2:	e7db      	b.n	80011ac <__aeabi_ui2f+0x28>
 80011f4:	1f62      	subs	r2, r4, #5
 80011f6:	4095      	lsls	r5, r2
 80011f8:	0029      	movs	r1, r5
 80011fa:	4e02      	ldr	r6, [pc, #8]	; (8001204 <__aeabi_ui2f+0x80>)
 80011fc:	4031      	ands	r1, r6
 80011fe:	076a      	lsls	r2, r5, #29
 8001200:	d0f4      	beq.n	80011ec <__aeabi_ui2f+0x68>
 8001202:	e7e9      	b.n	80011d8 <__aeabi_ui2f+0x54>
 8001204:	fbffffff 	.word	0xfbffffff

08001208 <__aeabi_ddiv>:
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	4657      	mov	r7, sl
 800120c:	464e      	mov	r6, r9
 800120e:	4645      	mov	r5, r8
 8001210:	46de      	mov	lr, fp
 8001212:	b5e0      	push	{r5, r6, r7, lr}
 8001214:	4681      	mov	r9, r0
 8001216:	0005      	movs	r5, r0
 8001218:	030c      	lsls	r4, r1, #12
 800121a:	0048      	lsls	r0, r1, #1
 800121c:	4692      	mov	sl, r2
 800121e:	001f      	movs	r7, r3
 8001220:	b085      	sub	sp, #20
 8001222:	0b24      	lsrs	r4, r4, #12
 8001224:	0d40      	lsrs	r0, r0, #21
 8001226:	0fce      	lsrs	r6, r1, #31
 8001228:	2800      	cmp	r0, #0
 800122a:	d100      	bne.n	800122e <__aeabi_ddiv+0x26>
 800122c:	e156      	b.n	80014dc <__aeabi_ddiv+0x2d4>
 800122e:	4bd4      	ldr	r3, [pc, #848]	; (8001580 <__aeabi_ddiv+0x378>)
 8001230:	4298      	cmp	r0, r3
 8001232:	d100      	bne.n	8001236 <__aeabi_ddiv+0x2e>
 8001234:	e172      	b.n	800151c <__aeabi_ddiv+0x314>
 8001236:	0f6b      	lsrs	r3, r5, #29
 8001238:	00e4      	lsls	r4, r4, #3
 800123a:	431c      	orrs	r4, r3
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	041b      	lsls	r3, r3, #16
 8001240:	4323      	orrs	r3, r4
 8001242:	4698      	mov	r8, r3
 8001244:	4bcf      	ldr	r3, [pc, #828]	; (8001584 <__aeabi_ddiv+0x37c>)
 8001246:	00ed      	lsls	r5, r5, #3
 8001248:	469b      	mov	fp, r3
 800124a:	2300      	movs	r3, #0
 800124c:	4699      	mov	r9, r3
 800124e:	4483      	add	fp, r0
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	033c      	lsls	r4, r7, #12
 8001254:	007b      	lsls	r3, r7, #1
 8001256:	4650      	mov	r0, sl
 8001258:	0b24      	lsrs	r4, r4, #12
 800125a:	0d5b      	lsrs	r3, r3, #21
 800125c:	0fff      	lsrs	r7, r7, #31
 800125e:	2b00      	cmp	r3, #0
 8001260:	d100      	bne.n	8001264 <__aeabi_ddiv+0x5c>
 8001262:	e11f      	b.n	80014a4 <__aeabi_ddiv+0x29c>
 8001264:	4ac6      	ldr	r2, [pc, #792]	; (8001580 <__aeabi_ddiv+0x378>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d100      	bne.n	800126c <__aeabi_ddiv+0x64>
 800126a:	e162      	b.n	8001532 <__aeabi_ddiv+0x32a>
 800126c:	49c5      	ldr	r1, [pc, #788]	; (8001584 <__aeabi_ddiv+0x37c>)
 800126e:	0f42      	lsrs	r2, r0, #29
 8001270:	468c      	mov	ip, r1
 8001272:	00e4      	lsls	r4, r4, #3
 8001274:	4659      	mov	r1, fp
 8001276:	4314      	orrs	r4, r2
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	4463      	add	r3, ip
 800127c:	0412      	lsls	r2, r2, #16
 800127e:	1acb      	subs	r3, r1, r3
 8001280:	4314      	orrs	r4, r2
 8001282:	469b      	mov	fp, r3
 8001284:	00c2      	lsls	r2, r0, #3
 8001286:	2000      	movs	r0, #0
 8001288:	0033      	movs	r3, r6
 800128a:	407b      	eors	r3, r7
 800128c:	469a      	mov	sl, r3
 800128e:	464b      	mov	r3, r9
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d827      	bhi.n	80012e4 <__aeabi_ddiv+0xdc>
 8001294:	49bc      	ldr	r1, [pc, #752]	; (8001588 <__aeabi_ddiv+0x380>)
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	58cb      	ldr	r3, [r1, r3]
 800129a:	469f      	mov	pc, r3
 800129c:	46b2      	mov	sl, r6
 800129e:	9b00      	ldr	r3, [sp, #0]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d016      	beq.n	80012d2 <__aeabi_ddiv+0xca>
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d100      	bne.n	80012aa <__aeabi_ddiv+0xa2>
 80012a8:	e28e      	b.n	80017c8 <__aeabi_ddiv+0x5c0>
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d000      	beq.n	80012b0 <__aeabi_ddiv+0xa8>
 80012ae:	e0d9      	b.n	8001464 <__aeabi_ddiv+0x25c>
 80012b0:	2300      	movs	r3, #0
 80012b2:	2400      	movs	r4, #0
 80012b4:	2500      	movs	r5, #0
 80012b6:	4652      	mov	r2, sl
 80012b8:	051b      	lsls	r3, r3, #20
 80012ba:	4323      	orrs	r3, r4
 80012bc:	07d2      	lsls	r2, r2, #31
 80012be:	4313      	orrs	r3, r2
 80012c0:	0028      	movs	r0, r5
 80012c2:	0019      	movs	r1, r3
 80012c4:	b005      	add	sp, #20
 80012c6:	bcf0      	pop	{r4, r5, r6, r7}
 80012c8:	46bb      	mov	fp, r7
 80012ca:	46b2      	mov	sl, r6
 80012cc:	46a9      	mov	r9, r5
 80012ce:	46a0      	mov	r8, r4
 80012d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d2:	2400      	movs	r4, #0
 80012d4:	2500      	movs	r5, #0
 80012d6:	4baa      	ldr	r3, [pc, #680]	; (8001580 <__aeabi_ddiv+0x378>)
 80012d8:	e7ed      	b.n	80012b6 <__aeabi_ddiv+0xae>
 80012da:	46ba      	mov	sl, r7
 80012dc:	46a0      	mov	r8, r4
 80012de:	0015      	movs	r5, r2
 80012e0:	9000      	str	r0, [sp, #0]
 80012e2:	e7dc      	b.n	800129e <__aeabi_ddiv+0x96>
 80012e4:	4544      	cmp	r4, r8
 80012e6:	d200      	bcs.n	80012ea <__aeabi_ddiv+0xe2>
 80012e8:	e1c7      	b.n	800167a <__aeabi_ddiv+0x472>
 80012ea:	d100      	bne.n	80012ee <__aeabi_ddiv+0xe6>
 80012ec:	e1c2      	b.n	8001674 <__aeabi_ddiv+0x46c>
 80012ee:	2301      	movs	r3, #1
 80012f0:	425b      	negs	r3, r3
 80012f2:	469c      	mov	ip, r3
 80012f4:	002e      	movs	r6, r5
 80012f6:	4640      	mov	r0, r8
 80012f8:	2500      	movs	r5, #0
 80012fa:	44e3      	add	fp, ip
 80012fc:	0223      	lsls	r3, r4, #8
 80012fe:	0e14      	lsrs	r4, r2, #24
 8001300:	431c      	orrs	r4, r3
 8001302:	0c1b      	lsrs	r3, r3, #16
 8001304:	4699      	mov	r9, r3
 8001306:	0423      	lsls	r3, r4, #16
 8001308:	0c1f      	lsrs	r7, r3, #16
 800130a:	0212      	lsls	r2, r2, #8
 800130c:	4649      	mov	r1, r9
 800130e:	9200      	str	r2, [sp, #0]
 8001310:	9701      	str	r7, [sp, #4]
 8001312:	f7fe ff7d 	bl	8000210 <__aeabi_uidivmod>
 8001316:	0002      	movs	r2, r0
 8001318:	437a      	muls	r2, r7
 800131a:	040b      	lsls	r3, r1, #16
 800131c:	0c31      	lsrs	r1, r6, #16
 800131e:	4680      	mov	r8, r0
 8001320:	4319      	orrs	r1, r3
 8001322:	428a      	cmp	r2, r1
 8001324:	d907      	bls.n	8001336 <__aeabi_ddiv+0x12e>
 8001326:	2301      	movs	r3, #1
 8001328:	425b      	negs	r3, r3
 800132a:	469c      	mov	ip, r3
 800132c:	1909      	adds	r1, r1, r4
 800132e:	44e0      	add	r8, ip
 8001330:	428c      	cmp	r4, r1
 8001332:	d800      	bhi.n	8001336 <__aeabi_ddiv+0x12e>
 8001334:	e207      	b.n	8001746 <__aeabi_ddiv+0x53e>
 8001336:	1a88      	subs	r0, r1, r2
 8001338:	4649      	mov	r1, r9
 800133a:	f7fe ff69 	bl	8000210 <__aeabi_uidivmod>
 800133e:	0409      	lsls	r1, r1, #16
 8001340:	468c      	mov	ip, r1
 8001342:	0431      	lsls	r1, r6, #16
 8001344:	4666      	mov	r6, ip
 8001346:	9a01      	ldr	r2, [sp, #4]
 8001348:	0c09      	lsrs	r1, r1, #16
 800134a:	4342      	muls	r2, r0
 800134c:	0003      	movs	r3, r0
 800134e:	4331      	orrs	r1, r6
 8001350:	428a      	cmp	r2, r1
 8001352:	d904      	bls.n	800135e <__aeabi_ddiv+0x156>
 8001354:	1909      	adds	r1, r1, r4
 8001356:	3b01      	subs	r3, #1
 8001358:	428c      	cmp	r4, r1
 800135a:	d800      	bhi.n	800135e <__aeabi_ddiv+0x156>
 800135c:	e1ed      	b.n	800173a <__aeabi_ddiv+0x532>
 800135e:	1a88      	subs	r0, r1, r2
 8001360:	4642      	mov	r2, r8
 8001362:	0412      	lsls	r2, r2, #16
 8001364:	431a      	orrs	r2, r3
 8001366:	4690      	mov	r8, r2
 8001368:	4641      	mov	r1, r8
 800136a:	9b00      	ldr	r3, [sp, #0]
 800136c:	040e      	lsls	r6, r1, #16
 800136e:	0c1b      	lsrs	r3, r3, #16
 8001370:	001f      	movs	r7, r3
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	9b00      	ldr	r3, [sp, #0]
 8001376:	0c36      	lsrs	r6, r6, #16
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	0c19      	lsrs	r1, r3, #16
 800137c:	000b      	movs	r3, r1
 800137e:	4373      	muls	r3, r6
 8001380:	0c12      	lsrs	r2, r2, #16
 8001382:	437e      	muls	r6, r7
 8001384:	9103      	str	r1, [sp, #12]
 8001386:	4351      	muls	r1, r2
 8001388:	437a      	muls	r2, r7
 800138a:	0c1f      	lsrs	r7, r3, #16
 800138c:	46bc      	mov	ip, r7
 800138e:	1876      	adds	r6, r6, r1
 8001390:	4466      	add	r6, ip
 8001392:	42b1      	cmp	r1, r6
 8001394:	d903      	bls.n	800139e <__aeabi_ddiv+0x196>
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	0249      	lsls	r1, r1, #9
 800139a:	468c      	mov	ip, r1
 800139c:	4462      	add	r2, ip
 800139e:	0c31      	lsrs	r1, r6, #16
 80013a0:	188a      	adds	r2, r1, r2
 80013a2:	0431      	lsls	r1, r6, #16
 80013a4:	041e      	lsls	r6, r3, #16
 80013a6:	0c36      	lsrs	r6, r6, #16
 80013a8:	198e      	adds	r6, r1, r6
 80013aa:	4290      	cmp	r0, r2
 80013ac:	d302      	bcc.n	80013b4 <__aeabi_ddiv+0x1ac>
 80013ae:	d112      	bne.n	80013d6 <__aeabi_ddiv+0x1ce>
 80013b0:	42b5      	cmp	r5, r6
 80013b2:	d210      	bcs.n	80013d6 <__aeabi_ddiv+0x1ce>
 80013b4:	4643      	mov	r3, r8
 80013b6:	1e59      	subs	r1, r3, #1
 80013b8:	9b00      	ldr	r3, [sp, #0]
 80013ba:	469c      	mov	ip, r3
 80013bc:	4465      	add	r5, ip
 80013be:	001f      	movs	r7, r3
 80013c0:	429d      	cmp	r5, r3
 80013c2:	419b      	sbcs	r3, r3
 80013c4:	425b      	negs	r3, r3
 80013c6:	191b      	adds	r3, r3, r4
 80013c8:	18c0      	adds	r0, r0, r3
 80013ca:	4284      	cmp	r4, r0
 80013cc:	d200      	bcs.n	80013d0 <__aeabi_ddiv+0x1c8>
 80013ce:	e1a0      	b.n	8001712 <__aeabi_ddiv+0x50a>
 80013d0:	d100      	bne.n	80013d4 <__aeabi_ddiv+0x1cc>
 80013d2:	e19b      	b.n	800170c <__aeabi_ddiv+0x504>
 80013d4:	4688      	mov	r8, r1
 80013d6:	1bae      	subs	r6, r5, r6
 80013d8:	42b5      	cmp	r5, r6
 80013da:	41ad      	sbcs	r5, r5
 80013dc:	1a80      	subs	r0, r0, r2
 80013de:	426d      	negs	r5, r5
 80013e0:	1b40      	subs	r0, r0, r5
 80013e2:	4284      	cmp	r4, r0
 80013e4:	d100      	bne.n	80013e8 <__aeabi_ddiv+0x1e0>
 80013e6:	e1d5      	b.n	8001794 <__aeabi_ddiv+0x58c>
 80013e8:	4649      	mov	r1, r9
 80013ea:	f7fe ff11 	bl	8000210 <__aeabi_uidivmod>
 80013ee:	9a01      	ldr	r2, [sp, #4]
 80013f0:	040b      	lsls	r3, r1, #16
 80013f2:	4342      	muls	r2, r0
 80013f4:	0c31      	lsrs	r1, r6, #16
 80013f6:	0005      	movs	r5, r0
 80013f8:	4319      	orrs	r1, r3
 80013fa:	428a      	cmp	r2, r1
 80013fc:	d900      	bls.n	8001400 <__aeabi_ddiv+0x1f8>
 80013fe:	e16c      	b.n	80016da <__aeabi_ddiv+0x4d2>
 8001400:	1a88      	subs	r0, r1, r2
 8001402:	4649      	mov	r1, r9
 8001404:	f7fe ff04 	bl	8000210 <__aeabi_uidivmod>
 8001408:	9a01      	ldr	r2, [sp, #4]
 800140a:	0436      	lsls	r6, r6, #16
 800140c:	4342      	muls	r2, r0
 800140e:	0409      	lsls	r1, r1, #16
 8001410:	0c36      	lsrs	r6, r6, #16
 8001412:	0003      	movs	r3, r0
 8001414:	430e      	orrs	r6, r1
 8001416:	42b2      	cmp	r2, r6
 8001418:	d900      	bls.n	800141c <__aeabi_ddiv+0x214>
 800141a:	e153      	b.n	80016c4 <__aeabi_ddiv+0x4bc>
 800141c:	9803      	ldr	r0, [sp, #12]
 800141e:	1ab6      	subs	r6, r6, r2
 8001420:	0002      	movs	r2, r0
 8001422:	042d      	lsls	r5, r5, #16
 8001424:	431d      	orrs	r5, r3
 8001426:	9f02      	ldr	r7, [sp, #8]
 8001428:	042b      	lsls	r3, r5, #16
 800142a:	0c1b      	lsrs	r3, r3, #16
 800142c:	435a      	muls	r2, r3
 800142e:	437b      	muls	r3, r7
 8001430:	469c      	mov	ip, r3
 8001432:	0c29      	lsrs	r1, r5, #16
 8001434:	4348      	muls	r0, r1
 8001436:	0c13      	lsrs	r3, r2, #16
 8001438:	4484      	add	ip, r0
 800143a:	4463      	add	r3, ip
 800143c:	4379      	muls	r1, r7
 800143e:	4298      	cmp	r0, r3
 8001440:	d903      	bls.n	800144a <__aeabi_ddiv+0x242>
 8001442:	2080      	movs	r0, #128	; 0x80
 8001444:	0240      	lsls	r0, r0, #9
 8001446:	4684      	mov	ip, r0
 8001448:	4461      	add	r1, ip
 800144a:	0c18      	lsrs	r0, r3, #16
 800144c:	0412      	lsls	r2, r2, #16
 800144e:	041b      	lsls	r3, r3, #16
 8001450:	0c12      	lsrs	r2, r2, #16
 8001452:	1841      	adds	r1, r0, r1
 8001454:	189b      	adds	r3, r3, r2
 8001456:	428e      	cmp	r6, r1
 8001458:	d200      	bcs.n	800145c <__aeabi_ddiv+0x254>
 800145a:	e0ff      	b.n	800165c <__aeabi_ddiv+0x454>
 800145c:	d100      	bne.n	8001460 <__aeabi_ddiv+0x258>
 800145e:	e0fa      	b.n	8001656 <__aeabi_ddiv+0x44e>
 8001460:	2301      	movs	r3, #1
 8001462:	431d      	orrs	r5, r3
 8001464:	4a49      	ldr	r2, [pc, #292]	; (800158c <__aeabi_ddiv+0x384>)
 8001466:	445a      	add	r2, fp
 8001468:	2a00      	cmp	r2, #0
 800146a:	dc00      	bgt.n	800146e <__aeabi_ddiv+0x266>
 800146c:	e0aa      	b.n	80015c4 <__aeabi_ddiv+0x3bc>
 800146e:	076b      	lsls	r3, r5, #29
 8001470:	d000      	beq.n	8001474 <__aeabi_ddiv+0x26c>
 8001472:	e13d      	b.n	80016f0 <__aeabi_ddiv+0x4e8>
 8001474:	08ed      	lsrs	r5, r5, #3
 8001476:	4643      	mov	r3, r8
 8001478:	01db      	lsls	r3, r3, #7
 800147a:	d506      	bpl.n	800148a <__aeabi_ddiv+0x282>
 800147c:	4642      	mov	r2, r8
 800147e:	4b44      	ldr	r3, [pc, #272]	; (8001590 <__aeabi_ddiv+0x388>)
 8001480:	401a      	ands	r2, r3
 8001482:	4690      	mov	r8, r2
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	00d2      	lsls	r2, r2, #3
 8001488:	445a      	add	r2, fp
 800148a:	4b42      	ldr	r3, [pc, #264]	; (8001594 <__aeabi_ddiv+0x38c>)
 800148c:	429a      	cmp	r2, r3
 800148e:	dd00      	ble.n	8001492 <__aeabi_ddiv+0x28a>
 8001490:	e71f      	b.n	80012d2 <__aeabi_ddiv+0xca>
 8001492:	4643      	mov	r3, r8
 8001494:	075b      	lsls	r3, r3, #29
 8001496:	431d      	orrs	r5, r3
 8001498:	4643      	mov	r3, r8
 800149a:	0552      	lsls	r2, r2, #21
 800149c:	025c      	lsls	r4, r3, #9
 800149e:	0b24      	lsrs	r4, r4, #12
 80014a0:	0d53      	lsrs	r3, r2, #21
 80014a2:	e708      	b.n	80012b6 <__aeabi_ddiv+0xae>
 80014a4:	4652      	mov	r2, sl
 80014a6:	4322      	orrs	r2, r4
 80014a8:	d100      	bne.n	80014ac <__aeabi_ddiv+0x2a4>
 80014aa:	e07b      	b.n	80015a4 <__aeabi_ddiv+0x39c>
 80014ac:	2c00      	cmp	r4, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_ddiv+0x2aa>
 80014b0:	e0fa      	b.n	80016a8 <__aeabi_ddiv+0x4a0>
 80014b2:	0020      	movs	r0, r4
 80014b4:	f001 f936 	bl	8002724 <__clzsi2>
 80014b8:	0002      	movs	r2, r0
 80014ba:	3a0b      	subs	r2, #11
 80014bc:	231d      	movs	r3, #29
 80014be:	0001      	movs	r1, r0
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	4652      	mov	r2, sl
 80014c4:	3908      	subs	r1, #8
 80014c6:	40da      	lsrs	r2, r3
 80014c8:	408c      	lsls	r4, r1
 80014ca:	4314      	orrs	r4, r2
 80014cc:	4652      	mov	r2, sl
 80014ce:	408a      	lsls	r2, r1
 80014d0:	4b31      	ldr	r3, [pc, #196]	; (8001598 <__aeabi_ddiv+0x390>)
 80014d2:	4458      	add	r0, fp
 80014d4:	469b      	mov	fp, r3
 80014d6:	4483      	add	fp, r0
 80014d8:	2000      	movs	r0, #0
 80014da:	e6d5      	b.n	8001288 <__aeabi_ddiv+0x80>
 80014dc:	464b      	mov	r3, r9
 80014de:	4323      	orrs	r3, r4
 80014e0:	4698      	mov	r8, r3
 80014e2:	d044      	beq.n	800156e <__aeabi_ddiv+0x366>
 80014e4:	2c00      	cmp	r4, #0
 80014e6:	d100      	bne.n	80014ea <__aeabi_ddiv+0x2e2>
 80014e8:	e0ce      	b.n	8001688 <__aeabi_ddiv+0x480>
 80014ea:	0020      	movs	r0, r4
 80014ec:	f001 f91a 	bl	8002724 <__clzsi2>
 80014f0:	0001      	movs	r1, r0
 80014f2:	0002      	movs	r2, r0
 80014f4:	390b      	subs	r1, #11
 80014f6:	231d      	movs	r3, #29
 80014f8:	1a5b      	subs	r3, r3, r1
 80014fa:	4649      	mov	r1, r9
 80014fc:	0010      	movs	r0, r2
 80014fe:	40d9      	lsrs	r1, r3
 8001500:	3808      	subs	r0, #8
 8001502:	4084      	lsls	r4, r0
 8001504:	000b      	movs	r3, r1
 8001506:	464d      	mov	r5, r9
 8001508:	4323      	orrs	r3, r4
 800150a:	4698      	mov	r8, r3
 800150c:	4085      	lsls	r5, r0
 800150e:	4823      	ldr	r0, [pc, #140]	; (800159c <__aeabi_ddiv+0x394>)
 8001510:	1a83      	subs	r3, r0, r2
 8001512:	469b      	mov	fp, r3
 8001514:	2300      	movs	r3, #0
 8001516:	4699      	mov	r9, r3
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	e69a      	b.n	8001252 <__aeabi_ddiv+0x4a>
 800151c:	464b      	mov	r3, r9
 800151e:	4323      	orrs	r3, r4
 8001520:	4698      	mov	r8, r3
 8001522:	d11d      	bne.n	8001560 <__aeabi_ddiv+0x358>
 8001524:	2308      	movs	r3, #8
 8001526:	4699      	mov	r9, r3
 8001528:	3b06      	subs	r3, #6
 800152a:	2500      	movs	r5, #0
 800152c:	4683      	mov	fp, r0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	e68f      	b.n	8001252 <__aeabi_ddiv+0x4a>
 8001532:	4652      	mov	r2, sl
 8001534:	4322      	orrs	r2, r4
 8001536:	d109      	bne.n	800154c <__aeabi_ddiv+0x344>
 8001538:	2302      	movs	r3, #2
 800153a:	4649      	mov	r1, r9
 800153c:	4319      	orrs	r1, r3
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <__aeabi_ddiv+0x398>)
 8001540:	4689      	mov	r9, r1
 8001542:	469c      	mov	ip, r3
 8001544:	2400      	movs	r4, #0
 8001546:	2002      	movs	r0, #2
 8001548:	44e3      	add	fp, ip
 800154a:	e69d      	b.n	8001288 <__aeabi_ddiv+0x80>
 800154c:	2303      	movs	r3, #3
 800154e:	464a      	mov	r2, r9
 8001550:	431a      	orrs	r2, r3
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <__aeabi_ddiv+0x398>)
 8001554:	4691      	mov	r9, r2
 8001556:	469c      	mov	ip, r3
 8001558:	4652      	mov	r2, sl
 800155a:	2003      	movs	r0, #3
 800155c:	44e3      	add	fp, ip
 800155e:	e693      	b.n	8001288 <__aeabi_ddiv+0x80>
 8001560:	230c      	movs	r3, #12
 8001562:	4699      	mov	r9, r3
 8001564:	3b09      	subs	r3, #9
 8001566:	46a0      	mov	r8, r4
 8001568:	4683      	mov	fp, r0
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	e671      	b.n	8001252 <__aeabi_ddiv+0x4a>
 800156e:	2304      	movs	r3, #4
 8001570:	4699      	mov	r9, r3
 8001572:	2300      	movs	r3, #0
 8001574:	469b      	mov	fp, r3
 8001576:	3301      	adds	r3, #1
 8001578:	2500      	movs	r5, #0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	e669      	b.n	8001252 <__aeabi_ddiv+0x4a>
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	000007ff 	.word	0x000007ff
 8001584:	fffffc01 	.word	0xfffffc01
 8001588:	080081e4 	.word	0x080081e4
 800158c:	000003ff 	.word	0x000003ff
 8001590:	feffffff 	.word	0xfeffffff
 8001594:	000007fe 	.word	0x000007fe
 8001598:	000003f3 	.word	0x000003f3
 800159c:	fffffc0d 	.word	0xfffffc0d
 80015a0:	fffff801 	.word	0xfffff801
 80015a4:	4649      	mov	r1, r9
 80015a6:	2301      	movs	r3, #1
 80015a8:	4319      	orrs	r1, r3
 80015aa:	4689      	mov	r9, r1
 80015ac:	2400      	movs	r4, #0
 80015ae:	2001      	movs	r0, #1
 80015b0:	e66a      	b.n	8001288 <__aeabi_ddiv+0x80>
 80015b2:	2300      	movs	r3, #0
 80015b4:	2480      	movs	r4, #128	; 0x80
 80015b6:	469a      	mov	sl, r3
 80015b8:	2500      	movs	r5, #0
 80015ba:	4b8a      	ldr	r3, [pc, #552]	; (80017e4 <__aeabi_ddiv+0x5dc>)
 80015bc:	0324      	lsls	r4, r4, #12
 80015be:	e67a      	b.n	80012b6 <__aeabi_ddiv+0xae>
 80015c0:	2501      	movs	r5, #1
 80015c2:	426d      	negs	r5, r5
 80015c4:	2301      	movs	r3, #1
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	2b38      	cmp	r3, #56	; 0x38
 80015ca:	dd00      	ble.n	80015ce <__aeabi_ddiv+0x3c6>
 80015cc:	e670      	b.n	80012b0 <__aeabi_ddiv+0xa8>
 80015ce:	2b1f      	cmp	r3, #31
 80015d0:	dc00      	bgt.n	80015d4 <__aeabi_ddiv+0x3cc>
 80015d2:	e0bf      	b.n	8001754 <__aeabi_ddiv+0x54c>
 80015d4:	211f      	movs	r1, #31
 80015d6:	4249      	negs	r1, r1
 80015d8:	1a8a      	subs	r2, r1, r2
 80015da:	4641      	mov	r1, r8
 80015dc:	40d1      	lsrs	r1, r2
 80015de:	000a      	movs	r2, r1
 80015e0:	2b20      	cmp	r3, #32
 80015e2:	d004      	beq.n	80015ee <__aeabi_ddiv+0x3e6>
 80015e4:	4641      	mov	r1, r8
 80015e6:	4b80      	ldr	r3, [pc, #512]	; (80017e8 <__aeabi_ddiv+0x5e0>)
 80015e8:	445b      	add	r3, fp
 80015ea:	4099      	lsls	r1, r3
 80015ec:	430d      	orrs	r5, r1
 80015ee:	1e6b      	subs	r3, r5, #1
 80015f0:	419d      	sbcs	r5, r3
 80015f2:	2307      	movs	r3, #7
 80015f4:	432a      	orrs	r2, r5
 80015f6:	001d      	movs	r5, r3
 80015f8:	2400      	movs	r4, #0
 80015fa:	4015      	ands	r5, r2
 80015fc:	4213      	tst	r3, r2
 80015fe:	d100      	bne.n	8001602 <__aeabi_ddiv+0x3fa>
 8001600:	e0d4      	b.n	80017ac <__aeabi_ddiv+0x5a4>
 8001602:	210f      	movs	r1, #15
 8001604:	2300      	movs	r3, #0
 8001606:	4011      	ands	r1, r2
 8001608:	2904      	cmp	r1, #4
 800160a:	d100      	bne.n	800160e <__aeabi_ddiv+0x406>
 800160c:	e0cb      	b.n	80017a6 <__aeabi_ddiv+0x59e>
 800160e:	1d11      	adds	r1, r2, #4
 8001610:	4291      	cmp	r1, r2
 8001612:	4192      	sbcs	r2, r2
 8001614:	4252      	negs	r2, r2
 8001616:	189b      	adds	r3, r3, r2
 8001618:	000a      	movs	r2, r1
 800161a:	0219      	lsls	r1, r3, #8
 800161c:	d400      	bmi.n	8001620 <__aeabi_ddiv+0x418>
 800161e:	e0c2      	b.n	80017a6 <__aeabi_ddiv+0x59e>
 8001620:	2301      	movs	r3, #1
 8001622:	2400      	movs	r4, #0
 8001624:	2500      	movs	r5, #0
 8001626:	e646      	b.n	80012b6 <__aeabi_ddiv+0xae>
 8001628:	2380      	movs	r3, #128	; 0x80
 800162a:	4641      	mov	r1, r8
 800162c:	031b      	lsls	r3, r3, #12
 800162e:	4219      	tst	r1, r3
 8001630:	d008      	beq.n	8001644 <__aeabi_ddiv+0x43c>
 8001632:	421c      	tst	r4, r3
 8001634:	d106      	bne.n	8001644 <__aeabi_ddiv+0x43c>
 8001636:	431c      	orrs	r4, r3
 8001638:	0324      	lsls	r4, r4, #12
 800163a:	46ba      	mov	sl, r7
 800163c:	0015      	movs	r5, r2
 800163e:	4b69      	ldr	r3, [pc, #420]	; (80017e4 <__aeabi_ddiv+0x5dc>)
 8001640:	0b24      	lsrs	r4, r4, #12
 8001642:	e638      	b.n	80012b6 <__aeabi_ddiv+0xae>
 8001644:	2480      	movs	r4, #128	; 0x80
 8001646:	4643      	mov	r3, r8
 8001648:	0324      	lsls	r4, r4, #12
 800164a:	431c      	orrs	r4, r3
 800164c:	0324      	lsls	r4, r4, #12
 800164e:	46b2      	mov	sl, r6
 8001650:	4b64      	ldr	r3, [pc, #400]	; (80017e4 <__aeabi_ddiv+0x5dc>)
 8001652:	0b24      	lsrs	r4, r4, #12
 8001654:	e62f      	b.n	80012b6 <__aeabi_ddiv+0xae>
 8001656:	2b00      	cmp	r3, #0
 8001658:	d100      	bne.n	800165c <__aeabi_ddiv+0x454>
 800165a:	e703      	b.n	8001464 <__aeabi_ddiv+0x25c>
 800165c:	19a6      	adds	r6, r4, r6
 800165e:	1e68      	subs	r0, r5, #1
 8001660:	42a6      	cmp	r6, r4
 8001662:	d200      	bcs.n	8001666 <__aeabi_ddiv+0x45e>
 8001664:	e08d      	b.n	8001782 <__aeabi_ddiv+0x57a>
 8001666:	428e      	cmp	r6, r1
 8001668:	d200      	bcs.n	800166c <__aeabi_ddiv+0x464>
 800166a:	e0a3      	b.n	80017b4 <__aeabi_ddiv+0x5ac>
 800166c:	d100      	bne.n	8001670 <__aeabi_ddiv+0x468>
 800166e:	e0b3      	b.n	80017d8 <__aeabi_ddiv+0x5d0>
 8001670:	0005      	movs	r5, r0
 8001672:	e6f5      	b.n	8001460 <__aeabi_ddiv+0x258>
 8001674:	42aa      	cmp	r2, r5
 8001676:	d900      	bls.n	800167a <__aeabi_ddiv+0x472>
 8001678:	e639      	b.n	80012ee <__aeabi_ddiv+0xe6>
 800167a:	4643      	mov	r3, r8
 800167c:	07de      	lsls	r6, r3, #31
 800167e:	0858      	lsrs	r0, r3, #1
 8001680:	086b      	lsrs	r3, r5, #1
 8001682:	431e      	orrs	r6, r3
 8001684:	07ed      	lsls	r5, r5, #31
 8001686:	e639      	b.n	80012fc <__aeabi_ddiv+0xf4>
 8001688:	4648      	mov	r0, r9
 800168a:	f001 f84b 	bl	8002724 <__clzsi2>
 800168e:	0001      	movs	r1, r0
 8001690:	0002      	movs	r2, r0
 8001692:	3115      	adds	r1, #21
 8001694:	3220      	adds	r2, #32
 8001696:	291c      	cmp	r1, #28
 8001698:	dc00      	bgt.n	800169c <__aeabi_ddiv+0x494>
 800169a:	e72c      	b.n	80014f6 <__aeabi_ddiv+0x2ee>
 800169c:	464b      	mov	r3, r9
 800169e:	3808      	subs	r0, #8
 80016a0:	4083      	lsls	r3, r0
 80016a2:	2500      	movs	r5, #0
 80016a4:	4698      	mov	r8, r3
 80016a6:	e732      	b.n	800150e <__aeabi_ddiv+0x306>
 80016a8:	f001 f83c 	bl	8002724 <__clzsi2>
 80016ac:	0003      	movs	r3, r0
 80016ae:	001a      	movs	r2, r3
 80016b0:	3215      	adds	r2, #21
 80016b2:	3020      	adds	r0, #32
 80016b4:	2a1c      	cmp	r2, #28
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_ddiv+0x4b2>
 80016b8:	e700      	b.n	80014bc <__aeabi_ddiv+0x2b4>
 80016ba:	4654      	mov	r4, sl
 80016bc:	3b08      	subs	r3, #8
 80016be:	2200      	movs	r2, #0
 80016c0:	409c      	lsls	r4, r3
 80016c2:	e705      	b.n	80014d0 <__aeabi_ddiv+0x2c8>
 80016c4:	1936      	adds	r6, r6, r4
 80016c6:	3b01      	subs	r3, #1
 80016c8:	42b4      	cmp	r4, r6
 80016ca:	d900      	bls.n	80016ce <__aeabi_ddiv+0x4c6>
 80016cc:	e6a6      	b.n	800141c <__aeabi_ddiv+0x214>
 80016ce:	42b2      	cmp	r2, r6
 80016d0:	d800      	bhi.n	80016d4 <__aeabi_ddiv+0x4cc>
 80016d2:	e6a3      	b.n	800141c <__aeabi_ddiv+0x214>
 80016d4:	1e83      	subs	r3, r0, #2
 80016d6:	1936      	adds	r6, r6, r4
 80016d8:	e6a0      	b.n	800141c <__aeabi_ddiv+0x214>
 80016da:	1909      	adds	r1, r1, r4
 80016dc:	3d01      	subs	r5, #1
 80016de:	428c      	cmp	r4, r1
 80016e0:	d900      	bls.n	80016e4 <__aeabi_ddiv+0x4dc>
 80016e2:	e68d      	b.n	8001400 <__aeabi_ddiv+0x1f8>
 80016e4:	428a      	cmp	r2, r1
 80016e6:	d800      	bhi.n	80016ea <__aeabi_ddiv+0x4e2>
 80016e8:	e68a      	b.n	8001400 <__aeabi_ddiv+0x1f8>
 80016ea:	1e85      	subs	r5, r0, #2
 80016ec:	1909      	adds	r1, r1, r4
 80016ee:	e687      	b.n	8001400 <__aeabi_ddiv+0x1f8>
 80016f0:	230f      	movs	r3, #15
 80016f2:	402b      	ands	r3, r5
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d100      	bne.n	80016fa <__aeabi_ddiv+0x4f2>
 80016f8:	e6bc      	b.n	8001474 <__aeabi_ddiv+0x26c>
 80016fa:	2305      	movs	r3, #5
 80016fc:	425b      	negs	r3, r3
 80016fe:	42ab      	cmp	r3, r5
 8001700:	419b      	sbcs	r3, r3
 8001702:	3504      	adds	r5, #4
 8001704:	425b      	negs	r3, r3
 8001706:	08ed      	lsrs	r5, r5, #3
 8001708:	4498      	add	r8, r3
 800170a:	e6b4      	b.n	8001476 <__aeabi_ddiv+0x26e>
 800170c:	42af      	cmp	r7, r5
 800170e:	d900      	bls.n	8001712 <__aeabi_ddiv+0x50a>
 8001710:	e660      	b.n	80013d4 <__aeabi_ddiv+0x1cc>
 8001712:	4282      	cmp	r2, r0
 8001714:	d804      	bhi.n	8001720 <__aeabi_ddiv+0x518>
 8001716:	d000      	beq.n	800171a <__aeabi_ddiv+0x512>
 8001718:	e65c      	b.n	80013d4 <__aeabi_ddiv+0x1cc>
 800171a:	42ae      	cmp	r6, r5
 800171c:	d800      	bhi.n	8001720 <__aeabi_ddiv+0x518>
 800171e:	e659      	b.n	80013d4 <__aeabi_ddiv+0x1cc>
 8001720:	2302      	movs	r3, #2
 8001722:	425b      	negs	r3, r3
 8001724:	469c      	mov	ip, r3
 8001726:	9b00      	ldr	r3, [sp, #0]
 8001728:	44e0      	add	r8, ip
 800172a:	469c      	mov	ip, r3
 800172c:	4465      	add	r5, ip
 800172e:	429d      	cmp	r5, r3
 8001730:	419b      	sbcs	r3, r3
 8001732:	425b      	negs	r3, r3
 8001734:	191b      	adds	r3, r3, r4
 8001736:	18c0      	adds	r0, r0, r3
 8001738:	e64d      	b.n	80013d6 <__aeabi_ddiv+0x1ce>
 800173a:	428a      	cmp	r2, r1
 800173c:	d800      	bhi.n	8001740 <__aeabi_ddiv+0x538>
 800173e:	e60e      	b.n	800135e <__aeabi_ddiv+0x156>
 8001740:	1e83      	subs	r3, r0, #2
 8001742:	1909      	adds	r1, r1, r4
 8001744:	e60b      	b.n	800135e <__aeabi_ddiv+0x156>
 8001746:	428a      	cmp	r2, r1
 8001748:	d800      	bhi.n	800174c <__aeabi_ddiv+0x544>
 800174a:	e5f4      	b.n	8001336 <__aeabi_ddiv+0x12e>
 800174c:	1e83      	subs	r3, r0, #2
 800174e:	4698      	mov	r8, r3
 8001750:	1909      	adds	r1, r1, r4
 8001752:	e5f0      	b.n	8001336 <__aeabi_ddiv+0x12e>
 8001754:	4925      	ldr	r1, [pc, #148]	; (80017ec <__aeabi_ddiv+0x5e4>)
 8001756:	0028      	movs	r0, r5
 8001758:	4459      	add	r1, fp
 800175a:	408d      	lsls	r5, r1
 800175c:	4642      	mov	r2, r8
 800175e:	408a      	lsls	r2, r1
 8001760:	1e69      	subs	r1, r5, #1
 8001762:	418d      	sbcs	r5, r1
 8001764:	4641      	mov	r1, r8
 8001766:	40d8      	lsrs	r0, r3
 8001768:	40d9      	lsrs	r1, r3
 800176a:	4302      	orrs	r2, r0
 800176c:	432a      	orrs	r2, r5
 800176e:	000b      	movs	r3, r1
 8001770:	0751      	lsls	r1, r2, #29
 8001772:	d100      	bne.n	8001776 <__aeabi_ddiv+0x56e>
 8001774:	e751      	b.n	800161a <__aeabi_ddiv+0x412>
 8001776:	210f      	movs	r1, #15
 8001778:	4011      	ands	r1, r2
 800177a:	2904      	cmp	r1, #4
 800177c:	d000      	beq.n	8001780 <__aeabi_ddiv+0x578>
 800177e:	e746      	b.n	800160e <__aeabi_ddiv+0x406>
 8001780:	e74b      	b.n	800161a <__aeabi_ddiv+0x412>
 8001782:	0005      	movs	r5, r0
 8001784:	428e      	cmp	r6, r1
 8001786:	d000      	beq.n	800178a <__aeabi_ddiv+0x582>
 8001788:	e66a      	b.n	8001460 <__aeabi_ddiv+0x258>
 800178a:	9a00      	ldr	r2, [sp, #0]
 800178c:	4293      	cmp	r3, r2
 800178e:	d000      	beq.n	8001792 <__aeabi_ddiv+0x58a>
 8001790:	e666      	b.n	8001460 <__aeabi_ddiv+0x258>
 8001792:	e667      	b.n	8001464 <__aeabi_ddiv+0x25c>
 8001794:	4a16      	ldr	r2, [pc, #88]	; (80017f0 <__aeabi_ddiv+0x5e8>)
 8001796:	445a      	add	r2, fp
 8001798:	2a00      	cmp	r2, #0
 800179a:	dc00      	bgt.n	800179e <__aeabi_ddiv+0x596>
 800179c:	e710      	b.n	80015c0 <__aeabi_ddiv+0x3b8>
 800179e:	2301      	movs	r3, #1
 80017a0:	2500      	movs	r5, #0
 80017a2:	4498      	add	r8, r3
 80017a4:	e667      	b.n	8001476 <__aeabi_ddiv+0x26e>
 80017a6:	075d      	lsls	r5, r3, #29
 80017a8:	025b      	lsls	r3, r3, #9
 80017aa:	0b1c      	lsrs	r4, r3, #12
 80017ac:	08d2      	lsrs	r2, r2, #3
 80017ae:	2300      	movs	r3, #0
 80017b0:	4315      	orrs	r5, r2
 80017b2:	e580      	b.n	80012b6 <__aeabi_ddiv+0xae>
 80017b4:	9800      	ldr	r0, [sp, #0]
 80017b6:	3d02      	subs	r5, #2
 80017b8:	0042      	lsls	r2, r0, #1
 80017ba:	4282      	cmp	r2, r0
 80017bc:	41bf      	sbcs	r7, r7
 80017be:	427f      	negs	r7, r7
 80017c0:	193c      	adds	r4, r7, r4
 80017c2:	1936      	adds	r6, r6, r4
 80017c4:	9200      	str	r2, [sp, #0]
 80017c6:	e7dd      	b.n	8001784 <__aeabi_ddiv+0x57c>
 80017c8:	2480      	movs	r4, #128	; 0x80
 80017ca:	4643      	mov	r3, r8
 80017cc:	0324      	lsls	r4, r4, #12
 80017ce:	431c      	orrs	r4, r3
 80017d0:	0324      	lsls	r4, r4, #12
 80017d2:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__aeabi_ddiv+0x5dc>)
 80017d4:	0b24      	lsrs	r4, r4, #12
 80017d6:	e56e      	b.n	80012b6 <__aeabi_ddiv+0xae>
 80017d8:	9a00      	ldr	r2, [sp, #0]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d3ea      	bcc.n	80017b4 <__aeabi_ddiv+0x5ac>
 80017de:	0005      	movs	r5, r0
 80017e0:	e7d3      	b.n	800178a <__aeabi_ddiv+0x582>
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	000007ff 	.word	0x000007ff
 80017e8:	0000043e 	.word	0x0000043e
 80017ec:	0000041e 	.word	0x0000041e
 80017f0:	000003ff 	.word	0x000003ff

080017f4 <__aeabi_dmul>:
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	4657      	mov	r7, sl
 80017f8:	464e      	mov	r6, r9
 80017fa:	4645      	mov	r5, r8
 80017fc:	46de      	mov	lr, fp
 80017fe:	b5e0      	push	{r5, r6, r7, lr}
 8001800:	4698      	mov	r8, r3
 8001802:	030c      	lsls	r4, r1, #12
 8001804:	004b      	lsls	r3, r1, #1
 8001806:	0006      	movs	r6, r0
 8001808:	4692      	mov	sl, r2
 800180a:	b087      	sub	sp, #28
 800180c:	0b24      	lsrs	r4, r4, #12
 800180e:	0d5b      	lsrs	r3, r3, #21
 8001810:	0fcf      	lsrs	r7, r1, #31
 8001812:	2b00      	cmp	r3, #0
 8001814:	d100      	bne.n	8001818 <__aeabi_dmul+0x24>
 8001816:	e15c      	b.n	8001ad2 <__aeabi_dmul+0x2de>
 8001818:	4ad9      	ldr	r2, [pc, #868]	; (8001b80 <__aeabi_dmul+0x38c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d100      	bne.n	8001820 <__aeabi_dmul+0x2c>
 800181e:	e175      	b.n	8001b0c <__aeabi_dmul+0x318>
 8001820:	0f42      	lsrs	r2, r0, #29
 8001822:	00e4      	lsls	r4, r4, #3
 8001824:	4314      	orrs	r4, r2
 8001826:	2280      	movs	r2, #128	; 0x80
 8001828:	0412      	lsls	r2, r2, #16
 800182a:	4314      	orrs	r4, r2
 800182c:	4ad5      	ldr	r2, [pc, #852]	; (8001b84 <__aeabi_dmul+0x390>)
 800182e:	00c5      	lsls	r5, r0, #3
 8001830:	4694      	mov	ip, r2
 8001832:	4463      	add	r3, ip
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2300      	movs	r3, #0
 8001838:	4699      	mov	r9, r3
 800183a:	469b      	mov	fp, r3
 800183c:	4643      	mov	r3, r8
 800183e:	4642      	mov	r2, r8
 8001840:	031e      	lsls	r6, r3, #12
 8001842:	0fd2      	lsrs	r2, r2, #31
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4650      	mov	r0, sl
 8001848:	4690      	mov	r8, r2
 800184a:	0b36      	lsrs	r6, r6, #12
 800184c:	0d5b      	lsrs	r3, r3, #21
 800184e:	d100      	bne.n	8001852 <__aeabi_dmul+0x5e>
 8001850:	e120      	b.n	8001a94 <__aeabi_dmul+0x2a0>
 8001852:	4acb      	ldr	r2, [pc, #812]	; (8001b80 <__aeabi_dmul+0x38c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d100      	bne.n	800185a <__aeabi_dmul+0x66>
 8001858:	e162      	b.n	8001b20 <__aeabi_dmul+0x32c>
 800185a:	49ca      	ldr	r1, [pc, #808]	; (8001b84 <__aeabi_dmul+0x390>)
 800185c:	0f42      	lsrs	r2, r0, #29
 800185e:	468c      	mov	ip, r1
 8001860:	9900      	ldr	r1, [sp, #0]
 8001862:	4463      	add	r3, ip
 8001864:	00f6      	lsls	r6, r6, #3
 8001866:	468c      	mov	ip, r1
 8001868:	4316      	orrs	r6, r2
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	449c      	add	ip, r3
 800186e:	0412      	lsls	r2, r2, #16
 8001870:	4663      	mov	r3, ip
 8001872:	4316      	orrs	r6, r2
 8001874:	00c2      	lsls	r2, r0, #3
 8001876:	2000      	movs	r0, #0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	9900      	ldr	r1, [sp, #0]
 800187c:	4643      	mov	r3, r8
 800187e:	3101      	adds	r1, #1
 8001880:	468c      	mov	ip, r1
 8001882:	4649      	mov	r1, r9
 8001884:	407b      	eors	r3, r7
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	290f      	cmp	r1, #15
 800188a:	d826      	bhi.n	80018da <__aeabi_dmul+0xe6>
 800188c:	4bbe      	ldr	r3, [pc, #760]	; (8001b88 <__aeabi_dmul+0x394>)
 800188e:	0089      	lsls	r1, r1, #2
 8001890:	5859      	ldr	r1, [r3, r1]
 8001892:	468f      	mov	pc, r1
 8001894:	4643      	mov	r3, r8
 8001896:	9301      	str	r3, [sp, #4]
 8001898:	0034      	movs	r4, r6
 800189a:	0015      	movs	r5, r2
 800189c:	4683      	mov	fp, r0
 800189e:	465b      	mov	r3, fp
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d016      	beq.n	80018d2 <__aeabi_dmul+0xde>
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d100      	bne.n	80018aa <__aeabi_dmul+0xb6>
 80018a8:	e203      	b.n	8001cb2 <__aeabi_dmul+0x4be>
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d000      	beq.n	80018b0 <__aeabi_dmul+0xbc>
 80018ae:	e0cd      	b.n	8001a4c <__aeabi_dmul+0x258>
 80018b0:	2200      	movs	r2, #0
 80018b2:	2400      	movs	r4, #0
 80018b4:	2500      	movs	r5, #0
 80018b6:	9b01      	ldr	r3, [sp, #4]
 80018b8:	0512      	lsls	r2, r2, #20
 80018ba:	4322      	orrs	r2, r4
 80018bc:	07db      	lsls	r3, r3, #31
 80018be:	431a      	orrs	r2, r3
 80018c0:	0028      	movs	r0, r5
 80018c2:	0011      	movs	r1, r2
 80018c4:	b007      	add	sp, #28
 80018c6:	bcf0      	pop	{r4, r5, r6, r7}
 80018c8:	46bb      	mov	fp, r7
 80018ca:	46b2      	mov	sl, r6
 80018cc:	46a9      	mov	r9, r5
 80018ce:	46a0      	mov	r8, r4
 80018d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d2:	2400      	movs	r4, #0
 80018d4:	2500      	movs	r5, #0
 80018d6:	4aaa      	ldr	r2, [pc, #680]	; (8001b80 <__aeabi_dmul+0x38c>)
 80018d8:	e7ed      	b.n	80018b6 <__aeabi_dmul+0xc2>
 80018da:	0c28      	lsrs	r0, r5, #16
 80018dc:	042d      	lsls	r5, r5, #16
 80018de:	0c2d      	lsrs	r5, r5, #16
 80018e0:	002b      	movs	r3, r5
 80018e2:	0c11      	lsrs	r1, r2, #16
 80018e4:	0412      	lsls	r2, r2, #16
 80018e6:	0c12      	lsrs	r2, r2, #16
 80018e8:	4353      	muls	r3, r2
 80018ea:	4698      	mov	r8, r3
 80018ec:	0013      	movs	r3, r2
 80018ee:	002f      	movs	r7, r5
 80018f0:	4343      	muls	r3, r0
 80018f2:	4699      	mov	r9, r3
 80018f4:	434f      	muls	r7, r1
 80018f6:	444f      	add	r7, r9
 80018f8:	46bb      	mov	fp, r7
 80018fa:	4647      	mov	r7, r8
 80018fc:	000b      	movs	r3, r1
 80018fe:	0c3f      	lsrs	r7, r7, #16
 8001900:	46ba      	mov	sl, r7
 8001902:	4343      	muls	r3, r0
 8001904:	44da      	add	sl, fp
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	45d1      	cmp	r9, sl
 800190a:	d904      	bls.n	8001916 <__aeabi_dmul+0x122>
 800190c:	2780      	movs	r7, #128	; 0x80
 800190e:	027f      	lsls	r7, r7, #9
 8001910:	46b9      	mov	r9, r7
 8001912:	444b      	add	r3, r9
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	4653      	mov	r3, sl
 8001918:	0c1b      	lsrs	r3, r3, #16
 800191a:	469b      	mov	fp, r3
 800191c:	4653      	mov	r3, sl
 800191e:	041f      	lsls	r7, r3, #16
 8001920:	4643      	mov	r3, r8
 8001922:	041b      	lsls	r3, r3, #16
 8001924:	0c1b      	lsrs	r3, r3, #16
 8001926:	4698      	mov	r8, r3
 8001928:	003b      	movs	r3, r7
 800192a:	4443      	add	r3, r8
 800192c:	9304      	str	r3, [sp, #16]
 800192e:	0c33      	lsrs	r3, r6, #16
 8001930:	0436      	lsls	r6, r6, #16
 8001932:	0c36      	lsrs	r6, r6, #16
 8001934:	4698      	mov	r8, r3
 8001936:	0033      	movs	r3, r6
 8001938:	4343      	muls	r3, r0
 800193a:	4699      	mov	r9, r3
 800193c:	4643      	mov	r3, r8
 800193e:	4343      	muls	r3, r0
 8001940:	002f      	movs	r7, r5
 8001942:	469a      	mov	sl, r3
 8001944:	4643      	mov	r3, r8
 8001946:	4377      	muls	r7, r6
 8001948:	435d      	muls	r5, r3
 800194a:	0c38      	lsrs	r0, r7, #16
 800194c:	444d      	add	r5, r9
 800194e:	1945      	adds	r5, r0, r5
 8001950:	45a9      	cmp	r9, r5
 8001952:	d903      	bls.n	800195c <__aeabi_dmul+0x168>
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	025b      	lsls	r3, r3, #9
 8001958:	4699      	mov	r9, r3
 800195a:	44ca      	add	sl, r9
 800195c:	043f      	lsls	r7, r7, #16
 800195e:	0c28      	lsrs	r0, r5, #16
 8001960:	0c3f      	lsrs	r7, r7, #16
 8001962:	042d      	lsls	r5, r5, #16
 8001964:	19ed      	adds	r5, r5, r7
 8001966:	0c27      	lsrs	r7, r4, #16
 8001968:	0424      	lsls	r4, r4, #16
 800196a:	0c24      	lsrs	r4, r4, #16
 800196c:	0003      	movs	r3, r0
 800196e:	0020      	movs	r0, r4
 8001970:	4350      	muls	r0, r2
 8001972:	437a      	muls	r2, r7
 8001974:	4691      	mov	r9, r2
 8001976:	003a      	movs	r2, r7
 8001978:	4453      	add	r3, sl
 800197a:	9305      	str	r3, [sp, #20]
 800197c:	0c03      	lsrs	r3, r0, #16
 800197e:	469a      	mov	sl, r3
 8001980:	434a      	muls	r2, r1
 8001982:	4361      	muls	r1, r4
 8001984:	4449      	add	r1, r9
 8001986:	4451      	add	r1, sl
 8001988:	44ab      	add	fp, r5
 800198a:	4589      	cmp	r9, r1
 800198c:	d903      	bls.n	8001996 <__aeabi_dmul+0x1a2>
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	025b      	lsls	r3, r3, #9
 8001992:	4699      	mov	r9, r3
 8001994:	444a      	add	r2, r9
 8001996:	0400      	lsls	r0, r0, #16
 8001998:	0c0b      	lsrs	r3, r1, #16
 800199a:	0c00      	lsrs	r0, r0, #16
 800199c:	0409      	lsls	r1, r1, #16
 800199e:	1809      	adds	r1, r1, r0
 80019a0:	0020      	movs	r0, r4
 80019a2:	4699      	mov	r9, r3
 80019a4:	4643      	mov	r3, r8
 80019a6:	4370      	muls	r0, r6
 80019a8:	435c      	muls	r4, r3
 80019aa:	437e      	muls	r6, r7
 80019ac:	435f      	muls	r7, r3
 80019ae:	0c03      	lsrs	r3, r0, #16
 80019b0:	4698      	mov	r8, r3
 80019b2:	19a4      	adds	r4, r4, r6
 80019b4:	4444      	add	r4, r8
 80019b6:	444a      	add	r2, r9
 80019b8:	9703      	str	r7, [sp, #12]
 80019ba:	42a6      	cmp	r6, r4
 80019bc:	d904      	bls.n	80019c8 <__aeabi_dmul+0x1d4>
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	025b      	lsls	r3, r3, #9
 80019c2:	4698      	mov	r8, r3
 80019c4:	4447      	add	r7, r8
 80019c6:	9703      	str	r7, [sp, #12]
 80019c8:	0423      	lsls	r3, r4, #16
 80019ca:	9e02      	ldr	r6, [sp, #8]
 80019cc:	469a      	mov	sl, r3
 80019ce:	9b05      	ldr	r3, [sp, #20]
 80019d0:	445e      	add	r6, fp
 80019d2:	4698      	mov	r8, r3
 80019d4:	42ae      	cmp	r6, r5
 80019d6:	41ad      	sbcs	r5, r5
 80019d8:	1876      	adds	r6, r6, r1
 80019da:	428e      	cmp	r6, r1
 80019dc:	4189      	sbcs	r1, r1
 80019de:	0400      	lsls	r0, r0, #16
 80019e0:	0c00      	lsrs	r0, r0, #16
 80019e2:	4450      	add	r0, sl
 80019e4:	4440      	add	r0, r8
 80019e6:	426d      	negs	r5, r5
 80019e8:	1947      	adds	r7, r0, r5
 80019ea:	46b8      	mov	r8, r7
 80019ec:	4693      	mov	fp, r2
 80019ee:	4249      	negs	r1, r1
 80019f0:	4689      	mov	r9, r1
 80019f2:	44c3      	add	fp, r8
 80019f4:	44d9      	add	r9, fp
 80019f6:	4298      	cmp	r0, r3
 80019f8:	4180      	sbcs	r0, r0
 80019fa:	45a8      	cmp	r8, r5
 80019fc:	41ad      	sbcs	r5, r5
 80019fe:	4593      	cmp	fp, r2
 8001a00:	4192      	sbcs	r2, r2
 8001a02:	4589      	cmp	r9, r1
 8001a04:	4189      	sbcs	r1, r1
 8001a06:	426d      	negs	r5, r5
 8001a08:	4240      	negs	r0, r0
 8001a0a:	4328      	orrs	r0, r5
 8001a0c:	0c24      	lsrs	r4, r4, #16
 8001a0e:	4252      	negs	r2, r2
 8001a10:	4249      	negs	r1, r1
 8001a12:	430a      	orrs	r2, r1
 8001a14:	9b03      	ldr	r3, [sp, #12]
 8001a16:	1900      	adds	r0, r0, r4
 8001a18:	1880      	adds	r0, r0, r2
 8001a1a:	18c7      	adds	r7, r0, r3
 8001a1c:	464b      	mov	r3, r9
 8001a1e:	0ddc      	lsrs	r4, r3, #23
 8001a20:	9b04      	ldr	r3, [sp, #16]
 8001a22:	0275      	lsls	r5, r6, #9
 8001a24:	431d      	orrs	r5, r3
 8001a26:	1e6a      	subs	r2, r5, #1
 8001a28:	4195      	sbcs	r5, r2
 8001a2a:	464b      	mov	r3, r9
 8001a2c:	0df6      	lsrs	r6, r6, #23
 8001a2e:	027f      	lsls	r7, r7, #9
 8001a30:	4335      	orrs	r5, r6
 8001a32:	025a      	lsls	r2, r3, #9
 8001a34:	433c      	orrs	r4, r7
 8001a36:	4315      	orrs	r5, r2
 8001a38:	01fb      	lsls	r3, r7, #7
 8001a3a:	d400      	bmi.n	8001a3e <__aeabi_dmul+0x24a>
 8001a3c:	e11c      	b.n	8001c78 <__aeabi_dmul+0x484>
 8001a3e:	2101      	movs	r1, #1
 8001a40:	086a      	lsrs	r2, r5, #1
 8001a42:	400d      	ands	r5, r1
 8001a44:	4315      	orrs	r5, r2
 8001a46:	07e2      	lsls	r2, r4, #31
 8001a48:	4315      	orrs	r5, r2
 8001a4a:	0864      	lsrs	r4, r4, #1
 8001a4c:	494f      	ldr	r1, [pc, #316]	; (8001b8c <__aeabi_dmul+0x398>)
 8001a4e:	4461      	add	r1, ip
 8001a50:	2900      	cmp	r1, #0
 8001a52:	dc00      	bgt.n	8001a56 <__aeabi_dmul+0x262>
 8001a54:	e0b0      	b.n	8001bb8 <__aeabi_dmul+0x3c4>
 8001a56:	076b      	lsls	r3, r5, #29
 8001a58:	d009      	beq.n	8001a6e <__aeabi_dmul+0x27a>
 8001a5a:	220f      	movs	r2, #15
 8001a5c:	402a      	ands	r2, r5
 8001a5e:	2a04      	cmp	r2, #4
 8001a60:	d005      	beq.n	8001a6e <__aeabi_dmul+0x27a>
 8001a62:	1d2a      	adds	r2, r5, #4
 8001a64:	42aa      	cmp	r2, r5
 8001a66:	41ad      	sbcs	r5, r5
 8001a68:	426d      	negs	r5, r5
 8001a6a:	1964      	adds	r4, r4, r5
 8001a6c:	0015      	movs	r5, r2
 8001a6e:	01e3      	lsls	r3, r4, #7
 8001a70:	d504      	bpl.n	8001a7c <__aeabi_dmul+0x288>
 8001a72:	2180      	movs	r1, #128	; 0x80
 8001a74:	4a46      	ldr	r2, [pc, #280]	; (8001b90 <__aeabi_dmul+0x39c>)
 8001a76:	00c9      	lsls	r1, r1, #3
 8001a78:	4014      	ands	r4, r2
 8001a7a:	4461      	add	r1, ip
 8001a7c:	4a45      	ldr	r2, [pc, #276]	; (8001b94 <__aeabi_dmul+0x3a0>)
 8001a7e:	4291      	cmp	r1, r2
 8001a80:	dd00      	ble.n	8001a84 <__aeabi_dmul+0x290>
 8001a82:	e726      	b.n	80018d2 <__aeabi_dmul+0xde>
 8001a84:	0762      	lsls	r2, r4, #29
 8001a86:	08ed      	lsrs	r5, r5, #3
 8001a88:	0264      	lsls	r4, r4, #9
 8001a8a:	0549      	lsls	r1, r1, #21
 8001a8c:	4315      	orrs	r5, r2
 8001a8e:	0b24      	lsrs	r4, r4, #12
 8001a90:	0d4a      	lsrs	r2, r1, #21
 8001a92:	e710      	b.n	80018b6 <__aeabi_dmul+0xc2>
 8001a94:	4652      	mov	r2, sl
 8001a96:	4332      	orrs	r2, r6
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dmul+0x2a8>
 8001a9a:	e07f      	b.n	8001b9c <__aeabi_dmul+0x3a8>
 8001a9c:	2e00      	cmp	r6, #0
 8001a9e:	d100      	bne.n	8001aa2 <__aeabi_dmul+0x2ae>
 8001aa0:	e0dc      	b.n	8001c5c <__aeabi_dmul+0x468>
 8001aa2:	0030      	movs	r0, r6
 8001aa4:	f000 fe3e 	bl	8002724 <__clzsi2>
 8001aa8:	0002      	movs	r2, r0
 8001aaa:	3a0b      	subs	r2, #11
 8001aac:	231d      	movs	r3, #29
 8001aae:	0001      	movs	r1, r0
 8001ab0:	1a9b      	subs	r3, r3, r2
 8001ab2:	4652      	mov	r2, sl
 8001ab4:	3908      	subs	r1, #8
 8001ab6:	40da      	lsrs	r2, r3
 8001ab8:	408e      	lsls	r6, r1
 8001aba:	4316      	orrs	r6, r2
 8001abc:	4652      	mov	r2, sl
 8001abe:	408a      	lsls	r2, r1
 8001ac0:	9b00      	ldr	r3, [sp, #0]
 8001ac2:	4935      	ldr	r1, [pc, #212]	; (8001b98 <__aeabi_dmul+0x3a4>)
 8001ac4:	1a18      	subs	r0, r3, r0
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	468c      	mov	ip, r1
 8001aca:	4463      	add	r3, ip
 8001acc:	2000      	movs	r0, #0
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	e6d3      	b.n	800187a <__aeabi_dmul+0x86>
 8001ad2:	0025      	movs	r5, r4
 8001ad4:	4305      	orrs	r5, r0
 8001ad6:	d04a      	beq.n	8001b6e <__aeabi_dmul+0x37a>
 8001ad8:	2c00      	cmp	r4, #0
 8001ada:	d100      	bne.n	8001ade <__aeabi_dmul+0x2ea>
 8001adc:	e0b0      	b.n	8001c40 <__aeabi_dmul+0x44c>
 8001ade:	0020      	movs	r0, r4
 8001ae0:	f000 fe20 	bl	8002724 <__clzsi2>
 8001ae4:	0001      	movs	r1, r0
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	390b      	subs	r1, #11
 8001aea:	231d      	movs	r3, #29
 8001aec:	0010      	movs	r0, r2
 8001aee:	1a5b      	subs	r3, r3, r1
 8001af0:	0031      	movs	r1, r6
 8001af2:	0035      	movs	r5, r6
 8001af4:	3808      	subs	r0, #8
 8001af6:	4084      	lsls	r4, r0
 8001af8:	40d9      	lsrs	r1, r3
 8001afa:	4085      	lsls	r5, r0
 8001afc:	430c      	orrs	r4, r1
 8001afe:	4826      	ldr	r0, [pc, #152]	; (8001b98 <__aeabi_dmul+0x3a4>)
 8001b00:	1a83      	subs	r3, r0, r2
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	2300      	movs	r3, #0
 8001b06:	4699      	mov	r9, r3
 8001b08:	469b      	mov	fp, r3
 8001b0a:	e697      	b.n	800183c <__aeabi_dmul+0x48>
 8001b0c:	0005      	movs	r5, r0
 8001b0e:	4325      	orrs	r5, r4
 8001b10:	d126      	bne.n	8001b60 <__aeabi_dmul+0x36c>
 8001b12:	2208      	movs	r2, #8
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2302      	movs	r3, #2
 8001b18:	2400      	movs	r4, #0
 8001b1a:	4691      	mov	r9, r2
 8001b1c:	469b      	mov	fp, r3
 8001b1e:	e68d      	b.n	800183c <__aeabi_dmul+0x48>
 8001b20:	4652      	mov	r2, sl
 8001b22:	9b00      	ldr	r3, [sp, #0]
 8001b24:	4332      	orrs	r2, r6
 8001b26:	d110      	bne.n	8001b4a <__aeabi_dmul+0x356>
 8001b28:	4915      	ldr	r1, [pc, #84]	; (8001b80 <__aeabi_dmul+0x38c>)
 8001b2a:	2600      	movs	r6, #0
 8001b2c:	468c      	mov	ip, r1
 8001b2e:	4463      	add	r3, ip
 8001b30:	4649      	mov	r1, r9
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2302      	movs	r3, #2
 8001b36:	4319      	orrs	r1, r3
 8001b38:	4689      	mov	r9, r1
 8001b3a:	2002      	movs	r0, #2
 8001b3c:	e69d      	b.n	800187a <__aeabi_dmul+0x86>
 8001b3e:	465b      	mov	r3, fp
 8001b40:	9701      	str	r7, [sp, #4]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d000      	beq.n	8001b48 <__aeabi_dmul+0x354>
 8001b46:	e6ad      	b.n	80018a4 <__aeabi_dmul+0xb0>
 8001b48:	e6c3      	b.n	80018d2 <__aeabi_dmul+0xde>
 8001b4a:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <__aeabi_dmul+0x38c>)
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	4694      	mov	ip, r2
 8001b50:	4463      	add	r3, ip
 8001b52:	464a      	mov	r2, r9
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2303      	movs	r3, #3
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	4691      	mov	r9, r2
 8001b5c:	4652      	mov	r2, sl
 8001b5e:	e68c      	b.n	800187a <__aeabi_dmul+0x86>
 8001b60:	220c      	movs	r2, #12
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2303      	movs	r3, #3
 8001b66:	0005      	movs	r5, r0
 8001b68:	4691      	mov	r9, r2
 8001b6a:	469b      	mov	fp, r3
 8001b6c:	e666      	b.n	800183c <__aeabi_dmul+0x48>
 8001b6e:	2304      	movs	r3, #4
 8001b70:	4699      	mov	r9, r3
 8001b72:	2300      	movs	r3, #0
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	2400      	movs	r4, #0
 8001b7a:	469b      	mov	fp, r3
 8001b7c:	e65e      	b.n	800183c <__aeabi_dmul+0x48>
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	000007ff 	.word	0x000007ff
 8001b84:	fffffc01 	.word	0xfffffc01
 8001b88:	08008224 	.word	0x08008224
 8001b8c:	000003ff 	.word	0x000003ff
 8001b90:	feffffff 	.word	0xfeffffff
 8001b94:	000007fe 	.word	0x000007fe
 8001b98:	fffffc0d 	.word	0xfffffc0d
 8001b9c:	4649      	mov	r1, r9
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	4319      	orrs	r1, r3
 8001ba2:	4689      	mov	r9, r1
 8001ba4:	2600      	movs	r6, #0
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	e667      	b.n	800187a <__aeabi_dmul+0x86>
 8001baa:	2300      	movs	r3, #0
 8001bac:	2480      	movs	r4, #128	; 0x80
 8001bae:	2500      	movs	r5, #0
 8001bb0:	4a43      	ldr	r2, [pc, #268]	; (8001cc0 <__aeabi_dmul+0x4cc>)
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	0324      	lsls	r4, r4, #12
 8001bb6:	e67e      	b.n	80018b6 <__aeabi_dmul+0xc2>
 8001bb8:	2001      	movs	r0, #1
 8001bba:	1a40      	subs	r0, r0, r1
 8001bbc:	2838      	cmp	r0, #56	; 0x38
 8001bbe:	dd00      	ble.n	8001bc2 <__aeabi_dmul+0x3ce>
 8001bc0:	e676      	b.n	80018b0 <__aeabi_dmul+0xbc>
 8001bc2:	281f      	cmp	r0, #31
 8001bc4:	dd5b      	ble.n	8001c7e <__aeabi_dmul+0x48a>
 8001bc6:	221f      	movs	r2, #31
 8001bc8:	0023      	movs	r3, r4
 8001bca:	4252      	negs	r2, r2
 8001bcc:	1a51      	subs	r1, r2, r1
 8001bce:	40cb      	lsrs	r3, r1
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	2820      	cmp	r0, #32
 8001bd4:	d003      	beq.n	8001bde <__aeabi_dmul+0x3ea>
 8001bd6:	4a3b      	ldr	r2, [pc, #236]	; (8001cc4 <__aeabi_dmul+0x4d0>)
 8001bd8:	4462      	add	r2, ip
 8001bda:	4094      	lsls	r4, r2
 8001bdc:	4325      	orrs	r5, r4
 8001bde:	1e6a      	subs	r2, r5, #1
 8001be0:	4195      	sbcs	r5, r2
 8001be2:	002a      	movs	r2, r5
 8001be4:	430a      	orrs	r2, r1
 8001be6:	2107      	movs	r1, #7
 8001be8:	000d      	movs	r5, r1
 8001bea:	2400      	movs	r4, #0
 8001bec:	4015      	ands	r5, r2
 8001bee:	4211      	tst	r1, r2
 8001bf0:	d05b      	beq.n	8001caa <__aeabi_dmul+0x4b6>
 8001bf2:	210f      	movs	r1, #15
 8001bf4:	2400      	movs	r4, #0
 8001bf6:	4011      	ands	r1, r2
 8001bf8:	2904      	cmp	r1, #4
 8001bfa:	d053      	beq.n	8001ca4 <__aeabi_dmul+0x4b0>
 8001bfc:	1d11      	adds	r1, r2, #4
 8001bfe:	4291      	cmp	r1, r2
 8001c00:	4192      	sbcs	r2, r2
 8001c02:	4252      	negs	r2, r2
 8001c04:	18a4      	adds	r4, r4, r2
 8001c06:	000a      	movs	r2, r1
 8001c08:	0223      	lsls	r3, r4, #8
 8001c0a:	d54b      	bpl.n	8001ca4 <__aeabi_dmul+0x4b0>
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2400      	movs	r4, #0
 8001c10:	2500      	movs	r5, #0
 8001c12:	e650      	b.n	80018b6 <__aeabi_dmul+0xc2>
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	031b      	lsls	r3, r3, #12
 8001c18:	421c      	tst	r4, r3
 8001c1a:	d009      	beq.n	8001c30 <__aeabi_dmul+0x43c>
 8001c1c:	421e      	tst	r6, r3
 8001c1e:	d107      	bne.n	8001c30 <__aeabi_dmul+0x43c>
 8001c20:	4333      	orrs	r3, r6
 8001c22:	031c      	lsls	r4, r3, #12
 8001c24:	4643      	mov	r3, r8
 8001c26:	0015      	movs	r5, r2
 8001c28:	0b24      	lsrs	r4, r4, #12
 8001c2a:	4a25      	ldr	r2, [pc, #148]	; (8001cc0 <__aeabi_dmul+0x4cc>)
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	e642      	b.n	80018b6 <__aeabi_dmul+0xc2>
 8001c30:	2280      	movs	r2, #128	; 0x80
 8001c32:	0312      	lsls	r2, r2, #12
 8001c34:	4314      	orrs	r4, r2
 8001c36:	0324      	lsls	r4, r4, #12
 8001c38:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <__aeabi_dmul+0x4cc>)
 8001c3a:	0b24      	lsrs	r4, r4, #12
 8001c3c:	9701      	str	r7, [sp, #4]
 8001c3e:	e63a      	b.n	80018b6 <__aeabi_dmul+0xc2>
 8001c40:	f000 fd70 	bl	8002724 <__clzsi2>
 8001c44:	0001      	movs	r1, r0
 8001c46:	0002      	movs	r2, r0
 8001c48:	3115      	adds	r1, #21
 8001c4a:	3220      	adds	r2, #32
 8001c4c:	291c      	cmp	r1, #28
 8001c4e:	dc00      	bgt.n	8001c52 <__aeabi_dmul+0x45e>
 8001c50:	e74b      	b.n	8001aea <__aeabi_dmul+0x2f6>
 8001c52:	0034      	movs	r4, r6
 8001c54:	3808      	subs	r0, #8
 8001c56:	2500      	movs	r5, #0
 8001c58:	4084      	lsls	r4, r0
 8001c5a:	e750      	b.n	8001afe <__aeabi_dmul+0x30a>
 8001c5c:	f000 fd62 	bl	8002724 <__clzsi2>
 8001c60:	0003      	movs	r3, r0
 8001c62:	001a      	movs	r2, r3
 8001c64:	3215      	adds	r2, #21
 8001c66:	3020      	adds	r0, #32
 8001c68:	2a1c      	cmp	r2, #28
 8001c6a:	dc00      	bgt.n	8001c6e <__aeabi_dmul+0x47a>
 8001c6c:	e71e      	b.n	8001aac <__aeabi_dmul+0x2b8>
 8001c6e:	4656      	mov	r6, sl
 8001c70:	3b08      	subs	r3, #8
 8001c72:	2200      	movs	r2, #0
 8001c74:	409e      	lsls	r6, r3
 8001c76:	e723      	b.n	8001ac0 <__aeabi_dmul+0x2cc>
 8001c78:	9b00      	ldr	r3, [sp, #0]
 8001c7a:	469c      	mov	ip, r3
 8001c7c:	e6e6      	b.n	8001a4c <__aeabi_dmul+0x258>
 8001c7e:	4912      	ldr	r1, [pc, #72]	; (8001cc8 <__aeabi_dmul+0x4d4>)
 8001c80:	0022      	movs	r2, r4
 8001c82:	4461      	add	r1, ip
 8001c84:	002e      	movs	r6, r5
 8001c86:	408d      	lsls	r5, r1
 8001c88:	408a      	lsls	r2, r1
 8001c8a:	40c6      	lsrs	r6, r0
 8001c8c:	1e69      	subs	r1, r5, #1
 8001c8e:	418d      	sbcs	r5, r1
 8001c90:	4332      	orrs	r2, r6
 8001c92:	432a      	orrs	r2, r5
 8001c94:	40c4      	lsrs	r4, r0
 8001c96:	0753      	lsls	r3, r2, #29
 8001c98:	d0b6      	beq.n	8001c08 <__aeabi_dmul+0x414>
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	4011      	ands	r1, r2
 8001c9e:	2904      	cmp	r1, #4
 8001ca0:	d1ac      	bne.n	8001bfc <__aeabi_dmul+0x408>
 8001ca2:	e7b1      	b.n	8001c08 <__aeabi_dmul+0x414>
 8001ca4:	0765      	lsls	r5, r4, #29
 8001ca6:	0264      	lsls	r4, r4, #9
 8001ca8:	0b24      	lsrs	r4, r4, #12
 8001caa:	08d2      	lsrs	r2, r2, #3
 8001cac:	4315      	orrs	r5, r2
 8001cae:	2200      	movs	r2, #0
 8001cb0:	e601      	b.n	80018b6 <__aeabi_dmul+0xc2>
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	0312      	lsls	r2, r2, #12
 8001cb6:	4314      	orrs	r4, r2
 8001cb8:	0324      	lsls	r4, r4, #12
 8001cba:	4a01      	ldr	r2, [pc, #4]	; (8001cc0 <__aeabi_dmul+0x4cc>)
 8001cbc:	0b24      	lsrs	r4, r4, #12
 8001cbe:	e5fa      	b.n	80018b6 <__aeabi_dmul+0xc2>
 8001cc0:	000007ff 	.word	0x000007ff
 8001cc4:	0000043e 	.word	0x0000043e
 8001cc8:	0000041e 	.word	0x0000041e

08001ccc <__aeabi_dsub>:
 8001ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cce:	4657      	mov	r7, sl
 8001cd0:	464e      	mov	r6, r9
 8001cd2:	4645      	mov	r5, r8
 8001cd4:	46de      	mov	lr, fp
 8001cd6:	b5e0      	push	{r5, r6, r7, lr}
 8001cd8:	001e      	movs	r6, r3
 8001cda:	0017      	movs	r7, r2
 8001cdc:	004a      	lsls	r2, r1, #1
 8001cde:	030b      	lsls	r3, r1, #12
 8001ce0:	0d52      	lsrs	r2, r2, #21
 8001ce2:	0a5b      	lsrs	r3, r3, #9
 8001ce4:	4690      	mov	r8, r2
 8001ce6:	0f42      	lsrs	r2, r0, #29
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	0fcd      	lsrs	r5, r1, #31
 8001cec:	4ccd      	ldr	r4, [pc, #820]	; (8002024 <__aeabi_dsub+0x358>)
 8001cee:	0331      	lsls	r1, r6, #12
 8001cf0:	00c3      	lsls	r3, r0, #3
 8001cf2:	4694      	mov	ip, r2
 8001cf4:	0070      	lsls	r0, r6, #1
 8001cf6:	0f7a      	lsrs	r2, r7, #29
 8001cf8:	0a49      	lsrs	r1, r1, #9
 8001cfa:	00ff      	lsls	r7, r7, #3
 8001cfc:	469a      	mov	sl, r3
 8001cfe:	46b9      	mov	r9, r7
 8001d00:	0d40      	lsrs	r0, r0, #21
 8001d02:	0ff6      	lsrs	r6, r6, #31
 8001d04:	4311      	orrs	r1, r2
 8001d06:	42a0      	cmp	r0, r4
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x40>
 8001d0a:	e0b1      	b.n	8001e70 <__aeabi_dsub+0x1a4>
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4056      	eors	r6, r2
 8001d10:	46b3      	mov	fp, r6
 8001d12:	42b5      	cmp	r5, r6
 8001d14:	d100      	bne.n	8001d18 <__aeabi_dsub+0x4c>
 8001d16:	e088      	b.n	8001e2a <__aeabi_dsub+0x15e>
 8001d18:	4642      	mov	r2, r8
 8001d1a:	1a12      	subs	r2, r2, r0
 8001d1c:	2a00      	cmp	r2, #0
 8001d1e:	dc00      	bgt.n	8001d22 <__aeabi_dsub+0x56>
 8001d20:	e0ae      	b.n	8001e80 <__aeabi_dsub+0x1b4>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dsub+0x5c>
 8001d26:	e0c1      	b.n	8001eac <__aeabi_dsub+0x1e0>
 8001d28:	48be      	ldr	r0, [pc, #760]	; (8002024 <__aeabi_dsub+0x358>)
 8001d2a:	4580      	cmp	r8, r0
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_dsub+0x64>
 8001d2e:	e151      	b.n	8001fd4 <__aeabi_dsub+0x308>
 8001d30:	2080      	movs	r0, #128	; 0x80
 8001d32:	0400      	lsls	r0, r0, #16
 8001d34:	4301      	orrs	r1, r0
 8001d36:	2a38      	cmp	r2, #56	; 0x38
 8001d38:	dd00      	ble.n	8001d3c <__aeabi_dsub+0x70>
 8001d3a:	e17b      	b.n	8002034 <__aeabi_dsub+0x368>
 8001d3c:	2a1f      	cmp	r2, #31
 8001d3e:	dd00      	ble.n	8001d42 <__aeabi_dsub+0x76>
 8001d40:	e1ee      	b.n	8002120 <__aeabi_dsub+0x454>
 8001d42:	2020      	movs	r0, #32
 8001d44:	003e      	movs	r6, r7
 8001d46:	1a80      	subs	r0, r0, r2
 8001d48:	000c      	movs	r4, r1
 8001d4a:	40d6      	lsrs	r6, r2
 8001d4c:	40d1      	lsrs	r1, r2
 8001d4e:	4087      	lsls	r7, r0
 8001d50:	4662      	mov	r2, ip
 8001d52:	4084      	lsls	r4, r0
 8001d54:	1a52      	subs	r2, r2, r1
 8001d56:	1e78      	subs	r0, r7, #1
 8001d58:	4187      	sbcs	r7, r0
 8001d5a:	4694      	mov	ip, r2
 8001d5c:	4334      	orrs	r4, r6
 8001d5e:	4327      	orrs	r7, r4
 8001d60:	1bdc      	subs	r4, r3, r7
 8001d62:	42a3      	cmp	r3, r4
 8001d64:	419b      	sbcs	r3, r3
 8001d66:	4662      	mov	r2, ip
 8001d68:	425b      	negs	r3, r3
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	4699      	mov	r9, r3
 8001d6e:	464b      	mov	r3, r9
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	d400      	bmi.n	8001d76 <__aeabi_dsub+0xaa>
 8001d74:	e118      	b.n	8001fa8 <__aeabi_dsub+0x2dc>
 8001d76:	464b      	mov	r3, r9
 8001d78:	0258      	lsls	r0, r3, #9
 8001d7a:	0a43      	lsrs	r3, r0, #9
 8001d7c:	4699      	mov	r9, r3
 8001d7e:	464b      	mov	r3, r9
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0xba>
 8001d84:	e137      	b.n	8001ff6 <__aeabi_dsub+0x32a>
 8001d86:	4648      	mov	r0, r9
 8001d88:	f000 fccc 	bl	8002724 <__clzsi2>
 8001d8c:	0001      	movs	r1, r0
 8001d8e:	3908      	subs	r1, #8
 8001d90:	2320      	movs	r3, #32
 8001d92:	0022      	movs	r2, r4
 8001d94:	4648      	mov	r0, r9
 8001d96:	1a5b      	subs	r3, r3, r1
 8001d98:	40da      	lsrs	r2, r3
 8001d9a:	4088      	lsls	r0, r1
 8001d9c:	408c      	lsls	r4, r1
 8001d9e:	4643      	mov	r3, r8
 8001da0:	4310      	orrs	r0, r2
 8001da2:	4588      	cmp	r8, r1
 8001da4:	dd00      	ble.n	8001da8 <__aeabi_dsub+0xdc>
 8001da6:	e136      	b.n	8002016 <__aeabi_dsub+0x34a>
 8001da8:	1ac9      	subs	r1, r1, r3
 8001daa:	1c4b      	adds	r3, r1, #1
 8001dac:	2b1f      	cmp	r3, #31
 8001dae:	dd00      	ble.n	8001db2 <__aeabi_dsub+0xe6>
 8001db0:	e0ea      	b.n	8001f88 <__aeabi_dsub+0x2bc>
 8001db2:	2220      	movs	r2, #32
 8001db4:	0026      	movs	r6, r4
 8001db6:	1ad2      	subs	r2, r2, r3
 8001db8:	0001      	movs	r1, r0
 8001dba:	4094      	lsls	r4, r2
 8001dbc:	40de      	lsrs	r6, r3
 8001dbe:	40d8      	lsrs	r0, r3
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	4091      	lsls	r1, r2
 8001dc4:	1e62      	subs	r2, r4, #1
 8001dc6:	4194      	sbcs	r4, r2
 8001dc8:	4681      	mov	r9, r0
 8001dca:	4698      	mov	r8, r3
 8001dcc:	4331      	orrs	r1, r6
 8001dce:	430c      	orrs	r4, r1
 8001dd0:	0763      	lsls	r3, r4, #29
 8001dd2:	d009      	beq.n	8001de8 <__aeabi_dsub+0x11c>
 8001dd4:	230f      	movs	r3, #15
 8001dd6:	4023      	ands	r3, r4
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d005      	beq.n	8001de8 <__aeabi_dsub+0x11c>
 8001ddc:	1d23      	adds	r3, r4, #4
 8001dde:	42a3      	cmp	r3, r4
 8001de0:	41a4      	sbcs	r4, r4
 8001de2:	4264      	negs	r4, r4
 8001de4:	44a1      	add	r9, r4
 8001de6:	001c      	movs	r4, r3
 8001de8:	464b      	mov	r3, r9
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	d400      	bmi.n	8001df0 <__aeabi_dsub+0x124>
 8001dee:	e0de      	b.n	8001fae <__aeabi_dsub+0x2e2>
 8001df0:	4641      	mov	r1, r8
 8001df2:	4b8c      	ldr	r3, [pc, #560]	; (8002024 <__aeabi_dsub+0x358>)
 8001df4:	3101      	adds	r1, #1
 8001df6:	4299      	cmp	r1, r3
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x130>
 8001dfa:	e0e7      	b.n	8001fcc <__aeabi_dsub+0x300>
 8001dfc:	464b      	mov	r3, r9
 8001dfe:	488a      	ldr	r0, [pc, #552]	; (8002028 <__aeabi_dsub+0x35c>)
 8001e00:	08e4      	lsrs	r4, r4, #3
 8001e02:	4003      	ands	r3, r0
 8001e04:	0018      	movs	r0, r3
 8001e06:	0549      	lsls	r1, r1, #21
 8001e08:	075b      	lsls	r3, r3, #29
 8001e0a:	0240      	lsls	r0, r0, #9
 8001e0c:	4323      	orrs	r3, r4
 8001e0e:	0d4a      	lsrs	r2, r1, #21
 8001e10:	0b04      	lsrs	r4, r0, #12
 8001e12:	0512      	lsls	r2, r2, #20
 8001e14:	07ed      	lsls	r5, r5, #31
 8001e16:	4322      	orrs	r2, r4
 8001e18:	432a      	orrs	r2, r5
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	0011      	movs	r1, r2
 8001e1e:	bcf0      	pop	{r4, r5, r6, r7}
 8001e20:	46bb      	mov	fp, r7
 8001e22:	46b2      	mov	sl, r6
 8001e24:	46a9      	mov	r9, r5
 8001e26:	46a0      	mov	r8, r4
 8001e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e2a:	4642      	mov	r2, r8
 8001e2c:	1a12      	subs	r2, r2, r0
 8001e2e:	2a00      	cmp	r2, #0
 8001e30:	dd52      	ble.n	8001ed8 <__aeabi_dsub+0x20c>
 8001e32:	2800      	cmp	r0, #0
 8001e34:	d100      	bne.n	8001e38 <__aeabi_dsub+0x16c>
 8001e36:	e09c      	b.n	8001f72 <__aeabi_dsub+0x2a6>
 8001e38:	45a0      	cmp	r8, r4
 8001e3a:	d100      	bne.n	8001e3e <__aeabi_dsub+0x172>
 8001e3c:	e0ca      	b.n	8001fd4 <__aeabi_dsub+0x308>
 8001e3e:	2080      	movs	r0, #128	; 0x80
 8001e40:	0400      	lsls	r0, r0, #16
 8001e42:	4301      	orrs	r1, r0
 8001e44:	2a38      	cmp	r2, #56	; 0x38
 8001e46:	dd00      	ble.n	8001e4a <__aeabi_dsub+0x17e>
 8001e48:	e149      	b.n	80020de <__aeabi_dsub+0x412>
 8001e4a:	2a1f      	cmp	r2, #31
 8001e4c:	dc00      	bgt.n	8001e50 <__aeabi_dsub+0x184>
 8001e4e:	e197      	b.n	8002180 <__aeabi_dsub+0x4b4>
 8001e50:	0010      	movs	r0, r2
 8001e52:	000e      	movs	r6, r1
 8001e54:	3820      	subs	r0, #32
 8001e56:	40c6      	lsrs	r6, r0
 8001e58:	2a20      	cmp	r2, #32
 8001e5a:	d004      	beq.n	8001e66 <__aeabi_dsub+0x19a>
 8001e5c:	2040      	movs	r0, #64	; 0x40
 8001e5e:	1a82      	subs	r2, r0, r2
 8001e60:	4091      	lsls	r1, r2
 8001e62:	430f      	orrs	r7, r1
 8001e64:	46b9      	mov	r9, r7
 8001e66:	464c      	mov	r4, r9
 8001e68:	1e62      	subs	r2, r4, #1
 8001e6a:	4194      	sbcs	r4, r2
 8001e6c:	4334      	orrs	r4, r6
 8001e6e:	e13a      	b.n	80020e6 <__aeabi_dsub+0x41a>
 8001e70:	000a      	movs	r2, r1
 8001e72:	433a      	orrs	r2, r7
 8001e74:	d028      	beq.n	8001ec8 <__aeabi_dsub+0x1fc>
 8001e76:	46b3      	mov	fp, r6
 8001e78:	42b5      	cmp	r5, r6
 8001e7a:	d02b      	beq.n	8001ed4 <__aeabi_dsub+0x208>
 8001e7c:	4a6b      	ldr	r2, [pc, #428]	; (800202c <__aeabi_dsub+0x360>)
 8001e7e:	4442      	add	r2, r8
 8001e80:	2a00      	cmp	r2, #0
 8001e82:	d05d      	beq.n	8001f40 <__aeabi_dsub+0x274>
 8001e84:	4642      	mov	r2, r8
 8001e86:	4644      	mov	r4, r8
 8001e88:	1a82      	subs	r2, r0, r2
 8001e8a:	2c00      	cmp	r4, #0
 8001e8c:	d000      	beq.n	8001e90 <__aeabi_dsub+0x1c4>
 8001e8e:	e0f5      	b.n	800207c <__aeabi_dsub+0x3b0>
 8001e90:	4665      	mov	r5, ip
 8001e92:	431d      	orrs	r5, r3
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dsub+0x1cc>
 8001e96:	e19c      	b.n	80021d2 <__aeabi_dsub+0x506>
 8001e98:	1e55      	subs	r5, r2, #1
 8001e9a:	2a01      	cmp	r2, #1
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x1d4>
 8001e9e:	e1fb      	b.n	8002298 <__aeabi_dsub+0x5cc>
 8001ea0:	4c60      	ldr	r4, [pc, #384]	; (8002024 <__aeabi_dsub+0x358>)
 8001ea2:	42a2      	cmp	r2, r4
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x1dc>
 8001ea6:	e1bd      	b.n	8002224 <__aeabi_dsub+0x558>
 8001ea8:	002a      	movs	r2, r5
 8001eaa:	e0f0      	b.n	800208e <__aeabi_dsub+0x3c2>
 8001eac:	0008      	movs	r0, r1
 8001eae:	4338      	orrs	r0, r7
 8001eb0:	d100      	bne.n	8001eb4 <__aeabi_dsub+0x1e8>
 8001eb2:	e0c3      	b.n	800203c <__aeabi_dsub+0x370>
 8001eb4:	1e50      	subs	r0, r2, #1
 8001eb6:	2a01      	cmp	r2, #1
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x1f0>
 8001eba:	e1a8      	b.n	800220e <__aeabi_dsub+0x542>
 8001ebc:	4c59      	ldr	r4, [pc, #356]	; (8002024 <__aeabi_dsub+0x358>)
 8001ebe:	42a2      	cmp	r2, r4
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x1f8>
 8001ec2:	e087      	b.n	8001fd4 <__aeabi_dsub+0x308>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	e736      	b.n	8001d36 <__aeabi_dsub+0x6a>
 8001ec8:	2201      	movs	r2, #1
 8001eca:	4056      	eors	r6, r2
 8001ecc:	46b3      	mov	fp, r6
 8001ece:	42b5      	cmp	r5, r6
 8001ed0:	d000      	beq.n	8001ed4 <__aeabi_dsub+0x208>
 8001ed2:	e721      	b.n	8001d18 <__aeabi_dsub+0x4c>
 8001ed4:	4a55      	ldr	r2, [pc, #340]	; (800202c <__aeabi_dsub+0x360>)
 8001ed6:	4442      	add	r2, r8
 8001ed8:	2a00      	cmp	r2, #0
 8001eda:	d100      	bne.n	8001ede <__aeabi_dsub+0x212>
 8001edc:	e0b5      	b.n	800204a <__aeabi_dsub+0x37e>
 8001ede:	4642      	mov	r2, r8
 8001ee0:	4644      	mov	r4, r8
 8001ee2:	1a82      	subs	r2, r0, r2
 8001ee4:	2c00      	cmp	r4, #0
 8001ee6:	d100      	bne.n	8001eea <__aeabi_dsub+0x21e>
 8001ee8:	e138      	b.n	800215c <__aeabi_dsub+0x490>
 8001eea:	4e4e      	ldr	r6, [pc, #312]	; (8002024 <__aeabi_dsub+0x358>)
 8001eec:	42b0      	cmp	r0, r6
 8001eee:	d100      	bne.n	8001ef2 <__aeabi_dsub+0x226>
 8001ef0:	e1de      	b.n	80022b0 <__aeabi_dsub+0x5e4>
 8001ef2:	2680      	movs	r6, #128	; 0x80
 8001ef4:	4664      	mov	r4, ip
 8001ef6:	0436      	lsls	r6, r6, #16
 8001ef8:	4334      	orrs	r4, r6
 8001efa:	46a4      	mov	ip, r4
 8001efc:	2a38      	cmp	r2, #56	; 0x38
 8001efe:	dd00      	ble.n	8001f02 <__aeabi_dsub+0x236>
 8001f00:	e196      	b.n	8002230 <__aeabi_dsub+0x564>
 8001f02:	2a1f      	cmp	r2, #31
 8001f04:	dd00      	ble.n	8001f08 <__aeabi_dsub+0x23c>
 8001f06:	e224      	b.n	8002352 <__aeabi_dsub+0x686>
 8001f08:	2620      	movs	r6, #32
 8001f0a:	1ab4      	subs	r4, r6, r2
 8001f0c:	46a2      	mov	sl, r4
 8001f0e:	4664      	mov	r4, ip
 8001f10:	4656      	mov	r6, sl
 8001f12:	40b4      	lsls	r4, r6
 8001f14:	46a1      	mov	r9, r4
 8001f16:	001c      	movs	r4, r3
 8001f18:	464e      	mov	r6, r9
 8001f1a:	40d4      	lsrs	r4, r2
 8001f1c:	4326      	orrs	r6, r4
 8001f1e:	0034      	movs	r4, r6
 8001f20:	4656      	mov	r6, sl
 8001f22:	40b3      	lsls	r3, r6
 8001f24:	1e5e      	subs	r6, r3, #1
 8001f26:	41b3      	sbcs	r3, r6
 8001f28:	431c      	orrs	r4, r3
 8001f2a:	4663      	mov	r3, ip
 8001f2c:	40d3      	lsrs	r3, r2
 8001f2e:	18c9      	adds	r1, r1, r3
 8001f30:	19e4      	adds	r4, r4, r7
 8001f32:	42bc      	cmp	r4, r7
 8001f34:	41bf      	sbcs	r7, r7
 8001f36:	427f      	negs	r7, r7
 8001f38:	46b9      	mov	r9, r7
 8001f3a:	4680      	mov	r8, r0
 8001f3c:	4489      	add	r9, r1
 8001f3e:	e0d8      	b.n	80020f2 <__aeabi_dsub+0x426>
 8001f40:	4640      	mov	r0, r8
 8001f42:	4c3b      	ldr	r4, [pc, #236]	; (8002030 <__aeabi_dsub+0x364>)
 8001f44:	3001      	adds	r0, #1
 8001f46:	4220      	tst	r0, r4
 8001f48:	d000      	beq.n	8001f4c <__aeabi_dsub+0x280>
 8001f4a:	e0b4      	b.n	80020b6 <__aeabi_dsub+0x3ea>
 8001f4c:	4640      	mov	r0, r8
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d000      	beq.n	8001f54 <__aeabi_dsub+0x288>
 8001f52:	e144      	b.n	80021de <__aeabi_dsub+0x512>
 8001f54:	4660      	mov	r0, ip
 8001f56:	4318      	orrs	r0, r3
 8001f58:	d100      	bne.n	8001f5c <__aeabi_dsub+0x290>
 8001f5a:	e190      	b.n	800227e <__aeabi_dsub+0x5b2>
 8001f5c:	0008      	movs	r0, r1
 8001f5e:	4338      	orrs	r0, r7
 8001f60:	d000      	beq.n	8001f64 <__aeabi_dsub+0x298>
 8001f62:	e1aa      	b.n	80022ba <__aeabi_dsub+0x5ee>
 8001f64:	4661      	mov	r1, ip
 8001f66:	08db      	lsrs	r3, r3, #3
 8001f68:	0749      	lsls	r1, r1, #29
 8001f6a:	430b      	orrs	r3, r1
 8001f6c:	4661      	mov	r1, ip
 8001f6e:	08cc      	lsrs	r4, r1, #3
 8001f70:	e027      	b.n	8001fc2 <__aeabi_dsub+0x2f6>
 8001f72:	0008      	movs	r0, r1
 8001f74:	4338      	orrs	r0, r7
 8001f76:	d061      	beq.n	800203c <__aeabi_dsub+0x370>
 8001f78:	1e50      	subs	r0, r2, #1
 8001f7a:	2a01      	cmp	r2, #1
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x2b4>
 8001f7e:	e139      	b.n	80021f4 <__aeabi_dsub+0x528>
 8001f80:	42a2      	cmp	r2, r4
 8001f82:	d027      	beq.n	8001fd4 <__aeabi_dsub+0x308>
 8001f84:	0002      	movs	r2, r0
 8001f86:	e75d      	b.n	8001e44 <__aeabi_dsub+0x178>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	391f      	subs	r1, #31
 8001f8c:	40ca      	lsrs	r2, r1
 8001f8e:	0011      	movs	r1, r2
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d003      	beq.n	8001f9c <__aeabi_dsub+0x2d0>
 8001f94:	2240      	movs	r2, #64	; 0x40
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	4098      	lsls	r0, r3
 8001f9a:	4304      	orrs	r4, r0
 8001f9c:	1e63      	subs	r3, r4, #1
 8001f9e:	419c      	sbcs	r4, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	4699      	mov	r9, r3
 8001fa4:	4698      	mov	r8, r3
 8001fa6:	430c      	orrs	r4, r1
 8001fa8:	0763      	lsls	r3, r4, #29
 8001faa:	d000      	beq.n	8001fae <__aeabi_dsub+0x2e2>
 8001fac:	e712      	b.n	8001dd4 <__aeabi_dsub+0x108>
 8001fae:	464b      	mov	r3, r9
 8001fb0:	464a      	mov	r2, r9
 8001fb2:	08e4      	lsrs	r4, r4, #3
 8001fb4:	075b      	lsls	r3, r3, #29
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	08d4      	lsrs	r4, r2, #3
 8001fba:	4642      	mov	r2, r8
 8001fbc:	4919      	ldr	r1, [pc, #100]	; (8002024 <__aeabi_dsub+0x358>)
 8001fbe:	428a      	cmp	r2, r1
 8001fc0:	d00e      	beq.n	8001fe0 <__aeabi_dsub+0x314>
 8001fc2:	0324      	lsls	r4, r4, #12
 8001fc4:	0552      	lsls	r2, r2, #21
 8001fc6:	0b24      	lsrs	r4, r4, #12
 8001fc8:	0d52      	lsrs	r2, r2, #21
 8001fca:	e722      	b.n	8001e12 <__aeabi_dsub+0x146>
 8001fcc:	000a      	movs	r2, r1
 8001fce:	2400      	movs	r4, #0
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	e71e      	b.n	8001e12 <__aeabi_dsub+0x146>
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	4662      	mov	r2, ip
 8001fd8:	0752      	lsls	r2, r2, #29
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4662      	mov	r2, ip
 8001fde:	08d4      	lsrs	r4, r2, #3
 8001fe0:	001a      	movs	r2, r3
 8001fe2:	4322      	orrs	r2, r4
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x31c>
 8001fe6:	e1fc      	b.n	80023e2 <__aeabi_dsub+0x716>
 8001fe8:	2280      	movs	r2, #128	; 0x80
 8001fea:	0312      	lsls	r2, r2, #12
 8001fec:	4314      	orrs	r4, r2
 8001fee:	0324      	lsls	r4, r4, #12
 8001ff0:	4a0c      	ldr	r2, [pc, #48]	; (8002024 <__aeabi_dsub+0x358>)
 8001ff2:	0b24      	lsrs	r4, r4, #12
 8001ff4:	e70d      	b.n	8001e12 <__aeabi_dsub+0x146>
 8001ff6:	0020      	movs	r0, r4
 8001ff8:	f000 fb94 	bl	8002724 <__clzsi2>
 8001ffc:	0001      	movs	r1, r0
 8001ffe:	3118      	adds	r1, #24
 8002000:	291f      	cmp	r1, #31
 8002002:	dc00      	bgt.n	8002006 <__aeabi_dsub+0x33a>
 8002004:	e6c4      	b.n	8001d90 <__aeabi_dsub+0xc4>
 8002006:	3808      	subs	r0, #8
 8002008:	4084      	lsls	r4, r0
 800200a:	4643      	mov	r3, r8
 800200c:	0020      	movs	r0, r4
 800200e:	2400      	movs	r4, #0
 8002010:	4588      	cmp	r8, r1
 8002012:	dc00      	bgt.n	8002016 <__aeabi_dsub+0x34a>
 8002014:	e6c8      	b.n	8001da8 <__aeabi_dsub+0xdc>
 8002016:	4a04      	ldr	r2, [pc, #16]	; (8002028 <__aeabi_dsub+0x35c>)
 8002018:	1a5b      	subs	r3, r3, r1
 800201a:	4010      	ands	r0, r2
 800201c:	4698      	mov	r8, r3
 800201e:	4681      	mov	r9, r0
 8002020:	e6d6      	b.n	8001dd0 <__aeabi_dsub+0x104>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	000007ff 	.word	0x000007ff
 8002028:	ff7fffff 	.word	0xff7fffff
 800202c:	fffff801 	.word	0xfffff801
 8002030:	000007fe 	.word	0x000007fe
 8002034:	430f      	orrs	r7, r1
 8002036:	1e7a      	subs	r2, r7, #1
 8002038:	4197      	sbcs	r7, r2
 800203a:	e691      	b.n	8001d60 <__aeabi_dsub+0x94>
 800203c:	4661      	mov	r1, ip
 800203e:	08db      	lsrs	r3, r3, #3
 8002040:	0749      	lsls	r1, r1, #29
 8002042:	430b      	orrs	r3, r1
 8002044:	4661      	mov	r1, ip
 8002046:	08cc      	lsrs	r4, r1, #3
 8002048:	e7b8      	b.n	8001fbc <__aeabi_dsub+0x2f0>
 800204a:	4640      	mov	r0, r8
 800204c:	4cd3      	ldr	r4, [pc, #844]	; (800239c <__aeabi_dsub+0x6d0>)
 800204e:	3001      	adds	r0, #1
 8002050:	4220      	tst	r0, r4
 8002052:	d000      	beq.n	8002056 <__aeabi_dsub+0x38a>
 8002054:	e0a2      	b.n	800219c <__aeabi_dsub+0x4d0>
 8002056:	4640      	mov	r0, r8
 8002058:	2800      	cmp	r0, #0
 800205a:	d000      	beq.n	800205e <__aeabi_dsub+0x392>
 800205c:	e101      	b.n	8002262 <__aeabi_dsub+0x596>
 800205e:	4660      	mov	r0, ip
 8002060:	4318      	orrs	r0, r3
 8002062:	d100      	bne.n	8002066 <__aeabi_dsub+0x39a>
 8002064:	e15e      	b.n	8002324 <__aeabi_dsub+0x658>
 8002066:	0008      	movs	r0, r1
 8002068:	4338      	orrs	r0, r7
 800206a:	d000      	beq.n	800206e <__aeabi_dsub+0x3a2>
 800206c:	e15f      	b.n	800232e <__aeabi_dsub+0x662>
 800206e:	4661      	mov	r1, ip
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	0749      	lsls	r1, r1, #29
 8002074:	430b      	orrs	r3, r1
 8002076:	4661      	mov	r1, ip
 8002078:	08cc      	lsrs	r4, r1, #3
 800207a:	e7a2      	b.n	8001fc2 <__aeabi_dsub+0x2f6>
 800207c:	4dc8      	ldr	r5, [pc, #800]	; (80023a0 <__aeabi_dsub+0x6d4>)
 800207e:	42a8      	cmp	r0, r5
 8002080:	d100      	bne.n	8002084 <__aeabi_dsub+0x3b8>
 8002082:	e0cf      	b.n	8002224 <__aeabi_dsub+0x558>
 8002084:	2580      	movs	r5, #128	; 0x80
 8002086:	4664      	mov	r4, ip
 8002088:	042d      	lsls	r5, r5, #16
 800208a:	432c      	orrs	r4, r5
 800208c:	46a4      	mov	ip, r4
 800208e:	2a38      	cmp	r2, #56	; 0x38
 8002090:	dc56      	bgt.n	8002140 <__aeabi_dsub+0x474>
 8002092:	2a1f      	cmp	r2, #31
 8002094:	dd00      	ble.n	8002098 <__aeabi_dsub+0x3cc>
 8002096:	e0d1      	b.n	800223c <__aeabi_dsub+0x570>
 8002098:	2520      	movs	r5, #32
 800209a:	001e      	movs	r6, r3
 800209c:	1aad      	subs	r5, r5, r2
 800209e:	4664      	mov	r4, ip
 80020a0:	40ab      	lsls	r3, r5
 80020a2:	40ac      	lsls	r4, r5
 80020a4:	40d6      	lsrs	r6, r2
 80020a6:	1e5d      	subs	r5, r3, #1
 80020a8:	41ab      	sbcs	r3, r5
 80020aa:	4334      	orrs	r4, r6
 80020ac:	4323      	orrs	r3, r4
 80020ae:	4664      	mov	r4, ip
 80020b0:	40d4      	lsrs	r4, r2
 80020b2:	1b09      	subs	r1, r1, r4
 80020b4:	e049      	b.n	800214a <__aeabi_dsub+0x47e>
 80020b6:	4660      	mov	r0, ip
 80020b8:	1bdc      	subs	r4, r3, r7
 80020ba:	1a46      	subs	r6, r0, r1
 80020bc:	42a3      	cmp	r3, r4
 80020be:	4180      	sbcs	r0, r0
 80020c0:	4240      	negs	r0, r0
 80020c2:	4681      	mov	r9, r0
 80020c4:	0030      	movs	r0, r6
 80020c6:	464e      	mov	r6, r9
 80020c8:	1b80      	subs	r0, r0, r6
 80020ca:	4681      	mov	r9, r0
 80020cc:	0200      	lsls	r0, r0, #8
 80020ce:	d476      	bmi.n	80021be <__aeabi_dsub+0x4f2>
 80020d0:	464b      	mov	r3, r9
 80020d2:	4323      	orrs	r3, r4
 80020d4:	d000      	beq.n	80020d8 <__aeabi_dsub+0x40c>
 80020d6:	e652      	b.n	8001d7e <__aeabi_dsub+0xb2>
 80020d8:	2400      	movs	r4, #0
 80020da:	2500      	movs	r5, #0
 80020dc:	e771      	b.n	8001fc2 <__aeabi_dsub+0x2f6>
 80020de:	4339      	orrs	r1, r7
 80020e0:	000c      	movs	r4, r1
 80020e2:	1e62      	subs	r2, r4, #1
 80020e4:	4194      	sbcs	r4, r2
 80020e6:	18e4      	adds	r4, r4, r3
 80020e8:	429c      	cmp	r4, r3
 80020ea:	419b      	sbcs	r3, r3
 80020ec:	425b      	negs	r3, r3
 80020ee:	4463      	add	r3, ip
 80020f0:	4699      	mov	r9, r3
 80020f2:	464b      	mov	r3, r9
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	d400      	bmi.n	80020fa <__aeabi_dsub+0x42e>
 80020f8:	e756      	b.n	8001fa8 <__aeabi_dsub+0x2dc>
 80020fa:	2301      	movs	r3, #1
 80020fc:	469c      	mov	ip, r3
 80020fe:	4ba8      	ldr	r3, [pc, #672]	; (80023a0 <__aeabi_dsub+0x6d4>)
 8002100:	44e0      	add	r8, ip
 8002102:	4598      	cmp	r8, r3
 8002104:	d038      	beq.n	8002178 <__aeabi_dsub+0x4ac>
 8002106:	464b      	mov	r3, r9
 8002108:	48a6      	ldr	r0, [pc, #664]	; (80023a4 <__aeabi_dsub+0x6d8>)
 800210a:	2201      	movs	r2, #1
 800210c:	4003      	ands	r3, r0
 800210e:	0018      	movs	r0, r3
 8002110:	0863      	lsrs	r3, r4, #1
 8002112:	4014      	ands	r4, r2
 8002114:	431c      	orrs	r4, r3
 8002116:	07c3      	lsls	r3, r0, #31
 8002118:	431c      	orrs	r4, r3
 800211a:	0843      	lsrs	r3, r0, #1
 800211c:	4699      	mov	r9, r3
 800211e:	e657      	b.n	8001dd0 <__aeabi_dsub+0x104>
 8002120:	0010      	movs	r0, r2
 8002122:	000e      	movs	r6, r1
 8002124:	3820      	subs	r0, #32
 8002126:	40c6      	lsrs	r6, r0
 8002128:	2a20      	cmp	r2, #32
 800212a:	d004      	beq.n	8002136 <__aeabi_dsub+0x46a>
 800212c:	2040      	movs	r0, #64	; 0x40
 800212e:	1a82      	subs	r2, r0, r2
 8002130:	4091      	lsls	r1, r2
 8002132:	430f      	orrs	r7, r1
 8002134:	46b9      	mov	r9, r7
 8002136:	464f      	mov	r7, r9
 8002138:	1e7a      	subs	r2, r7, #1
 800213a:	4197      	sbcs	r7, r2
 800213c:	4337      	orrs	r7, r6
 800213e:	e60f      	b.n	8001d60 <__aeabi_dsub+0x94>
 8002140:	4662      	mov	r2, ip
 8002142:	431a      	orrs	r2, r3
 8002144:	0013      	movs	r3, r2
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	4193      	sbcs	r3, r2
 800214a:	1afc      	subs	r4, r7, r3
 800214c:	42a7      	cmp	r7, r4
 800214e:	41bf      	sbcs	r7, r7
 8002150:	427f      	negs	r7, r7
 8002152:	1bcb      	subs	r3, r1, r7
 8002154:	4699      	mov	r9, r3
 8002156:	465d      	mov	r5, fp
 8002158:	4680      	mov	r8, r0
 800215a:	e608      	b.n	8001d6e <__aeabi_dsub+0xa2>
 800215c:	4666      	mov	r6, ip
 800215e:	431e      	orrs	r6, r3
 8002160:	d100      	bne.n	8002164 <__aeabi_dsub+0x498>
 8002162:	e0be      	b.n	80022e2 <__aeabi_dsub+0x616>
 8002164:	1e56      	subs	r6, r2, #1
 8002166:	2a01      	cmp	r2, #1
 8002168:	d100      	bne.n	800216c <__aeabi_dsub+0x4a0>
 800216a:	e109      	b.n	8002380 <__aeabi_dsub+0x6b4>
 800216c:	4c8c      	ldr	r4, [pc, #560]	; (80023a0 <__aeabi_dsub+0x6d4>)
 800216e:	42a2      	cmp	r2, r4
 8002170:	d100      	bne.n	8002174 <__aeabi_dsub+0x4a8>
 8002172:	e119      	b.n	80023a8 <__aeabi_dsub+0x6dc>
 8002174:	0032      	movs	r2, r6
 8002176:	e6c1      	b.n	8001efc <__aeabi_dsub+0x230>
 8002178:	4642      	mov	r2, r8
 800217a:	2400      	movs	r4, #0
 800217c:	2300      	movs	r3, #0
 800217e:	e648      	b.n	8001e12 <__aeabi_dsub+0x146>
 8002180:	2020      	movs	r0, #32
 8002182:	000c      	movs	r4, r1
 8002184:	1a80      	subs	r0, r0, r2
 8002186:	003e      	movs	r6, r7
 8002188:	4087      	lsls	r7, r0
 800218a:	4084      	lsls	r4, r0
 800218c:	40d6      	lsrs	r6, r2
 800218e:	1e78      	subs	r0, r7, #1
 8002190:	4187      	sbcs	r7, r0
 8002192:	40d1      	lsrs	r1, r2
 8002194:	4334      	orrs	r4, r6
 8002196:	433c      	orrs	r4, r7
 8002198:	448c      	add	ip, r1
 800219a:	e7a4      	b.n	80020e6 <__aeabi_dsub+0x41a>
 800219c:	4a80      	ldr	r2, [pc, #512]	; (80023a0 <__aeabi_dsub+0x6d4>)
 800219e:	4290      	cmp	r0, r2
 80021a0:	d100      	bne.n	80021a4 <__aeabi_dsub+0x4d8>
 80021a2:	e0e9      	b.n	8002378 <__aeabi_dsub+0x6ac>
 80021a4:	19df      	adds	r7, r3, r7
 80021a6:	429f      	cmp	r7, r3
 80021a8:	419b      	sbcs	r3, r3
 80021aa:	4461      	add	r1, ip
 80021ac:	425b      	negs	r3, r3
 80021ae:	18c9      	adds	r1, r1, r3
 80021b0:	07cc      	lsls	r4, r1, #31
 80021b2:	087f      	lsrs	r7, r7, #1
 80021b4:	084b      	lsrs	r3, r1, #1
 80021b6:	4699      	mov	r9, r3
 80021b8:	4680      	mov	r8, r0
 80021ba:	433c      	orrs	r4, r7
 80021bc:	e6f4      	b.n	8001fa8 <__aeabi_dsub+0x2dc>
 80021be:	1afc      	subs	r4, r7, r3
 80021c0:	42a7      	cmp	r7, r4
 80021c2:	41bf      	sbcs	r7, r7
 80021c4:	4663      	mov	r3, ip
 80021c6:	427f      	negs	r7, r7
 80021c8:	1ac9      	subs	r1, r1, r3
 80021ca:	1bcb      	subs	r3, r1, r7
 80021cc:	4699      	mov	r9, r3
 80021ce:	465d      	mov	r5, fp
 80021d0:	e5d5      	b.n	8001d7e <__aeabi_dsub+0xb2>
 80021d2:	08ff      	lsrs	r7, r7, #3
 80021d4:	074b      	lsls	r3, r1, #29
 80021d6:	465d      	mov	r5, fp
 80021d8:	433b      	orrs	r3, r7
 80021da:	08cc      	lsrs	r4, r1, #3
 80021dc:	e6ee      	b.n	8001fbc <__aeabi_dsub+0x2f0>
 80021de:	4662      	mov	r2, ip
 80021e0:	431a      	orrs	r2, r3
 80021e2:	d000      	beq.n	80021e6 <__aeabi_dsub+0x51a>
 80021e4:	e082      	b.n	80022ec <__aeabi_dsub+0x620>
 80021e6:	000b      	movs	r3, r1
 80021e8:	433b      	orrs	r3, r7
 80021ea:	d11b      	bne.n	8002224 <__aeabi_dsub+0x558>
 80021ec:	2480      	movs	r4, #128	; 0x80
 80021ee:	2500      	movs	r5, #0
 80021f0:	0324      	lsls	r4, r4, #12
 80021f2:	e6f9      	b.n	8001fe8 <__aeabi_dsub+0x31c>
 80021f4:	19dc      	adds	r4, r3, r7
 80021f6:	429c      	cmp	r4, r3
 80021f8:	419b      	sbcs	r3, r3
 80021fa:	4461      	add	r1, ip
 80021fc:	4689      	mov	r9, r1
 80021fe:	425b      	negs	r3, r3
 8002200:	4499      	add	r9, r3
 8002202:	464b      	mov	r3, r9
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	d444      	bmi.n	8002292 <__aeabi_dsub+0x5c6>
 8002208:	2301      	movs	r3, #1
 800220a:	4698      	mov	r8, r3
 800220c:	e6cc      	b.n	8001fa8 <__aeabi_dsub+0x2dc>
 800220e:	1bdc      	subs	r4, r3, r7
 8002210:	4662      	mov	r2, ip
 8002212:	42a3      	cmp	r3, r4
 8002214:	419b      	sbcs	r3, r3
 8002216:	1a51      	subs	r1, r2, r1
 8002218:	425b      	negs	r3, r3
 800221a:	1acb      	subs	r3, r1, r3
 800221c:	4699      	mov	r9, r3
 800221e:	2301      	movs	r3, #1
 8002220:	4698      	mov	r8, r3
 8002222:	e5a4      	b.n	8001d6e <__aeabi_dsub+0xa2>
 8002224:	08ff      	lsrs	r7, r7, #3
 8002226:	074b      	lsls	r3, r1, #29
 8002228:	465d      	mov	r5, fp
 800222a:	433b      	orrs	r3, r7
 800222c:	08cc      	lsrs	r4, r1, #3
 800222e:	e6d7      	b.n	8001fe0 <__aeabi_dsub+0x314>
 8002230:	4662      	mov	r2, ip
 8002232:	431a      	orrs	r2, r3
 8002234:	0014      	movs	r4, r2
 8002236:	1e63      	subs	r3, r4, #1
 8002238:	419c      	sbcs	r4, r3
 800223a:	e679      	b.n	8001f30 <__aeabi_dsub+0x264>
 800223c:	0015      	movs	r5, r2
 800223e:	4664      	mov	r4, ip
 8002240:	3d20      	subs	r5, #32
 8002242:	40ec      	lsrs	r4, r5
 8002244:	46a0      	mov	r8, r4
 8002246:	2a20      	cmp	r2, #32
 8002248:	d005      	beq.n	8002256 <__aeabi_dsub+0x58a>
 800224a:	2540      	movs	r5, #64	; 0x40
 800224c:	4664      	mov	r4, ip
 800224e:	1aaa      	subs	r2, r5, r2
 8002250:	4094      	lsls	r4, r2
 8002252:	4323      	orrs	r3, r4
 8002254:	469a      	mov	sl, r3
 8002256:	4654      	mov	r4, sl
 8002258:	1e63      	subs	r3, r4, #1
 800225a:	419c      	sbcs	r4, r3
 800225c:	4643      	mov	r3, r8
 800225e:	4323      	orrs	r3, r4
 8002260:	e773      	b.n	800214a <__aeabi_dsub+0x47e>
 8002262:	4662      	mov	r2, ip
 8002264:	431a      	orrs	r2, r3
 8002266:	d023      	beq.n	80022b0 <__aeabi_dsub+0x5e4>
 8002268:	000a      	movs	r2, r1
 800226a:	433a      	orrs	r2, r7
 800226c:	d000      	beq.n	8002270 <__aeabi_dsub+0x5a4>
 800226e:	e0a0      	b.n	80023b2 <__aeabi_dsub+0x6e6>
 8002270:	4662      	mov	r2, ip
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	0752      	lsls	r2, r2, #29
 8002276:	4313      	orrs	r3, r2
 8002278:	4662      	mov	r2, ip
 800227a:	08d4      	lsrs	r4, r2, #3
 800227c:	e6b0      	b.n	8001fe0 <__aeabi_dsub+0x314>
 800227e:	000b      	movs	r3, r1
 8002280:	433b      	orrs	r3, r7
 8002282:	d100      	bne.n	8002286 <__aeabi_dsub+0x5ba>
 8002284:	e728      	b.n	80020d8 <__aeabi_dsub+0x40c>
 8002286:	08ff      	lsrs	r7, r7, #3
 8002288:	074b      	lsls	r3, r1, #29
 800228a:	465d      	mov	r5, fp
 800228c:	433b      	orrs	r3, r7
 800228e:	08cc      	lsrs	r4, r1, #3
 8002290:	e697      	b.n	8001fc2 <__aeabi_dsub+0x2f6>
 8002292:	2302      	movs	r3, #2
 8002294:	4698      	mov	r8, r3
 8002296:	e736      	b.n	8002106 <__aeabi_dsub+0x43a>
 8002298:	1afc      	subs	r4, r7, r3
 800229a:	42a7      	cmp	r7, r4
 800229c:	41bf      	sbcs	r7, r7
 800229e:	4663      	mov	r3, ip
 80022a0:	427f      	negs	r7, r7
 80022a2:	1ac9      	subs	r1, r1, r3
 80022a4:	1bcb      	subs	r3, r1, r7
 80022a6:	4699      	mov	r9, r3
 80022a8:	2301      	movs	r3, #1
 80022aa:	465d      	mov	r5, fp
 80022ac:	4698      	mov	r8, r3
 80022ae:	e55e      	b.n	8001d6e <__aeabi_dsub+0xa2>
 80022b0:	074b      	lsls	r3, r1, #29
 80022b2:	08ff      	lsrs	r7, r7, #3
 80022b4:	433b      	orrs	r3, r7
 80022b6:	08cc      	lsrs	r4, r1, #3
 80022b8:	e692      	b.n	8001fe0 <__aeabi_dsub+0x314>
 80022ba:	1bdc      	subs	r4, r3, r7
 80022bc:	4660      	mov	r0, ip
 80022be:	42a3      	cmp	r3, r4
 80022c0:	41b6      	sbcs	r6, r6
 80022c2:	1a40      	subs	r0, r0, r1
 80022c4:	4276      	negs	r6, r6
 80022c6:	1b80      	subs	r0, r0, r6
 80022c8:	4681      	mov	r9, r0
 80022ca:	0200      	lsls	r0, r0, #8
 80022cc:	d560      	bpl.n	8002390 <__aeabi_dsub+0x6c4>
 80022ce:	1afc      	subs	r4, r7, r3
 80022d0:	42a7      	cmp	r7, r4
 80022d2:	41bf      	sbcs	r7, r7
 80022d4:	4663      	mov	r3, ip
 80022d6:	427f      	negs	r7, r7
 80022d8:	1ac9      	subs	r1, r1, r3
 80022da:	1bcb      	subs	r3, r1, r7
 80022dc:	4699      	mov	r9, r3
 80022de:	465d      	mov	r5, fp
 80022e0:	e576      	b.n	8001dd0 <__aeabi_dsub+0x104>
 80022e2:	08ff      	lsrs	r7, r7, #3
 80022e4:	074b      	lsls	r3, r1, #29
 80022e6:	433b      	orrs	r3, r7
 80022e8:	08cc      	lsrs	r4, r1, #3
 80022ea:	e667      	b.n	8001fbc <__aeabi_dsub+0x2f0>
 80022ec:	000a      	movs	r2, r1
 80022ee:	08db      	lsrs	r3, r3, #3
 80022f0:	433a      	orrs	r2, r7
 80022f2:	d100      	bne.n	80022f6 <__aeabi_dsub+0x62a>
 80022f4:	e66f      	b.n	8001fd6 <__aeabi_dsub+0x30a>
 80022f6:	4662      	mov	r2, ip
 80022f8:	0752      	lsls	r2, r2, #29
 80022fa:	4313      	orrs	r3, r2
 80022fc:	4662      	mov	r2, ip
 80022fe:	08d4      	lsrs	r4, r2, #3
 8002300:	2280      	movs	r2, #128	; 0x80
 8002302:	0312      	lsls	r2, r2, #12
 8002304:	4214      	tst	r4, r2
 8002306:	d007      	beq.n	8002318 <__aeabi_dsub+0x64c>
 8002308:	08c8      	lsrs	r0, r1, #3
 800230a:	4210      	tst	r0, r2
 800230c:	d104      	bne.n	8002318 <__aeabi_dsub+0x64c>
 800230e:	465d      	mov	r5, fp
 8002310:	0004      	movs	r4, r0
 8002312:	08fb      	lsrs	r3, r7, #3
 8002314:	0749      	lsls	r1, r1, #29
 8002316:	430b      	orrs	r3, r1
 8002318:	0f5a      	lsrs	r2, r3, #29
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	08db      	lsrs	r3, r3, #3
 800231e:	0752      	lsls	r2, r2, #29
 8002320:	4313      	orrs	r3, r2
 8002322:	e65d      	b.n	8001fe0 <__aeabi_dsub+0x314>
 8002324:	074b      	lsls	r3, r1, #29
 8002326:	08ff      	lsrs	r7, r7, #3
 8002328:	433b      	orrs	r3, r7
 800232a:	08cc      	lsrs	r4, r1, #3
 800232c:	e649      	b.n	8001fc2 <__aeabi_dsub+0x2f6>
 800232e:	19dc      	adds	r4, r3, r7
 8002330:	429c      	cmp	r4, r3
 8002332:	419b      	sbcs	r3, r3
 8002334:	4461      	add	r1, ip
 8002336:	4689      	mov	r9, r1
 8002338:	425b      	negs	r3, r3
 800233a:	4499      	add	r9, r3
 800233c:	464b      	mov	r3, r9
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	d400      	bmi.n	8002344 <__aeabi_dsub+0x678>
 8002342:	e631      	b.n	8001fa8 <__aeabi_dsub+0x2dc>
 8002344:	464a      	mov	r2, r9
 8002346:	4b17      	ldr	r3, [pc, #92]	; (80023a4 <__aeabi_dsub+0x6d8>)
 8002348:	401a      	ands	r2, r3
 800234a:	2301      	movs	r3, #1
 800234c:	4691      	mov	r9, r2
 800234e:	4698      	mov	r8, r3
 8002350:	e62a      	b.n	8001fa8 <__aeabi_dsub+0x2dc>
 8002352:	0016      	movs	r6, r2
 8002354:	4664      	mov	r4, ip
 8002356:	3e20      	subs	r6, #32
 8002358:	40f4      	lsrs	r4, r6
 800235a:	46a0      	mov	r8, r4
 800235c:	2a20      	cmp	r2, #32
 800235e:	d005      	beq.n	800236c <__aeabi_dsub+0x6a0>
 8002360:	2640      	movs	r6, #64	; 0x40
 8002362:	4664      	mov	r4, ip
 8002364:	1ab2      	subs	r2, r6, r2
 8002366:	4094      	lsls	r4, r2
 8002368:	4323      	orrs	r3, r4
 800236a:	469a      	mov	sl, r3
 800236c:	4654      	mov	r4, sl
 800236e:	1e63      	subs	r3, r4, #1
 8002370:	419c      	sbcs	r4, r3
 8002372:	4643      	mov	r3, r8
 8002374:	431c      	orrs	r4, r3
 8002376:	e5db      	b.n	8001f30 <__aeabi_dsub+0x264>
 8002378:	0002      	movs	r2, r0
 800237a:	2400      	movs	r4, #0
 800237c:	2300      	movs	r3, #0
 800237e:	e548      	b.n	8001e12 <__aeabi_dsub+0x146>
 8002380:	19dc      	adds	r4, r3, r7
 8002382:	42bc      	cmp	r4, r7
 8002384:	41bf      	sbcs	r7, r7
 8002386:	4461      	add	r1, ip
 8002388:	4689      	mov	r9, r1
 800238a:	427f      	negs	r7, r7
 800238c:	44b9      	add	r9, r7
 800238e:	e738      	b.n	8002202 <__aeabi_dsub+0x536>
 8002390:	464b      	mov	r3, r9
 8002392:	4323      	orrs	r3, r4
 8002394:	d100      	bne.n	8002398 <__aeabi_dsub+0x6cc>
 8002396:	e69f      	b.n	80020d8 <__aeabi_dsub+0x40c>
 8002398:	e606      	b.n	8001fa8 <__aeabi_dsub+0x2dc>
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	000007fe 	.word	0x000007fe
 80023a0:	000007ff 	.word	0x000007ff
 80023a4:	ff7fffff 	.word	0xff7fffff
 80023a8:	08ff      	lsrs	r7, r7, #3
 80023aa:	074b      	lsls	r3, r1, #29
 80023ac:	433b      	orrs	r3, r7
 80023ae:	08cc      	lsrs	r4, r1, #3
 80023b0:	e616      	b.n	8001fe0 <__aeabi_dsub+0x314>
 80023b2:	4662      	mov	r2, ip
 80023b4:	08db      	lsrs	r3, r3, #3
 80023b6:	0752      	lsls	r2, r2, #29
 80023b8:	4313      	orrs	r3, r2
 80023ba:	4662      	mov	r2, ip
 80023bc:	08d4      	lsrs	r4, r2, #3
 80023be:	2280      	movs	r2, #128	; 0x80
 80023c0:	0312      	lsls	r2, r2, #12
 80023c2:	4214      	tst	r4, r2
 80023c4:	d007      	beq.n	80023d6 <__aeabi_dsub+0x70a>
 80023c6:	08c8      	lsrs	r0, r1, #3
 80023c8:	4210      	tst	r0, r2
 80023ca:	d104      	bne.n	80023d6 <__aeabi_dsub+0x70a>
 80023cc:	465d      	mov	r5, fp
 80023ce:	0004      	movs	r4, r0
 80023d0:	08fb      	lsrs	r3, r7, #3
 80023d2:	0749      	lsls	r1, r1, #29
 80023d4:	430b      	orrs	r3, r1
 80023d6:	0f5a      	lsrs	r2, r3, #29
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	0752      	lsls	r2, r2, #29
 80023dc:	08db      	lsrs	r3, r3, #3
 80023de:	4313      	orrs	r3, r2
 80023e0:	e5fe      	b.n	8001fe0 <__aeabi_dsub+0x314>
 80023e2:	2300      	movs	r3, #0
 80023e4:	4a01      	ldr	r2, [pc, #4]	; (80023ec <__aeabi_dsub+0x720>)
 80023e6:	001c      	movs	r4, r3
 80023e8:	e513      	b.n	8001e12 <__aeabi_dsub+0x146>
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	000007ff 	.word	0x000007ff

080023f0 <__aeabi_d2iz>:
 80023f0:	000a      	movs	r2, r1
 80023f2:	b530      	push	{r4, r5, lr}
 80023f4:	4c13      	ldr	r4, [pc, #76]	; (8002444 <__aeabi_d2iz+0x54>)
 80023f6:	0053      	lsls	r3, r2, #1
 80023f8:	0309      	lsls	r1, r1, #12
 80023fa:	0005      	movs	r5, r0
 80023fc:	0b09      	lsrs	r1, r1, #12
 80023fe:	2000      	movs	r0, #0
 8002400:	0d5b      	lsrs	r3, r3, #21
 8002402:	0fd2      	lsrs	r2, r2, #31
 8002404:	42a3      	cmp	r3, r4
 8002406:	dd04      	ble.n	8002412 <__aeabi_d2iz+0x22>
 8002408:	480f      	ldr	r0, [pc, #60]	; (8002448 <__aeabi_d2iz+0x58>)
 800240a:	4283      	cmp	r3, r0
 800240c:	dd02      	ble.n	8002414 <__aeabi_d2iz+0x24>
 800240e:	4b0f      	ldr	r3, [pc, #60]	; (800244c <__aeabi_d2iz+0x5c>)
 8002410:	18d0      	adds	r0, r2, r3
 8002412:	bd30      	pop	{r4, r5, pc}
 8002414:	2080      	movs	r0, #128	; 0x80
 8002416:	0340      	lsls	r0, r0, #13
 8002418:	4301      	orrs	r1, r0
 800241a:	480d      	ldr	r0, [pc, #52]	; (8002450 <__aeabi_d2iz+0x60>)
 800241c:	1ac0      	subs	r0, r0, r3
 800241e:	281f      	cmp	r0, #31
 8002420:	dd08      	ble.n	8002434 <__aeabi_d2iz+0x44>
 8002422:	480c      	ldr	r0, [pc, #48]	; (8002454 <__aeabi_d2iz+0x64>)
 8002424:	1ac3      	subs	r3, r0, r3
 8002426:	40d9      	lsrs	r1, r3
 8002428:	000b      	movs	r3, r1
 800242a:	4258      	negs	r0, r3
 800242c:	2a00      	cmp	r2, #0
 800242e:	d1f0      	bne.n	8002412 <__aeabi_d2iz+0x22>
 8002430:	0018      	movs	r0, r3
 8002432:	e7ee      	b.n	8002412 <__aeabi_d2iz+0x22>
 8002434:	4c08      	ldr	r4, [pc, #32]	; (8002458 <__aeabi_d2iz+0x68>)
 8002436:	40c5      	lsrs	r5, r0
 8002438:	46a4      	mov	ip, r4
 800243a:	4463      	add	r3, ip
 800243c:	4099      	lsls	r1, r3
 800243e:	000b      	movs	r3, r1
 8002440:	432b      	orrs	r3, r5
 8002442:	e7f2      	b.n	800242a <__aeabi_d2iz+0x3a>
 8002444:	000003fe 	.word	0x000003fe
 8002448:	0000041d 	.word	0x0000041d
 800244c:	7fffffff 	.word	0x7fffffff
 8002450:	00000433 	.word	0x00000433
 8002454:	00000413 	.word	0x00000413
 8002458:	fffffbed 	.word	0xfffffbed

0800245c <__aeabi_i2d>:
 800245c:	b570      	push	{r4, r5, r6, lr}
 800245e:	2800      	cmp	r0, #0
 8002460:	d016      	beq.n	8002490 <__aeabi_i2d+0x34>
 8002462:	17c3      	asrs	r3, r0, #31
 8002464:	18c5      	adds	r5, r0, r3
 8002466:	405d      	eors	r5, r3
 8002468:	0fc4      	lsrs	r4, r0, #31
 800246a:	0028      	movs	r0, r5
 800246c:	f000 f95a 	bl	8002724 <__clzsi2>
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <__aeabi_i2d+0x5c>)
 8002472:	1a12      	subs	r2, r2, r0
 8002474:	280a      	cmp	r0, #10
 8002476:	dc16      	bgt.n	80024a6 <__aeabi_i2d+0x4a>
 8002478:	0003      	movs	r3, r0
 800247a:	002e      	movs	r6, r5
 800247c:	3315      	adds	r3, #21
 800247e:	409e      	lsls	r6, r3
 8002480:	230b      	movs	r3, #11
 8002482:	1a18      	subs	r0, r3, r0
 8002484:	40c5      	lsrs	r5, r0
 8002486:	0552      	lsls	r2, r2, #21
 8002488:	032d      	lsls	r5, r5, #12
 800248a:	0b2d      	lsrs	r5, r5, #12
 800248c:	0d53      	lsrs	r3, r2, #21
 800248e:	e003      	b.n	8002498 <__aeabi_i2d+0x3c>
 8002490:	2400      	movs	r4, #0
 8002492:	2300      	movs	r3, #0
 8002494:	2500      	movs	r5, #0
 8002496:	2600      	movs	r6, #0
 8002498:	051b      	lsls	r3, r3, #20
 800249a:	432b      	orrs	r3, r5
 800249c:	07e4      	lsls	r4, r4, #31
 800249e:	4323      	orrs	r3, r4
 80024a0:	0030      	movs	r0, r6
 80024a2:	0019      	movs	r1, r3
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
 80024a6:	380b      	subs	r0, #11
 80024a8:	4085      	lsls	r5, r0
 80024aa:	0552      	lsls	r2, r2, #21
 80024ac:	032d      	lsls	r5, r5, #12
 80024ae:	2600      	movs	r6, #0
 80024b0:	0b2d      	lsrs	r5, r5, #12
 80024b2:	0d53      	lsrs	r3, r2, #21
 80024b4:	e7f0      	b.n	8002498 <__aeabi_i2d+0x3c>
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	0000041e 	.word	0x0000041e

080024bc <__aeabi_ui2d>:
 80024bc:	b510      	push	{r4, lr}
 80024be:	1e04      	subs	r4, r0, #0
 80024c0:	d010      	beq.n	80024e4 <__aeabi_ui2d+0x28>
 80024c2:	f000 f92f 	bl	8002724 <__clzsi2>
 80024c6:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <__aeabi_ui2d+0x48>)
 80024c8:	1a1b      	subs	r3, r3, r0
 80024ca:	280a      	cmp	r0, #10
 80024cc:	dc11      	bgt.n	80024f2 <__aeabi_ui2d+0x36>
 80024ce:	220b      	movs	r2, #11
 80024d0:	0021      	movs	r1, r4
 80024d2:	1a12      	subs	r2, r2, r0
 80024d4:	40d1      	lsrs	r1, r2
 80024d6:	3015      	adds	r0, #21
 80024d8:	030a      	lsls	r2, r1, #12
 80024da:	055b      	lsls	r3, r3, #21
 80024dc:	4084      	lsls	r4, r0
 80024de:	0b12      	lsrs	r2, r2, #12
 80024e0:	0d5b      	lsrs	r3, r3, #21
 80024e2:	e001      	b.n	80024e8 <__aeabi_ui2d+0x2c>
 80024e4:	2300      	movs	r3, #0
 80024e6:	2200      	movs	r2, #0
 80024e8:	051b      	lsls	r3, r3, #20
 80024ea:	4313      	orrs	r3, r2
 80024ec:	0020      	movs	r0, r4
 80024ee:	0019      	movs	r1, r3
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	0022      	movs	r2, r4
 80024f4:	380b      	subs	r0, #11
 80024f6:	4082      	lsls	r2, r0
 80024f8:	055b      	lsls	r3, r3, #21
 80024fa:	0312      	lsls	r2, r2, #12
 80024fc:	2400      	movs	r4, #0
 80024fe:	0b12      	lsrs	r2, r2, #12
 8002500:	0d5b      	lsrs	r3, r3, #21
 8002502:	e7f1      	b.n	80024e8 <__aeabi_ui2d+0x2c>
 8002504:	0000041e 	.word	0x0000041e

08002508 <__aeabi_f2d>:
 8002508:	b570      	push	{r4, r5, r6, lr}
 800250a:	0043      	lsls	r3, r0, #1
 800250c:	0246      	lsls	r6, r0, #9
 800250e:	0fc4      	lsrs	r4, r0, #31
 8002510:	20fe      	movs	r0, #254	; 0xfe
 8002512:	0e1b      	lsrs	r3, r3, #24
 8002514:	1c59      	adds	r1, r3, #1
 8002516:	0a75      	lsrs	r5, r6, #9
 8002518:	4208      	tst	r0, r1
 800251a:	d00c      	beq.n	8002536 <__aeabi_f2d+0x2e>
 800251c:	22e0      	movs	r2, #224	; 0xe0
 800251e:	0092      	lsls	r2, r2, #2
 8002520:	4694      	mov	ip, r2
 8002522:	076d      	lsls	r5, r5, #29
 8002524:	0b36      	lsrs	r6, r6, #12
 8002526:	4463      	add	r3, ip
 8002528:	051b      	lsls	r3, r3, #20
 800252a:	4333      	orrs	r3, r6
 800252c:	07e4      	lsls	r4, r4, #31
 800252e:	4323      	orrs	r3, r4
 8002530:	0028      	movs	r0, r5
 8002532:	0019      	movs	r1, r3
 8002534:	bd70      	pop	{r4, r5, r6, pc}
 8002536:	2b00      	cmp	r3, #0
 8002538:	d114      	bne.n	8002564 <__aeabi_f2d+0x5c>
 800253a:	2d00      	cmp	r5, #0
 800253c:	d01b      	beq.n	8002576 <__aeabi_f2d+0x6e>
 800253e:	0028      	movs	r0, r5
 8002540:	f000 f8f0 	bl	8002724 <__clzsi2>
 8002544:	280a      	cmp	r0, #10
 8002546:	dc1c      	bgt.n	8002582 <__aeabi_f2d+0x7a>
 8002548:	230b      	movs	r3, #11
 800254a:	002e      	movs	r6, r5
 800254c:	1a1b      	subs	r3, r3, r0
 800254e:	40de      	lsrs	r6, r3
 8002550:	0003      	movs	r3, r0
 8002552:	3315      	adds	r3, #21
 8002554:	409d      	lsls	r5, r3
 8002556:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <__aeabi_f2d+0x88>)
 8002558:	0336      	lsls	r6, r6, #12
 800255a:	1a12      	subs	r2, r2, r0
 800255c:	0552      	lsls	r2, r2, #21
 800255e:	0b36      	lsrs	r6, r6, #12
 8002560:	0d53      	lsrs	r3, r2, #21
 8002562:	e7e1      	b.n	8002528 <__aeabi_f2d+0x20>
 8002564:	2d00      	cmp	r5, #0
 8002566:	d009      	beq.n	800257c <__aeabi_f2d+0x74>
 8002568:	2280      	movs	r2, #128	; 0x80
 800256a:	0b36      	lsrs	r6, r6, #12
 800256c:	0312      	lsls	r2, r2, #12
 800256e:	4b09      	ldr	r3, [pc, #36]	; (8002594 <__aeabi_f2d+0x8c>)
 8002570:	076d      	lsls	r5, r5, #29
 8002572:	4316      	orrs	r6, r2
 8002574:	e7d8      	b.n	8002528 <__aeabi_f2d+0x20>
 8002576:	2300      	movs	r3, #0
 8002578:	2600      	movs	r6, #0
 800257a:	e7d5      	b.n	8002528 <__aeabi_f2d+0x20>
 800257c:	2600      	movs	r6, #0
 800257e:	4b05      	ldr	r3, [pc, #20]	; (8002594 <__aeabi_f2d+0x8c>)
 8002580:	e7d2      	b.n	8002528 <__aeabi_f2d+0x20>
 8002582:	0003      	movs	r3, r0
 8002584:	3b0b      	subs	r3, #11
 8002586:	409d      	lsls	r5, r3
 8002588:	002e      	movs	r6, r5
 800258a:	2500      	movs	r5, #0
 800258c:	e7e3      	b.n	8002556 <__aeabi_f2d+0x4e>
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	00000389 	.word	0x00000389
 8002594:	000007ff 	.word	0x000007ff

08002598 <__aeabi_d2f>:
 8002598:	0002      	movs	r2, r0
 800259a:	004b      	lsls	r3, r1, #1
 800259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259e:	0d5b      	lsrs	r3, r3, #21
 80025a0:	030c      	lsls	r4, r1, #12
 80025a2:	4e3d      	ldr	r6, [pc, #244]	; (8002698 <__aeabi_d2f+0x100>)
 80025a4:	0a64      	lsrs	r4, r4, #9
 80025a6:	0f40      	lsrs	r0, r0, #29
 80025a8:	1c5f      	adds	r7, r3, #1
 80025aa:	0fc9      	lsrs	r1, r1, #31
 80025ac:	4304      	orrs	r4, r0
 80025ae:	00d5      	lsls	r5, r2, #3
 80025b0:	4237      	tst	r7, r6
 80025b2:	d00a      	beq.n	80025ca <__aeabi_d2f+0x32>
 80025b4:	4839      	ldr	r0, [pc, #228]	; (800269c <__aeabi_d2f+0x104>)
 80025b6:	181e      	adds	r6, r3, r0
 80025b8:	2efe      	cmp	r6, #254	; 0xfe
 80025ba:	dd16      	ble.n	80025ea <__aeabi_d2f+0x52>
 80025bc:	20ff      	movs	r0, #255	; 0xff
 80025be:	2400      	movs	r4, #0
 80025c0:	05c0      	lsls	r0, r0, #23
 80025c2:	4320      	orrs	r0, r4
 80025c4:	07c9      	lsls	r1, r1, #31
 80025c6:	4308      	orrs	r0, r1
 80025c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <__aeabi_d2f+0x44>
 80025ce:	432c      	orrs	r4, r5
 80025d0:	d026      	beq.n	8002620 <__aeabi_d2f+0x88>
 80025d2:	2205      	movs	r2, #5
 80025d4:	0192      	lsls	r2, r2, #6
 80025d6:	0a54      	lsrs	r4, r2, #9
 80025d8:	b2d8      	uxtb	r0, r3
 80025da:	e7f1      	b.n	80025c0 <__aeabi_d2f+0x28>
 80025dc:	4325      	orrs	r5, r4
 80025de:	d0ed      	beq.n	80025bc <__aeabi_d2f+0x24>
 80025e0:	2080      	movs	r0, #128	; 0x80
 80025e2:	03c0      	lsls	r0, r0, #15
 80025e4:	4304      	orrs	r4, r0
 80025e6:	20ff      	movs	r0, #255	; 0xff
 80025e8:	e7ea      	b.n	80025c0 <__aeabi_d2f+0x28>
 80025ea:	2e00      	cmp	r6, #0
 80025ec:	dd1b      	ble.n	8002626 <__aeabi_d2f+0x8e>
 80025ee:	0192      	lsls	r2, r2, #6
 80025f0:	1e53      	subs	r3, r2, #1
 80025f2:	419a      	sbcs	r2, r3
 80025f4:	00e4      	lsls	r4, r4, #3
 80025f6:	0f6d      	lsrs	r5, r5, #29
 80025f8:	4322      	orrs	r2, r4
 80025fa:	432a      	orrs	r2, r5
 80025fc:	0753      	lsls	r3, r2, #29
 80025fe:	d048      	beq.n	8002692 <__aeabi_d2f+0xfa>
 8002600:	230f      	movs	r3, #15
 8002602:	4013      	ands	r3, r2
 8002604:	2b04      	cmp	r3, #4
 8002606:	d000      	beq.n	800260a <__aeabi_d2f+0x72>
 8002608:	3204      	adds	r2, #4
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	04db      	lsls	r3, r3, #19
 800260e:	4013      	ands	r3, r2
 8002610:	d03f      	beq.n	8002692 <__aeabi_d2f+0xfa>
 8002612:	1c70      	adds	r0, r6, #1
 8002614:	2efe      	cmp	r6, #254	; 0xfe
 8002616:	d0d1      	beq.n	80025bc <__aeabi_d2f+0x24>
 8002618:	0192      	lsls	r2, r2, #6
 800261a:	0a54      	lsrs	r4, r2, #9
 800261c:	b2c0      	uxtb	r0, r0
 800261e:	e7cf      	b.n	80025c0 <__aeabi_d2f+0x28>
 8002620:	2000      	movs	r0, #0
 8002622:	2400      	movs	r4, #0
 8002624:	e7cc      	b.n	80025c0 <__aeabi_d2f+0x28>
 8002626:	0032      	movs	r2, r6
 8002628:	3217      	adds	r2, #23
 800262a:	db22      	blt.n	8002672 <__aeabi_d2f+0xda>
 800262c:	2080      	movs	r0, #128	; 0x80
 800262e:	0400      	lsls	r0, r0, #16
 8002630:	4320      	orrs	r0, r4
 8002632:	241e      	movs	r4, #30
 8002634:	1ba4      	subs	r4, r4, r6
 8002636:	2c1f      	cmp	r4, #31
 8002638:	dd1d      	ble.n	8002676 <__aeabi_d2f+0xde>
 800263a:	2202      	movs	r2, #2
 800263c:	4252      	negs	r2, r2
 800263e:	1b96      	subs	r6, r2, r6
 8002640:	0002      	movs	r2, r0
 8002642:	40f2      	lsrs	r2, r6
 8002644:	0016      	movs	r6, r2
 8002646:	2c20      	cmp	r4, #32
 8002648:	d004      	beq.n	8002654 <__aeabi_d2f+0xbc>
 800264a:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <__aeabi_d2f+0x108>)
 800264c:	4694      	mov	ip, r2
 800264e:	4463      	add	r3, ip
 8002650:	4098      	lsls	r0, r3
 8002652:	4305      	orrs	r5, r0
 8002654:	002a      	movs	r2, r5
 8002656:	1e53      	subs	r3, r2, #1
 8002658:	419a      	sbcs	r2, r3
 800265a:	4332      	orrs	r2, r6
 800265c:	2600      	movs	r6, #0
 800265e:	0753      	lsls	r3, r2, #29
 8002660:	d1ce      	bne.n	8002600 <__aeabi_d2f+0x68>
 8002662:	2480      	movs	r4, #128	; 0x80
 8002664:	0013      	movs	r3, r2
 8002666:	04e4      	lsls	r4, r4, #19
 8002668:	2001      	movs	r0, #1
 800266a:	4023      	ands	r3, r4
 800266c:	4222      	tst	r2, r4
 800266e:	d1d3      	bne.n	8002618 <__aeabi_d2f+0x80>
 8002670:	e7b0      	b.n	80025d4 <__aeabi_d2f+0x3c>
 8002672:	2300      	movs	r3, #0
 8002674:	e7ad      	b.n	80025d2 <__aeabi_d2f+0x3a>
 8002676:	4a0b      	ldr	r2, [pc, #44]	; (80026a4 <__aeabi_d2f+0x10c>)
 8002678:	4694      	mov	ip, r2
 800267a:	002a      	movs	r2, r5
 800267c:	40e2      	lsrs	r2, r4
 800267e:	0014      	movs	r4, r2
 8002680:	002a      	movs	r2, r5
 8002682:	4463      	add	r3, ip
 8002684:	409a      	lsls	r2, r3
 8002686:	4098      	lsls	r0, r3
 8002688:	1e55      	subs	r5, r2, #1
 800268a:	41aa      	sbcs	r2, r5
 800268c:	4302      	orrs	r2, r0
 800268e:	4322      	orrs	r2, r4
 8002690:	e7e4      	b.n	800265c <__aeabi_d2f+0xc4>
 8002692:	0033      	movs	r3, r6
 8002694:	e79e      	b.n	80025d4 <__aeabi_d2f+0x3c>
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	000007fe 	.word	0x000007fe
 800269c:	fffffc80 	.word	0xfffffc80
 80026a0:	fffffca2 	.word	0xfffffca2
 80026a4:	fffffc82 	.word	0xfffffc82

080026a8 <__aeabi_cdrcmple>:
 80026a8:	4684      	mov	ip, r0
 80026aa:	0010      	movs	r0, r2
 80026ac:	4662      	mov	r2, ip
 80026ae:	468c      	mov	ip, r1
 80026b0:	0019      	movs	r1, r3
 80026b2:	4663      	mov	r3, ip
 80026b4:	e000      	b.n	80026b8 <__aeabi_cdcmpeq>
 80026b6:	46c0      	nop			; (mov r8, r8)

080026b8 <__aeabi_cdcmpeq>:
 80026b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80026ba:	f000 f8f9 	bl	80028b0 <__ledf2>
 80026be:	2800      	cmp	r0, #0
 80026c0:	d401      	bmi.n	80026c6 <__aeabi_cdcmpeq+0xe>
 80026c2:	2100      	movs	r1, #0
 80026c4:	42c8      	cmn	r0, r1
 80026c6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080026c8 <__aeabi_dcmpeq>:
 80026c8:	b510      	push	{r4, lr}
 80026ca:	f000 f849 	bl	8002760 <__eqdf2>
 80026ce:	4240      	negs	r0, r0
 80026d0:	3001      	adds	r0, #1
 80026d2:	bd10      	pop	{r4, pc}

080026d4 <__aeabi_dcmplt>:
 80026d4:	b510      	push	{r4, lr}
 80026d6:	f000 f8eb 	bl	80028b0 <__ledf2>
 80026da:	2800      	cmp	r0, #0
 80026dc:	db01      	blt.n	80026e2 <__aeabi_dcmplt+0xe>
 80026de:	2000      	movs	r0, #0
 80026e0:	bd10      	pop	{r4, pc}
 80026e2:	2001      	movs	r0, #1
 80026e4:	bd10      	pop	{r4, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)

080026e8 <__aeabi_dcmple>:
 80026e8:	b510      	push	{r4, lr}
 80026ea:	f000 f8e1 	bl	80028b0 <__ledf2>
 80026ee:	2800      	cmp	r0, #0
 80026f0:	dd01      	ble.n	80026f6 <__aeabi_dcmple+0xe>
 80026f2:	2000      	movs	r0, #0
 80026f4:	bd10      	pop	{r4, pc}
 80026f6:	2001      	movs	r0, #1
 80026f8:	bd10      	pop	{r4, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)

080026fc <__aeabi_dcmpgt>:
 80026fc:	b510      	push	{r4, lr}
 80026fe:	f000 f871 	bl	80027e4 <__gedf2>
 8002702:	2800      	cmp	r0, #0
 8002704:	dc01      	bgt.n	800270a <__aeabi_dcmpgt+0xe>
 8002706:	2000      	movs	r0, #0
 8002708:	bd10      	pop	{r4, pc}
 800270a:	2001      	movs	r0, #1
 800270c:	bd10      	pop	{r4, pc}
 800270e:	46c0      	nop			; (mov r8, r8)

08002710 <__aeabi_dcmpge>:
 8002710:	b510      	push	{r4, lr}
 8002712:	f000 f867 	bl	80027e4 <__gedf2>
 8002716:	2800      	cmp	r0, #0
 8002718:	da01      	bge.n	800271e <__aeabi_dcmpge+0xe>
 800271a:	2000      	movs	r0, #0
 800271c:	bd10      	pop	{r4, pc}
 800271e:	2001      	movs	r0, #1
 8002720:	bd10      	pop	{r4, pc}
 8002722:	46c0      	nop			; (mov r8, r8)

08002724 <__clzsi2>:
 8002724:	211c      	movs	r1, #28
 8002726:	2301      	movs	r3, #1
 8002728:	041b      	lsls	r3, r3, #16
 800272a:	4298      	cmp	r0, r3
 800272c:	d301      	bcc.n	8002732 <__clzsi2+0xe>
 800272e:	0c00      	lsrs	r0, r0, #16
 8002730:	3910      	subs	r1, #16
 8002732:	0a1b      	lsrs	r3, r3, #8
 8002734:	4298      	cmp	r0, r3
 8002736:	d301      	bcc.n	800273c <__clzsi2+0x18>
 8002738:	0a00      	lsrs	r0, r0, #8
 800273a:	3908      	subs	r1, #8
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	4298      	cmp	r0, r3
 8002740:	d301      	bcc.n	8002746 <__clzsi2+0x22>
 8002742:	0900      	lsrs	r0, r0, #4
 8002744:	3904      	subs	r1, #4
 8002746:	a202      	add	r2, pc, #8	; (adr r2, 8002750 <__clzsi2+0x2c>)
 8002748:	5c10      	ldrb	r0, [r2, r0]
 800274a:	1840      	adds	r0, r0, r1
 800274c:	4770      	bx	lr
 800274e:	46c0      	nop			; (mov r8, r8)
 8002750:	02020304 	.word	0x02020304
 8002754:	01010101 	.word	0x01010101
	...

08002760 <__eqdf2>:
 8002760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002762:	464e      	mov	r6, r9
 8002764:	4645      	mov	r5, r8
 8002766:	46de      	mov	lr, fp
 8002768:	4657      	mov	r7, sl
 800276a:	4690      	mov	r8, r2
 800276c:	b5e0      	push	{r5, r6, r7, lr}
 800276e:	0017      	movs	r7, r2
 8002770:	031a      	lsls	r2, r3, #12
 8002772:	0b12      	lsrs	r2, r2, #12
 8002774:	0005      	movs	r5, r0
 8002776:	4684      	mov	ip, r0
 8002778:	4819      	ldr	r0, [pc, #100]	; (80027e0 <__eqdf2+0x80>)
 800277a:	030e      	lsls	r6, r1, #12
 800277c:	004c      	lsls	r4, r1, #1
 800277e:	4691      	mov	r9, r2
 8002780:	005a      	lsls	r2, r3, #1
 8002782:	0fdb      	lsrs	r3, r3, #31
 8002784:	469b      	mov	fp, r3
 8002786:	0b36      	lsrs	r6, r6, #12
 8002788:	0d64      	lsrs	r4, r4, #21
 800278a:	0fc9      	lsrs	r1, r1, #31
 800278c:	0d52      	lsrs	r2, r2, #21
 800278e:	4284      	cmp	r4, r0
 8002790:	d019      	beq.n	80027c6 <__eqdf2+0x66>
 8002792:	4282      	cmp	r2, r0
 8002794:	d010      	beq.n	80027b8 <__eqdf2+0x58>
 8002796:	2001      	movs	r0, #1
 8002798:	4294      	cmp	r4, r2
 800279a:	d10e      	bne.n	80027ba <__eqdf2+0x5a>
 800279c:	454e      	cmp	r6, r9
 800279e:	d10c      	bne.n	80027ba <__eqdf2+0x5a>
 80027a0:	2001      	movs	r0, #1
 80027a2:	45c4      	cmp	ip, r8
 80027a4:	d109      	bne.n	80027ba <__eqdf2+0x5a>
 80027a6:	4559      	cmp	r1, fp
 80027a8:	d017      	beq.n	80027da <__eqdf2+0x7a>
 80027aa:	2c00      	cmp	r4, #0
 80027ac:	d105      	bne.n	80027ba <__eqdf2+0x5a>
 80027ae:	0030      	movs	r0, r6
 80027b0:	4328      	orrs	r0, r5
 80027b2:	1e43      	subs	r3, r0, #1
 80027b4:	4198      	sbcs	r0, r3
 80027b6:	e000      	b.n	80027ba <__eqdf2+0x5a>
 80027b8:	2001      	movs	r0, #1
 80027ba:	bcf0      	pop	{r4, r5, r6, r7}
 80027bc:	46bb      	mov	fp, r7
 80027be:	46b2      	mov	sl, r6
 80027c0:	46a9      	mov	r9, r5
 80027c2:	46a0      	mov	r8, r4
 80027c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c6:	0033      	movs	r3, r6
 80027c8:	2001      	movs	r0, #1
 80027ca:	432b      	orrs	r3, r5
 80027cc:	d1f5      	bne.n	80027ba <__eqdf2+0x5a>
 80027ce:	42a2      	cmp	r2, r4
 80027d0:	d1f3      	bne.n	80027ba <__eqdf2+0x5a>
 80027d2:	464b      	mov	r3, r9
 80027d4:	433b      	orrs	r3, r7
 80027d6:	d1f0      	bne.n	80027ba <__eqdf2+0x5a>
 80027d8:	e7e2      	b.n	80027a0 <__eqdf2+0x40>
 80027da:	2000      	movs	r0, #0
 80027dc:	e7ed      	b.n	80027ba <__eqdf2+0x5a>
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	000007ff 	.word	0x000007ff

080027e4 <__gedf2>:
 80027e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e6:	4647      	mov	r7, r8
 80027e8:	46ce      	mov	lr, r9
 80027ea:	0004      	movs	r4, r0
 80027ec:	0018      	movs	r0, r3
 80027ee:	0016      	movs	r6, r2
 80027f0:	031b      	lsls	r3, r3, #12
 80027f2:	0b1b      	lsrs	r3, r3, #12
 80027f4:	4d2d      	ldr	r5, [pc, #180]	; (80028ac <__gedf2+0xc8>)
 80027f6:	004a      	lsls	r2, r1, #1
 80027f8:	4699      	mov	r9, r3
 80027fa:	b580      	push	{r7, lr}
 80027fc:	0043      	lsls	r3, r0, #1
 80027fe:	030f      	lsls	r7, r1, #12
 8002800:	46a4      	mov	ip, r4
 8002802:	46b0      	mov	r8, r6
 8002804:	0b3f      	lsrs	r7, r7, #12
 8002806:	0d52      	lsrs	r2, r2, #21
 8002808:	0fc9      	lsrs	r1, r1, #31
 800280a:	0d5b      	lsrs	r3, r3, #21
 800280c:	0fc0      	lsrs	r0, r0, #31
 800280e:	42aa      	cmp	r2, r5
 8002810:	d021      	beq.n	8002856 <__gedf2+0x72>
 8002812:	42ab      	cmp	r3, r5
 8002814:	d013      	beq.n	800283e <__gedf2+0x5a>
 8002816:	2a00      	cmp	r2, #0
 8002818:	d122      	bne.n	8002860 <__gedf2+0x7c>
 800281a:	433c      	orrs	r4, r7
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <__gedf2+0x42>
 8002820:	464d      	mov	r5, r9
 8002822:	432e      	orrs	r6, r5
 8002824:	d022      	beq.n	800286c <__gedf2+0x88>
 8002826:	2c00      	cmp	r4, #0
 8002828:	d010      	beq.n	800284c <__gedf2+0x68>
 800282a:	4281      	cmp	r1, r0
 800282c:	d022      	beq.n	8002874 <__gedf2+0x90>
 800282e:	2002      	movs	r0, #2
 8002830:	3901      	subs	r1, #1
 8002832:	4008      	ands	r0, r1
 8002834:	3801      	subs	r0, #1
 8002836:	bcc0      	pop	{r6, r7}
 8002838:	46b9      	mov	r9, r7
 800283a:	46b0      	mov	r8, r6
 800283c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283e:	464d      	mov	r5, r9
 8002840:	432e      	orrs	r6, r5
 8002842:	d129      	bne.n	8002898 <__gedf2+0xb4>
 8002844:	2a00      	cmp	r2, #0
 8002846:	d1f0      	bne.n	800282a <__gedf2+0x46>
 8002848:	433c      	orrs	r4, r7
 800284a:	d1ee      	bne.n	800282a <__gedf2+0x46>
 800284c:	2800      	cmp	r0, #0
 800284e:	d1f2      	bne.n	8002836 <__gedf2+0x52>
 8002850:	2001      	movs	r0, #1
 8002852:	4240      	negs	r0, r0
 8002854:	e7ef      	b.n	8002836 <__gedf2+0x52>
 8002856:	003d      	movs	r5, r7
 8002858:	4325      	orrs	r5, r4
 800285a:	d11d      	bne.n	8002898 <__gedf2+0xb4>
 800285c:	4293      	cmp	r3, r2
 800285e:	d0ee      	beq.n	800283e <__gedf2+0x5a>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e2      	bne.n	800282a <__gedf2+0x46>
 8002864:	464c      	mov	r4, r9
 8002866:	4326      	orrs	r6, r4
 8002868:	d1df      	bne.n	800282a <__gedf2+0x46>
 800286a:	e7e0      	b.n	800282e <__gedf2+0x4a>
 800286c:	2000      	movs	r0, #0
 800286e:	2c00      	cmp	r4, #0
 8002870:	d0e1      	beq.n	8002836 <__gedf2+0x52>
 8002872:	e7dc      	b.n	800282e <__gedf2+0x4a>
 8002874:	429a      	cmp	r2, r3
 8002876:	dc0a      	bgt.n	800288e <__gedf2+0xaa>
 8002878:	dbe8      	blt.n	800284c <__gedf2+0x68>
 800287a:	454f      	cmp	r7, r9
 800287c:	d8d7      	bhi.n	800282e <__gedf2+0x4a>
 800287e:	d00e      	beq.n	800289e <__gedf2+0xba>
 8002880:	2000      	movs	r0, #0
 8002882:	454f      	cmp	r7, r9
 8002884:	d2d7      	bcs.n	8002836 <__gedf2+0x52>
 8002886:	2900      	cmp	r1, #0
 8002888:	d0e2      	beq.n	8002850 <__gedf2+0x6c>
 800288a:	0008      	movs	r0, r1
 800288c:	e7d3      	b.n	8002836 <__gedf2+0x52>
 800288e:	4243      	negs	r3, r0
 8002890:	4158      	adcs	r0, r3
 8002892:	0040      	lsls	r0, r0, #1
 8002894:	3801      	subs	r0, #1
 8002896:	e7ce      	b.n	8002836 <__gedf2+0x52>
 8002898:	2002      	movs	r0, #2
 800289a:	4240      	negs	r0, r0
 800289c:	e7cb      	b.n	8002836 <__gedf2+0x52>
 800289e:	45c4      	cmp	ip, r8
 80028a0:	d8c5      	bhi.n	800282e <__gedf2+0x4a>
 80028a2:	2000      	movs	r0, #0
 80028a4:	45c4      	cmp	ip, r8
 80028a6:	d2c6      	bcs.n	8002836 <__gedf2+0x52>
 80028a8:	e7ed      	b.n	8002886 <__gedf2+0xa2>
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	000007ff 	.word	0x000007ff

080028b0 <__ledf2>:
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	4647      	mov	r7, r8
 80028b4:	46ce      	mov	lr, r9
 80028b6:	0004      	movs	r4, r0
 80028b8:	0018      	movs	r0, r3
 80028ba:	0016      	movs	r6, r2
 80028bc:	031b      	lsls	r3, r3, #12
 80028be:	0b1b      	lsrs	r3, r3, #12
 80028c0:	4d2c      	ldr	r5, [pc, #176]	; (8002974 <__ledf2+0xc4>)
 80028c2:	004a      	lsls	r2, r1, #1
 80028c4:	4699      	mov	r9, r3
 80028c6:	b580      	push	{r7, lr}
 80028c8:	0043      	lsls	r3, r0, #1
 80028ca:	030f      	lsls	r7, r1, #12
 80028cc:	46a4      	mov	ip, r4
 80028ce:	46b0      	mov	r8, r6
 80028d0:	0b3f      	lsrs	r7, r7, #12
 80028d2:	0d52      	lsrs	r2, r2, #21
 80028d4:	0fc9      	lsrs	r1, r1, #31
 80028d6:	0d5b      	lsrs	r3, r3, #21
 80028d8:	0fc0      	lsrs	r0, r0, #31
 80028da:	42aa      	cmp	r2, r5
 80028dc:	d00d      	beq.n	80028fa <__ledf2+0x4a>
 80028de:	42ab      	cmp	r3, r5
 80028e0:	d010      	beq.n	8002904 <__ledf2+0x54>
 80028e2:	2a00      	cmp	r2, #0
 80028e4:	d127      	bne.n	8002936 <__ledf2+0x86>
 80028e6:	433c      	orrs	r4, r7
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <__ledf2+0x60>
 80028ec:	464d      	mov	r5, r9
 80028ee:	432e      	orrs	r6, r5
 80028f0:	d10e      	bne.n	8002910 <__ledf2+0x60>
 80028f2:	2000      	movs	r0, #0
 80028f4:	2c00      	cmp	r4, #0
 80028f6:	d015      	beq.n	8002924 <__ledf2+0x74>
 80028f8:	e00e      	b.n	8002918 <__ledf2+0x68>
 80028fa:	003d      	movs	r5, r7
 80028fc:	4325      	orrs	r5, r4
 80028fe:	d110      	bne.n	8002922 <__ledf2+0x72>
 8002900:	4293      	cmp	r3, r2
 8002902:	d118      	bne.n	8002936 <__ledf2+0x86>
 8002904:	464d      	mov	r5, r9
 8002906:	432e      	orrs	r6, r5
 8002908:	d10b      	bne.n	8002922 <__ledf2+0x72>
 800290a:	2a00      	cmp	r2, #0
 800290c:	d102      	bne.n	8002914 <__ledf2+0x64>
 800290e:	433c      	orrs	r4, r7
 8002910:	2c00      	cmp	r4, #0
 8002912:	d00b      	beq.n	800292c <__ledf2+0x7c>
 8002914:	4281      	cmp	r1, r0
 8002916:	d014      	beq.n	8002942 <__ledf2+0x92>
 8002918:	2002      	movs	r0, #2
 800291a:	3901      	subs	r1, #1
 800291c:	4008      	ands	r0, r1
 800291e:	3801      	subs	r0, #1
 8002920:	e000      	b.n	8002924 <__ledf2+0x74>
 8002922:	2002      	movs	r0, #2
 8002924:	bcc0      	pop	{r6, r7}
 8002926:	46b9      	mov	r9, r7
 8002928:	46b0      	mov	r8, r6
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800292c:	2800      	cmp	r0, #0
 800292e:	d1f9      	bne.n	8002924 <__ledf2+0x74>
 8002930:	2001      	movs	r0, #1
 8002932:	4240      	negs	r0, r0
 8002934:	e7f6      	b.n	8002924 <__ledf2+0x74>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ec      	bne.n	8002914 <__ledf2+0x64>
 800293a:	464c      	mov	r4, r9
 800293c:	4326      	orrs	r6, r4
 800293e:	d1e9      	bne.n	8002914 <__ledf2+0x64>
 8002940:	e7ea      	b.n	8002918 <__ledf2+0x68>
 8002942:	429a      	cmp	r2, r3
 8002944:	dd04      	ble.n	8002950 <__ledf2+0xa0>
 8002946:	4243      	negs	r3, r0
 8002948:	4158      	adcs	r0, r3
 800294a:	0040      	lsls	r0, r0, #1
 800294c:	3801      	subs	r0, #1
 800294e:	e7e9      	b.n	8002924 <__ledf2+0x74>
 8002950:	429a      	cmp	r2, r3
 8002952:	dbeb      	blt.n	800292c <__ledf2+0x7c>
 8002954:	454f      	cmp	r7, r9
 8002956:	d8df      	bhi.n	8002918 <__ledf2+0x68>
 8002958:	d006      	beq.n	8002968 <__ledf2+0xb8>
 800295a:	2000      	movs	r0, #0
 800295c:	454f      	cmp	r7, r9
 800295e:	d2e1      	bcs.n	8002924 <__ledf2+0x74>
 8002960:	2900      	cmp	r1, #0
 8002962:	d0e5      	beq.n	8002930 <__ledf2+0x80>
 8002964:	0008      	movs	r0, r1
 8002966:	e7dd      	b.n	8002924 <__ledf2+0x74>
 8002968:	45c4      	cmp	ip, r8
 800296a:	d8d5      	bhi.n	8002918 <__ledf2+0x68>
 800296c:	2000      	movs	r0, #0
 800296e:	45c4      	cmp	ip, r8
 8002970:	d2d8      	bcs.n	8002924 <__ledf2+0x74>
 8002972:	e7f5      	b.n	8002960 <__ledf2+0xb0>
 8002974:	000007ff 	.word	0x000007ff

08002978 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	0004      	movs	r4, r0
 8002980:	0008      	movs	r0, r1
 8002982:	0011      	movs	r1, r2
 8002984:	1dbb      	adds	r3, r7, #6
 8002986:	1c22      	adds	r2, r4, #0
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	1c02      	adds	r2, r0, #0
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	1cbb      	adds	r3, r7, #2
 8002992:	1c0a      	adds	r2, r1, #0
 8002994:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(x, y, color);
 8002996:	1dbb      	adds	r3, r7, #6
 8002998:	8818      	ldrh	r0, [r3, #0]
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	8819      	ldrh	r1, [r3, #0]
 800299e:	1cbb      	adds	r3, r7, #2
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	001a      	movs	r2, r3
 80029a4:	f001 fb30 	bl	8004008 <ST7735_DrawPixel>
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b003      	add	sp, #12
 80029ae:	bd90      	pop	{r4, r7, pc}

080029b0 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	0005      	movs	r5, r0
 80029b8:	000c      	movs	r4, r1
 80029ba:	0010      	movs	r0, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	1dbb      	adds	r3, r7, #6
 80029c0:	1c2a      	adds	r2, r5, #0
 80029c2:	801a      	strh	r2, [r3, #0]
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	1c22      	adds	r2, r4, #0
 80029c8:	801a      	strh	r2, [r3, #0]
 80029ca:	1cbb      	adds	r3, r7, #2
 80029cc:	1c02      	adds	r2, r0, #0
 80029ce:	801a      	strh	r2, [r3, #0]
 80029d0:	003b      	movs	r3, r7
 80029d2:	1c0a      	adds	r2, r1, #0
 80029d4:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80029d6:	1dbb      	adds	r3, r7, #6
 80029d8:	8818      	ldrh	r0, [r3, #0]
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	8819      	ldrh	r1, [r3, #0]
 80029de:	1cbb      	adds	r3, r7, #2
 80029e0:	881a      	ldrh	r2, [r3, #0]
 80029e2:	003b      	movs	r3, r7
 80029e4:	881c      	ldrh	r4, [r3, #0]
 80029e6:	2318      	movs	r3, #24
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	0023      	movs	r3, r4
 80029f0:	f001 fc86 	bl	8004300 <ST7735_FillRectangle>
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bdb0      	pop	{r4, r5, r7, pc}

080029fc <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	0004      	movs	r4, r0
 8002a04:	0008      	movs	r0, r1
 8002a06:	0011      	movs	r1, r2
 8002a08:	1dbb      	adds	r3, r7, #6
 8002a0a:	1c22      	adds	r2, r4, #0
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	1c02      	adds	r2, r0, #0
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	1cbb      	adds	r3, r7, #2
 8002a16:	1c0a      	adds	r2, r1, #0
 8002a18:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8002a1a:	1cbb      	adds	r3, r7, #2
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	2100      	movs	r1, #0
 8002a22:	5e59      	ldrsh	r1, [r3, r1]
 8002a24:	1dbb      	adds	r3, r7, #6
 8002a26:	2000      	movs	r0, #0
 8002a28:	5e1b      	ldrsh	r3, [r3, r0]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff ffa4 	bl	8002978 <drawPixel>
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b003      	add	sp, #12
 8002a36:	bd90      	pop	{r4, r7, pc}

08002a38 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002a38:	b5b0      	push	{r4, r5, r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	0005      	movs	r5, r0
 8002a40:	000c      	movs	r4, r1
 8002a42:	0010      	movs	r0, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	1dbb      	adds	r3, r7, #6
 8002a48:	1c2a      	adds	r2, r5, #0
 8002a4a:	801a      	strh	r2, [r3, #0]
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	1c22      	adds	r2, r4, #0
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	1cbb      	adds	r3, r7, #2
 8002a54:	1c02      	adds	r2, r0, #0
 8002a56:	801a      	strh	r2, [r3, #0]
 8002a58:	003b      	movs	r3, r7
 8002a5a:	1c0a      	adds	r2, r1, #0
 8002a5c:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8002a5e:	003b      	movs	r3, r7
 8002a60:	2200      	movs	r2, #0
 8002a62:	5e9a      	ldrsh	r2, [r3, r2]
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	2100      	movs	r1, #0
 8002a68:	5e5b      	ldrsh	r3, [r3, r1]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	17d9      	asrs	r1, r3, #31
 8002a6e:	185a      	adds	r2, r3, r1
 8002a70:	404a      	eors	r2, r1
 8002a72:	1cbb      	adds	r3, r7, #2
 8002a74:	2100      	movs	r1, #0
 8002a76:	5e59      	ldrsh	r1, [r3, r1]
 8002a78:	1dbb      	adds	r3, r7, #6
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	5e1b      	ldrsh	r3, [r3, r0]
 8002a7e:	1acb      	subs	r3, r1, r3
 8002a80:	17d9      	asrs	r1, r3, #31
 8002a82:	185b      	adds	r3, r3, r1
 8002a84:	404b      	eors	r3, r1
 8002a86:	2101      	movs	r1, #1
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dc01      	bgt.n	8002a90 <writeLine+0x58>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	1c19      	adds	r1, r3, #0
 8002a90:	b2ca      	uxtb	r2, r1
 8002a92:	211a      	movs	r1, #26
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	5e9b      	ldrsh	r3, [r3, r2]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d019      	beq.n	8002ad6 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8002aa2:	2118      	movs	r1, #24
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	1dba      	adds	r2, r7, #6
 8002aa8:	8812      	ldrh	r2, [r2, #0]
 8002aaa:	801a      	strh	r2, [r3, #0]
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	1d3a      	adds	r2, r7, #4
 8002ab0:	8812      	ldrh	r2, [r2, #0]
 8002ab2:	801a      	strh	r2, [r3, #0]
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	187a      	adds	r2, r7, r1
 8002ab8:	8812      	ldrh	r2, [r2, #0]
 8002aba:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8002abc:	2116      	movs	r1, #22
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	1cba      	adds	r2, r7, #2
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	1cbb      	adds	r3, r7, #2
 8002ac8:	003a      	movs	r2, r7
 8002aca:	8812      	ldrh	r2, [r2, #0]
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	003b      	movs	r3, r7
 8002ad0:	187a      	adds	r2, r7, r1
 8002ad2:	8812      	ldrh	r2, [r2, #0]
 8002ad4:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8002ad6:	1dba      	adds	r2, r7, #6
 8002ad8:	1cbb      	adds	r3, r7, #2
 8002ada:	2100      	movs	r1, #0
 8002adc:	5e52      	ldrsh	r2, [r2, r1]
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5e5b      	ldrsh	r3, [r3, r1]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	dd19      	ble.n	8002b1a <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8002ae6:	2114      	movs	r1, #20
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	1dba      	adds	r2, r7, #6
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	801a      	strh	r2, [r3, #0]
 8002af0:	1dbb      	adds	r3, r7, #6
 8002af2:	1cba      	adds	r2, r7, #2
 8002af4:	8812      	ldrh	r2, [r2, #0]
 8002af6:	801a      	strh	r2, [r3, #0]
 8002af8:	1cbb      	adds	r3, r7, #2
 8002afa:	187a      	adds	r2, r7, r1
 8002afc:	8812      	ldrh	r2, [r2, #0]
 8002afe:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8002b00:	2112      	movs	r1, #18
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	1d3a      	adds	r2, r7, #4
 8002b06:	8812      	ldrh	r2, [r2, #0]
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	003a      	movs	r2, r7
 8002b0e:	8812      	ldrh	r2, [r2, #0]
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	003b      	movs	r3, r7
 8002b14:	187a      	adds	r2, r7, r1
 8002b16:	8812      	ldrh	r2, [r2, #0]
 8002b18:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8002b1a:	1cbb      	adds	r3, r7, #2
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	1dbb      	adds	r3, r7, #6
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	2110      	movs	r1, #16
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8002b2c:	003b      	movs	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	5e9a      	ldrsh	r2, [r3, r2]
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	2000      	movs	r0, #0
 8002b36:	5e1b      	ldrsh	r3, [r3, r0]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	17d8      	asrs	r0, r3, #31
 8002b3c:	181a      	adds	r2, r3, r0
 8002b3e:	4042      	eors	r2, r0
 8002b40:	230e      	movs	r3, #14
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8002b46:	231e      	movs	r3, #30
 8002b48:	18fa      	adds	r2, r7, r3
 8002b4a:	187b      	adds	r3, r7, r1
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	5e5b      	ldrsh	r3, [r3, r1]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	da00      	bge.n	8002b56 <writeLine+0x11e>
 8002b54:	3301      	adds	r3, #1
 8002b56:	105b      	asrs	r3, r3, #1
 8002b58:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8002b5a:	1d3a      	adds	r2, r7, #4
 8002b5c:	003b      	movs	r3, r7
 8002b5e:	2100      	movs	r1, #0
 8002b60:	5e52      	ldrsh	r2, [r2, r1]
 8002b62:	2100      	movs	r1, #0
 8002b64:	5e5b      	ldrsh	r3, [r3, r1]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	da04      	bge.n	8002b74 <writeLine+0x13c>
        ystep = 1;
 8002b6a:	231c      	movs	r3, #28
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	2201      	movs	r2, #1
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	e04d      	b.n	8002c10 <writeLine+0x1d8>
    } else {
        ystep = -1;
 8002b74:	231c      	movs	r3, #28
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4252      	negs	r2, r2
 8002b7c:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8002b7e:	e047      	b.n	8002c10 <writeLine+0x1d8>
        if (steep) {
 8002b80:	231a      	movs	r3, #26
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2200      	movs	r2, #0
 8002b86:	5e9b      	ldrsh	r3, [r3, r2]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00c      	beq.n	8002ba6 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8002b8c:	2330      	movs	r3, #48	; 0x30
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	881a      	ldrh	r2, [r3, #0]
 8002b92:	1dbb      	adds	r3, r7, #6
 8002b94:	2100      	movs	r1, #0
 8002b96:	5e59      	ldrsh	r1, [r3, r1]
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	5e1b      	ldrsh	r3, [r3, r0]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff ff2c 	bl	80029fc <writePixel>
 8002ba4:	e00b      	b.n	8002bbe <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8002ba6:	2330      	movs	r3, #48	; 0x30
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	881a      	ldrh	r2, [r3, #0]
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5e59      	ldrsh	r1, [r3, r1]
 8002bb2:	1dbb      	adds	r3, r7, #6
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	5e1b      	ldrsh	r3, [r3, r0]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff ff1f 	bl	80029fc <writePixel>
        }
        err -= dy;
 8002bbe:	211e      	movs	r1, #30
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	881a      	ldrh	r2, [r3, #0]
 8002bc4:	230e      	movs	r3, #14
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	5e9b      	ldrsh	r3, [r3, r2]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da11      	bge.n	8002c00 <writeLine+0x1c8>
            y0 += ystep;
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	881a      	ldrh	r2, [r3, #0]
 8002be0:	231c      	movs	r3, #28
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	18d3      	adds	r3, r2, r3
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	801a      	strh	r2, [r3, #0]
            err += dx;
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	881a      	ldrh	r2, [r3, #0]
 8002bf2:	2310      	movs	r3, #16
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	18d3      	adds	r3, r2, r3
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8002c00:	1dbb      	adds	r3, r7, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	5e9b      	ldrsh	r3, [r3, r2]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3301      	adds	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	1dbb      	adds	r3, r7, #6
 8002c0e:	801a      	strh	r2, [r3, #0]
 8002c10:	1dba      	adds	r2, r7, #6
 8002c12:	1cbb      	adds	r3, r7, #2
 8002c14:	2100      	movs	r1, #0
 8002c16:	5e52      	ldrsh	r2, [r2, r1]
 8002c18:	2100      	movs	r1, #0
 8002c1a:	5e5b      	ldrsh	r3, [r3, r1]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	ddaf      	ble.n	8002b80 <writeLine+0x148>
        }
    }
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b008      	add	sp, #32
 8002c28:	bdb0      	pop	{r4, r5, r7, pc}

08002c2a <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8002c2a:	b5b0      	push	{r4, r5, r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af02      	add	r7, sp, #8
 8002c30:	0005      	movs	r5, r0
 8002c32:	000c      	movs	r4, r1
 8002c34:	0010      	movs	r0, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	1dbb      	adds	r3, r7, #6
 8002c3a:	1c2a      	adds	r2, r5, #0
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	1c22      	adds	r2, r4, #0
 8002c42:	801a      	strh	r2, [r3, #0]
 8002c44:	1cbb      	adds	r3, r7, #2
 8002c46:	1c02      	adds	r2, r0, #0
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	003b      	movs	r3, r7
 8002c4c:	1c0a      	adds	r2, r1, #0
 8002c4e:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	1cbb      	adds	r3, r7, #2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	18d3      	adds	r3, r2, r3
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b21c      	sxth	r4, r3
 8002c62:	1dbb      	adds	r3, r7, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	5e9a      	ldrsh	r2, [r3, r2]
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5e59      	ldrsh	r1, [r3, r1]
 8002c6e:	1dbb      	adds	r3, r7, #6
 8002c70:	2000      	movs	r0, #0
 8002c72:	5e18      	ldrsh	r0, [r3, r0]
 8002c74:	003b      	movs	r3, r7
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	0023      	movs	r3, r4
 8002c7c:	f7ff fedc 	bl	8002a38 <writeLine>
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b002      	add	sp, #8
 8002c86:	bdb0      	pop	{r4, r5, r7, pc}

08002c88 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	0005      	movs	r5, r0
 8002c90:	000c      	movs	r4, r1
 8002c92:	0010      	movs	r0, r2
 8002c94:	0019      	movs	r1, r3
 8002c96:	1dbb      	adds	r3, r7, #6
 8002c98:	1c2a      	adds	r2, r5, #0
 8002c9a:	801a      	strh	r2, [r3, #0]
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	1c22      	adds	r2, r4, #0
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	1cbb      	adds	r3, r7, #2
 8002ca4:	1c02      	adds	r2, r0, #0
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	003b      	movs	r3, r7
 8002caa:	1c0a      	adds	r2, r1, #0
 8002cac:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8002cae:	1dbb      	adds	r3, r7, #6
 8002cb0:	881a      	ldrh	r2, [r3, #0]
 8002cb2:	1cbb      	adds	r3, r7, #2
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	18d3      	adds	r3, r2, r3
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	2400      	movs	r4, #0
 8002cc4:	5f1c      	ldrsh	r4, [r3, r4]
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5e59      	ldrsh	r1, [r3, r1]
 8002ccc:	1dbb      	adds	r3, r7, #6
 8002cce:	2000      	movs	r0, #0
 8002cd0:	5e18      	ldrsh	r0, [r3, r0]
 8002cd2:	003b      	movs	r3, r7
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	0023      	movs	r3, r4
 8002cda:	f7ff fead 	bl	8002a38 <writeLine>
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b002      	add	sp, #8
 8002ce4:	bdb0      	pop	{r4, r5, r7, pc}

08002ce6 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002ce6:	b5b0      	push	{r4, r5, r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af02      	add	r7, sp, #8
 8002cec:	0005      	movs	r5, r0
 8002cee:	000c      	movs	r4, r1
 8002cf0:	0010      	movs	r0, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	1dbb      	adds	r3, r7, #6
 8002cf6:	1c2a      	adds	r2, r5, #0
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	1c22      	adds	r2, r4, #0
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	1cbb      	adds	r3, r7, #2
 8002d02:	1c02      	adds	r2, r0, #0
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	003b      	movs	r3, r7
 8002d08:	1c0a      	adds	r2, r1, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8002d0c:	1dba      	adds	r2, r7, #6
 8002d0e:	1cbb      	adds	r3, r7, #2
 8002d10:	2100      	movs	r1, #0
 8002d12:	5e52      	ldrsh	r2, [r2, r1]
 8002d14:	2100      	movs	r1, #0
 8002d16:	5e5b      	ldrsh	r3, [r3, r1]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d12a      	bne.n	8002d72 <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8002d1c:	1d3a      	adds	r2, r7, #4
 8002d1e:	003b      	movs	r3, r7
 8002d20:	2100      	movs	r1, #0
 8002d22:	5e52      	ldrsh	r2, [r2, r1]
 8002d24:	2100      	movs	r1, #0
 8002d26:	5e5b      	ldrsh	r3, [r3, r1]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dd0c      	ble.n	8002d46 <drawLine+0x60>
 8002d2c:	210c      	movs	r1, #12
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	1d3a      	adds	r2, r7, #4
 8002d32:	8812      	ldrh	r2, [r2, #0]
 8002d34:	801a      	strh	r2, [r3, #0]
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	003a      	movs	r2, r7
 8002d3a:	8812      	ldrh	r2, [r2, #0]
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	003b      	movs	r3, r7
 8002d40:	187a      	adds	r2, r7, r1
 8002d42:	8812      	ldrh	r2, [r2, #0]
 8002d44:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8002d46:	003b      	movs	r3, r7
 8002d48:	881a      	ldrh	r2, [r3, #0]
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	b21a      	sxth	r2, r3
 8002d58:	2320      	movs	r3, #32
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	881c      	ldrh	r4, [r3, #0]
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	2100      	movs	r1, #0
 8002d62:	5e59      	ldrsh	r1, [r3, r1]
 8002d64:	1dbb      	adds	r3, r7, #6
 8002d66:	2000      	movs	r0, #0
 8002d68:	5e18      	ldrsh	r0, [r3, r0]
 8002d6a:	0023      	movs	r3, r4
 8002d6c:	f7ff ff5d 	bl	8002c2a <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8002d70:	e045      	b.n	8002dfe <drawLine+0x118>
    } else if(y0 == y1){
 8002d72:	1d3a      	adds	r2, r7, #4
 8002d74:	003b      	movs	r3, r7
 8002d76:	2100      	movs	r1, #0
 8002d78:	5e52      	ldrsh	r2, [r2, r1]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5e5b      	ldrsh	r3, [r3, r1]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d12a      	bne.n	8002dd8 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8002d82:	1dba      	adds	r2, r7, #6
 8002d84:	1cbb      	adds	r3, r7, #2
 8002d86:	2100      	movs	r1, #0
 8002d88:	5e52      	ldrsh	r2, [r2, r1]
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	5e5b      	ldrsh	r3, [r3, r1]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	dd0c      	ble.n	8002dac <drawLine+0xc6>
 8002d92:	210e      	movs	r1, #14
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	1dba      	adds	r2, r7, #6
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	801a      	strh	r2, [r3, #0]
 8002d9c:	1dbb      	adds	r3, r7, #6
 8002d9e:	1cba      	adds	r2, r7, #2
 8002da0:	8812      	ldrh	r2, [r2, #0]
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	1cbb      	adds	r3, r7, #2
 8002da6:	187a      	adds	r2, r7, r1
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8002dac:	1cbb      	adds	r3, r7, #2
 8002dae:	881a      	ldrh	r2, [r3, #0]
 8002db0:	1dbb      	adds	r3, r7, #6
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b21a      	sxth	r2, r3
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	881c      	ldrh	r4, [r3, #0]
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5e59      	ldrsh	r1, [r3, r1]
 8002dca:	1dbb      	adds	r3, r7, #6
 8002dcc:	2000      	movs	r0, #0
 8002dce:	5e18      	ldrsh	r0, [r3, r0]
 8002dd0:	0023      	movs	r3, r4
 8002dd2:	f7ff ff59 	bl	8002c88 <drawFastHLine>
}
 8002dd6:	e012      	b.n	8002dfe <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8002dd8:	003b      	movs	r3, r7
 8002dda:	2400      	movs	r4, #0
 8002ddc:	5f1c      	ldrsh	r4, [r3, r4]
 8002dde:	1cbb      	adds	r3, r7, #2
 8002de0:	2200      	movs	r2, #0
 8002de2:	5e9a      	ldrsh	r2, [r3, r2]
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	2100      	movs	r1, #0
 8002de8:	5e59      	ldrsh	r1, [r3, r1]
 8002dea:	1dbb      	adds	r3, r7, #6
 8002dec:	2000      	movs	r0, #0
 8002dee:	5e18      	ldrsh	r0, [r3, r0]
 8002df0:	2320      	movs	r3, #32
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	0023      	movs	r3, r4
 8002dfa:	f7ff fe1d 	bl	8002a38 <writeLine>
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b004      	add	sp, #16
 8002e04:	bdb0      	pop	{r4, r5, r7, pc}

08002e06 <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8002e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	0005      	movs	r5, r0
 8002e0e:	000c      	movs	r4, r1
 8002e10:	0010      	movs	r0, r2
 8002e12:	0019      	movs	r1, r3
 8002e14:	1dbb      	adds	r3, r7, #6
 8002e16:	1c2a      	adds	r2, r5, #0
 8002e18:	801a      	strh	r2, [r3, #0]
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	1c22      	adds	r2, r4, #0
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	1cbb      	adds	r3, r7, #2
 8002e22:	1c02      	adds	r2, r0, #0
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	1c7b      	adds	r3, r7, #1
 8002e28:	1c0a      	adds	r2, r1, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
    int16_t f     = 1 - r;
 8002e2c:	1cbb      	adds	r3, r7, #2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	2316      	movs	r3, #22
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8002e3c:	2314      	movs	r3, #20
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	2201      	movs	r2, #1
 8002e42:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8002e44:	1cbb      	adds	r3, r7, #2
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	1c1a      	adds	r2, r3, #0
 8002e4a:	03d2      	lsls	r2, r2, #15
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	18db      	adds	r3, r3, r3
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	2312      	movs	r3, #18
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 8002e58:	2310      	movs	r3, #16
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 8002e60:	230e      	movs	r3, #14
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	1cba      	adds	r2, r7, #2
 8002e66:	8812      	ldrh	r2, [r2, #0]
 8002e68:	801a      	strh	r2, [r3, #0]

    while (x<y) {
 8002e6a:	e0fe      	b.n	800306a <drawCircleHelper+0x264>
        if (f >= 0) {
 8002e6c:	2116      	movs	r1, #22
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	2200      	movs	r2, #0
 8002e72:	5e9b      	ldrsh	r3, [r3, r2]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db17      	blt.n	8002ea8 <drawCircleHelper+0xa2>
            y--;
 8002e78:	200e      	movs	r0, #14
 8002e7a:	183b      	adds	r3, r7, r0
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	5e9b      	ldrsh	r3, [r3, r2]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	183b      	adds	r3, r7, r0
 8002e88:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8002e8a:	2012      	movs	r0, #18
 8002e8c:	183b      	adds	r3, r7, r0
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	3302      	adds	r3, #2
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	183b      	adds	r3, r7, r0
 8002e96:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	881a      	ldrh	r2, [r3, #0]
 8002e9c:	183b      	adds	r3, r7, r0
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	18d3      	adds	r3, r2, r3
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	2200      	movs	r2, #0
 8002eae:	5e9b      	ldrsh	r3, [r3, r2]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8002eba:	2014      	movs	r0, #20
 8002ebc:	183b      	adds	r3, r7, r0
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	183b      	adds	r3, r7, r0
 8002ec6:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8002ec8:	2416      	movs	r4, #22
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	881a      	ldrh	r2, [r3, #0]
 8002ece:	183b      	adds	r3, r7, r0
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	18d3      	adds	r3, r2, r3
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	801a      	strh	r2, [r3, #0]
        if (cornername & 0x4) {
 8002eda:	1c7b      	adds	r3, r7, #1
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d02c      	beq.n	8002f3e <drawCircleHelper+0x138>
            writePixel(x0 + x, y0 + y, color);
 8002ee4:	1dbb      	adds	r3, r7, #6
 8002ee6:	881a      	ldrh	r2, [r3, #0]
 8002ee8:	000c      	movs	r4, r1
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	18d3      	adds	r3, r2, r3
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	b218      	sxth	r0, r3
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	250e      	movs	r5, #14
 8002efa:	197b      	adds	r3, r7, r5
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	18d3      	adds	r3, r2, r3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b219      	sxth	r1, r3
 8002f04:	2628      	movs	r6, #40	; 0x28
 8002f06:	2308      	movs	r3, #8
 8002f08:	18f2      	adds	r2, r6, r3
 8002f0a:	19d3      	adds	r3, r2, r7
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	001a      	movs	r2, r3
 8002f10:	f7ff fd74 	bl	80029fc <writePixel>
            writePixel(x0 + y, y0 + x, color);
 8002f14:	1dbb      	adds	r3, r7, #6
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	197b      	adds	r3, r7, r5
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	b218      	sxth	r0, r3
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	881a      	ldrh	r2, [r3, #0]
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	18d3      	adds	r3, r2, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	b219      	sxth	r1, r3
 8002f30:	2308      	movs	r3, #8
 8002f32:	18f3      	adds	r3, r6, r3
 8002f34:	19db      	adds	r3, r3, r7
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	001a      	movs	r2, r3
 8002f3a:	f7ff fd5f 	bl	80029fc <writePixel>
        }
        if (cornername & 0x2) {
 8002f3e:	1c7b      	adds	r3, r7, #1
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2202      	movs	r2, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	d02c      	beq.n	8002fa2 <drawCircleHelper+0x19c>
            writePixel(x0 + x, y0 - y, color);
 8002f48:	1dbb      	adds	r3, r7, #6
 8002f4a:	881a      	ldrh	r2, [r3, #0]
 8002f4c:	2410      	movs	r4, #16
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	18d3      	adds	r3, r2, r3
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	b218      	sxth	r0, r3
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	250e      	movs	r5, #14
 8002f5e:	197b      	adds	r3, r7, r5
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	b219      	sxth	r1, r3
 8002f68:	2628      	movs	r6, #40	; 0x28
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	18f2      	adds	r2, r6, r3
 8002f6e:	19d3      	adds	r3, r2, r7
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	001a      	movs	r2, r3
 8002f74:	f7ff fd42 	bl	80029fc <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	881a      	ldrh	r2, [r3, #0]
 8002f7c:	197b      	adds	r3, r7, r5
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	18d3      	adds	r3, r2, r3
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	b218      	sxth	r0, r3
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	881a      	ldrh	r2, [r3, #0]
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	b219      	sxth	r1, r3
 8002f94:	2308      	movs	r3, #8
 8002f96:	18f3      	adds	r3, r6, r3
 8002f98:	19db      	adds	r3, r3, r7
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	f7ff fd2d 	bl	80029fc <writePixel>
        }
        if (cornername & 0x8) {
 8002fa2:	1c7b      	adds	r3, r7, #1
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d02c      	beq.n	8003006 <drawCircleHelper+0x200>
            writePixel(x0 - y, y0 + x, color);
 8002fac:	1dbb      	adds	r3, r7, #6
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	240e      	movs	r4, #14
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	b218      	sxth	r0, r3
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	2510      	movs	r5, #16
 8002fc2:	197b      	adds	r3, r7, r5
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	18d3      	adds	r3, r2, r3
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	b219      	sxth	r1, r3
 8002fcc:	2628      	movs	r6, #40	; 0x28
 8002fce:	2308      	movs	r3, #8
 8002fd0:	18f2      	adds	r2, r6, r3
 8002fd2:	19d3      	adds	r3, r2, r7
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	f7ff fd10 	bl	80029fc <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8002fdc:	1dbb      	adds	r3, r7, #6
 8002fde:	881a      	ldrh	r2, [r3, #0]
 8002fe0:	197b      	adds	r3, r7, r5
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	b218      	sxth	r0, r3
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	18d3      	adds	r3, r2, r3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b219      	sxth	r1, r3
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	18f3      	adds	r3, r6, r3
 8002ffc:	19db      	adds	r3, r3, r7
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	001a      	movs	r2, r3
 8003002:	f7ff fcfb 	bl	80029fc <writePixel>
        }
        if (cornername & 0x1) {
 8003006:	1c7b      	adds	r3, r7, #1
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	d02c      	beq.n	800306a <drawCircleHelper+0x264>
            writePixel(x0 - y, y0 - x, color);
 8003010:	1dbb      	adds	r3, r7, #6
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	240e      	movs	r4, #14
 8003016:	193b      	adds	r3, r7, r4
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	b29b      	uxth	r3, r3
 800301e:	b218      	sxth	r0, r3
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	881a      	ldrh	r2, [r3, #0]
 8003024:	2510      	movs	r5, #16
 8003026:	197b      	adds	r3, r7, r5
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	b29b      	uxth	r3, r3
 800302e:	b219      	sxth	r1, r3
 8003030:	2628      	movs	r6, #40	; 0x28
 8003032:	2308      	movs	r3, #8
 8003034:	18f2      	adds	r2, r6, r3
 8003036:	19d3      	adds	r3, r2, r7
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	001a      	movs	r2, r3
 800303c:	f7ff fcde 	bl	80029fc <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8003040:	1dbb      	adds	r3, r7, #6
 8003042:	881a      	ldrh	r2, [r3, #0]
 8003044:	197b      	adds	r3, r7, r5
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	b29b      	uxth	r3, r3
 800304c:	b218      	sxth	r0, r3
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	881a      	ldrh	r2, [r3, #0]
 8003052:	193b      	adds	r3, r7, r4
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	b29b      	uxth	r3, r3
 800305a:	b219      	sxth	r1, r3
 800305c:	2308      	movs	r3, #8
 800305e:	18f3      	adds	r3, r6, r3
 8003060:	19db      	adds	r3, r3, r7
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	001a      	movs	r2, r3
 8003066:	f7ff fcc9 	bl	80029fc <writePixel>
    while (x<y) {
 800306a:	2310      	movs	r3, #16
 800306c:	18fa      	adds	r2, r7, r3
 800306e:	230e      	movs	r3, #14
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2100      	movs	r1, #0
 8003074:	5e52      	ldrsh	r2, [r2, r1]
 8003076:	2100      	movs	r1, #0
 8003078:	5e5b      	ldrsh	r3, [r3, r1]
 800307a:	429a      	cmp	r2, r3
 800307c:	da00      	bge.n	8003080 <drawCircleHelper+0x27a>
 800307e:	e6f5      	b.n	8002e6c <drawCircleHelper+0x66>
        }
    }
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b007      	add	sp, #28
 8003088:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800308a <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800308a:	b5b0      	push	{r4, r5, r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	0005      	movs	r5, r0
 8003092:	000c      	movs	r4, r1
 8003094:	0010      	movs	r0, r2
 8003096:	0019      	movs	r1, r3
 8003098:	1dbb      	adds	r3, r7, #6
 800309a:	1c2a      	adds	r2, r5, #0
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	1c22      	adds	r2, r4, #0
 80030a2:	801a      	strh	r2, [r3, #0]
 80030a4:	1cbb      	adds	r3, r7, #2
 80030a6:	1c02      	adds	r2, r0, #0
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	1c7b      	adds	r3, r7, #1
 80030ac:	1c0a      	adds	r2, r1, #0
 80030ae:	701a      	strb	r2, [r3, #0]

    int16_t f     = 1 - r;
 80030b0:	1cbb      	adds	r3, r7, #2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	2201      	movs	r2, #1
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	2316      	movs	r3, #22
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 80030c0:	2314      	movs	r3, #20
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	2201      	movs	r2, #1
 80030c6:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 80030c8:	1cbb      	adds	r3, r7, #2
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	1c1a      	adds	r2, r3, #0
 80030ce:	03d2      	lsls	r2, r2, #15
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	18db      	adds	r3, r3, r3
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	2312      	movs	r3, #18
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 80030dc:	2110      	movs	r1, #16
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	2200      	movs	r2, #0
 80030e2:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 80030e4:	200e      	movs	r0, #14
 80030e6:	183b      	adds	r3, r7, r0
 80030e8:	1cba      	adds	r2, r7, #2
 80030ea:	8812      	ldrh	r2, [r2, #0]
 80030ec:	801a      	strh	r2, [r3, #0]
    int16_t px    = x;
 80030ee:	230c      	movs	r3, #12
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	187a      	adds	r2, r7, r1
 80030f4:	8812      	ldrh	r2, [r2, #0]
 80030f6:	801a      	strh	r2, [r3, #0]
    int16_t py    = y;
 80030f8:	230a      	movs	r3, #10
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	183a      	adds	r2, r7, r0
 80030fe:	8812      	ldrh	r2, [r2, #0]
 8003100:	801a      	strh	r2, [r3, #0]

    delta++; // Avoid some +1's in the loop
 8003102:	2128      	movs	r1, #40	; 0x28
 8003104:	187b      	adds	r3, r7, r1
 8003106:	2200      	movs	r2, #0
 8003108:	5e9b      	ldrsh	r3, [r3, r2]
 800310a:	b29b      	uxth	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	187b      	adds	r3, r7, r1
 8003112:	801a      	strh	r2, [r3, #0]

    while(x < y) {
 8003114:	e0e2      	b.n	80032dc <fillCircleHelper+0x252>
        if (f >= 0) {
 8003116:	2116      	movs	r1, #22
 8003118:	187b      	adds	r3, r7, r1
 800311a:	2200      	movs	r2, #0
 800311c:	5e9b      	ldrsh	r3, [r3, r2]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db17      	blt.n	8003152 <fillCircleHelper+0xc8>
            y--;
 8003122:	200e      	movs	r0, #14
 8003124:	183b      	adds	r3, r7, r0
 8003126:	2200      	movs	r2, #0
 8003128:	5e9b      	ldrsh	r3, [r3, r2]
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	183b      	adds	r3, r7, r0
 8003132:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8003134:	2012      	movs	r0, #18
 8003136:	183b      	adds	r3, r7, r0
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	3302      	adds	r3, #2
 800313c:	b29a      	uxth	r2, r3
 800313e:	183b      	adds	r3, r7, r0
 8003140:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8003142:	187b      	adds	r3, r7, r1
 8003144:	881a      	ldrh	r2, [r3, #0]
 8003146:	183b      	adds	r3, r7, r0
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	18d3      	adds	r3, r2, r3
 800314c:	b29a      	uxth	r2, r3
 800314e:	187b      	adds	r3, r7, r1
 8003150:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8003152:	2110      	movs	r1, #16
 8003154:	187b      	adds	r3, r7, r1
 8003156:	2200      	movs	r2, #0
 8003158:	5e9b      	ldrsh	r3, [r3, r2]
 800315a:	b29b      	uxth	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	187b      	adds	r3, r7, r1
 8003162:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8003164:	2014      	movs	r0, #20
 8003166:	183b      	adds	r3, r7, r0
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	3302      	adds	r3, #2
 800316c:	b29a      	uxth	r2, r3
 800316e:	183b      	adds	r3, r7, r0
 8003170:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8003172:	2416      	movs	r4, #22
 8003174:	193b      	adds	r3, r7, r4
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	183b      	adds	r3, r7, r0
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	18d3      	adds	r3, r2, r3
 800317e:	b29a      	uxth	r2, r3
 8003180:	193b      	adds	r3, r7, r4
 8003182:	801a      	strh	r2, [r3, #0]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8003184:	240e      	movs	r4, #14
 8003186:	193a      	adds	r2, r7, r4
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2000      	movs	r0, #0
 800318c:	5e12      	ldrsh	r2, [r2, r0]
 800318e:	2000      	movs	r0, #0
 8003190:	5e1b      	ldrsh	r3, [r3, r0]
 8003192:	429a      	cmp	r2, r3
 8003194:	db45      	blt.n	8003222 <fillCircleHelper+0x198>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8003196:	1c7b      	adds	r3, r7, #1
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	d01c      	beq.n	80031da <fillCircleHelper+0x150>
 80031a0:	1dbb      	adds	r3, r7, #6
 80031a2:	881a      	ldrh	r2, [r3, #0]
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	18d3      	adds	r3, r2, r3
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b218      	sxth	r0, r3
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	881a      	ldrh	r2, [r3, #0]
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	b219      	sxth	r1, r3
 80031bc:	193b      	adds	r3, r7, r4
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	18db      	adds	r3, r3, r3
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	2328      	movs	r3, #40	; 0x28
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	18d3      	adds	r3, r2, r3
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	b21a      	sxth	r2, r3
 80031d0:	232c      	movs	r3, #44	; 0x2c
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	f7ff fd28 	bl	8002c2a <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 80031da:	1c7b      	adds	r3, r7, #1
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2202      	movs	r2, #2
 80031e0:	4013      	ands	r3, r2
 80031e2:	d01e      	beq.n	8003222 <fillCircleHelper+0x198>
 80031e4:	1dbb      	adds	r3, r7, #6
 80031e6:	881a      	ldrh	r2, [r3, #0]
 80031e8:	2310      	movs	r3, #16
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	b218      	sxth	r0, r3
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	240e      	movs	r4, #14
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	b29b      	uxth	r3, r3
 8003202:	b219      	sxth	r1, r3
 8003204:	193b      	adds	r3, r7, r4
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	18db      	adds	r3, r3, r3
 800320a:	b29a      	uxth	r2, r3
 800320c:	2328      	movs	r3, #40	; 0x28
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	18d3      	adds	r3, r2, r3
 8003214:	b29b      	uxth	r3, r3
 8003216:	b21a      	sxth	r2, r3
 8003218:	232c      	movs	r3, #44	; 0x2c
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	f7ff fd04 	bl	8002c2a <drawFastVLine>
        }
        if(y != py) {
 8003222:	230e      	movs	r3, #14
 8003224:	18fa      	adds	r2, r7, r3
 8003226:	210a      	movs	r1, #10
 8003228:	187b      	adds	r3, r7, r1
 800322a:	2000      	movs	r0, #0
 800322c:	5e12      	ldrsh	r2, [r2, r0]
 800322e:	2000      	movs	r0, #0
 8003230:	5e1b      	ldrsh	r3, [r3, r0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d04c      	beq.n	80032d0 <fillCircleHelper+0x246>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8003236:	1c7b      	adds	r3, r7, #1
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2201      	movs	r2, #1
 800323c:	4013      	ands	r3, r2
 800323e:	d01d      	beq.n	800327c <fillCircleHelper+0x1f2>
 8003240:	1dbb      	adds	r3, r7, #6
 8003242:	881a      	ldrh	r2, [r3, #0]
 8003244:	187b      	adds	r3, r7, r1
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	18d3      	adds	r3, r2, r3
 800324a:	b29b      	uxth	r3, r3
 800324c:	b218      	sxth	r0, r3
 800324e:	1d3b      	adds	r3, r7, #4
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	240c      	movs	r4, #12
 8003254:	193b      	adds	r3, r7, r4
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	b29b      	uxth	r3, r3
 800325c:	b219      	sxth	r1, r3
 800325e:	193b      	adds	r3, r7, r4
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	18db      	adds	r3, r3, r3
 8003264:	b29a      	uxth	r2, r3
 8003266:	2328      	movs	r3, #40	; 0x28
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	18d3      	adds	r3, r2, r3
 800326e:	b29b      	uxth	r3, r3
 8003270:	b21a      	sxth	r2, r3
 8003272:	232c      	movs	r3, #44	; 0x2c
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	f7ff fcd7 	bl	8002c2a <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800327c:	1c7b      	adds	r3, r7, #1
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2202      	movs	r2, #2
 8003282:	4013      	ands	r3, r2
 8003284:	d01e      	beq.n	80032c4 <fillCircleHelper+0x23a>
 8003286:	1dbb      	adds	r3, r7, #6
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	230a      	movs	r3, #10
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	b29b      	uxth	r3, r3
 8003294:	b218      	sxth	r0, r3
 8003296:	1d3b      	adds	r3, r7, #4
 8003298:	881a      	ldrh	r2, [r3, #0]
 800329a:	240c      	movs	r4, #12
 800329c:	193b      	adds	r3, r7, r4
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	b219      	sxth	r1, r3
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	18db      	adds	r3, r3, r3
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	2328      	movs	r3, #40	; 0x28
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	18d3      	adds	r3, r2, r3
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	b21a      	sxth	r2, r3
 80032ba:	232c      	movs	r3, #44	; 0x2c
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	f7ff fcb3 	bl	8002c2a <drawFastVLine>
            py = y;
 80032c4:	230a      	movs	r3, #10
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	220e      	movs	r2, #14
 80032ca:	18ba      	adds	r2, r7, r2
 80032cc:	8812      	ldrh	r2, [r2, #0]
 80032ce:	801a      	strh	r2, [r3, #0]
        }
        px = x;
 80032d0:	230c      	movs	r3, #12
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2210      	movs	r2, #16
 80032d6:	18ba      	adds	r2, r7, r2
 80032d8:	8812      	ldrh	r2, [r2, #0]
 80032da:	801a      	strh	r2, [r3, #0]
    while(x < y) {
 80032dc:	2310      	movs	r3, #16
 80032de:	18fa      	adds	r2, r7, r3
 80032e0:	230e      	movs	r3, #14
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2100      	movs	r1, #0
 80032e6:	5e52      	ldrsh	r2, [r2, r1]
 80032e8:	2100      	movs	r1, #0
 80032ea:	5e5b      	ldrsh	r3, [r3, r1]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	da00      	bge.n	80032f2 <fillCircleHelper+0x268>
 80032f0:	e711      	b.n	8003116 <fillCircleHelper+0x8c>
    }
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b006      	add	sp, #24
 80032fa:	bdb0      	pop	{r4, r5, r7, pc}

080032fc <drawRect>:
}



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80032fc:	b5b0      	push	{r4, r5, r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	0005      	movs	r5, r0
 8003304:	000c      	movs	r4, r1
 8003306:	0010      	movs	r0, r2
 8003308:	0019      	movs	r1, r3
 800330a:	1dbb      	adds	r3, r7, #6
 800330c:	1c2a      	adds	r2, r5, #0
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	1c22      	adds	r2, r4, #0
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	1cbb      	adds	r3, r7, #2
 8003318:	1c02      	adds	r2, r0, #0
 800331a:	801a      	strh	r2, [r3, #0]
 800331c:	003b      	movs	r3, r7
 800331e:	1c0a      	adds	r2, r1, #0
 8003320:	801a      	strh	r2, [r3, #0]
    drawFastHLine(x, y, w, color);
 8003322:	2518      	movs	r5, #24
 8003324:	197b      	adds	r3, r7, r5
 8003326:	881c      	ldrh	r4, [r3, #0]
 8003328:	1cbb      	adds	r3, r7, #2
 800332a:	2200      	movs	r2, #0
 800332c:	5e9a      	ldrsh	r2, [r3, r2]
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	2100      	movs	r1, #0
 8003332:	5e59      	ldrsh	r1, [r3, r1]
 8003334:	1dbb      	adds	r3, r7, #6
 8003336:	2000      	movs	r0, #0
 8003338:	5e18      	ldrsh	r0, [r3, r0]
 800333a:	0023      	movs	r3, r4
 800333c:	f7ff fca4 	bl	8002c88 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	881a      	ldrh	r2, [r3, #0]
 8003344:	003b      	movs	r3, r7
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	18d3      	adds	r3, r2, r3
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29b      	uxth	r3, r3
 8003350:	b219      	sxth	r1, r3
 8003352:	197b      	adds	r3, r7, r5
 8003354:	881c      	ldrh	r4, [r3, #0]
 8003356:	1cbb      	adds	r3, r7, #2
 8003358:	2200      	movs	r2, #0
 800335a:	5e9a      	ldrsh	r2, [r3, r2]
 800335c:	1dbb      	adds	r3, r7, #6
 800335e:	2000      	movs	r0, #0
 8003360:	5e18      	ldrsh	r0, [r3, r0]
 8003362:	0023      	movs	r3, r4
 8003364:	f7ff fc90 	bl	8002c88 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8003368:	197b      	adds	r3, r7, r5
 800336a:	881c      	ldrh	r4, [r3, #0]
 800336c:	003b      	movs	r3, r7
 800336e:	2200      	movs	r2, #0
 8003370:	5e9a      	ldrsh	r2, [r3, r2]
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2100      	movs	r1, #0
 8003376:	5e59      	ldrsh	r1, [r3, r1]
 8003378:	1dbb      	adds	r3, r7, #6
 800337a:	2000      	movs	r0, #0
 800337c:	5e18      	ldrsh	r0, [r3, r0]
 800337e:	0023      	movs	r3, r4
 8003380:	f7ff fc53 	bl	8002c2a <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8003384:	1dbb      	adds	r3, r7, #6
 8003386:	881a      	ldrh	r2, [r3, #0]
 8003388:	1cbb      	adds	r3, r7, #2
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	18d3      	adds	r3, r2, r3
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29b      	uxth	r3, r3
 8003394:	b218      	sxth	r0, r3
 8003396:	197b      	adds	r3, r7, r5
 8003398:	881c      	ldrh	r4, [r3, #0]
 800339a:	003b      	movs	r3, r7
 800339c:	2200      	movs	r2, #0
 800339e:	5e9a      	ldrsh	r2, [r3, r2]
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	2100      	movs	r1, #0
 80033a4:	5e59      	ldrsh	r1, [r3, r1]
 80033a6:	0023      	movs	r3, r4
 80033a8:	f7ff fc3f 	bl	8002c2a <drawFastVLine>
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bdb0      	pop	{r4, r5, r7, pc}

080033b4 <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	0005      	movs	r5, r0
 80033bc:	000c      	movs	r4, r1
 80033be:	0010      	movs	r0, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	1dbb      	adds	r3, r7, #6
 80033c4:	1c2a      	adds	r2, r5, #0
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	1c22      	adds	r2, r4, #0
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	1cbb      	adds	r3, r7, #2
 80033d0:	1c02      	adds	r2, r0, #0
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	003b      	movs	r3, r7
 80033d6:	1c0a      	adds	r2, r1, #0
 80033d8:	801a      	strh	r2, [r3, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80033da:	003b      	movs	r3, r7
 80033dc:	1cba      	adds	r2, r7, #2
 80033de:	8810      	ldrh	r0, [r2, #0]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b219      	sxth	r1, r3
 80033e4:	b202      	sxth	r2, r0
 80033e6:	4291      	cmp	r1, r2
 80033e8:	dd00      	ble.n	80033ec <drawRoundRect+0x38>
 80033ea:	1c03      	adds	r3, r0, #0
 80033ec:	b21b      	sxth	r3, r3
 80033ee:	220e      	movs	r2, #14
 80033f0:	18ba      	adds	r2, r7, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	da00      	bge.n	80033f8 <drawRoundRect+0x44>
 80033f6:	3301      	adds	r3, #1
 80033f8:	105b      	asrs	r3, r3, #1
 80033fa:	8013      	strh	r3, [r2, #0]
    if(r > max_radius) r = max_radius;
 80033fc:	2020      	movs	r0, #32
 80033fe:	2508      	movs	r5, #8
 8003400:	1943      	adds	r3, r0, r5
 8003402:	19db      	adds	r3, r3, r7
 8003404:	240e      	movs	r4, #14
 8003406:	1939      	adds	r1, r7, r4
 8003408:	2200      	movs	r2, #0
 800340a:	5e9a      	ldrsh	r2, [r3, r2]
 800340c:	2300      	movs	r3, #0
 800340e:	5ecb      	ldrsh	r3, [r1, r3]
 8003410:	429a      	cmp	r2, r3
 8003412:	dd04      	ble.n	800341e <drawRoundRect+0x6a>
 8003414:	1943      	adds	r3, r0, r5
 8003416:	19db      	adds	r3, r3, r7
 8003418:	193a      	adds	r2, r7, r4
 800341a:	8812      	ldrh	r2, [r2, #0]
 800341c:	801a      	strh	r2, [r3, #0]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 800341e:	1dbb      	adds	r3, r7, #6
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	2520      	movs	r5, #32
 8003424:	2408      	movs	r4, #8
 8003426:	192b      	adds	r3, r5, r4
 8003428:	19db      	adds	r3, r3, r7
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	18d3      	adds	r3, r2, r3
 800342e:	b29b      	uxth	r3, r3
 8003430:	b218      	sxth	r0, r3
 8003432:	1cbb      	adds	r3, r7, #2
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	192b      	adds	r3, r5, r4
 8003438:	19db      	adds	r3, r3, r7
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	18db      	adds	r3, r3, r3
 800343e:	b29b      	uxth	r3, r3
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	b29b      	uxth	r3, r3
 8003444:	b21a      	sxth	r2, r3
 8003446:	2624      	movs	r6, #36	; 0x24
 8003448:	1933      	adds	r3, r6, r4
 800344a:	19db      	adds	r3, r3, r7
 800344c:	881c      	ldrh	r4, [r3, #0]
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	2100      	movs	r1, #0
 8003452:	5e59      	ldrsh	r1, [r3, r1]
 8003454:	0023      	movs	r3, r4
 8003456:	f7ff fc17 	bl	8002c88 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 800345a:	1dbb      	adds	r3, r7, #6
 800345c:	881a      	ldrh	r2, [r3, #0]
 800345e:	2408      	movs	r4, #8
 8003460:	192b      	adds	r3, r5, r4
 8003462:	19db      	adds	r3, r3, r7
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	18d3      	adds	r3, r2, r3
 8003468:	b29b      	uxth	r3, r3
 800346a:	b218      	sxth	r0, r3
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	881a      	ldrh	r2, [r3, #0]
 8003470:	003b      	movs	r3, r7
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	18d3      	adds	r3, r2, r3
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29b      	uxth	r3, r3
 800347c:	b219      	sxth	r1, r3
 800347e:	1cbb      	adds	r3, r7, #2
 8003480:	881a      	ldrh	r2, [r3, #0]
 8003482:	192b      	adds	r3, r5, r4
 8003484:	19db      	adds	r3, r3, r7
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	18db      	adds	r3, r3, r3
 800348a:	b29b      	uxth	r3, r3
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	b29b      	uxth	r3, r3
 8003490:	b21a      	sxth	r2, r3
 8003492:	1933      	adds	r3, r6, r4
 8003494:	19db      	adds	r3, r3, r7
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	f7ff fbf6 	bl	8002c88 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	881a      	ldrh	r2, [r3, #0]
 80034a0:	192b      	adds	r3, r5, r4
 80034a2:	19db      	adds	r3, r3, r7
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	18d3      	adds	r3, r2, r3
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	b219      	sxth	r1, r3
 80034ac:	003b      	movs	r3, r7
 80034ae:	881a      	ldrh	r2, [r3, #0]
 80034b0:	192b      	adds	r3, r5, r4
 80034b2:	19db      	adds	r3, r3, r7
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	18db      	adds	r3, r3, r3
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	b21a      	sxth	r2, r3
 80034c0:	1933      	adds	r3, r6, r4
 80034c2:	19db      	adds	r3, r3, r7
 80034c4:	881c      	ldrh	r4, [r3, #0]
 80034c6:	1dbb      	adds	r3, r7, #6
 80034c8:	2000      	movs	r0, #0
 80034ca:	5e18      	ldrsh	r0, [r3, r0]
 80034cc:	0023      	movs	r3, r4
 80034ce:	f7ff fbac 	bl	8002c2a <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80034d2:	1dbb      	adds	r3, r7, #6
 80034d4:	881a      	ldrh	r2, [r3, #0]
 80034d6:	1cbb      	adds	r3, r7, #2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	18d3      	adds	r3, r2, r3
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	b218      	sxth	r0, r3
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	881a      	ldrh	r2, [r3, #0]
 80034e8:	2408      	movs	r4, #8
 80034ea:	192b      	adds	r3, r5, r4
 80034ec:	19db      	adds	r3, r3, r7
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	b219      	sxth	r1, r3
 80034f6:	003b      	movs	r3, r7
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	192b      	adds	r3, r5, r4
 80034fc:	19db      	adds	r3, r3, r7
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	18db      	adds	r3, r3, r3
 8003502:	b29b      	uxth	r3, r3
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	b21a      	sxth	r2, r3
 800350a:	1933      	adds	r3, r6, r4
 800350c:	19db      	adds	r3, r3, r7
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	f7ff fb8b 	bl	8002c2a <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8003514:	1dbb      	adds	r3, r7, #6
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	192b      	adds	r3, r5, r4
 800351a:	19db      	adds	r3, r3, r7
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	18d3      	adds	r3, r2, r3
 8003520:	b29b      	uxth	r3, r3
 8003522:	b218      	sxth	r0, r3
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	881a      	ldrh	r2, [r3, #0]
 8003528:	1929      	adds	r1, r5, r4
 800352a:	19cb      	adds	r3, r1, r7
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	18d3      	adds	r3, r2, r3
 8003530:	b29b      	uxth	r3, r3
 8003532:	b219      	sxth	r1, r3
 8003534:	002c      	movs	r4, r5
 8003536:	2308      	movs	r3, #8
 8003538:	18ea      	adds	r2, r5, r3
 800353a:	19d3      	adds	r3, r2, r7
 800353c:	2200      	movs	r2, #0
 800353e:	5e9a      	ldrsh	r2, [r3, r2]
 8003540:	0035      	movs	r5, r6
 8003542:	2608      	movs	r6, #8
 8003544:	19ab      	adds	r3, r5, r6
 8003546:	19db      	adds	r3, r3, r7
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2301      	movs	r3, #1
 800354e:	f7ff fc5a 	bl	8002e06 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8003552:	1dbb      	adds	r3, r7, #6
 8003554:	881a      	ldrh	r2, [r3, #0]
 8003556:	1cbb      	adds	r3, r7, #2
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	18d3      	adds	r3, r2, r3
 800355c:	b29a      	uxth	r2, r3
 800355e:	0031      	movs	r1, r6
 8003560:	1863      	adds	r3, r4, r1
 8003562:	19db      	adds	r3, r3, r7
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29b      	uxth	r3, r3
 800356e:	b218      	sxth	r0, r3
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	000e      	movs	r6, r1
 8003576:	19a3      	adds	r3, r4, r6
 8003578:	19db      	adds	r3, r3, r7
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	18d3      	adds	r3, r2, r3
 800357e:	b29b      	uxth	r3, r3
 8003580:	b219      	sxth	r1, r3
 8003582:	19a3      	adds	r3, r4, r6
 8003584:	19db      	adds	r3, r3, r7
 8003586:	2200      	movs	r2, #0
 8003588:	5e9a      	ldrsh	r2, [r3, r2]
 800358a:	19ab      	adds	r3, r5, r6
 800358c:	19db      	adds	r3, r3, r7
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2302      	movs	r3, #2
 8003594:	f7ff fc37 	bl	8002e06 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8003598:	1dbb      	adds	r3, r7, #6
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	1cbb      	adds	r3, r7, #2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	18d3      	adds	r3, r2, r3
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	0021      	movs	r1, r4
 80035a6:	198b      	adds	r3, r1, r6
 80035a8:	19db      	adds	r3, r3, r7
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	b218      	sxth	r0, r3
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	881a      	ldrh	r2, [r3, #0]
 80035ba:	003b      	movs	r3, r7
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	18d3      	adds	r3, r2, r3
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	000c      	movs	r4, r1
 80035c4:	19a3      	adds	r3, r4, r6
 80035c6:	19db      	adds	r3, r3, r7
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	b219      	sxth	r1, r3
 80035d4:	19a3      	adds	r3, r4, r6
 80035d6:	19db      	adds	r3, r3, r7
 80035d8:	2200      	movs	r2, #0
 80035da:	5e9a      	ldrsh	r2, [r3, r2]
 80035dc:	19ab      	adds	r3, r5, r6
 80035de:	19db      	adds	r3, r3, r7
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2304      	movs	r3, #4
 80035e6:	f7ff fc0e 	bl	8002e06 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80035ea:	1dbb      	adds	r3, r7, #6
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	0021      	movs	r1, r4
 80035f0:	198b      	adds	r3, r1, r6
 80035f2:	19db      	adds	r3, r3, r7
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	18d3      	adds	r3, r2, r3
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b218      	sxth	r0, r3
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	881a      	ldrh	r2, [r3, #0]
 8003600:	003b      	movs	r3, r7
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	18d3      	adds	r3, r2, r3
 8003606:	b29a      	uxth	r2, r3
 8003608:	000c      	movs	r4, r1
 800360a:	198b      	adds	r3, r1, r6
 800360c:	19db      	adds	r3, r3, r7
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29b      	uxth	r3, r3
 8003618:	b219      	sxth	r1, r3
 800361a:	19a3      	adds	r3, r4, r6
 800361c:	19db      	adds	r3, r3, r7
 800361e:	2200      	movs	r2, #0
 8003620:	5e9a      	ldrsh	r2, [r3, r2]
 8003622:	19ab      	adds	r3, r5, r6
 8003624:	19db      	adds	r3, r3, r7
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2308      	movs	r3, #8
 800362c:	f7ff fbeb 	bl	8002e06 <drawCircleHelper>
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b005      	add	sp, #20
 8003636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003638 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	b087      	sub	sp, #28
 800363c:	af02      	add	r7, sp, #8
 800363e:	0005      	movs	r5, r0
 8003640:	000c      	movs	r4, r1
 8003642:	0010      	movs	r0, r2
 8003644:	0019      	movs	r1, r3
 8003646:	1dbb      	adds	r3, r7, #6
 8003648:	1c2a      	adds	r2, r5, #0
 800364a:	801a      	strh	r2, [r3, #0]
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	1c22      	adds	r2, r4, #0
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	1c02      	adds	r2, r0, #0
 8003656:	801a      	strh	r2, [r3, #0]
 8003658:	003b      	movs	r3, r7
 800365a:	1c0a      	adds	r2, r1, #0
 800365c:	801a      	strh	r2, [r3, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800365e:	003b      	movs	r3, r7
 8003660:	1cba      	adds	r2, r7, #2
 8003662:	8810      	ldrh	r0, [r2, #0]
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b219      	sxth	r1, r3
 8003668:	b202      	sxth	r2, r0
 800366a:	4291      	cmp	r1, r2
 800366c:	dd00      	ble.n	8003670 <fillRoundRect+0x38>
 800366e:	1c03      	adds	r3, r0, #0
 8003670:	b21b      	sxth	r3, r3
 8003672:	220e      	movs	r2, #14
 8003674:	18ba      	adds	r2, r7, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	da00      	bge.n	800367c <fillRoundRect+0x44>
 800367a:	3301      	adds	r3, #1
 800367c:	105b      	asrs	r3, r3, #1
 800367e:	8013      	strh	r3, [r2, #0]
    if(r > max_radius) r = max_radius;
 8003680:	2020      	movs	r0, #32
 8003682:	2508      	movs	r5, #8
 8003684:	1943      	adds	r3, r0, r5
 8003686:	19db      	adds	r3, r3, r7
 8003688:	240e      	movs	r4, #14
 800368a:	1939      	adds	r1, r7, r4
 800368c:	2200      	movs	r2, #0
 800368e:	5e9a      	ldrsh	r2, [r3, r2]
 8003690:	2300      	movs	r3, #0
 8003692:	5ecb      	ldrsh	r3, [r1, r3]
 8003694:	429a      	cmp	r2, r3
 8003696:	dd04      	ble.n	80036a2 <fillRoundRect+0x6a>
 8003698:	1943      	adds	r3, r0, r5
 800369a:	19db      	adds	r3, r3, r7
 800369c:	193a      	adds	r2, r7, r4
 800369e:	8812      	ldrh	r2, [r2, #0]
 80036a0:	801a      	strh	r2, [r3, #0]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	2520      	movs	r5, #32
 80036a8:	2408      	movs	r4, #8
 80036aa:	192b      	adds	r3, r5, r4
 80036ac:	19db      	adds	r3, r3, r7
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	b218      	sxth	r0, r3
 80036b6:	1cbb      	adds	r3, r7, #2
 80036b8:	881a      	ldrh	r2, [r3, #0]
 80036ba:	1929      	adds	r1, r5, r4
 80036bc:	19cb      	adds	r3, r1, r7
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	18db      	adds	r3, r3, r3
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	003b      	movs	r3, r7
 80036cc:	2400      	movs	r4, #0
 80036ce:	5f1c      	ldrsh	r4, [r3, r4]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	2100      	movs	r1, #0
 80036d4:	5e59      	ldrsh	r1, [r3, r1]
 80036d6:	2624      	movs	r6, #36	; 0x24
 80036d8:	2308      	movs	r3, #8
 80036da:	18f3      	adds	r3, r6, r3
 80036dc:	19db      	adds	r3, r3, r7
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	0023      	movs	r3, r4
 80036e4:	f7ff f964 	bl	80029b0 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	1cbb      	adds	r3, r7, #2
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	18d3      	adds	r3, r2, r3
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	2408      	movs	r4, #8
 80036f6:	192b      	adds	r3, r5, r4
 80036f8:	19db      	adds	r3, r3, r7
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29b      	uxth	r3, r3
 8003704:	b218      	sxth	r0, r3
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	881a      	ldrh	r2, [r3, #0]
 800370a:	192b      	adds	r3, r5, r4
 800370c:	19db      	adds	r3, r3, r7
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	18d3      	adds	r3, r2, r3
 8003712:	b29b      	uxth	r3, r3
 8003714:	b219      	sxth	r1, r3
 8003716:	003b      	movs	r3, r7
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	192b      	adds	r3, r5, r4
 800371c:	19db      	adds	r3, r3, r7
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	18db      	adds	r3, r3, r3
 8003722:	b29b      	uxth	r3, r3
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29b      	uxth	r3, r3
 800372c:	b21a      	sxth	r2, r3
 800372e:	192b      	adds	r3, r5, r4
 8003730:	19db      	adds	r3, r3, r7
 8003732:	2400      	movs	r4, #0
 8003734:	5f1c      	ldrsh	r4, [r3, r4]
 8003736:	2308      	movs	r3, #8
 8003738:	18f3      	adds	r3, r6, r3
 800373a:	19db      	adds	r3, r3, r7
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	9200      	str	r2, [sp, #0]
 8003742:	2301      	movs	r3, #1
 8003744:	0022      	movs	r2, r4
 8003746:	f7ff fca0 	bl	800308a <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800374a:	1dbb      	adds	r3, r7, #6
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	002c      	movs	r4, r5
 8003750:	2508      	movs	r5, #8
 8003752:	1963      	adds	r3, r4, r5
 8003754:	19db      	adds	r3, r3, r7
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	18d3      	adds	r3, r2, r3
 800375a:	b29b      	uxth	r3, r3
 800375c:	b218      	sxth	r0, r3
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	1963      	adds	r3, r4, r5
 8003764:	19db      	adds	r3, r3, r7
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	18d3      	adds	r3, r2, r3
 800376a:	b29b      	uxth	r3, r3
 800376c:	b219      	sxth	r1, r3
 800376e:	003b      	movs	r3, r7
 8003770:	881a      	ldrh	r2, [r3, #0]
 8003772:	1963      	adds	r3, r4, r5
 8003774:	19db      	adds	r3, r3, r7
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	18db      	adds	r3, r3, r3
 800377a:	b29b      	uxth	r3, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29b      	uxth	r3, r3
 8003784:	b21a      	sxth	r2, r3
 8003786:	1963      	adds	r3, r4, r5
 8003788:	19db      	adds	r3, r3, r7
 800378a:	2400      	movs	r4, #0
 800378c:	5f1c      	ldrsh	r4, [r3, r4]
 800378e:	1973      	adds	r3, r6, r5
 8003790:	19db      	adds	r3, r3, r7
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	9200      	str	r2, [sp, #0]
 8003798:	2302      	movs	r3, #2
 800379a:	0022      	movs	r2, r4
 800379c:	f7ff fc75 	bl	800308a <fillCircleHelper>
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b005      	add	sp, #20
 80037a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037a8 <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80037a8:	b5b0      	push	{r4, r5, r7, lr}
 80037aa:	b08e      	sub	sp, #56	; 0x38
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	0005      	movs	r5, r0
 80037b0:	000c      	movs	r4, r1
 80037b2:	0010      	movs	r0, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	1dbb      	adds	r3, r7, #6
 80037b8:	1c2a      	adds	r2, r5, #0
 80037ba:	801a      	strh	r2, [r3, #0]
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	1c22      	adds	r2, r4, #0
 80037c0:	801a      	strh	r2, [r3, #0]
 80037c2:	1cbb      	adds	r3, r7, #2
 80037c4:	1c02      	adds	r2, r0, #0
 80037c6:	801a      	strh	r2, [r3, #0]
 80037c8:	003b      	movs	r3, r7
 80037ca:	1c0a      	adds	r2, r1, #0
 80037cc:	801a      	strh	r2, [r3, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80037ce:	1d3a      	adds	r2, r7, #4
 80037d0:	003b      	movs	r3, r7
 80037d2:	2100      	movs	r1, #0
 80037d4:	5e52      	ldrsh	r2, [r2, r1]
 80037d6:	2100      	movs	r1, #0
 80037d8:	5e5b      	ldrsh	r3, [r3, r1]
 80037da:	429a      	cmp	r2, r3
 80037dc:	dd19      	ble.n	8003812 <fillTriangle+0x6a>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80037de:	2126      	movs	r1, #38	; 0x26
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	1d3a      	adds	r2, r7, #4
 80037e4:	8812      	ldrh	r2, [r2, #0]
 80037e6:	801a      	strh	r2, [r3, #0]
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	003a      	movs	r2, r7
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	801a      	strh	r2, [r3, #0]
 80037f0:	003b      	movs	r3, r7
 80037f2:	187a      	adds	r2, r7, r1
 80037f4:	8812      	ldrh	r2, [r2, #0]
 80037f6:	801a      	strh	r2, [r3, #0]
 80037f8:	2124      	movs	r1, #36	; 0x24
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	1dba      	adds	r2, r7, #6
 80037fe:	8812      	ldrh	r2, [r2, #0]
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	1dbb      	adds	r3, r7, #6
 8003804:	1cba      	adds	r2, r7, #2
 8003806:	8812      	ldrh	r2, [r2, #0]
 8003808:	801a      	strh	r2, [r3, #0]
 800380a:	1cbb      	adds	r3, r7, #2
 800380c:	187a      	adds	r2, r7, r1
 800380e:	8812      	ldrh	r2, [r2, #0]
 8003810:	801a      	strh	r2, [r3, #0]
    }
    if (y1 > y2) {
 8003812:	003a      	movs	r2, r7
 8003814:	214c      	movs	r1, #76	; 0x4c
 8003816:	187b      	adds	r3, r7, r1
 8003818:	2000      	movs	r0, #0
 800381a:	5e12      	ldrsh	r2, [r2, r0]
 800381c:	2000      	movs	r0, #0
 800381e:	5e1b      	ldrsh	r3, [r3, r0]
 8003820:	429a      	cmp	r2, r3
 8003822:	dd1a      	ble.n	800385a <fillTriangle+0xb2>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8003824:	2022      	movs	r0, #34	; 0x22
 8003826:	183b      	adds	r3, r7, r0
 8003828:	187a      	adds	r2, r7, r1
 800382a:	8812      	ldrh	r2, [r2, #0]
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	187b      	adds	r3, r7, r1
 8003830:	003a      	movs	r2, r7
 8003832:	8812      	ldrh	r2, [r2, #0]
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	003b      	movs	r3, r7
 8003838:	183a      	adds	r2, r7, r0
 800383a:	8812      	ldrh	r2, [r2, #0]
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	2120      	movs	r1, #32
 8003840:	187a      	adds	r2, r7, r1
 8003842:	2048      	movs	r0, #72	; 0x48
 8003844:	183b      	adds	r3, r7, r0
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	8013      	strh	r3, [r2, #0]
 800384a:	183b      	adds	r3, r7, r0
 800384c:	1cba      	adds	r2, r7, #2
 800384e:	8812      	ldrh	r2, [r2, #0]
 8003850:	801a      	strh	r2, [r3, #0]
 8003852:	1cbb      	adds	r3, r7, #2
 8003854:	187a      	adds	r2, r7, r1
 8003856:	8812      	ldrh	r2, [r2, #0]
 8003858:	801a      	strh	r2, [r3, #0]
    }
    if (y0 > y1) {
 800385a:	1d3a      	adds	r2, r7, #4
 800385c:	003b      	movs	r3, r7
 800385e:	2100      	movs	r1, #0
 8003860:	5e52      	ldrsh	r2, [r2, r1]
 8003862:	2100      	movs	r1, #0
 8003864:	5e5b      	ldrsh	r3, [r3, r1]
 8003866:	429a      	cmp	r2, r3
 8003868:	dd19      	ble.n	800389e <fillTriangle+0xf6>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800386a:	211e      	movs	r1, #30
 800386c:	187b      	adds	r3, r7, r1
 800386e:	1d3a      	adds	r2, r7, #4
 8003870:	8812      	ldrh	r2, [r2, #0]
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	003a      	movs	r2, r7
 8003878:	8812      	ldrh	r2, [r2, #0]
 800387a:	801a      	strh	r2, [r3, #0]
 800387c:	003b      	movs	r3, r7
 800387e:	187a      	adds	r2, r7, r1
 8003880:	8812      	ldrh	r2, [r2, #0]
 8003882:	801a      	strh	r2, [r3, #0]
 8003884:	211c      	movs	r1, #28
 8003886:	187b      	adds	r3, r7, r1
 8003888:	1dba      	adds	r2, r7, #6
 800388a:	8812      	ldrh	r2, [r2, #0]
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	1dbb      	adds	r3, r7, #6
 8003890:	1cba      	adds	r2, r7, #2
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	1cbb      	adds	r3, r7, #2
 8003898:	187a      	adds	r2, r7, r1
 800389a:	8812      	ldrh	r2, [r2, #0]
 800389c:	801a      	strh	r2, [r3, #0]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800389e:	1d3a      	adds	r2, r7, #4
 80038a0:	234c      	movs	r3, #76	; 0x4c
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	2100      	movs	r1, #0
 80038a6:	5e52      	ldrsh	r2, [r2, r1]
 80038a8:	2100      	movs	r1, #0
 80038aa:	5e5b      	ldrsh	r3, [r3, r1]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d158      	bne.n	8003962 <fillTriangle+0x1ba>
        a = b = x0;
 80038b0:	2034      	movs	r0, #52	; 0x34
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	1dba      	adds	r2, r7, #6
 80038b6:	8812      	ldrh	r2, [r2, #0]
 80038b8:	801a      	strh	r2, [r3, #0]
 80038ba:	2136      	movs	r1, #54	; 0x36
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	183a      	adds	r2, r7, r0
 80038c0:	8812      	ldrh	r2, [r2, #0]
 80038c2:	801a      	strh	r2, [r3, #0]
        if(x1 < a)      a = x1;
 80038c4:	1cba      	adds	r2, r7, #2
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	2000      	movs	r0, #0
 80038ca:	5e12      	ldrsh	r2, [r2, r0]
 80038cc:	2000      	movs	r0, #0
 80038ce:	5e1b      	ldrsh	r3, [r3, r0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	da04      	bge.n	80038de <fillTriangle+0x136>
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	1cba      	adds	r2, r7, #2
 80038d8:	8812      	ldrh	r2, [r2, #0]
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	e00c      	b.n	80038f8 <fillTriangle+0x150>
        else if(x1 > b) b = x1;
 80038de:	1cba      	adds	r2, r7, #2
 80038e0:	2134      	movs	r1, #52	; 0x34
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	2000      	movs	r0, #0
 80038e6:	5e12      	ldrsh	r2, [r2, r0]
 80038e8:	2000      	movs	r0, #0
 80038ea:	5e1b      	ldrsh	r3, [r3, r0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	dd03      	ble.n	80038f8 <fillTriangle+0x150>
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	1cba      	adds	r2, r7, #2
 80038f4:	8812      	ldrh	r2, [r2, #0]
 80038f6:	801a      	strh	r2, [r3, #0]
        if(x2 < a)      a = x2;
 80038f8:	2048      	movs	r0, #72	; 0x48
 80038fa:	183b      	adds	r3, r7, r0
 80038fc:	2436      	movs	r4, #54	; 0x36
 80038fe:	1939      	adds	r1, r7, r4
 8003900:	2200      	movs	r2, #0
 8003902:	5e9a      	ldrsh	r2, [r3, r2]
 8003904:	2300      	movs	r3, #0
 8003906:	5ecb      	ldrsh	r3, [r1, r3]
 8003908:	429a      	cmp	r2, r3
 800390a:	da04      	bge.n	8003916 <fillTriangle+0x16e>
 800390c:	193a      	adds	r2, r7, r4
 800390e:	183b      	adds	r3, r7, r0
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	8013      	strh	r3, [r2, #0]
 8003914:	e00d      	b.n	8003932 <fillTriangle+0x18a>
        else if(x2 > b) b = x2;
 8003916:	2048      	movs	r0, #72	; 0x48
 8003918:	183b      	adds	r3, r7, r0
 800391a:	2434      	movs	r4, #52	; 0x34
 800391c:	1939      	adds	r1, r7, r4
 800391e:	2200      	movs	r2, #0
 8003920:	5e9a      	ldrsh	r2, [r3, r2]
 8003922:	2300      	movs	r3, #0
 8003924:	5ecb      	ldrsh	r3, [r1, r3]
 8003926:	429a      	cmp	r2, r3
 8003928:	dd03      	ble.n	8003932 <fillTriangle+0x18a>
 800392a:	193a      	adds	r2, r7, r4
 800392c:	183b      	adds	r3, r7, r0
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	8013      	strh	r3, [r2, #0]
        drawFastHLine(a, y0, b-a+1, color);
 8003932:	2334      	movs	r3, #52	; 0x34
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	881a      	ldrh	r2, [r3, #0]
 8003938:	2036      	movs	r0, #54	; 0x36
 800393a:	183b      	adds	r3, r7, r0
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	b29b      	uxth	r3, r3
 8003942:	3301      	adds	r3, #1
 8003944:	b29b      	uxth	r3, r3
 8003946:	b21a      	sxth	r2, r3
 8003948:	2350      	movs	r3, #80	; 0x50
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	881c      	ldrh	r4, [r3, #0]
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	2100      	movs	r1, #0
 8003952:	5e59      	ldrsh	r1, [r3, r1]
 8003954:	183b      	adds	r3, r7, r0
 8003956:	2000      	movs	r0, #0
 8003958:	5e18      	ldrsh	r0, [r3, r0]
 800395a:	0023      	movs	r3, r4
 800395c:	f7ff f994 	bl	8002c88 <drawFastHLine>
        return;
 8003960:	e151      	b.n	8003c06 <fillTriangle+0x45e>
    }

    int16_t
    dx01 = x1 - x0,
 8003962:	1cbb      	adds	r3, r7, #2
 8003964:	881a      	ldrh	r2, [r3, #0]
 8003966:	1dbb      	adds	r3, r7, #6
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	b29a      	uxth	r2, r3
 800396e:	231a      	movs	r3, #26
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	801a      	strh	r2, [r3, #0]
    dy01 = y1 - y0,
 8003974:	003b      	movs	r3, r7
 8003976:	881a      	ldrh	r2, [r3, #0]
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	b29a      	uxth	r2, r3
 8003980:	2318      	movs	r3, #24
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	801a      	strh	r2, [r3, #0]
    dx02 = x2 - x0,
 8003986:	2048      	movs	r0, #72	; 0x48
 8003988:	183b      	adds	r3, r7, r0
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	1dbb      	adds	r3, r7, #6
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	b29a      	uxth	r2, r3
 8003994:	2316      	movs	r3, #22
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	801a      	strh	r2, [r3, #0]
    dy02 = y2 - y0,
 800399a:	214c      	movs	r1, #76	; 0x4c
 800399c:	187b      	adds	r3, r7, r1
 800399e:	881a      	ldrh	r2, [r3, #0]
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	2314      	movs	r3, #20
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	801a      	strh	r2, [r3, #0]
    dx12 = x2 - x1,
 80039ae:	183b      	adds	r3, r7, r0
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	1cbb      	adds	r3, r7, #2
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	2312      	movs	r3, #18
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	801a      	strh	r2, [r3, #0]
    dy12 = y2 - y1;
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	881a      	ldrh	r2, [r3, #0]
 80039c4:	003b      	movs	r3, r7
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	2310      	movs	r3, #16
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	801a      	strh	r2, [r3, #0]
    int32_t
    sa   = 0,
 80039d2:	2300      	movs	r3, #0
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80039da:	003a      	movs	r2, r7
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	2100      	movs	r1, #0
 80039e0:	5e52      	ldrsh	r2, [r2, r1]
 80039e2:	2100      	movs	r1, #0
 80039e4:	5e5b      	ldrsh	r3, [r3, r1]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d105      	bne.n	80039f6 <fillTriangle+0x24e>
 80039ea:	2330      	movs	r3, #48	; 0x30
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	003a      	movs	r2, r7
 80039f0:	8812      	ldrh	r2, [r2, #0]
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	e006      	b.n	8003a04 <fillTriangle+0x25c>
    else         last = y1-1; // Skip it
 80039f6:	003b      	movs	r3, r7
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	2330      	movs	r3, #48	; 0x30
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	801a      	strh	r2, [r3, #0]

    for(y=y0; y<=last; y++) {
 8003a04:	2332      	movs	r3, #50	; 0x32
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	1d3a      	adds	r2, r7, #4
 8003a0a:	8812      	ldrh	r2, [r2, #0]
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	e065      	b.n	8003adc <fillTriangle+0x334>
        a   = x0 + sa / dy01;
 8003a10:	2318      	movs	r3, #24
 8003a12:	18fb      	adds	r3, r7, r3
 8003a14:	2200      	movs	r2, #0
 8003a16:	5e9b      	ldrsh	r3, [r3, r2]
 8003a18:	0019      	movs	r1, r3
 8003a1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a1c:	f7fc fbfc 	bl	8000218 <__divsi3>
 8003a20:	0003      	movs	r3, r0
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	1dbb      	adds	r3, r7, #6
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	18d3      	adds	r3, r2, r3
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	2436      	movs	r4, #54	; 0x36
 8003a2e:	193b      	adds	r3, r7, r4
 8003a30:	801a      	strh	r2, [r3, #0]
        b   = x0 + sb / dy02;
 8003a32:	2314      	movs	r3, #20
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	2200      	movs	r2, #0
 8003a38:	5e9b      	ldrsh	r3, [r3, r2]
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a3e:	f7fc fbeb 	bl	8000218 <__divsi3>
 8003a42:	0003      	movs	r3, r0
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	1dbb      	adds	r3, r7, #6
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	18d3      	adds	r3, r2, r3
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	2134      	movs	r1, #52	; 0x34
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	801a      	strh	r2, [r3, #0]
        sa += dx01;
 8003a54:	231a      	movs	r3, #26
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	2200      	movs	r2, #0
 8003a5a:	5e9b      	ldrsh	r3, [r3, r2]
 8003a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a5e:	18d3      	adds	r3, r2, r3
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003a62:	2316      	movs	r3, #22
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	2200      	movs	r2, #0
 8003a68:	5e9b      	ldrsh	r3, [r3, r2]
 8003a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6c:	18d3      	adds	r3, r2, r3
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003a70:	193a      	adds	r2, r7, r4
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2000      	movs	r0, #0
 8003a76:	5e12      	ldrsh	r2, [r2, r0]
 8003a78:	2000      	movs	r0, #0
 8003a7a:	5e1b      	ldrsh	r3, [r3, r0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dd0c      	ble.n	8003a9a <fillTriangle+0x2f2>
 8003a80:	200c      	movs	r0, #12
 8003a82:	183b      	adds	r3, r7, r0
 8003a84:	193a      	adds	r2, r7, r4
 8003a86:	8812      	ldrh	r2, [r2, #0]
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	193b      	adds	r3, r7, r4
 8003a8c:	187a      	adds	r2, r7, r1
 8003a8e:	8812      	ldrh	r2, [r2, #0]
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	183a      	adds	r2, r7, r0
 8003a96:	8812      	ldrh	r2, [r2, #0]
 8003a98:	801a      	strh	r2, [r3, #0]
        drawFastHLine(a, y, b-a+1, color);
 8003a9a:	2334      	movs	r3, #52	; 0x34
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	881a      	ldrh	r2, [r3, #0]
 8003aa0:	2036      	movs	r0, #54	; 0x36
 8003aa2:	183b      	adds	r3, r7, r0
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b21a      	sxth	r2, r3
 8003ab0:	2350      	movs	r3, #80	; 0x50
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	881c      	ldrh	r4, [r3, #0]
 8003ab6:	2532      	movs	r5, #50	; 0x32
 8003ab8:	197b      	adds	r3, r7, r5
 8003aba:	2100      	movs	r1, #0
 8003abc:	5e59      	ldrsh	r1, [r3, r1]
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	5e18      	ldrsh	r0, [r3, r0]
 8003ac4:	0023      	movs	r3, r4
 8003ac6:	f7ff f8df 	bl	8002c88 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8003aca:	0029      	movs	r1, r5
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	2200      	movs	r2, #0
 8003ad0:	5e9b      	ldrsh	r3, [r3, r2]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	2032      	movs	r0, #50	; 0x32
 8003ade:	183a      	adds	r2, r7, r0
 8003ae0:	2330      	movs	r3, #48	; 0x30
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5e52      	ldrsh	r2, [r2, r1]
 8003ae8:	2100      	movs	r1, #0
 8003aea:	5e5b      	ldrsh	r3, [r3, r1]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dd8f      	ble.n	8003a10 <fillTriangle+0x268>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8003af0:	2312      	movs	r3, #18
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	2200      	movs	r2, #0
 8003af6:	5e9b      	ldrsh	r3, [r3, r2]
 8003af8:	183a      	adds	r2, r7, r0
 8003afa:	2100      	movs	r1, #0
 8003afc:	5e51      	ldrsh	r1, [r2, r1]
 8003afe:	003a      	movs	r2, r7
 8003b00:	2400      	movs	r4, #0
 8003b02:	5f12      	ldrsh	r2, [r2, r4]
 8003b04:	1a8a      	subs	r2, r1, r2
 8003b06:	4353      	muls	r3, r2
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8003b0a:	2316      	movs	r3, #22
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2200      	movs	r2, #0
 8003b10:	5e9b      	ldrsh	r3, [r3, r2]
 8003b12:	183a      	adds	r2, r7, r0
 8003b14:	2100      	movs	r1, #0
 8003b16:	5e51      	ldrsh	r1, [r2, r1]
 8003b18:	1d3a      	adds	r2, r7, #4
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	5e12      	ldrsh	r2, [r2, r0]
 8003b1e:	1a8a      	subs	r2, r1, r2
 8003b20:	4353      	muls	r3, r2
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8003b24:	e065      	b.n	8003bf2 <fillTriangle+0x44a>
        a   = x1 + sa / dy12;
 8003b26:	2310      	movs	r3, #16
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	5e9b      	ldrsh	r3, [r3, r2]
 8003b2e:	0019      	movs	r1, r3
 8003b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b32:	f7fc fb71 	bl	8000218 <__divsi3>
 8003b36:	0003      	movs	r3, r0
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	1cbb      	adds	r3, r7, #2
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	18d3      	adds	r3, r2, r3
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	2436      	movs	r4, #54	; 0x36
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	801a      	strh	r2, [r3, #0]
        b   = x0 + sb / dy02;
 8003b48:	2314      	movs	r3, #20
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	5e9b      	ldrsh	r3, [r3, r2]
 8003b50:	0019      	movs	r1, r3
 8003b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b54:	f7fc fb60 	bl	8000218 <__divsi3>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	1dbb      	adds	r3, r7, #6
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	18d3      	adds	r3, r2, r3
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	2134      	movs	r1, #52	; 0x34
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	801a      	strh	r2, [r3, #0]
        sa += dx12;
 8003b6a:	2312      	movs	r3, #18
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	2200      	movs	r2, #0
 8003b70:	5e9b      	ldrsh	r3, [r3, r2]
 8003b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b74:	18d3      	adds	r3, r2, r3
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003b78:	2316      	movs	r3, #22
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	5e9b      	ldrsh	r3, [r3, r2]
 8003b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b82:	18d3      	adds	r3, r2, r3
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003b86:	193a      	adds	r2, r7, r4
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	5e12      	ldrsh	r2, [r2, r0]
 8003b8e:	2000      	movs	r0, #0
 8003b90:	5e1b      	ldrsh	r3, [r3, r0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	dd0c      	ble.n	8003bb0 <fillTriangle+0x408>
 8003b96:	200e      	movs	r0, #14
 8003b98:	183b      	adds	r3, r7, r0
 8003b9a:	193a      	adds	r2, r7, r4
 8003b9c:	8812      	ldrh	r2, [r2, #0]
 8003b9e:	801a      	strh	r2, [r3, #0]
 8003ba0:	193b      	adds	r3, r7, r4
 8003ba2:	187a      	adds	r2, r7, r1
 8003ba4:	8812      	ldrh	r2, [r2, #0]
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	183a      	adds	r2, r7, r0
 8003bac:	8812      	ldrh	r2, [r2, #0]
 8003bae:	801a      	strh	r2, [r3, #0]
        drawFastHLine(a, y, b-a+1, color);
 8003bb0:	2334      	movs	r3, #52	; 0x34
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	2036      	movs	r0, #54	; 0x36
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	b21a      	sxth	r2, r3
 8003bc6:	2350      	movs	r3, #80	; 0x50
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	881c      	ldrh	r4, [r3, #0]
 8003bcc:	2532      	movs	r5, #50	; 0x32
 8003bce:	197b      	adds	r3, r7, r5
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5e59      	ldrsh	r1, [r3, r1]
 8003bd4:	183b      	adds	r3, r7, r0
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	5e18      	ldrsh	r0, [r3, r0]
 8003bda:	0023      	movs	r3, r4
 8003bdc:	f7ff f854 	bl	8002c88 <drawFastHLine>
    for(; y<=y2; y++) {
 8003be0:	0029      	movs	r1, r5
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	2200      	movs	r2, #0
 8003be6:	5e9b      	ldrsh	r3, [r3, r2]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	2332      	movs	r3, #50	; 0x32
 8003bf4:	18fa      	adds	r2, r7, r3
 8003bf6:	234c      	movs	r3, #76	; 0x4c
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5e52      	ldrsh	r2, [r2, r1]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5e5b      	ldrsh	r3, [r3, r1]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	dd8f      	ble.n	8003b26 <fillTriangle+0x37e>
    }
}
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b00e      	add	sp, #56	; 0x38
 8003c0a:	bdb0      	pop	{r4, r5, r7, pc}

08003c0c <fillScreen>:

void fillScreen(uint16_t color) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	0002      	movs	r2, r0
 8003c14:	1dbb      	adds	r3, r7, #6
 8003c16:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <fillScreen+0x30>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	5e9a      	ldrsh	r2, [r3, r2]
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <fillScreen+0x34>)
 8003c20:	2100      	movs	r1, #0
 8003c22:	5e59      	ldrsh	r1, [r3, r1]
 8003c24:	1dbb      	adds	r3, r7, #6
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	000b      	movs	r3, r1
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2000      	movs	r0, #0
 8003c30:	f7fe febe 	bl	80029b0 <fillRect>
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	20000068 	.word	0x20000068
 8003c40:	2000006a 	.word	0x2000006a

08003c44 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4803      	ldr	r0, [pc, #12]	; (8003c5c <ST7735_Select+0x18>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	0019      	movs	r1, r3
 8003c52:	f003 f9ec 	bl	800702e <HAL_GPIO_WritePin>
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	48000400 	.word	0x48000400

08003c60 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4803      	ldr	r0, [pc, #12]	; (8003c78 <ST7735_Unselect+0x18>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	f003 f9de 	bl	800702e <HAL_GPIO_WritePin>
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	48000400 	.word	0x48000400

08003c7c <ST7735_Reset>:

void ST7735_Reset()
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8003c80:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <ST7735_Reset+0x28>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	2104      	movs	r1, #4
 8003c86:	0018      	movs	r0, r3
 8003c88:	f003 f9d1 	bl	800702e <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003c8c:	2005      	movs	r0, #5
 8003c8e:	f002 fc4f 	bl	8006530 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8003c92:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <ST7735_Reset+0x28>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	2104      	movs	r1, #4
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f003 f9c8 	bl	800702e <HAL_GPIO_WritePin>
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	48000400 	.word	0x48000400

08003ca8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	0002      	movs	r2, r0
 8003cb0:	1dfb      	adds	r3, r7, #7
 8003cb2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_RESET);
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <ST7735_WriteCommand+0x30>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2102      	movs	r1, #2
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f003 f9b7 	bl	800702e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	425b      	negs	r3, r3
 8003cc4:	1df9      	adds	r1, r7, #7
 8003cc6:	4805      	ldr	r0, [pc, #20]	; (8003cdc <ST7735_WriteCommand+0x34>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f003 fec9 	bl	8007a60 <HAL_SPI_Transmit>
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	48000400 	.word	0x48000400
 8003cdc:	200000d8 	.word	0x200000d8

08003ce0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <ST7735_WriteData+0x30>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	2102      	movs	r1, #2
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f003 f99c 	bl	800702e <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	425b      	negs	r3, r3
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4804      	ldr	r0, [pc, #16]	; (8003d14 <ST7735_WriteData+0x34>)
 8003d02:	f003 fead 	bl	8007a60 <HAL_SPI_Transmit>
}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	48000400 	.word	0x48000400
 8003d14:	200000d8 	.word	0x200000d8

08003d18 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	220f      	movs	r2, #15
 8003d28:	18ba      	adds	r2, r7, r2
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8003d2e:	e04a      	b.n	8003dc6 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	210b      	movs	r1, #11
 8003d38:	187a      	adds	r2, r7, r1
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7ff ffb0 	bl	8003ca8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	200a      	movs	r0, #10
 8003d50:	183a      	adds	r2, r7, r0
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003d56:	183b      	adds	r3, r7, r0
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	230c      	movs	r3, #12
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	400a      	ands	r2, r1
 8003d64:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8003d66:	183b      	adds	r3, r7, r0
 8003d68:	183a      	adds	r2, r7, r0
 8003d6a:	7812      	ldrb	r2, [r2, #0]
 8003d6c:	217f      	movs	r1, #127	; 0x7f
 8003d6e:	400a      	ands	r2, r1
 8003d70:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8003d72:	183b      	adds	r3, r7, r0
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003d7a:	0004      	movs	r4, r0
 8003d7c:	183b      	adds	r3, r7, r0
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	0011      	movs	r1, r2
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff ffab 	bl	8003ce0 <ST7735_WriteData>
            addr += numArgs;
 8003d8a:	193b      	adds	r3, r7, r4
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	18d3      	adds	r3, r2, r3
 8003d92:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003d94:	210c      	movs	r1, #12
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d013      	beq.n	8003dc6 <DisplayInit+0xae>
            ms = *addr++;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	781a      	ldrb	r2, [r3, #0]
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	2bff      	cmp	r3, #255	; 0xff
 8003db0:	d103      	bne.n	8003dba <DisplayInit+0xa2>
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	22fa      	movs	r2, #250	; 0xfa
 8003db6:	0052      	lsls	r2, r2, #1
 8003db8:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8003dba:	230c      	movs	r3, #12
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f002 fbb5 	bl	8006530 <HAL_Delay>
    while(numCommands--) {
 8003dc6:	220f      	movs	r2, #15
 8003dc8:	18bb      	adds	r3, r7, r2
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	18ba      	adds	r2, r7, r2
 8003dce:	1e59      	subs	r1, r3, #1
 8003dd0:	7011      	strb	r1, [r2, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1ac      	bne.n	8003d30 <DisplayInit+0x18>
        }
    }
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46c0      	nop			; (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b005      	add	sp, #20
 8003dde:	bd90      	pop	{r4, r7, pc}

08003de0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003de0:	b5b0      	push	{r4, r5, r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	0005      	movs	r5, r0
 8003de8:	000c      	movs	r4, r1
 8003dea:	0010      	movs	r0, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	1dfb      	adds	r3, r7, #7
 8003df0:	1c2a      	adds	r2, r5, #0
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	1dbb      	adds	r3, r7, #6
 8003df6:	1c22      	adds	r2, r4, #0
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	1d7b      	adds	r3, r7, #5
 8003dfc:	1c02      	adds	r2, r0, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	1c0a      	adds	r2, r1, #0
 8003e04:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003e06:	202a      	movs	r0, #42	; 0x2a
 8003e08:	f7ff ff4e 	bl	8003ca8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8003e0c:	210c      	movs	r1, #12
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <ST7735_SetAddressWindow+0xa8>)
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	18d3      	adds	r3, r2, r3
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	705a      	strb	r2, [r3, #1]
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	2200      	movs	r2, #0
 8003e28:	709a      	strb	r2, [r3, #2]
 8003e2a:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <ST7735_SetAddressWindow+0xa8>)
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	1d7b      	adds	r3, r7, #5
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	187b      	adds	r3, r7, r1
 8003e38:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003e3a:	000c      	movs	r4, r1
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	2104      	movs	r1, #4
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff ff4d 	bl	8003ce0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003e46:	202b      	movs	r0, #43	; 0x2b
 8003e48:	f7ff ff2e 	bl	8003ca8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <ST7735_SetAddressWindow+0xac>)
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	1dbb      	adds	r3, r7, #6
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	18d3      	adds	r3, r2, r3
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	0021      	movs	r1, r4
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <ST7735_SetAddressWindow+0xac>)
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	18d3      	adds	r3, r2, r3
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2104      	movs	r1, #4
 8003e72:	0018      	movs	r0, r3
 8003e74:	f7ff ff34 	bl	8003ce0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003e78:	202c      	movs	r0, #44	; 0x2c
 8003e7a:	f7ff ff15 	bl	8003ca8 <ST7735_WriteCommand>
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b004      	add	sp, #16
 8003e84:	bdb0      	pop	{r4, r5, r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	2000006f 	.word	0x2000006f
 8003e8c:	20000070 	.word	0x20000070

08003e90 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	0002      	movs	r2, r0
 8003e98:	1dfb      	adds	r3, r7, #7
 8003e9a:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8003e9c:	f7ff fed2 	bl	8003c44 <ST7735_Select>
    ST7735_Reset();
 8003ea0:	f7ff feec 	bl	8003c7c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <ST7735_Init+0x50>)
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7ff ff36 	bl	8003d18 <DisplayInit>
    DisplayInit(init_cmds2);
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <ST7735_Init+0x54>)
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7ff ff32 	bl	8003d18 <DisplayInit>
    DisplayInit(init_cmds3);
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <ST7735_Init+0x58>)
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7ff ff2e 	bl	8003d18 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <ST7735_Init+0x5c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <ST7735_Init+0x60>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8003ec8:	1dfb      	adds	r3, r7, #7
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 f811 	bl	8003ef4 <ST7735_SetRotation>
    ST7735_Unselect();
 8003ed2:	f7ff fec5 	bl	8003c60 <ST7735_Unselect>

}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b002      	add	sp, #8
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	08008264 	.word	0x08008264
 8003ee4:	0800829c 	.word	0x0800829c
 8003ee8:	080082ac 	.word	0x080082ac
 8003eec:	2000006d 	.word	0x2000006d
 8003ef0:	2000006e 	.word	0x2000006e

08003ef4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	0002      	movs	r2, r0
 8003efc:	1dfb      	adds	r3, r7, #7
 8003efe:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8003f00:	230f      	movs	r3, #15
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8003f08:	1dfb      	adds	r3, r7, #7
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	4013      	ands	r3, r2
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <ST7735_SetRotation+0xf8>)
 8003f14:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8003f16:	4b35      	ldr	r3, [pc, #212]	; (8003fec <ST7735_SetRotation+0xf8>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d041      	beq.n	8003fa2 <ST7735_SetRotation+0xae>
 8003f1e:	dc53      	bgt.n	8003fc8 <ST7735_SetRotation+0xd4>
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d02b      	beq.n	8003f7c <ST7735_SetRotation+0x88>
 8003f24:	dc50      	bgt.n	8003fc8 <ST7735_SetRotation+0xd4>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <ST7735_SetRotation+0x3c>
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d013      	beq.n	8003f56 <ST7735_SetRotation+0x62>
 8003f2e:	e04b      	b.n	8003fc8 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8003f30:	230f      	movs	r3, #15
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	22c0      	movs	r2, #192	; 0xc0
 8003f36:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003f38:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <ST7735_SetRotation+0xfc>)
 8003f3a:	22a0      	movs	r2, #160	; 0xa0
 8003f3c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <ST7735_SetRotation+0x100>)
 8003f40:	2280      	movs	r2, #128	; 0x80
 8003f42:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8003f44:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <ST7735_SetRotation+0x104>)
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <ST7735_SetRotation+0x108>)
 8003f4a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8003f4c:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <ST7735_SetRotation+0x10c>)
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <ST7735_SetRotation+0x110>)
 8003f52:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003f54:	e038      	b.n	8003fc8 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003f56:	230f      	movs	r3, #15
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	22a0      	movs	r2, #160	; 0xa0
 8003f5c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003f5e:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <ST7735_SetRotation+0x100>)
 8003f60:	22a0      	movs	r2, #160	; 0xa0
 8003f62:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003f64:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <ST7735_SetRotation+0xfc>)
 8003f66:	2280      	movs	r2, #128	; 0x80
 8003f68:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <ST7735_SetRotation+0x104>)
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <ST7735_SetRotation+0x110>)
 8003f70:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003f72:	4b23      	ldr	r3, [pc, #140]	; (8004000 <ST7735_SetRotation+0x10c>)
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <ST7735_SetRotation+0x108>)
 8003f78:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003f7a:	e025      	b.n	8003fc8 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8003f7c:	230f      	movs	r3, #15
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <ST7735_SetRotation+0xfc>)
 8003f86:	22a0      	movs	r2, #160	; 0xa0
 8003f88:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <ST7735_SetRotation+0x100>)
 8003f8c:	2280      	movs	r2, #128	; 0x80
 8003f8e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <ST7735_SetRotation+0x104>)
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <ST7735_SetRotation+0x108>)
 8003f96:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <ST7735_SetRotation+0x10c>)
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <ST7735_SetRotation+0x110>)
 8003f9e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003fa0:	e012      	b.n	8003fc8 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003fa2:	230f      	movs	r3, #15
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2260      	movs	r2, #96	; 0x60
 8003fa8:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <ST7735_SetRotation+0x100>)
 8003fac:	22a0      	movs	r2, #160	; 0xa0
 8003fae:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <ST7735_SetRotation+0xfc>)
 8003fb2:	2280      	movs	r2, #128	; 0x80
 8003fb4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <ST7735_SetRotation+0x104>)
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <ST7735_SetRotation+0x110>)
 8003fbc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003fbe:	4b10      	ldr	r3, [pc, #64]	; (8004000 <ST7735_SetRotation+0x10c>)
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <ST7735_SetRotation+0x108>)
 8003fc4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003fc6:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 8003fc8:	f7ff fe3c 	bl	8003c44 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8003fcc:	2036      	movs	r0, #54	; 0x36
 8003fce:	f7ff fe6b 	bl	8003ca8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8003fd2:	230f      	movs	r3, #15
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fe81 	bl	8003ce0 <ST7735_WriteData>
  ST7735_Unselect();
 8003fde:	f7ff fe3f 	bl	8003c60 <ST7735_Unselect>
}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b004      	add	sp, #16
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	2000006c 	.word	0x2000006c
 8003ff0:	2000006a 	.word	0x2000006a
 8003ff4:	20000068 	.word	0x20000068
 8003ff8:	2000006d 	.word	0x2000006d
 8003ffc:	2000006f 	.word	0x2000006f
 8004000:	2000006e 	.word	0x2000006e
 8004004:	20000070 	.word	0x20000070

08004008 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	0004      	movs	r4, r0
 8004010:	0008      	movs	r0, r1
 8004012:	0011      	movs	r1, r2
 8004014:	1dbb      	adds	r3, r7, #6
 8004016:	1c22      	adds	r2, r4, #0
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	1c02      	adds	r2, r0, #0
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	1cbb      	adds	r3, r7, #2
 8004022:	1c0a      	adds	r2, r1, #0
 8004024:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8004026:	1dbb      	adds	r3, r7, #6
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	4a1c      	ldr	r2, [pc, #112]	; (800409c <ST7735_DrawPixel+0x94>)
 800402c:	2100      	movs	r1, #0
 800402e:	5e52      	ldrsh	r2, [r2, r1]
 8004030:	4293      	cmp	r3, r2
 8004032:	da2f      	bge.n	8004094 <ST7735_DrawPixel+0x8c>
 8004034:	1d3b      	adds	r3, r7, #4
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <ST7735_DrawPixel+0x98>)
 800403a:	2100      	movs	r1, #0
 800403c:	5e52      	ldrsh	r2, [r2, r1]
 800403e:	4293      	cmp	r3, r2
 8004040:	da28      	bge.n	8004094 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8004042:	f7ff fdff 	bl	8003c44 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8004046:	1dbb      	adds	r3, r7, #6
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b2d8      	uxtb	r0, r3
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b2d9      	uxtb	r1, r3
 8004052:	1dbb      	adds	r3, r7, #6
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	3301      	adds	r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	3301      	adds	r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f7ff febb 	bl	8003de0 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800406a:	1cbb      	adds	r3, r7, #2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	b29b      	uxth	r3, r3
 8004072:	b2da      	uxtb	r2, r3
 8004074:	210c      	movs	r1, #12
 8004076:	187b      	adds	r3, r7, r1
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	1cbb      	adds	r3, r7, #2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	187b      	adds	r3, r7, r1
 8004082:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8004084:	187b      	adds	r3, r7, r1
 8004086:	2102      	movs	r1, #2
 8004088:	0018      	movs	r0, r3
 800408a:	f7ff fe29 	bl	8003ce0 <ST7735_WriteData>

    ST7735_Unselect();
 800408e:	f7ff fde7 	bl	8003c60 <ST7735_Unselect>
 8004092:	e000      	b.n	8004096 <ST7735_DrawPixel+0x8e>
        return;
 8004094:	46c0      	nop			; (mov r8, r8)
}
 8004096:	46bd      	mov	sp, r7
 8004098:	b005      	add	sp, #20
 800409a:	bd90      	pop	{r4, r7, pc}
 800409c:	20000068 	.word	0x20000068
 80040a0:	2000006a 	.word	0x2000006a

080040a4 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80040a4:	b082      	sub	sp, #8
 80040a6:	b5b0      	push	{r4, r5, r7, lr}
 80040a8:	b088      	sub	sp, #32
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	0004      	movs	r4, r0
 80040ae:	0008      	movs	r0, r1
 80040b0:	0011      	movs	r1, r2
 80040b2:	2204      	movs	r2, #4
 80040b4:	2530      	movs	r5, #48	; 0x30
 80040b6:	1952      	adds	r2, r2, r5
 80040b8:	19d2      	adds	r2, r2, r7
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	1dbb      	adds	r3, r7, #6
 80040be:	1c22      	adds	r2, r4, #0
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	1c02      	adds	r2, r0, #0
 80040c6:	801a      	strh	r2, [r3, #0]
 80040c8:	1cfb      	adds	r3, r7, #3
 80040ca:	1c0a      	adds	r2, r1, #0
 80040cc:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80040ce:	1dbb      	adds	r3, r7, #6
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b2d8      	uxtb	r0, r3
 80040d4:	1d3b      	adds	r3, r7, #4
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b2d9      	uxtb	r1, r3
 80040da:	1dbb      	adds	r3, r7, #6
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	2304      	movs	r3, #4
 80040e2:	195b      	adds	r3, r3, r5
 80040e4:	19db      	adds	r3, r3, r7
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	18d3      	adds	r3, r2, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b2dc      	uxtb	r4, r3
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	2304      	movs	r3, #4
 80040f8:	195b      	adds	r3, r3, r5
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	18d3      	adds	r3, r2, r3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	0022      	movs	r2, r4
 8004108:	f7ff fe6a 	bl	8003de0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e053      	b.n	80041ba <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 8004112:	2304      	movs	r3, #4
 8004114:	2030      	movs	r0, #48	; 0x30
 8004116:	181b      	adds	r3, r3, r0
 8004118:	19db      	adds	r3, r3, r7
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	1cfb      	adds	r3, r7, #3
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	3b20      	subs	r3, #32
 8004122:	2104      	movs	r1, #4
 8004124:	1809      	adds	r1, r1, r0
 8004126:	19c9      	adds	r1, r1, r7
 8004128:	7849      	ldrb	r1, [r1, #1]
 800412a:	434b      	muls	r3, r1
 800412c:	0019      	movs	r1, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	18cb      	adds	r3, r1, r3
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	18d3      	adds	r3, r2, r3
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800413a:	2300      	movs	r3, #0
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e030      	b.n	80041a2 <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	409a      	lsls	r2, r3
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	4013      	ands	r3, r2
 800414c:	d013      	beq.n	8004176 <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800414e:	203c      	movs	r0, #60	; 0x3c
 8004150:	183b      	adds	r3, r7, r0
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	b29b      	uxth	r3, r3
 8004158:	b2da      	uxtb	r2, r3
 800415a:	2110      	movs	r1, #16
 800415c:	187b      	adds	r3, r7, r1
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	183b      	adds	r3, r7, r0
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	187b      	adds	r3, r7, r1
 8004168:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 800416a:	187b      	adds	r3, r7, r1
 800416c:	2102      	movs	r1, #2
 800416e:	0018      	movs	r0, r3
 8004170:	f7ff fdb6 	bl	8003ce0 <ST7735_WriteData>
 8004174:	e012      	b.n	800419c <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8004176:	2040      	movs	r0, #64	; 0x40
 8004178:	183b      	adds	r3, r7, r0
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	0a1b      	lsrs	r3, r3, #8
 800417e:	b29b      	uxth	r3, r3
 8004180:	b2da      	uxtb	r2, r3
 8004182:	210c      	movs	r1, #12
 8004184:	187b      	adds	r3, r7, r1
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	183b      	adds	r3, r7, r0
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	187b      	adds	r3, r7, r1
 8004190:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8004192:	187b      	adds	r3, r7, r1
 8004194:	2102      	movs	r1, #2
 8004196:	0018      	movs	r0, r3
 8004198:	f7ff fda2 	bl	8003ce0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	3301      	adds	r3, #1
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	2304      	movs	r3, #4
 80041a4:	2230      	movs	r2, #48	; 0x30
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	19db      	adds	r3, r3, r7
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	001a      	movs	r2, r3
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d3c5      	bcc.n	8004140 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	2304      	movs	r3, #4
 80041bc:	2230      	movs	r2, #48	; 0x30
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	19db      	adds	r3, r3, r7
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	001a      	movs	r2, r3
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d3a2      	bcc.n	8004112 <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b008      	add	sp, #32
 80041d4:	bcb0      	pop	{r4, r5, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	b002      	add	sp, #8
 80041da:	4718      	bx	r3

080041dc <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80041dc:	b082      	sub	sp, #8
 80041de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e0:	b087      	sub	sp, #28
 80041e2:	af04      	add	r7, sp, #16
 80041e4:	603a      	str	r2, [r7, #0]
 80041e6:	2204      	movs	r2, #4
 80041e8:	2418      	movs	r4, #24
 80041ea:	1912      	adds	r2, r2, r4
 80041ec:	2408      	movs	r4, #8
 80041ee:	46a4      	mov	ip, r4
 80041f0:	44bc      	add	ip, r7
 80041f2:	4462      	add	r2, ip
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	1dbb      	adds	r3, r7, #6
 80041f8:	1c02      	adds	r2, r0, #0
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	1c0a      	adds	r2, r1, #0
 8004200:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 8004202:	f7ff fd1f 	bl	8003c44 <ST7735_Select>

    while(*str) {
 8004206:	e067      	b.n	80042d8 <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 8004208:	1dbb      	adds	r3, r7, #6
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	2204      	movs	r2, #4
 800420e:	2118      	movs	r1, #24
 8004210:	1852      	adds	r2, r2, r1
 8004212:	2008      	movs	r0, #8
 8004214:	4684      	mov	ip, r0
 8004216:	44bc      	add	ip, r7
 8004218:	4462      	add	r2, ip
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	189b      	adds	r3, r3, r2
 800421e:	4a36      	ldr	r2, [pc, #216]	; (80042f8 <ST7735_WriteString+0x11c>)
 8004220:	2000      	movs	r0, #0
 8004222:	5e12      	ldrsh	r2, [r2, r0]
 8004224:	4293      	cmp	r3, r2
 8004226:	db27      	blt.n	8004278 <ST7735_WriteString+0x9c>
            x = 0;
 8004228:	1dbb      	adds	r3, r7, #6
 800422a:	2200      	movs	r2, #0
 800422c:	801a      	strh	r2, [r3, #0]
            y += font.height;
 800422e:	2304      	movs	r3, #4
 8004230:	0008      	movs	r0, r1
 8004232:	185b      	adds	r3, r3, r1
 8004234:	2208      	movs	r2, #8
 8004236:	4694      	mov	ip, r2
 8004238:	44bc      	add	ip, r7
 800423a:	4463      	add	r3, ip
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	b299      	uxth	r1, r3
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	1d3a      	adds	r2, r7, #4
 8004244:	8812      	ldrh	r2, [r2, #0]
 8004246:	188a      	adds	r2, r1, r2
 8004248:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	2204      	movs	r2, #4
 8004250:	1812      	adds	r2, r2, r0
 8004252:	2108      	movs	r1, #8
 8004254:	468c      	mov	ip, r1
 8004256:	44bc      	add	ip, r7
 8004258:	4462      	add	r2, ip
 800425a:	7852      	ldrb	r2, [r2, #1]
 800425c:	189b      	adds	r3, r3, r2
 800425e:	4a27      	ldr	r2, [pc, #156]	; (80042fc <ST7735_WriteString+0x120>)
 8004260:	2100      	movs	r1, #0
 8004262:	5e52      	ldrsh	r2, [r2, r1]
 8004264:	4293      	cmp	r3, r2
 8004266:	da3c      	bge.n	80042e2 <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b20      	cmp	r3, #32
 800426e:	d103      	bne.n	8004278 <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	603b      	str	r3, [r7, #0]
                continue;
 8004276:	e02f      	b.n	80042d8 <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781d      	ldrb	r5, [r3, #0]
 800427c:	2304      	movs	r3, #4
 800427e:	2618      	movs	r6, #24
 8004280:	199b      	adds	r3, r3, r6
 8004282:	2208      	movs	r2, #8
 8004284:	4694      	mov	ip, r2
 8004286:	44bc      	add	ip, r7
 8004288:	4463      	add	r3, ip
 800428a:	1d3a      	adds	r2, r7, #4
 800428c:	8814      	ldrh	r4, [r2, #0]
 800428e:	1dba      	adds	r2, r7, #6
 8004290:	8810      	ldrh	r0, [r2, #0]
 8004292:	2228      	movs	r2, #40	; 0x28
 8004294:	2108      	movs	r1, #8
 8004296:	1852      	adds	r2, r2, r1
 8004298:	19d2      	adds	r2, r2, r7
 800429a:	8812      	ldrh	r2, [r2, #0]
 800429c:	9202      	str	r2, [sp, #8]
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	1852      	adds	r2, r2, r1
 80042a2:	19d2      	adds	r2, r2, r7
 80042a4:	8812      	ldrh	r2, [r2, #0]
 80042a6:	9201      	str	r2, [sp, #4]
 80042a8:	466a      	mov	r2, sp
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	6011      	str	r1, [r2, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	002a      	movs	r2, r5
 80042b2:	0021      	movs	r1, r4
 80042b4:	f7ff fef6 	bl	80040a4 <ST7735_WriteChar>
        x += font.width;
 80042b8:	2304      	movs	r3, #4
 80042ba:	199b      	adds	r3, r3, r6
 80042bc:	2208      	movs	r2, #8
 80042be:	4694      	mov	ip, r2
 80042c0:	44bc      	add	ip, r7
 80042c2:	4463      	add	r3, ip
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	b299      	uxth	r1, r3
 80042c8:	1dbb      	adds	r3, r7, #6
 80042ca:	1dba      	adds	r2, r7, #6
 80042cc:	8812      	ldrh	r2, [r2, #0]
 80042ce:	188a      	adds	r2, r1, r2
 80042d0:	801a      	strh	r2, [r3, #0]
        str++;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d193      	bne.n	8004208 <ST7735_WriteString+0x2c>
 80042e0:	e000      	b.n	80042e4 <ST7735_WriteString+0x108>
                break;
 80042e2:	46c0      	nop			; (mov r8, r8)
    }

    ST7735_Unselect();
 80042e4:	f7ff fcbc 	bl	8003c60 <ST7735_Unselect>
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b003      	add	sp, #12
 80042ee:	bcf0      	pop	{r4, r5, r6, r7}
 80042f0:	bc08      	pop	{r3}
 80042f2:	b002      	add	sp, #8
 80042f4:	4718      	bx	r3
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	20000068 	.word	0x20000068
 80042fc:	2000006a 	.word	0x2000006a

08004300 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8004300:	b5b0      	push	{r4, r5, r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	0005      	movs	r5, r0
 8004308:	000c      	movs	r4, r1
 800430a:	0010      	movs	r0, r2
 800430c:	0019      	movs	r1, r3
 800430e:	1dbb      	adds	r3, r7, #6
 8004310:	1c2a      	adds	r2, r5, #0
 8004312:	801a      	strh	r2, [r3, #0]
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	1c22      	adds	r2, r4, #0
 8004318:	801a      	strh	r2, [r3, #0]
 800431a:	1cbb      	adds	r3, r7, #2
 800431c:	1c02      	adds	r2, r0, #0
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	003b      	movs	r3, r7
 8004322:	1c0a      	adds	r2, r1, #0
 8004324:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8004326:	1dbb      	adds	r3, r7, #6
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	4a49      	ldr	r2, [pc, #292]	; (8004450 <ST7735_FillRectangle+0x150>)
 800432c:	2100      	movs	r1, #0
 800432e:	5e52      	ldrsh	r2, [r2, r1]
 8004330:	4293      	cmp	r3, r2
 8004332:	db00      	blt.n	8004336 <ST7735_FillRectangle+0x36>
 8004334:	e087      	b.n	8004446 <ST7735_FillRectangle+0x146>
 8004336:	1d3b      	adds	r3, r7, #4
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	4a46      	ldr	r2, [pc, #280]	; (8004454 <ST7735_FillRectangle+0x154>)
 800433c:	2100      	movs	r1, #0
 800433e:	5e52      	ldrsh	r2, [r2, r1]
 8004340:	4293      	cmp	r3, r2
 8004342:	db00      	blt.n	8004346 <ST7735_FillRectangle+0x46>
 8004344:	e07f      	b.n	8004446 <ST7735_FillRectangle+0x146>
    if((x + w - 1) >= _width) w = _width - x;
 8004346:	1dbb      	adds	r3, r7, #6
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	1cbb      	adds	r3, r7, #2
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	18d3      	adds	r3, r2, r3
 8004350:	4a3f      	ldr	r2, [pc, #252]	; (8004450 <ST7735_FillRectangle+0x150>)
 8004352:	2100      	movs	r1, #0
 8004354:	5e52      	ldrsh	r2, [r2, r1]
 8004356:	4293      	cmp	r3, r2
 8004358:	dd08      	ble.n	800436c <ST7735_FillRectangle+0x6c>
 800435a:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <ST7735_FillRectangle+0x150>)
 800435c:	2200      	movs	r2, #0
 800435e:	5e9b      	ldrsh	r3, [r3, r2]
 8004360:	b299      	uxth	r1, r3
 8004362:	1cbb      	adds	r3, r7, #2
 8004364:	1dba      	adds	r2, r7, #6
 8004366:	8812      	ldrh	r2, [r2, #0]
 8004368:	1a8a      	subs	r2, r1, r2
 800436a:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	881a      	ldrh	r2, [r3, #0]
 8004370:	003b      	movs	r3, r7
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	18d3      	adds	r3, r2, r3
 8004376:	4a37      	ldr	r2, [pc, #220]	; (8004454 <ST7735_FillRectangle+0x154>)
 8004378:	2100      	movs	r1, #0
 800437a:	5e52      	ldrsh	r2, [r2, r1]
 800437c:	4293      	cmp	r3, r2
 800437e:	dd08      	ble.n	8004392 <ST7735_FillRectangle+0x92>
 8004380:	4b34      	ldr	r3, [pc, #208]	; (8004454 <ST7735_FillRectangle+0x154>)
 8004382:	2200      	movs	r2, #0
 8004384:	5e9b      	ldrsh	r3, [r3, r2]
 8004386:	b299      	uxth	r1, r3
 8004388:	003b      	movs	r3, r7
 800438a:	1d3a      	adds	r2, r7, #4
 800438c:	8812      	ldrh	r2, [r2, #0]
 800438e:	1a8a      	subs	r2, r1, r2
 8004390:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8004392:	f7ff fc57 	bl	8003c44 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2d8      	uxtb	r0, r3
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b2d9      	uxtb	r1, r3
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	1cbb      	adds	r3, r7, #2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	18d3      	adds	r3, r2, r3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b2dc      	uxtb	r4, r3
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	003b      	movs	r3, r7
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	18d3      	adds	r3, r2, r3
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	0022      	movs	r2, r4
 80043cc:	f7ff fd08 	bl	8003de0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80043d0:	2120      	movs	r1, #32
 80043d2:	187b      	adds	r3, r7, r1
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	200c      	movs	r0, #12
 80043de:	183b      	adds	r3, r7, r0
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	187b      	adds	r3, r7, r1
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	183b      	adds	r3, r7, r0
 80043ea:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 80043ec:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <ST7735_FillRectangle+0x158>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	2102      	movs	r1, #2
 80043f2:	0018      	movs	r0, r3
 80043f4:	f002 fe1b 	bl	800702e <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	003a      	movs	r2, r7
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	801a      	strh	r2, [r3, #0]
 8004400:	e01a      	b.n	8004438 <ST7735_FillRectangle+0x138>
        for(x = w; x > 0; x--) {
 8004402:	1dbb      	adds	r3, r7, #6
 8004404:	1cba      	adds	r2, r7, #2
 8004406:	8812      	ldrh	r2, [r2, #0]
 8004408:	801a      	strh	r2, [r3, #0]
 800440a:	e00c      	b.n	8004426 <ST7735_FillRectangle+0x126>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800440c:	2301      	movs	r3, #1
 800440e:	425b      	negs	r3, r3
 8004410:	220c      	movs	r2, #12
 8004412:	18b9      	adds	r1, r7, r2
 8004414:	4811      	ldr	r0, [pc, #68]	; (800445c <ST7735_FillRectangle+0x15c>)
 8004416:	2202      	movs	r2, #2
 8004418:	f003 fb22 	bl	8007a60 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800441c:	1dbb      	adds	r3, r7, #6
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	1dbb      	adds	r3, r7, #6
 8004422:	3a01      	subs	r2, #1
 8004424:	801a      	strh	r2, [r3, #0]
 8004426:	1dbb      	adds	r3, r7, #6
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ee      	bne.n	800440c <ST7735_FillRectangle+0x10c>
    for(y = h; y > 0; y--) {
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	881a      	ldrh	r2, [r3, #0]
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	3a01      	subs	r2, #1
 8004436:	801a      	strh	r2, [r3, #0]
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e0      	bne.n	8004402 <ST7735_FillRectangle+0x102>
        }
    }

    ST7735_Unselect();
 8004440:	f7ff fc0e 	bl	8003c60 <ST7735_Unselect>
 8004444:	e000      	b.n	8004448 <ST7735_FillRectangle+0x148>
    if((x >= _width) || (y >= _height)) return;
 8004446:	46c0      	nop			; (mov r8, r8)
}
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bdb0      	pop	{r4, r5, r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	20000068 	.word	0x20000068
 8004454:	2000006a 	.word	0x2000006a
 8004458:	48000400 	.word	0x48000400
 800445c:	200000d8 	.word	0x200000d8

08004460 <createButton>:
#include "GFX_FUNCTIONS.h"
#include "graphicElements.h"


ELEMENT createButton(uint8_t btnX, uint8_t btnY, const char *text, uint16_t bgdColour, uint16_t bgdColour2, void (*btnAction)(), uint16_t arg)
{
 8004460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004462:	b095      	sub	sp, #84	; 0x54
 8004464:	af04      	add	r7, sp, #16
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	0008      	movs	r0, r1
 800446a:	0011      	movs	r1, r2
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	240b      	movs	r4, #11
 8004470:	193b      	adds	r3, r7, r4
 8004472:	1c02      	adds	r2, r0, #0
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	200a      	movs	r0, #10
 8004478:	183b      	adds	r3, r7, r0
 800447a:	1c0a      	adds	r2, r1, #0
 800447c:	701a      	strb	r2, [r3, #0]
	 *  |  TEXT	 |
	 *  |________|
	 *
	 */

	uint8_t textLen = 0;
 800447e:	233f      	movs	r3, #63	; 0x3f
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
	uint16_t dimW = 1;
 8004486:	233c      	movs	r3, #60	; 0x3c
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	2201      	movs	r2, #1
 800448c:	801a      	strh	r2, [r3, #0]
	uint8_t dimH = 1;
 800448e:	233b      	movs	r3, #59	; 0x3b
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]

	ELEMENT btnElement;

	btnElement.elemtentType = BUTTON;
 8004496:	2114      	movs	r1, #20
 8004498:	187b      	adds	r3, r7, r1
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]
	btnElement.btn.btnX = btnX;
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	193a      	adds	r2, r7, r4
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	711a      	strb	r2, [r3, #4]
	btnElement.btn.btnY = btnY;
 80044a6:	187b      	adds	r3, r7, r1
 80044a8:	183a      	adds	r2, r7, r0
 80044aa:	7812      	ldrb	r2, [r2, #0]
 80044ac:	715a      	strb	r2, [r3, #5]
	btnElement.btn.btnText = text;
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	60da      	str	r2, [r3, #12]
	btnElement.btn.btnColour = bgdColour;
 80044b4:	187a      	adds	r2, r7, r1
 80044b6:	2350      	movs	r3, #80	; 0x50
 80044b8:	2008      	movs	r0, #8
 80044ba:	181b      	adds	r3, r3, r0
 80044bc:	19db      	adds	r3, r3, r7
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	80d3      	strh	r3, [r2, #6]
	btnElement.btn.btnColour2 = bgdColour2;
 80044c2:	187b      	adds	r3, r7, r1
 80044c4:	2254      	movs	r2, #84	; 0x54
 80044c6:	1812      	adds	r2, r2, r0
 80044c8:	19d2      	adds	r2, r2, r7
 80044ca:	8812      	ldrh	r2, [r2, #0]
 80044cc:	811a      	strh	r2, [r3, #8]

	btnElement.btn.btnAction = btnAction; //buttonChangeColour;
 80044ce:	187b      	adds	r3, r7, r1
 80044d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044d2:	611a      	str	r2, [r3, #16]
	btnElement.btn.btnArg = arg;
 80044d4:	187b      	adds	r3, r7, r1
 80044d6:	225c      	movs	r2, #92	; 0x5c
 80044d8:	1812      	adds	r2, r2, r0
 80044da:	19d2      	adds	r2, r2, r7
 80044dc:	8812      	ldrh	r2, [r2, #0]
 80044de:	829a      	strh	r2, [r3, #20]

	while(text[textLen] != 0)
 80044e0:	e005      	b.n	80044ee <createButton+0x8e>
		textLen++;
 80044e2:	213f      	movs	r1, #63	; 0x3f
 80044e4:	187b      	adds	r3, r7, r1
 80044e6:	781a      	ldrb	r2, [r3, #0]
 80044e8:	187b      	adds	r3, r7, r1
 80044ea:	3201      	adds	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
	while(text[textLen] != 0)
 80044ee:	213f      	movs	r1, #63	; 0x3f
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	18d3      	adds	r3, r2, r3
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f1      	bne.n	80044e2 <createButton+0x82>


	dimW = ( textLen * 7 ) + 5;
 80044fe:	187b      	adds	r3, r7, r1
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	1c1a      	adds	r2, r3, #0
 8004506:	00d2      	lsls	r2, r2, #3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	b29a      	uxth	r2, r3
 800450c:	243c      	movs	r4, #60	; 0x3c
 800450e:	193b      	adds	r3, r7, r4
 8004510:	3205      	adds	r2, #5
 8004512:	801a      	strh	r2, [r3, #0]
	dimH = ( 10  + 5 );
 8004514:	253b      	movs	r5, #59	; 0x3b
 8004516:	197b      	adds	r3, r7, r5
 8004518:	220f      	movs	r2, #15
 800451a:	701a      	strb	r2, [r3, #0]

	fillRoundRect(btnX, btnY, dimW, dimH, 2, bgdColour);
 800451c:	260b      	movs	r6, #11
 800451e:	19bb      	adds	r3, r7, r6
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b218      	sxth	r0, r3
 8004524:	230a      	movs	r3, #10
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	b219      	sxth	r1, r3
 800452c:	193b      	adds	r3, r7, r4
 800452e:	2400      	movs	r4, #0
 8004530:	5f1a      	ldrsh	r2, [r3, r4]
 8004532:	197b      	adds	r3, r7, r5
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b21c      	sxth	r4, r3
 8004538:	2550      	movs	r5, #80	; 0x50
 800453a:	2308      	movs	r3, #8
 800453c:	18ed      	adds	r5, r5, r3
 800453e:	19eb      	adds	r3, r5, r7
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	2302      	movs	r3, #2
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	0023      	movs	r3, r4
 800454a:	f7ff f875 	bl	8003638 <fillRoundRect>
	ST7735_WriteString(btnX+3, btnY+3, text, Font_7x10, WHITE, bgdColour);
 800454e:	19bb      	adds	r3, r7, r6
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	3303      	adds	r3, #3
 8004556:	b298      	uxth	r0, r3
 8004558:	230a      	movs	r3, #10
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	3303      	adds	r3, #3
 8004562:	b29c      	uxth	r4, r3
 8004564:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <createButton+0x144>)
 8004566:	687d      	ldr	r5, [r7, #4]
 8004568:	2250      	movs	r2, #80	; 0x50
 800456a:	2108      	movs	r1, #8
 800456c:	1852      	adds	r2, r2, r1
 800456e:	19d2      	adds	r2, r2, r7
 8004570:	8812      	ldrh	r2, [r2, #0]
 8004572:	9202      	str	r2, [sp, #8]
 8004574:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <createButton+0x148>)
 8004576:	9201      	str	r2, [sp, #4]
 8004578:	466a      	mov	r2, sp
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	6011      	str	r1, [r2, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	002a      	movs	r2, r5
 8004582:	0021      	movs	r1, r4
 8004584:	f7ff fe2a 	bl	80041dc <ST7735_WriteString>

    return btnElement;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2214      	movs	r2, #20
 800458c:	18ba      	adds	r2, r7, r2
 800458e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004590:	c313      	stmia	r3!, {r0, r1, r4}
 8004592:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004594:	c313      	stmia	r3!, {r0, r1, r4}
 8004596:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004598:	c313      	stmia	r3!, {r0, r1, r4}

}
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	46bd      	mov	sp, r7
 800459e:	b011      	add	sp, #68	; 0x44
 80045a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	20000000 	.word	0x20000000
 80045a8:	0000ffff 	.word	0x0000ffff

080045ac <createEditNumBox>:


ELEMENT createEditNumBox(uint8_t textX, uint8_t textY, const char *text, uint16_t bgdTextColor, uint8_t num, uint16_t bgdNumcolor)
{
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	b093      	sub	sp, #76	; 0x4c
 80045b0:	af04      	add	r7, sp, #16
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	0008      	movs	r0, r1
 80045b6:	0011      	movs	r1, r2
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	240b      	movs	r4, #11
 80045bc:	193b      	adds	r3, r7, r4
 80045be:	1c02      	adds	r2, r0, #0
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	250a      	movs	r5, #10
 80045c4:	197b      	adds	r3, r7, r5
 80045c6:	1c0a      	adds	r2, r1, #0
 80045c8:	701a      	strb	r2, [r3, #0]

	ELEMENT nBoxElement;

	char numToChar[2];

	nBoxElement.elemtentType = EDITNUMBOX;
 80045ca:	2014      	movs	r0, #20
 80045cc:	183b      	adds	r3, r7, r0
 80045ce:	2202      	movs	r2, #2
 80045d0:	701a      	strb	r2, [r3, #0]
	nBoxElement.nBox.textX = textX;
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	193a      	adds	r2, r7, r4
 80045d6:	7812      	ldrb	r2, [r2, #0]
 80045d8:	761a      	strb	r2, [r3, #24]
	nBoxElement.nBox.textY = textY;
 80045da:	183b      	adds	r3, r7, r0
 80045dc:	197a      	adds	r2, r7, r5
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	765a      	strb	r2, [r3, #25]
	nBoxElement.nBox.textColour = bgdTextColor;
 80045e2:	183a      	adds	r2, r7, r0
 80045e4:	2348      	movs	r3, #72	; 0x48
 80045e6:	2608      	movs	r6, #8
 80045e8:	199b      	adds	r3, r3, r6
 80045ea:	19db      	adds	r3, r3, r7
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	8353      	strh	r3, [r2, #26]
	nBoxElement.nBox.boxText = text;
 80045f0:	183b      	adds	r3, r7, r0
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	61da      	str	r2, [r3, #28]
	nBoxElement.nBox.boxNum = num;
 80045f6:	183b      	adds	r3, r7, r0
 80045f8:	244c      	movs	r4, #76	; 0x4c
 80045fa:	19a2      	adds	r2, r4, r6
 80045fc:	19d2      	adds	r2, r2, r7
 80045fe:	2120      	movs	r1, #32
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	545a      	strb	r2, [r3, r1]
	nBoxElement.nBox.boxColor = bgdNumcolor;
 8004604:	2350      	movs	r3, #80	; 0x50
 8004606:	199b      	adds	r3, r3, r6
 8004608:	19db      	adds	r3, r3, r7
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b2d9      	uxtb	r1, r3
 800460e:	183b      	adds	r3, r7, r0
 8004610:	2221      	movs	r2, #33	; 0x21
 8004612:	5499      	strb	r1, [r3, r2]


	if(num > 9)
 8004614:	19a3      	adds	r3, r4, r6
 8004616:	19db      	adds	r3, r3, r7
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b09      	cmp	r3, #9
 800461c:	d927      	bls.n	800466e <createEditNumBox+0xc2>
	{
		numToChar[0] = ( num / 10 ) + 0x30;
 800461e:	19a3      	adds	r3, r4, r6
 8004620:	19db      	adds	r3, r3, r7
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	210a      	movs	r1, #10
 8004626:	0018      	movs	r0, r3
 8004628:	f7fb fd6c 	bl	8000104 <__udivsi3>
 800462c:	0003      	movs	r3, r0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	3330      	adds	r3, #48	; 0x30
 8004632:	b2da      	uxtb	r2, r3
 8004634:	2510      	movs	r5, #16
 8004636:	197b      	adds	r3, r7, r5
 8004638:	701a      	strb	r2, [r3, #0]
		numToChar[1] = ( num - ( (num / 10) * 10 ) ) + 0x30;
 800463a:	19a3      	adds	r3, r4, r6
 800463c:	19db      	adds	r3, r3, r7
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	210a      	movs	r1, #10
 8004642:	0018      	movs	r0, r3
 8004644:	f7fb fd5e 	bl	8000104 <__udivsi3>
 8004648:	0003      	movs	r3, r0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	1c1a      	adds	r2, r3, #0
 800464e:	0152      	lsls	r2, r2, #5
 8004650:	1ad2      	subs	r2, r2, r3
 8004652:	0092      	lsls	r2, r2, #2
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	18db      	adds	r3, r3, r3
 8004658:	b2da      	uxtb	r2, r3
 800465a:	19a3      	adds	r3, r4, r6
 800465c:	19db      	adds	r3, r3, r7
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	18d3      	adds	r3, r2, r3
 8004662:	b2db      	uxtb	r3, r3
 8004664:	3330      	adds	r3, #48	; 0x30
 8004666:	b2da      	uxtb	r2, r3
 8004668:	197b      	adds	r3, r7, r5
 800466a:	705a      	strb	r2, [r3, #1]
 800466c:	e00c      	b.n	8004688 <createEditNumBox+0xdc>
	}
	else
	{

		numToChar[0] = '0';
 800466e:	2110      	movs	r1, #16
 8004670:	187b      	adds	r3, r7, r1
 8004672:	2230      	movs	r2, #48	; 0x30
 8004674:	701a      	strb	r2, [r3, #0]
		numToChar[1] = num + 0x30;
 8004676:	234c      	movs	r3, #76	; 0x4c
 8004678:	2208      	movs	r2, #8
 800467a:	189b      	adds	r3, r3, r2
 800467c:	19db      	adds	r3, r3, r7
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	3330      	adds	r3, #48	; 0x30
 8004682:	b2da      	uxtb	r2, r3
 8004684:	187b      	adds	r3, r7, r1
 8004686:	705a      	strb	r2, [r3, #1]

	}

	numToChar[2] = 0;
 8004688:	2310      	movs	r3, #16
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	709a      	strb	r2, [r3, #2]

	ST7735_WriteString(textX, textY, text, Font_11x18, WHITE, bgdTextColor);
 8004690:	260b      	movs	r6, #11
 8004692:	19bb      	adds	r3, r7, r6
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b298      	uxth	r0, r3
 8004698:	230a      	movs	r3, #10
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b29c      	uxth	r4, r3
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <createEditNumBox+0x198>)
 80046a2:	687d      	ldr	r5, [r7, #4]
 80046a4:	2148      	movs	r1, #72	; 0x48
 80046a6:	2208      	movs	r2, #8
 80046a8:	188a      	adds	r2, r1, r2
 80046aa:	19d2      	adds	r2, r2, r7
 80046ac:	8812      	ldrh	r2, [r2, #0]
 80046ae:	9202      	str	r2, [sp, #8]
 80046b0:	4a25      	ldr	r2, [pc, #148]	; (8004748 <createEditNumBox+0x19c>)
 80046b2:	9201      	str	r2, [sp, #4]
 80046b4:	466a      	mov	r2, sp
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	6011      	str	r1, [r2, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	002a      	movs	r2, r5
 80046be:	0021      	movs	r1, r4
 80046c0:	f7ff fd8c 	bl	80041dc <ST7735_WriteString>
    ST7735_WriteString(textX+32, textY+22, numToChar, Font_11x18, WHITE, bgdNumcolor);
 80046c4:	19bb      	adds	r3, r7, r6
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3320      	adds	r3, #32
 80046cc:	b298      	uxth	r0, r3
 80046ce:	230a      	movs	r3, #10
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3316      	adds	r3, #22
 80046d8:	b29c      	uxth	r4, r3
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <createEditNumBox+0x198>)
 80046dc:	2210      	movs	r2, #16
 80046de:	18bd      	adds	r5, r7, r2
 80046e0:	2250      	movs	r2, #80	; 0x50
 80046e2:	2108      	movs	r1, #8
 80046e4:	1852      	adds	r2, r2, r1
 80046e6:	19d2      	adds	r2, r2, r7
 80046e8:	8812      	ldrh	r2, [r2, #0]
 80046ea:	9202      	str	r2, [sp, #8]
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <createEditNumBox+0x19c>)
 80046ee:	9201      	str	r2, [sp, #4]
 80046f0:	466a      	mov	r2, sp
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	002a      	movs	r2, r5
 80046fa:	0021      	movs	r1, r4
 80046fc:	f7ff fd6e 	bl	80041dc <ST7735_WriteString>
    drawRoundRect(textX+27, textY+20, 30, 20, 2, WHITE);
 8004700:	19bb      	adds	r3, r7, r6
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	331b      	adds	r3, #27
 8004708:	b29b      	uxth	r3, r3
 800470a:	b218      	sxth	r0, r3
 800470c:	230a      	movs	r3, #10
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	3314      	adds	r3, #20
 8004716:	b29b      	uxth	r3, r3
 8004718:	b219      	sxth	r1, r3
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <createEditNumBox+0x19c>)
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	2302      	movs	r3, #2
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	2314      	movs	r3, #20
 8004724:	221e      	movs	r2, #30
 8004726:	f7fe fe45 	bl	80033b4 <drawRoundRect>

    return nBoxElement;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2214      	movs	r2, #20
 800472e:	18ba      	adds	r2, r7, r2
 8004730:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004732:	c313      	stmia	r3!, {r0, r1, r4}
 8004734:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004736:	c313      	stmia	r3!, {r0, r1, r4}
 8004738:	ca13      	ldmia	r2!, {r0, r1, r4}
 800473a:	c313      	stmia	r3!, {r0, r1, r4}

}
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	46bd      	mov	sp, r7
 8004740:	b00f      	add	sp, #60	; 0x3c
 8004742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004744:	20000008 	.word	0x20000008
 8004748:	0000ffff 	.word	0x0000ffff

0800474c <modifyNumBox>:


void modifyNumBox(NBOX nBox)
{
 800474c:	b5b0      	push	{r4, r5, r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af04      	add	r7, sp, #16
 8004752:	1d3b      	adds	r3, r7, #4
 8004754:	6018      	str	r0, [r3, #0]
 8004756:	6059      	str	r1, [r3, #4]
 8004758:	609a      	str	r2, [r3, #8]

	char numToChar[3] = {0};
 800475a:	2514      	movs	r5, #20
 800475c:	197b      	adds	r3, r7, r5
 800475e:	4a40      	ldr	r2, [pc, #256]	; (8004860 <modifyNumBox+0x114>)
 8004760:	8812      	ldrh	r2, [r2, #0]
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	2202      	movs	r2, #2
 8004766:	2100      	movs	r1, #0
 8004768:	5499      	strb	r1, [r3, r2]


	if(nBox.boxNum > 9)
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	7a1b      	ldrb	r3, [r3, #8]
 800476e:	2b09      	cmp	r3, #9
 8004770:	d923      	bls.n	80047ba <modifyNumBox+0x6e>
	{
		numToChar[0] = ( nBox.boxNum / 10 ) + 0x30;
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	7a1b      	ldrb	r3, [r3, #8]
 8004776:	210a      	movs	r1, #10
 8004778:	0018      	movs	r0, r3
 800477a:	f7fb fcc3 	bl	8000104 <__udivsi3>
 800477e:	0003      	movs	r3, r0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	3330      	adds	r3, #48	; 0x30
 8004784:	b2da      	uxtb	r2, r3
 8004786:	197b      	adds	r3, r7, r5
 8004788:	701a      	strb	r2, [r3, #0]
		numToChar[1] = ( nBox.boxNum - ( (nBox.boxNum / 10) * 10 ) ) + 0x30;
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	7a1c      	ldrb	r4, [r3, #8]
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	7a1b      	ldrb	r3, [r3, #8]
 8004792:	210a      	movs	r1, #10
 8004794:	0018      	movs	r0, r3
 8004796:	f7fb fcb5 	bl	8000104 <__udivsi3>
 800479a:	0003      	movs	r3, r0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	1c1a      	adds	r2, r3, #0
 80047a0:	0152      	lsls	r2, r2, #5
 80047a2:	1ad2      	subs	r2, r2, r3
 80047a4:	0092      	lsls	r2, r2, #2
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	18db      	adds	r3, r3, r3
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	18e3      	adds	r3, r4, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	3330      	adds	r3, #48	; 0x30
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	197b      	adds	r3, r7, r5
 80047b6:	705a      	strb	r2, [r3, #1]
 80047b8:	e009      	b.n	80047ce <modifyNumBox+0x82>
	}
	else
	{

		numToChar[0] = '0';
 80047ba:	2114      	movs	r1, #20
 80047bc:	187b      	adds	r3, r7, r1
 80047be:	2230      	movs	r2, #48	; 0x30
 80047c0:	701a      	strb	r2, [r3, #0]
		numToChar[1] = nBox.boxNum + 0x30;;
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	7a1b      	ldrb	r3, [r3, #8]
 80047c6:	3330      	adds	r3, #48	; 0x30
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	705a      	strb	r2, [r3, #1]

	}

	ST7735_WriteString(nBox.textX, nBox.textY, nBox.boxText, Font_11x18, WHITE, nBox.textColour);
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b298      	uxth	r0, r3
 80047d4:	1d3b      	adds	r3, r7, #4
 80047d6:	785b      	ldrb	r3, [r3, #1]
 80047d8:	b29c      	uxth	r4, r3
 80047da:	1d3b      	adds	r3, r7, #4
 80047dc:	685d      	ldr	r5, [r3, #4]
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	885a      	ldrh	r2, [r3, #2]
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <modifyNumBox+0x118>)
 80047e4:	9202      	str	r2, [sp, #8]
 80047e6:	4a20      	ldr	r2, [pc, #128]	; (8004868 <modifyNumBox+0x11c>)
 80047e8:	9201      	str	r2, [sp, #4]
 80047ea:	466a      	mov	r2, sp
 80047ec:	6859      	ldr	r1, [r3, #4]
 80047ee:	6011      	str	r1, [r2, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	002a      	movs	r2, r5
 80047f4:	0021      	movs	r1, r4
 80047f6:	f7ff fcf1 	bl	80041dc <ST7735_WriteString>
	ST7735_WriteString(nBox.textX+32, nBox.textY+22, numToChar, Font_11x18, WHITE, nBox.boxColor);
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3320      	adds	r3, #32
 8004802:	b298      	uxth	r0, r3
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	b29b      	uxth	r3, r3
 800480a:	3316      	adds	r3, #22
 800480c:	b29c      	uxth	r4, r3
 800480e:	1d3b      	adds	r3, r7, #4
 8004810:	7a5b      	ldrb	r3, [r3, #9]
 8004812:	b29a      	uxth	r2, r3
 8004814:	4b13      	ldr	r3, [pc, #76]	; (8004864 <modifyNumBox+0x118>)
 8004816:	2114      	movs	r1, #20
 8004818:	187d      	adds	r5, r7, r1
 800481a:	9202      	str	r2, [sp, #8]
 800481c:	4a12      	ldr	r2, [pc, #72]	; (8004868 <modifyNumBox+0x11c>)
 800481e:	9201      	str	r2, [sp, #4]
 8004820:	466a      	mov	r2, sp
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	6011      	str	r1, [r2, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	002a      	movs	r2, r5
 800482a:	0021      	movs	r1, r4
 800482c:	f7ff fcd6 	bl	80041dc <ST7735_WriteString>
	drawRoundRect(nBox.textX+27, nBox.textY+20, 30, 20, 2, WHITE);
 8004830:	1d3b      	adds	r3, r7, #4
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	331b      	adds	r3, #27
 8004838:	b29b      	uxth	r3, r3
 800483a:	b218      	sxth	r0, r3
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	b29b      	uxth	r3, r3
 8004842:	3314      	adds	r3, #20
 8004844:	b29b      	uxth	r3, r3
 8004846:	b219      	sxth	r1, r3
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <modifyNumBox+0x11c>)
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	2302      	movs	r3, #2
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2314      	movs	r3, #20
 8004852:	221e      	movs	r2, #30
 8004854:	f7fe fdae 	bl	80033b4 <drawRoundRect>

}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b006      	add	sp, #24
 800485e:	bdb0      	pop	{r4, r5, r7, pc}
 8004860:	0800807c 	.word	0x0800807c
 8004864:	20000008 	.word	0x20000008
 8004868:	0000ffff 	.word	0x0000ffff

0800486c <buttonChangeColour>:


void buttonChangeColour(BTN *btn)
{
 800486c:	b5b0      	push	{r4, r5, r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af04      	add	r7, sp, #16
 8004872:	6078      	str	r0, [r7, #4]


	uint16_t dimW;
	uint8_t dimH;

	uint8_t textLen = 0;
 8004874:	230f      	movs	r3, #15
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
	while(btn->btnText[textLen] != 0)
 800487c:	e005      	b.n	800488a <buttonChangeColour+0x1e>
		textLen++;
 800487e:	210f      	movs	r1, #15
 8004880:	187b      	adds	r3, r7, r1
 8004882:	781a      	ldrb	r2, [r3, #0]
 8004884:	187b      	adds	r3, r7, r1
 8004886:	3201      	adds	r2, #1
 8004888:	701a      	strb	r2, [r3, #0]
	while(btn->btnText[textLen] != 0)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	210f      	movs	r1, #15
 8004890:	187b      	adds	r3, r7, r1
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	18d3      	adds	r3, r2, r3
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <buttonChangeColour+0x12>

	dimW = ( textLen * 7 ) + 5;
 800489c:	187b      	adds	r3, r7, r1
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	1c1a      	adds	r2, r3, #0
 80048a4:	00d2      	lsls	r2, r2, #3
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	240c      	movs	r4, #12
 80048ac:	193b      	adds	r3, r7, r4
 80048ae:	3205      	adds	r2, #5
 80048b0:	801a      	strh	r2, [r3, #0]
	dimH = ( 10  + 5 );
 80048b2:	250b      	movs	r5, #11
 80048b4:	197b      	adds	r3, r7, r5
 80048b6:	220f      	movs	r2, #15
 80048b8:	701a      	strb	r2, [r3, #0]

	fillRoundRect(btn->btnX, btn->btnY, dimW, dimH, 2, btn->btnColour2);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b218      	sxth	r0, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	b219      	sxth	r1, r3
 80048c6:	193b      	adds	r3, r7, r4
 80048c8:	2200      	movs	r2, #0
 80048ca:	5e9a      	ldrsh	r2, [r3, r2]
 80048cc:	197b      	adds	r3, r7, r5
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	b21c      	sxth	r4, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	889b      	ldrh	r3, [r3, #4]
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	2302      	movs	r3, #2
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	0023      	movs	r3, r4
 80048de:	f7fe feab 	bl	8003638 <fillRoundRect>
	ST7735_WriteString(btn->btnX+3, btn->btnY+3, btn->btnText, Font_7x10, WHITE, btn->btnColour2);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3303      	adds	r3, #3
 80048ea:	b298      	uxth	r0, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3303      	adds	r3, #3
 80048f4:	b29c      	uxth	r4, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689d      	ldr	r5, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	889a      	ldrh	r2, [r3, #4]
 80048fe:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <buttonChangeColour+0xcc>)
 8004900:	9202      	str	r2, [sp, #8]
 8004902:	4a0e      	ldr	r2, [pc, #56]	; (800493c <buttonChangeColour+0xd0>)
 8004904:	9201      	str	r2, [sp, #4]
 8004906:	466a      	mov	r2, sp
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	6011      	str	r1, [r2, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	002a      	movs	r2, r5
 8004910:	0021      	movs	r1, r4
 8004912:	f7ff fc63 	bl	80041dc <ST7735_WriteString>

	uint16_t tmp = btn->btnColour;
 8004916:	2108      	movs	r1, #8
 8004918:	187b      	adds	r3, r7, r1
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	8852      	ldrh	r2, [r2, #2]
 800491e:	801a      	strh	r2, [r3, #0]
	btn->btnColour = btn->btnColour2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	889a      	ldrh	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	805a      	strh	r2, [r3, #2]
	btn->btnColour2 = tmp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	187a      	adds	r2, r7, r1
 800492c:	8812      	ldrh	r2, [r2, #0]
 800492e:	809a      	strh	r2, [r3, #4]

}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b004      	add	sp, #16
 8004936:	bdb0      	pop	{r4, r5, r7, pc}
 8004938:	20000000 	.word	0x20000000
 800493c:	0000ffff 	.word	0x0000ffff

08004940 <targetElement>:
 *	@ Function; targetElement
 * 	@ Description; creates an arrow near the element
 *  @ Par1; ELEMENT
 */
void targetElement(ELEMENT element)
{
 8004940:	b084      	sub	sp, #16
 8004942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004944:	b087      	sub	sp, #28
 8004946:	af04      	add	r7, sp, #16
 8004948:	2420      	movs	r4, #32
 800494a:	193c      	adds	r4, r7, r4
 800494c:	6020      	str	r0, [r4, #0]
 800494e:	6061      	str	r1, [r4, #4]
 8004950:	60a2      	str	r2, [r4, #8]
 8004952:	60e3      	str	r3, [r4, #12]
	uint8_t arrowPosX;
	uint8_t arrowPosY;
	uint8_t arrowCenter;


	if(previousArrow.elemtentType == BUTTON)
 8004954:	4b74      	ldr	r3, [pc, #464]	; (8004b28 <targetElement+0x1e8>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d130      	bne.n	80049be <targetElement+0x7e>
	{

		// Clear previous position
		arrowPosX = previousArrow.btn.btnX-11;
 800495c:	4b72      	ldr	r3, [pc, #456]	; (8004b28 <targetElement+0x1e8>)
 800495e:	791a      	ldrb	r2, [r3, #4]
 8004960:	1dfb      	adds	r3, r7, #7
 8004962:	3a0b      	subs	r2, #11
 8004964:	701a      	strb	r2, [r3, #0]
		arrowPosY = previousArrow.btn.btnY;
 8004966:	1dbb      	adds	r3, r7, #6
 8004968:	4a6f      	ldr	r2, [pc, #444]	; (8004b28 <targetElement+0x1e8>)
 800496a:	7952      	ldrb	r2, [r2, #5]
 800496c:	701a      	strb	r2, [r3, #0]
		arrowCenter = (arrowPosY + 7);
 800496e:	1d7b      	adds	r3, r7, #5
 8004970:	1dba      	adds	r2, r7, #6
 8004972:	7812      	ldrb	r2, [r2, #0]
 8004974:	3207      	adds	r2, #7
 8004976:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, background);
 8004978:	1dfb      	adds	r3, r7, #7
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b218      	sxth	r0, r3
 800497e:	1dbb      	adds	r3, r7, #6
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	b21c      	sxth	r4, r3
 8004984:	1dfb      	adds	r3, r7, #7
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	330a      	adds	r3, #10
 800498c:	b29b      	uxth	r3, r3
 800498e:	b21d      	sxth	r5, r3
 8004990:	1d7b      	adds	r3, r7, #5
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	b21e      	sxth	r6, r3
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	b21b      	sxth	r3, r3
 800499c:	1dba      	adds	r2, r7, #6
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	b292      	uxth	r2, r2
 80049a2:	320e      	adds	r2, #14
 80049a4:	b292      	uxth	r2, r2
 80049a6:	b212      	sxth	r2, r2
 80049a8:	4960      	ldr	r1, [pc, #384]	; (8004b2c <targetElement+0x1ec>)
 80049aa:	8809      	ldrh	r1, [r1, #0]
 80049ac:	9102      	str	r1, [sp, #8]
 80049ae:	9201      	str	r2, [sp, #4]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	0033      	movs	r3, r6
 80049b4:	002a      	movs	r2, r5
 80049b6:	0021      	movs	r1, r4
 80049b8:	f7fe fef6 	bl	80037a8 <fillTriangle>
 80049bc:	e033      	b.n	8004a26 <targetElement+0xe6>

	}
	else if(previousArrow.elemtentType == EDITNUMBOX)
 80049be:	4b5a      	ldr	r3, [pc, #360]	; (8004b28 <targetElement+0x1e8>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d12f      	bne.n	8004a26 <targetElement+0xe6>
	{

		// Clear previous position
		arrowPosX = previousArrow.nBox.textX-11;
 80049c6:	4b58      	ldr	r3, [pc, #352]	; (8004b28 <targetElement+0x1e8>)
 80049c8:	7e1a      	ldrb	r2, [r3, #24]
 80049ca:	1dfb      	adds	r3, r7, #7
 80049cc:	3a0b      	subs	r2, #11
 80049ce:	701a      	strb	r2, [r3, #0]
		arrowPosY = previousArrow.nBox.textY;
 80049d0:	1dbb      	adds	r3, r7, #6
 80049d2:	4a55      	ldr	r2, [pc, #340]	; (8004b28 <targetElement+0x1e8>)
 80049d4:	7e52      	ldrb	r2, [r2, #25]
 80049d6:	701a      	strb	r2, [r3, #0]
		arrowCenter = (arrowPosY + 7);
 80049d8:	1d7b      	adds	r3, r7, #5
 80049da:	1dba      	adds	r2, r7, #6
 80049dc:	7812      	ldrb	r2, [r2, #0]
 80049de:	3207      	adds	r2, #7
 80049e0:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, background);
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	b218      	sxth	r0, r3
 80049e8:	1dbb      	adds	r3, r7, #6
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b21c      	sxth	r4, r3
 80049ee:	1dfb      	adds	r3, r7, #7
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	330a      	adds	r3, #10
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	b21d      	sxth	r5, r3
 80049fa:	1d7b      	adds	r3, r7, #5
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	b21e      	sxth	r6, r3
 8004a00:	1dfb      	adds	r3, r7, #7
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	b21b      	sxth	r3, r3
 8004a06:	1dba      	adds	r2, r7, #6
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	320e      	adds	r2, #14
 8004a0e:	b292      	uxth	r2, r2
 8004a10:	b212      	sxth	r2, r2
 8004a12:	4946      	ldr	r1, [pc, #280]	; (8004b2c <targetElement+0x1ec>)
 8004a14:	8809      	ldrh	r1, [r1, #0]
 8004a16:	9102      	str	r1, [sp, #8]
 8004a18:	9201      	str	r2, [sp, #4]
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	0033      	movs	r3, r6
 8004a1e:	002a      	movs	r2, r5
 8004a20:	0021      	movs	r1, r4
 8004a22:	f7fe fec1 	bl	80037a8 <fillTriangle>

	}

	if(element.elemtentType == BUTTON)
 8004a26:	2120      	movs	r1, #32
 8004a28:	187b      	adds	r3, r7, r1
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d137      	bne.n	8004aa0 <targetElement+0x160>
	{

		arrowPosX = element.btn.btnX-11;
 8004a30:	187b      	adds	r3, r7, r1
 8004a32:	791a      	ldrb	r2, [r3, #4]
 8004a34:	1dfb      	adds	r3, r7, #7
 8004a36:	3a0b      	subs	r2, #11
 8004a38:	701a      	strb	r2, [r3, #0]
		arrowPosY = element.btn.btnY;
 8004a3a:	1dba      	adds	r2, r7, #6
 8004a3c:	187b      	adds	r3, r7, r1
 8004a3e:	795b      	ldrb	r3, [r3, #5]
 8004a40:	7013      	strb	r3, [r2, #0]
		arrowCenter = (arrowPosY + 7);
 8004a42:	1d7b      	adds	r3, r7, #5
 8004a44:	1dba      	adds	r2, r7, #6
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	3207      	adds	r2, #7
 8004a4a:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, WHITE);
 8004a4c:	1dfb      	adds	r3, r7, #7
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b218      	sxth	r0, r3
 8004a52:	1dbb      	adds	r3, r7, #6
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b219      	sxth	r1, r3
 8004a58:	1dfb      	adds	r3, r7, #7
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	330a      	adds	r3, #10
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	b21c      	sxth	r4, r3
 8004a64:	1d7b      	adds	r3, r7, #5
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	b21d      	sxth	r5, r3
 8004a6a:	1dfb      	adds	r3, r7, #7
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b21b      	sxth	r3, r3
 8004a70:	1dba      	adds	r2, r7, #6
 8004a72:	7812      	ldrb	r2, [r2, #0]
 8004a74:	b292      	uxth	r2, r2
 8004a76:	320e      	adds	r2, #14
 8004a78:	b292      	uxth	r2, r2
 8004a7a:	b212      	sxth	r2, r2
 8004a7c:	4e2c      	ldr	r6, [pc, #176]	; (8004b30 <targetElement+0x1f0>)
 8004a7e:	9602      	str	r6, [sp, #8]
 8004a80:	9201      	str	r2, [sp, #4]
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	002b      	movs	r3, r5
 8004a86:	0022      	movs	r2, r4
 8004a88:	f7fe fe8e 	bl	80037a8 <fillTriangle>

		previousArrow = element;
 8004a8c:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <targetElement+0x1e8>)
 8004a8e:	2120      	movs	r1, #32
 8004a90:	187a      	adds	r2, r7, r1
 8004a92:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a94:	c313      	stmia	r3!, {r0, r1, r4}
 8004a96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a98:	c313      	stmia	r3!, {r0, r1, r4}
 8004a9a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a9c:	c313      	stmia	r3!, {r0, r1, r4}

		previousArrow = element;

	}

}
 8004a9e:	e03b      	b.n	8004b18 <targetElement+0x1d8>
	else if(element.elemtentType == EDITNUMBOX)
 8004aa0:	2120      	movs	r1, #32
 8004aa2:	187b      	adds	r3, r7, r1
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d136      	bne.n	8004b18 <targetElement+0x1d8>
		arrowPosX = element.nBox.textX-11;
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	7e1a      	ldrb	r2, [r3, #24]
 8004aae:	1dfb      	adds	r3, r7, #7
 8004ab0:	3a0b      	subs	r2, #11
 8004ab2:	701a      	strb	r2, [r3, #0]
		arrowPosY = element.nBox.textY;
 8004ab4:	1dba      	adds	r2, r7, #6
 8004ab6:	187b      	adds	r3, r7, r1
 8004ab8:	7e5b      	ldrb	r3, [r3, #25]
 8004aba:	7013      	strb	r3, [r2, #0]
		arrowCenter = (arrowPosY + 7);
 8004abc:	1d7b      	adds	r3, r7, #5
 8004abe:	1dba      	adds	r2, r7, #6
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	3207      	adds	r2, #7
 8004ac4:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, WHITE);
 8004ac6:	1dfb      	adds	r3, r7, #7
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	b218      	sxth	r0, r3
 8004acc:	1dbb      	adds	r3, r7, #6
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	b219      	sxth	r1, r3
 8004ad2:	1dfb      	adds	r3, r7, #7
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	330a      	adds	r3, #10
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	b21c      	sxth	r4, r3
 8004ade:	1d7b      	adds	r3, r7, #5
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	b21d      	sxth	r5, r3
 8004ae4:	1dfb      	adds	r3, r7, #7
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	1dba      	adds	r2, r7, #6
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	b292      	uxth	r2, r2
 8004af0:	320e      	adds	r2, #14
 8004af2:	b292      	uxth	r2, r2
 8004af4:	b212      	sxth	r2, r2
 8004af6:	4e0e      	ldr	r6, [pc, #56]	; (8004b30 <targetElement+0x1f0>)
 8004af8:	9602      	str	r6, [sp, #8]
 8004afa:	9201      	str	r2, [sp, #4]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	002b      	movs	r3, r5
 8004b00:	0022      	movs	r2, r4
 8004b02:	f7fe fe51 	bl	80037a8 <fillTriangle>
		previousArrow = element;
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <targetElement+0x1e8>)
 8004b08:	2120      	movs	r1, #32
 8004b0a:	187a      	adds	r2, r7, r1
 8004b0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b0e:	c313      	stmia	r3!, {r0, r1, r4}
 8004b10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b12:	c313      	stmia	r3!, {r0, r1, r4}
 8004b14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b16:	c313      	stmia	r3!, {r0, r1, r4}
}
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b003      	add	sp, #12
 8004b1e:	bcf0      	pop	{r4, r5, r6, r7}
 8004b20:	bc08      	pop	{r3}
 8004b22:	b004      	add	sp, #16
 8004b24:	4718      	bx	r3
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	20000074 	.word	0x20000074
 8004b2c:	20000224 	.word	0x20000224
 8004b30:	0000ffff 	.word	0x0000ffff

08004b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b38:	f001 fc8c 	bl	8006454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b3c:	f000 f81a 	bl	8004b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b40:	f000 f904 	bl	8004d4c <MX_GPIO_Init>
  MX_ADC_Init();
 8004b44:	f000 f868 	bl	8004c18 <MX_ADC_Init>
  MX_SPI1_Init();
 8004b48:	f000 f8c2 	bl	8004cd0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc);
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <main+0x3c>)
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f001 fe52 	bl	80067f8 <HAL_ADC_Start>

  ST7735_Init(0);
 8004b54:	2000      	movs	r0, #0
 8004b56:	f7ff f99b 	bl	8003e90 <ST7735_Init>
  fillScreen(BLACK);
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f7ff f856 	bl	8003c0c <fillScreen>
  HAL_Delay(500);
 8004b60:	23fa      	movs	r3, #250	; 0xfa
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	0018      	movs	r0, r3
 8004b66:	f001 fce3 	bl	8006530 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	pHMeter_process();
 8004b6a:	f000 f98d 	bl	8004e88 <pHMeter_process>
 8004b6e:	e7fc      	b.n	8004b6a <main+0x36>
 8004b70:	20000098 	.word	0x20000098

08004b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b091      	sub	sp, #68	; 0x44
 8004b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b7a:	2410      	movs	r4, #16
 8004b7c:	193b      	adds	r3, r7, r4
 8004b7e:	0018      	movs	r0, r3
 8004b80:	2330      	movs	r3, #48	; 0x30
 8004b82:	001a      	movs	r2, r3
 8004b84:	2100      	movs	r1, #0
 8004b86:	f003 fa65 	bl	8008054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b8a:	003b      	movs	r3, r7
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	2310      	movs	r3, #16
 8004b90:	001a      	movs	r2, r3
 8004b92:	2100      	movs	r1, #0
 8004b94:	f003 fa5e 	bl	8008054 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004b98:	0021      	movs	r1, r4
 8004b9a:	187b      	adds	r3, r7, r1
 8004b9c:	2212      	movs	r2, #18
 8004b9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004ba6:	187b      	adds	r3, r7, r1
 8004ba8:	2201      	movs	r2, #1
 8004baa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	2210      	movs	r2, #16
 8004bb0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004bb2:	187b      	adds	r3, r7, r1
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	2202      	movs	r2, #2
 8004bbc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004bbe:	187b      	adds	r3, r7, r1
 8004bc0:	2280      	movs	r2, #128	; 0x80
 8004bc2:	0212      	lsls	r2, r2, #8
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8004bc6:	187b      	adds	r3, r7, r1
 8004bc8:	22c0      	movs	r2, #192	; 0xc0
 8004bca:	0312      	lsls	r2, r2, #12
 8004bcc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f002 fa46 	bl	8007068 <HAL_RCC_OscConfig>
 8004bdc:	1e03      	subs	r3, r0, #0
 8004bde:	d001      	beq.n	8004be4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8004be0:	f000 f94c 	bl	8004e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004be4:	003b      	movs	r3, r7
 8004be6:	2207      	movs	r2, #7
 8004be8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bea:	003b      	movs	r3, r7
 8004bec:	2202      	movs	r2, #2
 8004bee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004bf0:	003b      	movs	r3, r7
 8004bf2:	2280      	movs	r2, #128	; 0x80
 8004bf4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004bf6:	003b      	movs	r3, r7
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004bfc:	003b      	movs	r3, r7
 8004bfe:	2101      	movs	r1, #1
 8004c00:	0018      	movs	r0, r3
 8004c02:	f002 fd4f 	bl	80076a4 <HAL_RCC_ClockConfig>
 8004c06:	1e03      	subs	r3, r0, #0
 8004c08:	d001      	beq.n	8004c0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004c0a:	f000 f937 	bl	8004e7c <Error_Handler>
  }
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b011      	add	sp, #68	; 0x44
 8004c14:	bd90      	pop	{r4, r7, pc}
	...

08004c18 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	0018      	movs	r0, r3
 8004c22:	230c      	movs	r3, #12
 8004c24:	001a      	movs	r2, r3
 8004c26:	2100      	movs	r1, #0
 8004c28:	f003 fa14 	bl	8008054 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004c2c:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c2e:	4a27      	ldr	r2, [pc, #156]	; (8004ccc <MX_ADC_Init+0xb4>)
 8004c30:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004c32:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004c38:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004c44:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004c56:	4b1c      	ldr	r3, [pc, #112]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004c5c:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004c62:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c68:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c6a:	22c2      	movs	r2, #194	; 0xc2
 8004c6c:	32ff      	adds	r2, #255	; 0xff
 8004c6e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c70:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c78:	2224      	movs	r2, #36	; 0x24
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c86:	0018      	movs	r0, r3
 8004c88:	f001 fc76 	bl	8006578 <HAL_ADC_Init>
 8004c8c:	1e03      	subs	r3, r0, #0
 8004c8e:	d001      	beq.n	8004c94 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8004c90:	f000 f8f4 	bl	8004e7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	2208      	movs	r2, #8
 8004c98:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	2280      	movs	r2, #128	; 0x80
 8004c9e:	0152      	lsls	r2, r2, #5
 8004ca0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	2280      	movs	r2, #128	; 0x80
 8004ca6:	0552      	lsls	r2, r2, #21
 8004ca8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004caa:	1d3a      	adds	r2, r7, #4
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004cae:	0011      	movs	r1, r2
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f001 fe01 	bl	80068b8 <HAL_ADC_ConfigChannel>
 8004cb6:	1e03      	subs	r3, r0, #0
 8004cb8:	d001      	beq.n	8004cbe <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8004cba:	f000 f8df 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b004      	add	sp, #16
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	20000098 	.word	0x20000098
 8004ccc:	40012400 	.word	0x40012400

08004cd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004cd4:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <MX_SPI1_Init+0x78>)
 8004cd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004cda:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cdc:	2282      	movs	r2, #130	; 0x82
 8004cde:	0052      	lsls	r2, r2, #1
 8004ce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ce8:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cea:	22e0      	movs	r2, #224	; 0xe0
 8004cec:	00d2      	lsls	r2, r2, #3
 8004cee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cf0:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004cf6:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004cfc:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cfe:	2280      	movs	r2, #128	; 0x80
 8004d00:	0092      	lsls	r2, r2, #2
 8004d02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d06:	2208      	movs	r2, #8
 8004d08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d1e:	2207      	movs	r2, #7
 8004d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d30:	0018      	movs	r0, r3
 8004d32:	f002 fddd 	bl	80078f0 <HAL_SPI_Init>
 8004d36:	1e03      	subs	r3, r0, #0
 8004d38:	d001      	beq.n	8004d3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004d3a:	f000 f89f 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	200000d8 	.word	0x200000d8
 8004d48:	40013000 	.word	0x40013000

08004d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b08b      	sub	sp, #44	; 0x2c
 8004d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d52:	2414      	movs	r4, #20
 8004d54:	193b      	adds	r3, r7, r4
 8004d56:	0018      	movs	r0, r3
 8004d58:	2314      	movs	r3, #20
 8004d5a:	001a      	movs	r2, r3
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f003 f979 	bl	8008054 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d62:	4b43      	ldr	r3, [pc, #268]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d64:	695a      	ldr	r2, [r3, #20]
 8004d66:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d68:	2180      	movs	r1, #128	; 0x80
 8004d6a:	0309      	lsls	r1, r1, #12
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	615a      	str	r2, [r3, #20]
 8004d70:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	031b      	lsls	r3, r3, #12
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d7e:	4b3c      	ldr	r3, [pc, #240]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d80:	695a      	ldr	r2, [r3, #20]
 8004d82:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d84:	2180      	movs	r1, #128	; 0x80
 8004d86:	03c9      	lsls	r1, r1, #15
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	615a      	str	r2, [r3, #20]
 8004d8c:	4b38      	ldr	r3, [pc, #224]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	03db      	lsls	r3, r3, #15
 8004d94:	4013      	ands	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d9a:	4b35      	ldr	r3, [pc, #212]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004da0:	2180      	movs	r1, #128	; 0x80
 8004da2:	0289      	lsls	r1, r1, #10
 8004da4:	430a      	orrs	r2, r1
 8004da6:	615a      	str	r2, [r3, #20]
 8004da8:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	029b      	lsls	r3, r3, #10
 8004db0:	4013      	ands	r3, r2
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db6:	4b2e      	ldr	r3, [pc, #184]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	4b2d      	ldr	r3, [pc, #180]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	02c9      	lsls	r1, r1, #11
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	615a      	str	r2, [r3, #20]
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	02db      	lsls	r3, r3, #11
 8004dcc:	4013      	ands	r3, r2
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_AD_Pin|ST7735_RESET_Pin|ST7735_CS_Pin, GPIO_PIN_RESET);
 8004dd2:	4928      	ldr	r1, [pc, #160]	; (8004e74 <MX_GPIO_Init+0x128>)
 8004dd4:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <MX_GPIO_Init+0x12c>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f002 f928 	bl	800702e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UP_Pin DOWN_Pin SEL_Pin */
  GPIO_InitStruct.Pin = SEL_Pin;
 8004dde:	193b      	adds	r3, r7, r4
 8004de0:	2280      	movs	r2, #128	; 0x80
 8004de2:	0152      	lsls	r2, r2, #5
 8004de4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004de6:	193b      	adds	r3, r7, r4
 8004de8:	2200      	movs	r2, #0
 8004dea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dec:	193b      	adds	r3, r7, r4
 8004dee:	2201      	movs	r2, #1
 8004df0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df2:	193a      	adds	r2, r7, r4
 8004df4:	2390      	movs	r3, #144	; 0x90
 8004df6:	05db      	lsls	r3, r3, #23
 8004df8:	0011      	movs	r1, r2
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f001 ff8a 	bl	8006d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8004e00:	193b      	adds	r3, r7, r4
 8004e02:	22c0      	movs	r2, #192	; 0xc0
 8004e04:	0112      	lsls	r2, r2, #4
 8004e06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e08:	193b      	adds	r3, r7, r4
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e0e:	193b      	adds	r3, r7, r4
 8004e10:	2201      	movs	r2, #1
 8004e12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e14:	193a      	adds	r2, r7, r4
 8004e16:	2390      	movs	r3, #144	; 0x90
 8004e18:	05db      	lsls	r3, r3, #23
 8004e1a:	0011      	movs	r1, r2
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f001 ff79 	bl	8006d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_AD_Pin ST7735_RESET_Pin ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_AD_Pin|ST7735_RESET_Pin|ST7735_CS_Pin;
 8004e22:	193b      	adds	r3, r7, r4
 8004e24:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <MX_GPIO_Init+0x128>)
 8004e26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e28:	193b      	adds	r3, r7, r4
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2e:	193b      	adds	r3, r7, r4
 8004e30:	2200      	movs	r2, #0
 8004e32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e34:	193b      	adds	r3, r7, r4
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e3a:	193b      	adds	r3, r7, r4
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <MX_GPIO_Init+0x12c>)
 8004e3e:	0019      	movs	r1, r3
 8004e40:	0010      	movs	r0, r2
 8004e42:	f001 ff67 	bl	8006d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : OPAMP_CALIB_Pin */
  GPIO_InitStruct.Pin = OPAMP_CALIB_Pin;
 8004e46:	0021      	movs	r1, r4
 8004e48:	187b      	adds	r3, r7, r1
 8004e4a:	2280      	movs	r2, #128	; 0x80
 8004e4c:	0152      	lsls	r2, r2, #5
 8004e4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e50:	187b      	adds	r3, r7, r1
 8004e52:	2200      	movs	r2, #0
 8004e54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	2201      	movs	r2, #1
 8004e5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OPAMP_CALIB_GPIO_Port, &GPIO_InitStruct);
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	4a06      	ldr	r2, [pc, #24]	; (8004e78 <MX_GPIO_Init+0x12c>)
 8004e60:	0019      	movs	r1, r3
 8004e62:	0010      	movs	r0, r2
 8004e64:	f001 ff56 	bl	8006d14 <HAL_GPIO_Init>

}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b00b      	add	sp, #44	; 0x2c
 8004e6e:	bd90      	pop	{r4, r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	00000406 	.word	0x00000406
 8004e78:	48000400 	.word	0x48000400

08004e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e80:	b672      	cpsid	i
}
 8004e82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e84:	e7fe      	b.n	8004e84 <Error_Handler+0x8>
	...

08004e88 <pHMeter_process>:
/*
 *  @ Function; pHMeter_process()
 *  @ Description; handles the screen views
 */
void pHMeter_process(void)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0

	uint8_t pageChanged = 0;
 8004e8e:	1dfb      	adds	r3, r7, #7
 8004e90:	2200      	movs	r2, #0
 8004e92:	701a      	strb	r2, [r3, #0]

	if(first)
 8004e94:	4b1b      	ldr	r3, [pc, #108]	; (8004f04 <pHMeter_process+0x7c>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d001      	beq.n	8004ea0 <pHMeter_process+0x18>
		idlePage();
 8004e9c:	f000 f8ec 	bl	8005078 <idlePage>

	// Get a new pH value
	pH_read();
 8004ea0:	f000 f836 	bl	8004f10 <pH_read>

    // New pH status evaluation
	pHStatus_update();
 8004ea4:	f000 fe22 	bl	8005aec <pHStatus_update>

	// New process status evaluation
	pageChanged = processStatus_update();
 8004ea8:	1dfc      	adds	r4, r7, #7
 8004eaa:	f000 fde5 	bl	8005a78 <processStatus_update>
 8004eae:	0003      	movs	r3, r0
 8004eb0:	7023      	strb	r3, [r4, #0]

	switch(process_status)
 8004eb2:	4b15      	ldr	r3, [pc, #84]	; (8004f08 <pHMeter_process+0x80>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d007      	beq.n	8004eca <pHMeter_process+0x42>
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d00b      	beq.n	8004ed6 <pHMeter_process+0x4e>
	{

		default:
		case MAIN_PROCESS:

			mainPage(pageChanged);
 8004ebe:	1dfb      	adds	r3, r7, #7
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f000 f950 	bl	8005168 <mainPage>

			break;
 8004ec8:	e00b      	b.n	8004ee2 <pHMeter_process+0x5a>

		case SW_PROCESS:

			softwareCalibPage(pageChanged);
 8004eca:	1dfb      	adds	r3, r7, #7
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	0018      	movs	r0, r3
 8004ed0:	f000 fafe 	bl	80054d0 <softwareCalibPage>

			break;
 8004ed4:	e005      	b.n	8004ee2 <pHMeter_process+0x5a>

		case HW_PROCESS:

			circuitCalibPage(pageChanged);
 8004ed6:	1dfb      	adds	r3, r7, #7
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	0018      	movs	r0, r3
 8004edc:	f000 f9fa 	bl	80052d4 <circuitCalibPage>

			break;
 8004ee0:	46c0      	nop			; (mov r8, r8)

	}


	if(first == 1)
 8004ee2:	4b08      	ldr	r3, [pc, #32]	; (8004f04 <pHMeter_process+0x7c>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d102      	bne.n	8004ef0 <pHMeter_process+0x68>
		first = 0;
 8004eea:	4b06      	ldr	r3, [pc, #24]	; (8004f04 <pHMeter_process+0x7c>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	701a      	strb	r2, [r3, #0]

	joysticHandler(elements);
 8004ef0:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <pHMeter_process+0x84>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 fc4f 	bl	8005798 <joysticHandler>

}
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	46bd      	mov	sp, r7
 8004efe:	b003      	add	sp, #12
 8004f00:	bd90      	pop	{r4, r7, pc}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	20000018 	.word	0x20000018
 8004f08:	20000020 	.word	0x20000020
 8004f0c:	20000140 	.word	0x20000140

08004f10 <pH_read>:
 *  @ Function; pH_read()
 *  @ Description; read a new pH value from the probe
 *  @ every PH_PROCESS_DELAY seconds
 */
void pH_read(void)
{
 8004f10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0

	uint32_t rawAdcData;
	float rawAdcmV;
	float pHValue = 0.0;
 8004f16:	2300      	movs	r3, #0
 8004f18:	60fb      	str	r3, [r7, #12]

	static float buff[6] = {0};
	static uint32_t count = 0;

	if(getDelayMs(pHTimeStamp) < PH_PROCESS_DELAY)
 8004f1a:	4b4d      	ldr	r3, [pc, #308]	; (8005050 <pH_read+0x140>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	0018      	movs	r0, r3
 8004f20:	f001 f974 	bl	800620c <getDelayMs>
 8004f24:	0002      	movs	r2, r0
 8004f26:	23fa      	movs	r3, #250	; 0xfa
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d200      	bcs.n	8004f30 <pH_read+0x20>
 8004f2e:	e08a      	b.n	8005046 <pH_read+0x136>
		return;

	pHTimeStamp = getTimeMs();
 8004f30:	f001 f960 	bl	80061f4 <getTimeMs>
 8004f34:	0002      	movs	r2, r0
 8004f36:	4b46      	ldr	r3, [pc, #280]	; (8005050 <pH_read+0x140>)
 8004f38:	601a      	str	r2, [r3, #0]

	rawAdcData = HAL_ADC_GetValue(&hadc);
 8004f3a:	4b46      	ldr	r3, [pc, #280]	; (8005054 <pH_read+0x144>)
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f001 fcaf 	bl	80068a0 <HAL_ADC_GetValue>
 8004f42:	0003      	movs	r3, r0
 8004f44:	607b      	str	r3, [r7, #4]

	rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fd fab8 	bl	80024bc <__aeabi_ui2d>
 8004f4c:	4a42      	ldr	r2, [pc, #264]	; (8005058 <pH_read+0x148>)
 8004f4e:	4b43      	ldr	r3, [pc, #268]	; (800505c <pH_read+0x14c>)
 8004f50:	f7fc fc50 	bl	80017f4 <__aeabi_dmul>
 8004f54:	0002      	movs	r2, r0
 8004f56:	000b      	movs	r3, r1
 8004f58:	0010      	movs	r0, r2
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	f7fd fb1c 	bl	8002598 <__aeabi_d2f>
 8004f60:	1c03      	adds	r3, r0, #0
 8004f62:	603b      	str	r3, [r7, #0]

	buff[count%6] = ( ( PH_V_SLOPE() * ( rawAdcmV - V_OFFSET() ) ) + PH_OFFSET() );
 8004f64:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <pH_read+0x150>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b3d      	ldr	r3, [pc, #244]	; (8005060 <pH_read+0x150>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	1c19      	adds	r1, r3, #0
 8004f6e:	1c10      	adds	r0, r2, #0
 8004f70:	f7fb ff3a 	bl	8000de8 <__aeabi_fsub>
 8004f74:	1c03      	adds	r3, r0, #0
 8004f76:	1c1c      	adds	r4, r3, #0
 8004f78:	4b3a      	ldr	r3, [pc, #232]	; (8005064 <pH_read+0x154>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b39      	ldr	r3, [pc, #228]	; (8005064 <pH_read+0x154>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	1c19      	adds	r1, r3, #0
 8004f82:	1c10      	adds	r0, r2, #0
 8004f84:	f7fb ff30 	bl	8000de8 <__aeabi_fsub>
 8004f88:	1c03      	adds	r3, r0, #0
 8004f8a:	1c19      	adds	r1, r3, #0
 8004f8c:	1c20      	adds	r0, r4, #0
 8004f8e:	f7fb fc3d 	bl	800080c <__aeabi_fdiv>
 8004f92:	1c03      	adds	r3, r0, #0
 8004f94:	1c1c      	adds	r4, r3, #0
 8004f96:	4b33      	ldr	r3, [pc, #204]	; (8005064 <pH_read+0x154>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	1c19      	adds	r1, r3, #0
 8004f9c:	6838      	ldr	r0, [r7, #0]
 8004f9e:	f7fb ff23 	bl	8000de8 <__aeabi_fsub>
 8004fa2:	1c03      	adds	r3, r0, #0
 8004fa4:	1c19      	adds	r1, r3, #0
 8004fa6:	1c20      	adds	r0, r4, #0
 8004fa8:	f7fb fdf8 	bl	8000b9c <__aeabi_fmul>
 8004fac:	1c03      	adds	r3, r0, #0
 8004fae:	1c1e      	adds	r6, r3, #0
 8004fb0:	4b2b      	ldr	r3, [pc, #172]	; (8005060 <pH_read+0x150>)
 8004fb2:	681c      	ldr	r4, [r3, #0]
 8004fb4:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <pH_read+0x158>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2106      	movs	r1, #6
 8004fba:	0018      	movs	r0, r3
 8004fbc:	f7fb f928 	bl	8000210 <__aeabi_uidivmod>
 8004fc0:	000b      	movs	r3, r1
 8004fc2:	001d      	movs	r5, r3
 8004fc4:	1c21      	adds	r1, r4, #0
 8004fc6:	1c30      	adds	r0, r6, #0
 8004fc8:	f7fb fa82 	bl	80004d0 <__aeabi_fadd>
 8004fcc:	1c03      	adds	r3, r0, #0
 8004fce:	1c19      	adds	r1, r3, #0
 8004fd0:	4b26      	ldr	r3, [pc, #152]	; (800506c <pH_read+0x15c>)
 8004fd2:	00aa      	lsls	r2, r5, #2
 8004fd4:	50d1      	str	r1, [r2, r3]

	pHValue = buff[count%6];
 8004fd6:	4b24      	ldr	r3, [pc, #144]	; (8005068 <pH_read+0x158>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2106      	movs	r1, #6
 8004fdc:	0018      	movs	r0, r3
 8004fde:	f7fb f917 	bl	8000210 <__aeabi_uidivmod>
 8004fe2:	000b      	movs	r3, r1
 8004fe4:	001a      	movs	r2, r3
 8004fe6:	4b21      	ldr	r3, [pc, #132]	; (800506c <pH_read+0x15c>)
 8004fe8:	0092      	lsls	r2, r2, #2
 8004fea:	58d3      	ldr	r3, [r2, r3]
 8004fec:	60fb      	str	r3, [r7, #12]

	count++;
 8004fee:	4b1e      	ldr	r3, [pc, #120]	; (8005068 <pH_read+0x158>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	4b1c      	ldr	r3, [pc, #112]	; (8005068 <pH_read+0x158>)
 8004ff6:	601a      	str	r2, [r3, #0]

	if(count >= 6)
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <pH_read+0x158>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b05      	cmp	r3, #5
 8004ffe:	d91a      	bls.n	8005036 <pH_read+0x126>
	{

		pHValue = 0.0;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
		for(int i = 0 ; i < 6 ; i++)
 8005004:	2300      	movs	r3, #0
 8005006:	60bb      	str	r3, [r7, #8]
 8005008:	e00c      	b.n	8005024 <pH_read+0x114>
			pHValue += buff[i];
 800500a:	4b18      	ldr	r3, [pc, #96]	; (800506c <pH_read+0x15c>)
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	0092      	lsls	r2, r2, #2
 8005010:	58d3      	ldr	r3, [r2, r3]
 8005012:	1c19      	adds	r1, r3, #0
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f7fb fa5b 	bl	80004d0 <__aeabi_fadd>
 800501a:	1c03      	adds	r3, r0, #0
 800501c:	60fb      	str	r3, [r7, #12]
		for(int i = 0 ; i < 6 ; i++)
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	3301      	adds	r3, #1
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b05      	cmp	r3, #5
 8005028:	ddef      	ble.n	800500a <pH_read+0xfa>

		pHValue = ( pHValue / 6.0 );
 800502a:	4911      	ldr	r1, [pc, #68]	; (8005070 <pH_read+0x160>)
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7fb fbed 	bl	800080c <__aeabi_fdiv>
 8005032:	1c03      	adds	r3, r0, #0
 8005034:	60fb      	str	r3, [r7, #12]

	}

	pH_current = pHValue;
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <pH_read+0x164>)
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start(&hadc);
 800503c:	4b05      	ldr	r3, [pc, #20]	; (8005054 <pH_read+0x144>)
 800503e:	0018      	movs	r0, r3
 8005040:	f001 fbda 	bl	80067f8 <HAL_ADC_Start>
 8005044:	e000      	b.n	8005048 <pH_read+0x138>
		return;
 8005046:	46c0      	nop			; (mov r8, r8)

}
 8005048:	46bd      	mov	sp, r7
 800504a:	b005      	add	sp, #20
 800504c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	20000220 	.word	0x20000220
 8005054:	20000098 	.word	0x20000098
 8005058:	66666666 	.word	0x66666666
 800505c:	3f4a6666 	.word	0x3f4a6666
 8005060:	20000024 	.word	0x20000024
 8005064:	2000002c 	.word	0x2000002c
 8005068:	20000228 	.word	0x20000228
 800506c:	2000022c 	.word	0x2000022c
 8005070:	40c00000 	.word	0x40c00000
 8005074:	2000001c 	.word	0x2000001c

08005078 <idlePage>:
/*
 * 	@ Function: st7735_hallScreen
 * 	@ Description: Presentation screen
 */
void idlePage(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af04      	add	r7, sp, #16

	  ST7735_SetRotation(1);
 800507e:	2001      	movs	r0, #1
 8005080:	f7fe ff38 	bl	8003ef4 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "UnNatural presents", Font_7x10, WHITE,BLACK);
 8005084:	4b31      	ldr	r3, [pc, #196]	; (800514c <idlePage+0xd4>)
 8005086:	4832      	ldr	r0, [pc, #200]	; (8005150 <idlePage+0xd8>)
 8005088:	2200      	movs	r2, #0
 800508a:	9202      	str	r2, [sp, #8]
 800508c:	4a31      	ldr	r2, [pc, #196]	; (8005154 <idlePage+0xdc>)
 800508e:	9201      	str	r2, [sp, #4]
 8005090:	466a      	mov	r2, sp
 8005092:	6859      	ldr	r1, [r3, #4]
 8005094:	6011      	str	r1, [r2, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	0002      	movs	r2, r0
 800509a:	2100      	movs	r1, #0
 800509c:	2000      	movs	r0, #0
 800509e:	f7ff f89d 	bl	80041dc <ST7735_WriteString>
	  HAL_Delay(1000);
 80050a2:	23fa      	movs	r3, #250	; 0xfa
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	0018      	movs	r0, r3
 80050a8:	f001 fa42 	bl	8006530 <HAL_Delay>
	  fillScreen(BLACK);
 80050ac:	2000      	movs	r0, #0
 80050ae:	f7fe fdad 	bl	8003c0c <fillScreen>

	  ST7735_SetRotation(1);
 80050b2:	2001      	movs	r0, #1
 80050b4:	f7fe ff1e 	bl	8003ef4 <ST7735_SetRotation>
	  ST7735_WriteString(20, 50, "pH-METER V0", Font_11x18, GREEN,BLACK);
 80050b8:	4b27      	ldr	r3, [pc, #156]	; (8005158 <idlePage+0xe0>)
 80050ba:	4828      	ldr	r0, [pc, #160]	; (800515c <idlePage+0xe4>)
 80050bc:	2200      	movs	r2, #0
 80050be:	9202      	str	r2, [sp, #8]
 80050c0:	22fc      	movs	r2, #252	; 0xfc
 80050c2:	00d2      	lsls	r2, r2, #3
 80050c4:	9201      	str	r2, [sp, #4]
 80050c6:	466a      	mov	r2, sp
 80050c8:	6859      	ldr	r1, [r3, #4]
 80050ca:	6011      	str	r1, [r2, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	0002      	movs	r2, r0
 80050d0:	2132      	movs	r1, #50	; 0x32
 80050d2:	2014      	movs	r0, #20
 80050d4:	f7ff f882 	bl	80041dc <ST7735_WriteString>
	  HAL_Delay(1000);
 80050d8:	23fa      	movs	r3, #250	; 0xfa
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	0018      	movs	r0, r3
 80050de:	f001 fa27 	bl	8006530 <HAL_Delay>
	  fillScreen(BLACK);
 80050e2:	2000      	movs	r0, #0
 80050e4:	f7fe fd92 	bl	8003c0c <fillScreen>

	  ST7735_SetRotation(1);
 80050e8:	2001      	movs	r0, #1
 80050ea:	f7fe ff03 	bl	8003ef4 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "A product developed by", Font_7x10, WHITE,BLACK);
 80050ee:	4b17      	ldr	r3, [pc, #92]	; (800514c <idlePage+0xd4>)
 80050f0:	481b      	ldr	r0, [pc, #108]	; (8005160 <idlePage+0xe8>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	9202      	str	r2, [sp, #8]
 80050f6:	4a17      	ldr	r2, [pc, #92]	; (8005154 <idlePage+0xdc>)
 80050f8:	9201      	str	r2, [sp, #4]
 80050fa:	466a      	mov	r2, sp
 80050fc:	6859      	ldr	r1, [r3, #4]
 80050fe:	6011      	str	r1, [r2, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	0002      	movs	r2, r0
 8005104:	2100      	movs	r1, #0
 8005106:	2000      	movs	r0, #0
 8005108:	f7ff f868 	bl	80041dc <ST7735_WriteString>
	  HAL_Delay(1000);
 800510c:	23fa      	movs	r3, #250	; 0xfa
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	0018      	movs	r0, r3
 8005112:	f001 fa0d 	bl	8006530 <HAL_Delay>
	  ST7735_WriteString(20, 50, "Eng. Andrea", Font_11x18, GREEN,BLACK);
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <idlePage+0xe0>)
 8005118:	4812      	ldr	r0, [pc, #72]	; (8005164 <idlePage+0xec>)
 800511a:	2200      	movs	r2, #0
 800511c:	9202      	str	r2, [sp, #8]
 800511e:	22fc      	movs	r2, #252	; 0xfc
 8005120:	00d2      	lsls	r2, r2, #3
 8005122:	9201      	str	r2, [sp, #4]
 8005124:	466a      	mov	r2, sp
 8005126:	6859      	ldr	r1, [r3, #4]
 8005128:	6011      	str	r1, [r2, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	0002      	movs	r2, r0
 800512e:	2132      	movs	r1, #50	; 0x32
 8005130:	2014      	movs	r0, #20
 8005132:	f7ff f853 	bl	80041dc <ST7735_WriteString>
	  HAL_Delay(1000);
 8005136:	23fa      	movs	r3, #250	; 0xfa
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	0018      	movs	r0, r3
 800513c:	f001 f9f8 	bl	8006530 <HAL_Delay>
	  fillScreen(BLACK);
 8005140:	2000      	movs	r0, #0
 8005142:	f7fe fd63 	bl	8003c0c <fillScreen>

}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000000 	.word	0x20000000
 8005150:	08008080 	.word	0x08008080
 8005154:	0000ffff 	.word	0x0000ffff
 8005158:	20000008 	.word	0x20000008
 800515c:	08008094 	.word	0x08008094
 8005160:	080080a0 	.word	0x080080a0
 8005164:	080080b8 	.word	0x080080b8

08005168 <mainPage>:
 *  @ Function; mainPage
 *  @ Description; This is the main page where the current
 *  @ value of pH is shown
 */
void mainPage(uint8_t updatePage)
{
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b089      	sub	sp, #36	; 0x24
 800516c:	af04      	add	r7, sp, #16
 800516e:	0002      	movs	r2, r0
 8005170:	1dfb      	adds	r3, r7, #7
 8005172:	701a      	strb	r2, [r3, #0]

	static PH_STATUS main_pH_status = IDLE;
	static uint16_t mainColor = GREEN;


	if( ( updatePage == 1 ) || ( pH_status != main_pH_status ) )
 8005174:	1dfb      	adds	r3, r7, #7
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d005      	beq.n	8005188 <mainPage+0x20>
 800517c:	4b49      	ldr	r3, [pc, #292]	; (80052a4 <mainPage+0x13c>)
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	4b49      	ldr	r3, [pc, #292]	; (80052a8 <mainPage+0x140>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d05f      	beq.n	8005248 <mainPage+0xe0>
	{

		switch(pH_status)
 8005188:	4b46      	ldr	r3, [pc, #280]	; (80052a4 <mainPage+0x13c>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b05      	cmp	r3, #5
 800518e:	d01a      	beq.n	80051c6 <mainPage+0x5e>
 8005190:	dc06      	bgt.n	80051a0 <mainPage+0x38>
 8005192:	2b04      	cmp	r3, #4
 8005194:	d028      	beq.n	80051e8 <mainPage+0x80>
 8005196:	dc03      	bgt.n	80051a0 <mainPage+0x38>
 8005198:	2b01      	cmp	r3, #1
 800519a:	d046      	beq.n	800522a <mainPage+0xc2>
 800519c:	2b02      	cmp	r3, #2
 800519e:	d035      	beq.n	800520c <mainPage+0xa4>
		{

			default:
			case NEUTRAL:

				main_pH_status = NEUTRAL;
 80051a0:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <mainPage+0x140>)
 80051a2:	2203      	movs	r2, #3
 80051a4:	701a      	strb	r2, [r3, #0]

				background = GREEN;
 80051a6:	4b41      	ldr	r3, [pc, #260]	; (80052ac <mainPage+0x144>)
 80051a8:	22fc      	movs	r2, #252	; 0xfc
 80051aa:	00d2      	lsls	r2, r2, #3
 80051ac:	801a      	strh	r2, [r3, #0]

				fillScreen(GREEN);
 80051ae:	23fc      	movs	r3, #252	; 0xfc
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7fe fd2a 	bl	8003c0c <fillScreen>
				mainPage_graphics();
 80051b8:	f000 fcee 	bl	8005b98 <mainPage_graphics>

				mainColor = GREEN;
 80051bc:	4b3c      	ldr	r3, [pc, #240]	; (80052b0 <mainPage+0x148>)
 80051be:	22fc      	movs	r2, #252	; 0xfc
 80051c0:	00d2      	lsls	r2, r2, #3
 80051c2:	801a      	strh	r2, [r3, #0]

				break;
 80051c4:	e041      	b.n	800524a <mainPage+0xe2>

			case STRONG_ACID:

				main_pH_status = STRONG_ACID;
 80051c6:	4b38      	ldr	r3, [pc, #224]	; (80052a8 <mainPage+0x140>)
 80051c8:	2205      	movs	r2, #5
 80051ca:	701a      	strb	r2, [r3, #0]

				background = RED;
 80051cc:	4b37      	ldr	r3, [pc, #220]	; (80052ac <mainPage+0x144>)
 80051ce:	4a39      	ldr	r2, [pc, #228]	; (80052b4 <mainPage+0x14c>)
 80051d0:	801a      	strh	r2, [r3, #0]

				fillScreen(RED);
 80051d2:	23f8      	movs	r3, #248	; 0xf8
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	0018      	movs	r0, r3
 80051d8:	f7fe fd18 	bl	8003c0c <fillScreen>
				mainPage_graphics();
 80051dc:	f000 fcdc 	bl	8005b98 <mainPage_graphics>

				mainColor = RED;
 80051e0:	4b33      	ldr	r3, [pc, #204]	; (80052b0 <mainPage+0x148>)
 80051e2:	4a34      	ldr	r2, [pc, #208]	; (80052b4 <mainPage+0x14c>)
 80051e4:	801a      	strh	r2, [r3, #0]

				break;
 80051e6:	e030      	b.n	800524a <mainPage+0xe2>

			case ACID:

				main_pH_status = ACID;
 80051e8:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <mainPage+0x140>)
 80051ea:	2204      	movs	r2, #4
 80051ec:	701a      	strb	r2, [r3, #0]

				background = YELLOW;
 80051ee:	4b2f      	ldr	r3, [pc, #188]	; (80052ac <mainPage+0x144>)
 80051f0:	2220      	movs	r2, #32
 80051f2:	4252      	negs	r2, r2
 80051f4:	801a      	strh	r2, [r3, #0]

				fillScreen(YELLOW);
 80051f6:	4b30      	ldr	r3, [pc, #192]	; (80052b8 <mainPage+0x150>)
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7fe fd07 	bl	8003c0c <fillScreen>
				mainPage_graphics();
 80051fe:	f000 fccb 	bl	8005b98 <mainPage_graphics>

				mainColor = YELLOW;
 8005202:	4b2b      	ldr	r3, [pc, #172]	; (80052b0 <mainPage+0x148>)
 8005204:	2220      	movs	r2, #32
 8005206:	4252      	negs	r2, r2
 8005208:	801a      	strh	r2, [r3, #0]

				break;
 800520a:	e01e      	b.n	800524a <mainPage+0xe2>

			case BASE:

				main_pH_status = BASE;
 800520c:	4b26      	ldr	r3, [pc, #152]	; (80052a8 <mainPage+0x140>)
 800520e:	2202      	movs	r2, #2
 8005210:	701a      	strb	r2, [r3, #0]

				background = BLUE;
 8005212:	4b26      	ldr	r3, [pc, #152]	; (80052ac <mainPage+0x144>)
 8005214:	22ff      	movs	r2, #255	; 0xff
 8005216:	801a      	strh	r2, [r3, #0]

				fillScreen(BLUE);
 8005218:	20ff      	movs	r0, #255	; 0xff
 800521a:	f7fe fcf7 	bl	8003c0c <fillScreen>
				mainPage_graphics();
 800521e:	f000 fcbb 	bl	8005b98 <mainPage_graphics>

				mainColor = BLUE;
 8005222:	4b23      	ldr	r3, [pc, #140]	; (80052b0 <mainPage+0x148>)
 8005224:	22ff      	movs	r2, #255	; 0xff
 8005226:	801a      	strh	r2, [r3, #0]

				break;
 8005228:	e00f      	b.n	800524a <mainPage+0xe2>

			case STRONG_BASE:

				main_pH_status = STRONG_BASE;
 800522a:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <mainPage+0x140>)
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]

				background = DARK_BLUE;
 8005230:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <mainPage+0x144>)
 8005232:	221f      	movs	r2, #31
 8005234:	801a      	strh	r2, [r3, #0]

				fillScreen(DARK_BLUE);
 8005236:	201f      	movs	r0, #31
 8005238:	f7fe fce8 	bl	8003c0c <fillScreen>
				mainPage_graphics();
 800523c:	f000 fcac 	bl	8005b98 <mainPage_graphics>

				mainColor = DARK_BLUE;
 8005240:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <mainPage+0x148>)
 8005242:	221f      	movs	r2, #31
 8005244:	801a      	strh	r2, [r3, #0]

				break;
 8005246:	e000      	b.n	800524a <mainPage+0xe2>

		}

	}
 8005248:	46c0      	nop			; (mov r8, r8)

	if(updatePage == 1)
 800524a:	1dfb      	adds	r3, r7, #7
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d109      	bne.n	8005266 <mainPage+0xfe>
	{

		elements = mainElement;
 8005252:	4b1a      	ldr	r3, [pc, #104]	; (80052bc <mainPage+0x154>)
 8005254:	4a1a      	ldr	r2, [pc, #104]	; (80052c0 <mainPage+0x158>)
 8005256:	601a      	str	r2, [r3, #0]
		elementIndexLim = MAIN_NUM_OF_ELEMENTS;
 8005258:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <mainPage+0x15c>)
 800525a:	2202      	movs	r2, #2
 800525c:	701a      	strb	r2, [r3, #0]
		background = mainColor;
 800525e:	4b14      	ldr	r3, [pc, #80]	; (80052b0 <mainPage+0x148>)
 8005260:	881a      	ldrh	r2, [r3, #0]
 8005262:	4b12      	ldr	r3, [pc, #72]	; (80052ac <mainPage+0x144>)
 8005264:	801a      	strh	r2, [r3, #0]

	}

	char pHstring[6];

	floatToString(pH_current, pHstring);
 8005266:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <mainPage+0x160>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2408      	movs	r4, #8
 800526c:	193a      	adds	r2, r7, r4
 800526e:	0011      	movs	r1, r2
 8005270:	1c18      	adds	r0, r3, #0
 8005272:	f000 ffe9 	bl	8006248 <floatToString>

	ST7735_SetRotation(1);
 8005276:	2001      	movs	r0, #1
 8005278:	f7fe fe3c 	bl	8003ef4 <ST7735_SetRotation>
	ST7735_WriteString(MAIN_PH_VAL_POSX, MAIN_PH_VAL_POSY, pHstring, Font_16x26, WHITE, mainColor);
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <mainPage+0x148>)
 800527e:	881a      	ldrh	r2, [r3, #0]
 8005280:	4b12      	ldr	r3, [pc, #72]	; (80052cc <mainPage+0x164>)
 8005282:	1938      	adds	r0, r7, r4
 8005284:	9202      	str	r2, [sp, #8]
 8005286:	4a12      	ldr	r2, [pc, #72]	; (80052d0 <mainPage+0x168>)
 8005288:	9201      	str	r2, [sp, #4]
 800528a:	466a      	mov	r2, sp
 800528c:	6859      	ldr	r1, [r3, #4]
 800528e:	6011      	str	r1, [r2, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	0002      	movs	r2, r0
 8005294:	2138      	movs	r1, #56	; 0x38
 8005296:	2014      	movs	r0, #20
 8005298:	f7fe ffa0 	bl	80041dc <ST7735_WriteString>

}
 800529c:	46c0      	nop			; (mov r8, r8)
 800529e:	46bd      	mov	sp, r7
 80052a0:	b005      	add	sp, #20
 80052a2:	bd90      	pop	{r4, r7, pc}
 80052a4:	20000021 	.word	0x20000021
 80052a8:	20000244 	.word	0x20000244
 80052ac:	20000224 	.word	0x20000224
 80052b0:	20000034 	.word	0x20000034
 80052b4:	fffff800 	.word	0xfffff800
 80052b8:	0000ffe0 	.word	0x0000ffe0
 80052bc:	20000140 	.word	0x20000140
 80052c0:	200001d4 	.word	0x200001d4
 80052c4:	2000021d 	.word	0x2000021d
 80052c8:	2000001c 	.word	0x2000001c
 80052cc:	20000010 	.word	0x20000010
 80052d0:	0000ffff 	.word	0x0000ffff

080052d4 <circuitCalibPage>:
 *  @ Function; circuitCalibPage
 *  @ Description; When user push left button, this page
 *  @ indicates the OPAMP calibration
 */
void circuitCalibPage(uint8_t updatePage)
{
 80052d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052d6:	b08b      	sub	sp, #44	; 0x2c
 80052d8:	af02      	add	r7, sp, #8
 80052da:	0002      	movs	r2, r0
 80052dc:	1dfb      	adds	r3, r7, #7
 80052de:	701a      	strb	r2, [r3, #0]

	static float hLineBuff[6] = {0};
	static uint32_t hLineCount = 0;
	static uint32_t hLine_old = 128;

	uint16_t indicatorsColor = RED;
 80052e0:	231e      	movs	r3, #30
 80052e2:	18fb      	adds	r3, r7, r3
 80052e4:	4a6d      	ldr	r2, [pc, #436]	; (800549c <circuitCalibPage+0x1c8>)
 80052e6:	801a      	strh	r2, [r3, #0]

	uint16_t rawAdcData = 128;
 80052e8:	2312      	movs	r3, #18
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	2280      	movs	r2, #128	; 0x80
 80052ee:	801a      	strh	r2, [r3, #0]
	uint32_t hLine = 128;
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	61bb      	str	r3, [r7, #24]
	float rawAdcmV = 0.0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]


	if(updatePage == 1)
 80052f8:	1dfb      	adds	r3, r7, #7
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d10c      	bne.n	800531a <circuitCalibPage+0x46>
	{

		fillScreen(BLACK);
 8005300:	2000      	movs	r0, #0
 8005302:	f7fe fc83 	bl	8003c0c <fillScreen>
		circuitCalibPage_graphics();
 8005306:	f000 fc7b 	bl	8005c00 <circuitCalibPage_graphics>
		background = BLACK;
 800530a:	4b65      	ldr	r3, [pc, #404]	; (80054a0 <circuitCalibPage+0x1cc>)
 800530c:	2200      	movs	r2, #0
 800530e:	801a      	strh	r2, [r3, #0]

		HAL_ADC_Start(&hadc);
 8005310:	4b64      	ldr	r3, [pc, #400]	; (80054a4 <circuitCalibPage+0x1d0>)
 8005312:	0018      	movs	r0, r3
 8005314:	f001 fa70 	bl	80067f8 <HAL_ADC_Start>

		return;
 8005318:	e0bc      	b.n	8005494 <circuitCalibPage+0x1c0>

	}

	rawAdcData = HAL_ADC_GetValue(&hadc);
 800531a:	4b62      	ldr	r3, [pc, #392]	; (80054a4 <circuitCalibPage+0x1d0>)
 800531c:	0018      	movs	r0, r3
 800531e:	f001 fabf 	bl	80068a0 <HAL_ADC_GetValue>
 8005322:	0002      	movs	r2, r0
 8005324:	2112      	movs	r1, #18
 8005326:	187b      	adds	r3, r7, r1
 8005328:	801a      	strh	r2, [r3, #0]
	rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 800532a:	187b      	adds	r3, r7, r1
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	0018      	movs	r0, r3
 8005330:	f7fd f894 	bl	800245c <__aeabi_i2d>
 8005334:	4a5c      	ldr	r2, [pc, #368]	; (80054a8 <circuitCalibPage+0x1d4>)
 8005336:	4b5d      	ldr	r3, [pc, #372]	; (80054ac <circuitCalibPage+0x1d8>)
 8005338:	f7fc fa5c 	bl	80017f4 <__aeabi_dmul>
 800533c:	0002      	movs	r2, r0
 800533e:	000b      	movs	r3, r1
 8005340:	0010      	movs	r0, r2
 8005342:	0019      	movs	r1, r3
 8005344:	f7fd f928 	bl	8002598 <__aeabi_d2f>
 8005348:	1c03      	adds	r3, r0, #0
 800534a:	60fb      	str	r3, [r7, #12]
	hLineBuff[hLineCount%6] = 128.0 - ( rawAdcmV * 32.72); // ( 128 pixels / 3.3 V ) = 38.79
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7fd f8db 	bl	8002508 <__aeabi_f2d>
 8005352:	4a57      	ldr	r2, [pc, #348]	; (80054b0 <circuitCalibPage+0x1dc>)
 8005354:	4b57      	ldr	r3, [pc, #348]	; (80054b4 <circuitCalibPage+0x1e0>)
 8005356:	f7fc fa4d 	bl	80017f4 <__aeabi_dmul>
 800535a:	0002      	movs	r2, r0
 800535c:	000b      	movs	r3, r1
 800535e:	2000      	movs	r0, #0
 8005360:	4955      	ldr	r1, [pc, #340]	; (80054b8 <circuitCalibPage+0x1e4>)
 8005362:	f7fc fcb3 	bl	8001ccc <__aeabi_dsub>
 8005366:	0002      	movs	r2, r0
 8005368:	000b      	movs	r3, r1
 800536a:	0014      	movs	r4, r2
 800536c:	001d      	movs	r5, r3
 800536e:	4b53      	ldr	r3, [pc, #332]	; (80054bc <circuitCalibPage+0x1e8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2106      	movs	r1, #6
 8005374:	0018      	movs	r0, r3
 8005376:	f7fa ff4b 	bl	8000210 <__aeabi_uidivmod>
 800537a:	000b      	movs	r3, r1
 800537c:	001e      	movs	r6, r3
 800537e:	0020      	movs	r0, r4
 8005380:	0029      	movs	r1, r5
 8005382:	f7fd f909 	bl	8002598 <__aeabi_d2f>
 8005386:	1c01      	adds	r1, r0, #0
 8005388:	4b4d      	ldr	r3, [pc, #308]	; (80054c0 <circuitCalibPage+0x1ec>)
 800538a:	00b2      	lsls	r2, r6, #2
 800538c:	50d1      	str	r1, [r2, r3]

	hLine = hLineBuff[hLineCount%6];
 800538e:	4b4b      	ldr	r3, [pc, #300]	; (80054bc <circuitCalibPage+0x1e8>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2106      	movs	r1, #6
 8005394:	0018      	movs	r0, r3
 8005396:	f7fa ff3b 	bl	8000210 <__aeabi_uidivmod>
 800539a:	000b      	movs	r3, r1
 800539c:	001a      	movs	r2, r3
 800539e:	4b48      	ldr	r3, [pc, #288]	; (80054c0 <circuitCalibPage+0x1ec>)
 80053a0:	0092      	lsls	r2, r2, #2
 80053a2:	58d3      	ldr	r3, [r2, r3]
 80053a4:	1c18      	adds	r0, r3, #0
 80053a6:	f7fb f85d 	bl	8000464 <__aeabi_f2uiz>
 80053aa:	0003      	movs	r3, r0
 80053ac:	61bb      	str	r3, [r7, #24]

	hLineCount++;
 80053ae:	4b43      	ldr	r3, [pc, #268]	; (80054bc <circuitCalibPage+0x1e8>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	4b41      	ldr	r3, [pc, #260]	; (80054bc <circuitCalibPage+0x1e8>)
 80053b6:	601a      	str	r2, [r3, #0]

	if(hLineCount >= 6)
 80053b8:	4b40      	ldr	r3, [pc, #256]	; (80054bc <circuitCalibPage+0x1e8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2b05      	cmp	r3, #5
 80053be:	d929      	bls.n	8005414 <circuitCalibPage+0x140>
	{

		hLine = 0.0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61bb      	str	r3, [r7, #24]
		for(int i = 0 ; i < 6 ; i++)
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	e012      	b.n	80053f0 <circuitCalibPage+0x11c>
			hLine += hLineBuff[i];
 80053ca:	69b8      	ldr	r0, [r7, #24]
 80053cc:	f7fb feda 	bl	8001184 <__aeabi_ui2f>
 80053d0:	4b3b      	ldr	r3, [pc, #236]	; (80054c0 <circuitCalibPage+0x1ec>)
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	0092      	lsls	r2, r2, #2
 80053d6:	58d3      	ldr	r3, [r2, r3]
 80053d8:	1c19      	adds	r1, r3, #0
 80053da:	f7fb f879 	bl	80004d0 <__aeabi_fadd>
 80053de:	1c03      	adds	r3, r0, #0
 80053e0:	1c18      	adds	r0, r3, #0
 80053e2:	f7fb f83f 	bl	8000464 <__aeabi_f2uiz>
 80053e6:	0003      	movs	r3, r0
 80053e8:	61bb      	str	r3, [r7, #24]
		for(int i = 0 ; i < 6 ; i++)
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	3301      	adds	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	dde9      	ble.n	80053ca <circuitCalibPage+0xf6>

		hLine = ( hLine / 6.0 );
 80053f6:	69b8      	ldr	r0, [r7, #24]
 80053f8:	f7fd f860 	bl	80024bc <__aeabi_ui2d>
 80053fc:	2200      	movs	r2, #0
 80053fe:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <circuitCalibPage+0x1f0>)
 8005400:	f7fb ff02 	bl	8001208 <__aeabi_ddiv>
 8005404:	0002      	movs	r2, r0
 8005406:	000b      	movs	r3, r1
 8005408:	0010      	movs	r0, r2
 800540a:	0019      	movs	r1, r3
 800540c:	f7fb f842 	bl	8000494 <__aeabi_d2uiz>
 8005410:	0003      	movs	r3, r0
 8005412:	61bb      	str	r3, [r7, #24]

	}

	HAL_ADC_Start(&hadc);
 8005414:	4b23      	ldr	r3, [pc, #140]	; (80054a4 <circuitCalibPage+0x1d0>)
 8005416:	0018      	movs	r0, r3
 8005418:	f001 f9ee 	bl	80067f8 <HAL_ADC_Start>

	// Draw a line indicator

	if( (uint8_t)(hLine_old*100) != (uint8_t)(hLine*100) )
 800541c:	4b2a      	ldr	r3, [pc, #168]	; (80054c8 <circuitCalibPage+0x1f4>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2264      	movs	r2, #100	; 0x64
 8005424:	4353      	muls	r3, r2
 8005426:	b2da      	uxtb	r2, r3
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2164      	movs	r1, #100	; 0x64
 800542e:	434b      	muls	r3, r1
 8005430:	b2db      	uxtb	r3, r3
 8005432:	429a      	cmp	r2, r3
 8005434:	d00b      	beq.n	800544e <circuitCalibPage+0x17a>
		drawLine(0, hLine_old, 160, hLine_old, BLACK);
 8005436:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <circuitCalibPage+0x1f4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	b219      	sxth	r1, r3
 800543c:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <circuitCalibPage+0x1f4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	b21b      	sxth	r3, r3
 8005442:	2200      	movs	r2, #0
 8005444:	9200      	str	r2, [sp, #0]
 8005446:	22a0      	movs	r2, #160	; 0xa0
 8005448:	2000      	movs	r0, #0
 800544a:	f7fd fc4c 	bl	8002ce6 <drawLine>

	drawLine(0, hLine, 160, hLine, WHITE);
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	b219      	sxth	r1, r3
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	b21b      	sxth	r3, r3
 8005456:	4a1d      	ldr	r2, [pc, #116]	; (80054cc <circuitCalibPage+0x1f8>)
 8005458:	9200      	str	r2, [sp, #0]
 800545a:	22a0      	movs	r2, #160	; 0xa0
 800545c:	2000      	movs	r0, #0
 800545e:	f7fd fc42 	bl	8002ce6 <drawLine>

	hLine_old = hLine;
 8005462:	4b19      	ldr	r3, [pc, #100]	; (80054c8 <circuitCalibPage+0x1f4>)
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	601a      	str	r2, [r3, #0]

	if(( hLine >= ( 128 - 54 - 1 ) ) && ( hLine <= ( 128 - 54 + 1 ) ))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b48      	cmp	r3, #72	; 0x48
 800546c:	d908      	bls.n	8005480 <circuitCalibPage+0x1ac>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	2b4b      	cmp	r3, #75	; 0x4b
 8005472:	d805      	bhi.n	8005480 <circuitCalibPage+0x1ac>
		indicatorsColor = GREEN;
 8005474:	231e      	movs	r3, #30
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	22fc      	movs	r2, #252	; 0xfc
 800547a:	00d2      	lsls	r2, r2, #3
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	e003      	b.n	8005488 <circuitCalibPage+0x1b4>
	else
		indicatorsColor = RED;
 8005480:	231e      	movs	r3, #30
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	4a05      	ldr	r2, [pc, #20]	; (800549c <circuitCalibPage+0x1c8>)
 8005486:	801a      	strh	r2, [r3, #0]

	orizzIndicators_graphics(indicatorsColor);
 8005488:	231e      	movs	r3, #30
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	0018      	movs	r0, r3
 8005490:	f000 fdba 	bl	8006008 <orizzIndicators_graphics>

}
 8005494:	46bd      	mov	sp, r7
 8005496:	b009      	add	sp, #36	; 0x24
 8005498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	fffff800 	.word	0xfffff800
 80054a0:	20000224 	.word	0x20000224
 80054a4:	20000098 	.word	0x20000098
 80054a8:	66666666 	.word	0x66666666
 80054ac:	3f4a6666 	.word	0x3f4a6666
 80054b0:	f5c28f5c 	.word	0xf5c28f5c
 80054b4:	40405c28 	.word	0x40405c28
 80054b8:	40600000 	.word	0x40600000
 80054bc:	20000248 	.word	0x20000248
 80054c0:	2000024c 	.word	0x2000024c
 80054c4:	40180000 	.word	0x40180000
 80054c8:	20000038 	.word	0x20000038
 80054cc:	0000ffff 	.word	0x0000ffff

080054d0 <softwareCalibPage>:
 *  @ Description; user reach this page from
 *  @ the main page. Here it is performed the
 *  @ two points probe calibration
 */
void softwareCalibPage(uint8_t updatePage)
{
 80054d0:	b590      	push	{r4, r7, lr}
 80054d2:	b08b      	sub	sp, #44	; 0x2c
 80054d4:	af04      	add	r7, sp, #16
 80054d6:	0002      	movs	r2, r0
 80054d8:	1dfb      	adds	r3, r7, #7
 80054da:	701a      	strb	r2, [r3, #0]

	static uint8_t swCalibTimer = 9;
	static uint32_t swCalibTimeStamp = 0;
	static uint8_t pointIndex = 0;

	char sTimer[2] = {0};
 80054dc:	230c      	movs	r3, #12
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	2200      	movs	r2, #0
 80054e2:	801a      	strh	r2, [r3, #0]
	uint16_t rawAdcData;

	static uint8_t count = 0;


	if(updatePage == 1)
 80054e4:	1dfb      	adds	r3, r7, #7
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d112      	bne.n	8005512 <softwareCalibPage+0x42>
	{

		fillScreen(BLACK);
 80054ec:	2000      	movs	r0, #0
 80054ee:	f7fe fb8d 	bl	8003c0c <fillScreen>
		softwareCalibPage_graphics();
 80054f2:	f000 fb97 	bl	8005c24 <softwareCalibPage_graphics>
		elements = swCalibElement;
 80054f6:	4b7f      	ldr	r3, [pc, #508]	; (80056f4 <softwareCalibPage+0x224>)
 80054f8:	4a7f      	ldr	r2, [pc, #508]	; (80056f8 <softwareCalibPage+0x228>)
 80054fa:	601a      	str	r2, [r3, #0]
		elementIndexLim = SWCALIB_NUM_OF_ELEMENTS;
 80054fc:	4b7f      	ldr	r3, [pc, #508]	; (80056fc <softwareCalibPage+0x22c>)
 80054fe:	2204      	movs	r2, #4
 8005500:	701a      	strb	r2, [r3, #0]
		background = BLACK;
 8005502:	4b7f      	ldr	r3, [pc, #508]	; (8005700 <softwareCalibPage+0x230>)
 8005504:	2200      	movs	r2, #0
 8005506:	801a      	strh	r2, [r3, #0]

		HAL_ADC_Start(&hadc);
 8005508:	4b7e      	ldr	r3, [pc, #504]	; (8005704 <softwareCalibPage+0x234>)
 800550a:	0018      	movs	r0, r3
 800550c:	f001 f974 	bl	80067f8 <HAL_ADC_Start>
 8005510:	e0ed      	b.n	80056ee <softwareCalibPage+0x21e>

		return;

	}

	if(timerOn)
 8005512:	4b7d      	ldr	r3, [pc, #500]	; (8005708 <softwareCalibPage+0x238>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d100      	bne.n	800551c <softwareCalibPage+0x4c>
 800551a:	e0c4      	b.n	80056a6 <softwareCalibPage+0x1d6>
	{

		if(getDelayMs(swCalibTimeStamp) >= 1000)
 800551c:	4b7b      	ldr	r3, [pc, #492]	; (800570c <softwareCalibPage+0x23c>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	0018      	movs	r0, r3
 8005522:	f000 fe73 	bl	800620c <getDelayMs>
 8005526:	0002      	movs	r2, r0
 8005528:	23fa      	movs	r3, #250	; 0xfa
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	429a      	cmp	r2, r3
 800552e:	d200      	bcs.n	8005532 <softwareCalibPage+0x62>
 8005530:	e0dd      	b.n	80056ee <softwareCalibPage+0x21e>
		{

			rawAdcData = HAL_ADC_GetValue(&hadc);
 8005532:	4b74      	ldr	r3, [pc, #464]	; (8005704 <softwareCalibPage+0x234>)
 8005534:	0018      	movs	r0, r3
 8005536:	f001 f9b3 	bl	80068a0 <HAL_ADC_GetValue>
 800553a:	0002      	movs	r2, r0
 800553c:	210e      	movs	r1, #14
 800553e:	187b      	adds	r3, r7, r1
 8005540:	801a      	strh	r2, [r3, #0]
			rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 8005542:	187b      	adds	r3, r7, r1
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	0018      	movs	r0, r3
 8005548:	f7fc ff88 	bl	800245c <__aeabi_i2d>
 800554c:	4a70      	ldr	r2, [pc, #448]	; (8005710 <softwareCalibPage+0x240>)
 800554e:	4b71      	ldr	r3, [pc, #452]	; (8005714 <softwareCalibPage+0x244>)
 8005550:	f7fc f950 	bl	80017f4 <__aeabi_dmul>
 8005554:	0002      	movs	r2, r0
 8005556:	000b      	movs	r3, r1
 8005558:	0010      	movs	r0, r2
 800555a:	0019      	movs	r1, r3
 800555c:	f7fd f81c 	bl	8002598 <__aeabi_d2f>
 8005560:	1c03      	adds	r3, r0, #0
 8005562:	617b      	str	r3, [r7, #20]
			mVBuffCalib[count%6] = rawAdcmV;
 8005564:	4b6c      	ldr	r3, [pc, #432]	; (8005718 <softwareCalibPage+0x248>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2106      	movs	r1, #6
 800556a:	0018      	movs	r0, r3
 800556c:	f7fa fe50 	bl	8000210 <__aeabi_uidivmod>
 8005570:	000b      	movs	r3, r1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	001a      	movs	r2, r3
 8005576:	4b69      	ldr	r3, [pc, #420]	; (800571c <softwareCalibPage+0x24c>)
 8005578:	0092      	lsls	r2, r2, #2
 800557a:	6979      	ldr	r1, [r7, #20]
 800557c:	50d1      	str	r1, [r2, r3]

			count++;
 800557e:	4b66      	ldr	r3, [pc, #408]	; (8005718 <softwareCalibPage+0x248>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	3301      	adds	r3, #1
 8005584:	b2da      	uxtb	r2, r3
 8005586:	4b64      	ldr	r3, [pc, #400]	; (8005718 <softwareCalibPage+0x248>)
 8005588:	701a      	strb	r2, [r3, #0]

			if(count >= 6)
 800558a:	4b63      	ldr	r3, [pc, #396]	; (8005718 <softwareCalibPage+0x248>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b05      	cmp	r3, #5
 8005590:	d91a      	bls.n	80055c8 <softwareCalibPage+0xf8>
			{

				rawAdcmV = 0.0;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
				for(int i = 0 ; i < 6 ; i++)
 8005596:	2300      	movs	r3, #0
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	e00c      	b.n	80055b6 <softwareCalibPage+0xe6>
					rawAdcmV += mVBuffCalib[i];
 800559c:	4b5f      	ldr	r3, [pc, #380]	; (800571c <softwareCalibPage+0x24c>)
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	0092      	lsls	r2, r2, #2
 80055a2:	58d3      	ldr	r3, [r2, r3]
 80055a4:	1c19      	adds	r1, r3, #0
 80055a6:	6978      	ldr	r0, [r7, #20]
 80055a8:	f7fa ff92 	bl	80004d0 <__aeabi_fadd>
 80055ac:	1c03      	adds	r3, r0, #0
 80055ae:	617b      	str	r3, [r7, #20]
				for(int i = 0 ; i < 6 ; i++)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	3301      	adds	r3, #1
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	2b05      	cmp	r3, #5
 80055ba:	ddef      	ble.n	800559c <softwareCalibPage+0xcc>

				rawAdcmV = ( rawAdcmV / 6.0 );
 80055bc:	4958      	ldr	r1, [pc, #352]	; (8005720 <softwareCalibPage+0x250>)
 80055be:	6978      	ldr	r0, [r7, #20]
 80055c0:	f7fb f924 	bl	800080c <__aeabi_fdiv>
 80055c4:	1c03      	adds	r3, r0, #0
 80055c6:	617b      	str	r3, [r7, #20]

			}

			HAL_ADC_Start(&hadc);
 80055c8:	4b4e      	ldr	r3, [pc, #312]	; (8005704 <softwareCalibPage+0x234>)
 80055ca:	0018      	movs	r0, r3
 80055cc:	f001 f914 	bl	80067f8 <HAL_ADC_Start>

			swCalibTimer--;
 80055d0:	4b54      	ldr	r3, [pc, #336]	; (8005724 <softwareCalibPage+0x254>)
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	3b01      	subs	r3, #1
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	4b52      	ldr	r3, [pc, #328]	; (8005724 <softwareCalibPage+0x254>)
 80055da:	701a      	strb	r2, [r3, #0]

			if(swCalibTimer <= 0)
 80055dc:	4b51      	ldr	r3, [pc, #324]	; (8005724 <softwareCalibPage+0x254>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d140      	bne.n	8005666 <softwareCalibPage+0x196>
			{

				swCalibTimer = 9;
 80055e4:	4b4f      	ldr	r3, [pc, #316]	; (8005724 <softwareCalibPage+0x254>)
 80055e6:	2209      	movs	r2, #9
 80055e8:	701a      	strb	r2, [r3, #0]
				timerOn = 0;
 80055ea:	4b47      	ldr	r3, [pc, #284]	; (8005708 <softwareCalibPage+0x238>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]

				count = 0;
 80055f0:	4b49      	ldr	r3, [pc, #292]	; (8005718 <softwareCalibPage+0x248>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]

				ST7735_WriteString(SWCALIB_PT_NUM_POSX, SWCALIB_PT_NUM_POSY, "PT.2", Font_11x18, WHITE, background);
 80055f6:	4b42      	ldr	r3, [pc, #264]	; (8005700 <softwareCalibPage+0x230>)
 80055f8:	881a      	ldrh	r2, [r3, #0]
 80055fa:	4b4b      	ldr	r3, [pc, #300]	; (8005728 <softwareCalibPage+0x258>)
 80055fc:	484b      	ldr	r0, [pc, #300]	; (800572c <softwareCalibPage+0x25c>)
 80055fe:	9202      	str	r2, [sp, #8]
 8005600:	4a4b      	ldr	r2, [pc, #300]	; (8005730 <softwareCalibPage+0x260>)
 8005602:	9201      	str	r2, [sp, #4]
 8005604:	466a      	mov	r2, sp
 8005606:	6859      	ldr	r1, [r3, #4]
 8005608:	6011      	str	r1, [r2, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	0002      	movs	r2, r0
 800560e:	2168      	movs	r1, #104	; 0x68
 8005610:	203c      	movs	r0, #60	; 0x3c
 8005612:	f7fe fde3 	bl	80041dc <ST7735_WriteString>

				buttonChangeColour(&swCalibElement[3].btn);
 8005616:	4b47      	ldr	r3, [pc, #284]	; (8005734 <softwareCalibPage+0x264>)
 8005618:	0018      	movs	r0, r3
 800561a:	f7ff f927 	bl	800486c <buttonChangeColour>

				twoPointsCalib_mV[pointIndex] = rawAdcmV;
 800561e:	4b46      	ldr	r3, [pc, #280]	; (8005738 <softwareCalibPage+0x268>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	001a      	movs	r2, r3
 8005624:	4b45      	ldr	r3, [pc, #276]	; (800573c <softwareCalibPage+0x26c>)
 8005626:	0092      	lsls	r2, r2, #2
 8005628:	6979      	ldr	r1, [r7, #20]
 800562a:	50d1      	str	r1, [r2, r3]
				twoPointsCalib_pH[pointIndex] = swCalibElement[2].nBox.boxNum;
 800562c:	4b32      	ldr	r3, [pc, #200]	; (80056f8 <softwareCalibPage+0x228>)
 800562e:	2268      	movs	r2, #104	; 0x68
 8005630:	5c9a      	ldrb	r2, [r3, r2]
 8005632:	4b41      	ldr	r3, [pc, #260]	; (8005738 <softwareCalibPage+0x268>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	001c      	movs	r4, r3
 8005638:	0010      	movs	r0, r2
 800563a:	f7fb fda3 	bl	8001184 <__aeabi_ui2f>
 800563e:	1c01      	adds	r1, r0, #0
 8005640:	4b3f      	ldr	r3, [pc, #252]	; (8005740 <softwareCalibPage+0x270>)
 8005642:	00a2      	lsls	r2, r4, #2
 8005644:	50d1      	str	r1, [r2, r3]

				pointIndex++;
 8005646:	4b3c      	ldr	r3, [pc, #240]	; (8005738 <softwareCalibPage+0x268>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <softwareCalibPage+0x268>)
 8005650:	701a      	strb	r2, [r3, #0]

				if(pointIndex >= 2)
 8005652:	4b39      	ldr	r3, [pc, #228]	; (8005738 <softwareCalibPage+0x268>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d905      	bls.n	8005666 <softwareCalibPage+0x196>
				{

					pointIndex = 0;
 800565a:	4b37      	ldr	r3, [pc, #220]	; (8005738 <softwareCalibPage+0x268>)
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
					newPageFlags = 2;
 8005660:	4b38      	ldr	r3, [pc, #224]	; (8005744 <softwareCalibPage+0x274>)
 8005662:	2202      	movs	r2, #2
 8005664:	801a      	strh	r2, [r3, #0]

				}

			}

			sTimer[0] = ( swCalibTimer + 0x30 );
 8005666:	4b2f      	ldr	r3, [pc, #188]	; (8005724 <softwareCalibPage+0x254>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	3330      	adds	r3, #48	; 0x30
 800566c:	b2da      	uxtb	r2, r3
 800566e:	210c      	movs	r1, #12
 8005670:	187b      	adds	r3, r7, r1
 8005672:	701a      	strb	r2, [r3, #0]
			sTimer[1] = 0;
 8005674:	187b      	adds	r3, r7, r1
 8005676:	2200      	movs	r2, #0
 8005678:	705a      	strb	r2, [r3, #1]
			ST7735_WriteString(SWCALIB_TIMER_POSX, SWCALIB_TIMER_POSY,sTimer ,Font_11x18, WHITE, background);
 800567a:	4b21      	ldr	r3, [pc, #132]	; (8005700 <softwareCalibPage+0x230>)
 800567c:	881a      	ldrh	r2, [r3, #0]
 800567e:	4b2a      	ldr	r3, [pc, #168]	; (8005728 <softwareCalibPage+0x258>)
 8005680:	1878      	adds	r0, r7, r1
 8005682:	9202      	str	r2, [sp, #8]
 8005684:	4a2a      	ldr	r2, [pc, #168]	; (8005730 <softwareCalibPage+0x260>)
 8005686:	9201      	str	r2, [sp, #4]
 8005688:	466a      	mov	r2, sp
 800568a:	6859      	ldr	r1, [r3, #4]
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	0002      	movs	r2, r0
 8005692:	2137      	movs	r1, #55	; 0x37
 8005694:	2014      	movs	r0, #20
 8005696:	f7fe fda1 	bl	80041dc <ST7735_WriteString>

			swCalibTimeStamp = getTimeMs();
 800569a:	f000 fdab 	bl	80061f4 <getTimeMs>
 800569e:	0002      	movs	r2, r0
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <softwareCalibPage+0x23c>)
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	e023      	b.n	80056ee <softwareCalibPage+0x21e>

		}

	}
	else if(swCalibTimer != 9)
 80056a6:	4b1f      	ldr	r3, [pc, #124]	; (8005724 <softwareCalibPage+0x254>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b09      	cmp	r3, #9
 80056ac:	d01f      	beq.n	80056ee <softwareCalibPage+0x21e>
	{

		swCalibTimer = 9;
 80056ae:	4b1d      	ldr	r3, [pc, #116]	; (8005724 <softwareCalibPage+0x254>)
 80056b0:	2209      	movs	r2, #9
 80056b2:	701a      	strb	r2, [r3, #0]
		swCalibTimeStamp = 0;
 80056b4:	4b15      	ldr	r3, [pc, #84]	; (800570c <softwareCalibPage+0x23c>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
		sTimer[0] = ( swCalibTimer + 0x30 );
 80056ba:	4b1a      	ldr	r3, [pc, #104]	; (8005724 <softwareCalibPage+0x254>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	3330      	adds	r3, #48	; 0x30
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	210c      	movs	r1, #12
 80056c4:	187b      	adds	r3, r7, r1
 80056c6:	701a      	strb	r2, [r3, #0]
		sTimer[1] = 0;
 80056c8:	187b      	adds	r3, r7, r1
 80056ca:	2200      	movs	r2, #0
 80056cc:	705a      	strb	r2, [r3, #1]
		ST7735_WriteString(SWCALIB_TIMER_POSX, SWCALIB_TIMER_POSY,sTimer ,Font_11x18, WHITE, background);
 80056ce:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <softwareCalibPage+0x230>)
 80056d0:	881a      	ldrh	r2, [r3, #0]
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <softwareCalibPage+0x258>)
 80056d4:	1878      	adds	r0, r7, r1
 80056d6:	9202      	str	r2, [sp, #8]
 80056d8:	4a15      	ldr	r2, [pc, #84]	; (8005730 <softwareCalibPage+0x260>)
 80056da:	9201      	str	r2, [sp, #4]
 80056dc:	466a      	mov	r2, sp
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	6011      	str	r1, [r2, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	0002      	movs	r2, r0
 80056e6:	2137      	movs	r1, #55	; 0x37
 80056e8:	2014      	movs	r0, #20
 80056ea:	f7fe fd77 	bl	80041dc <ST7735_WriteString>

	}

}
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b007      	add	sp, #28
 80056f2:	bd90      	pop	{r4, r7, pc}
 80056f4:	20000140 	.word	0x20000140
 80056f8:	20000144 	.word	0x20000144
 80056fc:	2000021d 	.word	0x2000021d
 8005700:	20000224 	.word	0x20000224
 8005704:	20000098 	.word	0x20000098
 8005708:	20000226 	.word	0x20000226
 800570c:	20000264 	.word	0x20000264
 8005710:	66666666 	.word	0x66666666
 8005714:	3f4a6666 	.word	0x3f4a6666
 8005718:	20000268 	.word	0x20000268
 800571c:	2000026c 	.word	0x2000026c
 8005720:	40c00000 	.word	0x40c00000
 8005724:	2000003c 	.word	0x2000003c
 8005728:	20000008 	.word	0x20000008
 800572c:	080080c4 	.word	0x080080c4
 8005730:	0000ffff 	.word	0x0000ffff
 8005734:	200001b4 	.word	0x200001b4
 8005738:	20000284 	.word	0x20000284
 800573c:	2000002c 	.word	0x2000002c
 8005740:	20000024 	.word	0x20000024
 8005744:	20000022 	.word	0x20000022

08005748 <btnSwitchPage>:


void btnSwitchPage(BTN *btn)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

	buttonChangeColour(btn);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	0018      	movs	r0, r3
 8005754:	f7ff f88a 	bl	800486c <buttonChangeColour>
	newPageFlags = btn->btnArg;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	8a1a      	ldrh	r2, [r3, #16]
 800575c:	4b02      	ldr	r3, [pc, #8]	; (8005768 <btnSwitchPage+0x20>)
 800575e:	801a      	strh	r2, [r3, #0]

}
 8005760:	46c0      	nop			; (mov r8, r8)
 8005762:	46bd      	mov	sp, r7
 8005764:	b002      	add	sp, #8
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000022 	.word	0x20000022

0800576c <btnStartTimer>:


void btnStartTimer(BTN *btn)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

	buttonChangeColour(btn);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	0018      	movs	r0, r3
 8005778:	f7ff f878 	bl	800486c <buttonChangeColour>
	timerOn = !timerOn;
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <btnStartTimer+0x28>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	425a      	negs	r2, r3
 8005782:	4153      	adcs	r3, r2
 8005784:	b2db      	uxtb	r3, r3
 8005786:	001a      	movs	r2, r3
 8005788:	4b02      	ldr	r3, [pc, #8]	; (8005794 <btnStartTimer+0x28>)
 800578a:	701a      	strb	r2, [r3, #0]

}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	b002      	add	sp, #8
 8005792:	bd80      	pop	{r7, pc}
 8005794:	20000226 	.word	0x20000226

08005798 <joysticHandler>:


/**************** PRIVATE FUNCTIONS ******************/

static void joysticHandler(ELEMENT *element)
{
 8005798:	b5b0      	push	{r4, r5, r7, lr}
 800579a:	b088      	sub	sp, #32
 800579c:	af06      	add	r7, sp, #24
 800579e:	6078      	str	r0, [r7, #4]

	/*
	if(!HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin))
	{
	*/
	if(!HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin))
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	011a      	lsls	r2, r3, #4
 80057a4:	2390      	movs	r3, #144	; 0x90
 80057a6:	05db      	lsls	r3, r3, #23
 80057a8:	0011      	movs	r1, r2
 80057aa:	0018      	movs	r0, r3
 80057ac:	f001 fc22 	bl	8006ff4 <HAL_GPIO_ReadPin>
 80057b0:	1e03      	subs	r3, r0, #0
 80057b2:	d140      	bne.n	8005836 <joysticHandler+0x9e>
	{

		joystick = UP;
 80057b4:	4bab      	ldr	r3, [pc, #684]	; (8005a64 <joysticHandler+0x2cc>)
 80057b6:	2201      	movs	r2, #1
 80057b8:	701a      	strb	r2, [r3, #0]

		if(( element[elementIndex].elemtentType == EDITNUMBOX ) && ( element[elementIndex].nBox.boxNum < 14 ))
 80057ba:	4bab      	ldr	r3, [pc, #684]	; (8005a68 <joysticHandler+0x2d0>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	001a      	movs	r2, r3
 80057c0:	0013      	movs	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	189b      	adds	r3, r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	001a      	movs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	189b      	adds	r3, r3, r2
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d12c      	bne.n	800582e <joysticHandler+0x96>
 80057d4:	4ba4      	ldr	r3, [pc, #656]	; (8005a68 <joysticHandler+0x2d0>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	001a      	movs	r2, r3
 80057da:	0013      	movs	r3, r2
 80057dc:	00db      	lsls	r3, r3, #3
 80057de:	189b      	adds	r3, r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	001a      	movs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	2220      	movs	r2, #32
 80057ea:	5c9b      	ldrb	r3, [r3, r2]
 80057ec:	2b0d      	cmp	r3, #13
 80057ee:	d81e      	bhi.n	800582e <joysticHandler+0x96>
		{

			element[elementIndex].nBox.boxNum++;
 80057f0:	4b9d      	ldr	r3, [pc, #628]	; (8005a68 <joysticHandler+0x2d0>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	001a      	movs	r2, r3
 80057f6:	0013      	movs	r3, r2
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	189b      	adds	r3, r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	001a      	movs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	189b      	adds	r3, r3, r2
 8005804:	2220      	movs	r2, #32
 8005806:	5c9a      	ldrb	r2, [r3, r2]
 8005808:	3201      	adds	r2, #1
 800580a:	b2d1      	uxtb	r1, r2
 800580c:	2220      	movs	r2, #32
 800580e:	5499      	strb	r1, [r3, r2]
			modifyNumBox(element[elementIndex].nBox);
 8005810:	4b95      	ldr	r3, [pc, #596]	; (8005a68 <joysticHandler+0x2d0>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	001a      	movs	r2, r3
 8005816:	0013      	movs	r3, r2
 8005818:	00db      	lsls	r3, r3, #3
 800581a:	189b      	adds	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	001a      	movs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	189b      	adds	r3, r3, r2
 8005824:	6998      	ldr	r0, [r3, #24]
 8005826:	69d9      	ldr	r1, [r3, #28]
 8005828:	6a1a      	ldr	r2, [r3, #32]
 800582a:	f7fe ff8f 	bl	800474c <modifyNumBox>

		}

		HAL_Delay(200);
 800582e:	20c8      	movs	r0, #200	; 0xc8
 8005830:	f000 fe7e 	bl	8006530 <HAL_Delay>
 8005834:	e07f      	b.n	8005936 <joysticHandler+0x19e>

	}
	else if(!HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin))
 8005836:	2380      	movs	r3, #128	; 0x80
 8005838:	01db      	lsls	r3, r3, #7
 800583a:	4a8c      	ldr	r2, [pc, #560]	; (8005a6c <joysticHandler+0x2d4>)
 800583c:	0019      	movs	r1, r3
 800583e:	0010      	movs	r0, r2
 8005840:	f001 fbd8 	bl	8006ff4 <HAL_GPIO_ReadPin>
 8005844:	1e03      	subs	r3, r0, #0
 8005846:	d140      	bne.n	80058ca <joysticHandler+0x132>
	{

		joystick = DOWN;
 8005848:	4b86      	ldr	r3, [pc, #536]	; (8005a64 <joysticHandler+0x2cc>)
 800584a:	2202      	movs	r2, #2
 800584c:	701a      	strb	r2, [r3, #0]

		if(( element[elementIndex].elemtentType == EDITNUMBOX )  && ( element[elementIndex].nBox.boxNum > 0 ))
 800584e:	4b86      	ldr	r3, [pc, #536]	; (8005a68 <joysticHandler+0x2d0>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	001a      	movs	r2, r3
 8005854:	0013      	movs	r3, r2
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	189b      	adds	r3, r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	001a      	movs	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	189b      	adds	r3, r3, r2
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d12c      	bne.n	80058c2 <joysticHandler+0x12a>
 8005868:	4b7f      	ldr	r3, [pc, #508]	; (8005a68 <joysticHandler+0x2d0>)
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	001a      	movs	r2, r3
 800586e:	0013      	movs	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	189b      	adds	r3, r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	001a      	movs	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	189b      	adds	r3, r3, r2
 800587c:	2220      	movs	r2, #32
 800587e:	5c9b      	ldrb	r3, [r3, r2]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01e      	beq.n	80058c2 <joysticHandler+0x12a>
		{

			element[elementIndex].nBox.boxNum--;
 8005884:	4b78      	ldr	r3, [pc, #480]	; (8005a68 <joysticHandler+0x2d0>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	001a      	movs	r2, r3
 800588a:	0013      	movs	r3, r2
 800588c:	00db      	lsls	r3, r3, #3
 800588e:	189b      	adds	r3, r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	001a      	movs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	189b      	adds	r3, r3, r2
 8005898:	2220      	movs	r2, #32
 800589a:	5c9a      	ldrb	r2, [r3, r2]
 800589c:	3a01      	subs	r2, #1
 800589e:	b2d1      	uxtb	r1, r2
 80058a0:	2220      	movs	r2, #32
 80058a2:	5499      	strb	r1, [r3, r2]
			modifyNumBox(element[elementIndex].nBox);
 80058a4:	4b70      	ldr	r3, [pc, #448]	; (8005a68 <joysticHandler+0x2d0>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	001a      	movs	r2, r3
 80058aa:	0013      	movs	r3, r2
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	189b      	adds	r3, r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	001a      	movs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	6998      	ldr	r0, [r3, #24]
 80058ba:	69d9      	ldr	r1, [r3, #28]
 80058bc:	6a1a      	ldr	r2, [r3, #32]
 80058be:	f7fe ff45 	bl	800474c <modifyNumBox>

		}

		HAL_Delay(200);
 80058c2:	20c8      	movs	r0, #200	; 0xc8
 80058c4:	f000 fe34 	bl	8006530 <HAL_Delay>
 80058c8:	e035      	b.n	8005936 <joysticHandler+0x19e>

	}
	else if(!HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin))
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	011a      	lsls	r2, r3, #4
 80058ce:	2390      	movs	r3, #144	; 0x90
 80058d0:	05db      	lsls	r3, r3, #23
 80058d2:	0011      	movs	r1, r2
 80058d4:	0018      	movs	r0, r3
 80058d6:	f001 fb8d 	bl	8006ff4 <HAL_GPIO_ReadPin>
 80058da:	1e03      	subs	r3, r0, #0
 80058dc:	d106      	bne.n	80058ec <joysticHandler+0x154>
	{

		joystick = LEFT;
 80058de:	4b61      	ldr	r3, [pc, #388]	; (8005a64 <joysticHandler+0x2cc>)
 80058e0:	2203      	movs	r2, #3
 80058e2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 80058e4:	20c8      	movs	r0, #200	; 0xc8
 80058e6:	f000 fe23 	bl	8006530 <HAL_Delay>
 80058ea:	e024      	b.n	8005936 <joysticHandler+0x19e>

	}
	else if(!HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin))
 80058ec:	2380      	movs	r3, #128	; 0x80
 80058ee:	00da      	lsls	r2, r3, #3
 80058f0:	2390      	movs	r3, #144	; 0x90
 80058f2:	05db      	lsls	r3, r3, #23
 80058f4:	0011      	movs	r1, r2
 80058f6:	0018      	movs	r0, r3
 80058f8:	f001 fb7c 	bl	8006ff4 <HAL_GPIO_ReadPin>
 80058fc:	1e03      	subs	r3, r0, #0
 80058fe:	d106      	bne.n	800590e <joysticHandler+0x176>
	{

		joystick = RIGHT;
 8005900:	4b58      	ldr	r3, [pc, #352]	; (8005a64 <joysticHandler+0x2cc>)
 8005902:	2204      	movs	r2, #4
 8005904:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 8005906:	20c8      	movs	r0, #200	; 0xc8
 8005908:	f000 fe12 	bl	8006530 <HAL_Delay>
 800590c:	e013      	b.n	8005936 <joysticHandler+0x19e>

	}
	else if(!HAL_GPIO_ReadPin(SEL_GPIO_Port, SEL_Pin))
 800590e:	2380      	movs	r3, #128	; 0x80
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	2390      	movs	r3, #144	; 0x90
 8005914:	05db      	lsls	r3, r3, #23
 8005916:	0011      	movs	r1, r2
 8005918:	0018      	movs	r0, r3
 800591a:	f001 fb6b 	bl	8006ff4 <HAL_GPIO_ReadPin>
 800591e:	1e03      	subs	r3, r0, #0
 8005920:	d106      	bne.n	8005930 <joysticHandler+0x198>
	{

		joystick = CENTER;
 8005922:	4b50      	ldr	r3, [pc, #320]	; (8005a64 <joysticHandler+0x2cc>)
 8005924:	2205      	movs	r2, #5
 8005926:	701a      	strb	r2, [r3, #0]
		HAL_Delay(200);
 8005928:	20c8      	movs	r0, #200	; 0xc8
 800592a:	f000 fe01 	bl	8006530 <HAL_Delay>
 800592e:	e002      	b.n	8005936 <joysticHandler+0x19e>

	}
	else
	{

		joystick = REST;
 8005930:	4b4c      	ldr	r3, [pc, #304]	; (8005a64 <joysticHandler+0x2cc>)
 8005932:	2200      	movs	r2, #0
 8005934:	701a      	strb	r2, [r3, #0]

	}

	if(( joystick == RIGHT ) && ( joystick_old == REST ))
 8005936:	4b4b      	ldr	r3, [pc, #300]	; (8005a64 <joysticHandler+0x2cc>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b04      	cmp	r3, #4
 800593c:	d12a      	bne.n	8005994 <joysticHandler+0x1fc>
 800593e:	4b4c      	ldr	r3, [pc, #304]	; (8005a70 <joysticHandler+0x2d8>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d126      	bne.n	8005994 <joysticHandler+0x1fc>
	{

		elementIndex++;
 8005946:	4b48      	ldr	r3, [pc, #288]	; (8005a68 <joysticHandler+0x2d0>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	3301      	adds	r3, #1
 800594c:	b2da      	uxtb	r2, r3
 800594e:	4b46      	ldr	r3, [pc, #280]	; (8005a68 <joysticHandler+0x2d0>)
 8005950:	701a      	strb	r2, [r3, #0]

		if(( elementIndex >= elementIndexLim ) || ( elementIndex < 0 ))
 8005952:	4b45      	ldr	r3, [pc, #276]	; (8005a68 <joysticHandler+0x2d0>)
 8005954:	781a      	ldrb	r2, [r3, #0]
 8005956:	4b47      	ldr	r3, [pc, #284]	; (8005a74 <joysticHandler+0x2dc>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	429a      	cmp	r2, r3
 800595c:	d302      	bcc.n	8005964 <joysticHandler+0x1cc>
			elementIndex = 0;
 800595e:	4b42      	ldr	r3, [pc, #264]	; (8005a68 <joysticHandler+0x2d0>)
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]

		targetElement(element[elementIndex]);
 8005964:	4b40      	ldr	r3, [pc, #256]	; (8005a68 <joysticHandler+0x2d0>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	001a      	movs	r2, r3
 800596a:	0013      	movs	r3, r2
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	189b      	adds	r3, r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	001a      	movs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	189b      	adds	r3, r3, r2
 8005978:	466a      	mov	r2, sp
 800597a:	0011      	movs	r1, r2
 800597c:	001a      	movs	r2, r3
 800597e:	3210      	adds	r2, #16
 8005980:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005982:	c131      	stmia	r1!, {r0, r4, r5}
 8005984:	ca11      	ldmia	r2!, {r0, r4}
 8005986:	c111      	stmia	r1!, {r0, r4}
 8005988:	6818      	ldr	r0, [r3, #0]
 800598a:	6859      	ldr	r1, [r3, #4]
 800598c:	689a      	ldr	r2, [r3, #8]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f7fe ffd6 	bl	8004940 <targetElement>

	}

	if(( joystick == LEFT ) && ( joystick_old == REST ))
 8005994:	4b33      	ldr	r3, [pc, #204]	; (8005a64 <joysticHandler+0x2cc>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	2b03      	cmp	r3, #3
 800599a:	d12d      	bne.n	80059f8 <joysticHandler+0x260>
 800599c:	4b34      	ldr	r3, [pc, #208]	; (8005a70 <joysticHandler+0x2d8>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d129      	bne.n	80059f8 <joysticHandler+0x260>
	{

		elementIndex--;
 80059a4:	4b30      	ldr	r3, [pc, #192]	; (8005a68 <joysticHandler+0x2d0>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	4b2e      	ldr	r3, [pc, #184]	; (8005a68 <joysticHandler+0x2d0>)
 80059ae:	701a      	strb	r2, [r3, #0]

		if(( elementIndex >= elementIndexLim ) || ( elementIndex < 0 ))
 80059b0:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <joysticHandler+0x2d0>)
 80059b2:	781a      	ldrb	r2, [r3, #0]
 80059b4:	4b2f      	ldr	r3, [pc, #188]	; (8005a74 <joysticHandler+0x2dc>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d305      	bcc.n	80059c8 <joysticHandler+0x230>
			elementIndex = ( elementIndexLim - 1 );
 80059bc:	4b2d      	ldr	r3, [pc, #180]	; (8005a74 <joysticHandler+0x2dc>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b2da      	uxtb	r2, r3
 80059c4:	4b28      	ldr	r3, [pc, #160]	; (8005a68 <joysticHandler+0x2d0>)
 80059c6:	701a      	strb	r2, [r3, #0]

		targetElement(element[elementIndex]);
 80059c8:	4b27      	ldr	r3, [pc, #156]	; (8005a68 <joysticHandler+0x2d0>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	001a      	movs	r2, r3
 80059ce:	0013      	movs	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	001a      	movs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	189b      	adds	r3, r3, r2
 80059dc:	466a      	mov	r2, sp
 80059de:	0011      	movs	r1, r2
 80059e0:	001a      	movs	r2, r3
 80059e2:	3210      	adds	r2, #16
 80059e4:	ca31      	ldmia	r2!, {r0, r4, r5}
 80059e6:	c131      	stmia	r1!, {r0, r4, r5}
 80059e8:	ca11      	ldmia	r2!, {r0, r4}
 80059ea:	c111      	stmia	r1!, {r0, r4}
 80059ec:	6818      	ldr	r0, [r3, #0]
 80059ee:	6859      	ldr	r1, [r3, #4]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f7fe ffa4 	bl	8004940 <targetElement>

	}

	if(( joystick == CENTER ) && ( joystick_old == REST ))
 80059f8:	4b1a      	ldr	r3, [pc, #104]	; (8005a64 <joysticHandler+0x2cc>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d128      	bne.n	8005a52 <joysticHandler+0x2ba>
 8005a00:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <joysticHandler+0x2d8>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d124      	bne.n	8005a52 <joysticHandler+0x2ba>
	{

		if(element[elementIndex].elemtentType == BUTTON)
 8005a08:	4b17      	ldr	r3, [pc, #92]	; (8005a68 <joysticHandler+0x2d0>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	001a      	movs	r2, r3
 8005a0e:	0013      	movs	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	189b      	adds	r3, r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	001a      	movs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	189b      	adds	r3, r3, r2
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d117      	bne.n	8005a52 <joysticHandler+0x2ba>
			element[elementIndex].btn.btnAction(&element[elementIndex].btn);
 8005a22:	4b11      	ldr	r3, [pc, #68]	; (8005a68 <joysticHandler+0x2d0>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	001a      	movs	r2, r3
 8005a28:	0013      	movs	r3, r2
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	189b      	adds	r3, r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	001a      	movs	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	189b      	adds	r3, r3, r2
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <joysticHandler+0x2d0>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	000b      	movs	r3, r1
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	185b      	adds	r3, r3, r1
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	0019      	movs	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	185b      	adds	r3, r3, r1
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	0018      	movs	r0, r3
 8005a50:	4790      	blx	r2

	}

	joystick_old = joystick;
 8005a52:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <joysticHandler+0x2cc>)
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <joysticHandler+0x2d8>)
 8005a58:	701a      	strb	r2, [r3, #0]

}
 8005a5a:	46c0      	nop			; (mov r8, r8)
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	b002      	add	sp, #8
 8005a60:	bdb0      	pop	{r4, r5, r7, pc}
 8005a62:	46c0      	nop			; (mov r8, r8)
 8005a64:	2000013c 	.word	0x2000013c
 8005a68:	2000021c 	.word	0x2000021c
 8005a6c:	48000800 	.word	0x48000800
 8005a70:	20000285 	.word	0x20000285
 8005a74:	2000021d 	.word	0x2000021d

08005a78 <processStatus_update>:


static uint8_t processStatus_update(void)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	af00      	add	r7, sp, #0

	static PROCESS_STATUS local_process_status = IDLE_PROCESS;


	if(HAL_GPIO_ReadPin(OPAMP_CALIB_GPIO_Port, OPAMP_CALIB_Pin) == 0)
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	015b      	lsls	r3, r3, #5
 8005a80:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <processStatus_update+0x5c>)
 8005a82:	0019      	movs	r1, r3
 8005a84:	0010      	movs	r0, r2
 8005a86:	f001 fab5 	bl	8006ff4 <HAL_GPIO_ReadPin>
 8005a8a:	1e03      	subs	r3, r0, #0
 8005a8c:	d103      	bne.n	8005a96 <processStatus_update+0x1e>
		process_status = HW_PROCESS;
 8005a8e:	4b12      	ldr	r3, [pc, #72]	; (8005ad8 <processStatus_update+0x60>)
 8005a90:	2208      	movs	r2, #8
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e004      	b.n	8005aa0 <processStatus_update+0x28>
	else
		process_status = newPageFlags;
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <processStatus_update+0x64>)
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	4b0e      	ldr	r3, [pc, #56]	; (8005ad8 <processStatus_update+0x60>)
 8005a9e:	701a      	strb	r2, [r3, #0]

	if(local_process_status != process_status)
 8005aa0:	4b0f      	ldr	r3, [pc, #60]	; (8005ae0 <processStatus_update+0x68>)
 8005aa2:	781a      	ldrb	r2, [r3, #0]
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <processStatus_update+0x60>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d00b      	beq.n	8005ac4 <processStatus_update+0x4c>
	{

		local_process_status = process_status;
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <processStatus_update+0x60>)
 8005aae:	781a      	ldrb	r2, [r3, #0]
 8005ab0:	4b0b      	ldr	r3, [pc, #44]	; (8005ae0 <processStatus_update+0x68>)
 8005ab2:	701a      	strb	r2, [r3, #0]
		elementIndex = 0;
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <processStatus_update+0x6c>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	701a      	strb	r2, [r3, #0]
		timerOn = 0;
 8005aba:	4b0b      	ldr	r3, [pc, #44]	; (8005ae8 <processStatus_update+0x70>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	701a      	strb	r2, [r3, #0]

		return 1;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e004      	b.n	8005ace <processStatus_update+0x56>

	}
	else
	{

		local_process_status = process_status;
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <processStatus_update+0x60>)
 8005ac6:	781a      	ldrb	r2, [r3, #0]
 8005ac8:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <processStatus_update+0x68>)
 8005aca:	701a      	strb	r2, [r3, #0]
		return 0;
 8005acc:	2300      	movs	r3, #0

	}

}
 8005ace:	0018      	movs	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	48000400 	.word	0x48000400
 8005ad8:	20000020 	.word	0x20000020
 8005adc:	20000022 	.word	0x20000022
 8005ae0:	2000003d 	.word	0x2000003d
 8005ae4:	2000021c 	.word	0x2000021c
 8005ae8:	20000226 	.word	0x20000226

08005aec <pHStatus_update>:


static void pHStatus_update(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0

	if(pH_current >= STRONG_BASE_THR)
 8005af0:	4b23      	ldr	r3, [pc, #140]	; (8005b80 <pHStatus_update+0x94>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4923      	ldr	r1, [pc, #140]	; (8005b84 <pHStatus_update+0x98>)
 8005af6:	1c18      	adds	r0, r3, #0
 8005af8:	f7fa fcaa 	bl	8000450 <__aeabi_fcmpge>
 8005afc:	1e03      	subs	r3, r0, #0
 8005afe:	d003      	beq.n	8005b08 <pHStatus_update+0x1c>
		pH_status = STRONG_BASE;
 8005b00:	4b21      	ldr	r3, [pc, #132]	; (8005b88 <pHStatus_update+0x9c>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
	else if(pH_current <= STRONG_ACID_THR)
		pH_status = STRONG_ACID;
	else
		pH_status = NEUTRAL;

}
 8005b06:	e037      	b.n	8005b78 <pHStatus_update+0x8c>
	else if(( pH_current > BASE_THR ) && ( pH_current < STRONG_BASE_THR ))
 8005b08:	4b1d      	ldr	r3, [pc, #116]	; (8005b80 <pHStatus_update+0x94>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	491f      	ldr	r1, [pc, #124]	; (8005b8c <pHStatus_update+0xa0>)
 8005b0e:	1c18      	adds	r0, r3, #0
 8005b10:	f7fa fc94 	bl	800043c <__aeabi_fcmpgt>
 8005b14:	1e03      	subs	r3, r0, #0
 8005b16:	d00b      	beq.n	8005b30 <pHStatus_update+0x44>
 8005b18:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <pHStatus_update+0x94>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4919      	ldr	r1, [pc, #100]	; (8005b84 <pHStatus_update+0x98>)
 8005b1e:	1c18      	adds	r0, r3, #0
 8005b20:	f7fa fc78 	bl	8000414 <__aeabi_fcmplt>
 8005b24:	1e03      	subs	r3, r0, #0
 8005b26:	d003      	beq.n	8005b30 <pHStatus_update+0x44>
		pH_status = BASE;
 8005b28:	4b17      	ldr	r3, [pc, #92]	; (8005b88 <pHStatus_update+0x9c>)
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	e023      	b.n	8005b78 <pHStatus_update+0x8c>
	else if(( pH_current > STRONG_ACID_THR ) && ( pH_current < ACID_THR ))
 8005b30:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <pHStatus_update+0x94>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4916      	ldr	r1, [pc, #88]	; (8005b90 <pHStatus_update+0xa4>)
 8005b36:	1c18      	adds	r0, r3, #0
 8005b38:	f7fa fc80 	bl	800043c <__aeabi_fcmpgt>
 8005b3c:	1e03      	subs	r3, r0, #0
 8005b3e:	d00b      	beq.n	8005b58 <pHStatus_update+0x6c>
 8005b40:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <pHStatus_update+0x94>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4913      	ldr	r1, [pc, #76]	; (8005b94 <pHStatus_update+0xa8>)
 8005b46:	1c18      	adds	r0, r3, #0
 8005b48:	f7fa fc64 	bl	8000414 <__aeabi_fcmplt>
 8005b4c:	1e03      	subs	r3, r0, #0
 8005b4e:	d003      	beq.n	8005b58 <pHStatus_update+0x6c>
		pH_status = ACID;
 8005b50:	4b0d      	ldr	r3, [pc, #52]	; (8005b88 <pHStatus_update+0x9c>)
 8005b52:	2204      	movs	r2, #4
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	e00f      	b.n	8005b78 <pHStatus_update+0x8c>
	else if(pH_current <= STRONG_ACID_THR)
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <pHStatus_update+0x94>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	490c      	ldr	r1, [pc, #48]	; (8005b90 <pHStatus_update+0xa4>)
 8005b5e:	1c18      	adds	r0, r3, #0
 8005b60:	f7fa fc62 	bl	8000428 <__aeabi_fcmple>
 8005b64:	1e03      	subs	r3, r0, #0
 8005b66:	d003      	beq.n	8005b70 <pHStatus_update+0x84>
		pH_status = STRONG_ACID;
 8005b68:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <pHStatus_update+0x9c>)
 8005b6a:	2205      	movs	r2, #5
 8005b6c:	701a      	strb	r2, [r3, #0]
}
 8005b6e:	e003      	b.n	8005b78 <pHStatus_update+0x8c>
		pH_status = NEUTRAL;
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <pHStatus_update+0x9c>)
 8005b72:	2203      	movs	r2, #3
 8005b74:	701a      	strb	r2, [r3, #0]
}
 8005b76:	e7ff      	b.n	8005b78 <pHStatus_update+0x8c>
 8005b78:	46c0      	nop			; (mov r8, r8)
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	2000001c 	.word	0x2000001c
 8005b84:	41280000 	.word	0x41280000
 8005b88:	20000021 	.word	0x20000021
 8005b8c:	41080000 	.word	0x41080000
 8005b90:	40600000 	.word	0x40600000
 8005b94:	40b00000 	.word	0x40b00000

08005b98 <mainPage_graphics>:


static void mainPage_graphics(void)
{
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b08f      	sub	sp, #60	; 0x3c
 8005b9c:	af04      	add	r7, sp, #16

	// 1. Title
	pageTitle_graphics("Current pH", MAIN_PAGE);
 8005b9e:	4b13      	ldr	r3, [pc, #76]	; (8005bec <mainPage_graphics+0x54>)
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 f8e0 	bl	8005d68 <pageTitle_graphics>

	// 2. Color scale
	colorBar_graphics();
 8005ba8:	f000 f97a 	bl	8005ea0 <colorBar_graphics>

	// 3. Buttons
	mainElement[0].elemtentType = NONE;
 8005bac:	4b10      	ldr	r3, [pc, #64]	; (8005bf0 <mainPage_graphics+0x58>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
	mainElement[1] = createButton(MAIN_TO_SWCALIB_BTN_POSX, MAIN_TO_SWCALIB_BTN_POSY, "CAL", GRAY, BLACK, btnSwitchPage, SW_PROCESS);
 8005bb2:	4c0f      	ldr	r4, [pc, #60]	; (8005bf0 <mainPage_graphics+0x58>)
 8005bb4:	0038      	movs	r0, r7
 8005bb6:	4a0f      	ldr	r2, [pc, #60]	; (8005bf4 <mainPage_graphics+0x5c>)
 8005bb8:	2304      	movs	r3, #4
 8005bba:	9303      	str	r3, [sp, #12]
 8005bbc:	4b0e      	ldr	r3, [pc, #56]	; (8005bf8 <mainPage_graphics+0x60>)
 8005bbe:	9302      	str	r3, [sp, #8]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	9301      	str	r3, [sp, #4]
 8005bc4:	4b0d      	ldr	r3, [pc, #52]	; (8005bfc <mainPage_graphics+0x64>)
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	0013      	movs	r3, r2
 8005bca:	2268      	movs	r2, #104	; 0x68
 8005bcc:	2132      	movs	r1, #50	; 0x32
 8005bce:	f7fe fc47 	bl	8004460 <createButton>
 8005bd2:	003a      	movs	r2, r7
 8005bd4:	0023      	movs	r3, r4
 8005bd6:	3324      	adds	r3, #36	; 0x24
 8005bd8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005bda:	c313      	stmia	r3!, {r0, r1, r4}
 8005bdc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005bde:	c313      	stmia	r3!, {r0, r1, r4}
 8005be0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005be2:	c313      	stmia	r3!, {r0, r1, r4}

}
 8005be4:	46c0      	nop			; (mov r8, r8)
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b00b      	add	sp, #44	; 0x2c
 8005bea:	bd90      	pop	{r4, r7, pc}
 8005bec:	080080cc 	.word	0x080080cc
 8005bf0:	200001d4 	.word	0x200001d4
 8005bf4:	080080d8 	.word	0x080080d8
 8005bf8:	08005749 	.word	0x08005749
 8005bfc:	00009cd3 	.word	0x00009cd3

08005c00 <circuitCalibPage_graphics>:


static void circuitCalibPage_graphics(void)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	af00      	add	r7, sp, #0

	// 1. Title
	pageTitle_graphics("HW calibration", CIRCUIT_CALIBRATION_PAGE);
 8005c04:	4b06      	ldr	r3, [pc, #24]	; (8005c20 <circuitCalibPage_graphics+0x20>)
 8005c06:	2108      	movs	r1, #8
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 f8ad 	bl	8005d68 <pageTitle_graphics>

	// 2. Offset indicators
	orizzIndicators_graphics(RED);
 8005c0e:	23f8      	movs	r3, #248	; 0xf8
 8005c10:	021b      	lsls	r3, r3, #8
 8005c12:	0018      	movs	r0, r3
 8005c14:	f000 f9f8 	bl	8006008 <orizzIndicators_graphics>

}
 8005c18:	46c0      	nop			; (mov r8, r8)
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	46c0      	nop			; (mov r8, r8)
 8005c20:	080080dc 	.word	0x080080dc

08005c24 <softwareCalibPage_graphics>:


static void softwareCalibPage_graphics(void)
{
 8005c24:	b590      	push	{r4, r7, lr}
 8005c26:	b091      	sub	sp, #68	; 0x44
 8005c28:	af04      	add	r7, sp, #16

	// 1. Title
	pageTitle_graphics("SW calibration", SOFTWARE_CALIBRATION_PAGE);
 8005c2a:	4b43      	ldr	r3, [pc, #268]	; (8005d38 <softwareCalibPage_graphics+0x114>)
 8005c2c:	2104      	movs	r1, #4
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 f89a 	bl	8005d68 <pageTitle_graphics>

	// 2. Timer
	char sTimer[] = {'9', 0};
 8005c34:	242c      	movs	r4, #44	; 0x2c
 8005c36:	193b      	adds	r3, r7, r4
 8005c38:	2239      	movs	r2, #57	; 0x39
 8005c3a:	801a      	strh	r2, [r3, #0]
	ST7735_WriteString(5, 35, "TIMER", Font_11x18, WHITE, BLACK);
 8005c3c:	4b3f      	ldr	r3, [pc, #252]	; (8005d3c <softwareCalibPage_graphics+0x118>)
 8005c3e:	4840      	ldr	r0, [pc, #256]	; (8005d40 <softwareCalibPage_graphics+0x11c>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	9202      	str	r2, [sp, #8]
 8005c44:	4a3f      	ldr	r2, [pc, #252]	; (8005d44 <softwareCalibPage_graphics+0x120>)
 8005c46:	9201      	str	r2, [sp, #4]
 8005c48:	466a      	mov	r2, sp
 8005c4a:	6859      	ldr	r1, [r3, #4]
 8005c4c:	6011      	str	r1, [r2, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	0002      	movs	r2, r0
 8005c52:	2123      	movs	r1, #35	; 0x23
 8005c54:	2005      	movs	r0, #5
 8005c56:	f7fe fac1 	bl	80041dc <ST7735_WriteString>
	ST7735_WriteString(SWCALIB_TIMER_POSX, SWCALIB_TIMER_POSY, sTimer, Font_11x18, WHITE, BLACK);
 8005c5a:	4b38      	ldr	r3, [pc, #224]	; (8005d3c <softwareCalibPage_graphics+0x118>)
 8005c5c:	1938      	adds	r0, r7, r4
 8005c5e:	2200      	movs	r2, #0
 8005c60:	9202      	str	r2, [sp, #8]
 8005c62:	4a38      	ldr	r2, [pc, #224]	; (8005d44 <softwareCalibPage_graphics+0x120>)
 8005c64:	9201      	str	r2, [sp, #4]
 8005c66:	466a      	mov	r2, sp
 8005c68:	6859      	ldr	r1, [r3, #4]
 8005c6a:	6011      	str	r1, [r2, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	0002      	movs	r2, r0
 8005c70:	2137      	movs	r1, #55	; 0x37
 8005c72:	2014      	movs	r0, #20
 8005c74:	f7fe fab2 	bl	80041dc <ST7735_WriteString>

	// 3. Point number
	ST7735_WriteString(SWCALIB_PT_NUM_POSX, SWCALIB_PT_NUM_POSY, "PT.1", Font_11x18, WHITE, BLACK);
 8005c78:	4b30      	ldr	r3, [pc, #192]	; (8005d3c <softwareCalibPage_graphics+0x118>)
 8005c7a:	4833      	ldr	r0, [pc, #204]	; (8005d48 <softwareCalibPage_graphics+0x124>)
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	9202      	str	r2, [sp, #8]
 8005c80:	4a30      	ldr	r2, [pc, #192]	; (8005d44 <softwareCalibPage_graphics+0x120>)
 8005c82:	9201      	str	r2, [sp, #4]
 8005c84:	466a      	mov	r2, sp
 8005c86:	6859      	ldr	r1, [r3, #4]
 8005c88:	6011      	str	r1, [r2, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	0002      	movs	r2, r0
 8005c8e:	2168      	movs	r1, #104	; 0x68
 8005c90:	203c      	movs	r0, #60	; 0x3c
 8005c92:	f7fe faa3 	bl	80041dc <ST7735_WriteString>

	// 4. First element always NULL
	swCalibElement[0].elemtentType = NONE;
 8005c96:	4b2d      	ldr	r3, [pc, #180]	; (8005d4c <softwareCalibPage_graphics+0x128>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]

	// 5. Home button
	swCalibElement[1] = createButton(HOME_BTN_POSX, HOME_BTN_POSY, "<-", GRAY, GRAY, btnSwitchPage, 2);
 8005c9c:	4c2b      	ldr	r4, [pc, #172]	; (8005d4c <softwareCalibPage_graphics+0x128>)
 8005c9e:	0038      	movs	r0, r7
 8005ca0:	4a2b      	ldr	r2, [pc, #172]	; (8005d50 <softwareCalibPage_graphics+0x12c>)
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	9303      	str	r3, [sp, #12]
 8005ca6:	4b2b      	ldr	r3, [pc, #172]	; (8005d54 <softwareCalibPage_graphics+0x130>)
 8005ca8:	9302      	str	r3, [sp, #8]
 8005caa:	4b2b      	ldr	r3, [pc, #172]	; (8005d58 <softwareCalibPage_graphics+0x134>)
 8005cac:	9301      	str	r3, [sp, #4]
 8005cae:	4b2a      	ldr	r3, [pc, #168]	; (8005d58 <softwareCalibPage_graphics+0x134>)
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	0013      	movs	r3, r2
 8005cb4:	2268      	movs	r2, #104	; 0x68
 8005cb6:	210c      	movs	r1, #12
 8005cb8:	f7fe fbd2 	bl	8004460 <createButton>
 8005cbc:	003a      	movs	r2, r7
 8005cbe:	0023      	movs	r3, r4
 8005cc0:	3324      	adds	r3, #36	; 0x24
 8005cc2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005cc4:	c313      	stmia	r3!, {r0, r1, r4}
 8005cc6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005cc8:	c313      	stmia	r3!, {r0, r1, r4}
 8005cca:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ccc:	c313      	stmia	r3!, {r0, r1, r4}

	// 6. pH buffer
	swCalibElement[2] = createEditNumBox(PH_BUFFER_TEXT_POSX, PH_BUFFER_TEXT_POSY, "pH BUFF", BLACK, 0, BLACK);
 8005cce:	4c1f      	ldr	r4, [pc, #124]	; (8005d4c <softwareCalibPage_graphics+0x128>)
 8005cd0:	0038      	movs	r0, r7
 8005cd2:	4b22      	ldr	r3, [pc, #136]	; (8005d5c <softwareCalibPage_graphics+0x138>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	9202      	str	r2, [sp, #8]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	9201      	str	r2, [sp, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	9200      	str	r2, [sp, #0]
 8005ce0:	2223      	movs	r2, #35	; 0x23
 8005ce2:	2150      	movs	r1, #80	; 0x50
 8005ce4:	f7fe fc62 	bl	80045ac <createEditNumBox>
 8005ce8:	003a      	movs	r2, r7
 8005cea:	0023      	movs	r3, r4
 8005cec:	3348      	adds	r3, #72	; 0x48
 8005cee:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005cf0:	c313      	stmia	r3!, {r0, r1, r4}
 8005cf2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005cf4:	c313      	stmia	r3!, {r0, r1, r4}
 8005cf6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005cf8:	c313      	stmia	r3!, {r0, r1, r4}

	// 7. Buttons
	swCalibElement[3] = createButton(PH_BUFFER_START_BTN_POSX, PH_BUFFER_START_BTN_POSY, "START/STOP", RED, GREEN, btnStartTimer, 0);
 8005cfa:	4c14      	ldr	r4, [pc, #80]	; (8005d4c <softwareCalibPage_graphics+0x128>)
 8005cfc:	0038      	movs	r0, r7
 8005cfe:	4a18      	ldr	r2, [pc, #96]	; (8005d60 <softwareCalibPage_graphics+0x13c>)
 8005d00:	2300      	movs	r3, #0
 8005d02:	9303      	str	r3, [sp, #12]
 8005d04:	4b17      	ldr	r3, [pc, #92]	; (8005d64 <softwareCalibPage_graphics+0x140>)
 8005d06:	9302      	str	r3, [sp, #8]
 8005d08:	23fc      	movs	r3, #252	; 0xfc
 8005d0a:	00db      	lsls	r3, r3, #3
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	23f8      	movs	r3, #248	; 0xf8
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	0013      	movs	r3, r2
 8005d16:	2250      	movs	r2, #80	; 0x50
 8005d18:	2150      	movs	r1, #80	; 0x50
 8005d1a:	f7fe fba1 	bl	8004460 <createButton>
 8005d1e:	003a      	movs	r2, r7
 8005d20:	0023      	movs	r3, r4
 8005d22:	336c      	adds	r3, #108	; 0x6c
 8005d24:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d26:	c313      	stmia	r3!, {r0, r1, r4}
 8005d28:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d2a:	c313      	stmia	r3!, {r0, r1, r4}
 8005d2c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d2e:	c313      	stmia	r3!, {r0, r1, r4}

}
 8005d30:	46c0      	nop			; (mov r8, r8)
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b00d      	add	sp, #52	; 0x34
 8005d36:	bd90      	pop	{r4, r7, pc}
 8005d38:	080080ec 	.word	0x080080ec
 8005d3c:	20000008 	.word	0x20000008
 8005d40:	080080fc 	.word	0x080080fc
 8005d44:	0000ffff 	.word	0x0000ffff
 8005d48:	08008104 	.word	0x08008104
 8005d4c:	20000144 	.word	0x20000144
 8005d50:	0800810c 	.word	0x0800810c
 8005d54:	08005749 	.word	0x08005749
 8005d58:	00009cd3 	.word	0x00009cd3
 8005d5c:	08008110 	.word	0x08008110
 8005d60:	08008118 	.word	0x08008118
 8005d64:	0800576d 	.word	0x0800576d

08005d68 <pageTitle_graphics>:

static void pageTitle_graphics(const char *title, uint8_t page)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b089      	sub	sp, #36	; 0x24
 8005d6c:	af04      	add	r7, sp, #16
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	000a      	movs	r2, r1
 8005d72:	1cfb      	adds	r3, r7, #3
 8005d74:	701a      	strb	r2, [r3, #0]
	 *   \						   /
	 *	  \-----------------------/
	 */


	uint8_t offset = 0;
 8005d76:	210f      	movs	r1, #15
 8005d78:	187b      	adds	r3, r7, r1
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	701a      	strb	r2, [r3, #0]


	if(page == MAIN_PAGE)
 8005d7e:	1cfb      	adds	r3, r7, #3
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d103      	bne.n	8005d8e <pageTitle_graphics+0x26>
		offset = 0;
 8005d86:	187b      	adds	r3, r7, r1
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	e015      	b.n	8005dba <pageTitle_graphics+0x52>
	else if(page == CIRCUIT_CALIBRATION_PAGE)
 8005d8e:	1cfb      	adds	r3, r7, #3
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b08      	cmp	r3, #8
 8005d94:	d104      	bne.n	8005da0 <pageTitle_graphics+0x38>
		offset = 13;
 8005d96:	230f      	movs	r3, #15
 8005d98:	18fb      	adds	r3, r7, r3
 8005d9a:	220d      	movs	r2, #13
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e00c      	b.n	8005dba <pageTitle_graphics+0x52>
	else if(page == SOFTWARE_CALIBRATION_PAGE)
 8005da0:	1cfb      	adds	r3, r7, #3
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d104      	bne.n	8005db2 <pageTitle_graphics+0x4a>
		offset = 13;
 8005da8:	230f      	movs	r3, #15
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	220d      	movs	r2, #13
 8005dae:	701a      	strb	r2, [r3, #0]
 8005db0:	e003      	b.n	8005dba <pageTitle_graphics+0x52>
	else
		offset = 0;
 8005db2:	230f      	movs	r3, #15
 8005db4:	18fb      	adds	r3, r7, r3
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]

	ST7735_SetRotation(1);
 8005dba:	2001      	movs	r0, #1
 8005dbc:	f7fe f89a 	bl	8003ef4 <ST7735_SetRotation>

	fillTriangle(30-offset, 0, 50-offset, 0, 50-offset, 20, MAIN_COLOR);
 8005dc0:	240f      	movs	r4, #15
 8005dc2:	193b      	adds	r3, r7, r4
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	221e      	movs	r2, #30
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	b218      	sxth	r0, r3
 8005dd0:	193b      	adds	r3, r7, r4
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2232      	movs	r2, #50	; 0x32
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	b219      	sxth	r1, r3
 8005dde:	193b      	adds	r3, r7, r4
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2232      	movs	r2, #50	; 0x32
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	b21b      	sxth	r3, r3
 8005dec:	22c3      	movs	r2, #195	; 0xc3
 8005dee:	0112      	lsls	r2, r2, #4
 8005df0:	9202      	str	r2, [sp, #8]
 8005df2:	2214      	movs	r2, #20
 8005df4:	9201      	str	r2, [sp, #4]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2300      	movs	r3, #0
 8005dfa:	000a      	movs	r2, r1
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	f7fd fcd3 	bl	80037a8 <fillTriangle>
	fillTriangle(110+offset, 0, 130+offset, 0, 110+offset, 20, MAIN_COLOR);
 8005e02:	193b      	adds	r3, r7, r4
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	336e      	adds	r3, #110	; 0x6e
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	b218      	sxth	r0, r3
 8005e0e:	193b      	adds	r3, r7, r4
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	3382      	adds	r3, #130	; 0x82
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	b219      	sxth	r1, r3
 8005e1a:	193b      	adds	r3, r7, r4
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	336e      	adds	r3, #110	; 0x6e
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	b21b      	sxth	r3, r3
 8005e26:	22c3      	movs	r2, #195	; 0xc3
 8005e28:	0112      	lsls	r2, r2, #4
 8005e2a:	9202      	str	r2, [sp, #8]
 8005e2c:	2214      	movs	r2, #20
 8005e2e:	9201      	str	r2, [sp, #4]
 8005e30:	9300      	str	r3, [sp, #0]
 8005e32:	2300      	movs	r3, #0
 8005e34:	000a      	movs	r2, r1
 8005e36:	2100      	movs	r1, #0
 8005e38:	f7fd fcb6 	bl	80037a8 <fillTriangle>
    fillRect(50-offset, 0, 60+(2*offset), 21, MAIN_COLOR);
 8005e3c:	193b      	adds	r3, r7, r4
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2232      	movs	r2, #50	; 0x32
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	b218      	sxth	r0, r3
 8005e4a:	193b      	adds	r3, r7, r4
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	331e      	adds	r3, #30
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	18db      	adds	r3, r3, r3
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	b21a      	sxth	r2, r3
 8005e58:	23c3      	movs	r3, #195	; 0xc3
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	2315      	movs	r3, #21
 8005e60:	2100      	movs	r1, #0
 8005e62:	f7fc fda5 	bl	80029b0 <fillRect>

    ST7735_WriteString(45-offset, 3, title, Font_7x10, WHITE, MAIN_COLOR);
 8005e66:	193b      	adds	r3, r7, r4
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	222d      	movs	r2, #45	; 0x2d
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	b298      	uxth	r0, r3
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <pageTitle_graphics+0x130>)
 8005e74:	687c      	ldr	r4, [r7, #4]
 8005e76:	22c3      	movs	r2, #195	; 0xc3
 8005e78:	0112      	lsls	r2, r2, #4
 8005e7a:	9202      	str	r2, [sp, #8]
 8005e7c:	4a07      	ldr	r2, [pc, #28]	; (8005e9c <pageTitle_graphics+0x134>)
 8005e7e:	9201      	str	r2, [sp, #4]
 8005e80:	466a      	mov	r2, sp
 8005e82:	6859      	ldr	r1, [r3, #4]
 8005e84:	6011      	str	r1, [r2, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	0022      	movs	r2, r4
 8005e8a:	2103      	movs	r1, #3
 8005e8c:	f7fe f9a6 	bl	80041dc <ST7735_WriteString>

}
 8005e90:	46c0      	nop			; (mov r8, r8)
 8005e92:	46bd      	mov	sp, r7
 8005e94:	b005      	add	sp, #20
 8005e96:	bd90      	pop	{r4, r7, pc}
 8005e98:	20000000 	.word	0x20000000
 8005e9c:	0000ffff 	.word	0x0000ffff

08005ea0 <colorBar_graphics>:

static void colorBar_graphics(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af02      	add	r7, sp, #8
	 * |________|	0
	 *
	 */


	ST7735_SetRotation(1);
 8005ea6:	2001      	movs	r0, #1
 8005ea8:	f7fe f824 	bl	8003ef4 <ST7735_SetRotation>

	uint8_t x = 120;
 8005eac:	1dfb      	adds	r3, r7, #7
 8005eae:	2278      	movs	r2, #120	; 0x78
 8005eb0:	701a      	strb	r2, [r3, #0]
	uint8_t y = 100;
 8005eb2:	1dbb      	adds	r3, r7, #6
 8005eb4:	2264      	movs	r2, #100	; 0x64
 8005eb6:	701a      	strb	r2, [r3, #0]

	drawRect(x, y-80, 40, 20, BLACK);
 8005eb8:	1dfb      	adds	r3, r7, #7
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	b218      	sxth	r0, r3
 8005ebe:	1dbb      	adds	r3, r7, #6
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b50      	subs	r3, #80	; 0x50
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	b219      	sxth	r1, r3
 8005eca:	2300      	movs	r3, #0
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	2314      	movs	r3, #20
 8005ed0:	2228      	movs	r2, #40	; 0x28
 8005ed2:	f7fd fa13 	bl	80032fc <drawRect>
	drawRect(x, y-60, 40, 20, BLACK);
 8005ed6:	1dfb      	adds	r3, r7, #7
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	b218      	sxth	r0, r3
 8005edc:	1dbb      	adds	r3, r7, #6
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b3c      	subs	r3, #60	; 0x3c
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	b219      	sxth	r1, r3
 8005ee8:	2300      	movs	r3, #0
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	2314      	movs	r3, #20
 8005eee:	2228      	movs	r2, #40	; 0x28
 8005ef0:	f7fd fa04 	bl	80032fc <drawRect>
	drawRect(x, y-40, 40, 20, BLACK);
 8005ef4:	1dfb      	adds	r3, r7, #7
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	b218      	sxth	r0, r3
 8005efa:	1dbb      	adds	r3, r7, #6
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b28      	subs	r3, #40	; 0x28
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	b219      	sxth	r1, r3
 8005f06:	2300      	movs	r3, #0
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	2314      	movs	r3, #20
 8005f0c:	2228      	movs	r2, #40	; 0x28
 8005f0e:	f7fd f9f5 	bl	80032fc <drawRect>
	drawRect(x, y-20, 40, 20, BLACK);
 8005f12:	1dfb      	adds	r3, r7, #7
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	b218      	sxth	r0, r3
 8005f18:	1dbb      	adds	r3, r7, #6
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b14      	subs	r3, #20
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	b219      	sxth	r1, r3
 8005f24:	2300      	movs	r3, #0
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	2314      	movs	r3, #20
 8005f2a:	2228      	movs	r2, #40	; 0x28
 8005f2c:	f7fd f9e6 	bl	80032fc <drawRect>
	drawRect(x, y, 40, 20, BLACK);
 8005f30:	1dfb      	adds	r3, r7, #7
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	b218      	sxth	r0, r3
 8005f36:	1dbb      	adds	r3, r7, #6
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	b219      	sxth	r1, r3
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2314      	movs	r3, #20
 8005f42:	2228      	movs	r2, #40	; 0x28
 8005f44:	f7fd f9da 	bl	80032fc <drawRect>

	fillRect(x+1, y-80, 39, 19, DARK_BLUE);
 8005f48:	1dfb      	adds	r3, r7, #7
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	3301      	adds	r3, #1
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	b218      	sxth	r0, r3
 8005f54:	1dbb      	adds	r3, r7, #6
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b50      	subs	r3, #80	; 0x50
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	b219      	sxth	r1, r3
 8005f60:	231f      	movs	r3, #31
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	2313      	movs	r3, #19
 8005f66:	2227      	movs	r2, #39	; 0x27
 8005f68:	f7fc fd22 	bl	80029b0 <fillRect>
	fillRect(x+1, y-60, 39, 19, BLUE);
 8005f6c:	1dfb      	adds	r3, r7, #7
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	b29b      	uxth	r3, r3
 8005f72:	3301      	adds	r3, #1
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	b218      	sxth	r0, r3
 8005f78:	1dbb      	adds	r3, r7, #6
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b3c      	subs	r3, #60	; 0x3c
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	b219      	sxth	r1, r3
 8005f84:	23ff      	movs	r3, #255	; 0xff
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2313      	movs	r3, #19
 8005f8a:	2227      	movs	r2, #39	; 0x27
 8005f8c:	f7fc fd10 	bl	80029b0 <fillRect>
	fillRect(x+1, y-40, 39, 19, GREEN);
 8005f90:	1dfb      	adds	r3, r7, #7
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	3301      	adds	r3, #1
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	b218      	sxth	r0, r3
 8005f9c:	1dbb      	adds	r3, r7, #6
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	3b28      	subs	r3, #40	; 0x28
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	b219      	sxth	r1, r3
 8005fa8:	23fc      	movs	r3, #252	; 0xfc
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	9300      	str	r3, [sp, #0]
 8005fae:	2313      	movs	r3, #19
 8005fb0:	2227      	movs	r2, #39	; 0x27
 8005fb2:	f7fc fcfd 	bl	80029b0 <fillRect>
	fillRect(x+1, y-20, 39, 19, YELLOW);
 8005fb6:	1dfb      	adds	r3, r7, #7
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	b218      	sxth	r0, r3
 8005fc2:	1dbb      	adds	r3, r7, #6
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3b14      	subs	r3, #20
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	b219      	sxth	r1, r3
 8005fce:	4b0d      	ldr	r3, [pc, #52]	; (8006004 <colorBar_graphics+0x164>)
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	2313      	movs	r3, #19
 8005fd4:	2227      	movs	r2, #39	; 0x27
 8005fd6:	f7fc fceb 	bl	80029b0 <fillRect>
	fillRect(x+1, y, 39, 19, RED);
 8005fda:	1dfb      	adds	r3, r7, #7
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	b218      	sxth	r0, r3
 8005fe6:	1dbb      	adds	r3, r7, #6
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	b219      	sxth	r1, r3
 8005fec:	23f8      	movs	r3, #248	; 0xf8
 8005fee:	021b      	lsls	r3, r3, #8
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	2313      	movs	r3, #19
 8005ff4:	2227      	movs	r2, #39	; 0x27
 8005ff6:	f7fc fcdb 	bl	80029b0 <fillRect>

}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	b002      	add	sp, #8
 8006000:	bd80      	pop	{r7, pc}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	0000ffe0 	.word	0x0000ffe0

08006008 <orizzIndicators_graphics>:

static void orizzIndicators_graphics(uint16_t color)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af04      	add	r7, sp, #16
 800600e:	0002      	movs	r2, r0
 8006010:	1dbb      	adds	r3, r7, #6
 8006012:	801a      	strh	r2, [r3, #0]
	 * |/                              \|
	 *
	 */


	fillTriangle(0, 128-34, 20, 128-54, 0, 128-74, color);
 8006014:	1dbb      	adds	r3, r7, #6
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	9302      	str	r3, [sp, #8]
 800601a:	2336      	movs	r3, #54	; 0x36
 800601c:	9301      	str	r3, [sp, #4]
 800601e:	2300      	movs	r3, #0
 8006020:	9300      	str	r3, [sp, #0]
 8006022:	234a      	movs	r3, #74	; 0x4a
 8006024:	2214      	movs	r2, #20
 8006026:	215e      	movs	r1, #94	; 0x5e
 8006028:	2000      	movs	r0, #0
 800602a:	f7fd fbbd 	bl	80037a8 <fillTriangle>
	fillTriangle(160, 128-34, 140, 128-54, 160, 128-74, color);
 800602e:	1dbb      	adds	r3, r7, #6
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	9302      	str	r3, [sp, #8]
 8006034:	2336      	movs	r3, #54	; 0x36
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	23a0      	movs	r3, #160	; 0xa0
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	234a      	movs	r3, #74	; 0x4a
 800603e:	228c      	movs	r2, #140	; 0x8c
 8006040:	215e      	movs	r1, #94	; 0x5e
 8006042:	20a0      	movs	r0, #160	; 0xa0
 8006044:	f7fd fbb0 	bl	80037a8 <fillTriangle>


}
 8006048:	46c0      	nop			; (mov r8, r8)
 800604a:	46bd      	mov	sp, r7
 800604c:	b002      	add	sp, #8
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <HAL_MspInit+0x44>)
 8006058:	699a      	ldr	r2, [r3, #24]
 800605a:	4b0e      	ldr	r3, [pc, #56]	; (8006094 <HAL_MspInit+0x44>)
 800605c:	2101      	movs	r1, #1
 800605e:	430a      	orrs	r2, r1
 8006060:	619a      	str	r2, [r3, #24]
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <HAL_MspInit+0x44>)
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2201      	movs	r2, #1
 8006068:	4013      	ands	r3, r2
 800606a:	607b      	str	r3, [r7, #4]
 800606c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800606e:	4b09      	ldr	r3, [pc, #36]	; (8006094 <HAL_MspInit+0x44>)
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	4b08      	ldr	r3, [pc, #32]	; (8006094 <HAL_MspInit+0x44>)
 8006074:	2180      	movs	r1, #128	; 0x80
 8006076:	0549      	lsls	r1, r1, #21
 8006078:	430a      	orrs	r2, r1
 800607a:	61da      	str	r2, [r3, #28]
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <HAL_MspInit+0x44>)
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	2380      	movs	r3, #128	; 0x80
 8006082:	055b      	lsls	r3, r3, #21
 8006084:	4013      	ands	r3, r2
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800608a:	46c0      	nop			; (mov r8, r8)
 800608c:	46bd      	mov	sp, r7
 800608e:	b002      	add	sp, #8
 8006090:	bd80      	pop	{r7, pc}
 8006092:	46c0      	nop			; (mov r8, r8)
 8006094:	40021000 	.word	0x40021000

08006098 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006098:	b590      	push	{r4, r7, lr}
 800609a:	b08b      	sub	sp, #44	; 0x2c
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a0:	2414      	movs	r4, #20
 80060a2:	193b      	adds	r3, r7, r4
 80060a4:	0018      	movs	r0, r3
 80060a6:	2314      	movs	r3, #20
 80060a8:	001a      	movs	r2, r3
 80060aa:	2100      	movs	r1, #0
 80060ac:	f001 ffd2 	bl	8008054 <memset>
  if(hadc->Instance==ADC1)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a18      	ldr	r2, [pc, #96]	; (8006118 <HAL_ADC_MspInit+0x80>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d12a      	bne.n	8006110 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80060ba:	4b18      	ldr	r3, [pc, #96]	; (800611c <HAL_ADC_MspInit+0x84>)
 80060bc:	699a      	ldr	r2, [r3, #24]
 80060be:	4b17      	ldr	r3, [pc, #92]	; (800611c <HAL_ADC_MspInit+0x84>)
 80060c0:	2180      	movs	r1, #128	; 0x80
 80060c2:	0089      	lsls	r1, r1, #2
 80060c4:	430a      	orrs	r2, r1
 80060c6:	619a      	str	r2, [r3, #24]
 80060c8:	4b14      	ldr	r3, [pc, #80]	; (800611c <HAL_ADC_MspInit+0x84>)
 80060ca:	699a      	ldr	r2, [r3, #24]
 80060cc:	2380      	movs	r3, #128	; 0x80
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4013      	ands	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
 80060d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d6:	4b11      	ldr	r3, [pc, #68]	; (800611c <HAL_ADC_MspInit+0x84>)
 80060d8:	695a      	ldr	r2, [r3, #20]
 80060da:	4b10      	ldr	r3, [pc, #64]	; (800611c <HAL_ADC_MspInit+0x84>)
 80060dc:	2180      	movs	r1, #128	; 0x80
 80060de:	02c9      	lsls	r1, r1, #11
 80060e0:	430a      	orrs	r2, r1
 80060e2:	615a      	str	r2, [r3, #20]
 80060e4:	4b0d      	ldr	r3, [pc, #52]	; (800611c <HAL_ADC_MspInit+0x84>)
 80060e6:	695a      	ldr	r2, [r3, #20]
 80060e8:	2380      	movs	r3, #128	; 0x80
 80060ea:	02db      	lsls	r3, r3, #11
 80060ec:	4013      	ands	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 80060f2:	193b      	adds	r3, r7, r4
 80060f4:	2201      	movs	r2, #1
 80060f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060f8:	193b      	adds	r3, r7, r4
 80060fa:	2203      	movs	r2, #3
 80060fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060fe:	193b      	adds	r3, r7, r4
 8006100:	2200      	movs	r2, #0
 8006102:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8006104:	193b      	adds	r3, r7, r4
 8006106:	4a06      	ldr	r2, [pc, #24]	; (8006120 <HAL_ADC_MspInit+0x88>)
 8006108:	0019      	movs	r1, r3
 800610a:	0010      	movs	r0, r2
 800610c:	f000 fe02 	bl	8006d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006110:	46c0      	nop			; (mov r8, r8)
 8006112:	46bd      	mov	sp, r7
 8006114:	b00b      	add	sp, #44	; 0x2c
 8006116:	bd90      	pop	{r4, r7, pc}
 8006118:	40012400 	.word	0x40012400
 800611c:	40021000 	.word	0x40021000
 8006120:	48000400 	.word	0x48000400

08006124 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006124:	b590      	push	{r4, r7, lr}
 8006126:	b08b      	sub	sp, #44	; 0x2c
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800612c:	2414      	movs	r4, #20
 800612e:	193b      	adds	r3, r7, r4
 8006130:	0018      	movs	r0, r3
 8006132:	2314      	movs	r3, #20
 8006134:	001a      	movs	r2, r3
 8006136:	2100      	movs	r1, #0
 8006138:	f001 ff8c 	bl	8008054 <memset>
  if(hspi->Instance==SPI1)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a1c      	ldr	r2, [pc, #112]	; (80061b4 <HAL_SPI_MspInit+0x90>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d132      	bne.n	80061ac <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006146:	4b1c      	ldr	r3, [pc, #112]	; (80061b8 <HAL_SPI_MspInit+0x94>)
 8006148:	699a      	ldr	r2, [r3, #24]
 800614a:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <HAL_SPI_MspInit+0x94>)
 800614c:	2180      	movs	r1, #128	; 0x80
 800614e:	0149      	lsls	r1, r1, #5
 8006150:	430a      	orrs	r2, r1
 8006152:	619a      	str	r2, [r3, #24]
 8006154:	4b18      	ldr	r3, [pc, #96]	; (80061b8 <HAL_SPI_MspInit+0x94>)
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	015b      	lsls	r3, r3, #5
 800615c:	4013      	ands	r3, r2
 800615e:	613b      	str	r3, [r7, #16]
 8006160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <HAL_SPI_MspInit+0x94>)
 8006164:	695a      	ldr	r2, [r3, #20]
 8006166:	4b14      	ldr	r3, [pc, #80]	; (80061b8 <HAL_SPI_MspInit+0x94>)
 8006168:	2180      	movs	r1, #128	; 0x80
 800616a:	0289      	lsls	r1, r1, #10
 800616c:	430a      	orrs	r2, r1
 800616e:	615a      	str	r2, [r3, #20]
 8006170:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <HAL_SPI_MspInit+0x94>)
 8006172:	695a      	ldr	r2, [r3, #20]
 8006174:	2380      	movs	r3, #128	; 0x80
 8006176:	029b      	lsls	r3, r3, #10
 8006178:	4013      	ands	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800617e:	0021      	movs	r1, r4
 8006180:	187b      	adds	r3, r7, r1
 8006182:	22e0      	movs	r2, #224	; 0xe0
 8006184:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006186:	187b      	adds	r3, r7, r1
 8006188:	2202      	movs	r2, #2
 800618a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618c:	187b      	adds	r3, r7, r1
 800618e:	2200      	movs	r2, #0
 8006190:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006192:	187b      	adds	r3, r7, r1
 8006194:	2203      	movs	r2, #3
 8006196:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006198:	187b      	adds	r3, r7, r1
 800619a:	2200      	movs	r2, #0
 800619c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800619e:	187a      	adds	r2, r7, r1
 80061a0:	2390      	movs	r3, #144	; 0x90
 80061a2:	05db      	lsls	r3, r3, #23
 80061a4:	0011      	movs	r1, r2
 80061a6:	0018      	movs	r0, r3
 80061a8:	f000 fdb4 	bl	8006d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80061ac:	46c0      	nop			; (mov r8, r8)
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b00b      	add	sp, #44	; 0x2c
 80061b2:	bd90      	pop	{r4, r7, pc}
 80061b4:	40013000 	.word	0x40013000
 80061b8:	40021000 	.word	0x40021000

080061bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80061c0:	e7fe      	b.n	80061c0 <NMI_Handler+0x4>

080061c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80061c6:	e7fe      	b.n	80061c6 <HardFault_Handler+0x4>

080061c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80061cc:	46c0      	nop			; (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80061d6:	46c0      	nop			; (mov r8, r8)
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80061e0:	f000 f980 	bl	80064e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80061e4:	46c0      	nop			; (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80061ee:	46c0      	nop			; (mov r8, r8)
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <getTimeMs>:
/*
 *	@ Function; getDelayms
 *  @ Return; uint32_t -> current time in ms
 */
uint32_t getTimeMs(void)
{
 80061f4:	b5b0      	push	{r4, r5, r7, lr}
 80061f6:	af00      	add	r7, sp, #0

	// Tick frequency is by default 1kHz (1ms period)
	return ( HAL_GetTick() * HAL_GetTickFreq() );
 80061f8:	f000 f986 	bl	8006508 <HAL_GetTick>
 80061fc:	0004      	movs	r4, r0
 80061fe:	f000 f98d 	bl	800651c <HAL_GetTickFreq>
 8006202:	0003      	movs	r3, r0
 8006204:	4363      	muls	r3, r4

}
 8006206:	0018      	movs	r0, r3
 8006208:	46bd      	mov	sp, r7
 800620a:	bdb0      	pop	{r4, r5, r7, pc}

0800620c <getDelayMs>:
 *	@ Function; getDelayms
 * 	@ Par1; uint32_t timeStamp -> captured time
 *  @ Return; uint32_t tDiff -> time elapsed since timeStamp in ms
 */
uint32_t getDelayMs(uint32_t timeStamp)
{
 800620c:	b590      	push	{r4, r7, lr}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]

	uint32_t tDiff;
	uint32_t currentTime;

	currentTime = ( getTimeMs() * HAL_GetTickFreq() );
 8006214:	f7ff ffee 	bl	80061f4 <getTimeMs>
 8006218:	0004      	movs	r4, r0
 800621a:	f000 f97f 	bl	800651c <HAL_GetTickFreq>
 800621e:	0003      	movs	r3, r0
 8006220:	4363      	muls	r3, r4
 8006222:	60bb      	str	r3, [r7, #8]

	if(currentTime >= timeStamp)
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	429a      	cmp	r2, r3
 800622a:	d304      	bcc.n	8006236 <getDelayMs+0x2a>
		tDiff = currentTime - timeStamp;
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e003      	b.n	800623e <getDelayMs+0x32>
	else
		tDiff = timeStamp - currentTime;
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	60fb      	str	r3, [r7, #12]

	return tDiff;
 800623e:	68fb      	ldr	r3, [r7, #12]

}
 8006240:	0018      	movs	r0, r3
 8006242:	46bd      	mov	sp, r7
 8006244:	b005      	add	sp, #20
 8006246:	bd90      	pop	{r4, r7, pc}

08006248 <floatToString>:
 *	@ Description; converts a float number into a string
 * 	@ Par1; float f -> float number
 * 	@ Par2; char *s -> string
 */
void floatToString(float f, char *s)
{
 8006248:	b5b0      	push	{r4, r5, r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]

	uint16_t ui16Temp = (uint16_t)( f * 100 );
 8006252:	496a      	ldr	r1, [pc, #424]	; (80063fc <floatToString+0x1b4>)
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7fa fca1 	bl	8000b9c <__aeabi_fmul>
 800625a:	1c03      	adds	r3, r0, #0
 800625c:	250e      	movs	r5, #14
 800625e:	197c      	adds	r4, r7, r5
 8006260:	1c18      	adds	r0, r3, #0
 8006262:	f7fa f8ff 	bl	8000464 <__aeabi_f2uiz>
 8006266:	0003      	movs	r3, r0
 8006268:	8023      	strh	r3, [r4, #0]

	if(ui16Temp >= 1000)
 800626a:	197b      	adds	r3, r7, r5
 800626c:	881a      	ldrh	r2, [r3, #0]
 800626e:	23fa      	movs	r3, #250	; 0xfa
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	429a      	cmp	r2, r3
 8006274:	d36d      	bcc.n	8006352 <floatToString+0x10a>
	{

		s[5] = 0;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	3305      	adds	r3, #5
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]

		s[0] = (uint8_t)( ui16Temp / 1000 ) + 0x30;
 800627e:	197b      	adds	r3, r7, r5
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	22fa      	movs	r2, #250	; 0xfa
 8006284:	0091      	lsls	r1, r2, #2
 8006286:	0018      	movs	r0, r3
 8006288:	f7f9 ff3c 	bl	8000104 <__udivsi3>
 800628c:	0003      	movs	r3, r0
 800628e:	b29b      	uxth	r3, r3
 8006290:	b2db      	uxtb	r3, r3
 8006292:	3330      	adds	r3, #48	; 0x30
 8006294:	b2da      	uxtb	r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	701a      	strb	r2, [r3, #0]
		s[1] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 1000 ) * 1000 ) ) / 100 ) + 0x30;
 800629a:	197b      	adds	r3, r7, r5
 800629c:	881c      	ldrh	r4, [r3, #0]
 800629e:	197b      	adds	r3, r7, r5
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	22fa      	movs	r2, #250	; 0xfa
 80062a4:	0091      	lsls	r1, r2, #2
 80062a6:	0018      	movs	r0, r3
 80062a8:	f7f9 ff2c 	bl	8000104 <__udivsi3>
 80062ac:	0003      	movs	r3, r0
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	001a      	movs	r2, r3
 80062b2:	0013      	movs	r3, r2
 80062b4:	059b      	lsls	r3, r3, #22
 80062b6:	1a9b      	subs	r3, r3, r2
 80062b8:	019b      	lsls	r3, r3, #6
 80062ba:	189b      	adds	r3, r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	189b      	adds	r3, r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	18e3      	adds	r3, r4, r3
 80062c4:	2164      	movs	r1, #100	; 0x64
 80062c6:	0018      	movs	r0, r3
 80062c8:	f7f9 ffa6 	bl	8000218 <__divsi3>
 80062cc:	0003      	movs	r3, r0
 80062ce:	b2da      	uxtb	r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	3301      	adds	r3, #1
 80062d4:	3230      	adds	r2, #48	; 0x30
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
		s[2] = '.';
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	3302      	adds	r3, #2
 80062de:	222e      	movs	r2, #46	; 0x2e
 80062e0:	701a      	strb	r2, [r3, #0]
		s[3] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
 80062e2:	197b      	adds	r3, r7, r5
 80062e4:	881c      	ldrh	r4, [r3, #0]
 80062e6:	197b      	adds	r3, r7, r5
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	2164      	movs	r1, #100	; 0x64
 80062ec:	0018      	movs	r0, r3
 80062ee:	f7f9 ff09 	bl	8000104 <__udivsi3>
 80062f2:	0003      	movs	r3, r0
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	001a      	movs	r2, r3
 80062f8:	0013      	movs	r3, r2
 80062fa:	065b      	lsls	r3, r3, #25
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	189b      	adds	r3, r3, r2
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	1a9b      	subs	r3, r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	18e3      	adds	r3, r4, r3
 800630a:	210a      	movs	r1, #10
 800630c:	0018      	movs	r0, r3
 800630e:	f7f9 ff83 	bl	8000218 <__divsi3>
 8006312:	0003      	movs	r3, r0
 8006314:	b2da      	uxtb	r2, r3
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	3303      	adds	r3, #3
 800631a:	3230      	adds	r2, #48	; 0x30
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
		s[4] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;
 8006320:	197b      	adds	r3, r7, r5
 8006322:	881b      	ldrh	r3, [r3, #0]
 8006324:	b2dc      	uxtb	r4, r3
 8006326:	197b      	adds	r3, r7, r5
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	210a      	movs	r1, #10
 800632c:	0018      	movs	r0, r3
 800632e:	f7f9 fee9 	bl	8000104 <__udivsi3>
 8006332:	0003      	movs	r3, r0
 8006334:	b29b      	uxth	r3, r3
 8006336:	b2db      	uxtb	r3, r3
 8006338:	1c1a      	adds	r2, r3, #0
 800633a:	0092      	lsls	r2, r2, #2
 800633c:	18d3      	adds	r3, r2, r3
 800633e:	18db      	adds	r3, r3, r3
 8006340:	b2db      	uxtb	r3, r3
 8006342:	1ae3      	subs	r3, r4, r3
 8006344:	b2da      	uxtb	r2, r3
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	3304      	adds	r3, #4
 800634a:	3230      	adds	r2, #48	; 0x30
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
		s[2] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
		s[3] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;

	}

}
 8006350:	e050      	b.n	80063f4 <floatToString+0x1ac>
		s[5] = 0;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	3305      	adds	r3, #5
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
		s[4] = 0;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	3304      	adds	r3, #4
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
		s[0] = (uint8_t)( ui16Temp / 100 ) + 0x30;
 8006362:	250e      	movs	r5, #14
 8006364:	197b      	adds	r3, r7, r5
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	2164      	movs	r1, #100	; 0x64
 800636a:	0018      	movs	r0, r3
 800636c:	f7f9 feca 	bl	8000104 <__udivsi3>
 8006370:	0003      	movs	r3, r0
 8006372:	b29b      	uxth	r3, r3
 8006374:	b2db      	uxtb	r3, r3
 8006376:	3330      	adds	r3, #48	; 0x30
 8006378:	b2da      	uxtb	r2, r3
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	701a      	strb	r2, [r3, #0]
		s[1] = '.';
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	3301      	adds	r3, #1
 8006382:	222e      	movs	r2, #46	; 0x2e
 8006384:	701a      	strb	r2, [r3, #0]
		s[2] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
 8006386:	197b      	adds	r3, r7, r5
 8006388:	881c      	ldrh	r4, [r3, #0]
 800638a:	197b      	adds	r3, r7, r5
 800638c:	881b      	ldrh	r3, [r3, #0]
 800638e:	2164      	movs	r1, #100	; 0x64
 8006390:	0018      	movs	r0, r3
 8006392:	f7f9 feb7 	bl	8000104 <__udivsi3>
 8006396:	0003      	movs	r3, r0
 8006398:	b29b      	uxth	r3, r3
 800639a:	001a      	movs	r2, r3
 800639c:	0013      	movs	r3, r2
 800639e:	065b      	lsls	r3, r3, #25
 80063a0:	1a9b      	subs	r3, r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	189b      	adds	r3, r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	1a9b      	subs	r3, r3, r2
 80063aa:	009b      	lsls	r3, r3, #2
 80063ac:	18e3      	adds	r3, r4, r3
 80063ae:	210a      	movs	r1, #10
 80063b0:	0018      	movs	r0, r3
 80063b2:	f7f9 ff31 	bl	8000218 <__divsi3>
 80063b6:	0003      	movs	r3, r0
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	3302      	adds	r3, #2
 80063be:	3230      	adds	r2, #48	; 0x30
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
		s[3] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;
 80063c4:	197b      	adds	r3, r7, r5
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b2dc      	uxtb	r4, r3
 80063ca:	197b      	adds	r3, r7, r5
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	210a      	movs	r1, #10
 80063d0:	0018      	movs	r0, r3
 80063d2:	f7f9 fe97 	bl	8000104 <__udivsi3>
 80063d6:	0003      	movs	r3, r0
 80063d8:	b29b      	uxth	r3, r3
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	1c1a      	adds	r2, r3, #0
 80063de:	0092      	lsls	r2, r2, #2
 80063e0:	18d3      	adds	r3, r2, r3
 80063e2:	18db      	adds	r3, r3, r3
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	1ae3      	subs	r3, r4, r3
 80063e8:	b2da      	uxtb	r2, r3
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	3303      	adds	r3, #3
 80063ee:	3230      	adds	r2, #48	; 0x30
 80063f0:	b2d2      	uxtb	r2, r2
 80063f2:	701a      	strb	r2, [r3, #0]
}
 80063f4:	46c0      	nop			; (mov r8, r8)
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b004      	add	sp, #16
 80063fa:	bdb0      	pop	{r4, r5, r7, pc}
 80063fc:	42c80000 	.word	0x42c80000

08006400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006400:	480d      	ldr	r0, [pc, #52]	; (8006438 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006402:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006404:	f7ff fef1 	bl	80061ea <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006408:	480c      	ldr	r0, [pc, #48]	; (800643c <LoopForever+0x6>)
  ldr r1, =_edata
 800640a:	490d      	ldr	r1, [pc, #52]	; (8006440 <LoopForever+0xa>)
  ldr r2, =_sidata
 800640c:	4a0d      	ldr	r2, [pc, #52]	; (8006444 <LoopForever+0xe>)
  movs r3, #0
 800640e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006410:	e002      	b.n	8006418 <LoopCopyDataInit>

08006412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006416:	3304      	adds	r3, #4

08006418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800641a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800641c:	d3f9      	bcc.n	8006412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800641e:	4a0a      	ldr	r2, [pc, #40]	; (8006448 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006420:	4c0a      	ldr	r4, [pc, #40]	; (800644c <LoopForever+0x16>)
  movs r3, #0
 8006422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006424:	e001      	b.n	800642a <LoopFillZerobss>

08006426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006428:	3204      	adds	r2, #4

0800642a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800642a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800642c:	d3fb      	bcc.n	8006426 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800642e:	f001 fded 	bl	800800c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006432:	f7fe fb7f 	bl	8004b34 <main>

08006436 <LoopForever>:

LoopForever:
    b LoopForever
 8006436:	e7fe      	b.n	8006436 <LoopForever>
  ldr   r0, =_estack
 8006438:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800643c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006440:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8006444:	0800ab24 	.word	0x0800ab24
  ldr r2, =_sbss
 8006448:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800644c:	2000028c 	.word	0x2000028c

08006450 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006450:	e7fe      	b.n	8006450 <ADC1_IRQHandler>
	...

08006454 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006458:	4b07      	ldr	r3, [pc, #28]	; (8006478 <HAL_Init+0x24>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	4b06      	ldr	r3, [pc, #24]	; (8006478 <HAL_Init+0x24>)
 800645e:	2110      	movs	r1, #16
 8006460:	430a      	orrs	r2, r1
 8006462:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8006464:	2003      	movs	r0, #3
 8006466:	f000 f809 	bl	800647c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800646a:	f7ff fdf1 	bl	8006050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	0018      	movs	r0, r3
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	46c0      	nop			; (mov r8, r8)
 8006478:	40022000 	.word	0x40022000

0800647c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006484:	4b14      	ldr	r3, [pc, #80]	; (80064d8 <HAL_InitTick+0x5c>)
 8006486:	681c      	ldr	r4, [r3, #0]
 8006488:	4b14      	ldr	r3, [pc, #80]	; (80064dc <HAL_InitTick+0x60>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	0019      	movs	r1, r3
 800648e:	23fa      	movs	r3, #250	; 0xfa
 8006490:	0098      	lsls	r0, r3, #2
 8006492:	f7f9 fe37 	bl	8000104 <__udivsi3>
 8006496:	0003      	movs	r3, r0
 8006498:	0019      	movs	r1, r3
 800649a:	0020      	movs	r0, r4
 800649c:	f7f9 fe32 	bl	8000104 <__udivsi3>
 80064a0:	0003      	movs	r3, r0
 80064a2:	0018      	movs	r0, r3
 80064a4:	f000 fc29 	bl	8006cfa <HAL_SYSTICK_Config>
 80064a8:	1e03      	subs	r3, r0, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e00f      	b.n	80064d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b03      	cmp	r3, #3
 80064b4:	d80b      	bhi.n	80064ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	2301      	movs	r3, #1
 80064ba:	425b      	negs	r3, r3
 80064bc:	2200      	movs	r2, #0
 80064be:	0018      	movs	r0, r3
 80064c0:	f000 fc06 	bl	8006cd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80064c4:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <HAL_InitTick+0x64>)
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80064ca:	2300      	movs	r3, #0
 80064cc:	e000      	b.n	80064d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
}
 80064d0:	0018      	movs	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b003      	add	sp, #12
 80064d6:	bd90      	pop	{r4, r7, pc}
 80064d8:	20000040 	.word	0x20000040
 80064dc:	20000048 	.word	0x20000048
 80064e0:	20000044 	.word	0x20000044

080064e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80064e8:	4b05      	ldr	r3, [pc, #20]	; (8006500 <HAL_IncTick+0x1c>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	001a      	movs	r2, r3
 80064ee:	4b05      	ldr	r3, [pc, #20]	; (8006504 <HAL_IncTick+0x20>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	18d2      	adds	r2, r2, r3
 80064f4:	4b03      	ldr	r3, [pc, #12]	; (8006504 <HAL_IncTick+0x20>)
 80064f6:	601a      	str	r2, [r3, #0]
}
 80064f8:	46c0      	nop			; (mov r8, r8)
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	20000048 	.word	0x20000048
 8006504:	20000288 	.word	0x20000288

08006508 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
  return uwTick;
 800650c:	4b02      	ldr	r3, [pc, #8]	; (8006518 <HAL_GetTick+0x10>)
 800650e:	681b      	ldr	r3, [r3, #0]
}
 8006510:	0018      	movs	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	46c0      	nop			; (mov r8, r8)
 8006518:	20000288 	.word	0x20000288

0800651c <HAL_GetTickFreq>:
  * @brief return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8006520:	4b02      	ldr	r3, [pc, #8]	; (800652c <HAL_GetTickFreq+0x10>)
 8006522:	781b      	ldrb	r3, [r3, #0]
}
 8006524:	0018      	movs	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	20000048 	.word	0x20000048

08006530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006538:	f7ff ffe6 	bl	8006508 <HAL_GetTick>
 800653c:	0003      	movs	r3, r0
 800653e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3301      	adds	r3, #1
 8006548:	d005      	beq.n	8006556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <HAL_Delay+0x44>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	001a      	movs	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	189b      	adds	r3, r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	f7ff ffd6 	bl	8006508 <HAL_GetTick>
 800655c:	0002      	movs	r2, r0
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	429a      	cmp	r2, r3
 8006566:	d8f7      	bhi.n	8006558 <HAL_Delay+0x28>
  {
  }
}
 8006568:	46c0      	nop			; (mov r8, r8)
 800656a:	46c0      	nop			; (mov r8, r8)
 800656c:	46bd      	mov	sp, r7
 800656e:	b004      	add	sp, #16
 8006570:	bd80      	pop	{r7, pc}
 8006572:	46c0      	nop			; (mov r8, r8)
 8006574:	20000048 	.word	0x20000048

08006578 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006580:	230f      	movs	r3, #15
 8006582:	18fb      	adds	r3, r7, r3
 8006584:	2200      	movs	r2, #0
 8006586:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e125      	b.n	80067e2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659a:	2b00      	cmp	r3, #0
 800659c:	d10a      	bne.n	80065b4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2234      	movs	r2, #52	; 0x34
 80065a8:	2100      	movs	r1, #0
 80065aa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	0018      	movs	r0, r3
 80065b0:	f7ff fd72 	bl	8006098 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	2210      	movs	r2, #16
 80065ba:	4013      	ands	r3, r2
 80065bc:	d000      	beq.n	80065c0 <HAL_ADC_Init+0x48>
 80065be:	e103      	b.n	80067c8 <HAL_ADC_Init+0x250>
 80065c0:	230f      	movs	r3, #15
 80065c2:	18fb      	adds	r3, r7, r3
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d000      	beq.n	80065cc <HAL_ADC_Init+0x54>
 80065ca:	e0fd      	b.n	80067c8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	2204      	movs	r2, #4
 80065d4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80065d6:	d000      	beq.n	80065da <HAL_ADC_Init+0x62>
 80065d8:	e0f6      	b.n	80067c8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	4a83      	ldr	r2, [pc, #524]	; (80067ec <HAL_ADC_Init+0x274>)
 80065e0:	4013      	ands	r3, r2
 80065e2:	2202      	movs	r2, #2
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	2203      	movs	r2, #3
 80065f2:	4013      	ands	r3, r2
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d112      	bne.n	800661e <HAL_ADC_Init+0xa6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2201      	movs	r2, #1
 8006600:	4013      	ands	r3, r2
 8006602:	2b01      	cmp	r3, #1
 8006604:	d009      	beq.n	800661a <HAL_ADC_Init+0xa2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68da      	ldr	r2, [r3, #12]
 800660c:	2380      	movs	r3, #128	; 0x80
 800660e:	021b      	lsls	r3, r3, #8
 8006610:	401a      	ands	r2, r3
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	429a      	cmp	r2, r3
 8006618:	d101      	bne.n	800661e <HAL_ADC_Init+0xa6>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <HAL_ADC_Init+0xa8>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d116      	bne.n	8006652 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68db      	ldr	r3, [r3, #12]
 800662a:	2218      	movs	r2, #24
 800662c:	4393      	bics	r3, r2
 800662e:	0019      	movs	r1, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	0899      	lsrs	r1, r3, #2
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68da      	ldr	r2, [r3, #12]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4964      	ldr	r1, [pc, #400]	; (80067f0 <HAL_ADC_Init+0x278>)
 800665e:	400a      	ands	r2, r1
 8006660:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	7e1b      	ldrb	r3, [r3, #24]
 8006666:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	7e5b      	ldrb	r3, [r3, #25]
 800666c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800666e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	7e9b      	ldrb	r3, [r3, #26]
 8006674:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006676:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	2b01      	cmp	r3, #1
 800667e:	d002      	beq.n	8006686 <HAL_ADC_Init+0x10e>
 8006680:	2380      	movs	r3, #128	; 0x80
 8006682:	015b      	lsls	r3, r3, #5
 8006684:	e000      	b.n	8006688 <HAL_ADC_Init+0x110>
 8006686:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006688:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800668e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	2b02      	cmp	r3, #2
 8006696:	d101      	bne.n	800669c <HAL_ADC_Init+0x124>
 8006698:	2304      	movs	r3, #4
 800669a:	e000      	b.n	800669e <HAL_ADC_Init+0x126>
 800669c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800669e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2124      	movs	r1, #36	; 0x24
 80066a4:	5c5b      	ldrb	r3, [r3, r1]
 80066a6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80066a8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	7edb      	ldrb	r3, [r3, #27]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d115      	bne.n	80066e4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	7e9b      	ldrb	r3, [r3, #26]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d105      	bne.n	80066cc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2280      	movs	r2, #128	; 0x80
 80066c4:	0252      	lsls	r2, r2, #9
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60bb      	str	r3, [r7, #8]
 80066ca:	e00b      	b.n	80066e4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d0:	2220      	movs	r2, #32
 80066d2:	431a      	orrs	r2, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066dc:	2201      	movs	r2, #1
 80066de:	431a      	orrs	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	23c2      	movs	r3, #194	; 0xc2
 80066ea:	33ff      	adds	r3, #255	; 0xff
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d007      	beq.n	8006700 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80066f8:	4313      	orrs	r3, r2
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68d9      	ldr	r1, [r3, #12]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	430a      	orrs	r2, r1
 800670e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006714:	2380      	movs	r3, #128	; 0x80
 8006716:	055b      	lsls	r3, r3, #21
 8006718:	429a      	cmp	r2, r3
 800671a:	d01b      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006720:	2b01      	cmp	r3, #1
 8006722:	d017      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	2b02      	cmp	r3, #2
 800672a:	d013      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	2b03      	cmp	r3, #3
 8006732:	d00f      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006738:	2b04      	cmp	r3, #4
 800673a:	d00b      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006740:	2b05      	cmp	r3, #5
 8006742:	d007      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	2b06      	cmp	r3, #6
 800674a:	d003      	beq.n	8006754 <HAL_ADC_Init+0x1dc>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	2b07      	cmp	r3, #7
 8006752:	d112      	bne.n	800677a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695a      	ldr	r2, [r3, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2107      	movs	r1, #7
 8006760:	438a      	bics	r2, r1
 8006762:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6959      	ldr	r1, [r3, #20]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	2207      	movs	r2, #7
 8006770:	401a      	ands	r2, r3
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	4a1c      	ldr	r2, [pc, #112]	; (80067f4 <HAL_ADC_Init+0x27c>)
 8006782:	4013      	ands	r3, r2
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	429a      	cmp	r2, r3
 8006788:	d10b      	bne.n	80067a2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006794:	2203      	movs	r2, #3
 8006796:	4393      	bics	r3, r2
 8006798:	2201      	movs	r2, #1
 800679a:	431a      	orrs	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80067a0:	e01c      	b.n	80067dc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a6:	2212      	movs	r2, #18
 80067a8:	4393      	bics	r3, r2
 80067aa:	2210      	movs	r2, #16
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	2201      	movs	r2, #1
 80067b8:	431a      	orrs	r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80067be:	230f      	movs	r3, #15
 80067c0:	18fb      	adds	r3, r7, r3
 80067c2:	2201      	movs	r2, #1
 80067c4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80067c6:	e009      	b.n	80067dc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	2210      	movs	r2, #16
 80067ce:	431a      	orrs	r2, r3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80067d4:	230f      	movs	r3, #15
 80067d6:	18fb      	adds	r3, r7, r3
 80067d8:	2201      	movs	r2, #1
 80067da:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80067dc:	230f      	movs	r3, #15
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	781b      	ldrb	r3, [r3, #0]
}
 80067e2:	0018      	movs	r0, r3
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b004      	add	sp, #16
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	fffffefd 	.word	0xfffffefd
 80067f0:	fffe0219 	.word	0xfffe0219
 80067f4:	833fffe7 	.word	0x833fffe7

080067f8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80067f8:	b590      	push	{r4, r7, lr}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006800:	230f      	movs	r3, #15
 8006802:	18fb      	adds	r3, r7, r3
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	2204      	movs	r2, #4
 8006810:	4013      	ands	r3, r2
 8006812:	d138      	bne.n	8006886 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2234      	movs	r2, #52	; 0x34
 8006818:	5c9b      	ldrb	r3, [r3, r2]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d101      	bne.n	8006822 <HAL_ADC_Start+0x2a>
 800681e:	2302      	movs	r3, #2
 8006820:	e038      	b.n	8006894 <HAL_ADC_Start+0x9c>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2234      	movs	r2, #52	; 0x34
 8006826:	2101      	movs	r1, #1
 8006828:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	7e5b      	ldrb	r3, [r3, #25]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d007      	beq.n	8006842 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006832:	230f      	movs	r3, #15
 8006834:	18fc      	adds	r4, r7, r3
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	0018      	movs	r0, r3
 800683a:	f000 f933 	bl	8006aa4 <ADC_Enable>
 800683e:	0003      	movs	r3, r0
 8006840:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006842:	230f      	movs	r3, #15
 8006844:	18fb      	adds	r3, r7, r3
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d120      	bne.n	800688e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006850:	4a12      	ldr	r2, [pc, #72]	; (800689c <HAL_ADC_Start+0xa4>)
 8006852:	4013      	ands	r3, r2
 8006854:	2280      	movs	r2, #128	; 0x80
 8006856:	0052      	lsls	r2, r2, #1
 8006858:	431a      	orrs	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2234      	movs	r2, #52	; 0x34
 8006868:	2100      	movs	r1, #0
 800686a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	221c      	movs	r2, #28
 8006872:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2104      	movs	r1, #4
 8006880:	430a      	orrs	r2, r1
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	e003      	b.n	800688e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006886:	230f      	movs	r3, #15
 8006888:	18fb      	adds	r3, r7, r3
 800688a:	2202      	movs	r2, #2
 800688c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800688e:	230f      	movs	r3, #15
 8006890:	18fb      	adds	r3, r7, r3
 8006892:	781b      	ldrb	r3, [r3, #0]
}
 8006894:	0018      	movs	r0, r3
 8006896:	46bd      	mov	sp, r7
 8006898:	b005      	add	sp, #20
 800689a:	bd90      	pop	{r4, r7, pc}
 800689c:	fffff0fe 	.word	0xfffff0fe

080068a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80068ae:	0018      	movs	r0, r3
 80068b0:	46bd      	mov	sp, r7
 80068b2:	b002      	add	sp, #8
 80068b4:	bd80      	pop	{r7, pc}
	...

080068b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068c2:	230f      	movs	r3, #15
 80068c4:	18fb      	adds	r3, r7, r3
 80068c6:	2200      	movs	r2, #0
 80068c8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80068ca:	2300      	movs	r3, #0
 80068cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d2:	2380      	movs	r3, #128	; 0x80
 80068d4:	055b      	lsls	r3, r3, #21
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d011      	beq.n	80068fe <HAL_ADC_ConfigChannel+0x46>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d00d      	beq.n	80068fe <HAL_ADC_ConfigChannel+0x46>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d009      	beq.n	80068fe <HAL_ADC_ConfigChannel+0x46>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	2b03      	cmp	r3, #3
 80068f0:	d005      	beq.n	80068fe <HAL_ADC_ConfigChannel+0x46>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	2b04      	cmp	r3, #4
 80068f8:	d001      	beq.n	80068fe <HAL_ADC_ConfigChannel+0x46>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2234      	movs	r2, #52	; 0x34
 8006902:	5c9b      	ldrb	r3, [r3, r2]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d101      	bne.n	800690c <HAL_ADC_ConfigChannel+0x54>
 8006908:	2302      	movs	r3, #2
 800690a:	e0bb      	b.n	8006a84 <HAL_ADC_ConfigChannel+0x1cc>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2234      	movs	r2, #52	; 0x34
 8006910:	2101      	movs	r1, #1
 8006912:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2204      	movs	r2, #4
 800691c:	4013      	ands	r3, r2
 800691e:	d000      	beq.n	8006922 <HAL_ADC_ConfigChannel+0x6a>
 8006920:	e09f      	b.n	8006a62 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	4a59      	ldr	r2, [pc, #356]	; (8006a8c <HAL_ADC_ConfigChannel+0x1d4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d100      	bne.n	800692e <HAL_ADC_ConfigChannel+0x76>
 800692c:	e077      	b.n	8006a1e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2201      	movs	r2, #1
 800693a:	409a      	lsls	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	2380      	movs	r3, #128	; 0x80
 800694a:	055b      	lsls	r3, r3, #21
 800694c:	429a      	cmp	r2, r3
 800694e:	d037      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x108>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006954:	2b01      	cmp	r3, #1
 8006956:	d033      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x108>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	2b02      	cmp	r3, #2
 800695e:	d02f      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x108>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	2b03      	cmp	r3, #3
 8006966:	d02b      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x108>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696c:	2b04      	cmp	r3, #4
 800696e:	d027      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x108>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	2b05      	cmp	r3, #5
 8006976:	d023      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x108>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697c:	2b06      	cmp	r3, #6
 800697e:	d01f      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x108>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	2b07      	cmp	r3, #7
 8006986:	d01b      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	695b      	ldr	r3, [r3, #20]
 8006992:	2107      	movs	r1, #7
 8006994:	400b      	ands	r3, r1
 8006996:	429a      	cmp	r2, r3
 8006998:	d012      	beq.n	80069c0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	695a      	ldr	r2, [r3, #20]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2107      	movs	r1, #7
 80069a6:	438a      	bics	r2, r1
 80069a8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6959      	ldr	r1, [r3, #20]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2207      	movs	r2, #7
 80069b6:	401a      	ands	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d003      	beq.n	80069d0 <HAL_ADC_ConfigChannel+0x118>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b11      	cmp	r3, #17
 80069ce:	d152      	bne.n	8006a76 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80069d0:	4b2f      	ldr	r3, [pc, #188]	; (8006a90 <HAL_ADC_ConfigChannel+0x1d8>)
 80069d2:	6819      	ldr	r1, [r3, #0]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d102      	bne.n	80069e2 <HAL_ADC_ConfigChannel+0x12a>
 80069dc:	2380      	movs	r3, #128	; 0x80
 80069de:	041b      	lsls	r3, r3, #16
 80069e0:	e001      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x12e>
 80069e2:	2380      	movs	r3, #128	; 0x80
 80069e4:	03db      	lsls	r3, r3, #15
 80069e6:	4a2a      	ldr	r2, [pc, #168]	; (8006a90 <HAL_ADC_ConfigChannel+0x1d8>)
 80069e8:	430b      	orrs	r3, r1
 80069ea:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b10      	cmp	r3, #16
 80069f2:	d140      	bne.n	8006a76 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80069f4:	4b27      	ldr	r3, [pc, #156]	; (8006a94 <HAL_ADC_ConfigChannel+0x1dc>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4927      	ldr	r1, [pc, #156]	; (8006a98 <HAL_ADC_ConfigChannel+0x1e0>)
 80069fa:	0018      	movs	r0, r3
 80069fc:	f7f9 fb82 	bl	8000104 <__udivsi3>
 8006a00:	0003      	movs	r3, r0
 8006a02:	001a      	movs	r2, r3
 8006a04:	0013      	movs	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	189b      	adds	r3, r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006a0e:	e002      	b.n	8006a16 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d1f9      	bne.n	8006a10 <HAL_ADC_ConfigChannel+0x158>
 8006a1c:	e02b      	b.n	8006a76 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2101      	movs	r1, #1
 8006a2a:	4099      	lsls	r1, r3
 8006a2c:	000b      	movs	r3, r1
 8006a2e:	43d9      	mvns	r1, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	400a      	ands	r2, r1
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b10      	cmp	r3, #16
 8006a3e:	d003      	beq.n	8006a48 <HAL_ADC_ConfigChannel+0x190>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b11      	cmp	r3, #17
 8006a46:	d116      	bne.n	8006a76 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006a48:	4b11      	ldr	r3, [pc, #68]	; (8006a90 <HAL_ADC_ConfigChannel+0x1d8>)
 8006a4a:	6819      	ldr	r1, [r3, #0]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b10      	cmp	r3, #16
 8006a52:	d101      	bne.n	8006a58 <HAL_ADC_ConfigChannel+0x1a0>
 8006a54:	4a11      	ldr	r2, [pc, #68]	; (8006a9c <HAL_ADC_ConfigChannel+0x1e4>)
 8006a56:	e000      	b.n	8006a5a <HAL_ADC_ConfigChannel+0x1a2>
 8006a58:	4a11      	ldr	r2, [pc, #68]	; (8006aa0 <HAL_ADC_ConfigChannel+0x1e8>)
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	; (8006a90 <HAL_ADC_ConfigChannel+0x1d8>)
 8006a5c:	400a      	ands	r2, r1
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e009      	b.n	8006a76 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a66:	2220      	movs	r2, #32
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006a6e:	230f      	movs	r3, #15
 8006a70:	18fb      	adds	r3, r7, r3
 8006a72:	2201      	movs	r2, #1
 8006a74:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2234      	movs	r2, #52	; 0x34
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006a7e:	230f      	movs	r3, #15
 8006a80:	18fb      	adds	r3, r7, r3
 8006a82:	781b      	ldrb	r3, [r3, #0]
}
 8006a84:	0018      	movs	r0, r3
 8006a86:	46bd      	mov	sp, r7
 8006a88:	b004      	add	sp, #16
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	00001001 	.word	0x00001001
 8006a90:	40012708 	.word	0x40012708
 8006a94:	20000040 	.word	0x20000040
 8006a98:	000f4240 	.word	0x000f4240
 8006a9c:	ff7fffff 	.word	0xff7fffff
 8006aa0:	ffbfffff 	.word	0xffbfffff

08006aa4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2203      	movs	r2, #3
 8006abc:	4013      	ands	r3, r2
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d112      	bne.n	8006ae8 <ADC_Enable+0x44>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d009      	beq.n	8006ae4 <ADC_Enable+0x40>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	2380      	movs	r3, #128	; 0x80
 8006ad8:	021b      	lsls	r3, r3, #8
 8006ada:	401a      	ands	r2, r3
 8006adc:	2380      	movs	r3, #128	; 0x80
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d101      	bne.n	8006ae8 <ADC_Enable+0x44>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e000      	b.n	8006aea <ADC_Enable+0x46>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d152      	bne.n	8006b94 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	4a2a      	ldr	r2, [pc, #168]	; (8006ba0 <ADC_Enable+0xfc>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	d00d      	beq.n	8006b16 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	2210      	movs	r2, #16
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e03f      	b.n	8006b96 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	689a      	ldr	r2, [r3, #8]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2101      	movs	r1, #1
 8006b22:	430a      	orrs	r2, r1
 8006b24:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006b26:	4b1f      	ldr	r3, [pc, #124]	; (8006ba4 <ADC_Enable+0x100>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	491f      	ldr	r1, [pc, #124]	; (8006ba8 <ADC_Enable+0x104>)
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	f7f9 fae9 	bl	8000104 <__udivsi3>
 8006b32:	0003      	movs	r3, r0
 8006b34:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006b36:	e002      	b.n	8006b3e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d1f9      	bne.n	8006b38 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006b44:	f7ff fce0 	bl	8006508 <HAL_GetTick>
 8006b48:	0003      	movs	r3, r0
 8006b4a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006b4c:	e01b      	b.n	8006b86 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006b4e:	f7ff fcdb 	bl	8006508 <HAL_GetTick>
 8006b52:	0002      	movs	r2, r0
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d914      	bls.n	8006b86 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2201      	movs	r2, #1
 8006b64:	4013      	ands	r3, r2
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d00d      	beq.n	8006b86 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	2210      	movs	r2, #16
 8006b70:	431a      	orrs	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e007      	b.n	8006b96 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	4013      	ands	r3, r2
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d1dc      	bne.n	8006b4e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	0018      	movs	r0, r3
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	b004      	add	sp, #16
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	80000017 	.word	0x80000017
 8006ba4:	20000040 	.word	0x20000040
 8006ba8:	000f4240 	.word	0x000f4240

08006bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	0002      	movs	r2, r0
 8006bb4:	6039      	str	r1, [r7, #0]
 8006bb6:	1dfb      	adds	r3, r7, #7
 8006bb8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006bba:	1dfb      	adds	r3, r7, #7
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc0:	d828      	bhi.n	8006c14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006bc2:	4a2f      	ldr	r2, [pc, #188]	; (8006c80 <__NVIC_SetPriority+0xd4>)
 8006bc4:	1dfb      	adds	r3, r7, #7
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	b25b      	sxtb	r3, r3
 8006bca:	089b      	lsrs	r3, r3, #2
 8006bcc:	33c0      	adds	r3, #192	; 0xc0
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	589b      	ldr	r3, [r3, r2]
 8006bd2:	1dfa      	adds	r2, r7, #7
 8006bd4:	7812      	ldrb	r2, [r2, #0]
 8006bd6:	0011      	movs	r1, r2
 8006bd8:	2203      	movs	r2, #3
 8006bda:	400a      	ands	r2, r1
 8006bdc:	00d2      	lsls	r2, r2, #3
 8006bde:	21ff      	movs	r1, #255	; 0xff
 8006be0:	4091      	lsls	r1, r2
 8006be2:	000a      	movs	r2, r1
 8006be4:	43d2      	mvns	r2, r2
 8006be6:	401a      	ands	r2, r3
 8006be8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	019b      	lsls	r3, r3, #6
 8006bee:	22ff      	movs	r2, #255	; 0xff
 8006bf0:	401a      	ands	r2, r3
 8006bf2:	1dfb      	adds	r3, r7, #7
 8006bf4:	781b      	ldrb	r3, [r3, #0]
 8006bf6:	0018      	movs	r0, r3
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	4003      	ands	r3, r0
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c00:	481f      	ldr	r0, [pc, #124]	; (8006c80 <__NVIC_SetPriority+0xd4>)
 8006c02:	1dfb      	adds	r3, r7, #7
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	b25b      	sxtb	r3, r3
 8006c08:	089b      	lsrs	r3, r3, #2
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	33c0      	adds	r3, #192	; 0xc0
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006c12:	e031      	b.n	8006c78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c14:	4a1b      	ldr	r2, [pc, #108]	; (8006c84 <__NVIC_SetPriority+0xd8>)
 8006c16:	1dfb      	adds	r3, r7, #7
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	0019      	movs	r1, r3
 8006c1c:	230f      	movs	r3, #15
 8006c1e:	400b      	ands	r3, r1
 8006c20:	3b08      	subs	r3, #8
 8006c22:	089b      	lsrs	r3, r3, #2
 8006c24:	3306      	adds	r3, #6
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	18d3      	adds	r3, r2, r3
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	1dfa      	adds	r2, r7, #7
 8006c30:	7812      	ldrb	r2, [r2, #0]
 8006c32:	0011      	movs	r1, r2
 8006c34:	2203      	movs	r2, #3
 8006c36:	400a      	ands	r2, r1
 8006c38:	00d2      	lsls	r2, r2, #3
 8006c3a:	21ff      	movs	r1, #255	; 0xff
 8006c3c:	4091      	lsls	r1, r2
 8006c3e:	000a      	movs	r2, r1
 8006c40:	43d2      	mvns	r2, r2
 8006c42:	401a      	ands	r2, r3
 8006c44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	019b      	lsls	r3, r3, #6
 8006c4a:	22ff      	movs	r2, #255	; 0xff
 8006c4c:	401a      	ands	r2, r3
 8006c4e:	1dfb      	adds	r3, r7, #7
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	0018      	movs	r0, r3
 8006c54:	2303      	movs	r3, #3
 8006c56:	4003      	ands	r3, r0
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006c5c:	4809      	ldr	r0, [pc, #36]	; (8006c84 <__NVIC_SetPriority+0xd8>)
 8006c5e:	1dfb      	adds	r3, r7, #7
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	001c      	movs	r4, r3
 8006c64:	230f      	movs	r3, #15
 8006c66:	4023      	ands	r3, r4
 8006c68:	3b08      	subs	r3, #8
 8006c6a:	089b      	lsrs	r3, r3, #2
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	3306      	adds	r3, #6
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	18c3      	adds	r3, r0, r3
 8006c74:	3304      	adds	r3, #4
 8006c76:	601a      	str	r2, [r3, #0]
}
 8006c78:	46c0      	nop			; (mov r8, r8)
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	b003      	add	sp, #12
 8006c7e:	bd90      	pop	{r4, r7, pc}
 8006c80:	e000e100 	.word	0xe000e100
 8006c84:	e000ed00 	.word	0xe000ed00

08006c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	1e5a      	subs	r2, r3, #1
 8006c94:	2380      	movs	r3, #128	; 0x80
 8006c96:	045b      	lsls	r3, r3, #17
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d301      	bcc.n	8006ca0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e010      	b.n	8006cc2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ca0:	4b0a      	ldr	r3, [pc, #40]	; (8006ccc <SysTick_Config+0x44>)
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	3a01      	subs	r2, #1
 8006ca6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ca8:	2301      	movs	r3, #1
 8006caa:	425b      	negs	r3, r3
 8006cac:	2103      	movs	r1, #3
 8006cae:	0018      	movs	r0, r3
 8006cb0:	f7ff ff7c 	bl	8006bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cb4:	4b05      	ldr	r3, [pc, #20]	; (8006ccc <SysTick_Config+0x44>)
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cba:	4b04      	ldr	r3, [pc, #16]	; (8006ccc <SysTick_Config+0x44>)
 8006cbc:	2207      	movs	r2, #7
 8006cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	b002      	add	sp, #8
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	46c0      	nop			; (mov r8, r8)
 8006ccc:	e000e010 	.word	0xe000e010

08006cd0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	607a      	str	r2, [r7, #4]
 8006cda:	210f      	movs	r1, #15
 8006cdc:	187b      	adds	r3, r7, r1
 8006cde:	1c02      	adds	r2, r0, #0
 8006ce0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	187b      	adds	r3, r7, r1
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	b25b      	sxtb	r3, r3
 8006cea:	0011      	movs	r1, r2
 8006cec:	0018      	movs	r0, r3
 8006cee:	f7ff ff5d 	bl	8006bac <__NVIC_SetPriority>
}
 8006cf2:	46c0      	nop			; (mov r8, r8)
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	b004      	add	sp, #16
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	0018      	movs	r0, r3
 8006d06:	f7ff ffbf 	bl	8006c88 <SysTick_Config>
 8006d0a:	0003      	movs	r3, r0
}
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	b002      	add	sp, #8
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d22:	e14f      	b.n	8006fc4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2101      	movs	r1, #1
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4091      	lsls	r1, r2
 8006d2e:	000a      	movs	r2, r1
 8006d30:	4013      	ands	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d100      	bne.n	8006d3c <HAL_GPIO_Init+0x28>
 8006d3a:	e140      	b.n	8006fbe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2203      	movs	r2, #3
 8006d42:	4013      	ands	r3, r2
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d005      	beq.n	8006d54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	d130      	bne.n	8006db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	2203      	movs	r2, #3
 8006d60:	409a      	lsls	r2, r3
 8006d62:	0013      	movs	r3, r2
 8006d64:	43da      	mvns	r2, r3
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	409a      	lsls	r2, r3
 8006d76:	0013      	movs	r3, r2
 8006d78:	693a      	ldr	r2, [r7, #16]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	409a      	lsls	r2, r3
 8006d90:	0013      	movs	r3, r2
 8006d92:	43da      	mvns	r2, r3
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	4013      	ands	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	091b      	lsrs	r3, r3, #4
 8006da0:	2201      	movs	r2, #1
 8006da2:	401a      	ands	r2, r3
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	409a      	lsls	r2, r3
 8006da8:	0013      	movs	r3, r2
 8006daa:	693a      	ldr	r2, [r7, #16]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2203      	movs	r2, #3
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	d017      	beq.n	8006df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	2203      	movs	r2, #3
 8006dce:	409a      	lsls	r2, r3
 8006dd0:	0013      	movs	r3, r2
 8006dd2:	43da      	mvns	r2, r3
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	409a      	lsls	r2, r3
 8006de4:	0013      	movs	r3, r2
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2203      	movs	r2, #3
 8006df8:	4013      	ands	r3, r2
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d123      	bne.n	8006e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	08da      	lsrs	r2, r3, #3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3208      	adds	r2, #8
 8006e06:	0092      	lsls	r2, r2, #2
 8006e08:	58d3      	ldr	r3, [r2, r3]
 8006e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	2207      	movs	r2, #7
 8006e10:	4013      	ands	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	220f      	movs	r2, #15
 8006e16:	409a      	lsls	r2, r3
 8006e18:	0013      	movs	r3, r2
 8006e1a:	43da      	mvns	r2, r3
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2107      	movs	r1, #7
 8006e2a:	400b      	ands	r3, r1
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	409a      	lsls	r2, r3
 8006e30:	0013      	movs	r3, r2
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	08da      	lsrs	r2, r3, #3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	3208      	adds	r2, #8
 8006e40:	0092      	lsls	r2, r2, #2
 8006e42:	6939      	ldr	r1, [r7, #16]
 8006e44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	2203      	movs	r2, #3
 8006e52:	409a      	lsls	r2, r3
 8006e54:	0013      	movs	r3, r2
 8006e56:	43da      	mvns	r2, r3
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2203      	movs	r2, #3
 8006e64:	401a      	ands	r2, r3
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	005b      	lsls	r3, r3, #1
 8006e6a:	409a      	lsls	r2, r3
 8006e6c:	0013      	movs	r3, r2
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	23c0      	movs	r3, #192	; 0xc0
 8006e80:	029b      	lsls	r3, r3, #10
 8006e82:	4013      	ands	r3, r2
 8006e84:	d100      	bne.n	8006e88 <HAL_GPIO_Init+0x174>
 8006e86:	e09a      	b.n	8006fbe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e88:	4b54      	ldr	r3, [pc, #336]	; (8006fdc <HAL_GPIO_Init+0x2c8>)
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	4b53      	ldr	r3, [pc, #332]	; (8006fdc <HAL_GPIO_Init+0x2c8>)
 8006e8e:	2101      	movs	r1, #1
 8006e90:	430a      	orrs	r2, r1
 8006e92:	619a      	str	r2, [r3, #24]
 8006e94:	4b51      	ldr	r3, [pc, #324]	; (8006fdc <HAL_GPIO_Init+0x2c8>)
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	60bb      	str	r3, [r7, #8]
 8006e9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006ea0:	4a4f      	ldr	r2, [pc, #316]	; (8006fe0 <HAL_GPIO_Init+0x2cc>)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	089b      	lsrs	r3, r3, #2
 8006ea6:	3302      	adds	r3, #2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	589b      	ldr	r3, [r3, r2]
 8006eac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	2203      	movs	r2, #3
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	220f      	movs	r2, #15
 8006eb8:	409a      	lsls	r2, r3
 8006eba:	0013      	movs	r3, r2
 8006ebc:	43da      	mvns	r2, r3
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	2390      	movs	r3, #144	; 0x90
 8006ec8:	05db      	lsls	r3, r3, #23
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d013      	beq.n	8006ef6 <HAL_GPIO_Init+0x1e2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a44      	ldr	r2, [pc, #272]	; (8006fe4 <HAL_GPIO_Init+0x2d0>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00d      	beq.n	8006ef2 <HAL_GPIO_Init+0x1de>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a43      	ldr	r2, [pc, #268]	; (8006fe8 <HAL_GPIO_Init+0x2d4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d007      	beq.n	8006eee <HAL_GPIO_Init+0x1da>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a42      	ldr	r2, [pc, #264]	; (8006fec <HAL_GPIO_Init+0x2d8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d101      	bne.n	8006eea <HAL_GPIO_Init+0x1d6>
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e006      	b.n	8006ef8 <HAL_GPIO_Init+0x1e4>
 8006eea:	2305      	movs	r3, #5
 8006eec:	e004      	b.n	8006ef8 <HAL_GPIO_Init+0x1e4>
 8006eee:	2302      	movs	r3, #2
 8006ef0:	e002      	b.n	8006ef8 <HAL_GPIO_Init+0x1e4>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e000      	b.n	8006ef8 <HAL_GPIO_Init+0x1e4>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	2103      	movs	r1, #3
 8006efc:	400a      	ands	r2, r1
 8006efe:	0092      	lsls	r2, r2, #2
 8006f00:	4093      	lsls	r3, r2
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006f08:	4935      	ldr	r1, [pc, #212]	; (8006fe0 <HAL_GPIO_Init+0x2cc>)
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	089b      	lsrs	r3, r3, #2
 8006f0e:	3302      	adds	r3, #2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	693a      	ldr	r2, [r7, #16]
 8006f14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f16:	4b36      	ldr	r3, [pc, #216]	; (8006ff0 <HAL_GPIO_Init+0x2dc>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	43da      	mvns	r2, r3
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	4013      	ands	r3, r2
 8006f24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	2380      	movs	r3, #128	; 0x80
 8006f2c:	035b      	lsls	r3, r3, #13
 8006f2e:	4013      	ands	r3, r2
 8006f30:	d003      	beq.n	8006f3a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006f3a:	4b2d      	ldr	r3, [pc, #180]	; (8006ff0 <HAL_GPIO_Init+0x2dc>)
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006f40:	4b2b      	ldr	r3, [pc, #172]	; (8006ff0 <HAL_GPIO_Init+0x2dc>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	43da      	mvns	r2, r3
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	2380      	movs	r3, #128	; 0x80
 8006f56:	039b      	lsls	r3, r3, #14
 8006f58:	4013      	ands	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8006f5c:	693a      	ldr	r2, [r7, #16]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006f64:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <HAL_GPIO_Init+0x2dc>)
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8006f6a:	4b21      	ldr	r3, [pc, #132]	; (8006ff0 <HAL_GPIO_Init+0x2dc>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	43da      	mvns	r2, r3
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	4013      	ands	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	2380      	movs	r3, #128	; 0x80
 8006f80:	029b      	lsls	r3, r3, #10
 8006f82:	4013      	ands	r3, r2
 8006f84:	d003      	beq.n	8006f8e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006f8e:	4b18      	ldr	r3, [pc, #96]	; (8006ff0 <HAL_GPIO_Init+0x2dc>)
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8006f94:	4b16      	ldr	r3, [pc, #88]	; (8006ff0 <HAL_GPIO_Init+0x2dc>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	43da      	mvns	r2, r3
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	2380      	movs	r3, #128	; 0x80
 8006faa:	025b      	lsls	r3, r3, #9
 8006fac:	4013      	ands	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006fb8:	4b0d      	ldr	r3, [pc, #52]	; (8006ff0 <HAL_GPIO_Init+0x2dc>)
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	40da      	lsrs	r2, r3
 8006fcc:	1e13      	subs	r3, r2, #0
 8006fce:	d000      	beq.n	8006fd2 <HAL_GPIO_Init+0x2be>
 8006fd0:	e6a8      	b.n	8006d24 <HAL_GPIO_Init+0x10>
  } 
}
 8006fd2:	46c0      	nop			; (mov r8, r8)
 8006fd4:	46c0      	nop			; (mov r8, r8)
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	b006      	add	sp, #24
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40021000 	.word	0x40021000
 8006fe0:	40010000 	.word	0x40010000
 8006fe4:	48000400 	.word	0x48000400
 8006fe8:	48000800 	.word	0x48000800
 8006fec:	48000c00 	.word	0x48000c00
 8006ff0:	40010400 	.word	0x40010400

08006ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	000a      	movs	r2, r1
 8006ffe:	1cbb      	adds	r3, r7, #2
 8007000:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	691b      	ldr	r3, [r3, #16]
 8007006:	1cba      	adds	r2, r7, #2
 8007008:	8812      	ldrh	r2, [r2, #0]
 800700a:	4013      	ands	r3, r2
 800700c:	d004      	beq.n	8007018 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800700e:	230f      	movs	r3, #15
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	2201      	movs	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	e003      	b.n	8007020 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007018:	230f      	movs	r3, #15
 800701a:	18fb      	adds	r3, r7, r3
 800701c:	2200      	movs	r2, #0
 800701e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8007020:	230f      	movs	r3, #15
 8007022:	18fb      	adds	r3, r7, r3
 8007024:	781b      	ldrb	r3, [r3, #0]
  }
 8007026:	0018      	movs	r0, r3
 8007028:	46bd      	mov	sp, r7
 800702a:	b004      	add	sp, #16
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b082      	sub	sp, #8
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	0008      	movs	r0, r1
 8007038:	0011      	movs	r1, r2
 800703a:	1cbb      	adds	r3, r7, #2
 800703c:	1c02      	adds	r2, r0, #0
 800703e:	801a      	strh	r2, [r3, #0]
 8007040:	1c7b      	adds	r3, r7, #1
 8007042:	1c0a      	adds	r2, r1, #0
 8007044:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007046:	1c7b      	adds	r3, r7, #1
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d004      	beq.n	8007058 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800704e:	1cbb      	adds	r3, r7, #2
 8007050:	881a      	ldrh	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007056:	e003      	b.n	8007060 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007058:	1cbb      	adds	r3, r7, #2
 800705a:	881a      	ldrh	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007060:	46c0      	nop			; (mov r8, r8)
 8007062:	46bd      	mov	sp, r7
 8007064:	b002      	add	sp, #8
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e305      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2201      	movs	r2, #1
 8007080:	4013      	ands	r3, r2
 8007082:	d100      	bne.n	8007086 <HAL_RCC_OscConfig+0x1e>
 8007084:	e08d      	b.n	80071a2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007086:	4bc5      	ldr	r3, [pc, #788]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	220c      	movs	r2, #12
 800708c:	4013      	ands	r3, r2
 800708e:	2b04      	cmp	r3, #4
 8007090:	d00e      	beq.n	80070b0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007092:	4bc2      	ldr	r3, [pc, #776]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	220c      	movs	r2, #12
 8007098:	4013      	ands	r3, r2
 800709a:	2b08      	cmp	r3, #8
 800709c:	d116      	bne.n	80070cc <HAL_RCC_OscConfig+0x64>
 800709e:	4bbf      	ldr	r3, [pc, #764]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80070a0:	685a      	ldr	r2, [r3, #4]
 80070a2:	23c0      	movs	r3, #192	; 0xc0
 80070a4:	025b      	lsls	r3, r3, #9
 80070a6:	401a      	ands	r2, r3
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	025b      	lsls	r3, r3, #9
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d10d      	bne.n	80070cc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070b0:	4bba      	ldr	r3, [pc, #744]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	2380      	movs	r3, #128	; 0x80
 80070b6:	029b      	lsls	r3, r3, #10
 80070b8:	4013      	ands	r3, r2
 80070ba:	d100      	bne.n	80070be <HAL_RCC_OscConfig+0x56>
 80070bc:	e070      	b.n	80071a0 <HAL_RCC_OscConfig+0x138>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d000      	beq.n	80070c8 <HAL_RCC_OscConfig+0x60>
 80070c6:	e06b      	b.n	80071a0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e2dc      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d107      	bne.n	80070e4 <HAL_RCC_OscConfig+0x7c>
 80070d4:	4bb1      	ldr	r3, [pc, #708]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	4bb0      	ldr	r3, [pc, #704]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80070da:	2180      	movs	r1, #128	; 0x80
 80070dc:	0249      	lsls	r1, r1, #9
 80070de:	430a      	orrs	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]
 80070e2:	e02f      	b.n	8007144 <HAL_RCC_OscConfig+0xdc>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10c      	bne.n	8007106 <HAL_RCC_OscConfig+0x9e>
 80070ec:	4bab      	ldr	r3, [pc, #684]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	4baa      	ldr	r3, [pc, #680]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80070f2:	49ab      	ldr	r1, [pc, #684]	; (80073a0 <HAL_RCC_OscConfig+0x338>)
 80070f4:	400a      	ands	r2, r1
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	4ba8      	ldr	r3, [pc, #672]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4ba7      	ldr	r3, [pc, #668]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80070fe:	49a9      	ldr	r1, [pc, #676]	; (80073a4 <HAL_RCC_OscConfig+0x33c>)
 8007100:	400a      	ands	r2, r1
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	e01e      	b.n	8007144 <HAL_RCC_OscConfig+0xdc>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2b05      	cmp	r3, #5
 800710c:	d10e      	bne.n	800712c <HAL_RCC_OscConfig+0xc4>
 800710e:	4ba3      	ldr	r3, [pc, #652]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	4ba2      	ldr	r3, [pc, #648]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007114:	2180      	movs	r1, #128	; 0x80
 8007116:	02c9      	lsls	r1, r1, #11
 8007118:	430a      	orrs	r2, r1
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	4b9f      	ldr	r3, [pc, #636]	; (800739c <HAL_RCC_OscConfig+0x334>)
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4b9e      	ldr	r3, [pc, #632]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007122:	2180      	movs	r1, #128	; 0x80
 8007124:	0249      	lsls	r1, r1, #9
 8007126:	430a      	orrs	r2, r1
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e00b      	b.n	8007144 <HAL_RCC_OscConfig+0xdc>
 800712c:	4b9b      	ldr	r3, [pc, #620]	; (800739c <HAL_RCC_OscConfig+0x334>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	4b9a      	ldr	r3, [pc, #616]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007132:	499b      	ldr	r1, [pc, #620]	; (80073a0 <HAL_RCC_OscConfig+0x338>)
 8007134:	400a      	ands	r2, r1
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	4b98      	ldr	r3, [pc, #608]	; (800739c <HAL_RCC_OscConfig+0x334>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	4b97      	ldr	r3, [pc, #604]	; (800739c <HAL_RCC_OscConfig+0x334>)
 800713e:	4999      	ldr	r1, [pc, #612]	; (80073a4 <HAL_RCC_OscConfig+0x33c>)
 8007140:	400a      	ands	r2, r1
 8007142:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d014      	beq.n	8007176 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800714c:	f7ff f9dc 	bl	8006508 <HAL_GetTick>
 8007150:	0003      	movs	r3, r0
 8007152:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007154:	e008      	b.n	8007168 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007156:	f7ff f9d7 	bl	8006508 <HAL_GetTick>
 800715a:	0002      	movs	r2, r0
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b64      	cmp	r3, #100	; 0x64
 8007162:	d901      	bls.n	8007168 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e28e      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007168:	4b8c      	ldr	r3, [pc, #560]	; (800739c <HAL_RCC_OscConfig+0x334>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	2380      	movs	r3, #128	; 0x80
 800716e:	029b      	lsls	r3, r3, #10
 8007170:	4013      	ands	r3, r2
 8007172:	d0f0      	beq.n	8007156 <HAL_RCC_OscConfig+0xee>
 8007174:	e015      	b.n	80071a2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007176:	f7ff f9c7 	bl	8006508 <HAL_GetTick>
 800717a:	0003      	movs	r3, r0
 800717c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007180:	f7ff f9c2 	bl	8006508 <HAL_GetTick>
 8007184:	0002      	movs	r2, r0
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b64      	cmp	r3, #100	; 0x64
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e279      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007192:	4b82      	ldr	r3, [pc, #520]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	2380      	movs	r3, #128	; 0x80
 8007198:	029b      	lsls	r3, r3, #10
 800719a:	4013      	ands	r3, r2
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x118>
 800719e:	e000      	b.n	80071a2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071a0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2202      	movs	r2, #2
 80071a8:	4013      	ands	r3, r2
 80071aa:	d100      	bne.n	80071ae <HAL_RCC_OscConfig+0x146>
 80071ac:	e06c      	b.n	8007288 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80071ae:	4b7b      	ldr	r3, [pc, #492]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	220c      	movs	r2, #12
 80071b4:	4013      	ands	r3, r2
 80071b6:	d00e      	beq.n	80071d6 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80071b8:	4b78      	ldr	r3, [pc, #480]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	220c      	movs	r2, #12
 80071be:	4013      	ands	r3, r2
 80071c0:	2b08      	cmp	r3, #8
 80071c2:	d11f      	bne.n	8007204 <HAL_RCC_OscConfig+0x19c>
 80071c4:	4b75      	ldr	r3, [pc, #468]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	23c0      	movs	r3, #192	; 0xc0
 80071ca:	025b      	lsls	r3, r3, #9
 80071cc:	401a      	ands	r2, r3
 80071ce:	2380      	movs	r3, #128	; 0x80
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d116      	bne.n	8007204 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071d6:	4b71      	ldr	r3, [pc, #452]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2202      	movs	r2, #2
 80071dc:	4013      	ands	r3, r2
 80071de:	d005      	beq.n	80071ec <HAL_RCC_OscConfig+0x184>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d001      	beq.n	80071ec <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e24c      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ec:	4b6b      	ldr	r3, [pc, #428]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	22f8      	movs	r2, #248	; 0xf8
 80071f2:	4393      	bics	r3, r2
 80071f4:	0019      	movs	r1, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	00da      	lsls	r2, r3, #3
 80071fc:	4b67      	ldr	r3, [pc, #412]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80071fe:	430a      	orrs	r2, r1
 8007200:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007202:	e041      	b.n	8007288 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d024      	beq.n	8007256 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800720c:	4b63      	ldr	r3, [pc, #396]	; (800739c <HAL_RCC_OscConfig+0x334>)
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	4b62      	ldr	r3, [pc, #392]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007212:	2101      	movs	r1, #1
 8007214:	430a      	orrs	r2, r1
 8007216:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007218:	f7ff f976 	bl	8006508 <HAL_GetTick>
 800721c:	0003      	movs	r3, r0
 800721e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007220:	e008      	b.n	8007234 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007222:	f7ff f971 	bl	8006508 <HAL_GetTick>
 8007226:	0002      	movs	r2, r0
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	2b02      	cmp	r3, #2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e228      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007234:	4b59      	ldr	r3, [pc, #356]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2202      	movs	r2, #2
 800723a:	4013      	ands	r3, r2
 800723c:	d0f1      	beq.n	8007222 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800723e:	4b57      	ldr	r3, [pc, #348]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	22f8      	movs	r2, #248	; 0xf8
 8007244:	4393      	bics	r3, r2
 8007246:	0019      	movs	r1, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	691b      	ldr	r3, [r3, #16]
 800724c:	00da      	lsls	r2, r3, #3
 800724e:	4b53      	ldr	r3, [pc, #332]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007250:	430a      	orrs	r2, r1
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e018      	b.n	8007288 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007256:	4b51      	ldr	r3, [pc, #324]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4b50      	ldr	r3, [pc, #320]	; (800739c <HAL_RCC_OscConfig+0x334>)
 800725c:	2101      	movs	r1, #1
 800725e:	438a      	bics	r2, r1
 8007260:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007262:	f7ff f951 	bl	8006508 <HAL_GetTick>
 8007266:	0003      	movs	r3, r0
 8007268:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726a:	e008      	b.n	800727e <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800726c:	f7ff f94c 	bl	8006508 <HAL_GetTick>
 8007270:	0002      	movs	r2, r0
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	2b02      	cmp	r3, #2
 8007278:	d901      	bls.n	800727e <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e203      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800727e:	4b47      	ldr	r3, [pc, #284]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2202      	movs	r2, #2
 8007284:	4013      	ands	r3, r2
 8007286:	d1f1      	bne.n	800726c <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2208      	movs	r2, #8
 800728e:	4013      	ands	r3, r2
 8007290:	d036      	beq.n	8007300 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d019      	beq.n	80072ce <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800729a:	4b40      	ldr	r3, [pc, #256]	; (800739c <HAL_RCC_OscConfig+0x334>)
 800729c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800729e:	4b3f      	ldr	r3, [pc, #252]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80072a0:	2101      	movs	r1, #1
 80072a2:	430a      	orrs	r2, r1
 80072a4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072a6:	f7ff f92f 	bl	8006508 <HAL_GetTick>
 80072aa:	0003      	movs	r3, r0
 80072ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ae:	e008      	b.n	80072c2 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072b0:	f7ff f92a 	bl	8006508 <HAL_GetTick>
 80072b4:	0002      	movs	r2, r0
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	1ad3      	subs	r3, r2, r3
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d901      	bls.n	80072c2 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 80072be:	2303      	movs	r3, #3
 80072c0:	e1e1      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072c2:	4b36      	ldr	r3, [pc, #216]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	2202      	movs	r2, #2
 80072c8:	4013      	ands	r3, r2
 80072ca:	d0f1      	beq.n	80072b0 <HAL_RCC_OscConfig+0x248>
 80072cc:	e018      	b.n	8007300 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072ce:	4b33      	ldr	r3, [pc, #204]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80072d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072d2:	4b32      	ldr	r3, [pc, #200]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80072d4:	2101      	movs	r1, #1
 80072d6:	438a      	bics	r2, r1
 80072d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072da:	f7ff f915 	bl	8006508 <HAL_GetTick>
 80072de:	0003      	movs	r3, r0
 80072e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072e2:	e008      	b.n	80072f6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072e4:	f7ff f910 	bl	8006508 <HAL_GetTick>
 80072e8:	0002      	movs	r2, r0
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d901      	bls.n	80072f6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	e1c7      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f6:	4b29      	ldr	r3, [pc, #164]	; (800739c <HAL_RCC_OscConfig+0x334>)
 80072f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072fa:	2202      	movs	r2, #2
 80072fc:	4013      	ands	r3, r2
 80072fe:	d1f1      	bne.n	80072e4 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2204      	movs	r2, #4
 8007306:	4013      	ands	r3, r2
 8007308:	d100      	bne.n	800730c <HAL_RCC_OscConfig+0x2a4>
 800730a:	e0b5      	b.n	8007478 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 800730c:	201f      	movs	r0, #31
 800730e:	183b      	adds	r3, r7, r0
 8007310:	2200      	movs	r2, #0
 8007312:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007314:	4b21      	ldr	r3, [pc, #132]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	2380      	movs	r3, #128	; 0x80
 800731a:	055b      	lsls	r3, r3, #21
 800731c:	4013      	ands	r3, r2
 800731e:	d110      	bne.n	8007342 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007320:	4b1e      	ldr	r3, [pc, #120]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	4b1d      	ldr	r3, [pc, #116]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007326:	2180      	movs	r1, #128	; 0x80
 8007328:	0549      	lsls	r1, r1, #21
 800732a:	430a      	orrs	r2, r1
 800732c:	61da      	str	r2, [r3, #28]
 800732e:	4b1b      	ldr	r3, [pc, #108]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007330:	69da      	ldr	r2, [r3, #28]
 8007332:	2380      	movs	r3, #128	; 0x80
 8007334:	055b      	lsls	r3, r3, #21
 8007336:	4013      	ands	r3, r2
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800733c:	183b      	adds	r3, r7, r0
 800733e:	2201      	movs	r2, #1
 8007340:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007342:	4b19      	ldr	r3, [pc, #100]	; (80073a8 <HAL_RCC_OscConfig+0x340>)
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	2380      	movs	r3, #128	; 0x80
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	4013      	ands	r3, r2
 800734c:	d11a      	bne.n	8007384 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800734e:	4b16      	ldr	r3, [pc, #88]	; (80073a8 <HAL_RCC_OscConfig+0x340>)
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	4b15      	ldr	r3, [pc, #84]	; (80073a8 <HAL_RCC_OscConfig+0x340>)
 8007354:	2180      	movs	r1, #128	; 0x80
 8007356:	0049      	lsls	r1, r1, #1
 8007358:	430a      	orrs	r2, r1
 800735a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800735c:	f7ff f8d4 	bl	8006508 <HAL_GetTick>
 8007360:	0003      	movs	r3, r0
 8007362:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007364:	e008      	b.n	8007378 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007366:	f7ff f8cf 	bl	8006508 <HAL_GetTick>
 800736a:	0002      	movs	r2, r0
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b64      	cmp	r3, #100	; 0x64
 8007372:	d901      	bls.n	8007378 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e186      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007378:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <HAL_RCC_OscConfig+0x340>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	2380      	movs	r3, #128	; 0x80
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	4013      	ands	r3, r2
 8007382:	d0f0      	beq.n	8007366 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d10f      	bne.n	80073ac <HAL_RCC_OscConfig+0x344>
 800738c:	4b03      	ldr	r3, [pc, #12]	; (800739c <HAL_RCC_OscConfig+0x334>)
 800738e:	6a1a      	ldr	r2, [r3, #32]
 8007390:	4b02      	ldr	r3, [pc, #8]	; (800739c <HAL_RCC_OscConfig+0x334>)
 8007392:	2101      	movs	r1, #1
 8007394:	430a      	orrs	r2, r1
 8007396:	621a      	str	r2, [r3, #32]
 8007398:	e036      	b.n	8007408 <HAL_RCC_OscConfig+0x3a0>
 800739a:	46c0      	nop			; (mov r8, r8)
 800739c:	40021000 	.word	0x40021000
 80073a0:	fffeffff 	.word	0xfffeffff
 80073a4:	fffbffff 	.word	0xfffbffff
 80073a8:	40007000 	.word	0x40007000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d10c      	bne.n	80073ce <HAL_RCC_OscConfig+0x366>
 80073b4:	4bb6      	ldr	r3, [pc, #728]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073b6:	6a1a      	ldr	r2, [r3, #32]
 80073b8:	4bb5      	ldr	r3, [pc, #724]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073ba:	2101      	movs	r1, #1
 80073bc:	438a      	bics	r2, r1
 80073be:	621a      	str	r2, [r3, #32]
 80073c0:	4bb3      	ldr	r3, [pc, #716]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073c2:	6a1a      	ldr	r2, [r3, #32]
 80073c4:	4bb2      	ldr	r3, [pc, #712]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073c6:	2104      	movs	r1, #4
 80073c8:	438a      	bics	r2, r1
 80073ca:	621a      	str	r2, [r3, #32]
 80073cc:	e01c      	b.n	8007408 <HAL_RCC_OscConfig+0x3a0>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b05      	cmp	r3, #5
 80073d4:	d10c      	bne.n	80073f0 <HAL_RCC_OscConfig+0x388>
 80073d6:	4bae      	ldr	r3, [pc, #696]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073d8:	6a1a      	ldr	r2, [r3, #32]
 80073da:	4bad      	ldr	r3, [pc, #692]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073dc:	2104      	movs	r1, #4
 80073de:	430a      	orrs	r2, r1
 80073e0:	621a      	str	r2, [r3, #32]
 80073e2:	4bab      	ldr	r3, [pc, #684]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073e4:	6a1a      	ldr	r2, [r3, #32]
 80073e6:	4baa      	ldr	r3, [pc, #680]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073e8:	2101      	movs	r1, #1
 80073ea:	430a      	orrs	r2, r1
 80073ec:	621a      	str	r2, [r3, #32]
 80073ee:	e00b      	b.n	8007408 <HAL_RCC_OscConfig+0x3a0>
 80073f0:	4ba7      	ldr	r3, [pc, #668]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073f2:	6a1a      	ldr	r2, [r3, #32]
 80073f4:	4ba6      	ldr	r3, [pc, #664]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073f6:	2101      	movs	r1, #1
 80073f8:	438a      	bics	r2, r1
 80073fa:	621a      	str	r2, [r3, #32]
 80073fc:	4ba4      	ldr	r3, [pc, #656]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80073fe:	6a1a      	ldr	r2, [r3, #32]
 8007400:	4ba3      	ldr	r3, [pc, #652]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007402:	2104      	movs	r1, #4
 8007404:	438a      	bics	r2, r1
 8007406:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d014      	beq.n	800743a <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007410:	f7ff f87a 	bl	8006508 <HAL_GetTick>
 8007414:	0003      	movs	r3, r0
 8007416:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007418:	e009      	b.n	800742e <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800741a:	f7ff f875 	bl	8006508 <HAL_GetTick>
 800741e:	0002      	movs	r2, r0
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	4a9b      	ldr	r2, [pc, #620]	; (8007694 <HAL_RCC_OscConfig+0x62c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e12b      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800742e:	4b98      	ldr	r3, [pc, #608]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007430:	6a1b      	ldr	r3, [r3, #32]
 8007432:	2202      	movs	r2, #2
 8007434:	4013      	ands	r3, r2
 8007436:	d0f0      	beq.n	800741a <HAL_RCC_OscConfig+0x3b2>
 8007438:	e013      	b.n	8007462 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800743a:	f7ff f865 	bl	8006508 <HAL_GetTick>
 800743e:	0003      	movs	r3, r0
 8007440:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007442:	e009      	b.n	8007458 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007444:	f7ff f860 	bl	8006508 <HAL_GetTick>
 8007448:	0002      	movs	r2, r0
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	4a91      	ldr	r2, [pc, #580]	; (8007694 <HAL_RCC_OscConfig+0x62c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d901      	bls.n	8007458 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8007454:	2303      	movs	r3, #3
 8007456:	e116      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007458:	4b8d      	ldr	r3, [pc, #564]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	2202      	movs	r2, #2
 800745e:	4013      	ands	r3, r2
 8007460:	d1f0      	bne.n	8007444 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007462:	231f      	movs	r3, #31
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d105      	bne.n	8007478 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800746c:	4b88      	ldr	r3, [pc, #544]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800746e:	69da      	ldr	r2, [r3, #28]
 8007470:	4b87      	ldr	r3, [pc, #540]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007472:	4989      	ldr	r1, [pc, #548]	; (8007698 <HAL_RCC_OscConfig+0x630>)
 8007474:	400a      	ands	r2, r1
 8007476:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2210      	movs	r2, #16
 800747e:	4013      	ands	r3, r2
 8007480:	d063      	beq.n	800754a <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d12a      	bne.n	80074e0 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800748a:	4b81      	ldr	r3, [pc, #516]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800748c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800748e:	4b80      	ldr	r3, [pc, #512]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007490:	2104      	movs	r1, #4
 8007492:	430a      	orrs	r2, r1
 8007494:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8007496:	4b7e      	ldr	r3, [pc, #504]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800749a:	4b7d      	ldr	r3, [pc, #500]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800749c:	2101      	movs	r1, #1
 800749e:	430a      	orrs	r2, r1
 80074a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80074a2:	f7ff f831 	bl	8006508 <HAL_GetTick>
 80074a6:	0003      	movs	r3, r0
 80074a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80074aa:	e008      	b.n	80074be <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80074ac:	f7ff f82c 	bl	8006508 <HAL_GetTick>
 80074b0:	0002      	movs	r2, r0
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b02      	cmp	r3, #2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e0e3      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80074be:	4b74      	ldr	r3, [pc, #464]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80074c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074c2:	2202      	movs	r2, #2
 80074c4:	4013      	ands	r3, r2
 80074c6:	d0f1      	beq.n	80074ac <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80074c8:	4b71      	ldr	r3, [pc, #452]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80074ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074cc:	22f8      	movs	r2, #248	; 0xf8
 80074ce:	4393      	bics	r3, r2
 80074d0:	0019      	movs	r1, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	00da      	lsls	r2, r3, #3
 80074d8:	4b6d      	ldr	r3, [pc, #436]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80074da:	430a      	orrs	r2, r1
 80074dc:	635a      	str	r2, [r3, #52]	; 0x34
 80074de:	e034      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	695b      	ldr	r3, [r3, #20]
 80074e4:	3305      	adds	r3, #5
 80074e6:	d111      	bne.n	800750c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80074e8:	4b69      	ldr	r3, [pc, #420]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80074ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ec:	4b68      	ldr	r3, [pc, #416]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80074ee:	2104      	movs	r1, #4
 80074f0:	438a      	bics	r2, r1
 80074f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80074f4:	4b66      	ldr	r3, [pc, #408]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80074f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074f8:	22f8      	movs	r2, #248	; 0xf8
 80074fa:	4393      	bics	r3, r2
 80074fc:	0019      	movs	r1, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	699b      	ldr	r3, [r3, #24]
 8007502:	00da      	lsls	r2, r3, #3
 8007504:	4b62      	ldr	r3, [pc, #392]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007506:	430a      	orrs	r2, r1
 8007508:	635a      	str	r2, [r3, #52]	; 0x34
 800750a:	e01e      	b.n	800754a <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800750c:	4b60      	ldr	r3, [pc, #384]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800750e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007510:	4b5f      	ldr	r3, [pc, #380]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007512:	2104      	movs	r1, #4
 8007514:	430a      	orrs	r2, r1
 8007516:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8007518:	4b5d      	ldr	r3, [pc, #372]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800751a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800751c:	4b5c      	ldr	r3, [pc, #368]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800751e:	2101      	movs	r1, #1
 8007520:	438a      	bics	r2, r1
 8007522:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007524:	f7fe fff0 	bl	8006508 <HAL_GetTick>
 8007528:	0003      	movs	r3, r0
 800752a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800752c:	e008      	b.n	8007540 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800752e:	f7fe ffeb 	bl	8006508 <HAL_GetTick>
 8007532:	0002      	movs	r2, r0
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	2b02      	cmp	r3, #2
 800753a:	d901      	bls.n	8007540 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e0a2      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007540:	4b53      	ldr	r3, [pc, #332]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007544:	2202      	movs	r2, #2
 8007546:	4013      	ands	r3, r2
 8007548:	d1f1      	bne.n	800752e <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d100      	bne.n	8007554 <HAL_RCC_OscConfig+0x4ec>
 8007552:	e097      	b.n	8007684 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007554:	4b4e      	ldr	r3, [pc, #312]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	220c      	movs	r2, #12
 800755a:	4013      	ands	r3, r2
 800755c:	2b08      	cmp	r3, #8
 800755e:	d100      	bne.n	8007562 <HAL_RCC_OscConfig+0x4fa>
 8007560:	e06b      	b.n	800763a <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	2b02      	cmp	r3, #2
 8007568:	d14c      	bne.n	8007604 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800756a:	4b49      	ldr	r3, [pc, #292]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	4b48      	ldr	r3, [pc, #288]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007570:	494a      	ldr	r1, [pc, #296]	; (800769c <HAL_RCC_OscConfig+0x634>)
 8007572:	400a      	ands	r2, r1
 8007574:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007576:	f7fe ffc7 	bl	8006508 <HAL_GetTick>
 800757a:	0003      	movs	r3, r0
 800757c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800757e:	e008      	b.n	8007592 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007580:	f7fe ffc2 	bl	8006508 <HAL_GetTick>
 8007584:	0002      	movs	r2, r0
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e079      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007592:	4b3f      	ldr	r3, [pc, #252]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	2380      	movs	r3, #128	; 0x80
 8007598:	049b      	lsls	r3, r3, #18
 800759a:	4013      	ands	r3, r2
 800759c:	d1f0      	bne.n	8007580 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800759e:	4b3c      	ldr	r3, [pc, #240]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80075a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a2:	220f      	movs	r2, #15
 80075a4:	4393      	bics	r3, r2
 80075a6:	0019      	movs	r1, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ac:	4b38      	ldr	r3, [pc, #224]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80075ae:	430a      	orrs	r2, r1
 80075b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80075b2:	4b37      	ldr	r3, [pc, #220]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	4a3a      	ldr	r2, [pc, #232]	; (80076a0 <HAL_RCC_OscConfig+0x638>)
 80075b8:	4013      	ands	r3, r2
 80075ba:	0019      	movs	r1, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c4:	431a      	orrs	r2, r3
 80075c6:	4b32      	ldr	r3, [pc, #200]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80075c8:	430a      	orrs	r2, r1
 80075ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075cc:	4b30      	ldr	r3, [pc, #192]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	4b2f      	ldr	r3, [pc, #188]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	0449      	lsls	r1, r1, #17
 80075d6:	430a      	orrs	r2, r1
 80075d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075da:	f7fe ff95 	bl	8006508 <HAL_GetTick>
 80075de:	0003      	movs	r3, r0
 80075e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075e2:	e008      	b.n	80075f6 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80075e4:	f7fe ff90 	bl	8006508 <HAL_GetTick>
 80075e8:	0002      	movs	r2, r0
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d901      	bls.n	80075f6 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80075f2:	2303      	movs	r3, #3
 80075f4:	e047      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80075f6:	4b26      	ldr	r3, [pc, #152]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	2380      	movs	r3, #128	; 0x80
 80075fc:	049b      	lsls	r3, r3, #18
 80075fe:	4013      	ands	r3, r2
 8007600:	d0f0      	beq.n	80075e4 <HAL_RCC_OscConfig+0x57c>
 8007602:	e03f      	b.n	8007684 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007604:	4b22      	ldr	r3, [pc, #136]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	4b21      	ldr	r3, [pc, #132]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800760a:	4924      	ldr	r1, [pc, #144]	; (800769c <HAL_RCC_OscConfig+0x634>)
 800760c:	400a      	ands	r2, r1
 800760e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007610:	f7fe ff7a 	bl	8006508 <HAL_GetTick>
 8007614:	0003      	movs	r3, r0
 8007616:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007618:	e008      	b.n	800762c <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800761a:	f7fe ff75 	bl	8006508 <HAL_GetTick>
 800761e:	0002      	movs	r2, r0
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d901      	bls.n	800762c <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8007628:	2303      	movs	r3, #3
 800762a:	e02c      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800762c:	4b18      	ldr	r3, [pc, #96]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	2380      	movs	r3, #128	; 0x80
 8007632:	049b      	lsls	r3, r3, #18
 8007634:	4013      	ands	r3, r2
 8007636:	d1f0      	bne.n	800761a <HAL_RCC_OscConfig+0x5b2>
 8007638:	e024      	b.n	8007684 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	2b01      	cmp	r3, #1
 8007640:	d101      	bne.n	8007646 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e01f      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007646:	4b12      	ldr	r3, [pc, #72]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800764c:	4b10      	ldr	r3, [pc, #64]	; (8007690 <HAL_RCC_OscConfig+0x628>)
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	23c0      	movs	r3, #192	; 0xc0
 8007656:	025b      	lsls	r3, r3, #9
 8007658:	401a      	ands	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	429a      	cmp	r2, r3
 8007660:	d10e      	bne.n	8007680 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	220f      	movs	r2, #15
 8007666:	401a      	ands	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800766c:	429a      	cmp	r2, r3
 800766e:	d107      	bne.n	8007680 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	23f0      	movs	r3, #240	; 0xf0
 8007674:	039b      	lsls	r3, r3, #14
 8007676:	401a      	ands	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800767c:	429a      	cmp	r2, r3
 800767e:	d001      	beq.n	8007684 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e000      	b.n	8007686 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	0018      	movs	r0, r3
 8007688:	46bd      	mov	sp, r7
 800768a:	b008      	add	sp, #32
 800768c:	bd80      	pop	{r7, pc}
 800768e:	46c0      	nop			; (mov r8, r8)
 8007690:	40021000 	.word	0x40021000
 8007694:	00001388 	.word	0x00001388
 8007698:	efffffff 	.word	0xefffffff
 800769c:	feffffff 	.word	0xfeffffff
 80076a0:	ffc27fff 	.word	0xffc27fff

080076a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e0b3      	b.n	8007820 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80076b8:	4b5b      	ldr	r3, [pc, #364]	; (8007828 <HAL_RCC_ClockConfig+0x184>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2201      	movs	r2, #1
 80076be:	4013      	ands	r3, r2
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d911      	bls.n	80076ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076c6:	4b58      	ldr	r3, [pc, #352]	; (8007828 <HAL_RCC_ClockConfig+0x184>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2201      	movs	r2, #1
 80076cc:	4393      	bics	r3, r2
 80076ce:	0019      	movs	r1, r3
 80076d0:	4b55      	ldr	r3, [pc, #340]	; (8007828 <HAL_RCC_ClockConfig+0x184>)
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	430a      	orrs	r2, r1
 80076d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076d8:	4b53      	ldr	r3, [pc, #332]	; (8007828 <HAL_RCC_ClockConfig+0x184>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2201      	movs	r2, #1
 80076de:	4013      	ands	r3, r2
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d001      	beq.n	80076ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e09a      	b.n	8007820 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2202      	movs	r2, #2
 80076f0:	4013      	ands	r3, r2
 80076f2:	d015      	beq.n	8007720 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2204      	movs	r2, #4
 80076fa:	4013      	ands	r3, r2
 80076fc:	d006      	beq.n	800770c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80076fe:	4b4b      	ldr	r3, [pc, #300]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	4b4a      	ldr	r3, [pc, #296]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 8007704:	21e0      	movs	r1, #224	; 0xe0
 8007706:	00c9      	lsls	r1, r1, #3
 8007708:	430a      	orrs	r2, r1
 800770a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800770c:	4b47      	ldr	r3, [pc, #284]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	22f0      	movs	r2, #240	; 0xf0
 8007712:	4393      	bics	r3, r2
 8007714:	0019      	movs	r1, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	689a      	ldr	r2, [r3, #8]
 800771a:	4b44      	ldr	r3, [pc, #272]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 800771c:	430a      	orrs	r2, r1
 800771e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2201      	movs	r2, #1
 8007726:	4013      	ands	r3, r2
 8007728:	d040      	beq.n	80077ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d107      	bne.n	8007742 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007732:	4b3e      	ldr	r3, [pc, #248]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	2380      	movs	r3, #128	; 0x80
 8007738:	029b      	lsls	r3, r3, #10
 800773a:	4013      	ands	r3, r2
 800773c:	d114      	bne.n	8007768 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e06e      	b.n	8007820 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	2b02      	cmp	r3, #2
 8007748:	d107      	bne.n	800775a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800774a:	4b38      	ldr	r3, [pc, #224]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	2380      	movs	r3, #128	; 0x80
 8007750:	049b      	lsls	r3, r3, #18
 8007752:	4013      	ands	r3, r2
 8007754:	d108      	bne.n	8007768 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e062      	b.n	8007820 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800775a:	4b34      	ldr	r3, [pc, #208]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2202      	movs	r2, #2
 8007760:	4013      	ands	r3, r2
 8007762:	d101      	bne.n	8007768 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e05b      	b.n	8007820 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007768:	4b30      	ldr	r3, [pc, #192]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2203      	movs	r2, #3
 800776e:	4393      	bics	r3, r2
 8007770:	0019      	movs	r1, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	4b2d      	ldr	r3, [pc, #180]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 8007778:	430a      	orrs	r2, r1
 800777a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800777c:	f7fe fec4 	bl	8006508 <HAL_GetTick>
 8007780:	0003      	movs	r3, r0
 8007782:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007784:	e009      	b.n	800779a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007786:	f7fe febf 	bl	8006508 <HAL_GetTick>
 800778a:	0002      	movs	r2, r0
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	1ad3      	subs	r3, r2, r3
 8007790:	4a27      	ldr	r2, [pc, #156]	; (8007830 <HAL_RCC_ClockConfig+0x18c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d901      	bls.n	800779a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e042      	b.n	8007820 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800779a:	4b24      	ldr	r3, [pc, #144]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	220c      	movs	r2, #12
 80077a0:	401a      	ands	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d1ec      	bne.n	8007786 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80077ac:	4b1e      	ldr	r3, [pc, #120]	; (8007828 <HAL_RCC_ClockConfig+0x184>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2201      	movs	r2, #1
 80077b2:	4013      	ands	r3, r2
 80077b4:	683a      	ldr	r2, [r7, #0]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d211      	bcs.n	80077de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077ba:	4b1b      	ldr	r3, [pc, #108]	; (8007828 <HAL_RCC_ClockConfig+0x184>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2201      	movs	r2, #1
 80077c0:	4393      	bics	r3, r2
 80077c2:	0019      	movs	r1, r3
 80077c4:	4b18      	ldr	r3, [pc, #96]	; (8007828 <HAL_RCC_ClockConfig+0x184>)
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80077cc:	4b16      	ldr	r3, [pc, #88]	; (8007828 <HAL_RCC_ClockConfig+0x184>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2201      	movs	r2, #1
 80077d2:	4013      	ands	r3, r2
 80077d4:	683a      	ldr	r2, [r7, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d001      	beq.n	80077de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e020      	b.n	8007820 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2204      	movs	r2, #4
 80077e4:	4013      	ands	r3, r2
 80077e6:	d009      	beq.n	80077fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80077e8:	4b10      	ldr	r3, [pc, #64]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	4a11      	ldr	r2, [pc, #68]	; (8007834 <HAL_RCC_ClockConfig+0x190>)
 80077ee:	4013      	ands	r3, r2
 80077f0:	0019      	movs	r1, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	4b0d      	ldr	r3, [pc, #52]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 80077f8:	430a      	orrs	r2, r1
 80077fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80077fc:	f000 f820 	bl	8007840 <HAL_RCC_GetSysClockFreq>
 8007800:	0001      	movs	r1, r0
 8007802:	4b0a      	ldr	r3, [pc, #40]	; (800782c <HAL_RCC_ClockConfig+0x188>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	091b      	lsrs	r3, r3, #4
 8007808:	220f      	movs	r2, #15
 800780a:	4013      	ands	r3, r2
 800780c:	4a0a      	ldr	r2, [pc, #40]	; (8007838 <HAL_RCC_ClockConfig+0x194>)
 800780e:	5cd3      	ldrb	r3, [r2, r3]
 8007810:	000a      	movs	r2, r1
 8007812:	40da      	lsrs	r2, r3
 8007814:	4b09      	ldr	r3, [pc, #36]	; (800783c <HAL_RCC_ClockConfig+0x198>)
 8007816:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007818:	2003      	movs	r0, #3
 800781a:	f7fe fe2f 	bl	800647c <HAL_InitTick>
  
  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	0018      	movs	r0, r3
 8007822:	46bd      	mov	sp, r7
 8007824:	b004      	add	sp, #16
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40022000 	.word	0x40022000
 800782c:	40021000 	.word	0x40021000
 8007830:	00001388 	.word	0x00001388
 8007834:	fffff8ff 	.word	0xfffff8ff
 8007838:	0800aaec 	.word	0x0800aaec
 800783c:	20000040 	.word	0x20000040

08007840 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	2300      	movs	r3, #0
 800784c:	60bb      	str	r3, [r7, #8]
 800784e:	2300      	movs	r3, #0
 8007850:	617b      	str	r3, [r7, #20]
 8007852:	2300      	movs	r3, #0
 8007854:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800785a:	4b21      	ldr	r3, [pc, #132]	; (80078e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	220c      	movs	r2, #12
 8007864:	4013      	ands	r3, r2
 8007866:	2b04      	cmp	r3, #4
 8007868:	d002      	beq.n	8007870 <HAL_RCC_GetSysClockFreq+0x30>
 800786a:	2b08      	cmp	r3, #8
 800786c:	d003      	beq.n	8007876 <HAL_RCC_GetSysClockFreq+0x36>
 800786e:	e02e      	b.n	80078ce <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007870:	4b1c      	ldr	r3, [pc, #112]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8007872:	613b      	str	r3, [r7, #16]
      break;
 8007874:	e02e      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	0c9b      	lsrs	r3, r3, #18
 800787a:	220f      	movs	r2, #15
 800787c:	4013      	ands	r3, r2
 800787e:	4a1a      	ldr	r2, [pc, #104]	; (80078e8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8007880:	5cd3      	ldrb	r3, [r2, r3]
 8007882:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8007884:	4b16      	ldr	r3, [pc, #88]	; (80078e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	220f      	movs	r2, #15
 800788a:	4013      	ands	r3, r2
 800788c:	4a17      	ldr	r2, [pc, #92]	; (80078ec <HAL_RCC_GetSysClockFreq+0xac>)
 800788e:	5cd3      	ldrb	r3, [r2, r3]
 8007890:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	23c0      	movs	r3, #192	; 0xc0
 8007896:	025b      	lsls	r3, r3, #9
 8007898:	401a      	ands	r2, r3
 800789a:	2380      	movs	r3, #128	; 0x80
 800789c:	025b      	lsls	r3, r3, #9
 800789e:	429a      	cmp	r2, r3
 80078a0:	d109      	bne.n	80078b6 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80078a2:	68b9      	ldr	r1, [r7, #8]
 80078a4:	480f      	ldr	r0, [pc, #60]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80078a6:	f7f8 fc2d 	bl	8000104 <__udivsi3>
 80078aa:	0003      	movs	r3, r0
 80078ac:	001a      	movs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4353      	muls	r3, r2
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	480a      	ldr	r0, [pc, #40]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80078ba:	f7f8 fc23 	bl	8000104 <__udivsi3>
 80078be:	0003      	movs	r3, r0
 80078c0:	001a      	movs	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4353      	muls	r3, r2
 80078c6:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	613b      	str	r3, [r7, #16]
      break;
 80078cc:	e002      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80078ce:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80078d0:	613b      	str	r3, [r7, #16]
      break;
 80078d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80078d4:	693b      	ldr	r3, [r7, #16]
}
 80078d6:	0018      	movs	r0, r3
 80078d8:	46bd      	mov	sp, r7
 80078da:	b006      	add	sp, #24
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	46c0      	nop			; (mov r8, r8)
 80078e0:	40021000 	.word	0x40021000
 80078e4:	007a1200 	.word	0x007a1200
 80078e8:	0800aafc 	.word	0x0800aafc
 80078ec:	0800ab0c 	.word	0x0800ab0c

080078f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d101      	bne.n	8007902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e0a8      	b.n	8007a54 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	2b00      	cmp	r3, #0
 8007908:	d109      	bne.n	800791e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	2382      	movs	r3, #130	; 0x82
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	429a      	cmp	r2, r3
 8007914:	d009      	beq.n	800792a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	61da      	str	r2, [r3, #28]
 800791c:	e005      	b.n	800792a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	225d      	movs	r2, #93	; 0x5d
 8007934:	5c9b      	ldrb	r3, [r3, r2]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d107      	bne.n	800794c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	225c      	movs	r2, #92	; 0x5c
 8007940:	2100      	movs	r1, #0
 8007942:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	0018      	movs	r0, r3
 8007948:	f7fe fbec 	bl	8006124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	225d      	movs	r2, #93	; 0x5d
 8007950:	2102      	movs	r1, #2
 8007952:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2140      	movs	r1, #64	; 0x40
 8007960:	438a      	bics	r2, r1
 8007962:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68da      	ldr	r2, [r3, #12]
 8007968:	23e0      	movs	r3, #224	; 0xe0
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	429a      	cmp	r2, r3
 800796e:	d902      	bls.n	8007976 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e002      	b.n	800797c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007976:	2380      	movs	r3, #128	; 0x80
 8007978:	015b      	lsls	r3, r3, #5
 800797a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	23f0      	movs	r3, #240	; 0xf0
 8007982:	011b      	lsls	r3, r3, #4
 8007984:	429a      	cmp	r2, r3
 8007986:	d008      	beq.n	800799a <HAL_SPI_Init+0xaa>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	23e0      	movs	r3, #224	; 0xe0
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	429a      	cmp	r2, r3
 8007992:	d002      	beq.n	800799a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685a      	ldr	r2, [r3, #4]
 800799e:	2382      	movs	r3, #130	; 0x82
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	401a      	ands	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6899      	ldr	r1, [r3, #8]
 80079a8:	2384      	movs	r3, #132	; 0x84
 80079aa:	021b      	lsls	r3, r3, #8
 80079ac:	400b      	ands	r3, r1
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2102      	movs	r1, #2
 80079b6:	400b      	ands	r3, r1
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	2101      	movs	r1, #1
 80079c0:	400b      	ands	r3, r1
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6999      	ldr	r1, [r3, #24]
 80079c8:	2380      	movs	r3, #128	; 0x80
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	400b      	ands	r3, r1
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	69db      	ldr	r3, [r3, #28]
 80079d4:	2138      	movs	r1, #56	; 0x38
 80079d6:	400b      	ands	r3, r1
 80079d8:	431a      	orrs	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	2180      	movs	r1, #128	; 0x80
 80079e0:	400b      	ands	r3, r1
 80079e2:	431a      	orrs	r2, r3
 80079e4:	0011      	movs	r1, r2
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ea:	2380      	movs	r3, #128	; 0x80
 80079ec:	019b      	lsls	r3, r3, #6
 80079ee:	401a      	ands	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	0c1b      	lsrs	r3, r3, #16
 80079fe:	2204      	movs	r2, #4
 8007a00:	401a      	ands	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	2110      	movs	r1, #16
 8007a08:	400b      	ands	r3, r1
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a10:	2108      	movs	r1, #8
 8007a12:	400b      	ands	r3, r1
 8007a14:	431a      	orrs	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68d9      	ldr	r1, [r3, #12]
 8007a1a:	23f0      	movs	r3, #240	; 0xf0
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	400b      	ands	r3, r1
 8007a20:	431a      	orrs	r2, r3
 8007a22:	0011      	movs	r1, r2
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	2380      	movs	r3, #128	; 0x80
 8007a28:	015b      	lsls	r3, r3, #5
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	69da      	ldr	r2, [r3, #28]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4907      	ldr	r1, [pc, #28]	; (8007a5c <HAL_SPI_Init+0x16c>)
 8007a40:	400a      	ands	r2, r1
 8007a42:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	225d      	movs	r2, #93	; 0x5d
 8007a4e:	2101      	movs	r1, #1
 8007a50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	0018      	movs	r0, r3
 8007a56:	46bd      	mov	sp, r7
 8007a58:	b004      	add	sp, #16
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	fffff7ff 	.word	0xfffff7ff

08007a60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	1dbb      	adds	r3, r7, #6
 8007a6e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a70:	231f      	movs	r3, #31
 8007a72:	18fb      	adds	r3, r7, r3
 8007a74:	2200      	movs	r2, #0
 8007a76:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	225c      	movs	r2, #92	; 0x5c
 8007a7c:	5c9b      	ldrb	r3, [r3, r2]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d101      	bne.n	8007a86 <HAL_SPI_Transmit+0x26>
 8007a82:	2302      	movs	r3, #2
 8007a84:	e147      	b.n	8007d16 <HAL_SPI_Transmit+0x2b6>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	225c      	movs	r2, #92	; 0x5c
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a8e:	f7fe fd3b 	bl	8006508 <HAL_GetTick>
 8007a92:	0003      	movs	r3, r0
 8007a94:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007a96:	2316      	movs	r3, #22
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	1dba      	adds	r2, r7, #6
 8007a9c:	8812      	ldrh	r2, [r2, #0]
 8007a9e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	225d      	movs	r2, #93	; 0x5d
 8007aa4:	5c9b      	ldrb	r3, [r3, r2]
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d004      	beq.n	8007ab6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8007aac:	231f      	movs	r3, #31
 8007aae:	18fb      	adds	r3, r7, r3
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	701a      	strb	r2, [r3, #0]
    goto error;
 8007ab4:	e128      	b.n	8007d08 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d003      	beq.n	8007ac4 <HAL_SPI_Transmit+0x64>
 8007abc:	1dbb      	adds	r3, r7, #6
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8007ac4:	231f      	movs	r3, #31
 8007ac6:	18fb      	adds	r3, r7, r3
 8007ac8:	2201      	movs	r2, #1
 8007aca:	701a      	strb	r2, [r3, #0]
    goto error;
 8007acc:	e11c      	b.n	8007d08 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	225d      	movs	r2, #93	; 0x5d
 8007ad2:	2103      	movs	r1, #3
 8007ad4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1dba      	adds	r2, r7, #6
 8007ae6:	8812      	ldrh	r2, [r2, #0]
 8007ae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	1dba      	adds	r2, r7, #6
 8007aee:	8812      	ldrh	r2, [r2, #0]
 8007af0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2200      	movs	r2, #0
 8007af6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2244      	movs	r2, #68	; 0x44
 8007afc:	2100      	movs	r1, #0
 8007afe:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2246      	movs	r2, #70	; 0x46
 8007b04:	2100      	movs	r1, #0
 8007b06:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689a      	ldr	r2, [r3, #8]
 8007b18:	2380      	movs	r3, #128	; 0x80
 8007b1a:	021b      	lsls	r3, r3, #8
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d110      	bne.n	8007b42 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2140      	movs	r1, #64	; 0x40
 8007b2c:	438a      	bics	r2, r1
 8007b2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2180      	movs	r1, #128	; 0x80
 8007b3c:	01c9      	lsls	r1, r1, #7
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2240      	movs	r2, #64	; 0x40
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	2b40      	cmp	r3, #64	; 0x40
 8007b4e:	d007      	beq.n	8007b60 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2140      	movs	r1, #64	; 0x40
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	23e0      	movs	r3, #224	; 0xe0
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d952      	bls.n	8007c12 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <HAL_SPI_Transmit+0x11e>
 8007b74:	2316      	movs	r3, #22
 8007b76:	18fb      	adds	r3, r7, r3
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d143      	bne.n	8007c06 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	881a      	ldrh	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	1c9a      	adds	r2, r3, #2
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007ba2:	e030      	b.n	8007c06 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	2202      	movs	r2, #2
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d112      	bne.n	8007bd8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	881a      	ldrh	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc2:	1c9a      	adds	r2, r3, #2
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bd6:	e016      	b.n	8007c06 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bd8:	f7fe fc96 	bl	8006508 <HAL_GetTick>
 8007bdc:	0002      	movs	r2, r0
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d802      	bhi.n	8007bee <HAL_SPI_Transmit+0x18e>
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	3301      	adds	r3, #1
 8007bec:	d102      	bne.n	8007bf4 <HAL_SPI_Transmit+0x194>
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d108      	bne.n	8007c06 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8007bf4:	231f      	movs	r3, #31
 8007bf6:	18fb      	adds	r3, r7, r3
 8007bf8:	2203      	movs	r2, #3
 8007bfa:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	225d      	movs	r2, #93	; 0x5d
 8007c00:	2101      	movs	r1, #1
 8007c02:	5499      	strb	r1, [r3, r2]
          goto error;
 8007c04:	e080      	b.n	8007d08 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1c9      	bne.n	8007ba4 <HAL_SPI_Transmit+0x144>
 8007c10:	e053      	b.n	8007cba <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d004      	beq.n	8007c24 <HAL_SPI_Transmit+0x1c4>
 8007c1a:	2316      	movs	r3, #22
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d145      	bne.n	8007cb0 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	7812      	ldrb	r2, [r2, #0]
 8007c30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	1c5a      	adds	r2, r3, #1
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	3b01      	subs	r3, #1
 8007c44:	b29a      	uxth	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8007c4a:	e031      	b.n	8007cb0 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2202      	movs	r2, #2
 8007c54:	4013      	ands	r3, r2
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d113      	bne.n	8007c82 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	330c      	adds	r3, #12
 8007c64:	7812      	ldrb	r2, [r2, #0]
 8007c66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c80:	e016      	b.n	8007cb0 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c82:	f7fe fc41 	bl	8006508 <HAL_GetTick>
 8007c86:	0002      	movs	r2, r0
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	1ad3      	subs	r3, r2, r3
 8007c8c:	683a      	ldr	r2, [r7, #0]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d802      	bhi.n	8007c98 <HAL_SPI_Transmit+0x238>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	3301      	adds	r3, #1
 8007c96:	d102      	bne.n	8007c9e <HAL_SPI_Transmit+0x23e>
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d108      	bne.n	8007cb0 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8007c9e:	231f      	movs	r3, #31
 8007ca0:	18fb      	adds	r3, r7, r3
 8007ca2:	2203      	movs	r2, #3
 8007ca4:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	225d      	movs	r2, #93	; 0x5d
 8007caa:	2101      	movs	r1, #1
 8007cac:	5499      	strb	r1, [r3, r2]
          goto error;
 8007cae:	e02b      	b.n	8007d08 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1c8      	bne.n	8007c4c <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f000 f95d 	bl	8007f80 <SPI_EndRxTxTransaction>
 8007cc6:	1e03      	subs	r3, r0, #0
 8007cc8:	d002      	beq.n	8007cd0 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cd8:	2300      	movs	r3, #0
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	613b      	str	r3, [r7, #16]
 8007cec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d004      	beq.n	8007d00 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8007cf6:	231f      	movs	r3, #31
 8007cf8:	18fb      	adds	r3, r7, r3
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	701a      	strb	r2, [r3, #0]
 8007cfe:	e003      	b.n	8007d08 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	225d      	movs	r2, #93	; 0x5d
 8007d04:	2101      	movs	r1, #1
 8007d06:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	225c      	movs	r2, #92	; 0x5c
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007d10:	231f      	movs	r3, #31
 8007d12:	18fb      	adds	r3, r7, r3
 8007d14:	781b      	ldrb	r3, [r3, #0]
}
 8007d16:	0018      	movs	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b008      	add	sp, #32
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	1dfb      	adds	r3, r7, #7
 8007d2e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d30:	f7fe fbea 	bl	8006508 <HAL_GetTick>
 8007d34:	0002      	movs	r2, r0
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	1a9b      	subs	r3, r3, r2
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	18d3      	adds	r3, r2, r3
 8007d3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d40:	f7fe fbe2 	bl	8006508 <HAL_GetTick>
 8007d44:	0003      	movs	r3, r0
 8007d46:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d48:	4b3a      	ldr	r3, [pc, #232]	; (8007e34 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	015b      	lsls	r3, r3, #5
 8007d4e:	0d1b      	lsrs	r3, r3, #20
 8007d50:	69fa      	ldr	r2, [r7, #28]
 8007d52:	4353      	muls	r3, r2
 8007d54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d56:	e058      	b.n	8007e0a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	d055      	beq.n	8007e0a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d5e:	f7fe fbd3 	bl	8006508 <HAL_GetTick>
 8007d62:	0002      	movs	r2, r0
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	69fa      	ldr	r2, [r7, #28]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d902      	bls.n	8007d74 <SPI_WaitFlagStateUntilTimeout+0x54>
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d142      	bne.n	8007dfa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	21e0      	movs	r1, #224	; 0xe0
 8007d80:	438a      	bics	r2, r1
 8007d82:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	2382      	movs	r3, #130	; 0x82
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	429a      	cmp	r2, r3
 8007d8e:	d113      	bne.n	8007db8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	2380      	movs	r3, #128	; 0x80
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d005      	beq.n	8007da8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	2380      	movs	r3, #128	; 0x80
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d107      	bne.n	8007db8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2140      	movs	r1, #64	; 0x40
 8007db4:	438a      	bics	r2, r1
 8007db6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dbc:	2380      	movs	r3, #128	; 0x80
 8007dbe:	019b      	lsls	r3, r3, #6
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d110      	bne.n	8007de6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	491a      	ldr	r1, [pc, #104]	; (8007e38 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007dd0:	400a      	ands	r2, r1
 8007dd2:	601a      	str	r2, [r3, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2180      	movs	r1, #128	; 0x80
 8007de0:	0189      	lsls	r1, r1, #6
 8007de2:	430a      	orrs	r2, r1
 8007de4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	225d      	movs	r2, #93	; 0x5d
 8007dea:	2101      	movs	r1, #1
 8007dec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	225c      	movs	r2, #92	; 0x5c
 8007df2:	2100      	movs	r1, #0
 8007df4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e017      	b.n	8007e2a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d101      	bne.n	8007e04 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	4013      	ands	r3, r2
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	425a      	negs	r2, r3
 8007e1a:	4153      	adcs	r3, r2
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	001a      	movs	r2, r3
 8007e20:	1dfb      	adds	r3, r7, #7
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	d197      	bne.n	8007d58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	b008      	add	sp, #32
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	20000040 	.word	0x20000040
 8007e38:	ffffdfff 	.word	0xffffdfff

08007e3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08a      	sub	sp, #40	; 0x28
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	607a      	str	r2, [r7, #4]
 8007e48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007e4a:	2317      	movs	r3, #23
 8007e4c:	18fb      	adds	r3, r7, r3
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e52:	f7fe fb59 	bl	8006508 <HAL_GetTick>
 8007e56:	0002      	movs	r2, r0
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	1a9b      	subs	r3, r3, r2
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	18d3      	adds	r3, r2, r3
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007e62:	f7fe fb51 	bl	8006508 <HAL_GetTick>
 8007e66:	0003      	movs	r3, r0
 8007e68:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	330c      	adds	r3, #12
 8007e70:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e72:	4b41      	ldr	r3, [pc, #260]	; (8007f78 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	0013      	movs	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	189b      	adds	r3, r3, r2
 8007e7c:	00da      	lsls	r2, r3, #3
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	0d1b      	lsrs	r3, r3, #20
 8007e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e84:	4353      	muls	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007e88:	e068      	b.n	8007f5c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	23c0      	movs	r3, #192	; 0xc0
 8007e8e:	00db      	lsls	r3, r3, #3
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d10a      	bne.n	8007eaa <SPI_WaitFifoStateUntilTimeout+0x6e>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d107      	bne.n	8007eaa <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	2117      	movs	r1, #23
 8007ea2:	187b      	adds	r3, r7, r1
 8007ea4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007ea6:	187b      	adds	r3, r7, r1
 8007ea8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	3301      	adds	r3, #1
 8007eae:	d055      	beq.n	8007f5c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007eb0:	f7fe fb2a 	bl	8006508 <HAL_GetTick>
 8007eb4:	0002      	movs	r2, r0
 8007eb6:	6a3b      	ldr	r3, [r7, #32]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d902      	bls.n	8007ec6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8007ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d142      	bne.n	8007f4c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	21e0      	movs	r1, #224	; 0xe0
 8007ed2:	438a      	bics	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	2382      	movs	r3, #130	; 0x82
 8007edc:	005b      	lsls	r3, r3, #1
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d113      	bne.n	8007f0a <SPI_WaitFifoStateUntilTimeout+0xce>
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	2380      	movs	r3, #128	; 0x80
 8007ee8:	021b      	lsls	r3, r3, #8
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d005      	beq.n	8007efa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	2380      	movs	r3, #128	; 0x80
 8007ef4:	00db      	lsls	r3, r3, #3
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d107      	bne.n	8007f0a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2140      	movs	r1, #64	; 0x40
 8007f06:	438a      	bics	r2, r1
 8007f08:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f0e:	2380      	movs	r3, #128	; 0x80
 8007f10:	019b      	lsls	r3, r3, #6
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d110      	bne.n	8007f38 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4916      	ldr	r1, [pc, #88]	; (8007f7c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007f22:	400a      	ands	r2, r1
 8007f24:	601a      	str	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2180      	movs	r1, #128	; 0x80
 8007f32:	0189      	lsls	r1, r1, #6
 8007f34:	430a      	orrs	r2, r1
 8007f36:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	225d      	movs	r2, #93	; 0x5d
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	225c      	movs	r2, #92	; 0x5c
 8007f44:	2100      	movs	r1, #0
 8007f46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e010      	b.n	8007f6e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007f52:	2300      	movs	r3, #0
 8007f54:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	4013      	ands	r3, r2
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d18e      	bne.n	8007e8a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	0018      	movs	r0, r3
 8007f70:	46bd      	mov	sp, r7
 8007f72:	b00a      	add	sp, #40	; 0x28
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	46c0      	nop			; (mov r8, r8)
 8007f78:	20000040 	.word	0x20000040
 8007f7c:	ffffdfff 	.word	0xffffdfff

08007f80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	23c0      	movs	r3, #192	; 0xc0
 8007f90:	0159      	lsls	r1, r3, #5
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	0013      	movs	r3, r2
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f7ff ff4e 	bl	8007e3c <SPI_WaitFifoStateUntilTimeout>
 8007fa0:	1e03      	subs	r3, r0, #0
 8007fa2:	d007      	beq.n	8007fb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fa8:	2220      	movs	r2, #32
 8007faa:	431a      	orrs	r2, r3
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e027      	b.n	8008004 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	0013      	movs	r3, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2180      	movs	r1, #128	; 0x80
 8007fc2:	f7ff fead 	bl	8007d20 <SPI_WaitFlagStateUntilTimeout>
 8007fc6:	1e03      	subs	r3, r0, #0
 8007fc8:	d007      	beq.n	8007fda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fce:	2220      	movs	r2, #32
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e014      	b.n	8008004 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	23c0      	movs	r3, #192	; 0xc0
 8007fde:	00d9      	lsls	r1, r3, #3
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	9300      	str	r3, [sp, #0]
 8007fe6:	0013      	movs	r3, r2
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f7ff ff27 	bl	8007e3c <SPI_WaitFifoStateUntilTimeout>
 8007fee:	1e03      	subs	r3, r0, #0
 8007ff0:	d007      	beq.n	8008002 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff6:	2220      	movs	r2, #32
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e000      	b.n	8008004 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	0018      	movs	r0, r3
 8008006:	46bd      	mov	sp, r7
 8008008:	b004      	add	sp, #16
 800800a:	bd80      	pop	{r7, pc}

0800800c <__libc_init_array>:
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	2600      	movs	r6, #0
 8008010:	4d0c      	ldr	r5, [pc, #48]	; (8008044 <__libc_init_array+0x38>)
 8008012:	4c0d      	ldr	r4, [pc, #52]	; (8008048 <__libc_init_array+0x3c>)
 8008014:	1b64      	subs	r4, r4, r5
 8008016:	10a4      	asrs	r4, r4, #2
 8008018:	42a6      	cmp	r6, r4
 800801a:	d109      	bne.n	8008030 <__libc_init_array+0x24>
 800801c:	2600      	movs	r6, #0
 800801e:	f000 f821 	bl	8008064 <_init>
 8008022:	4d0a      	ldr	r5, [pc, #40]	; (800804c <__libc_init_array+0x40>)
 8008024:	4c0a      	ldr	r4, [pc, #40]	; (8008050 <__libc_init_array+0x44>)
 8008026:	1b64      	subs	r4, r4, r5
 8008028:	10a4      	asrs	r4, r4, #2
 800802a:	42a6      	cmp	r6, r4
 800802c:	d105      	bne.n	800803a <__libc_init_array+0x2e>
 800802e:	bd70      	pop	{r4, r5, r6, pc}
 8008030:	00b3      	lsls	r3, r6, #2
 8008032:	58eb      	ldr	r3, [r5, r3]
 8008034:	4798      	blx	r3
 8008036:	3601      	adds	r6, #1
 8008038:	e7ee      	b.n	8008018 <__libc_init_array+0xc>
 800803a:	00b3      	lsls	r3, r6, #2
 800803c:	58eb      	ldr	r3, [r5, r3]
 800803e:	4798      	blx	r3
 8008040:	3601      	adds	r6, #1
 8008042:	e7f2      	b.n	800802a <__libc_init_array+0x1e>
 8008044:	0800ab1c 	.word	0x0800ab1c
 8008048:	0800ab1c 	.word	0x0800ab1c
 800804c:	0800ab1c 	.word	0x0800ab1c
 8008050:	0800ab20 	.word	0x0800ab20

08008054 <memset>:
 8008054:	0003      	movs	r3, r0
 8008056:	1882      	adds	r2, r0, r2
 8008058:	4293      	cmp	r3, r2
 800805a:	d100      	bne.n	800805e <memset+0xa>
 800805c:	4770      	bx	lr
 800805e:	7019      	strb	r1, [r3, #0]
 8008060:	3301      	adds	r3, #1
 8008062:	e7f9      	b.n	8008058 <memset+0x4>

08008064 <_init>:
 8008064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008066:	46c0      	nop			; (mov r8, r8)
 8008068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800806a:	bc08      	pop	{r3}
 800806c:	469e      	mov	lr, r3
 800806e:	4770      	bx	lr

08008070 <_fini>:
 8008070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008072:	46c0      	nop			; (mov r8, r8)
 8008074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008076:	bc08      	pop	{r3}
 8008078:	469e      	mov	lr, r3
 800807a:	4770      	bx	lr
