
test-st7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000892c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a20  080089e8  080089e8  000189e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b408  0800b408  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b408  0800b408  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b408  0800b408  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b408  0800b408  0001b408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b40c  0800b40c  0001b40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800b410  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000050  0800b45c  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  0800b45c  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a013  00000000  00000000  000200b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002458  00000000  00000000  0002a0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0002c528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007f5  00000000  00000000  0002cfb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00011c74  00000000  00000000  0002d7ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e790  00000000  00000000  0003f421  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000658f6  00000000  00000000  0004dbb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002854  00000000  00000000  000b34a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000b5cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000050 	.word	0x20000050
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080089d0 	.word	0x080089d0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000054 	.word	0x20000054
 8000100:	080089d0 	.word	0x080089d0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 faf9 	bl	80019f8 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fa49 	bl	80018a8 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 faeb 	bl	80019f8 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fae1 	bl	80019f8 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa71 	bl	800192c <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa67 	bl	800192c <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_cfrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0008      	movs	r0, r1
 8000470:	4661      	mov	r1, ip
 8000472:	e7ff      	b.n	8000474 <__aeabi_cfcmpeq>

08000474 <__aeabi_cfcmpeq>:
 8000474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000476:	f000 fb8f 	bl	8000b98 <__lesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	d401      	bmi.n	8000482 <__aeabi_cfcmpeq+0xe>
 800047e:	2100      	movs	r1, #0
 8000480:	42c8      	cmn	r0, r1
 8000482:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000484 <__aeabi_fcmpeq>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fb1b 	bl	8000ac0 <__eqsf2>
 800048a:	4240      	negs	r0, r0
 800048c:	3001      	adds	r0, #1
 800048e:	bd10      	pop	{r4, pc}

08000490 <__aeabi_fcmplt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fb81 	bl	8000b98 <__lesf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	db01      	blt.n	800049e <__aeabi_fcmplt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fcmple>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fb77 	bl	8000b98 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	dd01      	ble.n	80004b2 <__aeabi_fcmple+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmpgt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb27 	bl	8000b0c <__gesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dc01      	bgt.n	80004c6 <__aeabi_fcmpgt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpge>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb1d 	bl	8000b0c <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	da01      	bge.n	80004da <__aeabi_fcmpge+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_f2uiz>:
 80004e0:	219e      	movs	r1, #158	; 0x9e
 80004e2:	b510      	push	{r4, lr}
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	1c04      	adds	r4, r0, #0
 80004e8:	f7ff fff0 	bl	80004cc <__aeabi_fcmpge>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d103      	bne.n	80004f8 <__aeabi_f2uiz+0x18>
 80004f0:	1c20      	adds	r0, r4, #0
 80004f2:	f000 fe83 	bl	80011fc <__aeabi_f2iz>
 80004f6:	bd10      	pop	{r4, pc}
 80004f8:	219e      	movs	r1, #158	; 0x9e
 80004fa:	1c20      	adds	r0, r4, #0
 80004fc:	05c9      	lsls	r1, r1, #23
 80004fe:	f000 fcdd 	bl	8000ebc <__aeabi_fsub>
 8000502:	f000 fe7b 	bl	80011fc <__aeabi_f2iz>
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	061b      	lsls	r3, r3, #24
 800050a:	469c      	mov	ip, r3
 800050c:	4460      	add	r0, ip
 800050e:	e7f2      	b.n	80004f6 <__aeabi_f2uiz+0x16>

08000510 <__aeabi_d2uiz>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2200      	movs	r2, #0
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <__aeabi_d2uiz+0x38>)
 8000516:	0004      	movs	r4, r0
 8000518:	000d      	movs	r5, r1
 800051a:	f7ff ff9d 	bl	8000458 <__aeabi_dcmpge>
 800051e:	2800      	cmp	r0, #0
 8000520:	d104      	bne.n	800052c <__aeabi_d2uiz+0x1c>
 8000522:	0020      	movs	r0, r4
 8000524:	0029      	movs	r1, r5
 8000526:	f002 f90f 	bl	8002748 <__aeabi_d2iz>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <__aeabi_d2uiz+0x38>)
 800052e:	2200      	movs	r2, #0
 8000530:	0020      	movs	r0, r4
 8000532:	0029      	movs	r1, r5
 8000534:	f001 fd86 	bl	8002044 <__aeabi_dsub>
 8000538:	f002 f906 	bl	8002748 <__aeabi_d2iz>
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	061b      	lsls	r3, r3, #24
 8000540:	469c      	mov	ip, r3
 8000542:	4460      	add	r0, ip
 8000544:	e7f1      	b.n	800052a <__aeabi_d2uiz+0x1a>
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	41e00000 	.word	0x41e00000

0800054c <__aeabi_fadd>:
 800054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054e:	4647      	mov	r7, r8
 8000550:	46ce      	mov	lr, r9
 8000552:	024a      	lsls	r2, r1, #9
 8000554:	0243      	lsls	r3, r0, #9
 8000556:	0045      	lsls	r5, r0, #1
 8000558:	0fc4      	lsrs	r4, r0, #31
 800055a:	0a50      	lsrs	r0, r2, #9
 800055c:	4680      	mov	r8, r0
 800055e:	0048      	lsls	r0, r1, #1
 8000560:	0a5b      	lsrs	r3, r3, #9
 8000562:	0e00      	lsrs	r0, r0, #24
 8000564:	0992      	lsrs	r2, r2, #6
 8000566:	4694      	mov	ip, r2
 8000568:	b580      	push	{r7, lr}
 800056a:	001e      	movs	r6, r3
 800056c:	4681      	mov	r9, r0
 800056e:	0002      	movs	r2, r0
 8000570:	0e2d      	lsrs	r5, r5, #24
 8000572:	00df      	lsls	r7, r3, #3
 8000574:	0fc9      	lsrs	r1, r1, #31
 8000576:	428c      	cmp	r4, r1
 8000578:	d024      	beq.n	80005c4 <__aeabi_fadd+0x78>
 800057a:	1a28      	subs	r0, r5, r0
 800057c:	2800      	cmp	r0, #0
 800057e:	dd0e      	ble.n	800059e <__aeabi_fadd+0x52>
 8000580:	2a00      	cmp	r2, #0
 8000582:	d13e      	bne.n	8000602 <__aeabi_fadd+0xb6>
 8000584:	4662      	mov	r2, ip
 8000586:	2a00      	cmp	r2, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x40>
 800058a:	e0fd      	b.n	8000788 <__aeabi_fadd+0x23c>
 800058c:	1e42      	subs	r2, r0, #1
 800058e:	2801      	cmp	r0, #1
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0x48>
 8000592:	e137      	b.n	8000804 <__aeabi_fadd+0x2b8>
 8000594:	28ff      	cmp	r0, #255	; 0xff
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x4e>
 8000598:	e0a9      	b.n	80006ee <__aeabi_fadd+0x1a2>
 800059a:	0010      	movs	r0, r2
 800059c:	e039      	b.n	8000612 <__aeabi_fadd+0xc6>
 800059e:	2800      	cmp	r0, #0
 80005a0:	d063      	beq.n	800066a <__aeabi_fadd+0x11e>
 80005a2:	464b      	mov	r3, r9
 80005a4:	1b52      	subs	r2, r2, r5
 80005a6:	2d00      	cmp	r5, #0
 80005a8:	d000      	beq.n	80005ac <__aeabi_fadd+0x60>
 80005aa:	e0e0      	b.n	800076e <__aeabi_fadd+0x222>
 80005ac:	2f00      	cmp	r7, #0
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x66>
 80005b0:	e0ce      	b.n	8000750 <__aeabi_fadd+0x204>
 80005b2:	1e53      	subs	r3, r2, #1
 80005b4:	2a01      	cmp	r2, #1
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0x6e>
 80005b8:	e155      	b.n	8000866 <__aeabi_fadd+0x31a>
 80005ba:	2aff      	cmp	r2, #255	; 0xff
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fadd+0x74>
 80005be:	e094      	b.n	80006ea <__aeabi_fadd+0x19e>
 80005c0:	001a      	movs	r2, r3
 80005c2:	e0d9      	b.n	8000778 <__aeabi_fadd+0x22c>
 80005c4:	1a2a      	subs	r2, r5, r0
 80005c6:	2a00      	cmp	r2, #0
 80005c8:	dc00      	bgt.n	80005cc <__aeabi_fadd+0x80>
 80005ca:	e099      	b.n	8000700 <__aeabi_fadd+0x1b4>
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d062      	beq.n	8000696 <__aeabi_fadd+0x14a>
 80005d0:	2dff      	cmp	r5, #255	; 0xff
 80005d2:	d100      	bne.n	80005d6 <__aeabi_fadd+0x8a>
 80005d4:	e08b      	b.n	80006ee <__aeabi_fadd+0x1a2>
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	4661      	mov	r1, ip
 80005da:	04db      	lsls	r3, r3, #19
 80005dc:	4319      	orrs	r1, r3
 80005de:	468c      	mov	ip, r1
 80005e0:	2a1b      	cmp	r2, #27
 80005e2:	dc00      	bgt.n	80005e6 <__aeabi_fadd+0x9a>
 80005e4:	e0d2      	b.n	800078c <__aeabi_fadd+0x240>
 80005e6:	2301      	movs	r3, #1
 80005e8:	19db      	adds	r3, r3, r7
 80005ea:	015a      	lsls	r2, r3, #5
 80005ec:	d56a      	bpl.n	80006c4 <__aeabi_fadd+0x178>
 80005ee:	3501      	adds	r5, #1
 80005f0:	2dff      	cmp	r5, #255	; 0xff
 80005f2:	d05b      	beq.n	80006ac <__aeabi_fadd+0x160>
 80005f4:	2201      	movs	r2, #1
 80005f6:	49a3      	ldr	r1, [pc, #652]	; (8000884 <__aeabi_fadd+0x338>)
 80005f8:	401a      	ands	r2, r3
 80005fa:	085b      	lsrs	r3, r3, #1
 80005fc:	400b      	ands	r3, r1
 80005fe:	4313      	orrs	r3, r2
 8000600:	e01c      	b.n	800063c <__aeabi_fadd+0xf0>
 8000602:	2dff      	cmp	r5, #255	; 0xff
 8000604:	d100      	bne.n	8000608 <__aeabi_fadd+0xbc>
 8000606:	e072      	b.n	80006ee <__aeabi_fadd+0x1a2>
 8000608:	2380      	movs	r3, #128	; 0x80
 800060a:	4662      	mov	r2, ip
 800060c:	04db      	lsls	r3, r3, #19
 800060e:	431a      	orrs	r2, r3
 8000610:	4694      	mov	ip, r2
 8000612:	281b      	cmp	r0, #27
 8000614:	dc00      	bgt.n	8000618 <__aeabi_fadd+0xcc>
 8000616:	e090      	b.n	800073a <__aeabi_fadd+0x1ee>
 8000618:	2301      	movs	r3, #1
 800061a:	1afb      	subs	r3, r7, r3
 800061c:	015a      	lsls	r2, r3, #5
 800061e:	d551      	bpl.n	80006c4 <__aeabi_fadd+0x178>
 8000620:	019b      	lsls	r3, r3, #6
 8000622:	099e      	lsrs	r6, r3, #6
 8000624:	0030      	movs	r0, r6
 8000626:	f002 f9e9 	bl	80029fc <__clzsi2>
 800062a:	0033      	movs	r3, r6
 800062c:	3805      	subs	r0, #5
 800062e:	4083      	lsls	r3, r0
 8000630:	4285      	cmp	r5, r0
 8000632:	dc00      	bgt.n	8000636 <__aeabi_fadd+0xea>
 8000634:	e075      	b.n	8000722 <__aeabi_fadd+0x1d6>
 8000636:	4a94      	ldr	r2, [pc, #592]	; (8000888 <__aeabi_fadd+0x33c>)
 8000638:	1a2d      	subs	r5, r5, r0
 800063a:	4013      	ands	r3, r2
 800063c:	075a      	lsls	r2, r3, #29
 800063e:	d004      	beq.n	800064a <__aeabi_fadd+0xfe>
 8000640:	220f      	movs	r2, #15
 8000642:	401a      	ands	r2, r3
 8000644:	2a04      	cmp	r2, #4
 8000646:	d000      	beq.n	800064a <__aeabi_fadd+0xfe>
 8000648:	3304      	adds	r3, #4
 800064a:	015a      	lsls	r2, r3, #5
 800064c:	d53c      	bpl.n	80006c8 <__aeabi_fadd+0x17c>
 800064e:	1c68      	adds	r0, r5, #1
 8000650:	2dfe      	cmp	r5, #254	; 0xfe
 8000652:	d02b      	beq.n	80006ac <__aeabi_fadd+0x160>
 8000654:	019b      	lsls	r3, r3, #6
 8000656:	0a5e      	lsrs	r6, r3, #9
 8000658:	b2c0      	uxtb	r0, r0
 800065a:	05c0      	lsls	r0, r0, #23
 800065c:	4330      	orrs	r0, r6
 800065e:	07e4      	lsls	r4, r4, #31
 8000660:	4320      	orrs	r0, r4
 8000662:	bcc0      	pop	{r6, r7}
 8000664:	46b9      	mov	r9, r7
 8000666:	46b0      	mov	r8, r6
 8000668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800066a:	20fe      	movs	r0, #254	; 0xfe
 800066c:	1c6a      	adds	r2, r5, #1
 800066e:	4210      	tst	r0, r2
 8000670:	d172      	bne.n	8000758 <__aeabi_fadd+0x20c>
 8000672:	2d00      	cmp	r5, #0
 8000674:	d000      	beq.n	8000678 <__aeabi_fadd+0x12c>
 8000676:	e0ae      	b.n	80007d6 <__aeabi_fadd+0x28a>
 8000678:	2f00      	cmp	r7, #0
 800067a:	d100      	bne.n	800067e <__aeabi_fadd+0x132>
 800067c:	e0ec      	b.n	8000858 <__aeabi_fadd+0x30c>
 800067e:	4663      	mov	r3, ip
 8000680:	2000      	movs	r0, #0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0e9      	beq.n	800065a <__aeabi_fadd+0x10e>
 8000686:	1afb      	subs	r3, r7, r3
 8000688:	015a      	lsls	r2, r3, #5
 800068a:	d400      	bmi.n	800068e <__aeabi_fadd+0x142>
 800068c:	e0f3      	b.n	8000876 <__aeabi_fadd+0x32a>
 800068e:	4663      	mov	r3, ip
 8000690:	000c      	movs	r4, r1
 8000692:	1bdb      	subs	r3, r3, r7
 8000694:	e7d2      	b.n	800063c <__aeabi_fadd+0xf0>
 8000696:	4661      	mov	r1, ip
 8000698:	2900      	cmp	r1, #0
 800069a:	d05b      	beq.n	8000754 <__aeabi_fadd+0x208>
 800069c:	1e51      	subs	r1, r2, #1
 800069e:	2a01      	cmp	r2, #1
 80006a0:	d100      	bne.n	80006a4 <__aeabi_fadd+0x158>
 80006a2:	e0a7      	b.n	80007f4 <__aeabi_fadd+0x2a8>
 80006a4:	2aff      	cmp	r2, #255	; 0xff
 80006a6:	d022      	beq.n	80006ee <__aeabi_fadd+0x1a2>
 80006a8:	000a      	movs	r2, r1
 80006aa:	e799      	b.n	80005e0 <__aeabi_fadd+0x94>
 80006ac:	20ff      	movs	r0, #255	; 0xff
 80006ae:	2600      	movs	r6, #0
 80006b0:	e7d3      	b.n	800065a <__aeabi_fadd+0x10e>
 80006b2:	21fe      	movs	r1, #254	; 0xfe
 80006b4:	1c6a      	adds	r2, r5, #1
 80006b6:	4211      	tst	r1, r2
 80006b8:	d073      	beq.n	80007a2 <__aeabi_fadd+0x256>
 80006ba:	2aff      	cmp	r2, #255	; 0xff
 80006bc:	d0f6      	beq.n	80006ac <__aeabi_fadd+0x160>
 80006be:	0015      	movs	r5, r2
 80006c0:	4467      	add	r7, ip
 80006c2:	087b      	lsrs	r3, r7, #1
 80006c4:	075a      	lsls	r2, r3, #29
 80006c6:	d1bb      	bne.n	8000640 <__aeabi_fadd+0xf4>
 80006c8:	08db      	lsrs	r3, r3, #3
 80006ca:	2dff      	cmp	r5, #255	; 0xff
 80006cc:	d00f      	beq.n	80006ee <__aeabi_fadd+0x1a2>
 80006ce:	025b      	lsls	r3, r3, #9
 80006d0:	0a5e      	lsrs	r6, r3, #9
 80006d2:	b2e8      	uxtb	r0, r5
 80006d4:	e7c1      	b.n	800065a <__aeabi_fadd+0x10e>
 80006d6:	4662      	mov	r2, ip
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d008      	beq.n	80006ee <__aeabi_fadd+0x1a2>
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	03d2      	lsls	r2, r2, #15
 80006e0:	4213      	tst	r3, r2
 80006e2:	d004      	beq.n	80006ee <__aeabi_fadd+0x1a2>
 80006e4:	4640      	mov	r0, r8
 80006e6:	4210      	tst	r0, r2
 80006e8:	d101      	bne.n	80006ee <__aeabi_fadd+0x1a2>
 80006ea:	000c      	movs	r4, r1
 80006ec:	4643      	mov	r3, r8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0dc      	beq.n	80006ac <__aeabi_fadd+0x160>
 80006f2:	2680      	movs	r6, #128	; 0x80
 80006f4:	03f6      	lsls	r6, r6, #15
 80006f6:	431e      	orrs	r6, r3
 80006f8:	0276      	lsls	r6, r6, #9
 80006fa:	20ff      	movs	r0, #255	; 0xff
 80006fc:	0a76      	lsrs	r6, r6, #9
 80006fe:	e7ac      	b.n	800065a <__aeabi_fadd+0x10e>
 8000700:	2a00      	cmp	r2, #0
 8000702:	d0d6      	beq.n	80006b2 <__aeabi_fadd+0x166>
 8000704:	1b42      	subs	r2, r0, r5
 8000706:	2d00      	cmp	r5, #0
 8000708:	d05c      	beq.n	80007c4 <__aeabi_fadd+0x278>
 800070a:	28ff      	cmp	r0, #255	; 0xff
 800070c:	d0ee      	beq.n	80006ec <__aeabi_fadd+0x1a0>
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	04db      	lsls	r3, r3, #19
 8000712:	431f      	orrs	r7, r3
 8000714:	2a1b      	cmp	r2, #27
 8000716:	dc00      	bgt.n	800071a <__aeabi_fadd+0x1ce>
 8000718:	e082      	b.n	8000820 <__aeabi_fadd+0x2d4>
 800071a:	2301      	movs	r3, #1
 800071c:	464d      	mov	r5, r9
 800071e:	4463      	add	r3, ip
 8000720:	e763      	b.n	80005ea <__aeabi_fadd+0x9e>
 8000722:	2220      	movs	r2, #32
 8000724:	1b40      	subs	r0, r0, r5
 8000726:	3001      	adds	r0, #1
 8000728:	1a12      	subs	r2, r2, r0
 800072a:	0019      	movs	r1, r3
 800072c:	4093      	lsls	r3, r2
 800072e:	40c1      	lsrs	r1, r0
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	4193      	sbcs	r3, r2
 8000734:	2500      	movs	r5, #0
 8000736:	430b      	orrs	r3, r1
 8000738:	e780      	b.n	800063c <__aeabi_fadd+0xf0>
 800073a:	2320      	movs	r3, #32
 800073c:	4661      	mov	r1, ip
 800073e:	1a1b      	subs	r3, r3, r0
 8000740:	4099      	lsls	r1, r3
 8000742:	4662      	mov	r2, ip
 8000744:	000b      	movs	r3, r1
 8000746:	40c2      	lsrs	r2, r0
 8000748:	1e59      	subs	r1, r3, #1
 800074a:	418b      	sbcs	r3, r1
 800074c:	4313      	orrs	r3, r2
 800074e:	e764      	b.n	800061a <__aeabi_fadd+0xce>
 8000750:	000c      	movs	r4, r1
 8000752:	4643      	mov	r3, r8
 8000754:	0015      	movs	r5, r2
 8000756:	e7b8      	b.n	80006ca <__aeabi_fadd+0x17e>
 8000758:	4663      	mov	r3, ip
 800075a:	1afe      	subs	r6, r7, r3
 800075c:	0173      	lsls	r3, r6, #5
 800075e:	d445      	bmi.n	80007ec <__aeabi_fadd+0x2a0>
 8000760:	2e00      	cmp	r6, #0
 8000762:	d000      	beq.n	8000766 <__aeabi_fadd+0x21a>
 8000764:	e75e      	b.n	8000624 <__aeabi_fadd+0xd8>
 8000766:	2400      	movs	r4, #0
 8000768:	2000      	movs	r0, #0
 800076a:	2600      	movs	r6, #0
 800076c:	e775      	b.n	800065a <__aeabi_fadd+0x10e>
 800076e:	2bff      	cmp	r3, #255	; 0xff
 8000770:	d0bb      	beq.n	80006ea <__aeabi_fadd+0x19e>
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	04db      	lsls	r3, r3, #19
 8000776:	431f      	orrs	r7, r3
 8000778:	2a1b      	cmp	r2, #27
 800077a:	dd47      	ble.n	800080c <__aeabi_fadd+0x2c0>
 800077c:	2301      	movs	r3, #1
 800077e:	4662      	mov	r2, ip
 8000780:	000c      	movs	r4, r1
 8000782:	464d      	mov	r5, r9
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	e749      	b.n	800061c <__aeabi_fadd+0xd0>
 8000788:	0005      	movs	r5, r0
 800078a:	e79e      	b.n	80006ca <__aeabi_fadd+0x17e>
 800078c:	4661      	mov	r1, ip
 800078e:	2320      	movs	r3, #32
 8000790:	40d1      	lsrs	r1, r2
 8000792:	1a9b      	subs	r3, r3, r2
 8000794:	4662      	mov	r2, ip
 8000796:	409a      	lsls	r2, r3
 8000798:	0013      	movs	r3, r2
 800079a:	1e5a      	subs	r2, r3, #1
 800079c:	4193      	sbcs	r3, r2
 800079e:	430b      	orrs	r3, r1
 80007a0:	e722      	b.n	80005e8 <__aeabi_fadd+0x9c>
 80007a2:	2d00      	cmp	r5, #0
 80007a4:	d146      	bne.n	8000834 <__aeabi_fadd+0x2e8>
 80007a6:	2f00      	cmp	r7, #0
 80007a8:	d062      	beq.n	8000870 <__aeabi_fadd+0x324>
 80007aa:	4663      	mov	r3, ip
 80007ac:	2000      	movs	r0, #0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x268>
 80007b2:	e752      	b.n	800065a <__aeabi_fadd+0x10e>
 80007b4:	003b      	movs	r3, r7
 80007b6:	4463      	add	r3, ip
 80007b8:	015a      	lsls	r2, r3, #5
 80007ba:	d583      	bpl.n	80006c4 <__aeabi_fadd+0x178>
 80007bc:	4a32      	ldr	r2, [pc, #200]	; (8000888 <__aeabi_fadd+0x33c>)
 80007be:	3501      	adds	r5, #1
 80007c0:	4013      	ands	r3, r2
 80007c2:	e77f      	b.n	80006c4 <__aeabi_fadd+0x178>
 80007c4:	2f00      	cmp	r7, #0
 80007c6:	d0c4      	beq.n	8000752 <__aeabi_fadd+0x206>
 80007c8:	1e53      	subs	r3, r2, #1
 80007ca:	2a01      	cmp	r2, #1
 80007cc:	d012      	beq.n	80007f4 <__aeabi_fadd+0x2a8>
 80007ce:	2aff      	cmp	r2, #255	; 0xff
 80007d0:	d08c      	beq.n	80006ec <__aeabi_fadd+0x1a0>
 80007d2:	001a      	movs	r2, r3
 80007d4:	e79e      	b.n	8000714 <__aeabi_fadd+0x1c8>
 80007d6:	2f00      	cmp	r7, #0
 80007d8:	d000      	beq.n	80007dc <__aeabi_fadd+0x290>
 80007da:	e77c      	b.n	80006d6 <__aeabi_fadd+0x18a>
 80007dc:	4663      	mov	r3, ip
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d183      	bne.n	80006ea <__aeabi_fadd+0x19e>
 80007e2:	2680      	movs	r6, #128	; 0x80
 80007e4:	2400      	movs	r4, #0
 80007e6:	20ff      	movs	r0, #255	; 0xff
 80007e8:	03f6      	lsls	r6, r6, #15
 80007ea:	e736      	b.n	800065a <__aeabi_fadd+0x10e>
 80007ec:	4663      	mov	r3, ip
 80007ee:	000c      	movs	r4, r1
 80007f0:	1bde      	subs	r6, r3, r7
 80007f2:	e717      	b.n	8000624 <__aeabi_fadd+0xd8>
 80007f4:	003b      	movs	r3, r7
 80007f6:	4463      	add	r3, ip
 80007f8:	2501      	movs	r5, #1
 80007fa:	015a      	lsls	r2, r3, #5
 80007fc:	d400      	bmi.n	8000800 <__aeabi_fadd+0x2b4>
 80007fe:	e761      	b.n	80006c4 <__aeabi_fadd+0x178>
 8000800:	2502      	movs	r5, #2
 8000802:	e6f7      	b.n	80005f4 <__aeabi_fadd+0xa8>
 8000804:	4663      	mov	r3, ip
 8000806:	2501      	movs	r5, #1
 8000808:	1afb      	subs	r3, r7, r3
 800080a:	e707      	b.n	800061c <__aeabi_fadd+0xd0>
 800080c:	2320      	movs	r3, #32
 800080e:	1a9b      	subs	r3, r3, r2
 8000810:	0038      	movs	r0, r7
 8000812:	409f      	lsls	r7, r3
 8000814:	003b      	movs	r3, r7
 8000816:	40d0      	lsrs	r0, r2
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	4193      	sbcs	r3, r2
 800081c:	4303      	orrs	r3, r0
 800081e:	e7ae      	b.n	800077e <__aeabi_fadd+0x232>
 8000820:	2320      	movs	r3, #32
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	0039      	movs	r1, r7
 8000826:	409f      	lsls	r7, r3
 8000828:	003b      	movs	r3, r7
 800082a:	40d1      	lsrs	r1, r2
 800082c:	1e5a      	subs	r2, r3, #1
 800082e:	4193      	sbcs	r3, r2
 8000830:	430b      	orrs	r3, r1
 8000832:	e773      	b.n	800071c <__aeabi_fadd+0x1d0>
 8000834:	2f00      	cmp	r7, #0
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x2ee>
 8000838:	e758      	b.n	80006ec <__aeabi_fadd+0x1a0>
 800083a:	4662      	mov	r2, ip
 800083c:	2a00      	cmp	r2, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x2f6>
 8000840:	e755      	b.n	80006ee <__aeabi_fadd+0x1a2>
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	03d2      	lsls	r2, r2, #15
 8000846:	4213      	tst	r3, r2
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0x300>
 800084a:	e750      	b.n	80006ee <__aeabi_fadd+0x1a2>
 800084c:	4641      	mov	r1, r8
 800084e:	4211      	tst	r1, r2
 8000850:	d000      	beq.n	8000854 <__aeabi_fadd+0x308>
 8000852:	e74c      	b.n	80006ee <__aeabi_fadd+0x1a2>
 8000854:	4643      	mov	r3, r8
 8000856:	e74a      	b.n	80006ee <__aeabi_fadd+0x1a2>
 8000858:	4663      	mov	r3, ip
 800085a:	2b00      	cmp	r3, #0
 800085c:	d083      	beq.n	8000766 <__aeabi_fadd+0x21a>
 800085e:	000c      	movs	r4, r1
 8000860:	4646      	mov	r6, r8
 8000862:	2000      	movs	r0, #0
 8000864:	e6f9      	b.n	800065a <__aeabi_fadd+0x10e>
 8000866:	4663      	mov	r3, ip
 8000868:	000c      	movs	r4, r1
 800086a:	1bdb      	subs	r3, r3, r7
 800086c:	3501      	adds	r5, #1
 800086e:	e6d5      	b.n	800061c <__aeabi_fadd+0xd0>
 8000870:	4646      	mov	r6, r8
 8000872:	2000      	movs	r0, #0
 8000874:	e6f1      	b.n	800065a <__aeabi_fadd+0x10e>
 8000876:	2b00      	cmp	r3, #0
 8000878:	d000      	beq.n	800087c <__aeabi_fadd+0x330>
 800087a:	e723      	b.n	80006c4 <__aeabi_fadd+0x178>
 800087c:	2400      	movs	r4, #0
 800087e:	2600      	movs	r6, #0
 8000880:	e6eb      	b.n	800065a <__aeabi_fadd+0x10e>
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	7dffffff 	.word	0x7dffffff
 8000888:	fbffffff 	.word	0xfbffffff

0800088c <__aeabi_fdiv>:
 800088c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088e:	464f      	mov	r7, r9
 8000890:	4646      	mov	r6, r8
 8000892:	46d6      	mov	lr, sl
 8000894:	0245      	lsls	r5, r0, #9
 8000896:	b5c0      	push	{r6, r7, lr}
 8000898:	0047      	lsls	r7, r0, #1
 800089a:	1c0c      	adds	r4, r1, #0
 800089c:	0a6d      	lsrs	r5, r5, #9
 800089e:	0e3f      	lsrs	r7, r7, #24
 80008a0:	0fc6      	lsrs	r6, r0, #31
 80008a2:	2f00      	cmp	r7, #0
 80008a4:	d100      	bne.n	80008a8 <__aeabi_fdiv+0x1c>
 80008a6:	e06f      	b.n	8000988 <__aeabi_fdiv+0xfc>
 80008a8:	2fff      	cmp	r7, #255	; 0xff
 80008aa:	d100      	bne.n	80008ae <__aeabi_fdiv+0x22>
 80008ac:	e074      	b.n	8000998 <__aeabi_fdiv+0x10c>
 80008ae:	2300      	movs	r3, #0
 80008b0:	2280      	movs	r2, #128	; 0x80
 80008b2:	4699      	mov	r9, r3
 80008b4:	469a      	mov	sl, r3
 80008b6:	00ed      	lsls	r5, r5, #3
 80008b8:	04d2      	lsls	r2, r2, #19
 80008ba:	4315      	orrs	r5, r2
 80008bc:	3f7f      	subs	r7, #127	; 0x7f
 80008be:	0263      	lsls	r3, r4, #9
 80008c0:	0a5b      	lsrs	r3, r3, #9
 80008c2:	4698      	mov	r8, r3
 80008c4:	0063      	lsls	r3, r4, #1
 80008c6:	0e1b      	lsrs	r3, r3, #24
 80008c8:	0fe4      	lsrs	r4, r4, #31
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d04d      	beq.n	800096a <__aeabi_fdiv+0xde>
 80008ce:	2bff      	cmp	r3, #255	; 0xff
 80008d0:	d045      	beq.n	800095e <__aeabi_fdiv+0xd2>
 80008d2:	4642      	mov	r2, r8
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	00d2      	lsls	r2, r2, #3
 80008d8:	04c9      	lsls	r1, r1, #19
 80008da:	4311      	orrs	r1, r2
 80008dc:	4688      	mov	r8, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	3b7f      	subs	r3, #127	; 0x7f
 80008e2:	0031      	movs	r1, r6
 80008e4:	1aff      	subs	r7, r7, r3
 80008e6:	464b      	mov	r3, r9
 80008e8:	4061      	eors	r1, r4
 80008ea:	b2c9      	uxtb	r1, r1
 80008ec:	2b0f      	cmp	r3, #15
 80008ee:	d900      	bls.n	80008f2 <__aeabi_fdiv+0x66>
 80008f0:	e0b8      	b.n	8000a64 <__aeabi_fdiv+0x1d8>
 80008f2:	4870      	ldr	r0, [pc, #448]	; (8000ab4 <__aeabi_fdiv+0x228>)
 80008f4:	009b      	lsls	r3, r3, #2
 80008f6:	58c3      	ldr	r3, [r0, r3]
 80008f8:	469f      	mov	pc, r3
 80008fa:	2300      	movs	r3, #0
 80008fc:	4698      	mov	r8, r3
 80008fe:	0026      	movs	r6, r4
 8000900:	4645      	mov	r5, r8
 8000902:	4692      	mov	sl, r2
 8000904:	4653      	mov	r3, sl
 8000906:	2b02      	cmp	r3, #2
 8000908:	d100      	bne.n	800090c <__aeabi_fdiv+0x80>
 800090a:	e08d      	b.n	8000a28 <__aeabi_fdiv+0x19c>
 800090c:	2b03      	cmp	r3, #3
 800090e:	d100      	bne.n	8000912 <__aeabi_fdiv+0x86>
 8000910:	e0a1      	b.n	8000a56 <__aeabi_fdiv+0x1ca>
 8000912:	2b01      	cmp	r3, #1
 8000914:	d018      	beq.n	8000948 <__aeabi_fdiv+0xbc>
 8000916:	003b      	movs	r3, r7
 8000918:	337f      	adds	r3, #127	; 0x7f
 800091a:	2b00      	cmp	r3, #0
 800091c:	dd6d      	ble.n	80009fa <__aeabi_fdiv+0x16e>
 800091e:	076a      	lsls	r2, r5, #29
 8000920:	d004      	beq.n	800092c <__aeabi_fdiv+0xa0>
 8000922:	220f      	movs	r2, #15
 8000924:	402a      	ands	r2, r5
 8000926:	2a04      	cmp	r2, #4
 8000928:	d000      	beq.n	800092c <__aeabi_fdiv+0xa0>
 800092a:	3504      	adds	r5, #4
 800092c:	012a      	lsls	r2, r5, #4
 800092e:	d503      	bpl.n	8000938 <__aeabi_fdiv+0xac>
 8000930:	4b61      	ldr	r3, [pc, #388]	; (8000ab8 <__aeabi_fdiv+0x22c>)
 8000932:	401d      	ands	r5, r3
 8000934:	003b      	movs	r3, r7
 8000936:	3380      	adds	r3, #128	; 0x80
 8000938:	2bfe      	cmp	r3, #254	; 0xfe
 800093a:	dd00      	ble.n	800093e <__aeabi_fdiv+0xb2>
 800093c:	e074      	b.n	8000a28 <__aeabi_fdiv+0x19c>
 800093e:	01aa      	lsls	r2, r5, #6
 8000940:	0a52      	lsrs	r2, r2, #9
 8000942:	b2d8      	uxtb	r0, r3
 8000944:	e002      	b.n	800094c <__aeabi_fdiv+0xc0>
 8000946:	000e      	movs	r6, r1
 8000948:	2000      	movs	r0, #0
 800094a:	2200      	movs	r2, #0
 800094c:	05c0      	lsls	r0, r0, #23
 800094e:	07f6      	lsls	r6, r6, #31
 8000950:	4310      	orrs	r0, r2
 8000952:	4330      	orrs	r0, r6
 8000954:	bce0      	pop	{r5, r6, r7}
 8000956:	46ba      	mov	sl, r7
 8000958:	46b1      	mov	r9, r6
 800095a:	46a8      	mov	r8, r5
 800095c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095e:	4643      	mov	r3, r8
 8000960:	2b00      	cmp	r3, #0
 8000962:	d13f      	bne.n	80009e4 <__aeabi_fdiv+0x158>
 8000964:	2202      	movs	r2, #2
 8000966:	3fff      	subs	r7, #255	; 0xff
 8000968:	e003      	b.n	8000972 <__aeabi_fdiv+0xe6>
 800096a:	4643      	mov	r3, r8
 800096c:	2b00      	cmp	r3, #0
 800096e:	d12d      	bne.n	80009cc <__aeabi_fdiv+0x140>
 8000970:	2201      	movs	r2, #1
 8000972:	0031      	movs	r1, r6
 8000974:	464b      	mov	r3, r9
 8000976:	4061      	eors	r1, r4
 8000978:	b2c9      	uxtb	r1, r1
 800097a:	4313      	orrs	r3, r2
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d838      	bhi.n	80009f2 <__aeabi_fdiv+0x166>
 8000980:	484e      	ldr	r0, [pc, #312]	; (8000abc <__aeabi_fdiv+0x230>)
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	58c3      	ldr	r3, [r0, r3]
 8000986:	469f      	mov	pc, r3
 8000988:	2d00      	cmp	r5, #0
 800098a:	d113      	bne.n	80009b4 <__aeabi_fdiv+0x128>
 800098c:	2304      	movs	r3, #4
 800098e:	4699      	mov	r9, r3
 8000990:	3b03      	subs	r3, #3
 8000992:	2700      	movs	r7, #0
 8000994:	469a      	mov	sl, r3
 8000996:	e792      	b.n	80008be <__aeabi_fdiv+0x32>
 8000998:	2d00      	cmp	r5, #0
 800099a:	d105      	bne.n	80009a8 <__aeabi_fdiv+0x11c>
 800099c:	2308      	movs	r3, #8
 800099e:	4699      	mov	r9, r3
 80009a0:	3b06      	subs	r3, #6
 80009a2:	27ff      	movs	r7, #255	; 0xff
 80009a4:	469a      	mov	sl, r3
 80009a6:	e78a      	b.n	80008be <__aeabi_fdiv+0x32>
 80009a8:	230c      	movs	r3, #12
 80009aa:	4699      	mov	r9, r3
 80009ac:	3b09      	subs	r3, #9
 80009ae:	27ff      	movs	r7, #255	; 0xff
 80009b0:	469a      	mov	sl, r3
 80009b2:	e784      	b.n	80008be <__aeabi_fdiv+0x32>
 80009b4:	0028      	movs	r0, r5
 80009b6:	f002 f821 	bl	80029fc <__clzsi2>
 80009ba:	2776      	movs	r7, #118	; 0x76
 80009bc:	1f43      	subs	r3, r0, #5
 80009be:	409d      	lsls	r5, r3
 80009c0:	2300      	movs	r3, #0
 80009c2:	427f      	negs	r7, r7
 80009c4:	4699      	mov	r9, r3
 80009c6:	469a      	mov	sl, r3
 80009c8:	1a3f      	subs	r7, r7, r0
 80009ca:	e778      	b.n	80008be <__aeabi_fdiv+0x32>
 80009cc:	4640      	mov	r0, r8
 80009ce:	f002 f815 	bl	80029fc <__clzsi2>
 80009d2:	4642      	mov	r2, r8
 80009d4:	1f43      	subs	r3, r0, #5
 80009d6:	409a      	lsls	r2, r3
 80009d8:	2376      	movs	r3, #118	; 0x76
 80009da:	425b      	negs	r3, r3
 80009dc:	4690      	mov	r8, r2
 80009de:	1a1b      	subs	r3, r3, r0
 80009e0:	2200      	movs	r2, #0
 80009e2:	e77e      	b.n	80008e2 <__aeabi_fdiv+0x56>
 80009e4:	2303      	movs	r3, #3
 80009e6:	464a      	mov	r2, r9
 80009e8:	431a      	orrs	r2, r3
 80009ea:	4691      	mov	r9, r2
 80009ec:	33fc      	adds	r3, #252	; 0xfc
 80009ee:	2203      	movs	r2, #3
 80009f0:	e777      	b.n	80008e2 <__aeabi_fdiv+0x56>
 80009f2:	000e      	movs	r6, r1
 80009f4:	20ff      	movs	r0, #255	; 0xff
 80009f6:	2200      	movs	r2, #0
 80009f8:	e7a8      	b.n	800094c <__aeabi_fdiv+0xc0>
 80009fa:	2201      	movs	r2, #1
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	2b1b      	cmp	r3, #27
 8000a00:	dca2      	bgt.n	8000948 <__aeabi_fdiv+0xbc>
 8000a02:	379e      	adds	r7, #158	; 0x9e
 8000a04:	002a      	movs	r2, r5
 8000a06:	40bd      	lsls	r5, r7
 8000a08:	40da      	lsrs	r2, r3
 8000a0a:	1e6b      	subs	r3, r5, #1
 8000a0c:	419d      	sbcs	r5, r3
 8000a0e:	4315      	orrs	r5, r2
 8000a10:	076a      	lsls	r2, r5, #29
 8000a12:	d004      	beq.n	8000a1e <__aeabi_fdiv+0x192>
 8000a14:	220f      	movs	r2, #15
 8000a16:	402a      	ands	r2, r5
 8000a18:	2a04      	cmp	r2, #4
 8000a1a:	d000      	beq.n	8000a1e <__aeabi_fdiv+0x192>
 8000a1c:	3504      	adds	r5, #4
 8000a1e:	016a      	lsls	r2, r5, #5
 8000a20:	d544      	bpl.n	8000aac <__aeabi_fdiv+0x220>
 8000a22:	2001      	movs	r0, #1
 8000a24:	2200      	movs	r2, #0
 8000a26:	e791      	b.n	800094c <__aeabi_fdiv+0xc0>
 8000a28:	20ff      	movs	r0, #255	; 0xff
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	e78e      	b.n	800094c <__aeabi_fdiv+0xc0>
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	2600      	movs	r6, #0
 8000a32:	20ff      	movs	r0, #255	; 0xff
 8000a34:	03d2      	lsls	r2, r2, #15
 8000a36:	e789      	b.n	800094c <__aeabi_fdiv+0xc0>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	4698      	mov	r8, r3
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	03d2      	lsls	r2, r2, #15
 8000a40:	4215      	tst	r5, r2
 8000a42:	d008      	beq.n	8000a56 <__aeabi_fdiv+0x1ca>
 8000a44:	4643      	mov	r3, r8
 8000a46:	4213      	tst	r3, r2
 8000a48:	d105      	bne.n	8000a56 <__aeabi_fdiv+0x1ca>
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	0252      	lsls	r2, r2, #9
 8000a4e:	0026      	movs	r6, r4
 8000a50:	20ff      	movs	r0, #255	; 0xff
 8000a52:	0a52      	lsrs	r2, r2, #9
 8000a54:	e77a      	b.n	800094c <__aeabi_fdiv+0xc0>
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	03d2      	lsls	r2, r2, #15
 8000a5a:	432a      	orrs	r2, r5
 8000a5c:	0252      	lsls	r2, r2, #9
 8000a5e:	20ff      	movs	r0, #255	; 0xff
 8000a60:	0a52      	lsrs	r2, r2, #9
 8000a62:	e773      	b.n	800094c <__aeabi_fdiv+0xc0>
 8000a64:	4642      	mov	r2, r8
 8000a66:	016b      	lsls	r3, r5, #5
 8000a68:	0155      	lsls	r5, r2, #5
 8000a6a:	42ab      	cmp	r3, r5
 8000a6c:	d21a      	bcs.n	8000aa4 <__aeabi_fdiv+0x218>
 8000a6e:	201b      	movs	r0, #27
 8000a70:	2200      	movs	r2, #0
 8000a72:	3f01      	subs	r7, #1
 8000a74:	2601      	movs	r6, #1
 8000a76:	001c      	movs	r4, r3
 8000a78:	0052      	lsls	r2, r2, #1
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	2c00      	cmp	r4, #0
 8000a7e:	db01      	blt.n	8000a84 <__aeabi_fdiv+0x1f8>
 8000a80:	429d      	cmp	r5, r3
 8000a82:	d801      	bhi.n	8000a88 <__aeabi_fdiv+0x1fc>
 8000a84:	1b5b      	subs	r3, r3, r5
 8000a86:	4332      	orrs	r2, r6
 8000a88:	3801      	subs	r0, #1
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d1f3      	bne.n	8000a76 <__aeabi_fdiv+0x1ea>
 8000a8e:	1e58      	subs	r0, r3, #1
 8000a90:	4183      	sbcs	r3, r0
 8000a92:	4313      	orrs	r3, r2
 8000a94:	001d      	movs	r5, r3
 8000a96:	003b      	movs	r3, r7
 8000a98:	337f      	adds	r3, #127	; 0x7f
 8000a9a:	000e      	movs	r6, r1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	dd00      	ble.n	8000aa2 <__aeabi_fdiv+0x216>
 8000aa0:	e73d      	b.n	800091e <__aeabi_fdiv+0x92>
 8000aa2:	e7aa      	b.n	80009fa <__aeabi_fdiv+0x16e>
 8000aa4:	201a      	movs	r0, #26
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	1b5b      	subs	r3, r3, r5
 8000aaa:	e7e3      	b.n	8000a74 <__aeabi_fdiv+0x1e8>
 8000aac:	01aa      	lsls	r2, r5, #6
 8000aae:	2000      	movs	r0, #0
 8000ab0:	0a52      	lsrs	r2, r2, #9
 8000ab2:	e74b      	b.n	800094c <__aeabi_fdiv+0xc0>
 8000ab4:	08008a90 	.word	0x08008a90
 8000ab8:	f7ffffff 	.word	0xf7ffffff
 8000abc:	08008ad0 	.word	0x08008ad0

08000ac0 <__eqsf2>:
 8000ac0:	b570      	push	{r4, r5, r6, lr}
 8000ac2:	0042      	lsls	r2, r0, #1
 8000ac4:	0245      	lsls	r5, r0, #9
 8000ac6:	024e      	lsls	r6, r1, #9
 8000ac8:	004c      	lsls	r4, r1, #1
 8000aca:	0fc3      	lsrs	r3, r0, #31
 8000acc:	0a6d      	lsrs	r5, r5, #9
 8000ace:	2001      	movs	r0, #1
 8000ad0:	0e12      	lsrs	r2, r2, #24
 8000ad2:	0a76      	lsrs	r6, r6, #9
 8000ad4:	0e24      	lsrs	r4, r4, #24
 8000ad6:	0fc9      	lsrs	r1, r1, #31
 8000ad8:	2aff      	cmp	r2, #255	; 0xff
 8000ada:	d006      	beq.n	8000aea <__eqsf2+0x2a>
 8000adc:	2cff      	cmp	r4, #255	; 0xff
 8000ade:	d003      	beq.n	8000ae8 <__eqsf2+0x28>
 8000ae0:	42a2      	cmp	r2, r4
 8000ae2:	d101      	bne.n	8000ae8 <__eqsf2+0x28>
 8000ae4:	42b5      	cmp	r5, r6
 8000ae6:	d006      	beq.n	8000af6 <__eqsf2+0x36>
 8000ae8:	bd70      	pop	{r4, r5, r6, pc}
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	d1fc      	bne.n	8000ae8 <__eqsf2+0x28>
 8000aee:	2cff      	cmp	r4, #255	; 0xff
 8000af0:	d1fa      	bne.n	8000ae8 <__eqsf2+0x28>
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d1f8      	bne.n	8000ae8 <__eqsf2+0x28>
 8000af6:	428b      	cmp	r3, r1
 8000af8:	d006      	beq.n	8000b08 <__eqsf2+0x48>
 8000afa:	2001      	movs	r0, #1
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d1f3      	bne.n	8000ae8 <__eqsf2+0x28>
 8000b00:	0028      	movs	r0, r5
 8000b02:	1e43      	subs	r3, r0, #1
 8000b04:	4198      	sbcs	r0, r3
 8000b06:	e7ef      	b.n	8000ae8 <__eqsf2+0x28>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	e7ed      	b.n	8000ae8 <__eqsf2+0x28>

08000b0c <__gesf2>:
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	0042      	lsls	r2, r0, #1
 8000b10:	0245      	lsls	r5, r0, #9
 8000b12:	024e      	lsls	r6, r1, #9
 8000b14:	004c      	lsls	r4, r1, #1
 8000b16:	0fc3      	lsrs	r3, r0, #31
 8000b18:	0a6d      	lsrs	r5, r5, #9
 8000b1a:	0e12      	lsrs	r2, r2, #24
 8000b1c:	0a76      	lsrs	r6, r6, #9
 8000b1e:	0e24      	lsrs	r4, r4, #24
 8000b20:	0fc8      	lsrs	r0, r1, #31
 8000b22:	2aff      	cmp	r2, #255	; 0xff
 8000b24:	d01b      	beq.n	8000b5e <__gesf2+0x52>
 8000b26:	2cff      	cmp	r4, #255	; 0xff
 8000b28:	d00e      	beq.n	8000b48 <__gesf2+0x3c>
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d11b      	bne.n	8000b66 <__gesf2+0x5a>
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d101      	bne.n	8000b36 <__gesf2+0x2a>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d01c      	beq.n	8000b70 <__gesf2+0x64>
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	d00c      	beq.n	8000b54 <__gesf2+0x48>
 8000b3a:	4283      	cmp	r3, r0
 8000b3c:	d01c      	beq.n	8000b78 <__gesf2+0x6c>
 8000b3e:	2102      	movs	r1, #2
 8000b40:	1e58      	subs	r0, r3, #1
 8000b42:	4008      	ands	r0, r1
 8000b44:	3801      	subs	r0, #1
 8000b46:	bd70      	pop	{r4, r5, r6, pc}
 8000b48:	2e00      	cmp	r6, #0
 8000b4a:	d122      	bne.n	8000b92 <__gesf2+0x86>
 8000b4c:	2a00      	cmp	r2, #0
 8000b4e:	d1f4      	bne.n	8000b3a <__gesf2+0x2e>
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d1f2      	bne.n	8000b3a <__gesf2+0x2e>
 8000b54:	2800      	cmp	r0, #0
 8000b56:	d1f6      	bne.n	8000b46 <__gesf2+0x3a>
 8000b58:	2001      	movs	r0, #1
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	e7f3      	b.n	8000b46 <__gesf2+0x3a>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d117      	bne.n	8000b92 <__gesf2+0x86>
 8000b62:	2cff      	cmp	r4, #255	; 0xff
 8000b64:	d0f0      	beq.n	8000b48 <__gesf2+0x3c>
 8000b66:	2c00      	cmp	r4, #0
 8000b68:	d1e7      	bne.n	8000b3a <__gesf2+0x2e>
 8000b6a:	2e00      	cmp	r6, #0
 8000b6c:	d1e5      	bne.n	8000b3a <__gesf2+0x2e>
 8000b6e:	e7e6      	b.n	8000b3e <__gesf2+0x32>
 8000b70:	2000      	movs	r0, #0
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	d0e7      	beq.n	8000b46 <__gesf2+0x3a>
 8000b76:	e7e2      	b.n	8000b3e <__gesf2+0x32>
 8000b78:	42a2      	cmp	r2, r4
 8000b7a:	dc05      	bgt.n	8000b88 <__gesf2+0x7c>
 8000b7c:	dbea      	blt.n	8000b54 <__gesf2+0x48>
 8000b7e:	42b5      	cmp	r5, r6
 8000b80:	d802      	bhi.n	8000b88 <__gesf2+0x7c>
 8000b82:	d3e7      	bcc.n	8000b54 <__gesf2+0x48>
 8000b84:	2000      	movs	r0, #0
 8000b86:	e7de      	b.n	8000b46 <__gesf2+0x3a>
 8000b88:	4243      	negs	r3, r0
 8000b8a:	4158      	adcs	r0, r3
 8000b8c:	0040      	lsls	r0, r0, #1
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7d9      	b.n	8000b46 <__gesf2+0x3a>
 8000b92:	2002      	movs	r0, #2
 8000b94:	4240      	negs	r0, r0
 8000b96:	e7d6      	b.n	8000b46 <__gesf2+0x3a>

08000b98 <__lesf2>:
 8000b98:	b570      	push	{r4, r5, r6, lr}
 8000b9a:	0042      	lsls	r2, r0, #1
 8000b9c:	0245      	lsls	r5, r0, #9
 8000b9e:	024e      	lsls	r6, r1, #9
 8000ba0:	004c      	lsls	r4, r1, #1
 8000ba2:	0fc3      	lsrs	r3, r0, #31
 8000ba4:	0a6d      	lsrs	r5, r5, #9
 8000ba6:	0e12      	lsrs	r2, r2, #24
 8000ba8:	0a76      	lsrs	r6, r6, #9
 8000baa:	0e24      	lsrs	r4, r4, #24
 8000bac:	0fc8      	lsrs	r0, r1, #31
 8000bae:	2aff      	cmp	r2, #255	; 0xff
 8000bb0:	d00b      	beq.n	8000bca <__lesf2+0x32>
 8000bb2:	2cff      	cmp	r4, #255	; 0xff
 8000bb4:	d00d      	beq.n	8000bd2 <__lesf2+0x3a>
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	d11f      	bne.n	8000bfa <__lesf2+0x62>
 8000bba:	2c00      	cmp	r4, #0
 8000bbc:	d116      	bne.n	8000bec <__lesf2+0x54>
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d114      	bne.n	8000bec <__lesf2+0x54>
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	2d00      	cmp	r5, #0
 8000bc6:	d010      	beq.n	8000bea <__lesf2+0x52>
 8000bc8:	e009      	b.n	8000bde <__lesf2+0x46>
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d10c      	bne.n	8000be8 <__lesf2+0x50>
 8000bce:	2cff      	cmp	r4, #255	; 0xff
 8000bd0:	d113      	bne.n	8000bfa <__lesf2+0x62>
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d108      	bne.n	8000be8 <__lesf2+0x50>
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d008      	beq.n	8000bec <__lesf2+0x54>
 8000bda:	4283      	cmp	r3, r0
 8000bdc:	d012      	beq.n	8000c04 <__lesf2+0x6c>
 8000bde:	2102      	movs	r1, #2
 8000be0:	1e58      	subs	r0, r3, #1
 8000be2:	4008      	ands	r0, r1
 8000be4:	3801      	subs	r0, #1
 8000be6:	e000      	b.n	8000bea <__lesf2+0x52>
 8000be8:	2002      	movs	r0, #2
 8000bea:	bd70      	pop	{r4, r5, r6, pc}
 8000bec:	2d00      	cmp	r5, #0
 8000bee:	d1f4      	bne.n	8000bda <__lesf2+0x42>
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	d1fa      	bne.n	8000bea <__lesf2+0x52>
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	e7f7      	b.n	8000bea <__lesf2+0x52>
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d1ed      	bne.n	8000bda <__lesf2+0x42>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d1eb      	bne.n	8000bda <__lesf2+0x42>
 8000c02:	e7ec      	b.n	8000bde <__lesf2+0x46>
 8000c04:	42a2      	cmp	r2, r4
 8000c06:	dc05      	bgt.n	8000c14 <__lesf2+0x7c>
 8000c08:	dbf2      	blt.n	8000bf0 <__lesf2+0x58>
 8000c0a:	42b5      	cmp	r5, r6
 8000c0c:	d802      	bhi.n	8000c14 <__lesf2+0x7c>
 8000c0e:	d3ef      	bcc.n	8000bf0 <__lesf2+0x58>
 8000c10:	2000      	movs	r0, #0
 8000c12:	e7ea      	b.n	8000bea <__lesf2+0x52>
 8000c14:	4243      	negs	r3, r0
 8000c16:	4158      	adcs	r0, r3
 8000c18:	0040      	lsls	r0, r0, #1
 8000c1a:	3801      	subs	r0, #1
 8000c1c:	e7e5      	b.n	8000bea <__lesf2+0x52>
 8000c1e:	46c0      	nop			; (mov r8, r8)

08000c20 <__aeabi_fmul>:
 8000c20:	0243      	lsls	r3, r0, #9
 8000c22:	0a5b      	lsrs	r3, r3, #9
 8000c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c26:	464f      	mov	r7, r9
 8000c28:	4646      	mov	r6, r8
 8000c2a:	4699      	mov	r9, r3
 8000c2c:	46d6      	mov	lr, sl
 8000c2e:	0fc3      	lsrs	r3, r0, #31
 8000c30:	0045      	lsls	r5, r0, #1
 8000c32:	4698      	mov	r8, r3
 8000c34:	b5c0      	push	{r6, r7, lr}
 8000c36:	464b      	mov	r3, r9
 8000c38:	1c0f      	adds	r7, r1, #0
 8000c3a:	0e2d      	lsrs	r5, r5, #24
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fmul+0x20>
 8000c3e:	e0cb      	b.n	8000dd8 <__aeabi_fmul+0x1b8>
 8000c40:	2dff      	cmp	r5, #255	; 0xff
 8000c42:	d100      	bne.n	8000c46 <__aeabi_fmul+0x26>
 8000c44:	e0cf      	b.n	8000de6 <__aeabi_fmul+0x1c6>
 8000c46:	2280      	movs	r2, #128	; 0x80
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	04d2      	lsls	r2, r2, #19
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	2300      	movs	r3, #0
 8000c50:	4691      	mov	r9, r2
 8000c52:	2600      	movs	r6, #0
 8000c54:	469a      	mov	sl, r3
 8000c56:	3d7f      	subs	r5, #127	; 0x7f
 8000c58:	027c      	lsls	r4, r7, #9
 8000c5a:	007b      	lsls	r3, r7, #1
 8000c5c:	0a64      	lsrs	r4, r4, #9
 8000c5e:	0e1b      	lsrs	r3, r3, #24
 8000c60:	0fff      	lsrs	r7, r7, #31
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fmul+0x48>
 8000c66:	e0a9      	b.n	8000dbc <__aeabi_fmul+0x19c>
 8000c68:	2bff      	cmp	r3, #255	; 0xff
 8000c6a:	d011      	beq.n	8000c90 <__aeabi_fmul+0x70>
 8000c6c:	2280      	movs	r2, #128	; 0x80
 8000c6e:	00e4      	lsls	r4, r4, #3
 8000c70:	04d2      	lsls	r2, r2, #19
 8000c72:	4314      	orrs	r4, r2
 8000c74:	4642      	mov	r2, r8
 8000c76:	3b7f      	subs	r3, #127	; 0x7f
 8000c78:	195b      	adds	r3, r3, r5
 8000c7a:	407a      	eors	r2, r7
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	1c5d      	adds	r5, r3, #1
 8000c82:	2e0a      	cmp	r6, #10
 8000c84:	dd13      	ble.n	8000cae <__aeabi_fmul+0x8e>
 8000c86:	003a      	movs	r2, r7
 8000c88:	2e0b      	cmp	r6, #11
 8000c8a:	d047      	beq.n	8000d1c <__aeabi_fmul+0xfc>
 8000c8c:	4647      	mov	r7, r8
 8000c8e:	e03f      	b.n	8000d10 <__aeabi_fmul+0xf0>
 8000c90:	002b      	movs	r3, r5
 8000c92:	33ff      	adds	r3, #255	; 0xff
 8000c94:	2c00      	cmp	r4, #0
 8000c96:	d11e      	bne.n	8000cd6 <__aeabi_fmul+0xb6>
 8000c98:	2202      	movs	r2, #2
 8000c9a:	4316      	orrs	r6, r2
 8000c9c:	4642      	mov	r2, r8
 8000c9e:	3501      	adds	r5, #1
 8000ca0:	407a      	eors	r2, r7
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	35ff      	adds	r5, #255	; 0xff
 8000ca6:	2e0a      	cmp	r6, #10
 8000ca8:	dd00      	ble.n	8000cac <__aeabi_fmul+0x8c>
 8000caa:	e0e4      	b.n	8000e76 <__aeabi_fmul+0x256>
 8000cac:	2002      	movs	r0, #2
 8000cae:	2e02      	cmp	r6, #2
 8000cb0:	dc1c      	bgt.n	8000cec <__aeabi_fmul+0xcc>
 8000cb2:	3e01      	subs	r6, #1
 8000cb4:	2e01      	cmp	r6, #1
 8000cb6:	d842      	bhi.n	8000d3e <__aeabi_fmul+0x11e>
 8000cb8:	2802      	cmp	r0, #2
 8000cba:	d03d      	beq.n	8000d38 <__aeabi_fmul+0x118>
 8000cbc:	2801      	cmp	r0, #1
 8000cbe:	d166      	bne.n	8000d8e <__aeabi_fmul+0x16e>
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	05c0      	lsls	r0, r0, #23
 8000cc6:	4308      	orrs	r0, r1
 8000cc8:	07d2      	lsls	r2, r2, #31
 8000cca:	4310      	orrs	r0, r2
 8000ccc:	bce0      	pop	{r5, r6, r7}
 8000cce:	46ba      	mov	sl, r7
 8000cd0:	46b1      	mov	r9, r6
 8000cd2:	46a8      	mov	r8, r5
 8000cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	4316      	orrs	r6, r2
 8000cda:	4642      	mov	r2, r8
 8000cdc:	3501      	adds	r5, #1
 8000cde:	407a      	eors	r2, r7
 8000ce0:	b2d2      	uxtb	r2, r2
 8000ce2:	35ff      	adds	r5, #255	; 0xff
 8000ce4:	2e0a      	cmp	r6, #10
 8000ce6:	dd00      	ble.n	8000cea <__aeabi_fmul+0xca>
 8000ce8:	e0e4      	b.n	8000eb4 <__aeabi_fmul+0x294>
 8000cea:	2003      	movs	r0, #3
 8000cec:	2101      	movs	r1, #1
 8000cee:	40b1      	lsls	r1, r6
 8000cf0:	26a6      	movs	r6, #166	; 0xa6
 8000cf2:	00f6      	lsls	r6, r6, #3
 8000cf4:	4231      	tst	r1, r6
 8000cf6:	d10a      	bne.n	8000d0e <__aeabi_fmul+0xee>
 8000cf8:	2690      	movs	r6, #144	; 0x90
 8000cfa:	00b6      	lsls	r6, r6, #2
 8000cfc:	4231      	tst	r1, r6
 8000cfe:	d116      	bne.n	8000d2e <__aeabi_fmul+0x10e>
 8000d00:	3eb9      	subs	r6, #185	; 0xb9
 8000d02:	3eff      	subs	r6, #255	; 0xff
 8000d04:	420e      	tst	r6, r1
 8000d06:	d01a      	beq.n	8000d3e <__aeabi_fmul+0x11e>
 8000d08:	46a1      	mov	r9, r4
 8000d0a:	4682      	mov	sl, r0
 8000d0c:	e000      	b.n	8000d10 <__aeabi_fmul+0xf0>
 8000d0e:	0017      	movs	r7, r2
 8000d10:	4653      	mov	r3, sl
 8000d12:	003a      	movs	r2, r7
 8000d14:	2b02      	cmp	r3, #2
 8000d16:	d00f      	beq.n	8000d38 <__aeabi_fmul+0x118>
 8000d18:	464c      	mov	r4, r9
 8000d1a:	4650      	mov	r0, sl
 8000d1c:	2803      	cmp	r0, #3
 8000d1e:	d1cd      	bne.n	8000cbc <__aeabi_fmul+0x9c>
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	03c9      	lsls	r1, r1, #15
 8000d24:	4321      	orrs	r1, r4
 8000d26:	0249      	lsls	r1, r1, #9
 8000d28:	20ff      	movs	r0, #255	; 0xff
 8000d2a:	0a49      	lsrs	r1, r1, #9
 8000d2c:	e7ca      	b.n	8000cc4 <__aeabi_fmul+0xa4>
 8000d2e:	2180      	movs	r1, #128	; 0x80
 8000d30:	2200      	movs	r2, #0
 8000d32:	20ff      	movs	r0, #255	; 0xff
 8000d34:	03c9      	lsls	r1, r1, #15
 8000d36:	e7c5      	b.n	8000cc4 <__aeabi_fmul+0xa4>
 8000d38:	20ff      	movs	r0, #255	; 0xff
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	e7c2      	b.n	8000cc4 <__aeabi_fmul+0xa4>
 8000d3e:	0c20      	lsrs	r0, r4, #16
 8000d40:	4649      	mov	r1, r9
 8000d42:	0424      	lsls	r4, r4, #16
 8000d44:	0c24      	lsrs	r4, r4, #16
 8000d46:	0027      	movs	r7, r4
 8000d48:	0c0e      	lsrs	r6, r1, #16
 8000d4a:	0409      	lsls	r1, r1, #16
 8000d4c:	0c09      	lsrs	r1, r1, #16
 8000d4e:	4374      	muls	r4, r6
 8000d50:	434f      	muls	r7, r1
 8000d52:	4346      	muls	r6, r0
 8000d54:	4348      	muls	r0, r1
 8000d56:	0c39      	lsrs	r1, r7, #16
 8000d58:	1900      	adds	r0, r0, r4
 8000d5a:	1809      	adds	r1, r1, r0
 8000d5c:	428c      	cmp	r4, r1
 8000d5e:	d903      	bls.n	8000d68 <__aeabi_fmul+0x148>
 8000d60:	2080      	movs	r0, #128	; 0x80
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	4684      	mov	ip, r0
 8000d66:	4466      	add	r6, ip
 8000d68:	043f      	lsls	r7, r7, #16
 8000d6a:	0408      	lsls	r0, r1, #16
 8000d6c:	0c3f      	lsrs	r7, r7, #16
 8000d6e:	19c0      	adds	r0, r0, r7
 8000d70:	0184      	lsls	r4, r0, #6
 8000d72:	1e67      	subs	r7, r4, #1
 8000d74:	41bc      	sbcs	r4, r7
 8000d76:	0c09      	lsrs	r1, r1, #16
 8000d78:	0e80      	lsrs	r0, r0, #26
 8000d7a:	1989      	adds	r1, r1, r6
 8000d7c:	4304      	orrs	r4, r0
 8000d7e:	0189      	lsls	r1, r1, #6
 8000d80:	430c      	orrs	r4, r1
 8000d82:	0109      	lsls	r1, r1, #4
 8000d84:	d571      	bpl.n	8000e6a <__aeabi_fmul+0x24a>
 8000d86:	2301      	movs	r3, #1
 8000d88:	0861      	lsrs	r1, r4, #1
 8000d8a:	401c      	ands	r4, r3
 8000d8c:	430c      	orrs	r4, r1
 8000d8e:	002b      	movs	r3, r5
 8000d90:	337f      	adds	r3, #127	; 0x7f
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	dd51      	ble.n	8000e3a <__aeabi_fmul+0x21a>
 8000d96:	0761      	lsls	r1, r4, #29
 8000d98:	d004      	beq.n	8000da4 <__aeabi_fmul+0x184>
 8000d9a:	210f      	movs	r1, #15
 8000d9c:	4021      	ands	r1, r4
 8000d9e:	2904      	cmp	r1, #4
 8000da0:	d000      	beq.n	8000da4 <__aeabi_fmul+0x184>
 8000da2:	3404      	adds	r4, #4
 8000da4:	0121      	lsls	r1, r4, #4
 8000da6:	d503      	bpl.n	8000db0 <__aeabi_fmul+0x190>
 8000da8:	4b43      	ldr	r3, [pc, #268]	; (8000eb8 <__aeabi_fmul+0x298>)
 8000daa:	401c      	ands	r4, r3
 8000dac:	002b      	movs	r3, r5
 8000dae:	3380      	adds	r3, #128	; 0x80
 8000db0:	2bfe      	cmp	r3, #254	; 0xfe
 8000db2:	dcc1      	bgt.n	8000d38 <__aeabi_fmul+0x118>
 8000db4:	01a1      	lsls	r1, r4, #6
 8000db6:	0a49      	lsrs	r1, r1, #9
 8000db8:	b2d8      	uxtb	r0, r3
 8000dba:	e783      	b.n	8000cc4 <__aeabi_fmul+0xa4>
 8000dbc:	2c00      	cmp	r4, #0
 8000dbe:	d12c      	bne.n	8000e1a <__aeabi_fmul+0x1fa>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	4642      	mov	r2, r8
 8000dc4:	431e      	orrs	r6, r3
 8000dc6:	002b      	movs	r3, r5
 8000dc8:	407a      	eors	r2, r7
 8000dca:	2001      	movs	r0, #1
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	1c5d      	adds	r5, r3, #1
 8000dd0:	2e0a      	cmp	r6, #10
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_fmul+0x1b6>
 8000dd4:	e757      	b.n	8000c86 <__aeabi_fmul+0x66>
 8000dd6:	e76a      	b.n	8000cae <__aeabi_fmul+0x8e>
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d110      	bne.n	8000dfe <__aeabi_fmul+0x1de>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	2604      	movs	r6, #4
 8000de0:	2500      	movs	r5, #0
 8000de2:	469a      	mov	sl, r3
 8000de4:	e738      	b.n	8000c58 <__aeabi_fmul+0x38>
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d104      	bne.n	8000df4 <__aeabi_fmul+0x1d4>
 8000dea:	2302      	movs	r3, #2
 8000dec:	2608      	movs	r6, #8
 8000dee:	25ff      	movs	r5, #255	; 0xff
 8000df0:	469a      	mov	sl, r3
 8000df2:	e731      	b.n	8000c58 <__aeabi_fmul+0x38>
 8000df4:	2303      	movs	r3, #3
 8000df6:	260c      	movs	r6, #12
 8000df8:	25ff      	movs	r5, #255	; 0xff
 8000dfa:	469a      	mov	sl, r3
 8000dfc:	e72c      	b.n	8000c58 <__aeabi_fmul+0x38>
 8000dfe:	4648      	mov	r0, r9
 8000e00:	f001 fdfc 	bl	80029fc <__clzsi2>
 8000e04:	464a      	mov	r2, r9
 8000e06:	1f43      	subs	r3, r0, #5
 8000e08:	2576      	movs	r5, #118	; 0x76
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	426d      	negs	r5, r5
 8000e10:	4691      	mov	r9, r2
 8000e12:	2600      	movs	r6, #0
 8000e14:	469a      	mov	sl, r3
 8000e16:	1a2d      	subs	r5, r5, r0
 8000e18:	e71e      	b.n	8000c58 <__aeabi_fmul+0x38>
 8000e1a:	0020      	movs	r0, r4
 8000e1c:	f001 fdee 	bl	80029fc <__clzsi2>
 8000e20:	4642      	mov	r2, r8
 8000e22:	1f43      	subs	r3, r0, #5
 8000e24:	409c      	lsls	r4, r3
 8000e26:	1a2b      	subs	r3, r5, r0
 8000e28:	3b76      	subs	r3, #118	; 0x76
 8000e2a:	407a      	eors	r2, r7
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	1c5d      	adds	r5, r3, #1
 8000e32:	2e0a      	cmp	r6, #10
 8000e34:	dd00      	ble.n	8000e38 <__aeabi_fmul+0x218>
 8000e36:	e726      	b.n	8000c86 <__aeabi_fmul+0x66>
 8000e38:	e739      	b.n	8000cae <__aeabi_fmul+0x8e>
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	2b1b      	cmp	r3, #27
 8000e40:	dd00      	ble.n	8000e44 <__aeabi_fmul+0x224>
 8000e42:	e73d      	b.n	8000cc0 <__aeabi_fmul+0xa0>
 8000e44:	359e      	adds	r5, #158	; 0x9e
 8000e46:	0021      	movs	r1, r4
 8000e48:	40ac      	lsls	r4, r5
 8000e4a:	40d9      	lsrs	r1, r3
 8000e4c:	1e63      	subs	r3, r4, #1
 8000e4e:	419c      	sbcs	r4, r3
 8000e50:	4321      	orrs	r1, r4
 8000e52:	074b      	lsls	r3, r1, #29
 8000e54:	d004      	beq.n	8000e60 <__aeabi_fmul+0x240>
 8000e56:	230f      	movs	r3, #15
 8000e58:	400b      	ands	r3, r1
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d000      	beq.n	8000e60 <__aeabi_fmul+0x240>
 8000e5e:	3104      	adds	r1, #4
 8000e60:	014b      	lsls	r3, r1, #5
 8000e62:	d504      	bpl.n	8000e6e <__aeabi_fmul+0x24e>
 8000e64:	2001      	movs	r0, #1
 8000e66:	2100      	movs	r1, #0
 8000e68:	e72c      	b.n	8000cc4 <__aeabi_fmul+0xa4>
 8000e6a:	001d      	movs	r5, r3
 8000e6c:	e78f      	b.n	8000d8e <__aeabi_fmul+0x16e>
 8000e6e:	0189      	lsls	r1, r1, #6
 8000e70:	2000      	movs	r0, #0
 8000e72:	0a49      	lsrs	r1, r1, #9
 8000e74:	e726      	b.n	8000cc4 <__aeabi_fmul+0xa4>
 8000e76:	2302      	movs	r3, #2
 8000e78:	2e0f      	cmp	r6, #15
 8000e7a:	d10c      	bne.n	8000e96 <__aeabi_fmul+0x276>
 8000e7c:	2180      	movs	r1, #128	; 0x80
 8000e7e:	464b      	mov	r3, r9
 8000e80:	03c9      	lsls	r1, r1, #15
 8000e82:	420b      	tst	r3, r1
 8000e84:	d00d      	beq.n	8000ea2 <__aeabi_fmul+0x282>
 8000e86:	420c      	tst	r4, r1
 8000e88:	d10b      	bne.n	8000ea2 <__aeabi_fmul+0x282>
 8000e8a:	4321      	orrs	r1, r4
 8000e8c:	0249      	lsls	r1, r1, #9
 8000e8e:	003a      	movs	r2, r7
 8000e90:	20ff      	movs	r0, #255	; 0xff
 8000e92:	0a49      	lsrs	r1, r1, #9
 8000e94:	e716      	b.n	8000cc4 <__aeabi_fmul+0xa4>
 8000e96:	2e0b      	cmp	r6, #11
 8000e98:	d000      	beq.n	8000e9c <__aeabi_fmul+0x27c>
 8000e9a:	e6f7      	b.n	8000c8c <__aeabi_fmul+0x6c>
 8000e9c:	46a1      	mov	r9, r4
 8000e9e:	469a      	mov	sl, r3
 8000ea0:	e736      	b.n	8000d10 <__aeabi_fmul+0xf0>
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	464b      	mov	r3, r9
 8000ea6:	03c9      	lsls	r1, r1, #15
 8000ea8:	4319      	orrs	r1, r3
 8000eaa:	0249      	lsls	r1, r1, #9
 8000eac:	4642      	mov	r2, r8
 8000eae:	20ff      	movs	r0, #255	; 0xff
 8000eb0:	0a49      	lsrs	r1, r1, #9
 8000eb2:	e707      	b.n	8000cc4 <__aeabi_fmul+0xa4>
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	e7df      	b.n	8000e78 <__aeabi_fmul+0x258>
 8000eb8:	f7ffffff 	.word	0xf7ffffff

08000ebc <__aeabi_fsub>:
 8000ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ebe:	46c6      	mov	lr, r8
 8000ec0:	0243      	lsls	r3, r0, #9
 8000ec2:	0a5b      	lsrs	r3, r3, #9
 8000ec4:	0045      	lsls	r5, r0, #1
 8000ec6:	00da      	lsls	r2, r3, #3
 8000ec8:	0fc4      	lsrs	r4, r0, #31
 8000eca:	0248      	lsls	r0, r1, #9
 8000ecc:	004f      	lsls	r7, r1, #1
 8000ece:	4694      	mov	ip, r2
 8000ed0:	0a42      	lsrs	r2, r0, #9
 8000ed2:	001e      	movs	r6, r3
 8000ed4:	4690      	mov	r8, r2
 8000ed6:	b500      	push	{lr}
 8000ed8:	0e2d      	lsrs	r5, r5, #24
 8000eda:	0e3f      	lsrs	r7, r7, #24
 8000edc:	0fc9      	lsrs	r1, r1, #31
 8000ede:	0980      	lsrs	r0, r0, #6
 8000ee0:	2fff      	cmp	r7, #255	; 0xff
 8000ee2:	d059      	beq.n	8000f98 <__aeabi_fsub+0xdc>
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4051      	eors	r1, r2
 8000ee8:	428c      	cmp	r4, r1
 8000eea:	d039      	beq.n	8000f60 <__aeabi_fsub+0xa4>
 8000eec:	1bea      	subs	r2, r5, r7
 8000eee:	2a00      	cmp	r2, #0
 8000ef0:	dd58      	ble.n	8000fa4 <__aeabi_fsub+0xe8>
 8000ef2:	2f00      	cmp	r7, #0
 8000ef4:	d068      	beq.n	8000fc8 <__aeabi_fsub+0x10c>
 8000ef6:	2dff      	cmp	r5, #255	; 0xff
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x40>
 8000efa:	e0d1      	b.n	80010a0 <__aeabi_fsub+0x1e4>
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	04db      	lsls	r3, r3, #19
 8000f00:	4318      	orrs	r0, r3
 8000f02:	2a1b      	cmp	r2, #27
 8000f04:	dc00      	bgt.n	8000f08 <__aeabi_fsub+0x4c>
 8000f06:	e0e3      	b.n	80010d0 <__aeabi_fsub+0x214>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	4662      	mov	r2, ip
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	015a      	lsls	r2, r3, #5
 8000f10:	d400      	bmi.n	8000f14 <__aeabi_fsub+0x58>
 8000f12:	e0ac      	b.n	800106e <__aeabi_fsub+0x1b2>
 8000f14:	019b      	lsls	r3, r3, #6
 8000f16:	099e      	lsrs	r6, r3, #6
 8000f18:	0030      	movs	r0, r6
 8000f1a:	f001 fd6f 	bl	80029fc <__clzsi2>
 8000f1e:	0033      	movs	r3, r6
 8000f20:	3805      	subs	r0, #5
 8000f22:	4083      	lsls	r3, r0
 8000f24:	4285      	cmp	r5, r0
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_fsub+0x6e>
 8000f28:	e0c6      	b.n	80010b8 <__aeabi_fsub+0x1fc>
 8000f2a:	4ab2      	ldr	r2, [pc, #712]	; (80011f4 <__aeabi_fsub+0x338>)
 8000f2c:	1a2d      	subs	r5, r5, r0
 8000f2e:	4013      	ands	r3, r2
 8000f30:	075a      	lsls	r2, r3, #29
 8000f32:	d004      	beq.n	8000f3e <__aeabi_fsub+0x82>
 8000f34:	220f      	movs	r2, #15
 8000f36:	401a      	ands	r2, r3
 8000f38:	2a04      	cmp	r2, #4
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fsub+0x82>
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	015a      	lsls	r2, r3, #5
 8000f40:	d400      	bmi.n	8000f44 <__aeabi_fsub+0x88>
 8000f42:	e097      	b.n	8001074 <__aeabi_fsub+0x1b8>
 8000f44:	1c6a      	adds	r2, r5, #1
 8000f46:	2dfe      	cmp	r5, #254	; 0xfe
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x90>
 8000f4a:	e084      	b.n	8001056 <__aeabi_fsub+0x19a>
 8000f4c:	019b      	lsls	r3, r3, #6
 8000f4e:	0a5e      	lsrs	r6, r3, #9
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	05d0      	lsls	r0, r2, #23
 8000f54:	4330      	orrs	r0, r6
 8000f56:	07e4      	lsls	r4, r4, #31
 8000f58:	4320      	orrs	r0, r4
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f60:	1bea      	subs	r2, r5, r7
 8000f62:	2a00      	cmp	r2, #0
 8000f64:	dd41      	ble.n	8000fea <__aeabi_fsub+0x12e>
 8000f66:	2f00      	cmp	r7, #0
 8000f68:	d06b      	beq.n	8001042 <__aeabi_fsub+0x186>
 8000f6a:	2dff      	cmp	r5, #255	; 0xff
 8000f6c:	d100      	bne.n	8000f70 <__aeabi_fsub+0xb4>
 8000f6e:	e097      	b.n	80010a0 <__aeabi_fsub+0x1e4>
 8000f70:	2380      	movs	r3, #128	; 0x80
 8000f72:	04db      	lsls	r3, r3, #19
 8000f74:	4318      	orrs	r0, r3
 8000f76:	2a1b      	cmp	r2, #27
 8000f78:	dc00      	bgt.n	8000f7c <__aeabi_fsub+0xc0>
 8000f7a:	e0cc      	b.n	8001116 <__aeabi_fsub+0x25a>
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	4463      	add	r3, ip
 8000f80:	015a      	lsls	r2, r3, #5
 8000f82:	d574      	bpl.n	800106e <__aeabi_fsub+0x1b2>
 8000f84:	3501      	adds	r5, #1
 8000f86:	2dff      	cmp	r5, #255	; 0xff
 8000f88:	d065      	beq.n	8001056 <__aeabi_fsub+0x19a>
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	499a      	ldr	r1, [pc, #616]	; (80011f8 <__aeabi_fsub+0x33c>)
 8000f8e:	401a      	ands	r2, r3
 8000f90:	085b      	lsrs	r3, r3, #1
 8000f92:	400b      	ands	r3, r1
 8000f94:	4313      	orrs	r3, r2
 8000f96:	e7cb      	b.n	8000f30 <__aeabi_fsub+0x74>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d01f      	beq.n	8000fdc <__aeabi_fsub+0x120>
 8000f9c:	428c      	cmp	r4, r1
 8000f9e:	d022      	beq.n	8000fe6 <__aeabi_fsub+0x12a>
 8000fa0:	002a      	movs	r2, r5
 8000fa2:	3aff      	subs	r2, #255	; 0xff
 8000fa4:	2a00      	cmp	r2, #0
 8000fa6:	d035      	beq.n	8001014 <__aeabi_fsub+0x158>
 8000fa8:	1b7a      	subs	r2, r7, r5
 8000faa:	2d00      	cmp	r5, #0
 8000fac:	d000      	beq.n	8000fb0 <__aeabi_fsub+0xf4>
 8000fae:	e099      	b.n	80010e4 <__aeabi_fsub+0x228>
 8000fb0:	4663      	mov	r3, ip
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_fsub+0xfc>
 8000fb6:	e0dd      	b.n	8001174 <__aeabi_fsub+0x2b8>
 8000fb8:	1e53      	subs	r3, r2, #1
 8000fba:	2a01      	cmp	r2, #1
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_fsub+0x104>
 8000fbe:	e105      	b.n	80011cc <__aeabi_fsub+0x310>
 8000fc0:	2aff      	cmp	r2, #255	; 0xff
 8000fc2:	d06b      	beq.n	800109c <__aeabi_fsub+0x1e0>
 8000fc4:	001a      	movs	r2, r3
 8000fc6:	e094      	b.n	80010f2 <__aeabi_fsub+0x236>
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	d073      	beq.n	80010b4 <__aeabi_fsub+0x1f8>
 8000fcc:	1e51      	subs	r1, r2, #1
 8000fce:	2a01      	cmp	r2, #1
 8000fd0:	d100      	bne.n	8000fd4 <__aeabi_fsub+0x118>
 8000fd2:	e0df      	b.n	8001194 <__aeabi_fsub+0x2d8>
 8000fd4:	2aff      	cmp	r2, #255	; 0xff
 8000fd6:	d063      	beq.n	80010a0 <__aeabi_fsub+0x1e4>
 8000fd8:	000a      	movs	r2, r1
 8000fda:	e792      	b.n	8000f02 <__aeabi_fsub+0x46>
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4051      	eors	r1, r2
 8000fe0:	42a1      	cmp	r1, r4
 8000fe2:	d000      	beq.n	8000fe6 <__aeabi_fsub+0x12a>
 8000fe4:	e782      	b.n	8000eec <__aeabi_fsub+0x30>
 8000fe6:	002a      	movs	r2, r5
 8000fe8:	3aff      	subs	r2, #255	; 0xff
 8000fea:	2a00      	cmp	r2, #0
 8000fec:	d036      	beq.n	800105c <__aeabi_fsub+0x1a0>
 8000fee:	1b7a      	subs	r2, r7, r5
 8000ff0:	2d00      	cmp	r5, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fsub+0x13a>
 8000ff4:	e0aa      	b.n	800114c <__aeabi_fsub+0x290>
 8000ff6:	2fff      	cmp	r7, #255	; 0xff
 8000ff8:	d100      	bne.n	8000ffc <__aeabi_fsub+0x140>
 8000ffa:	e0da      	b.n	80011b2 <__aeabi_fsub+0x2f6>
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	4661      	mov	r1, ip
 8001000:	04db      	lsls	r3, r3, #19
 8001002:	4319      	orrs	r1, r3
 8001004:	468c      	mov	ip, r1
 8001006:	2a1b      	cmp	r2, #27
 8001008:	dc00      	bgt.n	800100c <__aeabi_fsub+0x150>
 800100a:	e0d4      	b.n	80011b6 <__aeabi_fsub+0x2fa>
 800100c:	2301      	movs	r3, #1
 800100e:	003d      	movs	r5, r7
 8001010:	181b      	adds	r3, r3, r0
 8001012:	e7b5      	b.n	8000f80 <__aeabi_fsub+0xc4>
 8001014:	27fe      	movs	r7, #254	; 0xfe
 8001016:	1c6a      	adds	r2, r5, #1
 8001018:	4217      	tst	r7, r2
 800101a:	d171      	bne.n	8001100 <__aeabi_fsub+0x244>
 800101c:	2d00      	cmp	r5, #0
 800101e:	d000      	beq.n	8001022 <__aeabi_fsub+0x166>
 8001020:	e09e      	b.n	8001160 <__aeabi_fsub+0x2a4>
 8001022:	4663      	mov	r3, ip
 8001024:	2b00      	cmp	r3, #0
 8001026:	d100      	bne.n	800102a <__aeabi_fsub+0x16e>
 8001028:	e0d5      	b.n	80011d6 <__aeabi_fsub+0x31a>
 800102a:	2200      	movs	r2, #0
 800102c:	2800      	cmp	r0, #0
 800102e:	d100      	bne.n	8001032 <__aeabi_fsub+0x176>
 8001030:	e78f      	b.n	8000f52 <__aeabi_fsub+0x96>
 8001032:	1a1b      	subs	r3, r3, r0
 8001034:	015e      	lsls	r6, r3, #5
 8001036:	d400      	bmi.n	800103a <__aeabi_fsub+0x17e>
 8001038:	e0d6      	b.n	80011e8 <__aeabi_fsub+0x32c>
 800103a:	4663      	mov	r3, ip
 800103c:	000c      	movs	r4, r1
 800103e:	1ac3      	subs	r3, r0, r3
 8001040:	e776      	b.n	8000f30 <__aeabi_fsub+0x74>
 8001042:	2800      	cmp	r0, #0
 8001044:	d036      	beq.n	80010b4 <__aeabi_fsub+0x1f8>
 8001046:	1e51      	subs	r1, r2, #1
 8001048:	2a01      	cmp	r2, #1
 800104a:	d100      	bne.n	800104e <__aeabi_fsub+0x192>
 800104c:	e09a      	b.n	8001184 <__aeabi_fsub+0x2c8>
 800104e:	2aff      	cmp	r2, #255	; 0xff
 8001050:	d026      	beq.n	80010a0 <__aeabi_fsub+0x1e4>
 8001052:	000a      	movs	r2, r1
 8001054:	e78f      	b.n	8000f76 <__aeabi_fsub+0xba>
 8001056:	22ff      	movs	r2, #255	; 0xff
 8001058:	2600      	movs	r6, #0
 800105a:	e77a      	b.n	8000f52 <__aeabi_fsub+0x96>
 800105c:	27fe      	movs	r7, #254	; 0xfe
 800105e:	1c6a      	adds	r2, r5, #1
 8001060:	4217      	tst	r7, r2
 8001062:	d062      	beq.n	800112a <__aeabi_fsub+0x26e>
 8001064:	2aff      	cmp	r2, #255	; 0xff
 8001066:	d0f6      	beq.n	8001056 <__aeabi_fsub+0x19a>
 8001068:	0015      	movs	r5, r2
 800106a:	4460      	add	r0, ip
 800106c:	0843      	lsrs	r3, r0, #1
 800106e:	075a      	lsls	r2, r3, #29
 8001070:	d000      	beq.n	8001074 <__aeabi_fsub+0x1b8>
 8001072:	e75f      	b.n	8000f34 <__aeabi_fsub+0x78>
 8001074:	08db      	lsrs	r3, r3, #3
 8001076:	2dff      	cmp	r5, #255	; 0xff
 8001078:	d012      	beq.n	80010a0 <__aeabi_fsub+0x1e4>
 800107a:	025b      	lsls	r3, r3, #9
 800107c:	0a5e      	lsrs	r6, r3, #9
 800107e:	b2ea      	uxtb	r2, r5
 8001080:	e767      	b.n	8000f52 <__aeabi_fsub+0x96>
 8001082:	4662      	mov	r2, ip
 8001084:	2a00      	cmp	r2, #0
 8001086:	d100      	bne.n	800108a <__aeabi_fsub+0x1ce>
 8001088:	e093      	b.n	80011b2 <__aeabi_fsub+0x2f6>
 800108a:	2800      	cmp	r0, #0
 800108c:	d008      	beq.n	80010a0 <__aeabi_fsub+0x1e4>
 800108e:	2280      	movs	r2, #128	; 0x80
 8001090:	03d2      	lsls	r2, r2, #15
 8001092:	4213      	tst	r3, r2
 8001094:	d004      	beq.n	80010a0 <__aeabi_fsub+0x1e4>
 8001096:	4640      	mov	r0, r8
 8001098:	4210      	tst	r0, r2
 800109a:	d101      	bne.n	80010a0 <__aeabi_fsub+0x1e4>
 800109c:	000c      	movs	r4, r1
 800109e:	4643      	mov	r3, r8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d0d8      	beq.n	8001056 <__aeabi_fsub+0x19a>
 80010a4:	2680      	movs	r6, #128	; 0x80
 80010a6:	03f6      	lsls	r6, r6, #15
 80010a8:	431e      	orrs	r6, r3
 80010aa:	0276      	lsls	r6, r6, #9
 80010ac:	22ff      	movs	r2, #255	; 0xff
 80010ae:	0a76      	lsrs	r6, r6, #9
 80010b0:	e74f      	b.n	8000f52 <__aeabi_fsub+0x96>
 80010b2:	4643      	mov	r3, r8
 80010b4:	0015      	movs	r5, r2
 80010b6:	e7de      	b.n	8001076 <__aeabi_fsub+0x1ba>
 80010b8:	2220      	movs	r2, #32
 80010ba:	1b40      	subs	r0, r0, r5
 80010bc:	3001      	adds	r0, #1
 80010be:	1a12      	subs	r2, r2, r0
 80010c0:	0019      	movs	r1, r3
 80010c2:	4093      	lsls	r3, r2
 80010c4:	40c1      	lsrs	r1, r0
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	4193      	sbcs	r3, r2
 80010ca:	2500      	movs	r5, #0
 80010cc:	430b      	orrs	r3, r1
 80010ce:	e72f      	b.n	8000f30 <__aeabi_fsub+0x74>
 80010d0:	2320      	movs	r3, #32
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	0001      	movs	r1, r0
 80010d6:	4098      	lsls	r0, r3
 80010d8:	0003      	movs	r3, r0
 80010da:	40d1      	lsrs	r1, r2
 80010dc:	1e5a      	subs	r2, r3, #1
 80010de:	4193      	sbcs	r3, r2
 80010e0:	430b      	orrs	r3, r1
 80010e2:	e712      	b.n	8000f0a <__aeabi_fsub+0x4e>
 80010e4:	2fff      	cmp	r7, #255	; 0xff
 80010e6:	d0d9      	beq.n	800109c <__aeabi_fsub+0x1e0>
 80010e8:	2380      	movs	r3, #128	; 0x80
 80010ea:	4664      	mov	r4, ip
 80010ec:	04db      	lsls	r3, r3, #19
 80010ee:	431c      	orrs	r4, r3
 80010f0:	46a4      	mov	ip, r4
 80010f2:	2a1b      	cmp	r2, #27
 80010f4:	dd52      	ble.n	800119c <__aeabi_fsub+0x2e0>
 80010f6:	2301      	movs	r3, #1
 80010f8:	000c      	movs	r4, r1
 80010fa:	003d      	movs	r5, r7
 80010fc:	1ac3      	subs	r3, r0, r3
 80010fe:	e706      	b.n	8000f0e <__aeabi_fsub+0x52>
 8001100:	4663      	mov	r3, ip
 8001102:	1a1e      	subs	r6, r3, r0
 8001104:	0173      	lsls	r3, r6, #5
 8001106:	d439      	bmi.n	800117c <__aeabi_fsub+0x2c0>
 8001108:	2e00      	cmp	r6, #0
 800110a:	d000      	beq.n	800110e <__aeabi_fsub+0x252>
 800110c:	e704      	b.n	8000f18 <__aeabi_fsub+0x5c>
 800110e:	2400      	movs	r4, #0
 8001110:	2200      	movs	r2, #0
 8001112:	2600      	movs	r6, #0
 8001114:	e71d      	b.n	8000f52 <__aeabi_fsub+0x96>
 8001116:	2320      	movs	r3, #32
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	0001      	movs	r1, r0
 800111c:	4098      	lsls	r0, r3
 800111e:	0003      	movs	r3, r0
 8001120:	40d1      	lsrs	r1, r2
 8001122:	1e5a      	subs	r2, r3, #1
 8001124:	4193      	sbcs	r3, r2
 8001126:	430b      	orrs	r3, r1
 8001128:	e729      	b.n	8000f7e <__aeabi_fsub+0xc2>
 800112a:	2d00      	cmp	r5, #0
 800112c:	d1a9      	bne.n	8001082 <__aeabi_fsub+0x1c6>
 800112e:	4663      	mov	r3, ip
 8001130:	2b00      	cmp	r3, #0
 8001132:	d056      	beq.n	80011e2 <__aeabi_fsub+0x326>
 8001134:	2200      	movs	r2, #0
 8001136:	2800      	cmp	r0, #0
 8001138:	d100      	bne.n	800113c <__aeabi_fsub+0x280>
 800113a:	e70a      	b.n	8000f52 <__aeabi_fsub+0x96>
 800113c:	0003      	movs	r3, r0
 800113e:	4463      	add	r3, ip
 8001140:	015a      	lsls	r2, r3, #5
 8001142:	d594      	bpl.n	800106e <__aeabi_fsub+0x1b2>
 8001144:	4a2b      	ldr	r2, [pc, #172]	; (80011f4 <__aeabi_fsub+0x338>)
 8001146:	3501      	adds	r5, #1
 8001148:	4013      	ands	r3, r2
 800114a:	e790      	b.n	800106e <__aeabi_fsub+0x1b2>
 800114c:	4663      	mov	r3, ip
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0af      	beq.n	80010b2 <__aeabi_fsub+0x1f6>
 8001152:	1e53      	subs	r3, r2, #1
 8001154:	2a01      	cmp	r2, #1
 8001156:	d015      	beq.n	8001184 <__aeabi_fsub+0x2c8>
 8001158:	2aff      	cmp	r2, #255	; 0xff
 800115a:	d02a      	beq.n	80011b2 <__aeabi_fsub+0x2f6>
 800115c:	001a      	movs	r2, r3
 800115e:	e752      	b.n	8001006 <__aeabi_fsub+0x14a>
 8001160:	4662      	mov	r2, ip
 8001162:	2a00      	cmp	r2, #0
 8001164:	d191      	bne.n	800108a <__aeabi_fsub+0x1ce>
 8001166:	2800      	cmp	r0, #0
 8001168:	d198      	bne.n	800109c <__aeabi_fsub+0x1e0>
 800116a:	2680      	movs	r6, #128	; 0x80
 800116c:	2400      	movs	r4, #0
 800116e:	22ff      	movs	r2, #255	; 0xff
 8001170:	03f6      	lsls	r6, r6, #15
 8001172:	e6ee      	b.n	8000f52 <__aeabi_fsub+0x96>
 8001174:	000c      	movs	r4, r1
 8001176:	4643      	mov	r3, r8
 8001178:	0015      	movs	r5, r2
 800117a:	e77c      	b.n	8001076 <__aeabi_fsub+0x1ba>
 800117c:	4663      	mov	r3, ip
 800117e:	000c      	movs	r4, r1
 8001180:	1ac6      	subs	r6, r0, r3
 8001182:	e6c9      	b.n	8000f18 <__aeabi_fsub+0x5c>
 8001184:	0003      	movs	r3, r0
 8001186:	4463      	add	r3, ip
 8001188:	2501      	movs	r5, #1
 800118a:	015a      	lsls	r2, r3, #5
 800118c:	d400      	bmi.n	8001190 <__aeabi_fsub+0x2d4>
 800118e:	e76e      	b.n	800106e <__aeabi_fsub+0x1b2>
 8001190:	2502      	movs	r5, #2
 8001192:	e6fa      	b.n	8000f8a <__aeabi_fsub+0xce>
 8001194:	4663      	mov	r3, ip
 8001196:	2501      	movs	r5, #1
 8001198:	1a1b      	subs	r3, r3, r0
 800119a:	e6b8      	b.n	8000f0e <__aeabi_fsub+0x52>
 800119c:	4664      	mov	r4, ip
 800119e:	2320      	movs	r3, #32
 80011a0:	40d4      	lsrs	r4, r2
 80011a2:	1a9b      	subs	r3, r3, r2
 80011a4:	4662      	mov	r2, ip
 80011a6:	409a      	lsls	r2, r3
 80011a8:	0013      	movs	r3, r2
 80011aa:	1e5a      	subs	r2, r3, #1
 80011ac:	4193      	sbcs	r3, r2
 80011ae:	4323      	orrs	r3, r4
 80011b0:	e7a2      	b.n	80010f8 <__aeabi_fsub+0x23c>
 80011b2:	4643      	mov	r3, r8
 80011b4:	e774      	b.n	80010a0 <__aeabi_fsub+0x1e4>
 80011b6:	4661      	mov	r1, ip
 80011b8:	2320      	movs	r3, #32
 80011ba:	40d1      	lsrs	r1, r2
 80011bc:	1a9b      	subs	r3, r3, r2
 80011be:	4662      	mov	r2, ip
 80011c0:	409a      	lsls	r2, r3
 80011c2:	0013      	movs	r3, r2
 80011c4:	1e5a      	subs	r2, r3, #1
 80011c6:	4193      	sbcs	r3, r2
 80011c8:	430b      	orrs	r3, r1
 80011ca:	e720      	b.n	800100e <__aeabi_fsub+0x152>
 80011cc:	4663      	mov	r3, ip
 80011ce:	000c      	movs	r4, r1
 80011d0:	2501      	movs	r5, #1
 80011d2:	1ac3      	subs	r3, r0, r3
 80011d4:	e69b      	b.n	8000f0e <__aeabi_fsub+0x52>
 80011d6:	2800      	cmp	r0, #0
 80011d8:	d099      	beq.n	800110e <__aeabi_fsub+0x252>
 80011da:	000c      	movs	r4, r1
 80011dc:	4646      	mov	r6, r8
 80011de:	2200      	movs	r2, #0
 80011e0:	e6b7      	b.n	8000f52 <__aeabi_fsub+0x96>
 80011e2:	4646      	mov	r6, r8
 80011e4:	2200      	movs	r2, #0
 80011e6:	e6b4      	b.n	8000f52 <__aeabi_fsub+0x96>
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d000      	beq.n	80011ee <__aeabi_fsub+0x332>
 80011ec:	e73f      	b.n	800106e <__aeabi_fsub+0x1b2>
 80011ee:	2400      	movs	r4, #0
 80011f0:	2600      	movs	r6, #0
 80011f2:	e6ae      	b.n	8000f52 <__aeabi_fsub+0x96>
 80011f4:	fbffffff 	.word	0xfbffffff
 80011f8:	7dffffff 	.word	0x7dffffff

080011fc <__aeabi_f2iz>:
 80011fc:	0241      	lsls	r1, r0, #9
 80011fe:	0042      	lsls	r2, r0, #1
 8001200:	0fc3      	lsrs	r3, r0, #31
 8001202:	0a49      	lsrs	r1, r1, #9
 8001204:	2000      	movs	r0, #0
 8001206:	0e12      	lsrs	r2, r2, #24
 8001208:	2a7e      	cmp	r2, #126	; 0x7e
 800120a:	dd03      	ble.n	8001214 <__aeabi_f2iz+0x18>
 800120c:	2a9d      	cmp	r2, #157	; 0x9d
 800120e:	dd02      	ble.n	8001216 <__aeabi_f2iz+0x1a>
 8001210:	4a09      	ldr	r2, [pc, #36]	; (8001238 <__aeabi_f2iz+0x3c>)
 8001212:	1898      	adds	r0, r3, r2
 8001214:	4770      	bx	lr
 8001216:	2080      	movs	r0, #128	; 0x80
 8001218:	0400      	lsls	r0, r0, #16
 800121a:	4301      	orrs	r1, r0
 800121c:	2a95      	cmp	r2, #149	; 0x95
 800121e:	dc07      	bgt.n	8001230 <__aeabi_f2iz+0x34>
 8001220:	2096      	movs	r0, #150	; 0x96
 8001222:	1a82      	subs	r2, r0, r2
 8001224:	40d1      	lsrs	r1, r2
 8001226:	4248      	negs	r0, r1
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1f3      	bne.n	8001214 <__aeabi_f2iz+0x18>
 800122c:	0008      	movs	r0, r1
 800122e:	e7f1      	b.n	8001214 <__aeabi_f2iz+0x18>
 8001230:	3a96      	subs	r2, #150	; 0x96
 8001232:	4091      	lsls	r1, r2
 8001234:	e7f7      	b.n	8001226 <__aeabi_f2iz+0x2a>
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	7fffffff 	.word	0x7fffffff

0800123c <__aeabi_ui2f>:
 800123c:	b570      	push	{r4, r5, r6, lr}
 800123e:	1e04      	subs	r4, r0, #0
 8001240:	d00e      	beq.n	8001260 <__aeabi_ui2f+0x24>
 8001242:	f001 fbdb 	bl	80029fc <__clzsi2>
 8001246:	239e      	movs	r3, #158	; 0x9e
 8001248:	0001      	movs	r1, r0
 800124a:	1a1b      	subs	r3, r3, r0
 800124c:	2b96      	cmp	r3, #150	; 0x96
 800124e:	dc0c      	bgt.n	800126a <__aeabi_ui2f+0x2e>
 8001250:	2808      	cmp	r0, #8
 8001252:	d02c      	beq.n	80012ae <__aeabi_ui2f+0x72>
 8001254:	3908      	subs	r1, #8
 8001256:	408c      	lsls	r4, r1
 8001258:	0264      	lsls	r4, r4, #9
 800125a:	0a64      	lsrs	r4, r4, #9
 800125c:	b2d8      	uxtb	r0, r3
 800125e:	e001      	b.n	8001264 <__aeabi_ui2f+0x28>
 8001260:	2000      	movs	r0, #0
 8001262:	2400      	movs	r4, #0
 8001264:	05c0      	lsls	r0, r0, #23
 8001266:	4320      	orrs	r0, r4
 8001268:	bd70      	pop	{r4, r5, r6, pc}
 800126a:	2b99      	cmp	r3, #153	; 0x99
 800126c:	dd0a      	ble.n	8001284 <__aeabi_ui2f+0x48>
 800126e:	0002      	movs	r2, r0
 8001270:	0020      	movs	r0, r4
 8001272:	321b      	adds	r2, #27
 8001274:	4090      	lsls	r0, r2
 8001276:	0002      	movs	r2, r0
 8001278:	1e50      	subs	r0, r2, #1
 800127a:	4182      	sbcs	r2, r0
 800127c:	2005      	movs	r0, #5
 800127e:	1a40      	subs	r0, r0, r1
 8001280:	40c4      	lsrs	r4, r0
 8001282:	4314      	orrs	r4, r2
 8001284:	2905      	cmp	r1, #5
 8001286:	dc16      	bgt.n	80012b6 <__aeabi_ui2f+0x7a>
 8001288:	0022      	movs	r2, r4
 800128a:	480f      	ldr	r0, [pc, #60]	; (80012c8 <__aeabi_ui2f+0x8c>)
 800128c:	4002      	ands	r2, r0
 800128e:	0765      	lsls	r5, r4, #29
 8001290:	d009      	beq.n	80012a6 <__aeabi_ui2f+0x6a>
 8001292:	250f      	movs	r5, #15
 8001294:	402c      	ands	r4, r5
 8001296:	2c04      	cmp	r4, #4
 8001298:	d005      	beq.n	80012a6 <__aeabi_ui2f+0x6a>
 800129a:	3204      	adds	r2, #4
 800129c:	0154      	lsls	r4, r2, #5
 800129e:	d502      	bpl.n	80012a6 <__aeabi_ui2f+0x6a>
 80012a0:	239f      	movs	r3, #159	; 0x9f
 80012a2:	4002      	ands	r2, r0
 80012a4:	1a5b      	subs	r3, r3, r1
 80012a6:	0192      	lsls	r2, r2, #6
 80012a8:	0a54      	lsrs	r4, r2, #9
 80012aa:	b2d8      	uxtb	r0, r3
 80012ac:	e7da      	b.n	8001264 <__aeabi_ui2f+0x28>
 80012ae:	0264      	lsls	r4, r4, #9
 80012b0:	2096      	movs	r0, #150	; 0x96
 80012b2:	0a64      	lsrs	r4, r4, #9
 80012b4:	e7d6      	b.n	8001264 <__aeabi_ui2f+0x28>
 80012b6:	1f4a      	subs	r2, r1, #5
 80012b8:	4094      	lsls	r4, r2
 80012ba:	0022      	movs	r2, r4
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <__aeabi_ui2f+0x8c>)
 80012be:	4002      	ands	r2, r0
 80012c0:	0765      	lsls	r5, r4, #29
 80012c2:	d0f0      	beq.n	80012a6 <__aeabi_ui2f+0x6a>
 80012c4:	e7e5      	b.n	8001292 <__aeabi_ui2f+0x56>
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	fbffffff 	.word	0xfbffffff

080012cc <__aeabi_ddiv>:
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	4657      	mov	r7, sl
 80012d0:	464e      	mov	r6, r9
 80012d2:	4645      	mov	r5, r8
 80012d4:	46de      	mov	lr, fp
 80012d6:	b5e0      	push	{r5, r6, r7, lr}
 80012d8:	030c      	lsls	r4, r1, #12
 80012da:	001f      	movs	r7, r3
 80012dc:	004b      	lsls	r3, r1, #1
 80012de:	4681      	mov	r9, r0
 80012e0:	4692      	mov	sl, r2
 80012e2:	0005      	movs	r5, r0
 80012e4:	b085      	sub	sp, #20
 80012e6:	0b24      	lsrs	r4, r4, #12
 80012e8:	0d5b      	lsrs	r3, r3, #21
 80012ea:	0fce      	lsrs	r6, r1, #31
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d100      	bne.n	80012f2 <__aeabi_ddiv+0x26>
 80012f0:	e152      	b.n	8001598 <__aeabi_ddiv+0x2cc>
 80012f2:	4ad2      	ldr	r2, [pc, #840]	; (800163c <__aeabi_ddiv+0x370>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d100      	bne.n	80012fa <__aeabi_ddiv+0x2e>
 80012f8:	e16e      	b.n	80015d8 <__aeabi_ddiv+0x30c>
 80012fa:	0f42      	lsrs	r2, r0, #29
 80012fc:	00e4      	lsls	r4, r4, #3
 80012fe:	4314      	orrs	r4, r2
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	0412      	lsls	r2, r2, #16
 8001304:	4322      	orrs	r2, r4
 8001306:	4690      	mov	r8, r2
 8001308:	4acd      	ldr	r2, [pc, #820]	; (8001640 <__aeabi_ddiv+0x374>)
 800130a:	00c5      	lsls	r5, r0, #3
 800130c:	4693      	mov	fp, r2
 800130e:	449b      	add	fp, r3
 8001310:	2300      	movs	r3, #0
 8001312:	4699      	mov	r9, r3
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	033c      	lsls	r4, r7, #12
 8001318:	007b      	lsls	r3, r7, #1
 800131a:	4650      	mov	r0, sl
 800131c:	0b24      	lsrs	r4, r4, #12
 800131e:	0d5b      	lsrs	r3, r3, #21
 8001320:	0fff      	lsrs	r7, r7, #31
 8001322:	2b00      	cmp	r3, #0
 8001324:	d100      	bne.n	8001328 <__aeabi_ddiv+0x5c>
 8001326:	e11a      	b.n	800155e <__aeabi_ddiv+0x292>
 8001328:	4ac4      	ldr	r2, [pc, #784]	; (800163c <__aeabi_ddiv+0x370>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x64>
 800132e:	e15e      	b.n	80015ee <__aeabi_ddiv+0x322>
 8001330:	0f42      	lsrs	r2, r0, #29
 8001332:	00e4      	lsls	r4, r4, #3
 8001334:	4322      	orrs	r2, r4
 8001336:	2480      	movs	r4, #128	; 0x80
 8001338:	0424      	lsls	r4, r4, #16
 800133a:	4314      	orrs	r4, r2
 800133c:	4ac0      	ldr	r2, [pc, #768]	; (8001640 <__aeabi_ddiv+0x374>)
 800133e:	00c1      	lsls	r1, r0, #3
 8001340:	4694      	mov	ip, r2
 8001342:	465a      	mov	r2, fp
 8001344:	4463      	add	r3, ip
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	469b      	mov	fp, r3
 800134a:	2000      	movs	r0, #0
 800134c:	0033      	movs	r3, r6
 800134e:	407b      	eors	r3, r7
 8001350:	469a      	mov	sl, r3
 8001352:	464b      	mov	r3, r9
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d827      	bhi.n	80013a8 <__aeabi_ddiv+0xdc>
 8001358:	4aba      	ldr	r2, [pc, #744]	; (8001644 <__aeabi_ddiv+0x378>)
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	58d3      	ldr	r3, [r2, r3]
 800135e:	469f      	mov	pc, r3
 8001360:	46b2      	mov	sl, r6
 8001362:	9b00      	ldr	r3, [sp, #0]
 8001364:	2b02      	cmp	r3, #2
 8001366:	d016      	beq.n	8001396 <__aeabi_ddiv+0xca>
 8001368:	2b03      	cmp	r3, #3
 800136a:	d100      	bne.n	800136e <__aeabi_ddiv+0xa2>
 800136c:	e287      	b.n	800187e <__aeabi_ddiv+0x5b2>
 800136e:	2b01      	cmp	r3, #1
 8001370:	d000      	beq.n	8001374 <__aeabi_ddiv+0xa8>
 8001372:	e0d5      	b.n	8001520 <__aeabi_ddiv+0x254>
 8001374:	2300      	movs	r3, #0
 8001376:	2200      	movs	r2, #0
 8001378:	2500      	movs	r5, #0
 800137a:	051b      	lsls	r3, r3, #20
 800137c:	4313      	orrs	r3, r2
 800137e:	4652      	mov	r2, sl
 8001380:	07d2      	lsls	r2, r2, #31
 8001382:	4313      	orrs	r3, r2
 8001384:	0028      	movs	r0, r5
 8001386:	0019      	movs	r1, r3
 8001388:	b005      	add	sp, #20
 800138a:	bcf0      	pop	{r4, r5, r6, r7}
 800138c:	46bb      	mov	fp, r7
 800138e:	46b2      	mov	sl, r6
 8001390:	46a9      	mov	r9, r5
 8001392:	46a0      	mov	r8, r4
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001396:	2200      	movs	r2, #0
 8001398:	2500      	movs	r5, #0
 800139a:	4ba8      	ldr	r3, [pc, #672]	; (800163c <__aeabi_ddiv+0x370>)
 800139c:	e7ed      	b.n	800137a <__aeabi_ddiv+0xae>
 800139e:	46ba      	mov	sl, r7
 80013a0:	46a0      	mov	r8, r4
 80013a2:	000d      	movs	r5, r1
 80013a4:	9000      	str	r0, [sp, #0]
 80013a6:	e7dc      	b.n	8001362 <__aeabi_ddiv+0x96>
 80013a8:	4544      	cmp	r4, r8
 80013aa:	d200      	bcs.n	80013ae <__aeabi_ddiv+0xe2>
 80013ac:	e1c4      	b.n	8001738 <__aeabi_ddiv+0x46c>
 80013ae:	d100      	bne.n	80013b2 <__aeabi_ddiv+0xe6>
 80013b0:	e1bf      	b.n	8001732 <__aeabi_ddiv+0x466>
 80013b2:	2301      	movs	r3, #1
 80013b4:	425b      	negs	r3, r3
 80013b6:	469c      	mov	ip, r3
 80013b8:	002e      	movs	r6, r5
 80013ba:	4640      	mov	r0, r8
 80013bc:	2500      	movs	r5, #0
 80013be:	44e3      	add	fp, ip
 80013c0:	0223      	lsls	r3, r4, #8
 80013c2:	0e0c      	lsrs	r4, r1, #24
 80013c4:	431c      	orrs	r4, r3
 80013c6:	0c1b      	lsrs	r3, r3, #16
 80013c8:	4699      	mov	r9, r3
 80013ca:	0423      	lsls	r3, r4, #16
 80013cc:	020a      	lsls	r2, r1, #8
 80013ce:	0c1f      	lsrs	r7, r3, #16
 80013d0:	4649      	mov	r1, r9
 80013d2:	9200      	str	r2, [sp, #0]
 80013d4:	9701      	str	r7, [sp, #4]
 80013d6:	f7fe ff1b 	bl	8000210 <__aeabi_uidivmod>
 80013da:	0002      	movs	r2, r0
 80013dc:	437a      	muls	r2, r7
 80013de:	040b      	lsls	r3, r1, #16
 80013e0:	0c31      	lsrs	r1, r6, #16
 80013e2:	4680      	mov	r8, r0
 80013e4:	4319      	orrs	r1, r3
 80013e6:	428a      	cmp	r2, r1
 80013e8:	d907      	bls.n	80013fa <__aeabi_ddiv+0x12e>
 80013ea:	2301      	movs	r3, #1
 80013ec:	425b      	negs	r3, r3
 80013ee:	469c      	mov	ip, r3
 80013f0:	1909      	adds	r1, r1, r4
 80013f2:	44e0      	add	r8, ip
 80013f4:	428c      	cmp	r4, r1
 80013f6:	d800      	bhi.n	80013fa <__aeabi_ddiv+0x12e>
 80013f8:	e201      	b.n	80017fe <__aeabi_ddiv+0x532>
 80013fa:	1a88      	subs	r0, r1, r2
 80013fc:	4649      	mov	r1, r9
 80013fe:	f7fe ff07 	bl	8000210 <__aeabi_uidivmod>
 8001402:	9a01      	ldr	r2, [sp, #4]
 8001404:	0436      	lsls	r6, r6, #16
 8001406:	4342      	muls	r2, r0
 8001408:	0409      	lsls	r1, r1, #16
 800140a:	0c36      	lsrs	r6, r6, #16
 800140c:	0003      	movs	r3, r0
 800140e:	430e      	orrs	r6, r1
 8001410:	42b2      	cmp	r2, r6
 8001412:	d904      	bls.n	800141e <__aeabi_ddiv+0x152>
 8001414:	1936      	adds	r6, r6, r4
 8001416:	3b01      	subs	r3, #1
 8001418:	42b4      	cmp	r4, r6
 800141a:	d800      	bhi.n	800141e <__aeabi_ddiv+0x152>
 800141c:	e1e9      	b.n	80017f2 <__aeabi_ddiv+0x526>
 800141e:	1ab0      	subs	r0, r6, r2
 8001420:	4642      	mov	r2, r8
 8001422:	9e00      	ldr	r6, [sp, #0]
 8001424:	0412      	lsls	r2, r2, #16
 8001426:	431a      	orrs	r2, r3
 8001428:	0c33      	lsrs	r3, r6, #16
 800142a:	001f      	movs	r7, r3
 800142c:	0c11      	lsrs	r1, r2, #16
 800142e:	4690      	mov	r8, r2
 8001430:	9302      	str	r3, [sp, #8]
 8001432:	0413      	lsls	r3, r2, #16
 8001434:	0432      	lsls	r2, r6, #16
 8001436:	0c16      	lsrs	r6, r2, #16
 8001438:	0032      	movs	r2, r6
 800143a:	0c1b      	lsrs	r3, r3, #16
 800143c:	435a      	muls	r2, r3
 800143e:	9603      	str	r6, [sp, #12]
 8001440:	437b      	muls	r3, r7
 8001442:	434e      	muls	r6, r1
 8001444:	4379      	muls	r1, r7
 8001446:	0c17      	lsrs	r7, r2, #16
 8001448:	46bc      	mov	ip, r7
 800144a:	199b      	adds	r3, r3, r6
 800144c:	4463      	add	r3, ip
 800144e:	429e      	cmp	r6, r3
 8001450:	d903      	bls.n	800145a <__aeabi_ddiv+0x18e>
 8001452:	2680      	movs	r6, #128	; 0x80
 8001454:	0276      	lsls	r6, r6, #9
 8001456:	46b4      	mov	ip, r6
 8001458:	4461      	add	r1, ip
 800145a:	0c1e      	lsrs	r6, r3, #16
 800145c:	1871      	adds	r1, r6, r1
 800145e:	0416      	lsls	r6, r2, #16
 8001460:	041b      	lsls	r3, r3, #16
 8001462:	0c36      	lsrs	r6, r6, #16
 8001464:	199e      	adds	r6, r3, r6
 8001466:	4288      	cmp	r0, r1
 8001468:	d302      	bcc.n	8001470 <__aeabi_ddiv+0x1a4>
 800146a:	d112      	bne.n	8001492 <__aeabi_ddiv+0x1c6>
 800146c:	42b5      	cmp	r5, r6
 800146e:	d210      	bcs.n	8001492 <__aeabi_ddiv+0x1c6>
 8001470:	4643      	mov	r3, r8
 8001472:	1e5a      	subs	r2, r3, #1
 8001474:	9b00      	ldr	r3, [sp, #0]
 8001476:	469c      	mov	ip, r3
 8001478:	4465      	add	r5, ip
 800147a:	001f      	movs	r7, r3
 800147c:	429d      	cmp	r5, r3
 800147e:	419b      	sbcs	r3, r3
 8001480:	425b      	negs	r3, r3
 8001482:	191b      	adds	r3, r3, r4
 8001484:	18c0      	adds	r0, r0, r3
 8001486:	4284      	cmp	r4, r0
 8001488:	d200      	bcs.n	800148c <__aeabi_ddiv+0x1c0>
 800148a:	e19e      	b.n	80017ca <__aeabi_ddiv+0x4fe>
 800148c:	d100      	bne.n	8001490 <__aeabi_ddiv+0x1c4>
 800148e:	e199      	b.n	80017c4 <__aeabi_ddiv+0x4f8>
 8001490:	4690      	mov	r8, r2
 8001492:	1bae      	subs	r6, r5, r6
 8001494:	42b5      	cmp	r5, r6
 8001496:	41ad      	sbcs	r5, r5
 8001498:	1a40      	subs	r0, r0, r1
 800149a:	426d      	negs	r5, r5
 800149c:	1b40      	subs	r0, r0, r5
 800149e:	4284      	cmp	r4, r0
 80014a0:	d100      	bne.n	80014a4 <__aeabi_ddiv+0x1d8>
 80014a2:	e1d2      	b.n	800184a <__aeabi_ddiv+0x57e>
 80014a4:	4649      	mov	r1, r9
 80014a6:	f7fe feb3 	bl	8000210 <__aeabi_uidivmod>
 80014aa:	9a01      	ldr	r2, [sp, #4]
 80014ac:	040b      	lsls	r3, r1, #16
 80014ae:	4342      	muls	r2, r0
 80014b0:	0c31      	lsrs	r1, r6, #16
 80014b2:	0005      	movs	r5, r0
 80014b4:	4319      	orrs	r1, r3
 80014b6:	428a      	cmp	r2, r1
 80014b8:	d900      	bls.n	80014bc <__aeabi_ddiv+0x1f0>
 80014ba:	e16c      	b.n	8001796 <__aeabi_ddiv+0x4ca>
 80014bc:	1a88      	subs	r0, r1, r2
 80014be:	4649      	mov	r1, r9
 80014c0:	f7fe fea6 	bl	8000210 <__aeabi_uidivmod>
 80014c4:	9a01      	ldr	r2, [sp, #4]
 80014c6:	0436      	lsls	r6, r6, #16
 80014c8:	4342      	muls	r2, r0
 80014ca:	0409      	lsls	r1, r1, #16
 80014cc:	0c36      	lsrs	r6, r6, #16
 80014ce:	0003      	movs	r3, r0
 80014d0:	430e      	orrs	r6, r1
 80014d2:	42b2      	cmp	r2, r6
 80014d4:	d900      	bls.n	80014d8 <__aeabi_ddiv+0x20c>
 80014d6:	e153      	b.n	8001780 <__aeabi_ddiv+0x4b4>
 80014d8:	9803      	ldr	r0, [sp, #12]
 80014da:	1ab6      	subs	r6, r6, r2
 80014dc:	0002      	movs	r2, r0
 80014de:	042d      	lsls	r5, r5, #16
 80014e0:	431d      	orrs	r5, r3
 80014e2:	9f02      	ldr	r7, [sp, #8]
 80014e4:	042b      	lsls	r3, r5, #16
 80014e6:	0c1b      	lsrs	r3, r3, #16
 80014e8:	435a      	muls	r2, r3
 80014ea:	437b      	muls	r3, r7
 80014ec:	469c      	mov	ip, r3
 80014ee:	0c29      	lsrs	r1, r5, #16
 80014f0:	4348      	muls	r0, r1
 80014f2:	0c13      	lsrs	r3, r2, #16
 80014f4:	4484      	add	ip, r0
 80014f6:	4463      	add	r3, ip
 80014f8:	4379      	muls	r1, r7
 80014fa:	4298      	cmp	r0, r3
 80014fc:	d903      	bls.n	8001506 <__aeabi_ddiv+0x23a>
 80014fe:	2080      	movs	r0, #128	; 0x80
 8001500:	0240      	lsls	r0, r0, #9
 8001502:	4684      	mov	ip, r0
 8001504:	4461      	add	r1, ip
 8001506:	0c18      	lsrs	r0, r3, #16
 8001508:	0412      	lsls	r2, r2, #16
 800150a:	041b      	lsls	r3, r3, #16
 800150c:	0c12      	lsrs	r2, r2, #16
 800150e:	1840      	adds	r0, r0, r1
 8001510:	189b      	adds	r3, r3, r2
 8001512:	4286      	cmp	r6, r0
 8001514:	d200      	bcs.n	8001518 <__aeabi_ddiv+0x24c>
 8001516:	e100      	b.n	800171a <__aeabi_ddiv+0x44e>
 8001518:	d100      	bne.n	800151c <__aeabi_ddiv+0x250>
 800151a:	e0fb      	b.n	8001714 <__aeabi_ddiv+0x448>
 800151c:	2301      	movs	r3, #1
 800151e:	431d      	orrs	r5, r3
 8001520:	4b49      	ldr	r3, [pc, #292]	; (8001648 <__aeabi_ddiv+0x37c>)
 8001522:	445b      	add	r3, fp
 8001524:	2b00      	cmp	r3, #0
 8001526:	dc00      	bgt.n	800152a <__aeabi_ddiv+0x25e>
 8001528:	e0aa      	b.n	8001680 <__aeabi_ddiv+0x3b4>
 800152a:	076a      	lsls	r2, r5, #29
 800152c:	d000      	beq.n	8001530 <__aeabi_ddiv+0x264>
 800152e:	e13d      	b.n	80017ac <__aeabi_ddiv+0x4e0>
 8001530:	08e9      	lsrs	r1, r5, #3
 8001532:	4642      	mov	r2, r8
 8001534:	01d2      	lsls	r2, r2, #7
 8001536:	d506      	bpl.n	8001546 <__aeabi_ddiv+0x27a>
 8001538:	4642      	mov	r2, r8
 800153a:	4b44      	ldr	r3, [pc, #272]	; (800164c <__aeabi_ddiv+0x380>)
 800153c:	401a      	ands	r2, r3
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	4690      	mov	r8, r2
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	445b      	add	r3, fp
 8001546:	4a42      	ldr	r2, [pc, #264]	; (8001650 <__aeabi_ddiv+0x384>)
 8001548:	4293      	cmp	r3, r2
 800154a:	dd00      	ble.n	800154e <__aeabi_ddiv+0x282>
 800154c:	e723      	b.n	8001396 <__aeabi_ddiv+0xca>
 800154e:	4642      	mov	r2, r8
 8001550:	055b      	lsls	r3, r3, #21
 8001552:	0755      	lsls	r5, r2, #29
 8001554:	0252      	lsls	r2, r2, #9
 8001556:	430d      	orrs	r5, r1
 8001558:	0b12      	lsrs	r2, r2, #12
 800155a:	0d5b      	lsrs	r3, r3, #21
 800155c:	e70d      	b.n	800137a <__aeabi_ddiv+0xae>
 800155e:	4651      	mov	r1, sl
 8001560:	4321      	orrs	r1, r4
 8001562:	d100      	bne.n	8001566 <__aeabi_ddiv+0x29a>
 8001564:	e07c      	b.n	8001660 <__aeabi_ddiv+0x394>
 8001566:	2c00      	cmp	r4, #0
 8001568:	d100      	bne.n	800156c <__aeabi_ddiv+0x2a0>
 800156a:	e0fb      	b.n	8001764 <__aeabi_ddiv+0x498>
 800156c:	0020      	movs	r0, r4
 800156e:	f001 fa45 	bl	80029fc <__clzsi2>
 8001572:	0002      	movs	r2, r0
 8001574:	3a0b      	subs	r2, #11
 8001576:	231d      	movs	r3, #29
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	4652      	mov	r2, sl
 800157c:	0001      	movs	r1, r0
 800157e:	40da      	lsrs	r2, r3
 8001580:	4653      	mov	r3, sl
 8001582:	3908      	subs	r1, #8
 8001584:	408b      	lsls	r3, r1
 8001586:	408c      	lsls	r4, r1
 8001588:	0019      	movs	r1, r3
 800158a:	4314      	orrs	r4, r2
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <__aeabi_ddiv+0x388>)
 800158e:	4458      	add	r0, fp
 8001590:	469b      	mov	fp, r3
 8001592:	4483      	add	fp, r0
 8001594:	2000      	movs	r0, #0
 8001596:	e6d9      	b.n	800134c <__aeabi_ddiv+0x80>
 8001598:	0003      	movs	r3, r0
 800159a:	4323      	orrs	r3, r4
 800159c:	4698      	mov	r8, r3
 800159e:	d044      	beq.n	800162a <__aeabi_ddiv+0x35e>
 80015a0:	2c00      	cmp	r4, #0
 80015a2:	d100      	bne.n	80015a6 <__aeabi_ddiv+0x2da>
 80015a4:	e0cf      	b.n	8001746 <__aeabi_ddiv+0x47a>
 80015a6:	0020      	movs	r0, r4
 80015a8:	f001 fa28 	bl	80029fc <__clzsi2>
 80015ac:	0001      	movs	r1, r0
 80015ae:	0002      	movs	r2, r0
 80015b0:	390b      	subs	r1, #11
 80015b2:	231d      	movs	r3, #29
 80015b4:	1a5b      	subs	r3, r3, r1
 80015b6:	4649      	mov	r1, r9
 80015b8:	0010      	movs	r0, r2
 80015ba:	40d9      	lsrs	r1, r3
 80015bc:	3808      	subs	r0, #8
 80015be:	4084      	lsls	r4, r0
 80015c0:	000b      	movs	r3, r1
 80015c2:	464d      	mov	r5, r9
 80015c4:	4323      	orrs	r3, r4
 80015c6:	4698      	mov	r8, r3
 80015c8:	4085      	lsls	r5, r0
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <__aeabi_ddiv+0x38c>)
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	469b      	mov	fp, r3
 80015d0:	2300      	movs	r3, #0
 80015d2:	4699      	mov	r9, r3
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	e69e      	b.n	8001316 <__aeabi_ddiv+0x4a>
 80015d8:	0002      	movs	r2, r0
 80015da:	4322      	orrs	r2, r4
 80015dc:	4690      	mov	r8, r2
 80015de:	d11d      	bne.n	800161c <__aeabi_ddiv+0x350>
 80015e0:	2208      	movs	r2, #8
 80015e2:	469b      	mov	fp, r3
 80015e4:	2302      	movs	r3, #2
 80015e6:	2500      	movs	r5, #0
 80015e8:	4691      	mov	r9, r2
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	e693      	b.n	8001316 <__aeabi_ddiv+0x4a>
 80015ee:	4651      	mov	r1, sl
 80015f0:	4321      	orrs	r1, r4
 80015f2:	d109      	bne.n	8001608 <__aeabi_ddiv+0x33c>
 80015f4:	2302      	movs	r3, #2
 80015f6:	464a      	mov	r2, r9
 80015f8:	431a      	orrs	r2, r3
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <__aeabi_ddiv+0x390>)
 80015fc:	4691      	mov	r9, r2
 80015fe:	469c      	mov	ip, r3
 8001600:	2400      	movs	r4, #0
 8001602:	2002      	movs	r0, #2
 8001604:	44e3      	add	fp, ip
 8001606:	e6a1      	b.n	800134c <__aeabi_ddiv+0x80>
 8001608:	2303      	movs	r3, #3
 800160a:	464a      	mov	r2, r9
 800160c:	431a      	orrs	r2, r3
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <__aeabi_ddiv+0x390>)
 8001610:	4691      	mov	r9, r2
 8001612:	469c      	mov	ip, r3
 8001614:	4651      	mov	r1, sl
 8001616:	2003      	movs	r0, #3
 8001618:	44e3      	add	fp, ip
 800161a:	e697      	b.n	800134c <__aeabi_ddiv+0x80>
 800161c:	220c      	movs	r2, #12
 800161e:	469b      	mov	fp, r3
 8001620:	2303      	movs	r3, #3
 8001622:	46a0      	mov	r8, r4
 8001624:	4691      	mov	r9, r2
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	e675      	b.n	8001316 <__aeabi_ddiv+0x4a>
 800162a:	2304      	movs	r3, #4
 800162c:	4699      	mov	r9, r3
 800162e:	2300      	movs	r3, #0
 8001630:	469b      	mov	fp, r3
 8001632:	3301      	adds	r3, #1
 8001634:	2500      	movs	r5, #0
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	e66d      	b.n	8001316 <__aeabi_ddiv+0x4a>
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	000007ff 	.word	0x000007ff
 8001640:	fffffc01 	.word	0xfffffc01
 8001644:	08008b10 	.word	0x08008b10
 8001648:	000003ff 	.word	0x000003ff
 800164c:	feffffff 	.word	0xfeffffff
 8001650:	000007fe 	.word	0x000007fe
 8001654:	000003f3 	.word	0x000003f3
 8001658:	fffffc0d 	.word	0xfffffc0d
 800165c:	fffff801 	.word	0xfffff801
 8001660:	464a      	mov	r2, r9
 8001662:	2301      	movs	r3, #1
 8001664:	431a      	orrs	r2, r3
 8001666:	4691      	mov	r9, r2
 8001668:	2400      	movs	r4, #0
 800166a:	2001      	movs	r0, #1
 800166c:	e66e      	b.n	800134c <__aeabi_ddiv+0x80>
 800166e:	2300      	movs	r3, #0
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	469a      	mov	sl, r3
 8001674:	2500      	movs	r5, #0
 8001676:	4b88      	ldr	r3, [pc, #544]	; (8001898 <__aeabi_ddiv+0x5cc>)
 8001678:	0312      	lsls	r2, r2, #12
 800167a:	e67e      	b.n	800137a <__aeabi_ddiv+0xae>
 800167c:	2501      	movs	r5, #1
 800167e:	426d      	negs	r5, r5
 8001680:	2201      	movs	r2, #1
 8001682:	1ad2      	subs	r2, r2, r3
 8001684:	2a38      	cmp	r2, #56	; 0x38
 8001686:	dd00      	ble.n	800168a <__aeabi_ddiv+0x3be>
 8001688:	e674      	b.n	8001374 <__aeabi_ddiv+0xa8>
 800168a:	2a1f      	cmp	r2, #31
 800168c:	dc00      	bgt.n	8001690 <__aeabi_ddiv+0x3c4>
 800168e:	e0bd      	b.n	800180c <__aeabi_ddiv+0x540>
 8001690:	211f      	movs	r1, #31
 8001692:	4249      	negs	r1, r1
 8001694:	1acb      	subs	r3, r1, r3
 8001696:	4641      	mov	r1, r8
 8001698:	40d9      	lsrs	r1, r3
 800169a:	000b      	movs	r3, r1
 800169c:	2a20      	cmp	r2, #32
 800169e:	d004      	beq.n	80016aa <__aeabi_ddiv+0x3de>
 80016a0:	4641      	mov	r1, r8
 80016a2:	4a7e      	ldr	r2, [pc, #504]	; (800189c <__aeabi_ddiv+0x5d0>)
 80016a4:	445a      	add	r2, fp
 80016a6:	4091      	lsls	r1, r2
 80016a8:	430d      	orrs	r5, r1
 80016aa:	0029      	movs	r1, r5
 80016ac:	1e4a      	subs	r2, r1, #1
 80016ae:	4191      	sbcs	r1, r2
 80016b0:	4319      	orrs	r1, r3
 80016b2:	2307      	movs	r3, #7
 80016b4:	001d      	movs	r5, r3
 80016b6:	2200      	movs	r2, #0
 80016b8:	400d      	ands	r5, r1
 80016ba:	420b      	tst	r3, r1
 80016bc:	d100      	bne.n	80016c0 <__aeabi_ddiv+0x3f4>
 80016be:	e0d0      	b.n	8001862 <__aeabi_ddiv+0x596>
 80016c0:	220f      	movs	r2, #15
 80016c2:	2300      	movs	r3, #0
 80016c4:	400a      	ands	r2, r1
 80016c6:	2a04      	cmp	r2, #4
 80016c8:	d100      	bne.n	80016cc <__aeabi_ddiv+0x400>
 80016ca:	e0c7      	b.n	800185c <__aeabi_ddiv+0x590>
 80016cc:	1d0a      	adds	r2, r1, #4
 80016ce:	428a      	cmp	r2, r1
 80016d0:	4189      	sbcs	r1, r1
 80016d2:	4249      	negs	r1, r1
 80016d4:	185b      	adds	r3, r3, r1
 80016d6:	0011      	movs	r1, r2
 80016d8:	021a      	lsls	r2, r3, #8
 80016da:	d400      	bmi.n	80016de <__aeabi_ddiv+0x412>
 80016dc:	e0be      	b.n	800185c <__aeabi_ddiv+0x590>
 80016de:	2301      	movs	r3, #1
 80016e0:	2200      	movs	r2, #0
 80016e2:	2500      	movs	r5, #0
 80016e4:	e649      	b.n	800137a <__aeabi_ddiv+0xae>
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	4643      	mov	r3, r8
 80016ea:	0312      	lsls	r2, r2, #12
 80016ec:	4213      	tst	r3, r2
 80016ee:	d008      	beq.n	8001702 <__aeabi_ddiv+0x436>
 80016f0:	4214      	tst	r4, r2
 80016f2:	d106      	bne.n	8001702 <__aeabi_ddiv+0x436>
 80016f4:	4322      	orrs	r2, r4
 80016f6:	0312      	lsls	r2, r2, #12
 80016f8:	46ba      	mov	sl, r7
 80016fa:	000d      	movs	r5, r1
 80016fc:	4b66      	ldr	r3, [pc, #408]	; (8001898 <__aeabi_ddiv+0x5cc>)
 80016fe:	0b12      	lsrs	r2, r2, #12
 8001700:	e63b      	b.n	800137a <__aeabi_ddiv+0xae>
 8001702:	2280      	movs	r2, #128	; 0x80
 8001704:	4643      	mov	r3, r8
 8001706:	0312      	lsls	r2, r2, #12
 8001708:	431a      	orrs	r2, r3
 800170a:	0312      	lsls	r2, r2, #12
 800170c:	46b2      	mov	sl, r6
 800170e:	4b62      	ldr	r3, [pc, #392]	; (8001898 <__aeabi_ddiv+0x5cc>)
 8001710:	0b12      	lsrs	r2, r2, #12
 8001712:	e632      	b.n	800137a <__aeabi_ddiv+0xae>
 8001714:	2b00      	cmp	r3, #0
 8001716:	d100      	bne.n	800171a <__aeabi_ddiv+0x44e>
 8001718:	e702      	b.n	8001520 <__aeabi_ddiv+0x254>
 800171a:	19a6      	adds	r6, r4, r6
 800171c:	1e6a      	subs	r2, r5, #1
 800171e:	42a6      	cmp	r6, r4
 8001720:	d200      	bcs.n	8001724 <__aeabi_ddiv+0x458>
 8001722:	e089      	b.n	8001838 <__aeabi_ddiv+0x56c>
 8001724:	4286      	cmp	r6, r0
 8001726:	d200      	bcs.n	800172a <__aeabi_ddiv+0x45e>
 8001728:	e09f      	b.n	800186a <__aeabi_ddiv+0x59e>
 800172a:	d100      	bne.n	800172e <__aeabi_ddiv+0x462>
 800172c:	e0af      	b.n	800188e <__aeabi_ddiv+0x5c2>
 800172e:	0015      	movs	r5, r2
 8001730:	e6f4      	b.n	800151c <__aeabi_ddiv+0x250>
 8001732:	42a9      	cmp	r1, r5
 8001734:	d900      	bls.n	8001738 <__aeabi_ddiv+0x46c>
 8001736:	e63c      	b.n	80013b2 <__aeabi_ddiv+0xe6>
 8001738:	4643      	mov	r3, r8
 800173a:	07de      	lsls	r6, r3, #31
 800173c:	0858      	lsrs	r0, r3, #1
 800173e:	086b      	lsrs	r3, r5, #1
 8001740:	431e      	orrs	r6, r3
 8001742:	07ed      	lsls	r5, r5, #31
 8001744:	e63c      	b.n	80013c0 <__aeabi_ddiv+0xf4>
 8001746:	f001 f959 	bl	80029fc <__clzsi2>
 800174a:	0001      	movs	r1, r0
 800174c:	0002      	movs	r2, r0
 800174e:	3115      	adds	r1, #21
 8001750:	3220      	adds	r2, #32
 8001752:	291c      	cmp	r1, #28
 8001754:	dc00      	bgt.n	8001758 <__aeabi_ddiv+0x48c>
 8001756:	e72c      	b.n	80015b2 <__aeabi_ddiv+0x2e6>
 8001758:	464b      	mov	r3, r9
 800175a:	3808      	subs	r0, #8
 800175c:	4083      	lsls	r3, r0
 800175e:	2500      	movs	r5, #0
 8001760:	4698      	mov	r8, r3
 8001762:	e732      	b.n	80015ca <__aeabi_ddiv+0x2fe>
 8001764:	f001 f94a 	bl	80029fc <__clzsi2>
 8001768:	0003      	movs	r3, r0
 800176a:	001a      	movs	r2, r3
 800176c:	3215      	adds	r2, #21
 800176e:	3020      	adds	r0, #32
 8001770:	2a1c      	cmp	r2, #28
 8001772:	dc00      	bgt.n	8001776 <__aeabi_ddiv+0x4aa>
 8001774:	e6ff      	b.n	8001576 <__aeabi_ddiv+0x2aa>
 8001776:	4654      	mov	r4, sl
 8001778:	3b08      	subs	r3, #8
 800177a:	2100      	movs	r1, #0
 800177c:	409c      	lsls	r4, r3
 800177e:	e705      	b.n	800158c <__aeabi_ddiv+0x2c0>
 8001780:	1936      	adds	r6, r6, r4
 8001782:	3b01      	subs	r3, #1
 8001784:	42b4      	cmp	r4, r6
 8001786:	d900      	bls.n	800178a <__aeabi_ddiv+0x4be>
 8001788:	e6a6      	b.n	80014d8 <__aeabi_ddiv+0x20c>
 800178a:	42b2      	cmp	r2, r6
 800178c:	d800      	bhi.n	8001790 <__aeabi_ddiv+0x4c4>
 800178e:	e6a3      	b.n	80014d8 <__aeabi_ddiv+0x20c>
 8001790:	1e83      	subs	r3, r0, #2
 8001792:	1936      	adds	r6, r6, r4
 8001794:	e6a0      	b.n	80014d8 <__aeabi_ddiv+0x20c>
 8001796:	1909      	adds	r1, r1, r4
 8001798:	3d01      	subs	r5, #1
 800179a:	428c      	cmp	r4, r1
 800179c:	d900      	bls.n	80017a0 <__aeabi_ddiv+0x4d4>
 800179e:	e68d      	b.n	80014bc <__aeabi_ddiv+0x1f0>
 80017a0:	428a      	cmp	r2, r1
 80017a2:	d800      	bhi.n	80017a6 <__aeabi_ddiv+0x4da>
 80017a4:	e68a      	b.n	80014bc <__aeabi_ddiv+0x1f0>
 80017a6:	1e85      	subs	r5, r0, #2
 80017a8:	1909      	adds	r1, r1, r4
 80017aa:	e687      	b.n	80014bc <__aeabi_ddiv+0x1f0>
 80017ac:	220f      	movs	r2, #15
 80017ae:	402a      	ands	r2, r5
 80017b0:	2a04      	cmp	r2, #4
 80017b2:	d100      	bne.n	80017b6 <__aeabi_ddiv+0x4ea>
 80017b4:	e6bc      	b.n	8001530 <__aeabi_ddiv+0x264>
 80017b6:	1d29      	adds	r1, r5, #4
 80017b8:	42a9      	cmp	r1, r5
 80017ba:	41ad      	sbcs	r5, r5
 80017bc:	426d      	negs	r5, r5
 80017be:	08c9      	lsrs	r1, r1, #3
 80017c0:	44a8      	add	r8, r5
 80017c2:	e6b6      	b.n	8001532 <__aeabi_ddiv+0x266>
 80017c4:	42af      	cmp	r7, r5
 80017c6:	d900      	bls.n	80017ca <__aeabi_ddiv+0x4fe>
 80017c8:	e662      	b.n	8001490 <__aeabi_ddiv+0x1c4>
 80017ca:	4281      	cmp	r1, r0
 80017cc:	d804      	bhi.n	80017d8 <__aeabi_ddiv+0x50c>
 80017ce:	d000      	beq.n	80017d2 <__aeabi_ddiv+0x506>
 80017d0:	e65e      	b.n	8001490 <__aeabi_ddiv+0x1c4>
 80017d2:	42ae      	cmp	r6, r5
 80017d4:	d800      	bhi.n	80017d8 <__aeabi_ddiv+0x50c>
 80017d6:	e65b      	b.n	8001490 <__aeabi_ddiv+0x1c4>
 80017d8:	2302      	movs	r3, #2
 80017da:	425b      	negs	r3, r3
 80017dc:	469c      	mov	ip, r3
 80017de:	9b00      	ldr	r3, [sp, #0]
 80017e0:	44e0      	add	r8, ip
 80017e2:	469c      	mov	ip, r3
 80017e4:	4465      	add	r5, ip
 80017e6:	429d      	cmp	r5, r3
 80017e8:	419b      	sbcs	r3, r3
 80017ea:	425b      	negs	r3, r3
 80017ec:	191b      	adds	r3, r3, r4
 80017ee:	18c0      	adds	r0, r0, r3
 80017f0:	e64f      	b.n	8001492 <__aeabi_ddiv+0x1c6>
 80017f2:	42b2      	cmp	r2, r6
 80017f4:	d800      	bhi.n	80017f8 <__aeabi_ddiv+0x52c>
 80017f6:	e612      	b.n	800141e <__aeabi_ddiv+0x152>
 80017f8:	1e83      	subs	r3, r0, #2
 80017fa:	1936      	adds	r6, r6, r4
 80017fc:	e60f      	b.n	800141e <__aeabi_ddiv+0x152>
 80017fe:	428a      	cmp	r2, r1
 8001800:	d800      	bhi.n	8001804 <__aeabi_ddiv+0x538>
 8001802:	e5fa      	b.n	80013fa <__aeabi_ddiv+0x12e>
 8001804:	1e83      	subs	r3, r0, #2
 8001806:	4698      	mov	r8, r3
 8001808:	1909      	adds	r1, r1, r4
 800180a:	e5f6      	b.n	80013fa <__aeabi_ddiv+0x12e>
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <__aeabi_ddiv+0x5d4>)
 800180e:	0028      	movs	r0, r5
 8001810:	445b      	add	r3, fp
 8001812:	4641      	mov	r1, r8
 8001814:	409d      	lsls	r5, r3
 8001816:	4099      	lsls	r1, r3
 8001818:	40d0      	lsrs	r0, r2
 800181a:	1e6b      	subs	r3, r5, #1
 800181c:	419d      	sbcs	r5, r3
 800181e:	4643      	mov	r3, r8
 8001820:	4301      	orrs	r1, r0
 8001822:	4329      	orrs	r1, r5
 8001824:	40d3      	lsrs	r3, r2
 8001826:	074a      	lsls	r2, r1, #29
 8001828:	d100      	bne.n	800182c <__aeabi_ddiv+0x560>
 800182a:	e755      	b.n	80016d8 <__aeabi_ddiv+0x40c>
 800182c:	220f      	movs	r2, #15
 800182e:	400a      	ands	r2, r1
 8001830:	2a04      	cmp	r2, #4
 8001832:	d000      	beq.n	8001836 <__aeabi_ddiv+0x56a>
 8001834:	e74a      	b.n	80016cc <__aeabi_ddiv+0x400>
 8001836:	e74f      	b.n	80016d8 <__aeabi_ddiv+0x40c>
 8001838:	0015      	movs	r5, r2
 800183a:	4286      	cmp	r6, r0
 800183c:	d000      	beq.n	8001840 <__aeabi_ddiv+0x574>
 800183e:	e66d      	b.n	800151c <__aeabi_ddiv+0x250>
 8001840:	9a00      	ldr	r2, [sp, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d000      	beq.n	8001848 <__aeabi_ddiv+0x57c>
 8001846:	e669      	b.n	800151c <__aeabi_ddiv+0x250>
 8001848:	e66a      	b.n	8001520 <__aeabi_ddiv+0x254>
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <__aeabi_ddiv+0x5d8>)
 800184c:	445b      	add	r3, fp
 800184e:	2b00      	cmp	r3, #0
 8001850:	dc00      	bgt.n	8001854 <__aeabi_ddiv+0x588>
 8001852:	e713      	b.n	800167c <__aeabi_ddiv+0x3b0>
 8001854:	2501      	movs	r5, #1
 8001856:	2100      	movs	r1, #0
 8001858:	44a8      	add	r8, r5
 800185a:	e66a      	b.n	8001532 <__aeabi_ddiv+0x266>
 800185c:	075d      	lsls	r5, r3, #29
 800185e:	025b      	lsls	r3, r3, #9
 8001860:	0b1a      	lsrs	r2, r3, #12
 8001862:	08c9      	lsrs	r1, r1, #3
 8001864:	2300      	movs	r3, #0
 8001866:	430d      	orrs	r5, r1
 8001868:	e587      	b.n	800137a <__aeabi_ddiv+0xae>
 800186a:	9900      	ldr	r1, [sp, #0]
 800186c:	3d02      	subs	r5, #2
 800186e:	004a      	lsls	r2, r1, #1
 8001870:	428a      	cmp	r2, r1
 8001872:	41bf      	sbcs	r7, r7
 8001874:	427f      	negs	r7, r7
 8001876:	193f      	adds	r7, r7, r4
 8001878:	19f6      	adds	r6, r6, r7
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	e7dd      	b.n	800183a <__aeabi_ddiv+0x56e>
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	4643      	mov	r3, r8
 8001882:	0312      	lsls	r2, r2, #12
 8001884:	431a      	orrs	r2, r3
 8001886:	0312      	lsls	r2, r2, #12
 8001888:	4b03      	ldr	r3, [pc, #12]	; (8001898 <__aeabi_ddiv+0x5cc>)
 800188a:	0b12      	lsrs	r2, r2, #12
 800188c:	e575      	b.n	800137a <__aeabi_ddiv+0xae>
 800188e:	9900      	ldr	r1, [sp, #0]
 8001890:	4299      	cmp	r1, r3
 8001892:	d3ea      	bcc.n	800186a <__aeabi_ddiv+0x59e>
 8001894:	0015      	movs	r5, r2
 8001896:	e7d3      	b.n	8001840 <__aeabi_ddiv+0x574>
 8001898:	000007ff 	.word	0x000007ff
 800189c:	0000043e 	.word	0x0000043e
 80018a0:	0000041e 	.word	0x0000041e
 80018a4:	000003ff 	.word	0x000003ff

080018a8 <__eqdf2>:
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	464e      	mov	r6, r9
 80018ac:	4645      	mov	r5, r8
 80018ae:	46de      	mov	lr, fp
 80018b0:	4657      	mov	r7, sl
 80018b2:	4690      	mov	r8, r2
 80018b4:	b5e0      	push	{r5, r6, r7, lr}
 80018b6:	0017      	movs	r7, r2
 80018b8:	031a      	lsls	r2, r3, #12
 80018ba:	0b12      	lsrs	r2, r2, #12
 80018bc:	0005      	movs	r5, r0
 80018be:	4684      	mov	ip, r0
 80018c0:	4819      	ldr	r0, [pc, #100]	; (8001928 <__eqdf2+0x80>)
 80018c2:	030e      	lsls	r6, r1, #12
 80018c4:	004c      	lsls	r4, r1, #1
 80018c6:	4691      	mov	r9, r2
 80018c8:	005a      	lsls	r2, r3, #1
 80018ca:	0fdb      	lsrs	r3, r3, #31
 80018cc:	469b      	mov	fp, r3
 80018ce:	0b36      	lsrs	r6, r6, #12
 80018d0:	0d64      	lsrs	r4, r4, #21
 80018d2:	0fc9      	lsrs	r1, r1, #31
 80018d4:	0d52      	lsrs	r2, r2, #21
 80018d6:	4284      	cmp	r4, r0
 80018d8:	d019      	beq.n	800190e <__eqdf2+0x66>
 80018da:	4282      	cmp	r2, r0
 80018dc:	d010      	beq.n	8001900 <__eqdf2+0x58>
 80018de:	2001      	movs	r0, #1
 80018e0:	4294      	cmp	r4, r2
 80018e2:	d10e      	bne.n	8001902 <__eqdf2+0x5a>
 80018e4:	454e      	cmp	r6, r9
 80018e6:	d10c      	bne.n	8001902 <__eqdf2+0x5a>
 80018e8:	2001      	movs	r0, #1
 80018ea:	45c4      	cmp	ip, r8
 80018ec:	d109      	bne.n	8001902 <__eqdf2+0x5a>
 80018ee:	4559      	cmp	r1, fp
 80018f0:	d017      	beq.n	8001922 <__eqdf2+0x7a>
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d105      	bne.n	8001902 <__eqdf2+0x5a>
 80018f6:	0030      	movs	r0, r6
 80018f8:	4328      	orrs	r0, r5
 80018fa:	1e43      	subs	r3, r0, #1
 80018fc:	4198      	sbcs	r0, r3
 80018fe:	e000      	b.n	8001902 <__eqdf2+0x5a>
 8001900:	2001      	movs	r0, #1
 8001902:	bcf0      	pop	{r4, r5, r6, r7}
 8001904:	46bb      	mov	fp, r7
 8001906:	46b2      	mov	sl, r6
 8001908:	46a9      	mov	r9, r5
 800190a:	46a0      	mov	r8, r4
 800190c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800190e:	0033      	movs	r3, r6
 8001910:	2001      	movs	r0, #1
 8001912:	432b      	orrs	r3, r5
 8001914:	d1f5      	bne.n	8001902 <__eqdf2+0x5a>
 8001916:	42a2      	cmp	r2, r4
 8001918:	d1f3      	bne.n	8001902 <__eqdf2+0x5a>
 800191a:	464b      	mov	r3, r9
 800191c:	433b      	orrs	r3, r7
 800191e:	d1f0      	bne.n	8001902 <__eqdf2+0x5a>
 8001920:	e7e2      	b.n	80018e8 <__eqdf2+0x40>
 8001922:	2000      	movs	r0, #0
 8001924:	e7ed      	b.n	8001902 <__eqdf2+0x5a>
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	000007ff 	.word	0x000007ff

0800192c <__gedf2>:
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	4647      	mov	r7, r8
 8001930:	46ce      	mov	lr, r9
 8001932:	0004      	movs	r4, r0
 8001934:	0018      	movs	r0, r3
 8001936:	0016      	movs	r6, r2
 8001938:	031b      	lsls	r3, r3, #12
 800193a:	0b1b      	lsrs	r3, r3, #12
 800193c:	4d2d      	ldr	r5, [pc, #180]	; (80019f4 <__gedf2+0xc8>)
 800193e:	004a      	lsls	r2, r1, #1
 8001940:	4699      	mov	r9, r3
 8001942:	b580      	push	{r7, lr}
 8001944:	0043      	lsls	r3, r0, #1
 8001946:	030f      	lsls	r7, r1, #12
 8001948:	46a4      	mov	ip, r4
 800194a:	46b0      	mov	r8, r6
 800194c:	0b3f      	lsrs	r7, r7, #12
 800194e:	0d52      	lsrs	r2, r2, #21
 8001950:	0fc9      	lsrs	r1, r1, #31
 8001952:	0d5b      	lsrs	r3, r3, #21
 8001954:	0fc0      	lsrs	r0, r0, #31
 8001956:	42aa      	cmp	r2, r5
 8001958:	d021      	beq.n	800199e <__gedf2+0x72>
 800195a:	42ab      	cmp	r3, r5
 800195c:	d013      	beq.n	8001986 <__gedf2+0x5a>
 800195e:	2a00      	cmp	r2, #0
 8001960:	d122      	bne.n	80019a8 <__gedf2+0x7c>
 8001962:	433c      	orrs	r4, r7
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <__gedf2+0x42>
 8001968:	464d      	mov	r5, r9
 800196a:	432e      	orrs	r6, r5
 800196c:	d022      	beq.n	80019b4 <__gedf2+0x88>
 800196e:	2c00      	cmp	r4, #0
 8001970:	d010      	beq.n	8001994 <__gedf2+0x68>
 8001972:	4281      	cmp	r1, r0
 8001974:	d022      	beq.n	80019bc <__gedf2+0x90>
 8001976:	2002      	movs	r0, #2
 8001978:	3901      	subs	r1, #1
 800197a:	4008      	ands	r0, r1
 800197c:	3801      	subs	r0, #1
 800197e:	bcc0      	pop	{r6, r7}
 8001980:	46b9      	mov	r9, r7
 8001982:	46b0      	mov	r8, r6
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001986:	464d      	mov	r5, r9
 8001988:	432e      	orrs	r6, r5
 800198a:	d129      	bne.n	80019e0 <__gedf2+0xb4>
 800198c:	2a00      	cmp	r2, #0
 800198e:	d1f0      	bne.n	8001972 <__gedf2+0x46>
 8001990:	433c      	orrs	r4, r7
 8001992:	d1ee      	bne.n	8001972 <__gedf2+0x46>
 8001994:	2800      	cmp	r0, #0
 8001996:	d1f2      	bne.n	800197e <__gedf2+0x52>
 8001998:	2001      	movs	r0, #1
 800199a:	4240      	negs	r0, r0
 800199c:	e7ef      	b.n	800197e <__gedf2+0x52>
 800199e:	003d      	movs	r5, r7
 80019a0:	4325      	orrs	r5, r4
 80019a2:	d11d      	bne.n	80019e0 <__gedf2+0xb4>
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d0ee      	beq.n	8001986 <__gedf2+0x5a>
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e2      	bne.n	8001972 <__gedf2+0x46>
 80019ac:	464c      	mov	r4, r9
 80019ae:	4326      	orrs	r6, r4
 80019b0:	d1df      	bne.n	8001972 <__gedf2+0x46>
 80019b2:	e7e0      	b.n	8001976 <__gedf2+0x4a>
 80019b4:	2000      	movs	r0, #0
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d0e1      	beq.n	800197e <__gedf2+0x52>
 80019ba:	e7dc      	b.n	8001976 <__gedf2+0x4a>
 80019bc:	429a      	cmp	r2, r3
 80019be:	dc0a      	bgt.n	80019d6 <__gedf2+0xaa>
 80019c0:	dbe8      	blt.n	8001994 <__gedf2+0x68>
 80019c2:	454f      	cmp	r7, r9
 80019c4:	d8d7      	bhi.n	8001976 <__gedf2+0x4a>
 80019c6:	d00e      	beq.n	80019e6 <__gedf2+0xba>
 80019c8:	2000      	movs	r0, #0
 80019ca:	454f      	cmp	r7, r9
 80019cc:	d2d7      	bcs.n	800197e <__gedf2+0x52>
 80019ce:	2900      	cmp	r1, #0
 80019d0:	d0e2      	beq.n	8001998 <__gedf2+0x6c>
 80019d2:	0008      	movs	r0, r1
 80019d4:	e7d3      	b.n	800197e <__gedf2+0x52>
 80019d6:	4243      	negs	r3, r0
 80019d8:	4158      	adcs	r0, r3
 80019da:	0040      	lsls	r0, r0, #1
 80019dc:	3801      	subs	r0, #1
 80019de:	e7ce      	b.n	800197e <__gedf2+0x52>
 80019e0:	2002      	movs	r0, #2
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7cb      	b.n	800197e <__gedf2+0x52>
 80019e6:	45c4      	cmp	ip, r8
 80019e8:	d8c5      	bhi.n	8001976 <__gedf2+0x4a>
 80019ea:	2000      	movs	r0, #0
 80019ec:	45c4      	cmp	ip, r8
 80019ee:	d2c6      	bcs.n	800197e <__gedf2+0x52>
 80019f0:	e7ed      	b.n	80019ce <__gedf2+0xa2>
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	000007ff 	.word	0x000007ff

080019f8 <__ledf2>:
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	4647      	mov	r7, r8
 80019fc:	46ce      	mov	lr, r9
 80019fe:	0004      	movs	r4, r0
 8001a00:	0018      	movs	r0, r3
 8001a02:	0016      	movs	r6, r2
 8001a04:	031b      	lsls	r3, r3, #12
 8001a06:	0b1b      	lsrs	r3, r3, #12
 8001a08:	4d2c      	ldr	r5, [pc, #176]	; (8001abc <__ledf2+0xc4>)
 8001a0a:	004a      	lsls	r2, r1, #1
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	0043      	lsls	r3, r0, #1
 8001a12:	030f      	lsls	r7, r1, #12
 8001a14:	46a4      	mov	ip, r4
 8001a16:	46b0      	mov	r8, r6
 8001a18:	0b3f      	lsrs	r7, r7, #12
 8001a1a:	0d52      	lsrs	r2, r2, #21
 8001a1c:	0fc9      	lsrs	r1, r1, #31
 8001a1e:	0d5b      	lsrs	r3, r3, #21
 8001a20:	0fc0      	lsrs	r0, r0, #31
 8001a22:	42aa      	cmp	r2, r5
 8001a24:	d00d      	beq.n	8001a42 <__ledf2+0x4a>
 8001a26:	42ab      	cmp	r3, r5
 8001a28:	d010      	beq.n	8001a4c <__ledf2+0x54>
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d127      	bne.n	8001a7e <__ledf2+0x86>
 8001a2e:	433c      	orrs	r4, r7
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d111      	bne.n	8001a58 <__ledf2+0x60>
 8001a34:	464d      	mov	r5, r9
 8001a36:	432e      	orrs	r6, r5
 8001a38:	d10e      	bne.n	8001a58 <__ledf2+0x60>
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d015      	beq.n	8001a6c <__ledf2+0x74>
 8001a40:	e00e      	b.n	8001a60 <__ledf2+0x68>
 8001a42:	003d      	movs	r5, r7
 8001a44:	4325      	orrs	r5, r4
 8001a46:	d110      	bne.n	8001a6a <__ledf2+0x72>
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d118      	bne.n	8001a7e <__ledf2+0x86>
 8001a4c:	464d      	mov	r5, r9
 8001a4e:	432e      	orrs	r6, r5
 8001a50:	d10b      	bne.n	8001a6a <__ledf2+0x72>
 8001a52:	2a00      	cmp	r2, #0
 8001a54:	d102      	bne.n	8001a5c <__ledf2+0x64>
 8001a56:	433c      	orrs	r4, r7
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d00b      	beq.n	8001a74 <__ledf2+0x7c>
 8001a5c:	4281      	cmp	r1, r0
 8001a5e:	d014      	beq.n	8001a8a <__ledf2+0x92>
 8001a60:	2002      	movs	r0, #2
 8001a62:	3901      	subs	r1, #1
 8001a64:	4008      	ands	r0, r1
 8001a66:	3801      	subs	r0, #1
 8001a68:	e000      	b.n	8001a6c <__ledf2+0x74>
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	bcc0      	pop	{r6, r7}
 8001a6e:	46b9      	mov	r9, r7
 8001a70:	46b0      	mov	r8, r6
 8001a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d1f9      	bne.n	8001a6c <__ledf2+0x74>
 8001a78:	2001      	movs	r0, #1
 8001a7a:	4240      	negs	r0, r0
 8001a7c:	e7f6      	b.n	8001a6c <__ledf2+0x74>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ec      	bne.n	8001a5c <__ledf2+0x64>
 8001a82:	464c      	mov	r4, r9
 8001a84:	4326      	orrs	r6, r4
 8001a86:	d1e9      	bne.n	8001a5c <__ledf2+0x64>
 8001a88:	e7ea      	b.n	8001a60 <__ledf2+0x68>
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dd04      	ble.n	8001a98 <__ledf2+0xa0>
 8001a8e:	4243      	negs	r3, r0
 8001a90:	4158      	adcs	r0, r3
 8001a92:	0040      	lsls	r0, r0, #1
 8001a94:	3801      	subs	r0, #1
 8001a96:	e7e9      	b.n	8001a6c <__ledf2+0x74>
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbeb      	blt.n	8001a74 <__ledf2+0x7c>
 8001a9c:	454f      	cmp	r7, r9
 8001a9e:	d8df      	bhi.n	8001a60 <__ledf2+0x68>
 8001aa0:	d006      	beq.n	8001ab0 <__ledf2+0xb8>
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	454f      	cmp	r7, r9
 8001aa6:	d2e1      	bcs.n	8001a6c <__ledf2+0x74>
 8001aa8:	2900      	cmp	r1, #0
 8001aaa:	d0e5      	beq.n	8001a78 <__ledf2+0x80>
 8001aac:	0008      	movs	r0, r1
 8001aae:	e7dd      	b.n	8001a6c <__ledf2+0x74>
 8001ab0:	45c4      	cmp	ip, r8
 8001ab2:	d8d5      	bhi.n	8001a60 <__ledf2+0x68>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	45c4      	cmp	ip, r8
 8001ab8:	d2d8      	bcs.n	8001a6c <__ledf2+0x74>
 8001aba:	e7f5      	b.n	8001aa8 <__ledf2+0xb0>
 8001abc:	000007ff 	.word	0x000007ff

08001ac0 <__aeabi_dmul>:
 8001ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac2:	4645      	mov	r5, r8
 8001ac4:	46de      	mov	lr, fp
 8001ac6:	4657      	mov	r7, sl
 8001ac8:	464e      	mov	r6, r9
 8001aca:	b5e0      	push	{r5, r6, r7, lr}
 8001acc:	001f      	movs	r7, r3
 8001ace:	030b      	lsls	r3, r1, #12
 8001ad0:	0b1b      	lsrs	r3, r3, #12
 8001ad2:	469b      	mov	fp, r3
 8001ad4:	004d      	lsls	r5, r1, #1
 8001ad6:	0fcb      	lsrs	r3, r1, #31
 8001ad8:	0004      	movs	r4, r0
 8001ada:	4691      	mov	r9, r2
 8001adc:	4698      	mov	r8, r3
 8001ade:	b087      	sub	sp, #28
 8001ae0:	0d6d      	lsrs	r5, r5, #21
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dmul+0x26>
 8001ae4:	e1cd      	b.n	8001e82 <__aeabi_dmul+0x3c2>
 8001ae6:	4bce      	ldr	r3, [pc, #824]	; (8001e20 <__aeabi_dmul+0x360>)
 8001ae8:	429d      	cmp	r5, r3
 8001aea:	d100      	bne.n	8001aee <__aeabi_dmul+0x2e>
 8001aec:	e1e9      	b.n	8001ec2 <__aeabi_dmul+0x402>
 8001aee:	465a      	mov	r2, fp
 8001af0:	0f43      	lsrs	r3, r0, #29
 8001af2:	00d2      	lsls	r2, r2, #3
 8001af4:	4313      	orrs	r3, r2
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	0412      	lsls	r2, r2, #16
 8001afa:	431a      	orrs	r2, r3
 8001afc:	00c3      	lsls	r3, r0, #3
 8001afe:	469a      	mov	sl, r3
 8001b00:	4bc8      	ldr	r3, [pc, #800]	; (8001e24 <__aeabi_dmul+0x364>)
 8001b02:	4693      	mov	fp, r2
 8001b04:	469c      	mov	ip, r3
 8001b06:	2300      	movs	r3, #0
 8001b08:	2600      	movs	r6, #0
 8001b0a:	4465      	add	r5, ip
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	033c      	lsls	r4, r7, #12
 8001b10:	007b      	lsls	r3, r7, #1
 8001b12:	4648      	mov	r0, r9
 8001b14:	0b24      	lsrs	r4, r4, #12
 8001b16:	0d5b      	lsrs	r3, r3, #21
 8001b18:	0fff      	lsrs	r7, r7, #31
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dmul+0x60>
 8001b1e:	e189      	b.n	8001e34 <__aeabi_dmul+0x374>
 8001b20:	4abf      	ldr	r2, [pc, #764]	; (8001e20 <__aeabi_dmul+0x360>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d019      	beq.n	8001b5a <__aeabi_dmul+0x9a>
 8001b26:	0f42      	lsrs	r2, r0, #29
 8001b28:	00e4      	lsls	r4, r4, #3
 8001b2a:	4322      	orrs	r2, r4
 8001b2c:	2480      	movs	r4, #128	; 0x80
 8001b2e:	0424      	lsls	r4, r4, #16
 8001b30:	4314      	orrs	r4, r2
 8001b32:	4abc      	ldr	r2, [pc, #752]	; (8001e24 <__aeabi_dmul+0x364>)
 8001b34:	2100      	movs	r1, #0
 8001b36:	4694      	mov	ip, r2
 8001b38:	4642      	mov	r2, r8
 8001b3a:	4463      	add	r3, ip
 8001b3c:	195b      	adds	r3, r3, r5
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	9b01      	ldr	r3, [sp, #4]
 8001b42:	407a      	eors	r2, r7
 8001b44:	3301      	adds	r3, #1
 8001b46:	00c0      	lsls	r0, r0, #3
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2e0a      	cmp	r6, #10
 8001b4e:	dd1c      	ble.n	8001b8a <__aeabi_dmul+0xca>
 8001b50:	003a      	movs	r2, r7
 8001b52:	2e0b      	cmp	r6, #11
 8001b54:	d05e      	beq.n	8001c14 <__aeabi_dmul+0x154>
 8001b56:	4647      	mov	r7, r8
 8001b58:	e056      	b.n	8001c08 <__aeabi_dmul+0x148>
 8001b5a:	4649      	mov	r1, r9
 8001b5c:	4bb0      	ldr	r3, [pc, #704]	; (8001e20 <__aeabi_dmul+0x360>)
 8001b5e:	4321      	orrs	r1, r4
 8001b60:	18eb      	adds	r3, r5, r3
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	2900      	cmp	r1, #0
 8001b66:	d12a      	bne.n	8001bbe <__aeabi_dmul+0xfe>
 8001b68:	2080      	movs	r0, #128	; 0x80
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	0100      	lsls	r0, r0, #4
 8001b6e:	002b      	movs	r3, r5
 8001b70:	4684      	mov	ip, r0
 8001b72:	4316      	orrs	r6, r2
 8001b74:	4642      	mov	r2, r8
 8001b76:	4463      	add	r3, ip
 8001b78:	407a      	eors	r2, r7
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	2e0a      	cmp	r6, #10
 8001b80:	dd00      	ble.n	8001b84 <__aeabi_dmul+0xc4>
 8001b82:	e231      	b.n	8001fe8 <__aeabi_dmul+0x528>
 8001b84:	2000      	movs	r0, #0
 8001b86:	2400      	movs	r4, #0
 8001b88:	2102      	movs	r1, #2
 8001b8a:	2e02      	cmp	r6, #2
 8001b8c:	dc26      	bgt.n	8001bdc <__aeabi_dmul+0x11c>
 8001b8e:	3e01      	subs	r6, #1
 8001b90:	2e01      	cmp	r6, #1
 8001b92:	d852      	bhi.n	8001c3a <__aeabi_dmul+0x17a>
 8001b94:	2902      	cmp	r1, #2
 8001b96:	d04c      	beq.n	8001c32 <__aeabi_dmul+0x172>
 8001b98:	2901      	cmp	r1, #1
 8001b9a:	d000      	beq.n	8001b9e <__aeabi_dmul+0xde>
 8001b9c:	e118      	b.n	8001dd0 <__aeabi_dmul+0x310>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2400      	movs	r4, #0
 8001ba2:	2500      	movs	r5, #0
 8001ba4:	051b      	lsls	r3, r3, #20
 8001ba6:	4323      	orrs	r3, r4
 8001ba8:	07d2      	lsls	r2, r2, #31
 8001baa:	4313      	orrs	r3, r2
 8001bac:	0028      	movs	r0, r5
 8001bae:	0019      	movs	r1, r3
 8001bb0:	b007      	add	sp, #28
 8001bb2:	bcf0      	pop	{r4, r5, r6, r7}
 8001bb4:	46bb      	mov	fp, r7
 8001bb6:	46b2      	mov	sl, r6
 8001bb8:	46a9      	mov	r9, r5
 8001bba:	46a0      	mov	r8, r4
 8001bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bbe:	2180      	movs	r1, #128	; 0x80
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	0109      	lsls	r1, r1, #4
 8001bc4:	002b      	movs	r3, r5
 8001bc6:	468c      	mov	ip, r1
 8001bc8:	4316      	orrs	r6, r2
 8001bca:	4642      	mov	r2, r8
 8001bcc:	4463      	add	r3, ip
 8001bce:	407a      	eors	r2, r7
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	2e0a      	cmp	r6, #10
 8001bd6:	dd00      	ble.n	8001bda <__aeabi_dmul+0x11a>
 8001bd8:	e228      	b.n	800202c <__aeabi_dmul+0x56c>
 8001bda:	2103      	movs	r1, #3
 8001bdc:	2501      	movs	r5, #1
 8001bde:	40b5      	lsls	r5, r6
 8001be0:	46ac      	mov	ip, r5
 8001be2:	26a6      	movs	r6, #166	; 0xa6
 8001be4:	4663      	mov	r3, ip
 8001be6:	00f6      	lsls	r6, r6, #3
 8001be8:	4035      	ands	r5, r6
 8001bea:	4233      	tst	r3, r6
 8001bec:	d10b      	bne.n	8001c06 <__aeabi_dmul+0x146>
 8001bee:	2690      	movs	r6, #144	; 0x90
 8001bf0:	00b6      	lsls	r6, r6, #2
 8001bf2:	4233      	tst	r3, r6
 8001bf4:	d118      	bne.n	8001c28 <__aeabi_dmul+0x168>
 8001bf6:	3eb9      	subs	r6, #185	; 0xb9
 8001bf8:	3eff      	subs	r6, #255	; 0xff
 8001bfa:	421e      	tst	r6, r3
 8001bfc:	d01d      	beq.n	8001c3a <__aeabi_dmul+0x17a>
 8001bfe:	46a3      	mov	fp, r4
 8001c00:	4682      	mov	sl, r0
 8001c02:	9100      	str	r1, [sp, #0]
 8001c04:	e000      	b.n	8001c08 <__aeabi_dmul+0x148>
 8001c06:	0017      	movs	r7, r2
 8001c08:	9900      	ldr	r1, [sp, #0]
 8001c0a:	003a      	movs	r2, r7
 8001c0c:	2902      	cmp	r1, #2
 8001c0e:	d010      	beq.n	8001c32 <__aeabi_dmul+0x172>
 8001c10:	465c      	mov	r4, fp
 8001c12:	4650      	mov	r0, sl
 8001c14:	2903      	cmp	r1, #3
 8001c16:	d1bf      	bne.n	8001b98 <__aeabi_dmul+0xd8>
 8001c18:	2380      	movs	r3, #128	; 0x80
 8001c1a:	031b      	lsls	r3, r3, #12
 8001c1c:	431c      	orrs	r4, r3
 8001c1e:	0324      	lsls	r4, r4, #12
 8001c20:	0005      	movs	r5, r0
 8001c22:	4b7f      	ldr	r3, [pc, #508]	; (8001e20 <__aeabi_dmul+0x360>)
 8001c24:	0b24      	lsrs	r4, r4, #12
 8001c26:	e7bd      	b.n	8001ba4 <__aeabi_dmul+0xe4>
 8001c28:	2480      	movs	r4, #128	; 0x80
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	4b7c      	ldr	r3, [pc, #496]	; (8001e20 <__aeabi_dmul+0x360>)
 8001c2e:	0324      	lsls	r4, r4, #12
 8001c30:	e7b8      	b.n	8001ba4 <__aeabi_dmul+0xe4>
 8001c32:	2400      	movs	r4, #0
 8001c34:	2500      	movs	r5, #0
 8001c36:	4b7a      	ldr	r3, [pc, #488]	; (8001e20 <__aeabi_dmul+0x360>)
 8001c38:	e7b4      	b.n	8001ba4 <__aeabi_dmul+0xe4>
 8001c3a:	4653      	mov	r3, sl
 8001c3c:	041e      	lsls	r6, r3, #16
 8001c3e:	0c36      	lsrs	r6, r6, #16
 8001c40:	0c1f      	lsrs	r7, r3, #16
 8001c42:	0033      	movs	r3, r6
 8001c44:	0c01      	lsrs	r1, r0, #16
 8001c46:	0400      	lsls	r0, r0, #16
 8001c48:	0c00      	lsrs	r0, r0, #16
 8001c4a:	4343      	muls	r3, r0
 8001c4c:	4698      	mov	r8, r3
 8001c4e:	0003      	movs	r3, r0
 8001c50:	437b      	muls	r3, r7
 8001c52:	4699      	mov	r9, r3
 8001c54:	0033      	movs	r3, r6
 8001c56:	434b      	muls	r3, r1
 8001c58:	469c      	mov	ip, r3
 8001c5a:	4643      	mov	r3, r8
 8001c5c:	000d      	movs	r5, r1
 8001c5e:	0c1b      	lsrs	r3, r3, #16
 8001c60:	469a      	mov	sl, r3
 8001c62:	437d      	muls	r5, r7
 8001c64:	44cc      	add	ip, r9
 8001c66:	44d4      	add	ip, sl
 8001c68:	9500      	str	r5, [sp, #0]
 8001c6a:	45e1      	cmp	r9, ip
 8001c6c:	d904      	bls.n	8001c78 <__aeabi_dmul+0x1b8>
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	025b      	lsls	r3, r3, #9
 8001c72:	4699      	mov	r9, r3
 8001c74:	444d      	add	r5, r9
 8001c76:	9500      	str	r5, [sp, #0]
 8001c78:	4663      	mov	r3, ip
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	001d      	movs	r5, r3
 8001c7e:	4663      	mov	r3, ip
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	469c      	mov	ip, r3
 8001c84:	4643      	mov	r3, r8
 8001c86:	041b      	lsls	r3, r3, #16
 8001c88:	0c1b      	lsrs	r3, r3, #16
 8001c8a:	4698      	mov	r8, r3
 8001c8c:	4663      	mov	r3, ip
 8001c8e:	4443      	add	r3, r8
 8001c90:	9303      	str	r3, [sp, #12]
 8001c92:	0c23      	lsrs	r3, r4, #16
 8001c94:	4698      	mov	r8, r3
 8001c96:	0033      	movs	r3, r6
 8001c98:	0424      	lsls	r4, r4, #16
 8001c9a:	0c24      	lsrs	r4, r4, #16
 8001c9c:	4363      	muls	r3, r4
 8001c9e:	469c      	mov	ip, r3
 8001ca0:	0023      	movs	r3, r4
 8001ca2:	437b      	muls	r3, r7
 8001ca4:	4699      	mov	r9, r3
 8001ca6:	4643      	mov	r3, r8
 8001ca8:	435e      	muls	r6, r3
 8001caa:	435f      	muls	r7, r3
 8001cac:	444e      	add	r6, r9
 8001cae:	4663      	mov	r3, ip
 8001cb0:	46b2      	mov	sl, r6
 8001cb2:	0c1e      	lsrs	r6, r3, #16
 8001cb4:	4456      	add	r6, sl
 8001cb6:	45b1      	cmp	r9, r6
 8001cb8:	d903      	bls.n	8001cc2 <__aeabi_dmul+0x202>
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	025b      	lsls	r3, r3, #9
 8001cbe:	4699      	mov	r9, r3
 8001cc0:	444f      	add	r7, r9
 8001cc2:	0c33      	lsrs	r3, r6, #16
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	003b      	movs	r3, r7
 8001cc8:	444b      	add	r3, r9
 8001cca:	9305      	str	r3, [sp, #20]
 8001ccc:	4663      	mov	r3, ip
 8001cce:	46ac      	mov	ip, r5
 8001cd0:	041f      	lsls	r7, r3, #16
 8001cd2:	0c3f      	lsrs	r7, r7, #16
 8001cd4:	0436      	lsls	r6, r6, #16
 8001cd6:	19f6      	adds	r6, r6, r7
 8001cd8:	44b4      	add	ip, r6
 8001cda:	4663      	mov	r3, ip
 8001cdc:	9304      	str	r3, [sp, #16]
 8001cde:	465b      	mov	r3, fp
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	469c      	mov	ip, r3
 8001ce4:	465b      	mov	r3, fp
 8001ce6:	041f      	lsls	r7, r3, #16
 8001ce8:	0c3f      	lsrs	r7, r7, #16
 8001cea:	003b      	movs	r3, r7
 8001cec:	4343      	muls	r3, r0
 8001cee:	4699      	mov	r9, r3
 8001cf0:	4663      	mov	r3, ip
 8001cf2:	4343      	muls	r3, r0
 8001cf4:	469a      	mov	sl, r3
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	4660      	mov	r0, ip
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	469b      	mov	fp, r3
 8001cfe:	4348      	muls	r0, r1
 8001d00:	4379      	muls	r1, r7
 8001d02:	4451      	add	r1, sl
 8001d04:	4459      	add	r1, fp
 8001d06:	458a      	cmp	sl, r1
 8001d08:	d903      	bls.n	8001d12 <__aeabi_dmul+0x252>
 8001d0a:	2380      	movs	r3, #128	; 0x80
 8001d0c:	025b      	lsls	r3, r3, #9
 8001d0e:	469a      	mov	sl, r3
 8001d10:	4450      	add	r0, sl
 8001d12:	0c0b      	lsrs	r3, r1, #16
 8001d14:	469a      	mov	sl, r3
 8001d16:	464b      	mov	r3, r9
 8001d18:	041b      	lsls	r3, r3, #16
 8001d1a:	0c1b      	lsrs	r3, r3, #16
 8001d1c:	4699      	mov	r9, r3
 8001d1e:	003b      	movs	r3, r7
 8001d20:	4363      	muls	r3, r4
 8001d22:	0409      	lsls	r1, r1, #16
 8001d24:	4645      	mov	r5, r8
 8001d26:	4449      	add	r1, r9
 8001d28:	4699      	mov	r9, r3
 8001d2a:	4663      	mov	r3, ip
 8001d2c:	435c      	muls	r4, r3
 8001d2e:	436b      	muls	r3, r5
 8001d30:	469c      	mov	ip, r3
 8001d32:	464b      	mov	r3, r9
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	4698      	mov	r8, r3
 8001d38:	436f      	muls	r7, r5
 8001d3a:	193f      	adds	r7, r7, r4
 8001d3c:	4447      	add	r7, r8
 8001d3e:	4450      	add	r0, sl
 8001d40:	42bc      	cmp	r4, r7
 8001d42:	d903      	bls.n	8001d4c <__aeabi_dmul+0x28c>
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	025b      	lsls	r3, r3, #9
 8001d48:	4698      	mov	r8, r3
 8001d4a:	44c4      	add	ip, r8
 8001d4c:	9b04      	ldr	r3, [sp, #16]
 8001d4e:	9d00      	ldr	r5, [sp, #0]
 8001d50:	4698      	mov	r8, r3
 8001d52:	4445      	add	r5, r8
 8001d54:	42b5      	cmp	r5, r6
 8001d56:	41b6      	sbcs	r6, r6
 8001d58:	4273      	negs	r3, r6
 8001d5a:	4698      	mov	r8, r3
 8001d5c:	464b      	mov	r3, r9
 8001d5e:	041e      	lsls	r6, r3, #16
 8001d60:	9b05      	ldr	r3, [sp, #20]
 8001d62:	043c      	lsls	r4, r7, #16
 8001d64:	4699      	mov	r9, r3
 8001d66:	0c36      	lsrs	r6, r6, #16
 8001d68:	19a4      	adds	r4, r4, r6
 8001d6a:	444c      	add	r4, r9
 8001d6c:	46a1      	mov	r9, r4
 8001d6e:	4683      	mov	fp, r0
 8001d70:	186e      	adds	r6, r5, r1
 8001d72:	44c1      	add	r9, r8
 8001d74:	428e      	cmp	r6, r1
 8001d76:	4189      	sbcs	r1, r1
 8001d78:	44cb      	add	fp, r9
 8001d7a:	465d      	mov	r5, fp
 8001d7c:	4249      	negs	r1, r1
 8001d7e:	186d      	adds	r5, r5, r1
 8001d80:	429c      	cmp	r4, r3
 8001d82:	41a4      	sbcs	r4, r4
 8001d84:	45c1      	cmp	r9, r8
 8001d86:	419b      	sbcs	r3, r3
 8001d88:	4583      	cmp	fp, r0
 8001d8a:	4180      	sbcs	r0, r0
 8001d8c:	428d      	cmp	r5, r1
 8001d8e:	4189      	sbcs	r1, r1
 8001d90:	425b      	negs	r3, r3
 8001d92:	4264      	negs	r4, r4
 8001d94:	431c      	orrs	r4, r3
 8001d96:	4240      	negs	r0, r0
 8001d98:	9b03      	ldr	r3, [sp, #12]
 8001d9a:	4249      	negs	r1, r1
 8001d9c:	4301      	orrs	r1, r0
 8001d9e:	0270      	lsls	r0, r6, #9
 8001da0:	0c3f      	lsrs	r7, r7, #16
 8001da2:	4318      	orrs	r0, r3
 8001da4:	19e4      	adds	r4, r4, r7
 8001da6:	1e47      	subs	r7, r0, #1
 8001da8:	41b8      	sbcs	r0, r7
 8001daa:	1864      	adds	r4, r4, r1
 8001dac:	4464      	add	r4, ip
 8001dae:	0df6      	lsrs	r6, r6, #23
 8001db0:	0261      	lsls	r1, r4, #9
 8001db2:	4330      	orrs	r0, r6
 8001db4:	0dec      	lsrs	r4, r5, #23
 8001db6:	026e      	lsls	r6, r5, #9
 8001db8:	430c      	orrs	r4, r1
 8001dba:	4330      	orrs	r0, r6
 8001dbc:	01c9      	lsls	r1, r1, #7
 8001dbe:	d400      	bmi.n	8001dc2 <__aeabi_dmul+0x302>
 8001dc0:	e0f1      	b.n	8001fa6 <__aeabi_dmul+0x4e6>
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	0843      	lsrs	r3, r0, #1
 8001dc6:	4001      	ands	r1, r0
 8001dc8:	430b      	orrs	r3, r1
 8001dca:	07e0      	lsls	r0, r4, #31
 8001dcc:	4318      	orrs	r0, r3
 8001dce:	0864      	lsrs	r4, r4, #1
 8001dd0:	4915      	ldr	r1, [pc, #84]	; (8001e28 <__aeabi_dmul+0x368>)
 8001dd2:	9b02      	ldr	r3, [sp, #8]
 8001dd4:	468c      	mov	ip, r1
 8001dd6:	4463      	add	r3, ip
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	dc00      	bgt.n	8001dde <__aeabi_dmul+0x31e>
 8001ddc:	e097      	b.n	8001f0e <__aeabi_dmul+0x44e>
 8001dde:	0741      	lsls	r1, r0, #29
 8001de0:	d009      	beq.n	8001df6 <__aeabi_dmul+0x336>
 8001de2:	210f      	movs	r1, #15
 8001de4:	4001      	ands	r1, r0
 8001de6:	2904      	cmp	r1, #4
 8001de8:	d005      	beq.n	8001df6 <__aeabi_dmul+0x336>
 8001dea:	1d01      	adds	r1, r0, #4
 8001dec:	4281      	cmp	r1, r0
 8001dee:	4180      	sbcs	r0, r0
 8001df0:	4240      	negs	r0, r0
 8001df2:	1824      	adds	r4, r4, r0
 8001df4:	0008      	movs	r0, r1
 8001df6:	01e1      	lsls	r1, r4, #7
 8001df8:	d506      	bpl.n	8001e08 <__aeabi_dmul+0x348>
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	00c9      	lsls	r1, r1, #3
 8001dfe:	468c      	mov	ip, r1
 8001e00:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <__aeabi_dmul+0x36c>)
 8001e02:	401c      	ands	r4, r3
 8001e04:	9b02      	ldr	r3, [sp, #8]
 8001e06:	4463      	add	r3, ip
 8001e08:	4909      	ldr	r1, [pc, #36]	; (8001e30 <__aeabi_dmul+0x370>)
 8001e0a:	428b      	cmp	r3, r1
 8001e0c:	dd00      	ble.n	8001e10 <__aeabi_dmul+0x350>
 8001e0e:	e710      	b.n	8001c32 <__aeabi_dmul+0x172>
 8001e10:	0761      	lsls	r1, r4, #29
 8001e12:	08c5      	lsrs	r5, r0, #3
 8001e14:	0264      	lsls	r4, r4, #9
 8001e16:	055b      	lsls	r3, r3, #21
 8001e18:	430d      	orrs	r5, r1
 8001e1a:	0b24      	lsrs	r4, r4, #12
 8001e1c:	0d5b      	lsrs	r3, r3, #21
 8001e1e:	e6c1      	b.n	8001ba4 <__aeabi_dmul+0xe4>
 8001e20:	000007ff 	.word	0x000007ff
 8001e24:	fffffc01 	.word	0xfffffc01
 8001e28:	000003ff 	.word	0x000003ff
 8001e2c:	feffffff 	.word	0xfeffffff
 8001e30:	000007fe 	.word	0x000007fe
 8001e34:	464b      	mov	r3, r9
 8001e36:	4323      	orrs	r3, r4
 8001e38:	d059      	beq.n	8001eee <__aeabi_dmul+0x42e>
 8001e3a:	2c00      	cmp	r4, #0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_dmul+0x380>
 8001e3e:	e0a3      	b.n	8001f88 <__aeabi_dmul+0x4c8>
 8001e40:	0020      	movs	r0, r4
 8001e42:	f000 fddb 	bl	80029fc <__clzsi2>
 8001e46:	0001      	movs	r1, r0
 8001e48:	0003      	movs	r3, r0
 8001e4a:	390b      	subs	r1, #11
 8001e4c:	221d      	movs	r2, #29
 8001e4e:	1a52      	subs	r2, r2, r1
 8001e50:	4649      	mov	r1, r9
 8001e52:	0018      	movs	r0, r3
 8001e54:	40d1      	lsrs	r1, r2
 8001e56:	464a      	mov	r2, r9
 8001e58:	3808      	subs	r0, #8
 8001e5a:	4082      	lsls	r2, r0
 8001e5c:	4084      	lsls	r4, r0
 8001e5e:	0010      	movs	r0, r2
 8001e60:	430c      	orrs	r4, r1
 8001e62:	4a74      	ldr	r2, [pc, #464]	; (8002034 <__aeabi_dmul+0x574>)
 8001e64:	1aeb      	subs	r3, r5, r3
 8001e66:	4694      	mov	ip, r2
 8001e68:	4642      	mov	r2, r8
 8001e6a:	4463      	add	r3, ip
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	9b01      	ldr	r3, [sp, #4]
 8001e70:	407a      	eors	r2, r7
 8001e72:	3301      	adds	r3, #1
 8001e74:	2100      	movs	r1, #0
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	9302      	str	r3, [sp, #8]
 8001e7a:	2e0a      	cmp	r6, #10
 8001e7c:	dd00      	ble.n	8001e80 <__aeabi_dmul+0x3c0>
 8001e7e:	e667      	b.n	8001b50 <__aeabi_dmul+0x90>
 8001e80:	e683      	b.n	8001b8a <__aeabi_dmul+0xca>
 8001e82:	465b      	mov	r3, fp
 8001e84:	4303      	orrs	r3, r0
 8001e86:	469a      	mov	sl, r3
 8001e88:	d02a      	beq.n	8001ee0 <__aeabi_dmul+0x420>
 8001e8a:	465b      	mov	r3, fp
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d06d      	beq.n	8001f6c <__aeabi_dmul+0x4ac>
 8001e90:	4658      	mov	r0, fp
 8001e92:	f000 fdb3 	bl	80029fc <__clzsi2>
 8001e96:	0001      	movs	r1, r0
 8001e98:	0003      	movs	r3, r0
 8001e9a:	390b      	subs	r1, #11
 8001e9c:	221d      	movs	r2, #29
 8001e9e:	1a52      	subs	r2, r2, r1
 8001ea0:	0021      	movs	r1, r4
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	465d      	mov	r5, fp
 8001ea6:	40d1      	lsrs	r1, r2
 8001ea8:	3808      	subs	r0, #8
 8001eaa:	4085      	lsls	r5, r0
 8001eac:	000a      	movs	r2, r1
 8001eae:	4084      	lsls	r4, r0
 8001eb0:	432a      	orrs	r2, r5
 8001eb2:	4693      	mov	fp, r2
 8001eb4:	46a2      	mov	sl, r4
 8001eb6:	4d5f      	ldr	r5, [pc, #380]	; (8002034 <__aeabi_dmul+0x574>)
 8001eb8:	2600      	movs	r6, #0
 8001eba:	1aed      	subs	r5, r5, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	e625      	b.n	8001b0e <__aeabi_dmul+0x4e>
 8001ec2:	465b      	mov	r3, fp
 8001ec4:	4303      	orrs	r3, r0
 8001ec6:	469a      	mov	sl, r3
 8001ec8:	d105      	bne.n	8001ed6 <__aeabi_dmul+0x416>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	469b      	mov	fp, r3
 8001ece:	3302      	adds	r3, #2
 8001ed0:	2608      	movs	r6, #8
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	e61b      	b.n	8001b0e <__aeabi_dmul+0x4e>
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	4682      	mov	sl, r0
 8001eda:	260c      	movs	r6, #12
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	e616      	b.n	8001b0e <__aeabi_dmul+0x4e>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	469b      	mov	fp, r3
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	2604      	movs	r6, #4
 8001ee8:	2500      	movs	r5, #0
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	e60f      	b.n	8001b0e <__aeabi_dmul+0x4e>
 8001eee:	4642      	mov	r2, r8
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	9501      	str	r5, [sp, #4]
 8001ef4:	431e      	orrs	r6, r3
 8001ef6:	9b01      	ldr	r3, [sp, #4]
 8001ef8:	407a      	eors	r2, r7
 8001efa:	3301      	adds	r3, #1
 8001efc:	2400      	movs	r4, #0
 8001efe:	2000      	movs	r0, #0
 8001f00:	2101      	movs	r1, #1
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	9302      	str	r3, [sp, #8]
 8001f06:	2e0a      	cmp	r6, #10
 8001f08:	dd00      	ble.n	8001f0c <__aeabi_dmul+0x44c>
 8001f0a:	e621      	b.n	8001b50 <__aeabi_dmul+0x90>
 8001f0c:	e63d      	b.n	8001b8a <__aeabi_dmul+0xca>
 8001f0e:	2101      	movs	r1, #1
 8001f10:	1ac9      	subs	r1, r1, r3
 8001f12:	2938      	cmp	r1, #56	; 0x38
 8001f14:	dd00      	ble.n	8001f18 <__aeabi_dmul+0x458>
 8001f16:	e642      	b.n	8001b9e <__aeabi_dmul+0xde>
 8001f18:	291f      	cmp	r1, #31
 8001f1a:	dd47      	ble.n	8001fac <__aeabi_dmul+0x4ec>
 8001f1c:	261f      	movs	r6, #31
 8001f1e:	0025      	movs	r5, r4
 8001f20:	4276      	negs	r6, r6
 8001f22:	1af3      	subs	r3, r6, r3
 8001f24:	40dd      	lsrs	r5, r3
 8001f26:	002b      	movs	r3, r5
 8001f28:	2920      	cmp	r1, #32
 8001f2a:	d005      	beq.n	8001f38 <__aeabi_dmul+0x478>
 8001f2c:	4942      	ldr	r1, [pc, #264]	; (8002038 <__aeabi_dmul+0x578>)
 8001f2e:	9d02      	ldr	r5, [sp, #8]
 8001f30:	468c      	mov	ip, r1
 8001f32:	4465      	add	r5, ip
 8001f34:	40ac      	lsls	r4, r5
 8001f36:	4320      	orrs	r0, r4
 8001f38:	1e41      	subs	r1, r0, #1
 8001f3a:	4188      	sbcs	r0, r1
 8001f3c:	4318      	orrs	r0, r3
 8001f3e:	2307      	movs	r3, #7
 8001f40:	001d      	movs	r5, r3
 8001f42:	2400      	movs	r4, #0
 8001f44:	4005      	ands	r5, r0
 8001f46:	4203      	tst	r3, r0
 8001f48:	d04a      	beq.n	8001fe0 <__aeabi_dmul+0x520>
 8001f4a:	230f      	movs	r3, #15
 8001f4c:	2400      	movs	r4, #0
 8001f4e:	4003      	ands	r3, r0
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d042      	beq.n	8001fda <__aeabi_dmul+0x51a>
 8001f54:	1d03      	adds	r3, r0, #4
 8001f56:	4283      	cmp	r3, r0
 8001f58:	4180      	sbcs	r0, r0
 8001f5a:	4240      	negs	r0, r0
 8001f5c:	1824      	adds	r4, r4, r0
 8001f5e:	0018      	movs	r0, r3
 8001f60:	0223      	lsls	r3, r4, #8
 8001f62:	d53a      	bpl.n	8001fda <__aeabi_dmul+0x51a>
 8001f64:	2301      	movs	r3, #1
 8001f66:	2400      	movs	r4, #0
 8001f68:	2500      	movs	r5, #0
 8001f6a:	e61b      	b.n	8001ba4 <__aeabi_dmul+0xe4>
 8001f6c:	f000 fd46 	bl	80029fc <__clzsi2>
 8001f70:	0001      	movs	r1, r0
 8001f72:	0003      	movs	r3, r0
 8001f74:	3115      	adds	r1, #21
 8001f76:	3320      	adds	r3, #32
 8001f78:	291c      	cmp	r1, #28
 8001f7a:	dd8f      	ble.n	8001e9c <__aeabi_dmul+0x3dc>
 8001f7c:	3808      	subs	r0, #8
 8001f7e:	2200      	movs	r2, #0
 8001f80:	4084      	lsls	r4, r0
 8001f82:	4692      	mov	sl, r2
 8001f84:	46a3      	mov	fp, r4
 8001f86:	e796      	b.n	8001eb6 <__aeabi_dmul+0x3f6>
 8001f88:	f000 fd38 	bl	80029fc <__clzsi2>
 8001f8c:	0001      	movs	r1, r0
 8001f8e:	0003      	movs	r3, r0
 8001f90:	3115      	adds	r1, #21
 8001f92:	3320      	adds	r3, #32
 8001f94:	291c      	cmp	r1, #28
 8001f96:	dc00      	bgt.n	8001f9a <__aeabi_dmul+0x4da>
 8001f98:	e758      	b.n	8001e4c <__aeabi_dmul+0x38c>
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	464c      	mov	r4, r9
 8001f9e:	3a08      	subs	r2, #8
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	4094      	lsls	r4, r2
 8001fa4:	e75d      	b.n	8001e62 <__aeabi_dmul+0x3a2>
 8001fa6:	9b01      	ldr	r3, [sp, #4]
 8001fa8:	9302      	str	r3, [sp, #8]
 8001faa:	e711      	b.n	8001dd0 <__aeabi_dmul+0x310>
 8001fac:	4b23      	ldr	r3, [pc, #140]	; (800203c <__aeabi_dmul+0x57c>)
 8001fae:	0026      	movs	r6, r4
 8001fb0:	469c      	mov	ip, r3
 8001fb2:	0003      	movs	r3, r0
 8001fb4:	9d02      	ldr	r5, [sp, #8]
 8001fb6:	40cb      	lsrs	r3, r1
 8001fb8:	4465      	add	r5, ip
 8001fba:	40ae      	lsls	r6, r5
 8001fbc:	431e      	orrs	r6, r3
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	40ab      	lsls	r3, r5
 8001fc2:	1e58      	subs	r0, r3, #1
 8001fc4:	4183      	sbcs	r3, r0
 8001fc6:	0030      	movs	r0, r6
 8001fc8:	4318      	orrs	r0, r3
 8001fca:	40cc      	lsrs	r4, r1
 8001fcc:	0743      	lsls	r3, r0, #29
 8001fce:	d0c7      	beq.n	8001f60 <__aeabi_dmul+0x4a0>
 8001fd0:	230f      	movs	r3, #15
 8001fd2:	4003      	ands	r3, r0
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d1bd      	bne.n	8001f54 <__aeabi_dmul+0x494>
 8001fd8:	e7c2      	b.n	8001f60 <__aeabi_dmul+0x4a0>
 8001fda:	0765      	lsls	r5, r4, #29
 8001fdc:	0264      	lsls	r4, r4, #9
 8001fde:	0b24      	lsrs	r4, r4, #12
 8001fe0:	08c0      	lsrs	r0, r0, #3
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	4305      	orrs	r5, r0
 8001fe6:	e5dd      	b.n	8001ba4 <__aeabi_dmul+0xe4>
 8001fe8:	2500      	movs	r5, #0
 8001fea:	2302      	movs	r3, #2
 8001fec:	2e0f      	cmp	r6, #15
 8001fee:	d10c      	bne.n	800200a <__aeabi_dmul+0x54a>
 8001ff0:	2480      	movs	r4, #128	; 0x80
 8001ff2:	465b      	mov	r3, fp
 8001ff4:	0324      	lsls	r4, r4, #12
 8001ff6:	4223      	tst	r3, r4
 8001ff8:	d00e      	beq.n	8002018 <__aeabi_dmul+0x558>
 8001ffa:	4221      	tst	r1, r4
 8001ffc:	d10c      	bne.n	8002018 <__aeabi_dmul+0x558>
 8001ffe:	430c      	orrs	r4, r1
 8002000:	0324      	lsls	r4, r4, #12
 8002002:	003a      	movs	r2, r7
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <__aeabi_dmul+0x580>)
 8002006:	0b24      	lsrs	r4, r4, #12
 8002008:	e5cc      	b.n	8001ba4 <__aeabi_dmul+0xe4>
 800200a:	2e0b      	cmp	r6, #11
 800200c:	d000      	beq.n	8002010 <__aeabi_dmul+0x550>
 800200e:	e5a2      	b.n	8001b56 <__aeabi_dmul+0x96>
 8002010:	468b      	mov	fp, r1
 8002012:	46aa      	mov	sl, r5
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	e5f7      	b.n	8001c08 <__aeabi_dmul+0x148>
 8002018:	2480      	movs	r4, #128	; 0x80
 800201a:	465b      	mov	r3, fp
 800201c:	0324      	lsls	r4, r4, #12
 800201e:	431c      	orrs	r4, r3
 8002020:	0324      	lsls	r4, r4, #12
 8002022:	4642      	mov	r2, r8
 8002024:	4655      	mov	r5, sl
 8002026:	4b06      	ldr	r3, [pc, #24]	; (8002040 <__aeabi_dmul+0x580>)
 8002028:	0b24      	lsrs	r4, r4, #12
 800202a:	e5bb      	b.n	8001ba4 <__aeabi_dmul+0xe4>
 800202c:	464d      	mov	r5, r9
 800202e:	0021      	movs	r1, r4
 8002030:	2303      	movs	r3, #3
 8002032:	e7db      	b.n	8001fec <__aeabi_dmul+0x52c>
 8002034:	fffffc0d 	.word	0xfffffc0d
 8002038:	0000043e 	.word	0x0000043e
 800203c:	0000041e 	.word	0x0000041e
 8002040:	000007ff 	.word	0x000007ff

08002044 <__aeabi_dsub>:
 8002044:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002046:	4657      	mov	r7, sl
 8002048:	464e      	mov	r6, r9
 800204a:	4645      	mov	r5, r8
 800204c:	46de      	mov	lr, fp
 800204e:	b5e0      	push	{r5, r6, r7, lr}
 8002050:	000d      	movs	r5, r1
 8002052:	0004      	movs	r4, r0
 8002054:	0019      	movs	r1, r3
 8002056:	0010      	movs	r0, r2
 8002058:	032b      	lsls	r3, r5, #12
 800205a:	0a5b      	lsrs	r3, r3, #9
 800205c:	0f62      	lsrs	r2, r4, #29
 800205e:	431a      	orrs	r2, r3
 8002060:	00e3      	lsls	r3, r4, #3
 8002062:	030c      	lsls	r4, r1, #12
 8002064:	0a64      	lsrs	r4, r4, #9
 8002066:	0f47      	lsrs	r7, r0, #29
 8002068:	4327      	orrs	r7, r4
 800206a:	4cd0      	ldr	r4, [pc, #832]	; (80023ac <__aeabi_dsub+0x368>)
 800206c:	006e      	lsls	r6, r5, #1
 800206e:	4691      	mov	r9, r2
 8002070:	b083      	sub	sp, #12
 8002072:	004a      	lsls	r2, r1, #1
 8002074:	00c0      	lsls	r0, r0, #3
 8002076:	4698      	mov	r8, r3
 8002078:	46a2      	mov	sl, r4
 800207a:	0d76      	lsrs	r6, r6, #21
 800207c:	0fed      	lsrs	r5, r5, #31
 800207e:	0d52      	lsrs	r2, r2, #21
 8002080:	0fc9      	lsrs	r1, r1, #31
 8002082:	9001      	str	r0, [sp, #4]
 8002084:	42a2      	cmp	r2, r4
 8002086:	d100      	bne.n	800208a <__aeabi_dsub+0x46>
 8002088:	e0b9      	b.n	80021fe <__aeabi_dsub+0x1ba>
 800208a:	2401      	movs	r4, #1
 800208c:	4061      	eors	r1, r4
 800208e:	468b      	mov	fp, r1
 8002090:	428d      	cmp	r5, r1
 8002092:	d100      	bne.n	8002096 <__aeabi_dsub+0x52>
 8002094:	e08d      	b.n	80021b2 <__aeabi_dsub+0x16e>
 8002096:	1ab4      	subs	r4, r6, r2
 8002098:	46a4      	mov	ip, r4
 800209a:	2c00      	cmp	r4, #0
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_dsub+0x5c>
 800209e:	e0b7      	b.n	8002210 <__aeabi_dsub+0x1cc>
 80020a0:	2a00      	cmp	r2, #0
 80020a2:	d100      	bne.n	80020a6 <__aeabi_dsub+0x62>
 80020a4:	e0cb      	b.n	800223e <__aeabi_dsub+0x1fa>
 80020a6:	4ac1      	ldr	r2, [pc, #772]	; (80023ac <__aeabi_dsub+0x368>)
 80020a8:	4296      	cmp	r6, r2
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x6a>
 80020ac:	e186      	b.n	80023bc <__aeabi_dsub+0x378>
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	0412      	lsls	r2, r2, #16
 80020b2:	4317      	orrs	r7, r2
 80020b4:	4662      	mov	r2, ip
 80020b6:	2a38      	cmp	r2, #56	; 0x38
 80020b8:	dd00      	ble.n	80020bc <__aeabi_dsub+0x78>
 80020ba:	e1a4      	b.n	8002406 <__aeabi_dsub+0x3c2>
 80020bc:	2a1f      	cmp	r2, #31
 80020be:	dd00      	ble.n	80020c2 <__aeabi_dsub+0x7e>
 80020c0:	e21d      	b.n	80024fe <__aeabi_dsub+0x4ba>
 80020c2:	4661      	mov	r1, ip
 80020c4:	2220      	movs	r2, #32
 80020c6:	003c      	movs	r4, r7
 80020c8:	1a52      	subs	r2, r2, r1
 80020ca:	0001      	movs	r1, r0
 80020cc:	4090      	lsls	r0, r2
 80020ce:	4094      	lsls	r4, r2
 80020d0:	1e42      	subs	r2, r0, #1
 80020d2:	4190      	sbcs	r0, r2
 80020d4:	4662      	mov	r2, ip
 80020d6:	46a0      	mov	r8, r4
 80020d8:	4664      	mov	r4, ip
 80020da:	40d7      	lsrs	r7, r2
 80020dc:	464a      	mov	r2, r9
 80020de:	40e1      	lsrs	r1, r4
 80020e0:	4644      	mov	r4, r8
 80020e2:	1bd2      	subs	r2, r2, r7
 80020e4:	4691      	mov	r9, r2
 80020e6:	430c      	orrs	r4, r1
 80020e8:	4304      	orrs	r4, r0
 80020ea:	1b1c      	subs	r4, r3, r4
 80020ec:	42a3      	cmp	r3, r4
 80020ee:	4192      	sbcs	r2, r2
 80020f0:	464b      	mov	r3, r9
 80020f2:	4252      	negs	r2, r2
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	4653      	mov	r3, sl
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	d400      	bmi.n	8002100 <__aeabi_dsub+0xbc>
 80020fe:	e12b      	b.n	8002358 <__aeabi_dsub+0x314>
 8002100:	4653      	mov	r3, sl
 8002102:	025a      	lsls	r2, r3, #9
 8002104:	0a53      	lsrs	r3, r2, #9
 8002106:	469a      	mov	sl, r3
 8002108:	4653      	mov	r3, sl
 800210a:	2b00      	cmp	r3, #0
 800210c:	d100      	bne.n	8002110 <__aeabi_dsub+0xcc>
 800210e:	e166      	b.n	80023de <__aeabi_dsub+0x39a>
 8002110:	4650      	mov	r0, sl
 8002112:	f000 fc73 	bl	80029fc <__clzsi2>
 8002116:	0003      	movs	r3, r0
 8002118:	3b08      	subs	r3, #8
 800211a:	2220      	movs	r2, #32
 800211c:	0020      	movs	r0, r4
 800211e:	1ad2      	subs	r2, r2, r3
 8002120:	4651      	mov	r1, sl
 8002122:	40d0      	lsrs	r0, r2
 8002124:	4099      	lsls	r1, r3
 8002126:	0002      	movs	r2, r0
 8002128:	409c      	lsls	r4, r3
 800212a:	430a      	orrs	r2, r1
 800212c:	429e      	cmp	r6, r3
 800212e:	dd00      	ble.n	8002132 <__aeabi_dsub+0xee>
 8002130:	e164      	b.n	80023fc <__aeabi_dsub+0x3b8>
 8002132:	1b9b      	subs	r3, r3, r6
 8002134:	1c59      	adds	r1, r3, #1
 8002136:	291f      	cmp	r1, #31
 8002138:	dd00      	ble.n	800213c <__aeabi_dsub+0xf8>
 800213a:	e0fe      	b.n	800233a <__aeabi_dsub+0x2f6>
 800213c:	2320      	movs	r3, #32
 800213e:	0010      	movs	r0, r2
 8002140:	0026      	movs	r6, r4
 8002142:	1a5b      	subs	r3, r3, r1
 8002144:	409c      	lsls	r4, r3
 8002146:	4098      	lsls	r0, r3
 8002148:	40ce      	lsrs	r6, r1
 800214a:	40ca      	lsrs	r2, r1
 800214c:	1e63      	subs	r3, r4, #1
 800214e:	419c      	sbcs	r4, r3
 8002150:	4330      	orrs	r0, r6
 8002152:	4692      	mov	sl, r2
 8002154:	2600      	movs	r6, #0
 8002156:	4304      	orrs	r4, r0
 8002158:	0763      	lsls	r3, r4, #29
 800215a:	d009      	beq.n	8002170 <__aeabi_dsub+0x12c>
 800215c:	230f      	movs	r3, #15
 800215e:	4023      	ands	r3, r4
 8002160:	2b04      	cmp	r3, #4
 8002162:	d005      	beq.n	8002170 <__aeabi_dsub+0x12c>
 8002164:	1d23      	adds	r3, r4, #4
 8002166:	42a3      	cmp	r3, r4
 8002168:	41a4      	sbcs	r4, r4
 800216a:	4264      	negs	r4, r4
 800216c:	44a2      	add	sl, r4
 800216e:	001c      	movs	r4, r3
 8002170:	4653      	mov	r3, sl
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	d400      	bmi.n	8002178 <__aeabi_dsub+0x134>
 8002176:	e0f2      	b.n	800235e <__aeabi_dsub+0x31a>
 8002178:	4b8c      	ldr	r3, [pc, #560]	; (80023ac <__aeabi_dsub+0x368>)
 800217a:	3601      	adds	r6, #1
 800217c:	429e      	cmp	r6, r3
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0x13e>
 8002180:	e10f      	b.n	80023a2 <__aeabi_dsub+0x35e>
 8002182:	4653      	mov	r3, sl
 8002184:	498a      	ldr	r1, [pc, #552]	; (80023b0 <__aeabi_dsub+0x36c>)
 8002186:	08e4      	lsrs	r4, r4, #3
 8002188:	400b      	ands	r3, r1
 800218a:	0019      	movs	r1, r3
 800218c:	075b      	lsls	r3, r3, #29
 800218e:	4323      	orrs	r3, r4
 8002190:	0572      	lsls	r2, r6, #21
 8002192:	024c      	lsls	r4, r1, #9
 8002194:	0b24      	lsrs	r4, r4, #12
 8002196:	0d52      	lsrs	r2, r2, #21
 8002198:	0512      	lsls	r2, r2, #20
 800219a:	4322      	orrs	r2, r4
 800219c:	07ed      	lsls	r5, r5, #31
 800219e:	432a      	orrs	r2, r5
 80021a0:	0018      	movs	r0, r3
 80021a2:	0011      	movs	r1, r2
 80021a4:	b003      	add	sp, #12
 80021a6:	bcf0      	pop	{r4, r5, r6, r7}
 80021a8:	46bb      	mov	fp, r7
 80021aa:	46b2      	mov	sl, r6
 80021ac:	46a9      	mov	r9, r5
 80021ae:	46a0      	mov	r8, r4
 80021b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b2:	1ab4      	subs	r4, r6, r2
 80021b4:	46a4      	mov	ip, r4
 80021b6:	2c00      	cmp	r4, #0
 80021b8:	dd59      	ble.n	800226e <__aeabi_dsub+0x22a>
 80021ba:	2a00      	cmp	r2, #0
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dsub+0x17c>
 80021be:	e0b0      	b.n	8002322 <__aeabi_dsub+0x2de>
 80021c0:	4556      	cmp	r6, sl
 80021c2:	d100      	bne.n	80021c6 <__aeabi_dsub+0x182>
 80021c4:	e0fa      	b.n	80023bc <__aeabi_dsub+0x378>
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	0412      	lsls	r2, r2, #16
 80021ca:	4317      	orrs	r7, r2
 80021cc:	4662      	mov	r2, ip
 80021ce:	2a38      	cmp	r2, #56	; 0x38
 80021d0:	dd00      	ble.n	80021d4 <__aeabi_dsub+0x190>
 80021d2:	e0d4      	b.n	800237e <__aeabi_dsub+0x33a>
 80021d4:	2a1f      	cmp	r2, #31
 80021d6:	dc00      	bgt.n	80021da <__aeabi_dsub+0x196>
 80021d8:	e1c0      	b.n	800255c <__aeabi_dsub+0x518>
 80021da:	0039      	movs	r1, r7
 80021dc:	3a20      	subs	r2, #32
 80021de:	40d1      	lsrs	r1, r2
 80021e0:	4662      	mov	r2, ip
 80021e2:	2a20      	cmp	r2, #32
 80021e4:	d006      	beq.n	80021f4 <__aeabi_dsub+0x1b0>
 80021e6:	4664      	mov	r4, ip
 80021e8:	2240      	movs	r2, #64	; 0x40
 80021ea:	1b12      	subs	r2, r2, r4
 80021ec:	003c      	movs	r4, r7
 80021ee:	4094      	lsls	r4, r2
 80021f0:	4304      	orrs	r4, r0
 80021f2:	9401      	str	r4, [sp, #4]
 80021f4:	9c01      	ldr	r4, [sp, #4]
 80021f6:	1e62      	subs	r2, r4, #1
 80021f8:	4194      	sbcs	r4, r2
 80021fa:	430c      	orrs	r4, r1
 80021fc:	e0c3      	b.n	8002386 <__aeabi_dsub+0x342>
 80021fe:	003c      	movs	r4, r7
 8002200:	4304      	orrs	r4, r0
 8002202:	d02b      	beq.n	800225c <__aeabi_dsub+0x218>
 8002204:	468b      	mov	fp, r1
 8002206:	428d      	cmp	r5, r1
 8002208:	d02e      	beq.n	8002268 <__aeabi_dsub+0x224>
 800220a:	4c6a      	ldr	r4, [pc, #424]	; (80023b4 <__aeabi_dsub+0x370>)
 800220c:	46a4      	mov	ip, r4
 800220e:	44b4      	add	ip, r6
 8002210:	4664      	mov	r4, ip
 8002212:	2c00      	cmp	r4, #0
 8002214:	d05f      	beq.n	80022d6 <__aeabi_dsub+0x292>
 8002216:	1b94      	subs	r4, r2, r6
 8002218:	46a4      	mov	ip, r4
 800221a:	2e00      	cmp	r6, #0
 800221c:	d000      	beq.n	8002220 <__aeabi_dsub+0x1dc>
 800221e:	e120      	b.n	8002462 <__aeabi_dsub+0x41e>
 8002220:	464c      	mov	r4, r9
 8002222:	431c      	orrs	r4, r3
 8002224:	d100      	bne.n	8002228 <__aeabi_dsub+0x1e4>
 8002226:	e1c7      	b.n	80025b8 <__aeabi_dsub+0x574>
 8002228:	4661      	mov	r1, ip
 800222a:	1e4c      	subs	r4, r1, #1
 800222c:	2901      	cmp	r1, #1
 800222e:	d100      	bne.n	8002232 <__aeabi_dsub+0x1ee>
 8002230:	e223      	b.n	800267a <__aeabi_dsub+0x636>
 8002232:	4d5e      	ldr	r5, [pc, #376]	; (80023ac <__aeabi_dsub+0x368>)
 8002234:	45ac      	cmp	ip, r5
 8002236:	d100      	bne.n	800223a <__aeabi_dsub+0x1f6>
 8002238:	e1d8      	b.n	80025ec <__aeabi_dsub+0x5a8>
 800223a:	46a4      	mov	ip, r4
 800223c:	e11a      	b.n	8002474 <__aeabi_dsub+0x430>
 800223e:	003a      	movs	r2, r7
 8002240:	4302      	orrs	r2, r0
 8002242:	d100      	bne.n	8002246 <__aeabi_dsub+0x202>
 8002244:	e0e4      	b.n	8002410 <__aeabi_dsub+0x3cc>
 8002246:	0022      	movs	r2, r4
 8002248:	3a01      	subs	r2, #1
 800224a:	2c01      	cmp	r4, #1
 800224c:	d100      	bne.n	8002250 <__aeabi_dsub+0x20c>
 800224e:	e1c3      	b.n	80025d8 <__aeabi_dsub+0x594>
 8002250:	4956      	ldr	r1, [pc, #344]	; (80023ac <__aeabi_dsub+0x368>)
 8002252:	428c      	cmp	r4, r1
 8002254:	d100      	bne.n	8002258 <__aeabi_dsub+0x214>
 8002256:	e0b1      	b.n	80023bc <__aeabi_dsub+0x378>
 8002258:	4694      	mov	ip, r2
 800225a:	e72b      	b.n	80020b4 <__aeabi_dsub+0x70>
 800225c:	2401      	movs	r4, #1
 800225e:	4061      	eors	r1, r4
 8002260:	468b      	mov	fp, r1
 8002262:	428d      	cmp	r5, r1
 8002264:	d000      	beq.n	8002268 <__aeabi_dsub+0x224>
 8002266:	e716      	b.n	8002096 <__aeabi_dsub+0x52>
 8002268:	4952      	ldr	r1, [pc, #328]	; (80023b4 <__aeabi_dsub+0x370>)
 800226a:	468c      	mov	ip, r1
 800226c:	44b4      	add	ip, r6
 800226e:	4664      	mov	r4, ip
 8002270:	2c00      	cmp	r4, #0
 8002272:	d100      	bne.n	8002276 <__aeabi_dsub+0x232>
 8002274:	e0d3      	b.n	800241e <__aeabi_dsub+0x3da>
 8002276:	1b91      	subs	r1, r2, r6
 8002278:	468c      	mov	ip, r1
 800227a:	2e00      	cmp	r6, #0
 800227c:	d100      	bne.n	8002280 <__aeabi_dsub+0x23c>
 800227e:	e15e      	b.n	800253e <__aeabi_dsub+0x4fa>
 8002280:	494a      	ldr	r1, [pc, #296]	; (80023ac <__aeabi_dsub+0x368>)
 8002282:	428a      	cmp	r2, r1
 8002284:	d100      	bne.n	8002288 <__aeabi_dsub+0x244>
 8002286:	e1be      	b.n	8002606 <__aeabi_dsub+0x5c2>
 8002288:	2180      	movs	r1, #128	; 0x80
 800228a:	464c      	mov	r4, r9
 800228c:	0409      	lsls	r1, r1, #16
 800228e:	430c      	orrs	r4, r1
 8002290:	46a1      	mov	r9, r4
 8002292:	4661      	mov	r1, ip
 8002294:	2938      	cmp	r1, #56	; 0x38
 8002296:	dd00      	ble.n	800229a <__aeabi_dsub+0x256>
 8002298:	e1ba      	b.n	8002610 <__aeabi_dsub+0x5cc>
 800229a:	291f      	cmp	r1, #31
 800229c:	dd00      	ble.n	80022a0 <__aeabi_dsub+0x25c>
 800229e:	e227      	b.n	80026f0 <__aeabi_dsub+0x6ac>
 80022a0:	2420      	movs	r4, #32
 80022a2:	1a64      	subs	r4, r4, r1
 80022a4:	4649      	mov	r1, r9
 80022a6:	40a1      	lsls	r1, r4
 80022a8:	001e      	movs	r6, r3
 80022aa:	4688      	mov	r8, r1
 80022ac:	4661      	mov	r1, ip
 80022ae:	40a3      	lsls	r3, r4
 80022b0:	40ce      	lsrs	r6, r1
 80022b2:	4641      	mov	r1, r8
 80022b4:	1e5c      	subs	r4, r3, #1
 80022b6:	41a3      	sbcs	r3, r4
 80022b8:	4331      	orrs	r1, r6
 80022ba:	4319      	orrs	r1, r3
 80022bc:	000c      	movs	r4, r1
 80022be:	4663      	mov	r3, ip
 80022c0:	4649      	mov	r1, r9
 80022c2:	40d9      	lsrs	r1, r3
 80022c4:	187f      	adds	r7, r7, r1
 80022c6:	1824      	adds	r4, r4, r0
 80022c8:	4284      	cmp	r4, r0
 80022ca:	419b      	sbcs	r3, r3
 80022cc:	425b      	negs	r3, r3
 80022ce:	469a      	mov	sl, r3
 80022d0:	0016      	movs	r6, r2
 80022d2:	44ba      	add	sl, r7
 80022d4:	e05d      	b.n	8002392 <__aeabi_dsub+0x34e>
 80022d6:	4c38      	ldr	r4, [pc, #224]	; (80023b8 <__aeabi_dsub+0x374>)
 80022d8:	1c72      	adds	r2, r6, #1
 80022da:	4222      	tst	r2, r4
 80022dc:	d000      	beq.n	80022e0 <__aeabi_dsub+0x29c>
 80022de:	e0df      	b.n	80024a0 <__aeabi_dsub+0x45c>
 80022e0:	464a      	mov	r2, r9
 80022e2:	431a      	orrs	r2, r3
 80022e4:	2e00      	cmp	r6, #0
 80022e6:	d000      	beq.n	80022ea <__aeabi_dsub+0x2a6>
 80022e8:	e15c      	b.n	80025a4 <__aeabi_dsub+0x560>
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d100      	bne.n	80022f0 <__aeabi_dsub+0x2ac>
 80022ee:	e1cf      	b.n	8002690 <__aeabi_dsub+0x64c>
 80022f0:	003a      	movs	r2, r7
 80022f2:	4302      	orrs	r2, r0
 80022f4:	d100      	bne.n	80022f8 <__aeabi_dsub+0x2b4>
 80022f6:	e17f      	b.n	80025f8 <__aeabi_dsub+0x5b4>
 80022f8:	1a1c      	subs	r4, r3, r0
 80022fa:	464a      	mov	r2, r9
 80022fc:	42a3      	cmp	r3, r4
 80022fe:	4189      	sbcs	r1, r1
 8002300:	1bd2      	subs	r2, r2, r7
 8002302:	4249      	negs	r1, r1
 8002304:	1a52      	subs	r2, r2, r1
 8002306:	4692      	mov	sl, r2
 8002308:	0212      	lsls	r2, r2, #8
 800230a:	d400      	bmi.n	800230e <__aeabi_dsub+0x2ca>
 800230c:	e20a      	b.n	8002724 <__aeabi_dsub+0x6e0>
 800230e:	1ac4      	subs	r4, r0, r3
 8002310:	42a0      	cmp	r0, r4
 8002312:	4180      	sbcs	r0, r0
 8002314:	464b      	mov	r3, r9
 8002316:	4240      	negs	r0, r0
 8002318:	1aff      	subs	r7, r7, r3
 800231a:	1a3b      	subs	r3, r7, r0
 800231c:	469a      	mov	sl, r3
 800231e:	465d      	mov	r5, fp
 8002320:	e71a      	b.n	8002158 <__aeabi_dsub+0x114>
 8002322:	003a      	movs	r2, r7
 8002324:	4302      	orrs	r2, r0
 8002326:	d073      	beq.n	8002410 <__aeabi_dsub+0x3cc>
 8002328:	0022      	movs	r2, r4
 800232a:	3a01      	subs	r2, #1
 800232c:	2c01      	cmp	r4, #1
 800232e:	d100      	bne.n	8002332 <__aeabi_dsub+0x2ee>
 8002330:	e0cb      	b.n	80024ca <__aeabi_dsub+0x486>
 8002332:	4554      	cmp	r4, sl
 8002334:	d042      	beq.n	80023bc <__aeabi_dsub+0x378>
 8002336:	4694      	mov	ip, r2
 8002338:	e748      	b.n	80021cc <__aeabi_dsub+0x188>
 800233a:	0010      	movs	r0, r2
 800233c:	3b1f      	subs	r3, #31
 800233e:	40d8      	lsrs	r0, r3
 8002340:	2920      	cmp	r1, #32
 8002342:	d003      	beq.n	800234c <__aeabi_dsub+0x308>
 8002344:	2340      	movs	r3, #64	; 0x40
 8002346:	1a5b      	subs	r3, r3, r1
 8002348:	409a      	lsls	r2, r3
 800234a:	4314      	orrs	r4, r2
 800234c:	1e63      	subs	r3, r4, #1
 800234e:	419c      	sbcs	r4, r3
 8002350:	2300      	movs	r3, #0
 8002352:	2600      	movs	r6, #0
 8002354:	469a      	mov	sl, r3
 8002356:	4304      	orrs	r4, r0
 8002358:	0763      	lsls	r3, r4, #29
 800235a:	d000      	beq.n	800235e <__aeabi_dsub+0x31a>
 800235c:	e6fe      	b.n	800215c <__aeabi_dsub+0x118>
 800235e:	4652      	mov	r2, sl
 8002360:	08e3      	lsrs	r3, r4, #3
 8002362:	0752      	lsls	r2, r2, #29
 8002364:	4313      	orrs	r3, r2
 8002366:	4652      	mov	r2, sl
 8002368:	46b4      	mov	ip, r6
 800236a:	08d2      	lsrs	r2, r2, #3
 800236c:	490f      	ldr	r1, [pc, #60]	; (80023ac <__aeabi_dsub+0x368>)
 800236e:	458c      	cmp	ip, r1
 8002370:	d02a      	beq.n	80023c8 <__aeabi_dsub+0x384>
 8002372:	0312      	lsls	r2, r2, #12
 8002374:	0b14      	lsrs	r4, r2, #12
 8002376:	4662      	mov	r2, ip
 8002378:	0552      	lsls	r2, r2, #21
 800237a:	0d52      	lsrs	r2, r2, #21
 800237c:	e70c      	b.n	8002198 <__aeabi_dsub+0x154>
 800237e:	003c      	movs	r4, r7
 8002380:	4304      	orrs	r4, r0
 8002382:	1e62      	subs	r2, r4, #1
 8002384:	4194      	sbcs	r4, r2
 8002386:	18e4      	adds	r4, r4, r3
 8002388:	429c      	cmp	r4, r3
 800238a:	4192      	sbcs	r2, r2
 800238c:	4252      	negs	r2, r2
 800238e:	444a      	add	r2, r9
 8002390:	4692      	mov	sl, r2
 8002392:	4653      	mov	r3, sl
 8002394:	021b      	lsls	r3, r3, #8
 8002396:	d5df      	bpl.n	8002358 <__aeabi_dsub+0x314>
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__aeabi_dsub+0x368>)
 800239a:	3601      	adds	r6, #1
 800239c:	429e      	cmp	r6, r3
 800239e:	d000      	beq.n	80023a2 <__aeabi_dsub+0x35e>
 80023a0:	e0a0      	b.n	80024e4 <__aeabi_dsub+0x4a0>
 80023a2:	0032      	movs	r2, r6
 80023a4:	2400      	movs	r4, #0
 80023a6:	2300      	movs	r3, #0
 80023a8:	e6f6      	b.n	8002198 <__aeabi_dsub+0x154>
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	000007ff 	.word	0x000007ff
 80023b0:	ff7fffff 	.word	0xff7fffff
 80023b4:	fffff801 	.word	0xfffff801
 80023b8:	000007fe 	.word	0x000007fe
 80023bc:	08db      	lsrs	r3, r3, #3
 80023be:	464a      	mov	r2, r9
 80023c0:	0752      	lsls	r2, r2, #29
 80023c2:	4313      	orrs	r3, r2
 80023c4:	464a      	mov	r2, r9
 80023c6:	08d2      	lsrs	r2, r2, #3
 80023c8:	0019      	movs	r1, r3
 80023ca:	4311      	orrs	r1, r2
 80023cc:	d100      	bne.n	80023d0 <__aeabi_dsub+0x38c>
 80023ce:	e1b5      	b.n	800273c <__aeabi_dsub+0x6f8>
 80023d0:	2480      	movs	r4, #128	; 0x80
 80023d2:	0324      	lsls	r4, r4, #12
 80023d4:	4314      	orrs	r4, r2
 80023d6:	0324      	lsls	r4, r4, #12
 80023d8:	4ad5      	ldr	r2, [pc, #852]	; (8002730 <__aeabi_dsub+0x6ec>)
 80023da:	0b24      	lsrs	r4, r4, #12
 80023dc:	e6dc      	b.n	8002198 <__aeabi_dsub+0x154>
 80023de:	0020      	movs	r0, r4
 80023e0:	f000 fb0c 	bl	80029fc <__clzsi2>
 80023e4:	0003      	movs	r3, r0
 80023e6:	3318      	adds	r3, #24
 80023e8:	2b1f      	cmp	r3, #31
 80023ea:	dc00      	bgt.n	80023ee <__aeabi_dsub+0x3aa>
 80023ec:	e695      	b.n	800211a <__aeabi_dsub+0xd6>
 80023ee:	0022      	movs	r2, r4
 80023f0:	3808      	subs	r0, #8
 80023f2:	4082      	lsls	r2, r0
 80023f4:	2400      	movs	r4, #0
 80023f6:	429e      	cmp	r6, r3
 80023f8:	dc00      	bgt.n	80023fc <__aeabi_dsub+0x3b8>
 80023fa:	e69a      	b.n	8002132 <__aeabi_dsub+0xee>
 80023fc:	1af6      	subs	r6, r6, r3
 80023fe:	4bcd      	ldr	r3, [pc, #820]	; (8002734 <__aeabi_dsub+0x6f0>)
 8002400:	401a      	ands	r2, r3
 8002402:	4692      	mov	sl, r2
 8002404:	e6a8      	b.n	8002158 <__aeabi_dsub+0x114>
 8002406:	003c      	movs	r4, r7
 8002408:	4304      	orrs	r4, r0
 800240a:	1e62      	subs	r2, r4, #1
 800240c:	4194      	sbcs	r4, r2
 800240e:	e66c      	b.n	80020ea <__aeabi_dsub+0xa6>
 8002410:	464a      	mov	r2, r9
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	0752      	lsls	r2, r2, #29
 8002416:	4313      	orrs	r3, r2
 8002418:	464a      	mov	r2, r9
 800241a:	08d2      	lsrs	r2, r2, #3
 800241c:	e7a6      	b.n	800236c <__aeabi_dsub+0x328>
 800241e:	4cc6      	ldr	r4, [pc, #792]	; (8002738 <__aeabi_dsub+0x6f4>)
 8002420:	1c72      	adds	r2, r6, #1
 8002422:	4222      	tst	r2, r4
 8002424:	d000      	beq.n	8002428 <__aeabi_dsub+0x3e4>
 8002426:	e0ac      	b.n	8002582 <__aeabi_dsub+0x53e>
 8002428:	464a      	mov	r2, r9
 800242a:	431a      	orrs	r2, r3
 800242c:	2e00      	cmp	r6, #0
 800242e:	d000      	beq.n	8002432 <__aeabi_dsub+0x3ee>
 8002430:	e105      	b.n	800263e <__aeabi_dsub+0x5fa>
 8002432:	2a00      	cmp	r2, #0
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x3f4>
 8002436:	e156      	b.n	80026e6 <__aeabi_dsub+0x6a2>
 8002438:	003a      	movs	r2, r7
 800243a:	4302      	orrs	r2, r0
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x3fc>
 800243e:	e0db      	b.n	80025f8 <__aeabi_dsub+0x5b4>
 8002440:	181c      	adds	r4, r3, r0
 8002442:	429c      	cmp	r4, r3
 8002444:	419b      	sbcs	r3, r3
 8002446:	444f      	add	r7, r9
 8002448:	46ba      	mov	sl, r7
 800244a:	425b      	negs	r3, r3
 800244c:	449a      	add	sl, r3
 800244e:	4653      	mov	r3, sl
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	d400      	bmi.n	8002456 <__aeabi_dsub+0x412>
 8002454:	e780      	b.n	8002358 <__aeabi_dsub+0x314>
 8002456:	4652      	mov	r2, sl
 8002458:	4bb6      	ldr	r3, [pc, #728]	; (8002734 <__aeabi_dsub+0x6f0>)
 800245a:	2601      	movs	r6, #1
 800245c:	401a      	ands	r2, r3
 800245e:	4692      	mov	sl, r2
 8002460:	e77a      	b.n	8002358 <__aeabi_dsub+0x314>
 8002462:	4cb3      	ldr	r4, [pc, #716]	; (8002730 <__aeabi_dsub+0x6ec>)
 8002464:	42a2      	cmp	r2, r4
 8002466:	d100      	bne.n	800246a <__aeabi_dsub+0x426>
 8002468:	e0c0      	b.n	80025ec <__aeabi_dsub+0x5a8>
 800246a:	2480      	movs	r4, #128	; 0x80
 800246c:	464d      	mov	r5, r9
 800246e:	0424      	lsls	r4, r4, #16
 8002470:	4325      	orrs	r5, r4
 8002472:	46a9      	mov	r9, r5
 8002474:	4664      	mov	r4, ip
 8002476:	2c38      	cmp	r4, #56	; 0x38
 8002478:	dc53      	bgt.n	8002522 <__aeabi_dsub+0x4de>
 800247a:	4661      	mov	r1, ip
 800247c:	2c1f      	cmp	r4, #31
 800247e:	dd00      	ble.n	8002482 <__aeabi_dsub+0x43e>
 8002480:	e0cd      	b.n	800261e <__aeabi_dsub+0x5da>
 8002482:	2520      	movs	r5, #32
 8002484:	001e      	movs	r6, r3
 8002486:	1b2d      	subs	r5, r5, r4
 8002488:	464c      	mov	r4, r9
 800248a:	40ab      	lsls	r3, r5
 800248c:	40ac      	lsls	r4, r5
 800248e:	40ce      	lsrs	r6, r1
 8002490:	1e5d      	subs	r5, r3, #1
 8002492:	41ab      	sbcs	r3, r5
 8002494:	4334      	orrs	r4, r6
 8002496:	4323      	orrs	r3, r4
 8002498:	464c      	mov	r4, r9
 800249a:	40cc      	lsrs	r4, r1
 800249c:	1b3f      	subs	r7, r7, r4
 800249e:	e045      	b.n	800252c <__aeabi_dsub+0x4e8>
 80024a0:	464a      	mov	r2, r9
 80024a2:	1a1c      	subs	r4, r3, r0
 80024a4:	1bd1      	subs	r1, r2, r7
 80024a6:	42a3      	cmp	r3, r4
 80024a8:	4192      	sbcs	r2, r2
 80024aa:	4252      	negs	r2, r2
 80024ac:	4692      	mov	sl, r2
 80024ae:	000a      	movs	r2, r1
 80024b0:	4651      	mov	r1, sl
 80024b2:	1a52      	subs	r2, r2, r1
 80024b4:	4692      	mov	sl, r2
 80024b6:	0212      	lsls	r2, r2, #8
 80024b8:	d500      	bpl.n	80024bc <__aeabi_dsub+0x478>
 80024ba:	e083      	b.n	80025c4 <__aeabi_dsub+0x580>
 80024bc:	4653      	mov	r3, sl
 80024be:	4323      	orrs	r3, r4
 80024c0:	d000      	beq.n	80024c4 <__aeabi_dsub+0x480>
 80024c2:	e621      	b.n	8002108 <__aeabi_dsub+0xc4>
 80024c4:	2200      	movs	r2, #0
 80024c6:	2500      	movs	r5, #0
 80024c8:	e753      	b.n	8002372 <__aeabi_dsub+0x32e>
 80024ca:	181c      	adds	r4, r3, r0
 80024cc:	429c      	cmp	r4, r3
 80024ce:	419b      	sbcs	r3, r3
 80024d0:	444f      	add	r7, r9
 80024d2:	46ba      	mov	sl, r7
 80024d4:	425b      	negs	r3, r3
 80024d6:	449a      	add	sl, r3
 80024d8:	4653      	mov	r3, sl
 80024da:	2601      	movs	r6, #1
 80024dc:	021b      	lsls	r3, r3, #8
 80024de:	d400      	bmi.n	80024e2 <__aeabi_dsub+0x49e>
 80024e0:	e73a      	b.n	8002358 <__aeabi_dsub+0x314>
 80024e2:	2602      	movs	r6, #2
 80024e4:	4652      	mov	r2, sl
 80024e6:	4b93      	ldr	r3, [pc, #588]	; (8002734 <__aeabi_dsub+0x6f0>)
 80024e8:	2101      	movs	r1, #1
 80024ea:	401a      	ands	r2, r3
 80024ec:	0013      	movs	r3, r2
 80024ee:	4021      	ands	r1, r4
 80024f0:	0862      	lsrs	r2, r4, #1
 80024f2:	430a      	orrs	r2, r1
 80024f4:	07dc      	lsls	r4, r3, #31
 80024f6:	085b      	lsrs	r3, r3, #1
 80024f8:	469a      	mov	sl, r3
 80024fa:	4314      	orrs	r4, r2
 80024fc:	e62c      	b.n	8002158 <__aeabi_dsub+0x114>
 80024fe:	0039      	movs	r1, r7
 8002500:	3a20      	subs	r2, #32
 8002502:	40d1      	lsrs	r1, r2
 8002504:	4662      	mov	r2, ip
 8002506:	2a20      	cmp	r2, #32
 8002508:	d006      	beq.n	8002518 <__aeabi_dsub+0x4d4>
 800250a:	4664      	mov	r4, ip
 800250c:	2240      	movs	r2, #64	; 0x40
 800250e:	1b12      	subs	r2, r2, r4
 8002510:	003c      	movs	r4, r7
 8002512:	4094      	lsls	r4, r2
 8002514:	4304      	orrs	r4, r0
 8002516:	9401      	str	r4, [sp, #4]
 8002518:	9c01      	ldr	r4, [sp, #4]
 800251a:	1e62      	subs	r2, r4, #1
 800251c:	4194      	sbcs	r4, r2
 800251e:	430c      	orrs	r4, r1
 8002520:	e5e3      	b.n	80020ea <__aeabi_dsub+0xa6>
 8002522:	4649      	mov	r1, r9
 8002524:	4319      	orrs	r1, r3
 8002526:	000b      	movs	r3, r1
 8002528:	1e5c      	subs	r4, r3, #1
 800252a:	41a3      	sbcs	r3, r4
 800252c:	1ac4      	subs	r4, r0, r3
 800252e:	42a0      	cmp	r0, r4
 8002530:	419b      	sbcs	r3, r3
 8002532:	425b      	negs	r3, r3
 8002534:	1afb      	subs	r3, r7, r3
 8002536:	469a      	mov	sl, r3
 8002538:	465d      	mov	r5, fp
 800253a:	0016      	movs	r6, r2
 800253c:	e5dc      	b.n	80020f8 <__aeabi_dsub+0xb4>
 800253e:	4649      	mov	r1, r9
 8002540:	4319      	orrs	r1, r3
 8002542:	d100      	bne.n	8002546 <__aeabi_dsub+0x502>
 8002544:	e0ae      	b.n	80026a4 <__aeabi_dsub+0x660>
 8002546:	4661      	mov	r1, ip
 8002548:	4664      	mov	r4, ip
 800254a:	3901      	subs	r1, #1
 800254c:	2c01      	cmp	r4, #1
 800254e:	d100      	bne.n	8002552 <__aeabi_dsub+0x50e>
 8002550:	e0e0      	b.n	8002714 <__aeabi_dsub+0x6d0>
 8002552:	4c77      	ldr	r4, [pc, #476]	; (8002730 <__aeabi_dsub+0x6ec>)
 8002554:	45a4      	cmp	ip, r4
 8002556:	d056      	beq.n	8002606 <__aeabi_dsub+0x5c2>
 8002558:	468c      	mov	ip, r1
 800255a:	e69a      	b.n	8002292 <__aeabi_dsub+0x24e>
 800255c:	4661      	mov	r1, ip
 800255e:	2220      	movs	r2, #32
 8002560:	003c      	movs	r4, r7
 8002562:	1a52      	subs	r2, r2, r1
 8002564:	4094      	lsls	r4, r2
 8002566:	0001      	movs	r1, r0
 8002568:	4090      	lsls	r0, r2
 800256a:	46a0      	mov	r8, r4
 800256c:	4664      	mov	r4, ip
 800256e:	1e42      	subs	r2, r0, #1
 8002570:	4190      	sbcs	r0, r2
 8002572:	4662      	mov	r2, ip
 8002574:	40e1      	lsrs	r1, r4
 8002576:	4644      	mov	r4, r8
 8002578:	40d7      	lsrs	r7, r2
 800257a:	430c      	orrs	r4, r1
 800257c:	4304      	orrs	r4, r0
 800257e:	44b9      	add	r9, r7
 8002580:	e701      	b.n	8002386 <__aeabi_dsub+0x342>
 8002582:	496b      	ldr	r1, [pc, #428]	; (8002730 <__aeabi_dsub+0x6ec>)
 8002584:	428a      	cmp	r2, r1
 8002586:	d100      	bne.n	800258a <__aeabi_dsub+0x546>
 8002588:	e70c      	b.n	80023a4 <__aeabi_dsub+0x360>
 800258a:	1818      	adds	r0, r3, r0
 800258c:	4298      	cmp	r0, r3
 800258e:	419b      	sbcs	r3, r3
 8002590:	444f      	add	r7, r9
 8002592:	425b      	negs	r3, r3
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	07dc      	lsls	r4, r3, #31
 8002598:	0840      	lsrs	r0, r0, #1
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	469a      	mov	sl, r3
 800259e:	0016      	movs	r6, r2
 80025a0:	4304      	orrs	r4, r0
 80025a2:	e6d9      	b.n	8002358 <__aeabi_dsub+0x314>
 80025a4:	2a00      	cmp	r2, #0
 80025a6:	d000      	beq.n	80025aa <__aeabi_dsub+0x566>
 80025a8:	e081      	b.n	80026ae <__aeabi_dsub+0x66a>
 80025aa:	003b      	movs	r3, r7
 80025ac:	4303      	orrs	r3, r0
 80025ae:	d11d      	bne.n	80025ec <__aeabi_dsub+0x5a8>
 80025b0:	2280      	movs	r2, #128	; 0x80
 80025b2:	2500      	movs	r5, #0
 80025b4:	0312      	lsls	r2, r2, #12
 80025b6:	e70b      	b.n	80023d0 <__aeabi_dsub+0x38c>
 80025b8:	08c0      	lsrs	r0, r0, #3
 80025ba:	077b      	lsls	r3, r7, #29
 80025bc:	465d      	mov	r5, fp
 80025be:	4303      	orrs	r3, r0
 80025c0:	08fa      	lsrs	r2, r7, #3
 80025c2:	e6d3      	b.n	800236c <__aeabi_dsub+0x328>
 80025c4:	1ac4      	subs	r4, r0, r3
 80025c6:	42a0      	cmp	r0, r4
 80025c8:	4180      	sbcs	r0, r0
 80025ca:	464b      	mov	r3, r9
 80025cc:	4240      	negs	r0, r0
 80025ce:	1aff      	subs	r7, r7, r3
 80025d0:	1a3b      	subs	r3, r7, r0
 80025d2:	469a      	mov	sl, r3
 80025d4:	465d      	mov	r5, fp
 80025d6:	e597      	b.n	8002108 <__aeabi_dsub+0xc4>
 80025d8:	1a1c      	subs	r4, r3, r0
 80025da:	464a      	mov	r2, r9
 80025dc:	42a3      	cmp	r3, r4
 80025de:	419b      	sbcs	r3, r3
 80025e0:	1bd7      	subs	r7, r2, r7
 80025e2:	425b      	negs	r3, r3
 80025e4:	1afb      	subs	r3, r7, r3
 80025e6:	469a      	mov	sl, r3
 80025e8:	2601      	movs	r6, #1
 80025ea:	e585      	b.n	80020f8 <__aeabi_dsub+0xb4>
 80025ec:	08c0      	lsrs	r0, r0, #3
 80025ee:	077b      	lsls	r3, r7, #29
 80025f0:	465d      	mov	r5, fp
 80025f2:	4303      	orrs	r3, r0
 80025f4:	08fa      	lsrs	r2, r7, #3
 80025f6:	e6e7      	b.n	80023c8 <__aeabi_dsub+0x384>
 80025f8:	464a      	mov	r2, r9
 80025fa:	08db      	lsrs	r3, r3, #3
 80025fc:	0752      	lsls	r2, r2, #29
 80025fe:	4313      	orrs	r3, r2
 8002600:	464a      	mov	r2, r9
 8002602:	08d2      	lsrs	r2, r2, #3
 8002604:	e6b5      	b.n	8002372 <__aeabi_dsub+0x32e>
 8002606:	08c0      	lsrs	r0, r0, #3
 8002608:	077b      	lsls	r3, r7, #29
 800260a:	4303      	orrs	r3, r0
 800260c:	08fa      	lsrs	r2, r7, #3
 800260e:	e6db      	b.n	80023c8 <__aeabi_dsub+0x384>
 8002610:	4649      	mov	r1, r9
 8002612:	4319      	orrs	r1, r3
 8002614:	000b      	movs	r3, r1
 8002616:	1e59      	subs	r1, r3, #1
 8002618:	418b      	sbcs	r3, r1
 800261a:	001c      	movs	r4, r3
 800261c:	e653      	b.n	80022c6 <__aeabi_dsub+0x282>
 800261e:	464d      	mov	r5, r9
 8002620:	3c20      	subs	r4, #32
 8002622:	40e5      	lsrs	r5, r4
 8002624:	2920      	cmp	r1, #32
 8002626:	d005      	beq.n	8002634 <__aeabi_dsub+0x5f0>
 8002628:	2440      	movs	r4, #64	; 0x40
 800262a:	1a64      	subs	r4, r4, r1
 800262c:	4649      	mov	r1, r9
 800262e:	40a1      	lsls	r1, r4
 8002630:	430b      	orrs	r3, r1
 8002632:	4698      	mov	r8, r3
 8002634:	4643      	mov	r3, r8
 8002636:	1e5c      	subs	r4, r3, #1
 8002638:	41a3      	sbcs	r3, r4
 800263a:	432b      	orrs	r3, r5
 800263c:	e776      	b.n	800252c <__aeabi_dsub+0x4e8>
 800263e:	2a00      	cmp	r2, #0
 8002640:	d0e1      	beq.n	8002606 <__aeabi_dsub+0x5c2>
 8002642:	003a      	movs	r2, r7
 8002644:	08db      	lsrs	r3, r3, #3
 8002646:	4302      	orrs	r2, r0
 8002648:	d100      	bne.n	800264c <__aeabi_dsub+0x608>
 800264a:	e6b8      	b.n	80023be <__aeabi_dsub+0x37a>
 800264c:	464a      	mov	r2, r9
 800264e:	0752      	lsls	r2, r2, #29
 8002650:	2480      	movs	r4, #128	; 0x80
 8002652:	4313      	orrs	r3, r2
 8002654:	464a      	mov	r2, r9
 8002656:	0324      	lsls	r4, r4, #12
 8002658:	08d2      	lsrs	r2, r2, #3
 800265a:	4222      	tst	r2, r4
 800265c:	d007      	beq.n	800266e <__aeabi_dsub+0x62a>
 800265e:	08fe      	lsrs	r6, r7, #3
 8002660:	4226      	tst	r6, r4
 8002662:	d104      	bne.n	800266e <__aeabi_dsub+0x62a>
 8002664:	465d      	mov	r5, fp
 8002666:	0032      	movs	r2, r6
 8002668:	08c3      	lsrs	r3, r0, #3
 800266a:	077f      	lsls	r7, r7, #29
 800266c:	433b      	orrs	r3, r7
 800266e:	0f59      	lsrs	r1, r3, #29
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	0749      	lsls	r1, r1, #29
 8002674:	08db      	lsrs	r3, r3, #3
 8002676:	430b      	orrs	r3, r1
 8002678:	e6a6      	b.n	80023c8 <__aeabi_dsub+0x384>
 800267a:	1ac4      	subs	r4, r0, r3
 800267c:	42a0      	cmp	r0, r4
 800267e:	4180      	sbcs	r0, r0
 8002680:	464b      	mov	r3, r9
 8002682:	4240      	negs	r0, r0
 8002684:	1aff      	subs	r7, r7, r3
 8002686:	1a3b      	subs	r3, r7, r0
 8002688:	469a      	mov	sl, r3
 800268a:	465d      	mov	r5, fp
 800268c:	2601      	movs	r6, #1
 800268e:	e533      	b.n	80020f8 <__aeabi_dsub+0xb4>
 8002690:	003b      	movs	r3, r7
 8002692:	4303      	orrs	r3, r0
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0x654>
 8002696:	e715      	b.n	80024c4 <__aeabi_dsub+0x480>
 8002698:	08c0      	lsrs	r0, r0, #3
 800269a:	077b      	lsls	r3, r7, #29
 800269c:	465d      	mov	r5, fp
 800269e:	4303      	orrs	r3, r0
 80026a0:	08fa      	lsrs	r2, r7, #3
 80026a2:	e666      	b.n	8002372 <__aeabi_dsub+0x32e>
 80026a4:	08c0      	lsrs	r0, r0, #3
 80026a6:	077b      	lsls	r3, r7, #29
 80026a8:	4303      	orrs	r3, r0
 80026aa:	08fa      	lsrs	r2, r7, #3
 80026ac:	e65e      	b.n	800236c <__aeabi_dsub+0x328>
 80026ae:	003a      	movs	r2, r7
 80026b0:	08db      	lsrs	r3, r3, #3
 80026b2:	4302      	orrs	r2, r0
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dsub+0x674>
 80026b6:	e682      	b.n	80023be <__aeabi_dsub+0x37a>
 80026b8:	464a      	mov	r2, r9
 80026ba:	0752      	lsls	r2, r2, #29
 80026bc:	2480      	movs	r4, #128	; 0x80
 80026be:	4313      	orrs	r3, r2
 80026c0:	464a      	mov	r2, r9
 80026c2:	0324      	lsls	r4, r4, #12
 80026c4:	08d2      	lsrs	r2, r2, #3
 80026c6:	4222      	tst	r2, r4
 80026c8:	d007      	beq.n	80026da <__aeabi_dsub+0x696>
 80026ca:	08fe      	lsrs	r6, r7, #3
 80026cc:	4226      	tst	r6, r4
 80026ce:	d104      	bne.n	80026da <__aeabi_dsub+0x696>
 80026d0:	465d      	mov	r5, fp
 80026d2:	0032      	movs	r2, r6
 80026d4:	08c3      	lsrs	r3, r0, #3
 80026d6:	077f      	lsls	r7, r7, #29
 80026d8:	433b      	orrs	r3, r7
 80026da:	0f59      	lsrs	r1, r3, #29
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	08db      	lsrs	r3, r3, #3
 80026e0:	0749      	lsls	r1, r1, #29
 80026e2:	430b      	orrs	r3, r1
 80026e4:	e670      	b.n	80023c8 <__aeabi_dsub+0x384>
 80026e6:	08c0      	lsrs	r0, r0, #3
 80026e8:	077b      	lsls	r3, r7, #29
 80026ea:	4303      	orrs	r3, r0
 80026ec:	08fa      	lsrs	r2, r7, #3
 80026ee:	e640      	b.n	8002372 <__aeabi_dsub+0x32e>
 80026f0:	464c      	mov	r4, r9
 80026f2:	3920      	subs	r1, #32
 80026f4:	40cc      	lsrs	r4, r1
 80026f6:	4661      	mov	r1, ip
 80026f8:	2920      	cmp	r1, #32
 80026fa:	d006      	beq.n	800270a <__aeabi_dsub+0x6c6>
 80026fc:	4666      	mov	r6, ip
 80026fe:	2140      	movs	r1, #64	; 0x40
 8002700:	1b89      	subs	r1, r1, r6
 8002702:	464e      	mov	r6, r9
 8002704:	408e      	lsls	r6, r1
 8002706:	4333      	orrs	r3, r6
 8002708:	4698      	mov	r8, r3
 800270a:	4643      	mov	r3, r8
 800270c:	1e59      	subs	r1, r3, #1
 800270e:	418b      	sbcs	r3, r1
 8002710:	431c      	orrs	r4, r3
 8002712:	e5d8      	b.n	80022c6 <__aeabi_dsub+0x282>
 8002714:	181c      	adds	r4, r3, r0
 8002716:	4284      	cmp	r4, r0
 8002718:	4180      	sbcs	r0, r0
 800271a:	444f      	add	r7, r9
 800271c:	46ba      	mov	sl, r7
 800271e:	4240      	negs	r0, r0
 8002720:	4482      	add	sl, r0
 8002722:	e6d9      	b.n	80024d8 <__aeabi_dsub+0x494>
 8002724:	4653      	mov	r3, sl
 8002726:	4323      	orrs	r3, r4
 8002728:	d100      	bne.n	800272c <__aeabi_dsub+0x6e8>
 800272a:	e6cb      	b.n	80024c4 <__aeabi_dsub+0x480>
 800272c:	e614      	b.n	8002358 <__aeabi_dsub+0x314>
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	000007ff 	.word	0x000007ff
 8002734:	ff7fffff 	.word	0xff7fffff
 8002738:	000007fe 	.word	0x000007fe
 800273c:	2300      	movs	r3, #0
 800273e:	4a01      	ldr	r2, [pc, #4]	; (8002744 <__aeabi_dsub+0x700>)
 8002740:	001c      	movs	r4, r3
 8002742:	e529      	b.n	8002198 <__aeabi_dsub+0x154>
 8002744:	000007ff 	.word	0x000007ff

08002748 <__aeabi_d2iz>:
 8002748:	000a      	movs	r2, r1
 800274a:	b530      	push	{r4, r5, lr}
 800274c:	4c13      	ldr	r4, [pc, #76]	; (800279c <__aeabi_d2iz+0x54>)
 800274e:	0053      	lsls	r3, r2, #1
 8002750:	0309      	lsls	r1, r1, #12
 8002752:	0005      	movs	r5, r0
 8002754:	0b09      	lsrs	r1, r1, #12
 8002756:	2000      	movs	r0, #0
 8002758:	0d5b      	lsrs	r3, r3, #21
 800275a:	0fd2      	lsrs	r2, r2, #31
 800275c:	42a3      	cmp	r3, r4
 800275e:	dd04      	ble.n	800276a <__aeabi_d2iz+0x22>
 8002760:	480f      	ldr	r0, [pc, #60]	; (80027a0 <__aeabi_d2iz+0x58>)
 8002762:	4283      	cmp	r3, r0
 8002764:	dd02      	ble.n	800276c <__aeabi_d2iz+0x24>
 8002766:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <__aeabi_d2iz+0x5c>)
 8002768:	18d0      	adds	r0, r2, r3
 800276a:	bd30      	pop	{r4, r5, pc}
 800276c:	2080      	movs	r0, #128	; 0x80
 800276e:	0340      	lsls	r0, r0, #13
 8002770:	4301      	orrs	r1, r0
 8002772:	480d      	ldr	r0, [pc, #52]	; (80027a8 <__aeabi_d2iz+0x60>)
 8002774:	1ac0      	subs	r0, r0, r3
 8002776:	281f      	cmp	r0, #31
 8002778:	dd08      	ble.n	800278c <__aeabi_d2iz+0x44>
 800277a:	480c      	ldr	r0, [pc, #48]	; (80027ac <__aeabi_d2iz+0x64>)
 800277c:	1ac3      	subs	r3, r0, r3
 800277e:	40d9      	lsrs	r1, r3
 8002780:	000b      	movs	r3, r1
 8002782:	4258      	negs	r0, r3
 8002784:	2a00      	cmp	r2, #0
 8002786:	d1f0      	bne.n	800276a <__aeabi_d2iz+0x22>
 8002788:	0018      	movs	r0, r3
 800278a:	e7ee      	b.n	800276a <__aeabi_d2iz+0x22>
 800278c:	4c08      	ldr	r4, [pc, #32]	; (80027b0 <__aeabi_d2iz+0x68>)
 800278e:	40c5      	lsrs	r5, r0
 8002790:	46a4      	mov	ip, r4
 8002792:	4463      	add	r3, ip
 8002794:	4099      	lsls	r1, r3
 8002796:	000b      	movs	r3, r1
 8002798:	432b      	orrs	r3, r5
 800279a:	e7f2      	b.n	8002782 <__aeabi_d2iz+0x3a>
 800279c:	000003fe 	.word	0x000003fe
 80027a0:	0000041d 	.word	0x0000041d
 80027a4:	7fffffff 	.word	0x7fffffff
 80027a8:	00000433 	.word	0x00000433
 80027ac:	00000413 	.word	0x00000413
 80027b0:	fffffbed 	.word	0xfffffbed

080027b4 <__aeabi_i2d>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	2800      	cmp	r0, #0
 80027b8:	d016      	beq.n	80027e8 <__aeabi_i2d+0x34>
 80027ba:	17c3      	asrs	r3, r0, #31
 80027bc:	18c5      	adds	r5, r0, r3
 80027be:	405d      	eors	r5, r3
 80027c0:	0fc4      	lsrs	r4, r0, #31
 80027c2:	0028      	movs	r0, r5
 80027c4:	f000 f91a 	bl	80029fc <__clzsi2>
 80027c8:	4b11      	ldr	r3, [pc, #68]	; (8002810 <__aeabi_i2d+0x5c>)
 80027ca:	1a1b      	subs	r3, r3, r0
 80027cc:	280a      	cmp	r0, #10
 80027ce:	dc16      	bgt.n	80027fe <__aeabi_i2d+0x4a>
 80027d0:	0002      	movs	r2, r0
 80027d2:	002e      	movs	r6, r5
 80027d4:	3215      	adds	r2, #21
 80027d6:	4096      	lsls	r6, r2
 80027d8:	220b      	movs	r2, #11
 80027da:	1a12      	subs	r2, r2, r0
 80027dc:	40d5      	lsrs	r5, r2
 80027de:	055b      	lsls	r3, r3, #21
 80027e0:	032d      	lsls	r5, r5, #12
 80027e2:	0b2d      	lsrs	r5, r5, #12
 80027e4:	0d5b      	lsrs	r3, r3, #21
 80027e6:	e003      	b.n	80027f0 <__aeabi_i2d+0x3c>
 80027e8:	2400      	movs	r4, #0
 80027ea:	2300      	movs	r3, #0
 80027ec:	2500      	movs	r5, #0
 80027ee:	2600      	movs	r6, #0
 80027f0:	051b      	lsls	r3, r3, #20
 80027f2:	432b      	orrs	r3, r5
 80027f4:	07e4      	lsls	r4, r4, #31
 80027f6:	4323      	orrs	r3, r4
 80027f8:	0030      	movs	r0, r6
 80027fa:	0019      	movs	r1, r3
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
 80027fe:	380b      	subs	r0, #11
 8002800:	4085      	lsls	r5, r0
 8002802:	055b      	lsls	r3, r3, #21
 8002804:	032d      	lsls	r5, r5, #12
 8002806:	2600      	movs	r6, #0
 8002808:	0b2d      	lsrs	r5, r5, #12
 800280a:	0d5b      	lsrs	r3, r3, #21
 800280c:	e7f0      	b.n	80027f0 <__aeabi_i2d+0x3c>
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	0000041e 	.word	0x0000041e

08002814 <__aeabi_ui2d>:
 8002814:	b510      	push	{r4, lr}
 8002816:	1e04      	subs	r4, r0, #0
 8002818:	d010      	beq.n	800283c <__aeabi_ui2d+0x28>
 800281a:	f000 f8ef 	bl	80029fc <__clzsi2>
 800281e:	4b0f      	ldr	r3, [pc, #60]	; (800285c <__aeabi_ui2d+0x48>)
 8002820:	1a1b      	subs	r3, r3, r0
 8002822:	280a      	cmp	r0, #10
 8002824:	dc11      	bgt.n	800284a <__aeabi_ui2d+0x36>
 8002826:	220b      	movs	r2, #11
 8002828:	0021      	movs	r1, r4
 800282a:	1a12      	subs	r2, r2, r0
 800282c:	40d1      	lsrs	r1, r2
 800282e:	3015      	adds	r0, #21
 8002830:	030a      	lsls	r2, r1, #12
 8002832:	055b      	lsls	r3, r3, #21
 8002834:	4084      	lsls	r4, r0
 8002836:	0b12      	lsrs	r2, r2, #12
 8002838:	0d5b      	lsrs	r3, r3, #21
 800283a:	e001      	b.n	8002840 <__aeabi_ui2d+0x2c>
 800283c:	2300      	movs	r3, #0
 800283e:	2200      	movs	r2, #0
 8002840:	051b      	lsls	r3, r3, #20
 8002842:	4313      	orrs	r3, r2
 8002844:	0020      	movs	r0, r4
 8002846:	0019      	movs	r1, r3
 8002848:	bd10      	pop	{r4, pc}
 800284a:	0022      	movs	r2, r4
 800284c:	380b      	subs	r0, #11
 800284e:	4082      	lsls	r2, r0
 8002850:	055b      	lsls	r3, r3, #21
 8002852:	0312      	lsls	r2, r2, #12
 8002854:	2400      	movs	r4, #0
 8002856:	0b12      	lsrs	r2, r2, #12
 8002858:	0d5b      	lsrs	r3, r3, #21
 800285a:	e7f1      	b.n	8002840 <__aeabi_ui2d+0x2c>
 800285c:	0000041e 	.word	0x0000041e

08002860 <__aeabi_f2d>:
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	0242      	lsls	r2, r0, #9
 8002864:	0043      	lsls	r3, r0, #1
 8002866:	0fc4      	lsrs	r4, r0, #31
 8002868:	20fe      	movs	r0, #254	; 0xfe
 800286a:	0e1b      	lsrs	r3, r3, #24
 800286c:	1c59      	adds	r1, r3, #1
 800286e:	0a55      	lsrs	r5, r2, #9
 8002870:	4208      	tst	r0, r1
 8002872:	d00c      	beq.n	800288e <__aeabi_f2d+0x2e>
 8002874:	21e0      	movs	r1, #224	; 0xe0
 8002876:	0089      	lsls	r1, r1, #2
 8002878:	468c      	mov	ip, r1
 800287a:	076d      	lsls	r5, r5, #29
 800287c:	0b12      	lsrs	r2, r2, #12
 800287e:	4463      	add	r3, ip
 8002880:	051b      	lsls	r3, r3, #20
 8002882:	4313      	orrs	r3, r2
 8002884:	07e4      	lsls	r4, r4, #31
 8002886:	4323      	orrs	r3, r4
 8002888:	0028      	movs	r0, r5
 800288a:	0019      	movs	r1, r3
 800288c:	bd70      	pop	{r4, r5, r6, pc}
 800288e:	2b00      	cmp	r3, #0
 8002890:	d114      	bne.n	80028bc <__aeabi_f2d+0x5c>
 8002892:	2d00      	cmp	r5, #0
 8002894:	d01b      	beq.n	80028ce <__aeabi_f2d+0x6e>
 8002896:	0028      	movs	r0, r5
 8002898:	f000 f8b0 	bl	80029fc <__clzsi2>
 800289c:	280a      	cmp	r0, #10
 800289e:	dc1c      	bgt.n	80028da <__aeabi_f2d+0x7a>
 80028a0:	230b      	movs	r3, #11
 80028a2:	002a      	movs	r2, r5
 80028a4:	1a1b      	subs	r3, r3, r0
 80028a6:	40da      	lsrs	r2, r3
 80028a8:	0003      	movs	r3, r0
 80028aa:	3315      	adds	r3, #21
 80028ac:	409d      	lsls	r5, r3
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <__aeabi_f2d+0x88>)
 80028b0:	0312      	lsls	r2, r2, #12
 80028b2:	1a1b      	subs	r3, r3, r0
 80028b4:	055b      	lsls	r3, r3, #21
 80028b6:	0b12      	lsrs	r2, r2, #12
 80028b8:	0d5b      	lsrs	r3, r3, #21
 80028ba:	e7e1      	b.n	8002880 <__aeabi_f2d+0x20>
 80028bc:	2d00      	cmp	r5, #0
 80028be:	d009      	beq.n	80028d4 <__aeabi_f2d+0x74>
 80028c0:	0b13      	lsrs	r3, r2, #12
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	0312      	lsls	r2, r2, #12
 80028c6:	431a      	orrs	r2, r3
 80028c8:	076d      	lsls	r5, r5, #29
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <__aeabi_f2d+0x8c>)
 80028cc:	e7d8      	b.n	8002880 <__aeabi_f2d+0x20>
 80028ce:	2300      	movs	r3, #0
 80028d0:	2200      	movs	r2, #0
 80028d2:	e7d5      	b.n	8002880 <__aeabi_f2d+0x20>
 80028d4:	2200      	movs	r2, #0
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <__aeabi_f2d+0x8c>)
 80028d8:	e7d2      	b.n	8002880 <__aeabi_f2d+0x20>
 80028da:	0003      	movs	r3, r0
 80028dc:	002a      	movs	r2, r5
 80028de:	3b0b      	subs	r3, #11
 80028e0:	409a      	lsls	r2, r3
 80028e2:	2500      	movs	r5, #0
 80028e4:	e7e3      	b.n	80028ae <__aeabi_f2d+0x4e>
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	00000389 	.word	0x00000389
 80028ec:	000007ff 	.word	0x000007ff

080028f0 <__aeabi_d2f>:
 80028f0:	0002      	movs	r2, r0
 80028f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f4:	004b      	lsls	r3, r1, #1
 80028f6:	030d      	lsls	r5, r1, #12
 80028f8:	0f40      	lsrs	r0, r0, #29
 80028fa:	0d5b      	lsrs	r3, r3, #21
 80028fc:	0fcc      	lsrs	r4, r1, #31
 80028fe:	0a6d      	lsrs	r5, r5, #9
 8002900:	493a      	ldr	r1, [pc, #232]	; (80029ec <__aeabi_d2f+0xfc>)
 8002902:	4305      	orrs	r5, r0
 8002904:	1c58      	adds	r0, r3, #1
 8002906:	00d7      	lsls	r7, r2, #3
 8002908:	4208      	tst	r0, r1
 800290a:	d00a      	beq.n	8002922 <__aeabi_d2f+0x32>
 800290c:	4938      	ldr	r1, [pc, #224]	; (80029f0 <__aeabi_d2f+0x100>)
 800290e:	1859      	adds	r1, r3, r1
 8002910:	29fe      	cmp	r1, #254	; 0xfe
 8002912:	dd16      	ble.n	8002942 <__aeabi_d2f+0x52>
 8002914:	20ff      	movs	r0, #255	; 0xff
 8002916:	2200      	movs	r2, #0
 8002918:	05c0      	lsls	r0, r0, #23
 800291a:	4310      	orrs	r0, r2
 800291c:	07e4      	lsls	r4, r4, #31
 800291e:	4320      	orrs	r0, r4
 8002920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <__aeabi_d2f+0x44>
 8002926:	433d      	orrs	r5, r7
 8002928:	d026      	beq.n	8002978 <__aeabi_d2f+0x88>
 800292a:	2205      	movs	r2, #5
 800292c:	0192      	lsls	r2, r2, #6
 800292e:	0a52      	lsrs	r2, r2, #9
 8002930:	b2d8      	uxtb	r0, r3
 8002932:	e7f1      	b.n	8002918 <__aeabi_d2f+0x28>
 8002934:	432f      	orrs	r7, r5
 8002936:	d0ed      	beq.n	8002914 <__aeabi_d2f+0x24>
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	03d2      	lsls	r2, r2, #15
 800293c:	20ff      	movs	r0, #255	; 0xff
 800293e:	432a      	orrs	r2, r5
 8002940:	e7ea      	b.n	8002918 <__aeabi_d2f+0x28>
 8002942:	2900      	cmp	r1, #0
 8002944:	dd1b      	ble.n	800297e <__aeabi_d2f+0x8e>
 8002946:	0192      	lsls	r2, r2, #6
 8002948:	1e50      	subs	r0, r2, #1
 800294a:	4182      	sbcs	r2, r0
 800294c:	00ed      	lsls	r5, r5, #3
 800294e:	0f7f      	lsrs	r7, r7, #29
 8002950:	432a      	orrs	r2, r5
 8002952:	433a      	orrs	r2, r7
 8002954:	0753      	lsls	r3, r2, #29
 8002956:	d047      	beq.n	80029e8 <__aeabi_d2f+0xf8>
 8002958:	230f      	movs	r3, #15
 800295a:	4013      	ands	r3, r2
 800295c:	2b04      	cmp	r3, #4
 800295e:	d000      	beq.n	8002962 <__aeabi_d2f+0x72>
 8002960:	3204      	adds	r2, #4
 8002962:	2380      	movs	r3, #128	; 0x80
 8002964:	04db      	lsls	r3, r3, #19
 8002966:	4013      	ands	r3, r2
 8002968:	d03e      	beq.n	80029e8 <__aeabi_d2f+0xf8>
 800296a:	1c48      	adds	r0, r1, #1
 800296c:	29fe      	cmp	r1, #254	; 0xfe
 800296e:	d0d1      	beq.n	8002914 <__aeabi_d2f+0x24>
 8002970:	0192      	lsls	r2, r2, #6
 8002972:	0a52      	lsrs	r2, r2, #9
 8002974:	b2c0      	uxtb	r0, r0
 8002976:	e7cf      	b.n	8002918 <__aeabi_d2f+0x28>
 8002978:	2000      	movs	r0, #0
 800297a:	2200      	movs	r2, #0
 800297c:	e7cc      	b.n	8002918 <__aeabi_d2f+0x28>
 800297e:	000a      	movs	r2, r1
 8002980:	3217      	adds	r2, #23
 8002982:	db2f      	blt.n	80029e4 <__aeabi_d2f+0xf4>
 8002984:	2680      	movs	r6, #128	; 0x80
 8002986:	0436      	lsls	r6, r6, #16
 8002988:	432e      	orrs	r6, r5
 800298a:	251e      	movs	r5, #30
 800298c:	1a6d      	subs	r5, r5, r1
 800298e:	2d1f      	cmp	r5, #31
 8002990:	dd11      	ble.n	80029b6 <__aeabi_d2f+0xc6>
 8002992:	2202      	movs	r2, #2
 8002994:	4252      	negs	r2, r2
 8002996:	1a52      	subs	r2, r2, r1
 8002998:	0031      	movs	r1, r6
 800299a:	40d1      	lsrs	r1, r2
 800299c:	2d20      	cmp	r5, #32
 800299e:	d004      	beq.n	80029aa <__aeabi_d2f+0xba>
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <__aeabi_d2f+0x104>)
 80029a2:	4694      	mov	ip, r2
 80029a4:	4463      	add	r3, ip
 80029a6:	409e      	lsls	r6, r3
 80029a8:	4337      	orrs	r7, r6
 80029aa:	003a      	movs	r2, r7
 80029ac:	1e53      	subs	r3, r2, #1
 80029ae:	419a      	sbcs	r2, r3
 80029b0:	430a      	orrs	r2, r1
 80029b2:	2100      	movs	r1, #0
 80029b4:	e7ce      	b.n	8002954 <__aeabi_d2f+0x64>
 80029b6:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <__aeabi_d2f+0x108>)
 80029b8:	0038      	movs	r0, r7
 80029ba:	4694      	mov	ip, r2
 80029bc:	4463      	add	r3, ip
 80029be:	4098      	lsls	r0, r3
 80029c0:	003a      	movs	r2, r7
 80029c2:	1e41      	subs	r1, r0, #1
 80029c4:	4188      	sbcs	r0, r1
 80029c6:	409e      	lsls	r6, r3
 80029c8:	40ea      	lsrs	r2, r5
 80029ca:	4330      	orrs	r0, r6
 80029cc:	4302      	orrs	r2, r0
 80029ce:	2100      	movs	r1, #0
 80029d0:	0753      	lsls	r3, r2, #29
 80029d2:	d1c1      	bne.n	8002958 <__aeabi_d2f+0x68>
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	0013      	movs	r3, r2
 80029d8:	04c9      	lsls	r1, r1, #19
 80029da:	2001      	movs	r0, #1
 80029dc:	400b      	ands	r3, r1
 80029de:	420a      	tst	r2, r1
 80029e0:	d1c6      	bne.n	8002970 <__aeabi_d2f+0x80>
 80029e2:	e7a3      	b.n	800292c <__aeabi_d2f+0x3c>
 80029e4:	2300      	movs	r3, #0
 80029e6:	e7a0      	b.n	800292a <__aeabi_d2f+0x3a>
 80029e8:	000b      	movs	r3, r1
 80029ea:	e79f      	b.n	800292c <__aeabi_d2f+0x3c>
 80029ec:	000007fe 	.word	0x000007fe
 80029f0:	fffffc80 	.word	0xfffffc80
 80029f4:	fffffca2 	.word	0xfffffca2
 80029f8:	fffffc82 	.word	0xfffffc82

080029fc <__clzsi2>:
 80029fc:	211c      	movs	r1, #28
 80029fe:	2301      	movs	r3, #1
 8002a00:	041b      	lsls	r3, r3, #16
 8002a02:	4298      	cmp	r0, r3
 8002a04:	d301      	bcc.n	8002a0a <__clzsi2+0xe>
 8002a06:	0c00      	lsrs	r0, r0, #16
 8002a08:	3910      	subs	r1, #16
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	4298      	cmp	r0, r3
 8002a0e:	d301      	bcc.n	8002a14 <__clzsi2+0x18>
 8002a10:	0a00      	lsrs	r0, r0, #8
 8002a12:	3908      	subs	r1, #8
 8002a14:	091b      	lsrs	r3, r3, #4
 8002a16:	4298      	cmp	r0, r3
 8002a18:	d301      	bcc.n	8002a1e <__clzsi2+0x22>
 8002a1a:	0900      	lsrs	r0, r0, #4
 8002a1c:	3904      	subs	r1, #4
 8002a1e:	a202      	add	r2, pc, #8	; (adr r2, 8002a28 <__clzsi2+0x2c>)
 8002a20:	5c10      	ldrb	r0, [r2, r0]
 8002a22:	1840      	adds	r0, r0, r1
 8002a24:	4770      	bx	lr
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	02020304 	.word	0x02020304
 8002a2c:	01010101 	.word	0x01010101
	...

08002a38 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	0004      	movs	r4, r0
 8002a40:	0008      	movs	r0, r1
 8002a42:	0011      	movs	r1, r2
 8002a44:	1dbb      	adds	r3, r7, #6
 8002a46:	1c22      	adds	r2, r4, #0
 8002a48:	801a      	strh	r2, [r3, #0]
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	1c02      	adds	r2, r0, #0
 8002a4e:	801a      	strh	r2, [r3, #0]
 8002a50:	1cbb      	adds	r3, r7, #2
 8002a52:	1c0a      	adds	r2, r1, #0
 8002a54:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(x, y, color);
 8002a56:	1dbb      	adds	r3, r7, #6
 8002a58:	8818      	ldrh	r0, [r3, #0]
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	8819      	ldrh	r1, [r3, #0]
 8002a5e:	1cbb      	adds	r3, r7, #2
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	001a      	movs	r2, r3
 8002a64:	f001 fb30 	bl	80040c8 <ST7735_DrawPixel>
}
 8002a68:	46c0      	nop			; (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b003      	add	sp, #12
 8002a6e:	bd90      	pop	{r4, r7, pc}

08002a70 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002a70:	b5b0      	push	{r4, r5, r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	0005      	movs	r5, r0
 8002a78:	000c      	movs	r4, r1
 8002a7a:	0010      	movs	r0, r2
 8002a7c:	0019      	movs	r1, r3
 8002a7e:	1dbb      	adds	r3, r7, #6
 8002a80:	1c2a      	adds	r2, r5, #0
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	1c22      	adds	r2, r4, #0
 8002a88:	801a      	strh	r2, [r3, #0]
 8002a8a:	1cbb      	adds	r3, r7, #2
 8002a8c:	1c02      	adds	r2, r0, #0
 8002a8e:	801a      	strh	r2, [r3, #0]
 8002a90:	003b      	movs	r3, r7
 8002a92:	1c0a      	adds	r2, r1, #0
 8002a94:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8002a96:	1dbb      	adds	r3, r7, #6
 8002a98:	8818      	ldrh	r0, [r3, #0]
 8002a9a:	1d3b      	adds	r3, r7, #4
 8002a9c:	8819      	ldrh	r1, [r3, #0]
 8002a9e:	1cbb      	adds	r3, r7, #2
 8002aa0:	881a      	ldrh	r2, [r3, #0]
 8002aa2:	003b      	movs	r3, r7
 8002aa4:	881c      	ldrh	r4, [r3, #0]
 8002aa6:	2318      	movs	r3, #24
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	0023      	movs	r3, r4
 8002ab0:	f001 fc86 	bl	80043c0 <ST7735_FillRectangle>
}
 8002ab4:	46c0      	nop			; (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b002      	add	sp, #8
 8002aba:	bdb0      	pop	{r4, r5, r7, pc}

08002abc <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	0004      	movs	r4, r0
 8002ac4:	0008      	movs	r0, r1
 8002ac6:	0011      	movs	r1, r2
 8002ac8:	1dbb      	adds	r3, r7, #6
 8002aca:	1c22      	adds	r2, r4, #0
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	1c02      	adds	r2, r0, #0
 8002ad2:	801a      	strh	r2, [r3, #0]
 8002ad4:	1cbb      	adds	r3, r7, #2
 8002ad6:	1c0a      	adds	r2, r1, #0
 8002ad8:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8002ada:	1cbb      	adds	r3, r7, #2
 8002adc:	881a      	ldrh	r2, [r3, #0]
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	5e59      	ldrsh	r1, [r3, r1]
 8002ae4:	1dbb      	adds	r3, r7, #6
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	5e1b      	ldrsh	r3, [r3, r0]
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7ff ffa4 	bl	8002a38 <drawPixel>
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b003      	add	sp, #12
 8002af6:	bd90      	pop	{r4, r7, pc}

08002af8 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002af8:	b5b0      	push	{r4, r5, r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	0005      	movs	r5, r0
 8002b00:	000c      	movs	r4, r1
 8002b02:	0010      	movs	r0, r2
 8002b04:	0019      	movs	r1, r3
 8002b06:	1dbb      	adds	r3, r7, #6
 8002b08:	1c2a      	adds	r2, r5, #0
 8002b0a:	801a      	strh	r2, [r3, #0]
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	1c22      	adds	r2, r4, #0
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	1cbb      	adds	r3, r7, #2
 8002b14:	1c02      	adds	r2, r0, #0
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	003b      	movs	r3, r7
 8002b1a:	1c0a      	adds	r2, r1, #0
 8002b1c:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8002b1e:	003b      	movs	r3, r7
 8002b20:	2200      	movs	r2, #0
 8002b22:	5e9a      	ldrsh	r2, [r3, r2]
 8002b24:	1d3b      	adds	r3, r7, #4
 8002b26:	2100      	movs	r1, #0
 8002b28:	5e5b      	ldrsh	r3, [r3, r1]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	17d9      	asrs	r1, r3, #31
 8002b2e:	185a      	adds	r2, r3, r1
 8002b30:	404a      	eors	r2, r1
 8002b32:	1cbb      	adds	r3, r7, #2
 8002b34:	2100      	movs	r1, #0
 8002b36:	5e59      	ldrsh	r1, [r3, r1]
 8002b38:	1dbb      	adds	r3, r7, #6
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	5e1b      	ldrsh	r3, [r3, r0]
 8002b3e:	1acb      	subs	r3, r1, r3
 8002b40:	17d9      	asrs	r1, r3, #31
 8002b42:	185b      	adds	r3, r3, r1
 8002b44:	404b      	eors	r3, r1
 8002b46:	2101      	movs	r1, #1
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	dc01      	bgt.n	8002b50 <writeLine+0x58>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	1c19      	adds	r1, r3, #0
 8002b50:	b2ca      	uxtb	r2, r1
 8002b52:	211a      	movs	r1, #26
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	5e9b      	ldrsh	r3, [r3, r2]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d019      	beq.n	8002b96 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8002b62:	2118      	movs	r1, #24
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	1dba      	adds	r2, r7, #6
 8002b68:	8812      	ldrh	r2, [r2, #0]
 8002b6a:	801a      	strh	r2, [r3, #0]
 8002b6c:	1dbb      	adds	r3, r7, #6
 8002b6e:	1d3a      	adds	r2, r7, #4
 8002b70:	8812      	ldrh	r2, [r2, #0]
 8002b72:	801a      	strh	r2, [r3, #0]
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	187a      	adds	r2, r7, r1
 8002b78:	8812      	ldrh	r2, [r2, #0]
 8002b7a:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8002b7c:	2116      	movs	r1, #22
 8002b7e:	187b      	adds	r3, r7, r1
 8002b80:	1cba      	adds	r2, r7, #2
 8002b82:	8812      	ldrh	r2, [r2, #0]
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	1cbb      	adds	r3, r7, #2
 8002b88:	003a      	movs	r2, r7
 8002b8a:	8812      	ldrh	r2, [r2, #0]
 8002b8c:	801a      	strh	r2, [r3, #0]
 8002b8e:	003b      	movs	r3, r7
 8002b90:	187a      	adds	r2, r7, r1
 8002b92:	8812      	ldrh	r2, [r2, #0]
 8002b94:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8002b96:	1dba      	adds	r2, r7, #6
 8002b98:	1cbb      	adds	r3, r7, #2
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5e52      	ldrsh	r2, [r2, r1]
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	5e5b      	ldrsh	r3, [r3, r1]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dd19      	ble.n	8002bda <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8002ba6:	2114      	movs	r1, #20
 8002ba8:	187b      	adds	r3, r7, r1
 8002baa:	1dba      	adds	r2, r7, #6
 8002bac:	8812      	ldrh	r2, [r2, #0]
 8002bae:	801a      	strh	r2, [r3, #0]
 8002bb0:	1dbb      	adds	r3, r7, #6
 8002bb2:	1cba      	adds	r2, r7, #2
 8002bb4:	8812      	ldrh	r2, [r2, #0]
 8002bb6:	801a      	strh	r2, [r3, #0]
 8002bb8:	1cbb      	adds	r3, r7, #2
 8002bba:	187a      	adds	r2, r7, r1
 8002bbc:	8812      	ldrh	r2, [r2, #0]
 8002bbe:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8002bc0:	2112      	movs	r1, #18
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	1d3a      	adds	r2, r7, #4
 8002bc6:	8812      	ldrh	r2, [r2, #0]
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	003a      	movs	r2, r7
 8002bce:	8812      	ldrh	r2, [r2, #0]
 8002bd0:	801a      	strh	r2, [r3, #0]
 8002bd2:	003b      	movs	r3, r7
 8002bd4:	187a      	adds	r2, r7, r1
 8002bd6:	8812      	ldrh	r2, [r2, #0]
 8002bd8:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8002bda:	1cbb      	adds	r3, r7, #2
 8002bdc:	881a      	ldrh	r2, [r3, #0]
 8002bde:	1dbb      	adds	r3, r7, #6
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	2010      	movs	r0, #16
 8002be8:	183b      	adds	r3, r7, r0
 8002bea:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8002bec:	003b      	movs	r3, r7
 8002bee:	2200      	movs	r2, #0
 8002bf0:	5e9a      	ldrsh	r2, [r3, r2]
 8002bf2:	1d3b      	adds	r3, r7, #4
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	5e5b      	ldrsh	r3, [r3, r1]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	17d9      	asrs	r1, r3, #31
 8002bfc:	185a      	adds	r2, r3, r1
 8002bfe:	404a      	eors	r2, r1
 8002c00:	230e      	movs	r3, #14
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8002c06:	231e      	movs	r3, #30
 8002c08:	18fa      	adds	r2, r7, r3
 8002c0a:	183b      	adds	r3, r7, r0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	5e5b      	ldrsh	r3, [r3, r1]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	da00      	bge.n	8002c16 <writeLine+0x11e>
 8002c14:	3301      	adds	r3, #1
 8002c16:	105b      	asrs	r3, r3, #1
 8002c18:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8002c1a:	1d3a      	adds	r2, r7, #4
 8002c1c:	003b      	movs	r3, r7
 8002c1e:	2100      	movs	r1, #0
 8002c20:	5e52      	ldrsh	r2, [r2, r1]
 8002c22:	2100      	movs	r1, #0
 8002c24:	5e5b      	ldrsh	r3, [r3, r1]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	da04      	bge.n	8002c34 <writeLine+0x13c>
        ystep = 1;
 8002c2a:	231c      	movs	r3, #28
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2201      	movs	r2, #1
 8002c30:	801a      	strh	r2, [r3, #0]
 8002c32:	e04d      	b.n	8002cd0 <writeLine+0x1d8>
    } else {
        ystep = -1;
 8002c34:	231c      	movs	r3, #28
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2201      	movs	r2, #1
 8002c3a:	4252      	negs	r2, r2
 8002c3c:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8002c3e:	e047      	b.n	8002cd0 <writeLine+0x1d8>
        if (steep) {
 8002c40:	231a      	movs	r3, #26
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	2200      	movs	r2, #0
 8002c46:	5e9b      	ldrsh	r3, [r3, r2]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00c      	beq.n	8002c66 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8002c4c:	2330      	movs	r3, #48	; 0x30
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	881a      	ldrh	r2, [r3, #0]
 8002c52:	1dbb      	adds	r3, r7, #6
 8002c54:	2100      	movs	r1, #0
 8002c56:	5e59      	ldrsh	r1, [r3, r1]
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	5e1b      	ldrsh	r3, [r3, r0]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff ff2c 	bl	8002abc <writePixel>
 8002c64:	e00b      	b.n	8002c7e <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8002c66:	2330      	movs	r3, #48	; 0x30
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	881a      	ldrh	r2, [r3, #0]
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5e59      	ldrsh	r1, [r3, r1]
 8002c72:	1dbb      	adds	r3, r7, #6
 8002c74:	2000      	movs	r0, #0
 8002c76:	5e1b      	ldrsh	r3, [r3, r0]
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7ff ff1f 	bl	8002abc <writePixel>
        }
        err -= dy;
 8002c7e:	211e      	movs	r1, #30
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	881a      	ldrh	r2, [r3, #0]
 8002c84:	230e      	movs	r3, #14
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	2200      	movs	r2, #0
 8002c96:	5e9b      	ldrsh	r3, [r3, r2]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	da11      	bge.n	8002cc0 <writeLine+0x1c8>
            y0 += ystep;
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	881a      	ldrh	r2, [r3, #0]
 8002ca0:	231c      	movs	r3, #28
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	18d3      	adds	r3, r2, r3
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	801a      	strh	r2, [r3, #0]
            err += dx;
 8002cae:	187b      	adds	r3, r7, r1
 8002cb0:	881a      	ldrh	r2, [r3, #0]
 8002cb2:	2310      	movs	r3, #16
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	18d3      	adds	r3, r2, r3
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	187b      	adds	r3, r7, r1
 8002cbe:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8002cc0:	1dbb      	adds	r3, r7, #6
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	5e9b      	ldrsh	r3, [r3, r2]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3301      	adds	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	1dbb      	adds	r3, r7, #6
 8002cce:	801a      	strh	r2, [r3, #0]
 8002cd0:	1dba      	adds	r2, r7, #6
 8002cd2:	1cbb      	adds	r3, r7, #2
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	5e52      	ldrsh	r2, [r2, r1]
 8002cd8:	2100      	movs	r1, #0
 8002cda:	5e5b      	ldrsh	r3, [r3, r1]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	ddaf      	ble.n	8002c40 <writeLine+0x148>
        }
    }
}
 8002ce0:	46c0      	nop			; (mov r8, r8)
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b008      	add	sp, #32
 8002ce8:	bdb0      	pop	{r4, r5, r7, pc}

08002cea <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8002cea:	b5b0      	push	{r4, r5, r7, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af02      	add	r7, sp, #8
 8002cf0:	0005      	movs	r5, r0
 8002cf2:	000c      	movs	r4, r1
 8002cf4:	0010      	movs	r0, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	1dbb      	adds	r3, r7, #6
 8002cfa:	1c2a      	adds	r2, r5, #0
 8002cfc:	801a      	strh	r2, [r3, #0]
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	1c22      	adds	r2, r4, #0
 8002d02:	801a      	strh	r2, [r3, #0]
 8002d04:	1cbb      	adds	r3, r7, #2
 8002d06:	1c02      	adds	r2, r0, #0
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	003b      	movs	r3, r7
 8002d0c:	1c0a      	adds	r2, r1, #0
 8002d0e:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8002d10:	1d3b      	adds	r3, r7, #4
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	1cbb      	adds	r3, r7, #2
 8002d16:	881b      	ldrh	r3, [r3, #0]
 8002d18:	18d3      	adds	r3, r2, r3
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b21c      	sxth	r4, r3
 8002d22:	1dbb      	adds	r3, r7, #6
 8002d24:	2200      	movs	r2, #0
 8002d26:	5e9a      	ldrsh	r2, [r3, r2]
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5e59      	ldrsh	r1, [r3, r1]
 8002d2e:	1dbb      	adds	r3, r7, #6
 8002d30:	2000      	movs	r0, #0
 8002d32:	5e18      	ldrsh	r0, [r3, r0]
 8002d34:	003b      	movs	r3, r7
 8002d36:	881b      	ldrh	r3, [r3, #0]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	0023      	movs	r3, r4
 8002d3c:	f7ff fedc 	bl	8002af8 <writeLine>
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bdb0      	pop	{r4, r5, r7, pc}

08002d48 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8002d48:	b5b0      	push	{r4, r5, r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	0005      	movs	r5, r0
 8002d50:	000c      	movs	r4, r1
 8002d52:	0010      	movs	r0, r2
 8002d54:	0019      	movs	r1, r3
 8002d56:	1dbb      	adds	r3, r7, #6
 8002d58:	1c2a      	adds	r2, r5, #0
 8002d5a:	801a      	strh	r2, [r3, #0]
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	1c22      	adds	r2, r4, #0
 8002d60:	801a      	strh	r2, [r3, #0]
 8002d62:	1cbb      	adds	r3, r7, #2
 8002d64:	1c02      	adds	r2, r0, #0
 8002d66:	801a      	strh	r2, [r3, #0]
 8002d68:	003b      	movs	r3, r7
 8002d6a:	1c0a      	adds	r2, r1, #0
 8002d6c:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8002d6e:	1dbb      	adds	r3, r7, #6
 8002d70:	881a      	ldrh	r2, [r3, #0]
 8002d72:	1cbb      	adds	r3, r7, #2
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	18d3      	adds	r3, r2, r3
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	b21a      	sxth	r2, r3
 8002d80:	1d3b      	adds	r3, r7, #4
 8002d82:	2400      	movs	r4, #0
 8002d84:	5f1c      	ldrsh	r4, [r3, r4]
 8002d86:	1d3b      	adds	r3, r7, #4
 8002d88:	2100      	movs	r1, #0
 8002d8a:	5e59      	ldrsh	r1, [r3, r1]
 8002d8c:	1dbb      	adds	r3, r7, #6
 8002d8e:	2000      	movs	r0, #0
 8002d90:	5e18      	ldrsh	r0, [r3, r0]
 8002d92:	003b      	movs	r3, r7
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	0023      	movs	r3, r4
 8002d9a:	f7ff fead 	bl	8002af8 <writeLine>
}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	46bd      	mov	sp, r7
 8002da2:	b002      	add	sp, #8
 8002da4:	bdb0      	pop	{r4, r5, r7, pc}

08002da6 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002da6:	b5b0      	push	{r4, r5, r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af02      	add	r7, sp, #8
 8002dac:	0005      	movs	r5, r0
 8002dae:	000c      	movs	r4, r1
 8002db0:	0010      	movs	r0, r2
 8002db2:	0019      	movs	r1, r3
 8002db4:	1dbb      	adds	r3, r7, #6
 8002db6:	1c2a      	adds	r2, r5, #0
 8002db8:	801a      	strh	r2, [r3, #0]
 8002dba:	1d3b      	adds	r3, r7, #4
 8002dbc:	1c22      	adds	r2, r4, #0
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	1cbb      	adds	r3, r7, #2
 8002dc2:	1c02      	adds	r2, r0, #0
 8002dc4:	801a      	strh	r2, [r3, #0]
 8002dc6:	003b      	movs	r3, r7
 8002dc8:	1c0a      	adds	r2, r1, #0
 8002dca:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8002dcc:	1dba      	adds	r2, r7, #6
 8002dce:	1cbb      	adds	r3, r7, #2
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5e52      	ldrsh	r2, [r2, r1]
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	5e5b      	ldrsh	r3, [r3, r1]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d12a      	bne.n	8002e32 <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8002ddc:	1d3a      	adds	r2, r7, #4
 8002dde:	003b      	movs	r3, r7
 8002de0:	2100      	movs	r1, #0
 8002de2:	5e52      	ldrsh	r2, [r2, r1]
 8002de4:	2100      	movs	r1, #0
 8002de6:	5e5b      	ldrsh	r3, [r3, r1]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	dd0c      	ble.n	8002e06 <drawLine+0x60>
 8002dec:	210c      	movs	r1, #12
 8002dee:	187b      	adds	r3, r7, r1
 8002df0:	1d3a      	adds	r2, r7, #4
 8002df2:	8812      	ldrh	r2, [r2, #0]
 8002df4:	801a      	strh	r2, [r3, #0]
 8002df6:	1d3b      	adds	r3, r7, #4
 8002df8:	003a      	movs	r2, r7
 8002dfa:	8812      	ldrh	r2, [r2, #0]
 8002dfc:	801a      	strh	r2, [r3, #0]
 8002dfe:	003b      	movs	r3, r7
 8002e00:	187a      	adds	r2, r7, r1
 8002e02:	8812      	ldrh	r2, [r2, #0]
 8002e04:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8002e06:	003b      	movs	r3, r7
 8002e08:	881a      	ldrh	r2, [r3, #0]
 8002e0a:	1d3b      	adds	r3, r7, #4
 8002e0c:	881b      	ldrh	r3, [r3, #0]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	b21a      	sxth	r2, r3
 8002e18:	2320      	movs	r3, #32
 8002e1a:	18fb      	adds	r3, r7, r3
 8002e1c:	881c      	ldrh	r4, [r3, #0]
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	2100      	movs	r1, #0
 8002e22:	5e59      	ldrsh	r1, [r3, r1]
 8002e24:	1dbb      	adds	r3, r7, #6
 8002e26:	2000      	movs	r0, #0
 8002e28:	5e18      	ldrsh	r0, [r3, r0]
 8002e2a:	0023      	movs	r3, r4
 8002e2c:	f7ff ff5d 	bl	8002cea <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8002e30:	e045      	b.n	8002ebe <drawLine+0x118>
    } else if(y0 == y1){
 8002e32:	1d3a      	adds	r2, r7, #4
 8002e34:	003b      	movs	r3, r7
 8002e36:	2100      	movs	r1, #0
 8002e38:	5e52      	ldrsh	r2, [r2, r1]
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5e5b      	ldrsh	r3, [r3, r1]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d12a      	bne.n	8002e98 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8002e42:	1dba      	adds	r2, r7, #6
 8002e44:	1cbb      	adds	r3, r7, #2
 8002e46:	2100      	movs	r1, #0
 8002e48:	5e52      	ldrsh	r2, [r2, r1]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	5e5b      	ldrsh	r3, [r3, r1]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	dd0c      	ble.n	8002e6c <drawLine+0xc6>
 8002e52:	210e      	movs	r1, #14
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	1dba      	adds	r2, r7, #6
 8002e58:	8812      	ldrh	r2, [r2, #0]
 8002e5a:	801a      	strh	r2, [r3, #0]
 8002e5c:	1dbb      	adds	r3, r7, #6
 8002e5e:	1cba      	adds	r2, r7, #2
 8002e60:	8812      	ldrh	r2, [r2, #0]
 8002e62:	801a      	strh	r2, [r3, #0]
 8002e64:	1cbb      	adds	r3, r7, #2
 8002e66:	187a      	adds	r2, r7, r1
 8002e68:	8812      	ldrh	r2, [r2, #0]
 8002e6a:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8002e6c:	1cbb      	adds	r3, r7, #2
 8002e6e:	881a      	ldrh	r2, [r3, #0]
 8002e70:	1dbb      	adds	r3, r7, #6
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	b21a      	sxth	r2, r3
 8002e7e:	2320      	movs	r3, #32
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	881c      	ldrh	r4, [r3, #0]
 8002e84:	1d3b      	adds	r3, r7, #4
 8002e86:	2100      	movs	r1, #0
 8002e88:	5e59      	ldrsh	r1, [r3, r1]
 8002e8a:	1dbb      	adds	r3, r7, #6
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	5e18      	ldrsh	r0, [r3, r0]
 8002e90:	0023      	movs	r3, r4
 8002e92:	f7ff ff59 	bl	8002d48 <drawFastHLine>
}
 8002e96:	e012      	b.n	8002ebe <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8002e98:	003b      	movs	r3, r7
 8002e9a:	2400      	movs	r4, #0
 8002e9c:	5f1c      	ldrsh	r4, [r3, r4]
 8002e9e:	1cbb      	adds	r3, r7, #2
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	5e9a      	ldrsh	r2, [r3, r2]
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	5e59      	ldrsh	r1, [r3, r1]
 8002eaa:	1dbb      	adds	r3, r7, #6
 8002eac:	2000      	movs	r0, #0
 8002eae:	5e18      	ldrsh	r0, [r3, r0]
 8002eb0:	2320      	movs	r3, #32
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	0023      	movs	r3, r4
 8002eba:	f7ff fe1d 	bl	8002af8 <writeLine>
}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b004      	add	sp, #16
 8002ec4:	bdb0      	pop	{r4, r5, r7, pc}

08002ec6 <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8002ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ec8:	b087      	sub	sp, #28
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	0005      	movs	r5, r0
 8002ece:	000c      	movs	r4, r1
 8002ed0:	0010      	movs	r0, r2
 8002ed2:	0019      	movs	r1, r3
 8002ed4:	1dbb      	adds	r3, r7, #6
 8002ed6:	1c2a      	adds	r2, r5, #0
 8002ed8:	801a      	strh	r2, [r3, #0]
 8002eda:	1d3b      	adds	r3, r7, #4
 8002edc:	1c22      	adds	r2, r4, #0
 8002ede:	801a      	strh	r2, [r3, #0]
 8002ee0:	1cbb      	adds	r3, r7, #2
 8002ee2:	1c02      	adds	r2, r0, #0
 8002ee4:	801a      	strh	r2, [r3, #0]
 8002ee6:	1c7b      	adds	r3, r7, #1
 8002ee8:	1c0a      	adds	r2, r1, #0
 8002eea:	701a      	strb	r2, [r3, #0]
    int16_t f     = 1 - r;
 8002eec:	1cbb      	adds	r3, r7, #2
 8002eee:	881b      	ldrh	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	2316      	movs	r3, #22
 8002ef8:	18fb      	adds	r3, r7, r3
 8002efa:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8002efc:	2314      	movs	r3, #20
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	2201      	movs	r2, #1
 8002f02:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8002f04:	1cbb      	adds	r3, r7, #2
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	1c1a      	adds	r2, r3, #0
 8002f0a:	03d2      	lsls	r2, r2, #15
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	18db      	adds	r3, r3, r3
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	2312      	movs	r3, #18
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 8002f18:	2310      	movs	r3, #16
 8002f1a:	18fb      	adds	r3, r7, r3
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 8002f20:	230e      	movs	r3, #14
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	1cba      	adds	r2, r7, #2
 8002f26:	8812      	ldrh	r2, [r2, #0]
 8002f28:	801a      	strh	r2, [r3, #0]

    while (x<y) {
 8002f2a:	e0fe      	b.n	800312a <drawCircleHelper+0x264>
        if (f >= 0) {
 8002f2c:	2116      	movs	r1, #22
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2200      	movs	r2, #0
 8002f32:	5e9b      	ldrsh	r3, [r3, r2]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	db17      	blt.n	8002f68 <drawCircleHelper+0xa2>
            y--;
 8002f38:	200e      	movs	r0, #14
 8002f3a:	183b      	adds	r3, r7, r0
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	183b      	adds	r3, r7, r0
 8002f48:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8002f4a:	2012      	movs	r0, #18
 8002f4c:	183b      	adds	r3, r7, r0
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	3302      	adds	r3, #2
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	183b      	adds	r3, r7, r0
 8002f56:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8002f58:	187b      	adds	r3, r7, r1
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	183b      	adds	r3, r7, r0
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	18d3      	adds	r3, r2, r3
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	187b      	adds	r3, r7, r1
 8002f66:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8002f68:	2110      	movs	r1, #16
 8002f6a:	187b      	adds	r3, r7, r1
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	5e9b      	ldrsh	r3, [r3, r2]
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	3301      	adds	r3, #1
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	187b      	adds	r3, r7, r1
 8002f78:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8002f7a:	2014      	movs	r0, #20
 8002f7c:	183b      	adds	r3, r7, r0
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	3302      	adds	r3, #2
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	183b      	adds	r3, r7, r0
 8002f86:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8002f88:	2416      	movs	r4, #22
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	881a      	ldrh	r2, [r3, #0]
 8002f8e:	183b      	adds	r3, r7, r0
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	18d3      	adds	r3, r2, r3
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	193b      	adds	r3, r7, r4
 8002f98:	801a      	strh	r2, [r3, #0]
        if (cornername & 0x4) {
 8002f9a:	1c7b      	adds	r3, r7, #1
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d02c      	beq.n	8002ffe <drawCircleHelper+0x138>
            writePixel(x0 + x, y0 + y, color);
 8002fa4:	1dbb      	adds	r3, r7, #6
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	000c      	movs	r4, r1
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	18d3      	adds	r3, r2, r3
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b218      	sxth	r0, r3
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	881a      	ldrh	r2, [r3, #0]
 8002fb8:	250e      	movs	r5, #14
 8002fba:	197b      	adds	r3, r7, r5
 8002fbc:	881b      	ldrh	r3, [r3, #0]
 8002fbe:	18d3      	adds	r3, r2, r3
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	b219      	sxth	r1, r3
 8002fc4:	2628      	movs	r6, #40	; 0x28
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	18f2      	adds	r2, r6, r3
 8002fca:	19d3      	adds	r3, r2, r7
 8002fcc:	881b      	ldrh	r3, [r3, #0]
 8002fce:	001a      	movs	r2, r3
 8002fd0:	f7ff fd74 	bl	8002abc <writePixel>
            writePixel(x0 + y, y0 + x, color);
 8002fd4:	1dbb      	adds	r3, r7, #6
 8002fd6:	881a      	ldrh	r2, [r3, #0]
 8002fd8:	197b      	adds	r3, r7, r5
 8002fda:	881b      	ldrh	r3, [r3, #0]
 8002fdc:	18d3      	adds	r3, r2, r3
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	b218      	sxth	r0, r3
 8002fe2:	1d3b      	adds	r3, r7, #4
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	18d3      	adds	r3, r2, r3
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	b219      	sxth	r1, r3
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	18f3      	adds	r3, r6, r3
 8002ff4:	19db      	adds	r3, r3, r7
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	f7ff fd5f 	bl	8002abc <writePixel>
        }
        if (cornername & 0x2) {
 8002ffe:	1c7b      	adds	r3, r7, #1
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2202      	movs	r2, #2
 8003004:	4013      	ands	r3, r2
 8003006:	d02c      	beq.n	8003062 <drawCircleHelper+0x19c>
            writePixel(x0 + x, y0 - y, color);
 8003008:	1dbb      	adds	r3, r7, #6
 800300a:	881a      	ldrh	r2, [r3, #0]
 800300c:	2410      	movs	r4, #16
 800300e:	193b      	adds	r3, r7, r4
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	18d3      	adds	r3, r2, r3
 8003014:	b29b      	uxth	r3, r3
 8003016:	b218      	sxth	r0, r3
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	881a      	ldrh	r2, [r3, #0]
 800301c:	250e      	movs	r5, #14
 800301e:	197b      	adds	r3, r7, r5
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	b29b      	uxth	r3, r3
 8003026:	b219      	sxth	r1, r3
 8003028:	2628      	movs	r6, #40	; 0x28
 800302a:	2308      	movs	r3, #8
 800302c:	18f2      	adds	r2, r6, r3
 800302e:	19d3      	adds	r3, r2, r7
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	001a      	movs	r2, r3
 8003034:	f7ff fd42 	bl	8002abc <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8003038:	1dbb      	adds	r3, r7, #6
 800303a:	881a      	ldrh	r2, [r3, #0]
 800303c:	197b      	adds	r3, r7, r5
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	18d3      	adds	r3, r2, r3
 8003042:	b29b      	uxth	r3, r3
 8003044:	b218      	sxth	r0, r3
 8003046:	1d3b      	adds	r3, r7, #4
 8003048:	881a      	ldrh	r2, [r3, #0]
 800304a:	193b      	adds	r3, r7, r4
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	b29b      	uxth	r3, r3
 8003052:	b219      	sxth	r1, r3
 8003054:	2308      	movs	r3, #8
 8003056:	18f3      	adds	r3, r6, r3
 8003058:	19db      	adds	r3, r3, r7
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	001a      	movs	r2, r3
 800305e:	f7ff fd2d 	bl	8002abc <writePixel>
        }
        if (cornername & 0x8) {
 8003062:	1c7b      	adds	r3, r7, #1
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2208      	movs	r2, #8
 8003068:	4013      	ands	r3, r2
 800306a:	d02c      	beq.n	80030c6 <drawCircleHelper+0x200>
            writePixel(x0 - y, y0 + x, color);
 800306c:	1dbb      	adds	r3, r7, #6
 800306e:	881a      	ldrh	r2, [r3, #0]
 8003070:	240e      	movs	r4, #14
 8003072:	193b      	adds	r3, r7, r4
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	b29b      	uxth	r3, r3
 800307a:	b218      	sxth	r0, r3
 800307c:	1d3b      	adds	r3, r7, #4
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	2510      	movs	r5, #16
 8003082:	197b      	adds	r3, r7, r5
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	18d3      	adds	r3, r2, r3
 8003088:	b29b      	uxth	r3, r3
 800308a:	b219      	sxth	r1, r3
 800308c:	2628      	movs	r6, #40	; 0x28
 800308e:	2308      	movs	r3, #8
 8003090:	18f2      	adds	r2, r6, r3
 8003092:	19d3      	adds	r3, r2, r7
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	001a      	movs	r2, r3
 8003098:	f7ff fd10 	bl	8002abc <writePixel>
            writePixel(x0 - x, y0 + y, color);
 800309c:	1dbb      	adds	r3, r7, #6
 800309e:	881a      	ldrh	r2, [r3, #0]
 80030a0:	197b      	adds	r3, r7, r5
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	b218      	sxth	r0, r3
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	881a      	ldrh	r2, [r3, #0]
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	881b      	ldrh	r3, [r3, #0]
 80030b2:	18d3      	adds	r3, r2, r3
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	b219      	sxth	r1, r3
 80030b8:	2308      	movs	r3, #8
 80030ba:	18f3      	adds	r3, r6, r3
 80030bc:	19db      	adds	r3, r3, r7
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	001a      	movs	r2, r3
 80030c2:	f7ff fcfb 	bl	8002abc <writePixel>
        }
        if (cornername & 0x1) {
 80030c6:	1c7b      	adds	r3, r7, #1
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4013      	ands	r3, r2
 80030ce:	d02c      	beq.n	800312a <drawCircleHelper+0x264>
            writePixel(x0 - y, y0 - x, color);
 80030d0:	1dbb      	adds	r3, r7, #6
 80030d2:	881a      	ldrh	r2, [r3, #0]
 80030d4:	240e      	movs	r4, #14
 80030d6:	193b      	adds	r3, r7, r4
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	b29b      	uxth	r3, r3
 80030de:	b218      	sxth	r0, r3
 80030e0:	1d3b      	adds	r3, r7, #4
 80030e2:	881a      	ldrh	r2, [r3, #0]
 80030e4:	2510      	movs	r5, #16
 80030e6:	197b      	adds	r3, r7, r5
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	b219      	sxth	r1, r3
 80030f0:	2628      	movs	r6, #40	; 0x28
 80030f2:	2308      	movs	r3, #8
 80030f4:	18f2      	adds	r2, r6, r3
 80030f6:	19d3      	adds	r3, r2, r7
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	001a      	movs	r2, r3
 80030fc:	f7ff fcde 	bl	8002abc <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8003100:	1dbb      	adds	r3, r7, #6
 8003102:	881a      	ldrh	r2, [r3, #0]
 8003104:	197b      	adds	r3, r7, r5
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	b29b      	uxth	r3, r3
 800310c:	b218      	sxth	r0, r3
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	193b      	adds	r3, r7, r4
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	b29b      	uxth	r3, r3
 800311a:	b219      	sxth	r1, r3
 800311c:	2308      	movs	r3, #8
 800311e:	18f3      	adds	r3, r6, r3
 8003120:	19db      	adds	r3, r3, r7
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	001a      	movs	r2, r3
 8003126:	f7ff fcc9 	bl	8002abc <writePixel>
    while (x<y) {
 800312a:	2310      	movs	r3, #16
 800312c:	18fa      	adds	r2, r7, r3
 800312e:	230e      	movs	r3, #14
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	2100      	movs	r1, #0
 8003134:	5e52      	ldrsh	r2, [r2, r1]
 8003136:	2100      	movs	r1, #0
 8003138:	5e5b      	ldrsh	r3, [r3, r1]
 800313a:	429a      	cmp	r2, r3
 800313c:	da00      	bge.n	8003140 <drawCircleHelper+0x27a>
 800313e:	e6f5      	b.n	8002f2c <drawCircleHelper+0x66>
        }
    }
}
 8003140:	46c0      	nop			; (mov r8, r8)
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b007      	add	sp, #28
 8003148:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800314a <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800314a:	b5b0      	push	{r4, r5, r7, lr}
 800314c:	b086      	sub	sp, #24
 800314e:	af00      	add	r7, sp, #0
 8003150:	0005      	movs	r5, r0
 8003152:	000c      	movs	r4, r1
 8003154:	0010      	movs	r0, r2
 8003156:	0019      	movs	r1, r3
 8003158:	1dbb      	adds	r3, r7, #6
 800315a:	1c2a      	adds	r2, r5, #0
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	1c22      	adds	r2, r4, #0
 8003162:	801a      	strh	r2, [r3, #0]
 8003164:	1cbb      	adds	r3, r7, #2
 8003166:	1c02      	adds	r2, r0, #0
 8003168:	801a      	strh	r2, [r3, #0]
 800316a:	1c7b      	adds	r3, r7, #1
 800316c:	1c0a      	adds	r2, r1, #0
 800316e:	701a      	strb	r2, [r3, #0]

    int16_t f     = 1 - r;
 8003170:	1cbb      	adds	r3, r7, #2
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	b29a      	uxth	r2, r3
 800317a:	2316      	movs	r3, #22
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8003180:	2314      	movs	r3, #20
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2201      	movs	r2, #1
 8003186:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8003188:	1cbb      	adds	r3, r7, #2
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	1c1a      	adds	r2, r3, #0
 800318e:	03d2      	lsls	r2, r2, #15
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	18db      	adds	r3, r3, r3
 8003194:	b29a      	uxth	r2, r3
 8003196:	2312      	movs	r3, #18
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 800319c:	2110      	movs	r1, #16
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	2200      	movs	r2, #0
 80031a2:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 80031a4:	200e      	movs	r0, #14
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	1cba      	adds	r2, r7, #2
 80031aa:	8812      	ldrh	r2, [r2, #0]
 80031ac:	801a      	strh	r2, [r3, #0]
    int16_t px    = x;
 80031ae:	230c      	movs	r3, #12
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	187a      	adds	r2, r7, r1
 80031b4:	8812      	ldrh	r2, [r2, #0]
 80031b6:	801a      	strh	r2, [r3, #0]
    int16_t py    = y;
 80031b8:	230a      	movs	r3, #10
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	183a      	adds	r2, r7, r0
 80031be:	8812      	ldrh	r2, [r2, #0]
 80031c0:	801a      	strh	r2, [r3, #0]

    delta++; // Avoid some +1's in the loop
 80031c2:	2128      	movs	r1, #40	; 0x28
 80031c4:	187b      	adds	r3, r7, r1
 80031c6:	2200      	movs	r2, #0
 80031c8:	5e9b      	ldrsh	r3, [r3, r2]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	801a      	strh	r2, [r3, #0]

    while(x < y) {
 80031d4:	e0e2      	b.n	800339c <fillCircleHelper+0x252>
        if (f >= 0) {
 80031d6:	2116      	movs	r1, #22
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	2200      	movs	r2, #0
 80031dc:	5e9b      	ldrsh	r3, [r3, r2]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	db17      	blt.n	8003212 <fillCircleHelper+0xc8>
            y--;
 80031e2:	200e      	movs	r0, #14
 80031e4:	183b      	adds	r3, r7, r0
 80031e6:	2200      	movs	r2, #0
 80031e8:	5e9b      	ldrsh	r3, [r3, r2]
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	183b      	adds	r3, r7, r0
 80031f2:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 80031f4:	2012      	movs	r0, #18
 80031f6:	183b      	adds	r3, r7, r0
 80031f8:	881b      	ldrh	r3, [r3, #0]
 80031fa:	3302      	adds	r3, #2
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	183b      	adds	r3, r7, r0
 8003200:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8003202:	187b      	adds	r3, r7, r1
 8003204:	881a      	ldrh	r2, [r3, #0]
 8003206:	183b      	adds	r3, r7, r0
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	18d3      	adds	r3, r2, r3
 800320c:	b29a      	uxth	r2, r3
 800320e:	187b      	adds	r3, r7, r1
 8003210:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8003212:	2110      	movs	r1, #16
 8003214:	187b      	adds	r3, r7, r1
 8003216:	2200      	movs	r2, #0
 8003218:	5e9b      	ldrsh	r3, [r3, r2]
 800321a:	b29b      	uxth	r3, r3
 800321c:	3301      	adds	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	187b      	adds	r3, r7, r1
 8003222:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8003224:	2014      	movs	r0, #20
 8003226:	183b      	adds	r3, r7, r0
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	3302      	adds	r3, #2
 800322c:	b29a      	uxth	r2, r3
 800322e:	183b      	adds	r3, r7, r0
 8003230:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8003232:	2416      	movs	r4, #22
 8003234:	193b      	adds	r3, r7, r4
 8003236:	881a      	ldrh	r2, [r3, #0]
 8003238:	183b      	adds	r3, r7, r0
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	18d3      	adds	r3, r2, r3
 800323e:	b29a      	uxth	r2, r3
 8003240:	193b      	adds	r3, r7, r4
 8003242:	801a      	strh	r2, [r3, #0]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8003244:	240e      	movs	r4, #14
 8003246:	193a      	adds	r2, r7, r4
 8003248:	187b      	adds	r3, r7, r1
 800324a:	2000      	movs	r0, #0
 800324c:	5e12      	ldrsh	r2, [r2, r0]
 800324e:	2000      	movs	r0, #0
 8003250:	5e1b      	ldrsh	r3, [r3, r0]
 8003252:	429a      	cmp	r2, r3
 8003254:	db45      	blt.n	80032e2 <fillCircleHelper+0x198>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8003256:	1c7b      	adds	r3, r7, #1
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2201      	movs	r2, #1
 800325c:	4013      	ands	r3, r2
 800325e:	d01c      	beq.n	800329a <fillCircleHelper+0x150>
 8003260:	1dbb      	adds	r3, r7, #6
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	187b      	adds	r3, r7, r1
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	18d3      	adds	r3, r2, r3
 800326a:	b29b      	uxth	r3, r3
 800326c:	b218      	sxth	r0, r3
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	881a      	ldrh	r2, [r3, #0]
 8003272:	193b      	adds	r3, r7, r4
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	b29b      	uxth	r3, r3
 800327a:	b219      	sxth	r1, r3
 800327c:	193b      	adds	r3, r7, r4
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	18db      	adds	r3, r3, r3
 8003282:	b29a      	uxth	r2, r3
 8003284:	2328      	movs	r3, #40	; 0x28
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	881b      	ldrh	r3, [r3, #0]
 800328a:	18d3      	adds	r3, r2, r3
 800328c:	b29b      	uxth	r3, r3
 800328e:	b21a      	sxth	r2, r3
 8003290:	232c      	movs	r3, #44	; 0x2c
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	f7ff fd28 	bl	8002cea <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 800329a:	1c7b      	adds	r3, r7, #1
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2202      	movs	r2, #2
 80032a0:	4013      	ands	r3, r2
 80032a2:	d01e      	beq.n	80032e2 <fillCircleHelper+0x198>
 80032a4:	1dbb      	adds	r3, r7, #6
 80032a6:	881a      	ldrh	r2, [r3, #0]
 80032a8:	2310      	movs	r3, #16
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	b218      	sxth	r0, r3
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	881a      	ldrh	r2, [r3, #0]
 80032b8:	240e      	movs	r4, #14
 80032ba:	193b      	adds	r3, r7, r4
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	b219      	sxth	r1, r3
 80032c4:	193b      	adds	r3, r7, r4
 80032c6:	881b      	ldrh	r3, [r3, #0]
 80032c8:	18db      	adds	r3, r3, r3
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	2328      	movs	r3, #40	; 0x28
 80032ce:	18fb      	adds	r3, r7, r3
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	18d3      	adds	r3, r2, r3
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	b21a      	sxth	r2, r3
 80032d8:	232c      	movs	r3, #44	; 0x2c
 80032da:	18fb      	adds	r3, r7, r3
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	f7ff fd04 	bl	8002cea <drawFastVLine>
        }
        if(y != py) {
 80032e2:	230e      	movs	r3, #14
 80032e4:	18fa      	adds	r2, r7, r3
 80032e6:	210a      	movs	r1, #10
 80032e8:	187b      	adds	r3, r7, r1
 80032ea:	2000      	movs	r0, #0
 80032ec:	5e12      	ldrsh	r2, [r2, r0]
 80032ee:	2000      	movs	r0, #0
 80032f0:	5e1b      	ldrsh	r3, [r3, r0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d04c      	beq.n	8003390 <fillCircleHelper+0x246>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 80032f6:	1c7b      	adds	r3, r7, #1
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2201      	movs	r2, #1
 80032fc:	4013      	ands	r3, r2
 80032fe:	d01d      	beq.n	800333c <fillCircleHelper+0x1f2>
 8003300:	1dbb      	adds	r3, r7, #6
 8003302:	881a      	ldrh	r2, [r3, #0]
 8003304:	187b      	adds	r3, r7, r1
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	18d3      	adds	r3, r2, r3
 800330a:	b29b      	uxth	r3, r3
 800330c:	b218      	sxth	r0, r3
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	881a      	ldrh	r2, [r3, #0]
 8003312:	240c      	movs	r4, #12
 8003314:	193b      	adds	r3, r7, r4
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	b29b      	uxth	r3, r3
 800331c:	b219      	sxth	r1, r3
 800331e:	193b      	adds	r3, r7, r4
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	18db      	adds	r3, r3, r3
 8003324:	b29a      	uxth	r2, r3
 8003326:	2328      	movs	r3, #40	; 0x28
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	881b      	ldrh	r3, [r3, #0]
 800332c:	18d3      	adds	r3, r2, r3
 800332e:	b29b      	uxth	r3, r3
 8003330:	b21a      	sxth	r2, r3
 8003332:	232c      	movs	r3, #44	; 0x2c
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	f7ff fcd7 	bl	8002cea <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800333c:	1c7b      	adds	r3, r7, #1
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2202      	movs	r2, #2
 8003342:	4013      	ands	r3, r2
 8003344:	d01e      	beq.n	8003384 <fillCircleHelper+0x23a>
 8003346:	1dbb      	adds	r3, r7, #6
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	230a      	movs	r3, #10
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	b29b      	uxth	r3, r3
 8003354:	b218      	sxth	r0, r3
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	240c      	movs	r4, #12
 800335c:	193b      	adds	r3, r7, r4
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	b29b      	uxth	r3, r3
 8003364:	b219      	sxth	r1, r3
 8003366:	193b      	adds	r3, r7, r4
 8003368:	881b      	ldrh	r3, [r3, #0]
 800336a:	18db      	adds	r3, r3, r3
 800336c:	b29a      	uxth	r2, r3
 800336e:	2328      	movs	r3, #40	; 0x28
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	18d3      	adds	r3, r2, r3
 8003376:	b29b      	uxth	r3, r3
 8003378:	b21a      	sxth	r2, r3
 800337a:	232c      	movs	r3, #44	; 0x2c
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	881b      	ldrh	r3, [r3, #0]
 8003380:	f7ff fcb3 	bl	8002cea <drawFastVLine>
            py = y;
 8003384:	230a      	movs	r3, #10
 8003386:	18fb      	adds	r3, r7, r3
 8003388:	220e      	movs	r2, #14
 800338a:	18ba      	adds	r2, r7, r2
 800338c:	8812      	ldrh	r2, [r2, #0]
 800338e:	801a      	strh	r2, [r3, #0]
        }
        px = x;
 8003390:	230c      	movs	r3, #12
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2210      	movs	r2, #16
 8003396:	18ba      	adds	r2, r7, r2
 8003398:	8812      	ldrh	r2, [r2, #0]
 800339a:	801a      	strh	r2, [r3, #0]
    while(x < y) {
 800339c:	2310      	movs	r3, #16
 800339e:	18fa      	adds	r2, r7, r3
 80033a0:	230e      	movs	r3, #14
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	2100      	movs	r1, #0
 80033a6:	5e52      	ldrsh	r2, [r2, r1]
 80033a8:	2100      	movs	r1, #0
 80033aa:	5e5b      	ldrsh	r3, [r3, r1]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	da00      	bge.n	80033b2 <fillCircleHelper+0x268>
 80033b0:	e711      	b.n	80031d6 <fillCircleHelper+0x8c>
    }
}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	46c0      	nop			; (mov r8, r8)
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b006      	add	sp, #24
 80033ba:	bdb0      	pop	{r4, r5, r7, pc}

080033bc <drawRect>:
}



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80033bc:	b5b0      	push	{r4, r5, r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	0005      	movs	r5, r0
 80033c4:	000c      	movs	r4, r1
 80033c6:	0010      	movs	r0, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	1dbb      	adds	r3, r7, #6
 80033cc:	1c2a      	adds	r2, r5, #0
 80033ce:	801a      	strh	r2, [r3, #0]
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	1c22      	adds	r2, r4, #0
 80033d4:	801a      	strh	r2, [r3, #0]
 80033d6:	1cbb      	adds	r3, r7, #2
 80033d8:	1c02      	adds	r2, r0, #0
 80033da:	801a      	strh	r2, [r3, #0]
 80033dc:	003b      	movs	r3, r7
 80033de:	1c0a      	adds	r2, r1, #0
 80033e0:	801a      	strh	r2, [r3, #0]
    drawFastHLine(x, y, w, color);
 80033e2:	2518      	movs	r5, #24
 80033e4:	197b      	adds	r3, r7, r5
 80033e6:	881c      	ldrh	r4, [r3, #0]
 80033e8:	1cbb      	adds	r3, r7, #2
 80033ea:	2200      	movs	r2, #0
 80033ec:	5e9a      	ldrsh	r2, [r3, r2]
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	2100      	movs	r1, #0
 80033f2:	5e59      	ldrsh	r1, [r3, r1]
 80033f4:	1dbb      	adds	r3, r7, #6
 80033f6:	2000      	movs	r0, #0
 80033f8:	5e18      	ldrsh	r0, [r3, r0]
 80033fa:	0023      	movs	r3, r4
 80033fc:	f7ff fca4 	bl	8002d48 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8003400:	1d3b      	adds	r3, r7, #4
 8003402:	881a      	ldrh	r2, [r3, #0]
 8003404:	003b      	movs	r3, r7
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	18d3      	adds	r3, r2, r3
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29b      	uxth	r3, r3
 8003410:	b219      	sxth	r1, r3
 8003412:	197b      	adds	r3, r7, r5
 8003414:	881c      	ldrh	r4, [r3, #0]
 8003416:	1cbb      	adds	r3, r7, #2
 8003418:	2200      	movs	r2, #0
 800341a:	5e9a      	ldrsh	r2, [r3, r2]
 800341c:	1dbb      	adds	r3, r7, #6
 800341e:	2000      	movs	r0, #0
 8003420:	5e18      	ldrsh	r0, [r3, r0]
 8003422:	0023      	movs	r3, r4
 8003424:	f7ff fc90 	bl	8002d48 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8003428:	197b      	adds	r3, r7, r5
 800342a:	881c      	ldrh	r4, [r3, #0]
 800342c:	003b      	movs	r3, r7
 800342e:	2200      	movs	r2, #0
 8003430:	5e9a      	ldrsh	r2, [r3, r2]
 8003432:	1d3b      	adds	r3, r7, #4
 8003434:	2100      	movs	r1, #0
 8003436:	5e59      	ldrsh	r1, [r3, r1]
 8003438:	1dbb      	adds	r3, r7, #6
 800343a:	2000      	movs	r0, #0
 800343c:	5e18      	ldrsh	r0, [r3, r0]
 800343e:	0023      	movs	r3, r4
 8003440:	f7ff fc53 	bl	8002cea <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8003444:	1dbb      	adds	r3, r7, #6
 8003446:	881a      	ldrh	r2, [r3, #0]
 8003448:	1cbb      	adds	r3, r7, #2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	18d3      	adds	r3, r2, r3
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29b      	uxth	r3, r3
 8003454:	b218      	sxth	r0, r3
 8003456:	197b      	adds	r3, r7, r5
 8003458:	881c      	ldrh	r4, [r3, #0]
 800345a:	003b      	movs	r3, r7
 800345c:	2200      	movs	r2, #0
 800345e:	5e9a      	ldrsh	r2, [r3, r2]
 8003460:	1d3b      	adds	r3, r7, #4
 8003462:	2100      	movs	r1, #0
 8003464:	5e59      	ldrsh	r1, [r3, r1]
 8003466:	0023      	movs	r3, r4
 8003468:	f7ff fc3f 	bl	8002cea <drawFastVLine>
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bdb0      	pop	{r4, r5, r7, pc}

08003474 <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8003474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003476:	b087      	sub	sp, #28
 8003478:	af02      	add	r7, sp, #8
 800347a:	0005      	movs	r5, r0
 800347c:	000c      	movs	r4, r1
 800347e:	0010      	movs	r0, r2
 8003480:	0019      	movs	r1, r3
 8003482:	1dbb      	adds	r3, r7, #6
 8003484:	1c2a      	adds	r2, r5, #0
 8003486:	801a      	strh	r2, [r3, #0]
 8003488:	1d3b      	adds	r3, r7, #4
 800348a:	1c22      	adds	r2, r4, #0
 800348c:	801a      	strh	r2, [r3, #0]
 800348e:	1cbb      	adds	r3, r7, #2
 8003490:	1c02      	adds	r2, r0, #0
 8003492:	801a      	strh	r2, [r3, #0]
 8003494:	003b      	movs	r3, r7
 8003496:	1c0a      	adds	r2, r1, #0
 8003498:	801a      	strh	r2, [r3, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800349a:	003b      	movs	r3, r7
 800349c:	1cba      	adds	r2, r7, #2
 800349e:	8810      	ldrh	r0, [r2, #0]
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b219      	sxth	r1, r3
 80034a4:	b202      	sxth	r2, r0
 80034a6:	4291      	cmp	r1, r2
 80034a8:	dd00      	ble.n	80034ac <drawRoundRect+0x38>
 80034aa:	1c03      	adds	r3, r0, #0
 80034ac:	b21b      	sxth	r3, r3
 80034ae:	220e      	movs	r2, #14
 80034b0:	18ba      	adds	r2, r7, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da00      	bge.n	80034b8 <drawRoundRect+0x44>
 80034b6:	3301      	adds	r3, #1
 80034b8:	105b      	asrs	r3, r3, #1
 80034ba:	8013      	strh	r3, [r2, #0]
    if(r > max_radius) r = max_radius;
 80034bc:	2020      	movs	r0, #32
 80034be:	2508      	movs	r5, #8
 80034c0:	1943      	adds	r3, r0, r5
 80034c2:	19db      	adds	r3, r3, r7
 80034c4:	240e      	movs	r4, #14
 80034c6:	1939      	adds	r1, r7, r4
 80034c8:	2200      	movs	r2, #0
 80034ca:	5e9a      	ldrsh	r2, [r3, r2]
 80034cc:	2300      	movs	r3, #0
 80034ce:	5ecb      	ldrsh	r3, [r1, r3]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	dd04      	ble.n	80034de <drawRoundRect+0x6a>
 80034d4:	1943      	adds	r3, r0, r5
 80034d6:	19db      	adds	r3, r3, r7
 80034d8:	193a      	adds	r2, r7, r4
 80034da:	8812      	ldrh	r2, [r2, #0]
 80034dc:	801a      	strh	r2, [r3, #0]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 80034de:	1dbb      	adds	r3, r7, #6
 80034e0:	881a      	ldrh	r2, [r3, #0]
 80034e2:	2520      	movs	r5, #32
 80034e4:	2408      	movs	r4, #8
 80034e6:	192b      	adds	r3, r5, r4
 80034e8:	19db      	adds	r3, r3, r7
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	18d3      	adds	r3, r2, r3
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	b218      	sxth	r0, r3
 80034f2:	1cbb      	adds	r3, r7, #2
 80034f4:	881a      	ldrh	r2, [r3, #0]
 80034f6:	192b      	adds	r3, r5, r4
 80034f8:	19db      	adds	r3, r3, r7
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	18db      	adds	r3, r3, r3
 80034fe:	b29b      	uxth	r3, r3
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	b29b      	uxth	r3, r3
 8003504:	b21a      	sxth	r2, r3
 8003506:	2624      	movs	r6, #36	; 0x24
 8003508:	1933      	adds	r3, r6, r4
 800350a:	19db      	adds	r3, r3, r7
 800350c:	881c      	ldrh	r4, [r3, #0]
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	2100      	movs	r1, #0
 8003512:	5e59      	ldrsh	r1, [r3, r1]
 8003514:	0023      	movs	r3, r4
 8003516:	f7ff fc17 	bl	8002d48 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 800351a:	1dbb      	adds	r3, r7, #6
 800351c:	881a      	ldrh	r2, [r3, #0]
 800351e:	2408      	movs	r4, #8
 8003520:	192b      	adds	r3, r5, r4
 8003522:	19db      	adds	r3, r3, r7
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	18d3      	adds	r3, r2, r3
 8003528:	b29b      	uxth	r3, r3
 800352a:	b218      	sxth	r0, r3
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	003b      	movs	r3, r7
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	18d3      	adds	r3, r2, r3
 8003536:	b29b      	uxth	r3, r3
 8003538:	3b01      	subs	r3, #1
 800353a:	b29b      	uxth	r3, r3
 800353c:	b219      	sxth	r1, r3
 800353e:	1cbb      	adds	r3, r7, #2
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	192b      	adds	r3, r5, r4
 8003544:	19db      	adds	r3, r3, r7
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	18db      	adds	r3, r3, r3
 800354a:	b29b      	uxth	r3, r3
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	b29b      	uxth	r3, r3
 8003550:	b21a      	sxth	r2, r3
 8003552:	1933      	adds	r3, r6, r4
 8003554:	19db      	adds	r3, r3, r7
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	f7ff fbf6 	bl	8002d48 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 800355c:	1d3b      	adds	r3, r7, #4
 800355e:	881a      	ldrh	r2, [r3, #0]
 8003560:	192b      	adds	r3, r5, r4
 8003562:	19db      	adds	r3, r3, r7
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	18d3      	adds	r3, r2, r3
 8003568:	b29b      	uxth	r3, r3
 800356a:	b219      	sxth	r1, r3
 800356c:	003b      	movs	r3, r7
 800356e:	881a      	ldrh	r2, [r3, #0]
 8003570:	192b      	adds	r3, r5, r4
 8003572:	19db      	adds	r3, r3, r7
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	18db      	adds	r3, r3, r3
 8003578:	b29b      	uxth	r3, r3
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	b29b      	uxth	r3, r3
 800357e:	b21a      	sxth	r2, r3
 8003580:	1933      	adds	r3, r6, r4
 8003582:	19db      	adds	r3, r3, r7
 8003584:	881c      	ldrh	r4, [r3, #0]
 8003586:	1dbb      	adds	r3, r7, #6
 8003588:	2000      	movs	r0, #0
 800358a:	5e18      	ldrsh	r0, [r3, r0]
 800358c:	0023      	movs	r3, r4
 800358e:	f7ff fbac 	bl	8002cea <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8003592:	1dbb      	adds	r3, r7, #6
 8003594:	881a      	ldrh	r2, [r3, #0]
 8003596:	1cbb      	adds	r3, r7, #2
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	18d3      	adds	r3, r2, r3
 800359c:	b29b      	uxth	r3, r3
 800359e:	3b01      	subs	r3, #1
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	b218      	sxth	r0, r3
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	881a      	ldrh	r2, [r3, #0]
 80035a8:	2408      	movs	r4, #8
 80035aa:	192b      	adds	r3, r5, r4
 80035ac:	19db      	adds	r3, r3, r7
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	18d3      	adds	r3, r2, r3
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	b219      	sxth	r1, r3
 80035b6:	003b      	movs	r3, r7
 80035b8:	881a      	ldrh	r2, [r3, #0]
 80035ba:	192b      	adds	r3, r5, r4
 80035bc:	19db      	adds	r3, r3, r7
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	18db      	adds	r3, r3, r3
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	b21a      	sxth	r2, r3
 80035ca:	1933      	adds	r3, r6, r4
 80035cc:	19db      	adds	r3, r3, r7
 80035ce:	881b      	ldrh	r3, [r3, #0]
 80035d0:	f7ff fb8b 	bl	8002cea <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 80035d4:	1dbb      	adds	r3, r7, #6
 80035d6:	881a      	ldrh	r2, [r3, #0]
 80035d8:	192b      	adds	r3, r5, r4
 80035da:	19db      	adds	r3, r3, r7
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	18d3      	adds	r3, r2, r3
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	b218      	sxth	r0, r3
 80035e4:	1d3b      	adds	r3, r7, #4
 80035e6:	881a      	ldrh	r2, [r3, #0]
 80035e8:	1929      	adds	r1, r5, r4
 80035ea:	19cb      	adds	r3, r1, r7
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	18d3      	adds	r3, r2, r3
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	b219      	sxth	r1, r3
 80035f4:	002c      	movs	r4, r5
 80035f6:	2308      	movs	r3, #8
 80035f8:	18ea      	adds	r2, r5, r3
 80035fa:	19d3      	adds	r3, r2, r7
 80035fc:	2200      	movs	r2, #0
 80035fe:	5e9a      	ldrsh	r2, [r3, r2]
 8003600:	0035      	movs	r5, r6
 8003602:	2608      	movs	r6, #8
 8003604:	19ab      	adds	r3, r5, r6
 8003606:	19db      	adds	r3, r3, r7
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	9300      	str	r3, [sp, #0]
 800360c:	2301      	movs	r3, #1
 800360e:	f7ff fc5a 	bl	8002ec6 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8003612:	1dbb      	adds	r3, r7, #6
 8003614:	881a      	ldrh	r2, [r3, #0]
 8003616:	1cbb      	adds	r3, r7, #2
 8003618:	881b      	ldrh	r3, [r3, #0]
 800361a:	18d3      	adds	r3, r2, r3
 800361c:	b29a      	uxth	r2, r3
 800361e:	0031      	movs	r1, r6
 8003620:	1863      	adds	r3, r4, r1
 8003622:	19db      	adds	r3, r3, r7
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29b      	uxth	r3, r3
 800362e:	b218      	sxth	r0, r3
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	881a      	ldrh	r2, [r3, #0]
 8003634:	000e      	movs	r6, r1
 8003636:	19a3      	adds	r3, r4, r6
 8003638:	19db      	adds	r3, r3, r7
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	18d3      	adds	r3, r2, r3
 800363e:	b29b      	uxth	r3, r3
 8003640:	b219      	sxth	r1, r3
 8003642:	19a3      	adds	r3, r4, r6
 8003644:	19db      	adds	r3, r3, r7
 8003646:	2200      	movs	r2, #0
 8003648:	5e9a      	ldrsh	r2, [r3, r2]
 800364a:	19ab      	adds	r3, r5, r6
 800364c:	19db      	adds	r3, r3, r7
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2302      	movs	r3, #2
 8003654:	f7ff fc37 	bl	8002ec6 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8003658:	1dbb      	adds	r3, r7, #6
 800365a:	881a      	ldrh	r2, [r3, #0]
 800365c:	1cbb      	adds	r3, r7, #2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	18d3      	adds	r3, r2, r3
 8003662:	b29a      	uxth	r2, r3
 8003664:	0021      	movs	r1, r4
 8003666:	198b      	adds	r3, r1, r6
 8003668:	19db      	adds	r3, r3, r7
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29b      	uxth	r3, r3
 8003674:	b218      	sxth	r0, r3
 8003676:	1d3b      	adds	r3, r7, #4
 8003678:	881a      	ldrh	r2, [r3, #0]
 800367a:	003b      	movs	r3, r7
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	b29a      	uxth	r2, r3
 8003682:	000c      	movs	r4, r1
 8003684:	19a3      	adds	r3, r4, r6
 8003686:	19db      	adds	r3, r3, r7
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	b29b      	uxth	r3, r3
 800368e:	3b01      	subs	r3, #1
 8003690:	b29b      	uxth	r3, r3
 8003692:	b219      	sxth	r1, r3
 8003694:	19a3      	adds	r3, r4, r6
 8003696:	19db      	adds	r3, r3, r7
 8003698:	2200      	movs	r2, #0
 800369a:	5e9a      	ldrsh	r2, [r3, r2]
 800369c:	19ab      	adds	r3, r5, r6
 800369e:	19db      	adds	r3, r3, r7
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	2304      	movs	r3, #4
 80036a6:	f7ff fc0e 	bl	8002ec6 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80036aa:	1dbb      	adds	r3, r7, #6
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	0021      	movs	r1, r4
 80036b0:	198b      	adds	r3, r1, r6
 80036b2:	19db      	adds	r3, r3, r7
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	18d3      	adds	r3, r2, r3
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	b218      	sxth	r0, r3
 80036bc:	1d3b      	adds	r3, r7, #4
 80036be:	881a      	ldrh	r2, [r3, #0]
 80036c0:	003b      	movs	r3, r7
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	18d3      	adds	r3, r2, r3
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	000c      	movs	r4, r1
 80036ca:	198b      	adds	r3, r1, r6
 80036cc:	19db      	adds	r3, r3, r7
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	b219      	sxth	r1, r3
 80036da:	19a3      	adds	r3, r4, r6
 80036dc:	19db      	adds	r3, r3, r7
 80036de:	2200      	movs	r2, #0
 80036e0:	5e9a      	ldrsh	r2, [r3, r2]
 80036e2:	19ab      	adds	r3, r5, r6
 80036e4:	19db      	adds	r3, r3, r7
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	2308      	movs	r3, #8
 80036ec:	f7ff fbeb 	bl	8002ec6 <drawCircleHelper>
}
 80036f0:	46c0      	nop			; (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b005      	add	sp, #20
 80036f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036f8 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80036f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	0005      	movs	r5, r0
 8003700:	000c      	movs	r4, r1
 8003702:	0010      	movs	r0, r2
 8003704:	0019      	movs	r1, r3
 8003706:	1dbb      	adds	r3, r7, #6
 8003708:	1c2a      	adds	r2, r5, #0
 800370a:	801a      	strh	r2, [r3, #0]
 800370c:	1d3b      	adds	r3, r7, #4
 800370e:	1c22      	adds	r2, r4, #0
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	1cbb      	adds	r3, r7, #2
 8003714:	1c02      	adds	r2, r0, #0
 8003716:	801a      	strh	r2, [r3, #0]
 8003718:	003b      	movs	r3, r7
 800371a:	1c0a      	adds	r2, r1, #0
 800371c:	801a      	strh	r2, [r3, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800371e:	003b      	movs	r3, r7
 8003720:	1cba      	adds	r2, r7, #2
 8003722:	8810      	ldrh	r0, [r2, #0]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	b219      	sxth	r1, r3
 8003728:	b202      	sxth	r2, r0
 800372a:	4291      	cmp	r1, r2
 800372c:	dd00      	ble.n	8003730 <fillRoundRect+0x38>
 800372e:	1c03      	adds	r3, r0, #0
 8003730:	b21b      	sxth	r3, r3
 8003732:	220e      	movs	r2, #14
 8003734:	18ba      	adds	r2, r7, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	da00      	bge.n	800373c <fillRoundRect+0x44>
 800373a:	3301      	adds	r3, #1
 800373c:	105b      	asrs	r3, r3, #1
 800373e:	8013      	strh	r3, [r2, #0]
    if(r > max_radius) r = max_radius;
 8003740:	2020      	movs	r0, #32
 8003742:	2508      	movs	r5, #8
 8003744:	1943      	adds	r3, r0, r5
 8003746:	19db      	adds	r3, r3, r7
 8003748:	240e      	movs	r4, #14
 800374a:	1939      	adds	r1, r7, r4
 800374c:	2200      	movs	r2, #0
 800374e:	5e9a      	ldrsh	r2, [r3, r2]
 8003750:	2300      	movs	r3, #0
 8003752:	5ecb      	ldrsh	r3, [r1, r3]
 8003754:	429a      	cmp	r2, r3
 8003756:	dd04      	ble.n	8003762 <fillRoundRect+0x6a>
 8003758:	1943      	adds	r3, r0, r5
 800375a:	19db      	adds	r3, r3, r7
 800375c:	193a      	adds	r2, r7, r4
 800375e:	8812      	ldrh	r2, [r2, #0]
 8003760:	801a      	strh	r2, [r3, #0]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 8003762:	1dbb      	adds	r3, r7, #6
 8003764:	881a      	ldrh	r2, [r3, #0]
 8003766:	2520      	movs	r5, #32
 8003768:	2408      	movs	r4, #8
 800376a:	192b      	adds	r3, r5, r4
 800376c:	19db      	adds	r3, r3, r7
 800376e:	881b      	ldrh	r3, [r3, #0]
 8003770:	18d3      	adds	r3, r2, r3
 8003772:	b29b      	uxth	r3, r3
 8003774:	b218      	sxth	r0, r3
 8003776:	1cbb      	adds	r3, r7, #2
 8003778:	881a      	ldrh	r2, [r3, #0]
 800377a:	1929      	adds	r1, r5, r4
 800377c:	19cb      	adds	r3, r1, r7
 800377e:	881b      	ldrh	r3, [r3, #0]
 8003780:	18db      	adds	r3, r3, r3
 8003782:	b29b      	uxth	r3, r3
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	b29b      	uxth	r3, r3
 8003788:	b21a      	sxth	r2, r3
 800378a:	003b      	movs	r3, r7
 800378c:	2400      	movs	r4, #0
 800378e:	5f1c      	ldrsh	r4, [r3, r4]
 8003790:	1d3b      	adds	r3, r7, #4
 8003792:	2100      	movs	r1, #0
 8003794:	5e59      	ldrsh	r1, [r3, r1]
 8003796:	2624      	movs	r6, #36	; 0x24
 8003798:	2308      	movs	r3, #8
 800379a:	18f3      	adds	r3, r6, r3
 800379c:	19db      	adds	r3, r3, r7
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	0023      	movs	r3, r4
 80037a4:	f7ff f964 	bl	8002a70 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80037a8:	1dbb      	adds	r3, r7, #6
 80037aa:	881a      	ldrh	r2, [r3, #0]
 80037ac:	1cbb      	adds	r3, r7, #2
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	18d3      	adds	r3, r2, r3
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	2408      	movs	r4, #8
 80037b6:	192b      	adds	r3, r5, r4
 80037b8:	19db      	adds	r3, r3, r7
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	b218      	sxth	r0, r3
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	881a      	ldrh	r2, [r3, #0]
 80037ca:	192b      	adds	r3, r5, r4
 80037cc:	19db      	adds	r3, r3, r7
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	18d3      	adds	r3, r2, r3
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	b219      	sxth	r1, r3
 80037d6:	003b      	movs	r3, r7
 80037d8:	881a      	ldrh	r2, [r3, #0]
 80037da:	192b      	adds	r3, r5, r4
 80037dc:	19db      	adds	r3, r3, r7
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	18db      	adds	r3, r3, r3
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	b21a      	sxth	r2, r3
 80037ee:	192b      	adds	r3, r5, r4
 80037f0:	19db      	adds	r3, r3, r7
 80037f2:	2400      	movs	r4, #0
 80037f4:	5f1c      	ldrsh	r4, [r3, r4]
 80037f6:	2308      	movs	r3, #8
 80037f8:	18f3      	adds	r3, r6, r3
 80037fa:	19db      	adds	r3, r3, r7
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	9200      	str	r2, [sp, #0]
 8003802:	2301      	movs	r3, #1
 8003804:	0022      	movs	r2, r4
 8003806:	f7ff fca0 	bl	800314a <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800380a:	1dbb      	adds	r3, r7, #6
 800380c:	881a      	ldrh	r2, [r3, #0]
 800380e:	002c      	movs	r4, r5
 8003810:	2508      	movs	r5, #8
 8003812:	1963      	adds	r3, r4, r5
 8003814:	19db      	adds	r3, r3, r7
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	18d3      	adds	r3, r2, r3
 800381a:	b29b      	uxth	r3, r3
 800381c:	b218      	sxth	r0, r3
 800381e:	1d3b      	adds	r3, r7, #4
 8003820:	881a      	ldrh	r2, [r3, #0]
 8003822:	1963      	adds	r3, r4, r5
 8003824:	19db      	adds	r3, r3, r7
 8003826:	881b      	ldrh	r3, [r3, #0]
 8003828:	18d3      	adds	r3, r2, r3
 800382a:	b29b      	uxth	r3, r3
 800382c:	b219      	sxth	r1, r3
 800382e:	003b      	movs	r3, r7
 8003830:	881a      	ldrh	r2, [r3, #0]
 8003832:	1963      	adds	r3, r4, r5
 8003834:	19db      	adds	r3, r3, r7
 8003836:	881b      	ldrh	r3, [r3, #0]
 8003838:	18db      	adds	r3, r3, r3
 800383a:	b29b      	uxth	r3, r3
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29b      	uxth	r3, r3
 8003844:	b21a      	sxth	r2, r3
 8003846:	1963      	adds	r3, r4, r5
 8003848:	19db      	adds	r3, r3, r7
 800384a:	2400      	movs	r4, #0
 800384c:	5f1c      	ldrsh	r4, [r3, r4]
 800384e:	1973      	adds	r3, r6, r5
 8003850:	19db      	adds	r3, r3, r7
 8003852:	881b      	ldrh	r3, [r3, #0]
 8003854:	9301      	str	r3, [sp, #4]
 8003856:	9200      	str	r2, [sp, #0]
 8003858:	2302      	movs	r3, #2
 800385a:	0022      	movs	r2, r4
 800385c:	f7ff fc75 	bl	800314a <fillCircleHelper>
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b005      	add	sp, #20
 8003866:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003868 <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8003868:	b5b0      	push	{r4, r5, r7, lr}
 800386a:	b08e      	sub	sp, #56	; 0x38
 800386c:	af00      	add	r7, sp, #0
 800386e:	0005      	movs	r5, r0
 8003870:	000c      	movs	r4, r1
 8003872:	0010      	movs	r0, r2
 8003874:	0019      	movs	r1, r3
 8003876:	1dbb      	adds	r3, r7, #6
 8003878:	1c2a      	adds	r2, r5, #0
 800387a:	801a      	strh	r2, [r3, #0]
 800387c:	1d3b      	adds	r3, r7, #4
 800387e:	1c22      	adds	r2, r4, #0
 8003880:	801a      	strh	r2, [r3, #0]
 8003882:	1cbb      	adds	r3, r7, #2
 8003884:	1c02      	adds	r2, r0, #0
 8003886:	801a      	strh	r2, [r3, #0]
 8003888:	003b      	movs	r3, r7
 800388a:	1c0a      	adds	r2, r1, #0
 800388c:	801a      	strh	r2, [r3, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800388e:	1d3a      	adds	r2, r7, #4
 8003890:	003b      	movs	r3, r7
 8003892:	2100      	movs	r1, #0
 8003894:	5e52      	ldrsh	r2, [r2, r1]
 8003896:	2100      	movs	r1, #0
 8003898:	5e5b      	ldrsh	r3, [r3, r1]
 800389a:	429a      	cmp	r2, r3
 800389c:	dd19      	ble.n	80038d2 <fillTriangle+0x6a>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800389e:	2126      	movs	r1, #38	; 0x26
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	1d3a      	adds	r2, r7, #4
 80038a4:	8812      	ldrh	r2, [r2, #0]
 80038a6:	801a      	strh	r2, [r3, #0]
 80038a8:	1d3b      	adds	r3, r7, #4
 80038aa:	003a      	movs	r2, r7
 80038ac:	8812      	ldrh	r2, [r2, #0]
 80038ae:	801a      	strh	r2, [r3, #0]
 80038b0:	003b      	movs	r3, r7
 80038b2:	187a      	adds	r2, r7, r1
 80038b4:	8812      	ldrh	r2, [r2, #0]
 80038b6:	801a      	strh	r2, [r3, #0]
 80038b8:	2124      	movs	r1, #36	; 0x24
 80038ba:	187b      	adds	r3, r7, r1
 80038bc:	1dba      	adds	r2, r7, #6
 80038be:	8812      	ldrh	r2, [r2, #0]
 80038c0:	801a      	strh	r2, [r3, #0]
 80038c2:	1dbb      	adds	r3, r7, #6
 80038c4:	1cba      	adds	r2, r7, #2
 80038c6:	8812      	ldrh	r2, [r2, #0]
 80038c8:	801a      	strh	r2, [r3, #0]
 80038ca:	1cbb      	adds	r3, r7, #2
 80038cc:	187a      	adds	r2, r7, r1
 80038ce:	8812      	ldrh	r2, [r2, #0]
 80038d0:	801a      	strh	r2, [r3, #0]
    }
    if (y1 > y2) {
 80038d2:	003a      	movs	r2, r7
 80038d4:	214c      	movs	r1, #76	; 0x4c
 80038d6:	187b      	adds	r3, r7, r1
 80038d8:	2000      	movs	r0, #0
 80038da:	5e12      	ldrsh	r2, [r2, r0]
 80038dc:	2000      	movs	r0, #0
 80038de:	5e1b      	ldrsh	r3, [r3, r0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	dd1a      	ble.n	800391a <fillTriangle+0xb2>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80038e4:	2022      	movs	r0, #34	; 0x22
 80038e6:	183b      	adds	r3, r7, r0
 80038e8:	187a      	adds	r2, r7, r1
 80038ea:	8812      	ldrh	r2, [r2, #0]
 80038ec:	801a      	strh	r2, [r3, #0]
 80038ee:	187b      	adds	r3, r7, r1
 80038f0:	003a      	movs	r2, r7
 80038f2:	8812      	ldrh	r2, [r2, #0]
 80038f4:	801a      	strh	r2, [r3, #0]
 80038f6:	003b      	movs	r3, r7
 80038f8:	183a      	adds	r2, r7, r0
 80038fa:	8812      	ldrh	r2, [r2, #0]
 80038fc:	801a      	strh	r2, [r3, #0]
 80038fe:	2120      	movs	r1, #32
 8003900:	187a      	adds	r2, r7, r1
 8003902:	2048      	movs	r0, #72	; 0x48
 8003904:	183b      	adds	r3, r7, r0
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	8013      	strh	r3, [r2, #0]
 800390a:	183b      	adds	r3, r7, r0
 800390c:	1cba      	adds	r2, r7, #2
 800390e:	8812      	ldrh	r2, [r2, #0]
 8003910:	801a      	strh	r2, [r3, #0]
 8003912:	1cbb      	adds	r3, r7, #2
 8003914:	187a      	adds	r2, r7, r1
 8003916:	8812      	ldrh	r2, [r2, #0]
 8003918:	801a      	strh	r2, [r3, #0]
    }
    if (y0 > y1) {
 800391a:	1d3a      	adds	r2, r7, #4
 800391c:	003b      	movs	r3, r7
 800391e:	2100      	movs	r1, #0
 8003920:	5e52      	ldrsh	r2, [r2, r1]
 8003922:	2100      	movs	r1, #0
 8003924:	5e5b      	ldrsh	r3, [r3, r1]
 8003926:	429a      	cmp	r2, r3
 8003928:	dd19      	ble.n	800395e <fillTriangle+0xf6>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800392a:	211e      	movs	r1, #30
 800392c:	187b      	adds	r3, r7, r1
 800392e:	1d3a      	adds	r2, r7, #4
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	801a      	strh	r2, [r3, #0]
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	003a      	movs	r2, r7
 8003938:	8812      	ldrh	r2, [r2, #0]
 800393a:	801a      	strh	r2, [r3, #0]
 800393c:	003b      	movs	r3, r7
 800393e:	187a      	adds	r2, r7, r1
 8003940:	8812      	ldrh	r2, [r2, #0]
 8003942:	801a      	strh	r2, [r3, #0]
 8003944:	211c      	movs	r1, #28
 8003946:	187b      	adds	r3, r7, r1
 8003948:	1dba      	adds	r2, r7, #6
 800394a:	8812      	ldrh	r2, [r2, #0]
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	1dbb      	adds	r3, r7, #6
 8003950:	1cba      	adds	r2, r7, #2
 8003952:	8812      	ldrh	r2, [r2, #0]
 8003954:	801a      	strh	r2, [r3, #0]
 8003956:	1cbb      	adds	r3, r7, #2
 8003958:	187a      	adds	r2, r7, r1
 800395a:	8812      	ldrh	r2, [r2, #0]
 800395c:	801a      	strh	r2, [r3, #0]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800395e:	1d3a      	adds	r2, r7, #4
 8003960:	234c      	movs	r3, #76	; 0x4c
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	2100      	movs	r1, #0
 8003966:	5e52      	ldrsh	r2, [r2, r1]
 8003968:	2100      	movs	r1, #0
 800396a:	5e5b      	ldrsh	r3, [r3, r1]
 800396c:	429a      	cmp	r2, r3
 800396e:	d158      	bne.n	8003a22 <fillTriangle+0x1ba>
        a = b = x0;
 8003970:	2034      	movs	r0, #52	; 0x34
 8003972:	183b      	adds	r3, r7, r0
 8003974:	1dba      	adds	r2, r7, #6
 8003976:	8812      	ldrh	r2, [r2, #0]
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	2136      	movs	r1, #54	; 0x36
 800397c:	187b      	adds	r3, r7, r1
 800397e:	183a      	adds	r2, r7, r0
 8003980:	8812      	ldrh	r2, [r2, #0]
 8003982:	801a      	strh	r2, [r3, #0]
        if(x1 < a)      a = x1;
 8003984:	1cba      	adds	r2, r7, #2
 8003986:	187b      	adds	r3, r7, r1
 8003988:	2000      	movs	r0, #0
 800398a:	5e12      	ldrsh	r2, [r2, r0]
 800398c:	2000      	movs	r0, #0
 800398e:	5e1b      	ldrsh	r3, [r3, r0]
 8003990:	429a      	cmp	r2, r3
 8003992:	da04      	bge.n	800399e <fillTriangle+0x136>
 8003994:	187b      	adds	r3, r7, r1
 8003996:	1cba      	adds	r2, r7, #2
 8003998:	8812      	ldrh	r2, [r2, #0]
 800399a:	801a      	strh	r2, [r3, #0]
 800399c:	e00c      	b.n	80039b8 <fillTriangle+0x150>
        else if(x1 > b) b = x1;
 800399e:	1cba      	adds	r2, r7, #2
 80039a0:	2134      	movs	r1, #52	; 0x34
 80039a2:	187b      	adds	r3, r7, r1
 80039a4:	2000      	movs	r0, #0
 80039a6:	5e12      	ldrsh	r2, [r2, r0]
 80039a8:	2000      	movs	r0, #0
 80039aa:	5e1b      	ldrsh	r3, [r3, r0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	dd03      	ble.n	80039b8 <fillTriangle+0x150>
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	1cba      	adds	r2, r7, #2
 80039b4:	8812      	ldrh	r2, [r2, #0]
 80039b6:	801a      	strh	r2, [r3, #0]
        if(x2 < a)      a = x2;
 80039b8:	2048      	movs	r0, #72	; 0x48
 80039ba:	183b      	adds	r3, r7, r0
 80039bc:	2436      	movs	r4, #54	; 0x36
 80039be:	1939      	adds	r1, r7, r4
 80039c0:	2200      	movs	r2, #0
 80039c2:	5e9a      	ldrsh	r2, [r3, r2]
 80039c4:	2300      	movs	r3, #0
 80039c6:	5ecb      	ldrsh	r3, [r1, r3]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	da04      	bge.n	80039d6 <fillTriangle+0x16e>
 80039cc:	193a      	adds	r2, r7, r4
 80039ce:	183b      	adds	r3, r7, r0
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	8013      	strh	r3, [r2, #0]
 80039d4:	e00d      	b.n	80039f2 <fillTriangle+0x18a>
        else if(x2 > b) b = x2;
 80039d6:	2048      	movs	r0, #72	; 0x48
 80039d8:	183b      	adds	r3, r7, r0
 80039da:	2434      	movs	r4, #52	; 0x34
 80039dc:	1939      	adds	r1, r7, r4
 80039de:	2200      	movs	r2, #0
 80039e0:	5e9a      	ldrsh	r2, [r3, r2]
 80039e2:	2300      	movs	r3, #0
 80039e4:	5ecb      	ldrsh	r3, [r1, r3]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	dd03      	ble.n	80039f2 <fillTriangle+0x18a>
 80039ea:	193a      	adds	r2, r7, r4
 80039ec:	183b      	adds	r3, r7, r0
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	8013      	strh	r3, [r2, #0]
        drawFastHLine(a, y0, b-a+1, color);
 80039f2:	2334      	movs	r3, #52	; 0x34
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	881a      	ldrh	r2, [r3, #0]
 80039f8:	2036      	movs	r0, #54	; 0x36
 80039fa:	183b      	adds	r3, r7, r0
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	3301      	adds	r3, #1
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	b21a      	sxth	r2, r3
 8003a08:	2350      	movs	r3, #80	; 0x50
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	881c      	ldrh	r4, [r3, #0]
 8003a0e:	1d3b      	adds	r3, r7, #4
 8003a10:	2100      	movs	r1, #0
 8003a12:	5e59      	ldrsh	r1, [r3, r1]
 8003a14:	183b      	adds	r3, r7, r0
 8003a16:	2000      	movs	r0, #0
 8003a18:	5e18      	ldrsh	r0, [r3, r0]
 8003a1a:	0023      	movs	r3, r4
 8003a1c:	f7ff f994 	bl	8002d48 <drawFastHLine>
        return;
 8003a20:	e151      	b.n	8003cc6 <fillTriangle+0x45e>
    }

    int16_t
    dx01 = x1 - x0,
 8003a22:	1cbb      	adds	r3, r7, #2
 8003a24:	881a      	ldrh	r2, [r3, #0]
 8003a26:	1dbb      	adds	r3, r7, #6
 8003a28:	881b      	ldrh	r3, [r3, #0]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	231a      	movs	r3, #26
 8003a30:	18fb      	adds	r3, r7, r3
 8003a32:	801a      	strh	r2, [r3, #0]
    dy01 = y1 - y0,
 8003a34:	003b      	movs	r3, r7
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	1d3b      	adds	r3, r7, #4
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	2318      	movs	r3, #24
 8003a42:	18fb      	adds	r3, r7, r3
 8003a44:	801a      	strh	r2, [r3, #0]
    dx02 = x2 - x0,
 8003a46:	2048      	movs	r0, #72	; 0x48
 8003a48:	183b      	adds	r3, r7, r0
 8003a4a:	881a      	ldrh	r2, [r3, #0]
 8003a4c:	1dbb      	adds	r3, r7, #6
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	2316      	movs	r3, #22
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	801a      	strh	r2, [r3, #0]
    dy02 = y2 - y0,
 8003a5a:	214c      	movs	r1, #76	; 0x4c
 8003a5c:	187b      	adds	r3, r7, r1
 8003a5e:	881a      	ldrh	r2, [r3, #0]
 8003a60:	1d3b      	adds	r3, r7, #4
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	2314      	movs	r3, #20
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	801a      	strh	r2, [r3, #0]
    dx12 = x2 - x1,
 8003a6e:	183b      	adds	r3, r7, r0
 8003a70:	881a      	ldrh	r2, [r3, #0]
 8003a72:	1cbb      	adds	r3, r7, #2
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	2312      	movs	r3, #18
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	801a      	strh	r2, [r3, #0]
    dy12 = y2 - y1;
 8003a80:	187b      	adds	r3, r7, r1
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	003b      	movs	r3, r7
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	801a      	strh	r2, [r3, #0]
    int32_t
    sa   = 0,
 8003a92:	2300      	movs	r3, #0
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8003a96:	2300      	movs	r3, #0
 8003a98:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8003a9a:	003a      	movs	r2, r7
 8003a9c:	187b      	adds	r3, r7, r1
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5e52      	ldrsh	r2, [r2, r1]
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	5e5b      	ldrsh	r3, [r3, r1]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d105      	bne.n	8003ab6 <fillTriangle+0x24e>
 8003aaa:	2330      	movs	r3, #48	; 0x30
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	003a      	movs	r2, r7
 8003ab0:	8812      	ldrh	r2, [r2, #0]
 8003ab2:	801a      	strh	r2, [r3, #0]
 8003ab4:	e006      	b.n	8003ac4 <fillTriangle+0x25c>
    else         last = y1-1; // Skip it
 8003ab6:	003b      	movs	r3, r7
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	2330      	movs	r3, #48	; 0x30
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	801a      	strh	r2, [r3, #0]

    for(y=y0; y<=last; y++) {
 8003ac4:	2332      	movs	r3, #50	; 0x32
 8003ac6:	18fb      	adds	r3, r7, r3
 8003ac8:	1d3a      	adds	r2, r7, #4
 8003aca:	8812      	ldrh	r2, [r2, #0]
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	e065      	b.n	8003b9c <fillTriangle+0x334>
        a   = x0 + sa / dy01;
 8003ad0:	2318      	movs	r3, #24
 8003ad2:	18fb      	adds	r3, r7, r3
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	5e9b      	ldrsh	r3, [r3, r2]
 8003ad8:	0019      	movs	r1, r3
 8003ada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003adc:	f7fc fb9c 	bl	8000218 <__divsi3>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	1dbb      	adds	r3, r7, #6
 8003ae6:	881b      	ldrh	r3, [r3, #0]
 8003ae8:	18d3      	adds	r3, r2, r3
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	2436      	movs	r4, #54	; 0x36
 8003aee:	193b      	adds	r3, r7, r4
 8003af0:	801a      	strh	r2, [r3, #0]
        b   = x0 + sb / dy02;
 8003af2:	2314      	movs	r3, #20
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	2200      	movs	r2, #0
 8003af8:	5e9b      	ldrsh	r3, [r3, r2]
 8003afa:	0019      	movs	r1, r3
 8003afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003afe:	f7fc fb8b 	bl	8000218 <__divsi3>
 8003b02:	0003      	movs	r3, r0
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	1dbb      	adds	r3, r7, #6
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	18d3      	adds	r3, r2, r3
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	2134      	movs	r1, #52	; 0x34
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	801a      	strh	r2, [r3, #0]
        sa += dx01;
 8003b14:	231a      	movs	r3, #26
 8003b16:	18fb      	adds	r3, r7, r3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	5e9b      	ldrsh	r3, [r3, r2]
 8003b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b1e:	18d3      	adds	r3, r2, r3
 8003b20:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003b22:	2316      	movs	r3, #22
 8003b24:	18fb      	adds	r3, r7, r3
 8003b26:	2200      	movs	r2, #0
 8003b28:	5e9b      	ldrsh	r3, [r3, r2]
 8003b2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b2c:	18d3      	adds	r3, r2, r3
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003b30:	193a      	adds	r2, r7, r4
 8003b32:	187b      	adds	r3, r7, r1
 8003b34:	2000      	movs	r0, #0
 8003b36:	5e12      	ldrsh	r2, [r2, r0]
 8003b38:	2000      	movs	r0, #0
 8003b3a:	5e1b      	ldrsh	r3, [r3, r0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	dd0c      	ble.n	8003b5a <fillTriangle+0x2f2>
 8003b40:	200c      	movs	r0, #12
 8003b42:	183b      	adds	r3, r7, r0
 8003b44:	193a      	adds	r2, r7, r4
 8003b46:	8812      	ldrh	r2, [r2, #0]
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	193b      	adds	r3, r7, r4
 8003b4c:	187a      	adds	r2, r7, r1
 8003b4e:	8812      	ldrh	r2, [r2, #0]
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	183a      	adds	r2, r7, r0
 8003b56:	8812      	ldrh	r2, [r2, #0]
 8003b58:	801a      	strh	r2, [r3, #0]
        drawFastHLine(a, y, b-a+1, color);
 8003b5a:	2334      	movs	r3, #52	; 0x34
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	2036      	movs	r0, #54	; 0x36
 8003b62:	183b      	adds	r3, r7, r0
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	b21a      	sxth	r2, r3
 8003b70:	2350      	movs	r3, #80	; 0x50
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	881c      	ldrh	r4, [r3, #0]
 8003b76:	2532      	movs	r5, #50	; 0x32
 8003b78:	197b      	adds	r3, r7, r5
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5e59      	ldrsh	r1, [r3, r1]
 8003b7e:	183b      	adds	r3, r7, r0
 8003b80:	2000      	movs	r0, #0
 8003b82:	5e18      	ldrsh	r0, [r3, r0]
 8003b84:	0023      	movs	r3, r4
 8003b86:	f7ff f8df 	bl	8002d48 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8003b8a:	0029      	movs	r1, r5
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	2200      	movs	r2, #0
 8003b90:	5e9b      	ldrsh	r3, [r3, r2]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3301      	adds	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	187b      	adds	r3, r7, r1
 8003b9a:	801a      	strh	r2, [r3, #0]
 8003b9c:	2032      	movs	r0, #50	; 0x32
 8003b9e:	183a      	adds	r2, r7, r0
 8003ba0:	2330      	movs	r3, #48	; 0x30
 8003ba2:	18fb      	adds	r3, r7, r3
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	5e52      	ldrsh	r2, [r2, r1]
 8003ba8:	2100      	movs	r1, #0
 8003baa:	5e5b      	ldrsh	r3, [r3, r1]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	dd8f      	ble.n	8003ad0 <fillTriangle+0x268>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8003bb0:	2312      	movs	r3, #18
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	5e9b      	ldrsh	r3, [r3, r2]
 8003bb8:	183a      	adds	r2, r7, r0
 8003bba:	2100      	movs	r1, #0
 8003bbc:	5e51      	ldrsh	r1, [r2, r1]
 8003bbe:	003a      	movs	r2, r7
 8003bc0:	2400      	movs	r4, #0
 8003bc2:	5f12      	ldrsh	r2, [r2, r4]
 8003bc4:	1a8a      	subs	r2, r1, r2
 8003bc6:	4353      	muls	r3, r2
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8003bca:	2316      	movs	r3, #22
 8003bcc:	18fb      	adds	r3, r7, r3
 8003bce:	2200      	movs	r2, #0
 8003bd0:	5e9b      	ldrsh	r3, [r3, r2]
 8003bd2:	183a      	adds	r2, r7, r0
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	5e51      	ldrsh	r1, [r2, r1]
 8003bd8:	1d3a      	adds	r2, r7, #4
 8003bda:	2000      	movs	r0, #0
 8003bdc:	5e12      	ldrsh	r2, [r2, r0]
 8003bde:	1a8a      	subs	r2, r1, r2
 8003be0:	4353      	muls	r3, r2
 8003be2:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8003be4:	e065      	b.n	8003cb2 <fillTriangle+0x44a>
        a   = x1 + sa / dy12;
 8003be6:	2310      	movs	r3, #16
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	2200      	movs	r2, #0
 8003bec:	5e9b      	ldrsh	r3, [r3, r2]
 8003bee:	0019      	movs	r1, r3
 8003bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003bf2:	f7fc fb11 	bl	8000218 <__divsi3>
 8003bf6:	0003      	movs	r3, r0
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	1cbb      	adds	r3, r7, #2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	18d3      	adds	r3, r2, r3
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	2436      	movs	r4, #54	; 0x36
 8003c04:	193b      	adds	r3, r7, r4
 8003c06:	801a      	strh	r2, [r3, #0]
        b   = x0 + sb / dy02;
 8003c08:	2314      	movs	r3, #20
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	5e9b      	ldrsh	r3, [r3, r2]
 8003c10:	0019      	movs	r1, r3
 8003c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c14:	f7fc fb00 	bl	8000218 <__divsi3>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	1dbb      	adds	r3, r7, #6
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	18d3      	adds	r3, r2, r3
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	2134      	movs	r1, #52	; 0x34
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	801a      	strh	r2, [r3, #0]
        sa += dx12;
 8003c2a:	2312      	movs	r3, #18
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	2200      	movs	r2, #0
 8003c30:	5e9b      	ldrsh	r3, [r3, r2]
 8003c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c34:	18d3      	adds	r3, r2, r3
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003c38:	2316      	movs	r3, #22
 8003c3a:	18fb      	adds	r3, r7, r3
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	5e9b      	ldrsh	r3, [r3, r2]
 8003c40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c42:	18d3      	adds	r3, r2, r3
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003c46:	193a      	adds	r2, r7, r4
 8003c48:	187b      	adds	r3, r7, r1
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	5e12      	ldrsh	r2, [r2, r0]
 8003c4e:	2000      	movs	r0, #0
 8003c50:	5e1b      	ldrsh	r3, [r3, r0]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	dd0c      	ble.n	8003c70 <fillTriangle+0x408>
 8003c56:	200e      	movs	r0, #14
 8003c58:	183b      	adds	r3, r7, r0
 8003c5a:	193a      	adds	r2, r7, r4
 8003c5c:	8812      	ldrh	r2, [r2, #0]
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	193b      	adds	r3, r7, r4
 8003c62:	187a      	adds	r2, r7, r1
 8003c64:	8812      	ldrh	r2, [r2, #0]
 8003c66:	801a      	strh	r2, [r3, #0]
 8003c68:	187b      	adds	r3, r7, r1
 8003c6a:	183a      	adds	r2, r7, r0
 8003c6c:	8812      	ldrh	r2, [r2, #0]
 8003c6e:	801a      	strh	r2, [r3, #0]
        drawFastHLine(a, y, b-a+1, color);
 8003c70:	2334      	movs	r3, #52	; 0x34
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	881a      	ldrh	r2, [r3, #0]
 8003c76:	2036      	movs	r0, #54	; 0x36
 8003c78:	183b      	adds	r3, r7, r0
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3301      	adds	r3, #1
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	b21a      	sxth	r2, r3
 8003c86:	2350      	movs	r3, #80	; 0x50
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	881c      	ldrh	r4, [r3, #0]
 8003c8c:	2532      	movs	r5, #50	; 0x32
 8003c8e:	197b      	adds	r3, r7, r5
 8003c90:	2100      	movs	r1, #0
 8003c92:	5e59      	ldrsh	r1, [r3, r1]
 8003c94:	183b      	adds	r3, r7, r0
 8003c96:	2000      	movs	r0, #0
 8003c98:	5e18      	ldrsh	r0, [r3, r0]
 8003c9a:	0023      	movs	r3, r4
 8003c9c:	f7ff f854 	bl	8002d48 <drawFastHLine>
    for(; y<=y2; y++) {
 8003ca0:	0029      	movs	r1, r5
 8003ca2:	187b      	adds	r3, r7, r1
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	5e9b      	ldrsh	r3, [r3, r2]
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3301      	adds	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	2332      	movs	r3, #50	; 0x32
 8003cb4:	18fa      	adds	r2, r7, r3
 8003cb6:	234c      	movs	r3, #76	; 0x4c
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	2100      	movs	r1, #0
 8003cbc:	5e52      	ldrsh	r2, [r2, r1]
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5e5b      	ldrsh	r3, [r3, r1]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	dd8f      	ble.n	8003be6 <fillTriangle+0x37e>
    }
}
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b00e      	add	sp, #56	; 0x38
 8003cca:	bdb0      	pop	{r4, r5, r7, pc}

08003ccc <fillScreen>:

void fillScreen(uint16_t color) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	1dbb      	adds	r3, r7, #6
 8003cd6:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8003cd8:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <fillScreen+0x30>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	5e9a      	ldrsh	r2, [r3, r2]
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <fillScreen+0x34>)
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	5e59      	ldrsh	r1, [r3, r1]
 8003ce4:	1dbb      	adds	r3, r7, #6
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	000b      	movs	r3, r1
 8003cec:	2100      	movs	r1, #0
 8003cee:	2000      	movs	r0, #0
 8003cf0:	f7fe febe 	bl	8002a70 <fillRect>
}
 8003cf4:	46c0      	nop			; (mov r8, r8)
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b002      	add	sp, #8
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	2000006c 	.word	0x2000006c
 8003d00:	2000006e 	.word	0x2000006e

08003d04 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4803      	ldr	r0, [pc, #12]	; (8003d1c <ST7735_Select+0x18>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	0019      	movs	r1, r3
 8003d12:	f003 fe42 	bl	800799a <HAL_GPIO_WritePin>
}
 8003d16:	46c0      	nop			; (mov r8, r8)
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	48000400 	.word	0x48000400

08003d20 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4803      	ldr	r0, [pc, #12]	; (8003d38 <ST7735_Unselect+0x18>)
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	0019      	movs	r1, r3
 8003d2e:	f003 fe34 	bl	800799a <HAL_GPIO_WritePin>
}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	48000400 	.word	0x48000400

08003d3c <ST7735_Reset>:

void ST7735_Reset()
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8003d40:	4b08      	ldr	r3, [pc, #32]	; (8003d64 <ST7735_Reset+0x28>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	2104      	movs	r1, #4
 8003d46:	0018      	movs	r0, r3
 8003d48:	f003 fe27 	bl	800799a <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003d4c:	2005      	movs	r0, #5
 8003d4e:	f002 fea3 	bl	8006a98 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <ST7735_Reset+0x28>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	2104      	movs	r1, #4
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f003 fe1e 	bl	800799a <HAL_GPIO_WritePin>
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	48000400 	.word	0x48000400

08003d68 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	0002      	movs	r2, r0
 8003d70:	1dfb      	adds	r3, r7, #7
 8003d72:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_RESET);
 8003d74:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <ST7735_WriteCommand+0x30>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	2102      	movs	r1, #2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f003 fe0d 	bl	800799a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003d80:	2301      	movs	r3, #1
 8003d82:	425b      	negs	r3, r3
 8003d84:	1df9      	adds	r1, r7, #7
 8003d86:	4805      	ldr	r0, [pc, #20]	; (8003d9c <ST7735_WriteCommand+0x34>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f004 fb1f 	bl	80083cc <HAL_SPI_Transmit>
}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b002      	add	sp, #8
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	48000400 	.word	0x48000400
 8003d9c:	200000dc 	.word	0x200000dc

08003da0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 8003daa:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <ST7735_WriteData+0x30>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	2102      	movs	r1, #2
 8003db0:	0018      	movs	r0, r3
 8003db2:	f003 fdf2 	bl	800799a <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	2301      	movs	r3, #1
 8003dbc:	425b      	negs	r3, r3
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4804      	ldr	r0, [pc, #16]	; (8003dd4 <ST7735_WriteData+0x34>)
 8003dc2:	f004 fb03 	bl	80083cc <HAL_SPI_Transmit>
}
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	b002      	add	sp, #8
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	46c0      	nop			; (mov r8, r8)
 8003dd0:	48000400 	.word	0x48000400
 8003dd4:	200000dc 	.word	0x200000dc

08003dd8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	1c5a      	adds	r2, r3, #1
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	220f      	movs	r2, #15
 8003de8:	18ba      	adds	r2, r7, r2
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8003dee:	e04a      	b.n	8003e86 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	607a      	str	r2, [r7, #4]
 8003df6:	210b      	movs	r1, #11
 8003df8:	187a      	adds	r2, r7, r1
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8003dfe:	187b      	adds	r3, r7, r1
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	0018      	movs	r0, r3
 8003e04:	f7ff ffb0 	bl	8003d68 <ST7735_WriteCommand>

        numArgs = *addr++;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	607a      	str	r2, [r7, #4]
 8003e0e:	200a      	movs	r0, #10
 8003e10:	183a      	adds	r2, r7, r0
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003e16:	183b      	adds	r3, r7, r0
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	230c      	movs	r3, #12
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	2180      	movs	r1, #128	; 0x80
 8003e22:	400a      	ands	r2, r1
 8003e24:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8003e26:	183b      	adds	r3, r7, r0
 8003e28:	183a      	adds	r2, r7, r0
 8003e2a:	7812      	ldrb	r2, [r2, #0]
 8003e2c:	217f      	movs	r1, #127	; 0x7f
 8003e2e:	400a      	ands	r2, r1
 8003e30:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8003e32:	183b      	adds	r3, r7, r0
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00c      	beq.n	8003e54 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003e3a:	0004      	movs	r4, r0
 8003e3c:	183b      	adds	r3, r7, r0
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f7ff ffab 	bl	8003da0 <ST7735_WriteData>
            addr += numArgs;
 8003e4a:	193b      	adds	r3, r7, r4
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	18d3      	adds	r3, r2, r3
 8003e52:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003e54:	210c      	movs	r1, #12
 8003e56:	187b      	adds	r3, r7, r1
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d013      	beq.n	8003e86 <DisplayInit+0xae>
            ms = *addr++;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	781a      	ldrb	r2, [r3, #0]
 8003e66:	187b      	adds	r3, r7, r1
 8003e68:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	2bff      	cmp	r3, #255	; 0xff
 8003e70:	d103      	bne.n	8003e7a <DisplayInit+0xa2>
 8003e72:	187b      	adds	r3, r7, r1
 8003e74:	22fa      	movs	r2, #250	; 0xfa
 8003e76:	0052      	lsls	r2, r2, #1
 8003e78:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	881b      	ldrh	r3, [r3, #0]
 8003e80:	0018      	movs	r0, r3
 8003e82:	f002 fe09 	bl	8006a98 <HAL_Delay>
    while(numCommands--) {
 8003e86:	220f      	movs	r2, #15
 8003e88:	18bb      	adds	r3, r7, r2
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	18ba      	adds	r2, r7, r2
 8003e8e:	1e59      	subs	r1, r3, #1
 8003e90:	7011      	strb	r1, [r2, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1ac      	bne.n	8003df0 <DisplayInit+0x18>
        }
    }
}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b005      	add	sp, #20
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003ea0:	b5b0      	push	{r4, r5, r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	0005      	movs	r5, r0
 8003ea8:	000c      	movs	r4, r1
 8003eaa:	0010      	movs	r0, r2
 8003eac:	0019      	movs	r1, r3
 8003eae:	1dfb      	adds	r3, r7, #7
 8003eb0:	1c2a      	adds	r2, r5, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
 8003eb4:	1dbb      	adds	r3, r7, #6
 8003eb6:	1c22      	adds	r2, r4, #0
 8003eb8:	701a      	strb	r2, [r3, #0]
 8003eba:	1d7b      	adds	r3, r7, #5
 8003ebc:	1c02      	adds	r2, r0, #0
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	1d3b      	adds	r3, r7, #4
 8003ec2:	1c0a      	adds	r2, r1, #0
 8003ec4:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003ec6:	202a      	movs	r0, #42	; 0x2a
 8003ec8:	f7ff ff4e 	bl	8003d68 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8003ecc:	210c      	movs	r1, #12
 8003ece:	187b      	adds	r3, r7, r1
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	701a      	strb	r2, [r3, #0]
 8003ed4:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <ST7735_SetAddressWindow+0xa8>)
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	1dfb      	adds	r3, r7, #7
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	18d3      	adds	r3, r2, r3
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	705a      	strb	r2, [r3, #1]
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	709a      	strb	r2, [r3, #2]
 8003eea:	4b17      	ldr	r3, [pc, #92]	; (8003f48 <ST7735_SetAddressWindow+0xa8>)
 8003eec:	781a      	ldrb	r2, [r3, #0]
 8003eee:	1d7b      	adds	r3, r7, #5
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	18d3      	adds	r3, r2, r3
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003efa:	000c      	movs	r4, r1
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	2104      	movs	r1, #4
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7ff ff4d 	bl	8003da0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003f06:	202b      	movs	r0, #43	; 0x2b
 8003f08:	f7ff ff2e 	bl	8003d68 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <ST7735_SetAddressWindow+0xac>)
 8003f0e:	781a      	ldrb	r2, [r3, #0]
 8003f10:	1dbb      	adds	r3, r7, #6
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	18d3      	adds	r3, r2, r3
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	0021      	movs	r1, r4
 8003f1a:	187b      	adds	r3, r7, r1
 8003f1c:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <ST7735_SetAddressWindow+0xac>)
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	18d3      	adds	r3, r2, r3
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	187b      	adds	r3, r7, r1
 8003f2c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003f2e:	187b      	adds	r3, r7, r1
 8003f30:	2104      	movs	r1, #4
 8003f32:	0018      	movs	r0, r3
 8003f34:	f7ff ff34 	bl	8003da0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003f38:	202c      	movs	r0, #44	; 0x2c
 8003f3a:	f7ff ff15 	bl	8003d68 <ST7735_WriteCommand>
}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	46bd      	mov	sp, r7
 8003f42:	b004      	add	sp, #16
 8003f44:	bdb0      	pop	{r4, r5, r7, pc}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	20000073 	.word	0x20000073
 8003f4c:	20000074 	.word	0x20000074

08003f50 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	0002      	movs	r2, r0
 8003f58:	1dfb      	adds	r3, r7, #7
 8003f5a:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8003f5c:	f7ff fed2 	bl	8003d04 <ST7735_Select>
    ST7735_Reset();
 8003f60:	f7ff feec 	bl	8003d3c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <ST7735_Init+0x50>)
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7ff ff36 	bl	8003dd8 <DisplayInit>
    DisplayInit(init_cmds2);
 8003f6c:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <ST7735_Init+0x54>)
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7ff ff32 	bl	8003dd8 <DisplayInit>
    DisplayInit(init_cmds3);
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <ST7735_Init+0x58>)
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff ff2e 	bl	8003dd8 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <ST7735_Init+0x5c>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8003f82:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <ST7735_Init+0x60>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8003f88:	1dfb      	adds	r3, r7, #7
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f000 f811 	bl	8003fb4 <ST7735_SetRotation>
    ST7735_Unselect();
 8003f92:	f7ff fec5 	bl	8003d20 <ST7735_Unselect>

}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b002      	add	sp, #8
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	08008b50 	.word	0x08008b50
 8003fa4:	08008b88 	.word	0x08008b88
 8003fa8:	08008b98 	.word	0x08008b98
 8003fac:	20000071 	.word	0x20000071
 8003fb0:	20000072 	.word	0x20000072

08003fb4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	0002      	movs	r2, r0
 8003fbc:	1dfb      	adds	r3, r7, #7
 8003fbe:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8003fc0:	230f      	movs	r3, #15
 8003fc2:	18fb      	adds	r3, r7, r3
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8003fc8:	1dfb      	adds	r3, r7, #7
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2203      	movs	r2, #3
 8003fce:	4013      	ands	r3, r2
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	4b36      	ldr	r3, [pc, #216]	; (80040ac <ST7735_SetRotation+0xf8>)
 8003fd4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8003fd6:	4b35      	ldr	r3, [pc, #212]	; (80040ac <ST7735_SetRotation+0xf8>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d041      	beq.n	8004062 <ST7735_SetRotation+0xae>
 8003fde:	dc53      	bgt.n	8004088 <ST7735_SetRotation+0xd4>
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d02b      	beq.n	800403c <ST7735_SetRotation+0x88>
 8003fe4:	dc50      	bgt.n	8004088 <ST7735_SetRotation+0xd4>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <ST7735_SetRotation+0x3c>
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d013      	beq.n	8004016 <ST7735_SetRotation+0x62>
 8003fee:	e04b      	b.n	8004088 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8003ff0:	230f      	movs	r3, #15
 8003ff2:	18fb      	adds	r3, r7, r3
 8003ff4:	22c0      	movs	r2, #192	; 0xc0
 8003ff6:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003ff8:	4b2d      	ldr	r3, [pc, #180]	; (80040b0 <ST7735_SetRotation+0xfc>)
 8003ffa:	22a0      	movs	r2, #160	; 0xa0
 8003ffc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003ffe:	4b2d      	ldr	r3, [pc, #180]	; (80040b4 <ST7735_SetRotation+0x100>)
 8004000:	2280      	movs	r2, #128	; 0x80
 8004002:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8004004:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <ST7735_SetRotation+0x104>)
 8004006:	781a      	ldrb	r2, [r3, #0]
 8004008:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <ST7735_SetRotation+0x108>)
 800400a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800400c:	4b2c      	ldr	r3, [pc, #176]	; (80040c0 <ST7735_SetRotation+0x10c>)
 800400e:	781a      	ldrb	r2, [r3, #0]
 8004010:	4b2c      	ldr	r3, [pc, #176]	; (80040c4 <ST7735_SetRotation+0x110>)
 8004012:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004014:	e038      	b.n	8004088 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8004016:	230f      	movs	r3, #15
 8004018:	18fb      	adds	r3, r7, r3
 800401a:	22a0      	movs	r2, #160	; 0xa0
 800401c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800401e:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <ST7735_SetRotation+0x100>)
 8004020:	22a0      	movs	r2, #160	; 0xa0
 8004022:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <ST7735_SetRotation+0xfc>)
 8004026:	2280      	movs	r2, #128	; 0x80
 8004028:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800402a:	4b23      	ldr	r3, [pc, #140]	; (80040b8 <ST7735_SetRotation+0x104>)
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <ST7735_SetRotation+0x110>)
 8004030:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8004032:	4b23      	ldr	r3, [pc, #140]	; (80040c0 <ST7735_SetRotation+0x10c>)
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	4b21      	ldr	r3, [pc, #132]	; (80040bc <ST7735_SetRotation+0x108>)
 8004038:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800403a:	e025      	b.n	8004088 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800403c:	230f      	movs	r3, #15
 800403e:	18fb      	adds	r3, r7, r3
 8004040:	2200      	movs	r2, #0
 8004042:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8004044:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <ST7735_SetRotation+0xfc>)
 8004046:	22a0      	movs	r2, #160	; 0xa0
 8004048:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800404a:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <ST7735_SetRotation+0x100>)
 800404c:	2280      	movs	r2, #128	; 0x80
 800404e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8004050:	4b19      	ldr	r3, [pc, #100]	; (80040b8 <ST7735_SetRotation+0x104>)
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	4b19      	ldr	r3, [pc, #100]	; (80040bc <ST7735_SetRotation+0x108>)
 8004056:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8004058:	4b19      	ldr	r3, [pc, #100]	; (80040c0 <ST7735_SetRotation+0x10c>)
 800405a:	781a      	ldrb	r2, [r3, #0]
 800405c:	4b19      	ldr	r3, [pc, #100]	; (80040c4 <ST7735_SetRotation+0x110>)
 800405e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004060:	e012      	b.n	8004088 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8004062:	230f      	movs	r3, #15
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	2260      	movs	r2, #96	; 0x60
 8004068:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800406a:	4b12      	ldr	r3, [pc, #72]	; (80040b4 <ST7735_SetRotation+0x100>)
 800406c:	22a0      	movs	r2, #160	; 0xa0
 800406e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <ST7735_SetRotation+0xfc>)
 8004072:	2280      	movs	r2, #128	; 0x80
 8004074:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8004076:	4b10      	ldr	r3, [pc, #64]	; (80040b8 <ST7735_SetRotation+0x104>)
 8004078:	781a      	ldrb	r2, [r3, #0]
 800407a:	4b12      	ldr	r3, [pc, #72]	; (80040c4 <ST7735_SetRotation+0x110>)
 800407c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800407e:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <ST7735_SetRotation+0x10c>)
 8004080:	781a      	ldrb	r2, [r3, #0]
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <ST7735_SetRotation+0x108>)
 8004084:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8004086:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 8004088:	f7ff fe3c 	bl	8003d04 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 800408c:	2036      	movs	r0, #54	; 0x36
 800408e:	f7ff fe6b 	bl	8003d68 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8004092:	230f      	movs	r3, #15
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	2101      	movs	r1, #1
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff fe81 	bl	8003da0 <ST7735_WriteData>
  ST7735_Unselect();
 800409e:	f7ff fe3f 	bl	8003d20 <ST7735_Unselect>
}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	b004      	add	sp, #16
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	46c0      	nop			; (mov r8, r8)
 80040ac:	20000070 	.word	0x20000070
 80040b0:	2000006e 	.word	0x2000006e
 80040b4:	2000006c 	.word	0x2000006c
 80040b8:	20000071 	.word	0x20000071
 80040bc:	20000073 	.word	0x20000073
 80040c0:	20000072 	.word	0x20000072
 80040c4:	20000074 	.word	0x20000074

080040c8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	0004      	movs	r4, r0
 80040d0:	0008      	movs	r0, r1
 80040d2:	0011      	movs	r1, r2
 80040d4:	1dbb      	adds	r3, r7, #6
 80040d6:	1c22      	adds	r2, r4, #0
 80040d8:	801a      	strh	r2, [r3, #0]
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	1c02      	adds	r2, r0, #0
 80040de:	801a      	strh	r2, [r3, #0]
 80040e0:	1cbb      	adds	r3, r7, #2
 80040e2:	1c0a      	adds	r2, r1, #0
 80040e4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 80040e6:	1dbb      	adds	r3, r7, #6
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	4a1c      	ldr	r2, [pc, #112]	; (800415c <ST7735_DrawPixel+0x94>)
 80040ec:	2100      	movs	r1, #0
 80040ee:	5e52      	ldrsh	r2, [r2, r1]
 80040f0:	4293      	cmp	r3, r2
 80040f2:	da2f      	bge.n	8004154 <ST7735_DrawPixel+0x8c>
 80040f4:	1d3b      	adds	r3, r7, #4
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	4a19      	ldr	r2, [pc, #100]	; (8004160 <ST7735_DrawPixel+0x98>)
 80040fa:	2100      	movs	r1, #0
 80040fc:	5e52      	ldrsh	r2, [r2, r1]
 80040fe:	4293      	cmp	r3, r2
 8004100:	da28      	bge.n	8004154 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8004102:	f7ff fdff 	bl	8003d04 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8004106:	1dbb      	adds	r3, r7, #6
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b2d8      	uxtb	r0, r3
 800410c:	1d3b      	adds	r3, r7, #4
 800410e:	881b      	ldrh	r3, [r3, #0]
 8004110:	b2d9      	uxtb	r1, r3
 8004112:	1dbb      	adds	r3, r7, #6
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	3301      	adds	r3, #1
 800411a:	b2da      	uxtb	r2, r3
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	3301      	adds	r3, #1
 8004124:	b2db      	uxtb	r3, r3
 8004126:	f7ff febb 	bl	8003ea0 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800412a:	1cbb      	adds	r3, r7, #2
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	b29b      	uxth	r3, r3
 8004132:	b2da      	uxtb	r2, r3
 8004134:	210c      	movs	r1, #12
 8004136:	187b      	adds	r3, r7, r1
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	1cbb      	adds	r3, r7, #2
 800413c:	881b      	ldrh	r3, [r3, #0]
 800413e:	b2da      	uxtb	r2, r3
 8004140:	187b      	adds	r3, r7, r1
 8004142:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8004144:	187b      	adds	r3, r7, r1
 8004146:	2102      	movs	r1, #2
 8004148:	0018      	movs	r0, r3
 800414a:	f7ff fe29 	bl	8003da0 <ST7735_WriteData>

    ST7735_Unselect();
 800414e:	f7ff fde7 	bl	8003d20 <ST7735_Unselect>
 8004152:	e000      	b.n	8004156 <ST7735_DrawPixel+0x8e>
        return;
 8004154:	46c0      	nop			; (mov r8, r8)
}
 8004156:	46bd      	mov	sp, r7
 8004158:	b005      	add	sp, #20
 800415a:	bd90      	pop	{r4, r7, pc}
 800415c:	2000006c 	.word	0x2000006c
 8004160:	2000006e 	.word	0x2000006e

08004164 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8004164:	b082      	sub	sp, #8
 8004166:	b5b0      	push	{r4, r5, r7, lr}
 8004168:	b088      	sub	sp, #32
 800416a:	af00      	add	r7, sp, #0
 800416c:	0004      	movs	r4, r0
 800416e:	0008      	movs	r0, r1
 8004170:	0011      	movs	r1, r2
 8004172:	2204      	movs	r2, #4
 8004174:	2530      	movs	r5, #48	; 0x30
 8004176:	1952      	adds	r2, r2, r5
 8004178:	19d2      	adds	r2, r2, r7
 800417a:	6013      	str	r3, [r2, #0]
 800417c:	1dbb      	adds	r3, r7, #6
 800417e:	1c22      	adds	r2, r4, #0
 8004180:	801a      	strh	r2, [r3, #0]
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	1c02      	adds	r2, r0, #0
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	1cfb      	adds	r3, r7, #3
 800418a:	1c0a      	adds	r2, r1, #0
 800418c:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800418e:	1dbb      	adds	r3, r7, #6
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b2d8      	uxtb	r0, r3
 8004194:	1d3b      	adds	r3, r7, #4
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	b2d9      	uxtb	r1, r3
 800419a:	1dbb      	adds	r3, r7, #6
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	2304      	movs	r3, #4
 80041a2:	195b      	adds	r3, r3, r5
 80041a4:	19db      	adds	r3, r3, r7
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	18d3      	adds	r3, r2, r3
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b2dc      	uxtb	r4, r3
 80041b0:	1d3b      	adds	r3, r7, #4
 80041b2:	881b      	ldrh	r3, [r3, #0]
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	2304      	movs	r3, #4
 80041b8:	195b      	adds	r3, r3, r5
 80041ba:	19db      	adds	r3, r3, r7
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	18d3      	adds	r3, r2, r3
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	3b01      	subs	r3, #1
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	0022      	movs	r2, r4
 80041c8:	f7ff fe6a 	bl	8003ea0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	e053      	b.n	800427a <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 80041d2:	2304      	movs	r3, #4
 80041d4:	2030      	movs	r0, #48	; 0x30
 80041d6:	181b      	adds	r3, r3, r0
 80041d8:	19db      	adds	r3, r3, r7
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	1cfb      	adds	r3, r7, #3
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	3b20      	subs	r3, #32
 80041e2:	2104      	movs	r1, #4
 80041e4:	1809      	adds	r1, r1, r0
 80041e6:	19c9      	adds	r1, r1, r7
 80041e8:	7849      	ldrb	r1, [r1, #1]
 80041ea:	434b      	muls	r3, r1
 80041ec:	0019      	movs	r1, r3
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	18cb      	adds	r3, r1, r3
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	18d3      	adds	r3, r2, r3
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
 80041fe:	e030      	b.n	8004262 <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	409a      	lsls	r2, r3
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	4013      	ands	r3, r2
 800420c:	d013      	beq.n	8004236 <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800420e:	203c      	movs	r0, #60	; 0x3c
 8004210:	183b      	adds	r3, r7, r0
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	0a1b      	lsrs	r3, r3, #8
 8004216:	b29b      	uxth	r3, r3
 8004218:	b2da      	uxtb	r2, r3
 800421a:	2110      	movs	r1, #16
 800421c:	187b      	adds	r3, r7, r1
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	183b      	adds	r3, r7, r0
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b2da      	uxtb	r2, r3
 8004226:	187b      	adds	r3, r7, r1
 8004228:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 800422a:	187b      	adds	r3, r7, r1
 800422c:	2102      	movs	r1, #2
 800422e:	0018      	movs	r0, r3
 8004230:	f7ff fdb6 	bl	8003da0 <ST7735_WriteData>
 8004234:	e012      	b.n	800425c <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8004236:	2040      	movs	r0, #64	; 0x40
 8004238:	183b      	adds	r3, r7, r0
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	b29b      	uxth	r3, r3
 8004240:	b2da      	uxtb	r2, r3
 8004242:	210c      	movs	r1, #12
 8004244:	187b      	adds	r3, r7, r1
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	183b      	adds	r3, r7, r0
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	187b      	adds	r3, r7, r1
 8004250:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8004252:	187b      	adds	r3, r7, r1
 8004254:	2102      	movs	r1, #2
 8004256:	0018      	movs	r0, r3
 8004258:	f7ff fda2 	bl	8003da0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	3301      	adds	r3, #1
 8004260:	61bb      	str	r3, [r7, #24]
 8004262:	2304      	movs	r3, #4
 8004264:	2230      	movs	r2, #48	; 0x30
 8004266:	189b      	adds	r3, r3, r2
 8004268:	19db      	adds	r3, r3, r7
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	001a      	movs	r2, r3
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	4293      	cmp	r3, r2
 8004272:	d3c5      	bcc.n	8004200 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	3301      	adds	r3, #1
 8004278:	61fb      	str	r3, [r7, #28]
 800427a:	2304      	movs	r3, #4
 800427c:	2230      	movs	r2, #48	; 0x30
 800427e:	189b      	adds	r3, r3, r2
 8004280:	19db      	adds	r3, r3, r7
 8004282:	785b      	ldrb	r3, [r3, #1]
 8004284:	001a      	movs	r2, r3
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	4293      	cmp	r3, r2
 800428a:	d3a2      	bcc.n	80041d2 <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 800428c:	46c0      	nop			; (mov r8, r8)
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	46bd      	mov	sp, r7
 8004292:	b008      	add	sp, #32
 8004294:	bcb0      	pop	{r4, r5, r7}
 8004296:	bc08      	pop	{r3}
 8004298:	b002      	add	sp, #8
 800429a:	4718      	bx	r3

0800429c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800429c:	b082      	sub	sp, #8
 800429e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a0:	b087      	sub	sp, #28
 80042a2:	af04      	add	r7, sp, #16
 80042a4:	603a      	str	r2, [r7, #0]
 80042a6:	2204      	movs	r2, #4
 80042a8:	2418      	movs	r4, #24
 80042aa:	1912      	adds	r2, r2, r4
 80042ac:	2408      	movs	r4, #8
 80042ae:	46a4      	mov	ip, r4
 80042b0:	44bc      	add	ip, r7
 80042b2:	4462      	add	r2, ip
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	1dbb      	adds	r3, r7, #6
 80042b8:	1c02      	adds	r2, r0, #0
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	1c0a      	adds	r2, r1, #0
 80042c0:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 80042c2:	f7ff fd1f 	bl	8003d04 <ST7735_Select>

    while(*str) {
 80042c6:	e067      	b.n	8004398 <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 80042c8:	1dbb      	adds	r3, r7, #6
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	2204      	movs	r2, #4
 80042ce:	2118      	movs	r1, #24
 80042d0:	1852      	adds	r2, r2, r1
 80042d2:	2008      	movs	r0, #8
 80042d4:	4684      	mov	ip, r0
 80042d6:	44bc      	add	ip, r7
 80042d8:	4462      	add	r2, ip
 80042da:	7812      	ldrb	r2, [r2, #0]
 80042dc:	189b      	adds	r3, r3, r2
 80042de:	4a36      	ldr	r2, [pc, #216]	; (80043b8 <ST7735_WriteString+0x11c>)
 80042e0:	2000      	movs	r0, #0
 80042e2:	5e12      	ldrsh	r2, [r2, r0]
 80042e4:	4293      	cmp	r3, r2
 80042e6:	db27      	blt.n	8004338 <ST7735_WriteString+0x9c>
            x = 0;
 80042e8:	1dbb      	adds	r3, r7, #6
 80042ea:	2200      	movs	r2, #0
 80042ec:	801a      	strh	r2, [r3, #0]
            y += font.height;
 80042ee:	2304      	movs	r3, #4
 80042f0:	0008      	movs	r0, r1
 80042f2:	185b      	adds	r3, r3, r1
 80042f4:	2208      	movs	r2, #8
 80042f6:	4694      	mov	ip, r2
 80042f8:	44bc      	add	ip, r7
 80042fa:	4463      	add	r3, ip
 80042fc:	785b      	ldrb	r3, [r3, #1]
 80042fe:	b299      	uxth	r1, r3
 8004300:	1d3b      	adds	r3, r7, #4
 8004302:	1d3a      	adds	r2, r7, #4
 8004304:	8812      	ldrh	r2, [r2, #0]
 8004306:	188a      	adds	r2, r1, r2
 8004308:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 800430a:	1d3b      	adds	r3, r7, #4
 800430c:	881b      	ldrh	r3, [r3, #0]
 800430e:	2204      	movs	r2, #4
 8004310:	1812      	adds	r2, r2, r0
 8004312:	2108      	movs	r1, #8
 8004314:	468c      	mov	ip, r1
 8004316:	44bc      	add	ip, r7
 8004318:	4462      	add	r2, ip
 800431a:	7852      	ldrb	r2, [r2, #1]
 800431c:	189b      	adds	r3, r3, r2
 800431e:	4a27      	ldr	r2, [pc, #156]	; (80043bc <ST7735_WriteString+0x120>)
 8004320:	2100      	movs	r1, #0
 8004322:	5e52      	ldrsh	r2, [r2, r1]
 8004324:	4293      	cmp	r3, r2
 8004326:	da3c      	bge.n	80043a2 <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b20      	cmp	r3, #32
 800432e:	d103      	bne.n	8004338 <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	3301      	adds	r3, #1
 8004334:	603b      	str	r3, [r7, #0]
                continue;
 8004336:	e02f      	b.n	8004398 <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781d      	ldrb	r5, [r3, #0]
 800433c:	2304      	movs	r3, #4
 800433e:	2618      	movs	r6, #24
 8004340:	199b      	adds	r3, r3, r6
 8004342:	2208      	movs	r2, #8
 8004344:	4694      	mov	ip, r2
 8004346:	44bc      	add	ip, r7
 8004348:	4463      	add	r3, ip
 800434a:	1d3a      	adds	r2, r7, #4
 800434c:	8814      	ldrh	r4, [r2, #0]
 800434e:	1dba      	adds	r2, r7, #6
 8004350:	8810      	ldrh	r0, [r2, #0]
 8004352:	2228      	movs	r2, #40	; 0x28
 8004354:	2108      	movs	r1, #8
 8004356:	1852      	adds	r2, r2, r1
 8004358:	19d2      	adds	r2, r2, r7
 800435a:	8812      	ldrh	r2, [r2, #0]
 800435c:	9202      	str	r2, [sp, #8]
 800435e:	2224      	movs	r2, #36	; 0x24
 8004360:	1852      	adds	r2, r2, r1
 8004362:	19d2      	adds	r2, r2, r7
 8004364:	8812      	ldrh	r2, [r2, #0]
 8004366:	9201      	str	r2, [sp, #4]
 8004368:	466a      	mov	r2, sp
 800436a:	6859      	ldr	r1, [r3, #4]
 800436c:	6011      	str	r1, [r2, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	002a      	movs	r2, r5
 8004372:	0021      	movs	r1, r4
 8004374:	f7ff fef6 	bl	8004164 <ST7735_WriteChar>
        x += font.width;
 8004378:	2304      	movs	r3, #4
 800437a:	199b      	adds	r3, r3, r6
 800437c:	2208      	movs	r2, #8
 800437e:	4694      	mov	ip, r2
 8004380:	44bc      	add	ip, r7
 8004382:	4463      	add	r3, ip
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	b299      	uxth	r1, r3
 8004388:	1dbb      	adds	r3, r7, #6
 800438a:	1dba      	adds	r2, r7, #6
 800438c:	8812      	ldrh	r2, [r2, #0]
 800438e:	188a      	adds	r2, r1, r2
 8004390:	801a      	strh	r2, [r3, #0]
        str++;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	603b      	str	r3, [r7, #0]
    while(*str) {
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d193      	bne.n	80042c8 <ST7735_WriteString+0x2c>
 80043a0:	e000      	b.n	80043a4 <ST7735_WriteString+0x108>
                break;
 80043a2:	46c0      	nop			; (mov r8, r8)
    }

    ST7735_Unselect();
 80043a4:	f7ff fcbc 	bl	8003d20 <ST7735_Unselect>
}
 80043a8:	46c0      	nop			; (mov r8, r8)
 80043aa:	46bd      	mov	sp, r7
 80043ac:	b003      	add	sp, #12
 80043ae:	bcf0      	pop	{r4, r5, r6, r7}
 80043b0:	bc08      	pop	{r3}
 80043b2:	b002      	add	sp, #8
 80043b4:	4718      	bx	r3
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	2000006c 	.word	0x2000006c
 80043bc:	2000006e 	.word	0x2000006e

080043c0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80043c0:	b5b0      	push	{r4, r5, r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	0005      	movs	r5, r0
 80043c8:	000c      	movs	r4, r1
 80043ca:	0010      	movs	r0, r2
 80043cc:	0019      	movs	r1, r3
 80043ce:	1dbb      	adds	r3, r7, #6
 80043d0:	1c2a      	adds	r2, r5, #0
 80043d2:	801a      	strh	r2, [r3, #0]
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	1c22      	adds	r2, r4, #0
 80043d8:	801a      	strh	r2, [r3, #0]
 80043da:	1cbb      	adds	r3, r7, #2
 80043dc:	1c02      	adds	r2, r0, #0
 80043de:	801a      	strh	r2, [r3, #0]
 80043e0:	003b      	movs	r3, r7
 80043e2:	1c0a      	adds	r2, r1, #0
 80043e4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 80043e6:	1dbb      	adds	r3, r7, #6
 80043e8:	881b      	ldrh	r3, [r3, #0]
 80043ea:	4a49      	ldr	r2, [pc, #292]	; (8004510 <ST7735_FillRectangle+0x150>)
 80043ec:	2100      	movs	r1, #0
 80043ee:	5e52      	ldrsh	r2, [r2, r1]
 80043f0:	4293      	cmp	r3, r2
 80043f2:	db00      	blt.n	80043f6 <ST7735_FillRectangle+0x36>
 80043f4:	e087      	b.n	8004506 <ST7735_FillRectangle+0x146>
 80043f6:	1d3b      	adds	r3, r7, #4
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	4a46      	ldr	r2, [pc, #280]	; (8004514 <ST7735_FillRectangle+0x154>)
 80043fc:	2100      	movs	r1, #0
 80043fe:	5e52      	ldrsh	r2, [r2, r1]
 8004400:	4293      	cmp	r3, r2
 8004402:	db00      	blt.n	8004406 <ST7735_FillRectangle+0x46>
 8004404:	e07f      	b.n	8004506 <ST7735_FillRectangle+0x146>
    if((x + w - 1) >= _width) w = _width - x;
 8004406:	1dbb      	adds	r3, r7, #6
 8004408:	881a      	ldrh	r2, [r3, #0]
 800440a:	1cbb      	adds	r3, r7, #2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	18d3      	adds	r3, r2, r3
 8004410:	4a3f      	ldr	r2, [pc, #252]	; (8004510 <ST7735_FillRectangle+0x150>)
 8004412:	2100      	movs	r1, #0
 8004414:	5e52      	ldrsh	r2, [r2, r1]
 8004416:	4293      	cmp	r3, r2
 8004418:	dd08      	ble.n	800442c <ST7735_FillRectangle+0x6c>
 800441a:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <ST7735_FillRectangle+0x150>)
 800441c:	2200      	movs	r2, #0
 800441e:	5e9b      	ldrsh	r3, [r3, r2]
 8004420:	b299      	uxth	r1, r3
 8004422:	1cbb      	adds	r3, r7, #2
 8004424:	1dba      	adds	r2, r7, #6
 8004426:	8812      	ldrh	r2, [r2, #0]
 8004428:	1a8a      	subs	r2, r1, r2
 800442a:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	881a      	ldrh	r2, [r3, #0]
 8004430:	003b      	movs	r3, r7
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	18d3      	adds	r3, r2, r3
 8004436:	4a37      	ldr	r2, [pc, #220]	; (8004514 <ST7735_FillRectangle+0x154>)
 8004438:	2100      	movs	r1, #0
 800443a:	5e52      	ldrsh	r2, [r2, r1]
 800443c:	4293      	cmp	r3, r2
 800443e:	dd08      	ble.n	8004452 <ST7735_FillRectangle+0x92>
 8004440:	4b34      	ldr	r3, [pc, #208]	; (8004514 <ST7735_FillRectangle+0x154>)
 8004442:	2200      	movs	r2, #0
 8004444:	5e9b      	ldrsh	r3, [r3, r2]
 8004446:	b299      	uxth	r1, r3
 8004448:	003b      	movs	r3, r7
 800444a:	1d3a      	adds	r2, r7, #4
 800444c:	8812      	ldrh	r2, [r2, #0]
 800444e:	1a8a      	subs	r2, r1, r2
 8004450:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8004452:	f7ff fc57 	bl	8003d04 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004456:	1dbb      	adds	r3, r7, #6
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	b2d8      	uxtb	r0, r3
 800445c:	1d3b      	adds	r3, r7, #4
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	b2d9      	uxtb	r1, r3
 8004462:	1dbb      	adds	r3, r7, #6
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b2da      	uxtb	r2, r3
 8004468:	1cbb      	adds	r3, r7, #2
 800446a:	881b      	ldrh	r3, [r3, #0]
 800446c:	b2db      	uxtb	r3, r3
 800446e:	18d3      	adds	r3, r2, r3
 8004470:	b2db      	uxtb	r3, r3
 8004472:	3b01      	subs	r3, #1
 8004474:	b2dc      	uxtb	r4, r3
 8004476:	1d3b      	adds	r3, r7, #4
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	003b      	movs	r3, r7
 800447e:	881b      	ldrh	r3, [r3, #0]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	18d3      	adds	r3, r2, r3
 8004484:	b2db      	uxtb	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b2db      	uxtb	r3, r3
 800448a:	0022      	movs	r2, r4
 800448c:	f7ff fd08 	bl	8003ea0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8004490:	2120      	movs	r1, #32
 8004492:	187b      	adds	r3, r7, r1
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	b29b      	uxth	r3, r3
 800449a:	b2da      	uxtb	r2, r3
 800449c:	200c      	movs	r0, #12
 800449e:	183b      	adds	r3, r7, r0
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	187b      	adds	r3, r7, r1
 80044a4:	881b      	ldrh	r3, [r3, #0]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	183b      	adds	r3, r7, r0
 80044aa:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 80044ac:	4b1a      	ldr	r3, [pc, #104]	; (8004518 <ST7735_FillRectangle+0x158>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	2102      	movs	r1, #2
 80044b2:	0018      	movs	r0, r3
 80044b4:	f003 fa71 	bl	800799a <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	003a      	movs	r2, r7
 80044bc:	8812      	ldrh	r2, [r2, #0]
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	e01a      	b.n	80044f8 <ST7735_FillRectangle+0x138>
        for(x = w; x > 0; x--) {
 80044c2:	1dbb      	adds	r3, r7, #6
 80044c4:	1cba      	adds	r2, r7, #2
 80044c6:	8812      	ldrh	r2, [r2, #0]
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	e00c      	b.n	80044e6 <ST7735_FillRectangle+0x126>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80044cc:	2301      	movs	r3, #1
 80044ce:	425b      	negs	r3, r3
 80044d0:	220c      	movs	r2, #12
 80044d2:	18b9      	adds	r1, r7, r2
 80044d4:	4811      	ldr	r0, [pc, #68]	; (800451c <ST7735_FillRectangle+0x15c>)
 80044d6:	2202      	movs	r2, #2
 80044d8:	f003 ff78 	bl	80083cc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80044dc:	1dbb      	adds	r3, r7, #6
 80044de:	881a      	ldrh	r2, [r3, #0]
 80044e0:	1dbb      	adds	r3, r7, #6
 80044e2:	3a01      	subs	r2, #1
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	1dbb      	adds	r3, r7, #6
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1ee      	bne.n	80044cc <ST7735_FillRectangle+0x10c>
    for(y = h; y > 0; y--) {
 80044ee:	1d3b      	adds	r3, r7, #4
 80044f0:	881a      	ldrh	r2, [r3, #0]
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	3a01      	subs	r2, #1
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	1d3b      	adds	r3, r7, #4
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e0      	bne.n	80044c2 <ST7735_FillRectangle+0x102>
        }
    }

    ST7735_Unselect();
 8004500:	f7ff fc0e 	bl	8003d20 <ST7735_Unselect>
 8004504:	e000      	b.n	8004508 <ST7735_FillRectangle+0x148>
    if((x >= _width) || (y >= _height)) return;
 8004506:	46c0      	nop			; (mov r8, r8)
}
 8004508:	46bd      	mov	sp, r7
 800450a:	b004      	add	sp, #16
 800450c:	bdb0      	pop	{r4, r5, r7, pc}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	2000006c 	.word	0x2000006c
 8004514:	2000006e 	.word	0x2000006e
 8004518:	48000400 	.word	0x48000400
 800451c:	200000dc 	.word	0x200000dc

08004520 <createButton>:
#include "GFX_FUNCTIONS.h"
#include "graphicElements.h"


ELEMENT createButton(uint8_t btnX, uint8_t btnY, const char *text, uint16_t bgdColour, uint16_t bgdColour2, void (*btnAction)(), uint16_t arg)
{
 8004520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004522:	b095      	sub	sp, #84	; 0x54
 8004524:	af04      	add	r7, sp, #16
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	0008      	movs	r0, r1
 800452a:	0011      	movs	r1, r2
 800452c:	607b      	str	r3, [r7, #4]
 800452e:	240b      	movs	r4, #11
 8004530:	193b      	adds	r3, r7, r4
 8004532:	1c02      	adds	r2, r0, #0
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	200a      	movs	r0, #10
 8004538:	183b      	adds	r3, r7, r0
 800453a:	1c0a      	adds	r2, r1, #0
 800453c:	701a      	strb	r2, [r3, #0]
	 *  |  TEXT	 |
	 *  |________|
	 *
	 */

	uint8_t textLen = 0;
 800453e:	233f      	movs	r3, #63	; 0x3f
 8004540:	18fb      	adds	r3, r7, r3
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
	uint16_t dimW = 1;
 8004546:	233c      	movs	r3, #60	; 0x3c
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	2201      	movs	r2, #1
 800454c:	801a      	strh	r2, [r3, #0]
	uint8_t dimH = 1;
 800454e:	233b      	movs	r3, #59	; 0x3b
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]

	ELEMENT btnElement;

	btnElement.elemtentType = BUTTON;
 8004556:	2114      	movs	r1, #20
 8004558:	187b      	adds	r3, r7, r1
 800455a:	2201      	movs	r2, #1
 800455c:	701a      	strb	r2, [r3, #0]
	btnElement.btn.btnX = btnX;
 800455e:	187b      	adds	r3, r7, r1
 8004560:	193a      	adds	r2, r7, r4
 8004562:	7812      	ldrb	r2, [r2, #0]
 8004564:	711a      	strb	r2, [r3, #4]
	btnElement.btn.btnY = btnY;
 8004566:	187b      	adds	r3, r7, r1
 8004568:	183a      	adds	r2, r7, r0
 800456a:	7812      	ldrb	r2, [r2, #0]
 800456c:	715a      	strb	r2, [r3, #5]
	btnElement.btn.btnText = text;
 800456e:	187b      	adds	r3, r7, r1
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	60da      	str	r2, [r3, #12]
	btnElement.btn.btnColour = bgdColour;
 8004574:	187a      	adds	r2, r7, r1
 8004576:	2350      	movs	r3, #80	; 0x50
 8004578:	2008      	movs	r0, #8
 800457a:	181b      	adds	r3, r3, r0
 800457c:	19db      	adds	r3, r3, r7
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	80d3      	strh	r3, [r2, #6]
	btnElement.btn.btnColour2 = bgdColour2;
 8004582:	187b      	adds	r3, r7, r1
 8004584:	2254      	movs	r2, #84	; 0x54
 8004586:	1812      	adds	r2, r2, r0
 8004588:	19d2      	adds	r2, r2, r7
 800458a:	8812      	ldrh	r2, [r2, #0]
 800458c:	811a      	strh	r2, [r3, #8]

	btnElement.btn.btnAction = btnAction; //buttonChangeColour;
 800458e:	187b      	adds	r3, r7, r1
 8004590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004592:	611a      	str	r2, [r3, #16]
	btnElement.btn.btnArg = arg;
 8004594:	187b      	adds	r3, r7, r1
 8004596:	225c      	movs	r2, #92	; 0x5c
 8004598:	1812      	adds	r2, r2, r0
 800459a:	19d2      	adds	r2, r2, r7
 800459c:	8812      	ldrh	r2, [r2, #0]
 800459e:	829a      	strh	r2, [r3, #20]

	while(text[textLen] != 0)
 80045a0:	e005      	b.n	80045ae <createButton+0x8e>
		textLen++;
 80045a2:	213f      	movs	r1, #63	; 0x3f
 80045a4:	187b      	adds	r3, r7, r1
 80045a6:	781a      	ldrb	r2, [r3, #0]
 80045a8:	187b      	adds	r3, r7, r1
 80045aa:	3201      	adds	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
	while(text[textLen] != 0)
 80045ae:	213f      	movs	r1, #63	; 0x3f
 80045b0:	187b      	adds	r3, r7, r1
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	18d3      	adds	r3, r2, r3
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f1      	bne.n	80045a2 <createButton+0x82>


	dimW = ( textLen * 7 ) + 5;
 80045be:	187b      	adds	r3, r7, r1
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	1c1a      	adds	r2, r3, #0
 80045c6:	00d2      	lsls	r2, r2, #3
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	243c      	movs	r4, #60	; 0x3c
 80045ce:	193b      	adds	r3, r7, r4
 80045d0:	3205      	adds	r2, #5
 80045d2:	801a      	strh	r2, [r3, #0]
	dimH = ( 10  + 5 );
 80045d4:	253b      	movs	r5, #59	; 0x3b
 80045d6:	197b      	adds	r3, r7, r5
 80045d8:	220f      	movs	r2, #15
 80045da:	701a      	strb	r2, [r3, #0]

	fillRoundRect(btnX, btnY, dimW, dimH, 2, bgdColour);
 80045dc:	260b      	movs	r6, #11
 80045de:	19bb      	adds	r3, r7, r6
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	b218      	sxth	r0, r3
 80045e4:	230a      	movs	r3, #10
 80045e6:	18fb      	adds	r3, r7, r3
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	b219      	sxth	r1, r3
 80045ec:	193b      	adds	r3, r7, r4
 80045ee:	2400      	movs	r4, #0
 80045f0:	5f1a      	ldrsh	r2, [r3, r4]
 80045f2:	197b      	adds	r3, r7, r5
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	b21c      	sxth	r4, r3
 80045f8:	2550      	movs	r5, #80	; 0x50
 80045fa:	2308      	movs	r3, #8
 80045fc:	18ed      	adds	r5, r5, r3
 80045fe:	19eb      	adds	r3, r5, r7
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	9301      	str	r3, [sp, #4]
 8004604:	2302      	movs	r3, #2
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	0023      	movs	r3, r4
 800460a:	f7ff f875 	bl	80036f8 <fillRoundRect>
	ST7735_WriteString(btnX+3, btnY+3, text, Font_7x10, WHITE, bgdColour);
 800460e:	19bb      	adds	r3, r7, r6
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	3303      	adds	r3, #3
 8004616:	b298      	uxth	r0, r3
 8004618:	230a      	movs	r3, #10
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	b29b      	uxth	r3, r3
 8004620:	3303      	adds	r3, #3
 8004622:	b29c      	uxth	r4, r3
 8004624:	4b0f      	ldr	r3, [pc, #60]	; (8004664 <createButton+0x144>)
 8004626:	687d      	ldr	r5, [r7, #4]
 8004628:	2250      	movs	r2, #80	; 0x50
 800462a:	2108      	movs	r1, #8
 800462c:	1852      	adds	r2, r2, r1
 800462e:	19d2      	adds	r2, r2, r7
 8004630:	8812      	ldrh	r2, [r2, #0]
 8004632:	9202      	str	r2, [sp, #8]
 8004634:	4a0c      	ldr	r2, [pc, #48]	; (8004668 <createButton+0x148>)
 8004636:	9201      	str	r2, [sp, #4]
 8004638:	466a      	mov	r2, sp
 800463a:	6859      	ldr	r1, [r3, #4]
 800463c:	6011      	str	r1, [r2, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	002a      	movs	r2, r5
 8004642:	0021      	movs	r1, r4
 8004644:	f7ff fe2a 	bl	800429c <ST7735_WriteString>

    return btnElement;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2214      	movs	r2, #20
 800464c:	18ba      	adds	r2, r7, r2
 800464e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004650:	c313      	stmia	r3!, {r0, r1, r4}
 8004652:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004654:	c313      	stmia	r3!, {r0, r1, r4}
 8004656:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004658:	c313      	stmia	r3!, {r0, r1, r4}

}
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	46bd      	mov	sp, r7
 800465e:	b011      	add	sp, #68	; 0x44
 8004660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	20000000 	.word	0x20000000
 8004668:	0000ffff 	.word	0x0000ffff

0800466c <createEditNumBox>:


ELEMENT createEditNumBox(uint8_t textX, uint8_t textY, const char *text, uint16_t bgdTextColor, uint8_t num, uint16_t bgdNumcolor)
{
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	b093      	sub	sp, #76	; 0x4c
 8004670:	af04      	add	r7, sp, #16
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	0008      	movs	r0, r1
 8004676:	0011      	movs	r1, r2
 8004678:	607b      	str	r3, [r7, #4]
 800467a:	240b      	movs	r4, #11
 800467c:	193b      	adds	r3, r7, r4
 800467e:	1c02      	adds	r2, r0, #0
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	250a      	movs	r5, #10
 8004684:	197b      	adds	r3, r7, r5
 8004686:	1c0a      	adds	r2, r1, #0
 8004688:	701a      	strb	r2, [r3, #0]

	ELEMENT nBoxElement;

	char numToChar[2];

	nBoxElement.elemtentType = EDITNUMBOX;
 800468a:	2014      	movs	r0, #20
 800468c:	183b      	adds	r3, r7, r0
 800468e:	2202      	movs	r2, #2
 8004690:	701a      	strb	r2, [r3, #0]
	nBoxElement.nBox.textX = textX;
 8004692:	183b      	adds	r3, r7, r0
 8004694:	193a      	adds	r2, r7, r4
 8004696:	7812      	ldrb	r2, [r2, #0]
 8004698:	761a      	strb	r2, [r3, #24]
	nBoxElement.nBox.textY = textY;
 800469a:	183b      	adds	r3, r7, r0
 800469c:	197a      	adds	r2, r7, r5
 800469e:	7812      	ldrb	r2, [r2, #0]
 80046a0:	765a      	strb	r2, [r3, #25]
	nBoxElement.nBox.textColour = bgdTextColor;
 80046a2:	183a      	adds	r2, r7, r0
 80046a4:	2348      	movs	r3, #72	; 0x48
 80046a6:	2608      	movs	r6, #8
 80046a8:	199b      	adds	r3, r3, r6
 80046aa:	19db      	adds	r3, r3, r7
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	8353      	strh	r3, [r2, #26]
	nBoxElement.nBox.boxText = text;
 80046b0:	183b      	adds	r3, r7, r0
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	61da      	str	r2, [r3, #28]
	nBoxElement.nBox.boxNum = num;
 80046b6:	183b      	adds	r3, r7, r0
 80046b8:	244c      	movs	r4, #76	; 0x4c
 80046ba:	19a2      	adds	r2, r4, r6
 80046bc:	19d2      	adds	r2, r2, r7
 80046be:	2120      	movs	r1, #32
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	545a      	strb	r2, [r3, r1]
	nBoxElement.nBox.boxColor = bgdNumcolor;
 80046c4:	2350      	movs	r3, #80	; 0x50
 80046c6:	199b      	adds	r3, r3, r6
 80046c8:	19db      	adds	r3, r3, r7
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	b2d9      	uxtb	r1, r3
 80046ce:	183b      	adds	r3, r7, r0
 80046d0:	2221      	movs	r2, #33	; 0x21
 80046d2:	5499      	strb	r1, [r3, r2]


	if(num > 9)
 80046d4:	19a3      	adds	r3, r4, r6
 80046d6:	19db      	adds	r3, r3, r7
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b09      	cmp	r3, #9
 80046dc:	d927      	bls.n	800472e <createEditNumBox+0xc2>
	{
		numToChar[0] = ( num / 10 ) + 0x30;
 80046de:	19a3      	adds	r3, r4, r6
 80046e0:	19db      	adds	r3, r3, r7
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	210a      	movs	r1, #10
 80046e6:	0018      	movs	r0, r3
 80046e8:	f7fb fd0c 	bl	8000104 <__udivsi3>
 80046ec:	0003      	movs	r3, r0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	3330      	adds	r3, #48	; 0x30
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	2510      	movs	r5, #16
 80046f6:	197b      	adds	r3, r7, r5
 80046f8:	701a      	strb	r2, [r3, #0]
		numToChar[1] = ( num - ( (num / 10) * 10 ) ) + 0x30;
 80046fa:	19a3      	adds	r3, r4, r6
 80046fc:	19db      	adds	r3, r3, r7
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	210a      	movs	r1, #10
 8004702:	0018      	movs	r0, r3
 8004704:	f7fb fcfe 	bl	8000104 <__udivsi3>
 8004708:	0003      	movs	r3, r0
 800470a:	b2db      	uxtb	r3, r3
 800470c:	1c1a      	adds	r2, r3, #0
 800470e:	0152      	lsls	r2, r2, #5
 8004710:	1ad2      	subs	r2, r2, r3
 8004712:	0092      	lsls	r2, r2, #2
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	18db      	adds	r3, r3, r3
 8004718:	b2da      	uxtb	r2, r3
 800471a:	19a3      	adds	r3, r4, r6
 800471c:	19db      	adds	r3, r3, r7
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	18d3      	adds	r3, r2, r3
 8004722:	b2db      	uxtb	r3, r3
 8004724:	3330      	adds	r3, #48	; 0x30
 8004726:	b2da      	uxtb	r2, r3
 8004728:	197b      	adds	r3, r7, r5
 800472a:	705a      	strb	r2, [r3, #1]
 800472c:	e00c      	b.n	8004748 <createEditNumBox+0xdc>
	}
	else
	{

		numToChar[0] = '0';
 800472e:	2110      	movs	r1, #16
 8004730:	187b      	adds	r3, r7, r1
 8004732:	2230      	movs	r2, #48	; 0x30
 8004734:	701a      	strb	r2, [r3, #0]
		numToChar[1] = num + 0x30;
 8004736:	234c      	movs	r3, #76	; 0x4c
 8004738:	2208      	movs	r2, #8
 800473a:	189b      	adds	r3, r3, r2
 800473c:	19db      	adds	r3, r3, r7
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	3330      	adds	r3, #48	; 0x30
 8004742:	b2da      	uxtb	r2, r3
 8004744:	187b      	adds	r3, r7, r1
 8004746:	705a      	strb	r2, [r3, #1]

	}

	numToChar[2] = 0;
 8004748:	2310      	movs	r3, #16
 800474a:	18fb      	adds	r3, r7, r3
 800474c:	2200      	movs	r2, #0
 800474e:	709a      	strb	r2, [r3, #2]

	ST7735_WriteString(textX, textY, text, Font_11x18, WHITE, bgdTextColor);
 8004750:	260b      	movs	r6, #11
 8004752:	19bb      	adds	r3, r7, r6
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	b298      	uxth	r0, r3
 8004758:	230a      	movs	r3, #10
 800475a:	18fb      	adds	r3, r7, r3
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	b29c      	uxth	r4, r3
 8004760:	4b28      	ldr	r3, [pc, #160]	; (8004804 <createEditNumBox+0x198>)
 8004762:	687d      	ldr	r5, [r7, #4]
 8004764:	2148      	movs	r1, #72	; 0x48
 8004766:	2208      	movs	r2, #8
 8004768:	188a      	adds	r2, r1, r2
 800476a:	19d2      	adds	r2, r2, r7
 800476c:	8812      	ldrh	r2, [r2, #0]
 800476e:	9202      	str	r2, [sp, #8]
 8004770:	4a25      	ldr	r2, [pc, #148]	; (8004808 <createEditNumBox+0x19c>)
 8004772:	9201      	str	r2, [sp, #4]
 8004774:	466a      	mov	r2, sp
 8004776:	6859      	ldr	r1, [r3, #4]
 8004778:	6011      	str	r1, [r2, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	002a      	movs	r2, r5
 800477e:	0021      	movs	r1, r4
 8004780:	f7ff fd8c 	bl	800429c <ST7735_WriteString>
    ST7735_WriteString(textX+32, textY+22, numToChar, Font_11x18, WHITE, bgdNumcolor);
 8004784:	19bb      	adds	r3, r7, r6
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	3320      	adds	r3, #32
 800478c:	b298      	uxth	r0, r3
 800478e:	230a      	movs	r3, #10
 8004790:	18fb      	adds	r3, r7, r3
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	3316      	adds	r3, #22
 8004798:	b29c      	uxth	r4, r3
 800479a:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <createEditNumBox+0x198>)
 800479c:	2210      	movs	r2, #16
 800479e:	18bd      	adds	r5, r7, r2
 80047a0:	2250      	movs	r2, #80	; 0x50
 80047a2:	2108      	movs	r1, #8
 80047a4:	1852      	adds	r2, r2, r1
 80047a6:	19d2      	adds	r2, r2, r7
 80047a8:	8812      	ldrh	r2, [r2, #0]
 80047aa:	9202      	str	r2, [sp, #8]
 80047ac:	4a16      	ldr	r2, [pc, #88]	; (8004808 <createEditNumBox+0x19c>)
 80047ae:	9201      	str	r2, [sp, #4]
 80047b0:	466a      	mov	r2, sp
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	6011      	str	r1, [r2, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	002a      	movs	r2, r5
 80047ba:	0021      	movs	r1, r4
 80047bc:	f7ff fd6e 	bl	800429c <ST7735_WriteString>
    drawRoundRect(textX+27, textY+20, 30, 20, 2, WHITE);
 80047c0:	19bb      	adds	r3, r7, r6
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	331b      	adds	r3, #27
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	b218      	sxth	r0, r3
 80047cc:	230a      	movs	r3, #10
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	3314      	adds	r3, #20
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	b219      	sxth	r1, r3
 80047da:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <createEditNumBox+0x19c>)
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	2302      	movs	r3, #2
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2314      	movs	r3, #20
 80047e4:	221e      	movs	r2, #30
 80047e6:	f7fe fe45 	bl	8003474 <drawRoundRect>

    return nBoxElement;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2214      	movs	r2, #20
 80047ee:	18ba      	adds	r2, r7, r2
 80047f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047f2:	c313      	stmia	r3!, {r0, r1, r4}
 80047f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047f6:	c313      	stmia	r3!, {r0, r1, r4}
 80047f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80047fa:	c313      	stmia	r3!, {r0, r1, r4}

}
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	46bd      	mov	sp, r7
 8004800:	b00f      	add	sp, #60	; 0x3c
 8004802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004804:	20000008 	.word	0x20000008
 8004808:	0000ffff 	.word	0x0000ffff

0800480c <modifyNumBox>:


void modifyNumBox(NBOX nBox)
{
 800480c:	b5b0      	push	{r4, r5, r7, lr}
 800480e:	b08a      	sub	sp, #40	; 0x28
 8004810:	af04      	add	r7, sp, #16
 8004812:	1d3b      	adds	r3, r7, #4
 8004814:	6018      	str	r0, [r3, #0]
 8004816:	6059      	str	r1, [r3, #4]
 8004818:	609a      	str	r2, [r3, #8]

	char numToChar[3] = {0};
 800481a:	2514      	movs	r5, #20
 800481c:	197b      	adds	r3, r7, r5
 800481e:	4a40      	ldr	r2, [pc, #256]	; (8004920 <modifyNumBox+0x114>)
 8004820:	8812      	ldrh	r2, [r2, #0]
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	2202      	movs	r2, #2
 8004826:	2100      	movs	r1, #0
 8004828:	5499      	strb	r1, [r3, r2]


	if(nBox.boxNum > 9)
 800482a:	1d3b      	adds	r3, r7, #4
 800482c:	7a1b      	ldrb	r3, [r3, #8]
 800482e:	2b09      	cmp	r3, #9
 8004830:	d923      	bls.n	800487a <modifyNumBox+0x6e>
	{
		numToChar[0] = ( nBox.boxNum / 10 ) + 0x30;
 8004832:	1d3b      	adds	r3, r7, #4
 8004834:	7a1b      	ldrb	r3, [r3, #8]
 8004836:	210a      	movs	r1, #10
 8004838:	0018      	movs	r0, r3
 800483a:	f7fb fc63 	bl	8000104 <__udivsi3>
 800483e:	0003      	movs	r3, r0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	3330      	adds	r3, #48	; 0x30
 8004844:	b2da      	uxtb	r2, r3
 8004846:	197b      	adds	r3, r7, r5
 8004848:	701a      	strb	r2, [r3, #0]
		numToChar[1] = ( nBox.boxNum - ( (nBox.boxNum / 10) * 10 ) ) + 0x30;
 800484a:	1d3b      	adds	r3, r7, #4
 800484c:	7a1c      	ldrb	r4, [r3, #8]
 800484e:	1d3b      	adds	r3, r7, #4
 8004850:	7a1b      	ldrb	r3, [r3, #8]
 8004852:	210a      	movs	r1, #10
 8004854:	0018      	movs	r0, r3
 8004856:	f7fb fc55 	bl	8000104 <__udivsi3>
 800485a:	0003      	movs	r3, r0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	1c1a      	adds	r2, r3, #0
 8004860:	0152      	lsls	r2, r2, #5
 8004862:	1ad2      	subs	r2, r2, r3
 8004864:	0092      	lsls	r2, r2, #2
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	18db      	adds	r3, r3, r3
 800486a:	b2db      	uxtb	r3, r3
 800486c:	18e3      	adds	r3, r4, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	3330      	adds	r3, #48	; 0x30
 8004872:	b2da      	uxtb	r2, r3
 8004874:	197b      	adds	r3, r7, r5
 8004876:	705a      	strb	r2, [r3, #1]
 8004878:	e009      	b.n	800488e <modifyNumBox+0x82>
	}
	else
	{

		numToChar[0] = '0';
 800487a:	2114      	movs	r1, #20
 800487c:	187b      	adds	r3, r7, r1
 800487e:	2230      	movs	r2, #48	; 0x30
 8004880:	701a      	strb	r2, [r3, #0]
		numToChar[1] = nBox.boxNum + 0x30;;
 8004882:	1d3b      	adds	r3, r7, #4
 8004884:	7a1b      	ldrb	r3, [r3, #8]
 8004886:	3330      	adds	r3, #48	; 0x30
 8004888:	b2da      	uxtb	r2, r3
 800488a:	187b      	adds	r3, r7, r1
 800488c:	705a      	strb	r2, [r3, #1]

	}

	ST7735_WriteString(nBox.textX, nBox.textY, nBox.boxText, Font_11x18, WHITE, nBox.textColour);
 800488e:	1d3b      	adds	r3, r7, #4
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	b298      	uxth	r0, r3
 8004894:	1d3b      	adds	r3, r7, #4
 8004896:	785b      	ldrb	r3, [r3, #1]
 8004898:	b29c      	uxth	r4, r3
 800489a:	1d3b      	adds	r3, r7, #4
 800489c:	685d      	ldr	r5, [r3, #4]
 800489e:	1d3b      	adds	r3, r7, #4
 80048a0:	885a      	ldrh	r2, [r3, #2]
 80048a2:	4b20      	ldr	r3, [pc, #128]	; (8004924 <modifyNumBox+0x118>)
 80048a4:	9202      	str	r2, [sp, #8]
 80048a6:	4a20      	ldr	r2, [pc, #128]	; (8004928 <modifyNumBox+0x11c>)
 80048a8:	9201      	str	r2, [sp, #4]
 80048aa:	466a      	mov	r2, sp
 80048ac:	6859      	ldr	r1, [r3, #4]
 80048ae:	6011      	str	r1, [r2, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	002a      	movs	r2, r5
 80048b4:	0021      	movs	r1, r4
 80048b6:	f7ff fcf1 	bl	800429c <ST7735_WriteString>
	ST7735_WriteString(nBox.textX+32, nBox.textY+22, numToChar, Font_11x18, WHITE, nBox.boxColor);
 80048ba:	1d3b      	adds	r3, r7, #4
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3320      	adds	r3, #32
 80048c2:	b298      	uxth	r0, r3
 80048c4:	1d3b      	adds	r3, r7, #4
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3316      	adds	r3, #22
 80048cc:	b29c      	uxth	r4, r3
 80048ce:	1d3b      	adds	r3, r7, #4
 80048d0:	7a5b      	ldrb	r3, [r3, #9]
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	4b13      	ldr	r3, [pc, #76]	; (8004924 <modifyNumBox+0x118>)
 80048d6:	2114      	movs	r1, #20
 80048d8:	187d      	adds	r5, r7, r1
 80048da:	9202      	str	r2, [sp, #8]
 80048dc:	4a12      	ldr	r2, [pc, #72]	; (8004928 <modifyNumBox+0x11c>)
 80048de:	9201      	str	r2, [sp, #4]
 80048e0:	466a      	mov	r2, sp
 80048e2:	6859      	ldr	r1, [r3, #4]
 80048e4:	6011      	str	r1, [r2, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	002a      	movs	r2, r5
 80048ea:	0021      	movs	r1, r4
 80048ec:	f7ff fcd6 	bl	800429c <ST7735_WriteString>
	drawRoundRect(nBox.textX+27, nBox.textY+20, 30, 20, 2, WHITE);
 80048f0:	1d3b      	adds	r3, r7, #4
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	331b      	adds	r3, #27
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	b218      	sxth	r0, r3
 80048fc:	1d3b      	adds	r3, r7, #4
 80048fe:	785b      	ldrb	r3, [r3, #1]
 8004900:	b29b      	uxth	r3, r3
 8004902:	3314      	adds	r3, #20
 8004904:	b29b      	uxth	r3, r3
 8004906:	b219      	sxth	r1, r3
 8004908:	4b07      	ldr	r3, [pc, #28]	; (8004928 <modifyNumBox+0x11c>)
 800490a:	9301      	str	r3, [sp, #4]
 800490c:	2302      	movs	r3, #2
 800490e:	9300      	str	r3, [sp, #0]
 8004910:	2314      	movs	r3, #20
 8004912:	221e      	movs	r2, #30
 8004914:	f7fe fdae 	bl	8003474 <drawRoundRect>

}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b006      	add	sp, #24
 800491e:	bdb0      	pop	{r4, r5, r7, pc}
 8004920:	080089e8 	.word	0x080089e8
 8004924:	20000008 	.word	0x20000008
 8004928:	0000ffff 	.word	0x0000ffff

0800492c <buttonChangeColour>:


void buttonChangeColour(BTN *btn)
{
 800492c:	b5b0      	push	{r4, r5, r7, lr}
 800492e:	b088      	sub	sp, #32
 8004930:	af04      	add	r7, sp, #16
 8004932:	6078      	str	r0, [r7, #4]


	uint16_t dimW;
	uint8_t dimH;

	uint8_t textLen = 0;
 8004934:	230f      	movs	r3, #15
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	2200      	movs	r2, #0
 800493a:	701a      	strb	r2, [r3, #0]
	while(btn->btnText[textLen] != 0)
 800493c:	e005      	b.n	800494a <buttonChangeColour+0x1e>
		textLen++;
 800493e:	210f      	movs	r1, #15
 8004940:	187b      	adds	r3, r7, r1
 8004942:	781a      	ldrb	r2, [r3, #0]
 8004944:	187b      	adds	r3, r7, r1
 8004946:	3201      	adds	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
	while(btn->btnText[textLen] != 0)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	210f      	movs	r1, #15
 8004950:	187b      	adds	r3, r7, r1
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	18d3      	adds	r3, r2, r3
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1f0      	bne.n	800493e <buttonChangeColour+0x12>

	dimW = ( textLen * 7 ) + 5;
 800495c:	187b      	adds	r3, r7, r1
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	b29b      	uxth	r3, r3
 8004962:	1c1a      	adds	r2, r3, #0
 8004964:	00d2      	lsls	r2, r2, #3
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	b29a      	uxth	r2, r3
 800496a:	240c      	movs	r4, #12
 800496c:	193b      	adds	r3, r7, r4
 800496e:	3205      	adds	r2, #5
 8004970:	801a      	strh	r2, [r3, #0]
	dimH = ( 10  + 5 );
 8004972:	250b      	movs	r5, #11
 8004974:	197b      	adds	r3, r7, r5
 8004976:	220f      	movs	r2, #15
 8004978:	701a      	strb	r2, [r3, #0]

	fillRoundRect(btn->btnX, btn->btnY, dimW, dimH, 2, btn->btnColour2);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b218      	sxth	r0, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	785b      	ldrb	r3, [r3, #1]
 8004984:	b219      	sxth	r1, r3
 8004986:	193b      	adds	r3, r7, r4
 8004988:	2200      	movs	r2, #0
 800498a:	5e9a      	ldrsh	r2, [r3, r2]
 800498c:	197b      	adds	r3, r7, r5
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b21c      	sxth	r4, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	889b      	ldrh	r3, [r3, #4]
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	2302      	movs	r3, #2
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	0023      	movs	r3, r4
 800499e:	f7fe feab 	bl	80036f8 <fillRoundRect>
	ST7735_WriteString(btn->btnX+3, btn->btnY+3, btn->btnText, Font_7x10, WHITE, btn->btnColour2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3303      	adds	r3, #3
 80049aa:	b298      	uxth	r0, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	785b      	ldrb	r3, [r3, #1]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	3303      	adds	r3, #3
 80049b4:	b29c      	uxth	r4, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689d      	ldr	r5, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	889a      	ldrh	r2, [r3, #4]
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <buttonChangeColour+0xcc>)
 80049c0:	9202      	str	r2, [sp, #8]
 80049c2:	4a0e      	ldr	r2, [pc, #56]	; (80049fc <buttonChangeColour+0xd0>)
 80049c4:	9201      	str	r2, [sp, #4]
 80049c6:	466a      	mov	r2, sp
 80049c8:	6859      	ldr	r1, [r3, #4]
 80049ca:	6011      	str	r1, [r2, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	002a      	movs	r2, r5
 80049d0:	0021      	movs	r1, r4
 80049d2:	f7ff fc63 	bl	800429c <ST7735_WriteString>

	uint16_t tmp = btn->btnColour;
 80049d6:	2108      	movs	r1, #8
 80049d8:	187b      	adds	r3, r7, r1
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	8852      	ldrh	r2, [r2, #2]
 80049de:	801a      	strh	r2, [r3, #0]
	btn->btnColour = btn->btnColour2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	889a      	ldrh	r2, [r3, #4]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	805a      	strh	r2, [r3, #2]
	btn->btnColour2 = tmp;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	187a      	adds	r2, r7, r1
 80049ec:	8812      	ldrh	r2, [r2, #0]
 80049ee:	809a      	strh	r2, [r3, #4]

}
 80049f0:	46c0      	nop			; (mov r8, r8)
 80049f2:	46bd      	mov	sp, r7
 80049f4:	b004      	add	sp, #16
 80049f6:	bdb0      	pop	{r4, r5, r7, pc}
 80049f8:	20000000 	.word	0x20000000
 80049fc:	0000ffff 	.word	0x0000ffff

08004a00 <targetElement>:
 *	@ Function; targetElement
 * 	@ Description; creates an arrow near the element
 *  @ Par1; ELEMENT
 */
void targetElement(ELEMENT element)
{
 8004a00:	b084      	sub	sp, #16
 8004a02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a04:	b087      	sub	sp, #28
 8004a06:	af04      	add	r7, sp, #16
 8004a08:	2420      	movs	r4, #32
 8004a0a:	193c      	adds	r4, r7, r4
 8004a0c:	6020      	str	r0, [r4, #0]
 8004a0e:	6061      	str	r1, [r4, #4]
 8004a10:	60a2      	str	r2, [r4, #8]
 8004a12:	60e3      	str	r3, [r4, #12]
	uint8_t arrowPosX;
	uint8_t arrowPosY;
	uint8_t arrowCenter;


	if(previousArrow.elemtentType == BUTTON)
 8004a14:	4b74      	ldr	r3, [pc, #464]	; (8004be8 <targetElement+0x1e8>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d130      	bne.n	8004a7e <targetElement+0x7e>
	{

		// Clear previous position
		arrowPosX = previousArrow.btn.btnX-11;
 8004a1c:	4b72      	ldr	r3, [pc, #456]	; (8004be8 <targetElement+0x1e8>)
 8004a1e:	791a      	ldrb	r2, [r3, #4]
 8004a20:	1dfb      	adds	r3, r7, #7
 8004a22:	3a0b      	subs	r2, #11
 8004a24:	701a      	strb	r2, [r3, #0]
		arrowPosY = previousArrow.btn.btnY;
 8004a26:	1dbb      	adds	r3, r7, #6
 8004a28:	4a6f      	ldr	r2, [pc, #444]	; (8004be8 <targetElement+0x1e8>)
 8004a2a:	7952      	ldrb	r2, [r2, #5]
 8004a2c:	701a      	strb	r2, [r3, #0]
		arrowCenter = (arrowPosY + 7);
 8004a2e:	1d7b      	adds	r3, r7, #5
 8004a30:	1dba      	adds	r2, r7, #6
 8004a32:	7812      	ldrb	r2, [r2, #0]
 8004a34:	3207      	adds	r2, #7
 8004a36:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, background);
 8004a38:	1dfb      	adds	r3, r7, #7
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	b218      	sxth	r0, r3
 8004a3e:	1dbb      	adds	r3, r7, #6
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	b21c      	sxth	r4, r3
 8004a44:	1dfb      	adds	r3, r7, #7
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	330a      	adds	r3, #10
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	b21d      	sxth	r5, r3
 8004a50:	1d7b      	adds	r3, r7, #5
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	b21e      	sxth	r6, r3
 8004a56:	1dfb      	adds	r3, r7, #7
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	b21b      	sxth	r3, r3
 8004a5c:	1dba      	adds	r2, r7, #6
 8004a5e:	7812      	ldrb	r2, [r2, #0]
 8004a60:	b292      	uxth	r2, r2
 8004a62:	320e      	adds	r2, #14
 8004a64:	b292      	uxth	r2, r2
 8004a66:	b212      	sxth	r2, r2
 8004a68:	4960      	ldr	r1, [pc, #384]	; (8004bec <targetElement+0x1ec>)
 8004a6a:	8809      	ldrh	r1, [r1, #0]
 8004a6c:	9102      	str	r1, [sp, #8]
 8004a6e:	9201      	str	r2, [sp, #4]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	0033      	movs	r3, r6
 8004a74:	002a      	movs	r2, r5
 8004a76:	0021      	movs	r1, r4
 8004a78:	f7fe fef6 	bl	8003868 <fillTriangle>
 8004a7c:	e033      	b.n	8004ae6 <targetElement+0xe6>

	}
	else if(previousArrow.elemtentType == EDITNUMBOX)
 8004a7e:	4b5a      	ldr	r3, [pc, #360]	; (8004be8 <targetElement+0x1e8>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d12f      	bne.n	8004ae6 <targetElement+0xe6>
	{

		// Clear previous position
		arrowPosX = previousArrow.nBox.textX-11;
 8004a86:	4b58      	ldr	r3, [pc, #352]	; (8004be8 <targetElement+0x1e8>)
 8004a88:	7e1a      	ldrb	r2, [r3, #24]
 8004a8a:	1dfb      	adds	r3, r7, #7
 8004a8c:	3a0b      	subs	r2, #11
 8004a8e:	701a      	strb	r2, [r3, #0]
		arrowPosY = previousArrow.nBox.textY;
 8004a90:	1dbb      	adds	r3, r7, #6
 8004a92:	4a55      	ldr	r2, [pc, #340]	; (8004be8 <targetElement+0x1e8>)
 8004a94:	7e52      	ldrb	r2, [r2, #25]
 8004a96:	701a      	strb	r2, [r3, #0]
		arrowCenter = (arrowPosY + 7);
 8004a98:	1d7b      	adds	r3, r7, #5
 8004a9a:	1dba      	adds	r2, r7, #6
 8004a9c:	7812      	ldrb	r2, [r2, #0]
 8004a9e:	3207      	adds	r2, #7
 8004aa0:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, background);
 8004aa2:	1dfb      	adds	r3, r7, #7
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	b218      	sxth	r0, r3
 8004aa8:	1dbb      	adds	r3, r7, #6
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	b21c      	sxth	r4, r3
 8004aae:	1dfb      	adds	r3, r7, #7
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	330a      	adds	r3, #10
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	b21d      	sxth	r5, r3
 8004aba:	1d7b      	adds	r3, r7, #5
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b21e      	sxth	r6, r3
 8004ac0:	1dfb      	adds	r3, r7, #7
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	b21b      	sxth	r3, r3
 8004ac6:	1dba      	adds	r2, r7, #6
 8004ac8:	7812      	ldrb	r2, [r2, #0]
 8004aca:	b292      	uxth	r2, r2
 8004acc:	320e      	adds	r2, #14
 8004ace:	b292      	uxth	r2, r2
 8004ad0:	b212      	sxth	r2, r2
 8004ad2:	4946      	ldr	r1, [pc, #280]	; (8004bec <targetElement+0x1ec>)
 8004ad4:	8809      	ldrh	r1, [r1, #0]
 8004ad6:	9102      	str	r1, [sp, #8]
 8004ad8:	9201      	str	r2, [sp, #4]
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	0033      	movs	r3, r6
 8004ade:	002a      	movs	r2, r5
 8004ae0:	0021      	movs	r1, r4
 8004ae2:	f7fe fec1 	bl	8003868 <fillTriangle>

	}

	if(element.elemtentType == BUTTON)
 8004ae6:	2120      	movs	r1, #32
 8004ae8:	187b      	adds	r3, r7, r1
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d137      	bne.n	8004b60 <targetElement+0x160>
	{

		arrowPosX = element.btn.btnX-11;
 8004af0:	187b      	adds	r3, r7, r1
 8004af2:	791a      	ldrb	r2, [r3, #4]
 8004af4:	1dfb      	adds	r3, r7, #7
 8004af6:	3a0b      	subs	r2, #11
 8004af8:	701a      	strb	r2, [r3, #0]
		arrowPosY = element.btn.btnY;
 8004afa:	1dba      	adds	r2, r7, #6
 8004afc:	187b      	adds	r3, r7, r1
 8004afe:	795b      	ldrb	r3, [r3, #5]
 8004b00:	7013      	strb	r3, [r2, #0]
		arrowCenter = (arrowPosY + 7);
 8004b02:	1d7b      	adds	r3, r7, #5
 8004b04:	1dba      	adds	r2, r7, #6
 8004b06:	7812      	ldrb	r2, [r2, #0]
 8004b08:	3207      	adds	r2, #7
 8004b0a:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, WHITE);
 8004b0c:	1dfb      	adds	r3, r7, #7
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	b218      	sxth	r0, r3
 8004b12:	1dbb      	adds	r3, r7, #6
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	b219      	sxth	r1, r3
 8004b18:	1dfb      	adds	r3, r7, #7
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	330a      	adds	r3, #10
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	b21c      	sxth	r4, r3
 8004b24:	1d7b      	adds	r3, r7, #5
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b21d      	sxth	r5, r3
 8004b2a:	1dfb      	adds	r3, r7, #7
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	b21b      	sxth	r3, r3
 8004b30:	1dba      	adds	r2, r7, #6
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	b292      	uxth	r2, r2
 8004b36:	320e      	adds	r2, #14
 8004b38:	b292      	uxth	r2, r2
 8004b3a:	b212      	sxth	r2, r2
 8004b3c:	4e2c      	ldr	r6, [pc, #176]	; (8004bf0 <targetElement+0x1f0>)
 8004b3e:	9602      	str	r6, [sp, #8]
 8004b40:	9201      	str	r2, [sp, #4]
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	002b      	movs	r3, r5
 8004b46:	0022      	movs	r2, r4
 8004b48:	f7fe fe8e 	bl	8003868 <fillTriangle>

		previousArrow = element;
 8004b4c:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <targetElement+0x1e8>)
 8004b4e:	2120      	movs	r1, #32
 8004b50:	187a      	adds	r2, r7, r1
 8004b52:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b54:	c313      	stmia	r3!, {r0, r1, r4}
 8004b56:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b58:	c313      	stmia	r3!, {r0, r1, r4}
 8004b5a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b5c:	c313      	stmia	r3!, {r0, r1, r4}

		previousArrow = element;

	}

}
 8004b5e:	e03b      	b.n	8004bd8 <targetElement+0x1d8>
	else if(element.elemtentType == EDITNUMBOX)
 8004b60:	2120      	movs	r1, #32
 8004b62:	187b      	adds	r3, r7, r1
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d136      	bne.n	8004bd8 <targetElement+0x1d8>
		arrowPosX = element.nBox.textX-11;
 8004b6a:	187b      	adds	r3, r7, r1
 8004b6c:	7e1a      	ldrb	r2, [r3, #24]
 8004b6e:	1dfb      	adds	r3, r7, #7
 8004b70:	3a0b      	subs	r2, #11
 8004b72:	701a      	strb	r2, [r3, #0]
		arrowPosY = element.nBox.textY;
 8004b74:	1dba      	adds	r2, r7, #6
 8004b76:	187b      	adds	r3, r7, r1
 8004b78:	7e5b      	ldrb	r3, [r3, #25]
 8004b7a:	7013      	strb	r3, [r2, #0]
		arrowCenter = (arrowPosY + 7);
 8004b7c:	1d7b      	adds	r3, r7, #5
 8004b7e:	1dba      	adds	r2, r7, #6
 8004b80:	7812      	ldrb	r2, [r2, #0]
 8004b82:	3207      	adds	r2, #7
 8004b84:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, WHITE);
 8004b86:	1dfb      	adds	r3, r7, #7
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	b218      	sxth	r0, r3
 8004b8c:	1dbb      	adds	r3, r7, #6
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b219      	sxth	r1, r3
 8004b92:	1dfb      	adds	r3, r7, #7
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	330a      	adds	r3, #10
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	b21c      	sxth	r4, r3
 8004b9e:	1d7b      	adds	r3, r7, #5
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	b21d      	sxth	r5, r3
 8004ba4:	1dfb      	adds	r3, r7, #7
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	1dba      	adds	r2, r7, #6
 8004bac:	7812      	ldrb	r2, [r2, #0]
 8004bae:	b292      	uxth	r2, r2
 8004bb0:	320e      	adds	r2, #14
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	b212      	sxth	r2, r2
 8004bb6:	4e0e      	ldr	r6, [pc, #56]	; (8004bf0 <targetElement+0x1f0>)
 8004bb8:	9602      	str	r6, [sp, #8]
 8004bba:	9201      	str	r2, [sp, #4]
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	002b      	movs	r3, r5
 8004bc0:	0022      	movs	r2, r4
 8004bc2:	f7fe fe51 	bl	8003868 <fillTriangle>
		previousArrow = element;
 8004bc6:	4b08      	ldr	r3, [pc, #32]	; (8004be8 <targetElement+0x1e8>)
 8004bc8:	2120      	movs	r1, #32
 8004bca:	187a      	adds	r2, r7, r1
 8004bcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bce:	c313      	stmia	r3!, {r0, r1, r4}
 8004bd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bd2:	c313      	stmia	r3!, {r0, r1, r4}
 8004bd4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004bd6:	c313      	stmia	r3!, {r0, r1, r4}
}
 8004bd8:	46c0      	nop			; (mov r8, r8)
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	b003      	add	sp, #12
 8004bde:	bcf0      	pop	{r4, r5, r6, r7}
 8004be0:	bc08      	pop	{r3}
 8004be2:	b004      	add	sp, #16
 8004be4:	4718      	bx	r3
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	20000078 	.word	0x20000078
 8004bec:	20000228 	.word	0x20000228
 8004bf0:	0000ffff 	.word	0x0000ffff

08004bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004bf8:	f001 fee0 	bl	80069bc <HAL_Init>

  /* USER CODE BEGIN Init */
  ee_init();
 8004bfc:	f001 fcca 	bl	8006594 <ee_init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c00:	f000 f81a 	bl	8004c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c04:	f000 f904 	bl	8004e10 <MX_GPIO_Init>
  MX_ADC_Init();
 8004c08:	f000 f868 	bl	8004cdc <MX_ADC_Init>
  MX_SPI1_Init();
 8004c0c:	f000 f8c2 	bl	8004d94 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc);
 8004c10:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <main+0x40>)
 8004c12:	0018      	movs	r0, r3
 8004c14:	f002 f8a4 	bl	8006d60 <HAL_ADC_Start>

  ST7735_Init(0);
 8004c18:	2000      	movs	r0, #0
 8004c1a:	f7ff f999 	bl	8003f50 <ST7735_Init>
  fillScreen(BLACK);
 8004c1e:	2000      	movs	r0, #0
 8004c20:	f7ff f854 	bl	8003ccc <fillScreen>
  HAL_Delay(500);
 8004c24:	23fa      	movs	r3, #250	; 0xfa
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	0018      	movs	r0, r3
 8004c2a:	f001 ff35 	bl	8006a98 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	pHMeter_process();
 8004c2e:	f000 f98d 	bl	8004f4c <pHMeter_process>
 8004c32:	e7fc      	b.n	8004c2e <main+0x3a>
 8004c34:	2000009c 	.word	0x2000009c

08004c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b091      	sub	sp, #68	; 0x44
 8004c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c3e:	2410      	movs	r4, #16
 8004c40:	193b      	adds	r3, r7, r4
 8004c42:	0018      	movs	r0, r3
 8004c44:	2330      	movs	r3, #48	; 0x30
 8004c46:	001a      	movs	r2, r3
 8004c48:	2100      	movs	r1, #0
 8004c4a:	f003 fe95 	bl	8008978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c4e:	003b      	movs	r3, r7
 8004c50:	0018      	movs	r0, r3
 8004c52:	2310      	movs	r3, #16
 8004c54:	001a      	movs	r2, r3
 8004c56:	2100      	movs	r1, #0
 8004c58:	f003 fe8e 	bl	8008978 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004c5c:	0021      	movs	r1, r4
 8004c5e:	187b      	adds	r3, r7, r1
 8004c60:	2212      	movs	r2, #18
 8004c62:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c64:	187b      	adds	r3, r7, r1
 8004c66:	2201      	movs	r2, #1
 8004c68:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004c6a:	187b      	adds	r3, r7, r1
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c70:	187b      	adds	r3, r7, r1
 8004c72:	2210      	movs	r2, #16
 8004c74:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004c76:	187b      	adds	r3, r7, r1
 8004c78:	2210      	movs	r2, #16
 8004c7a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c7c:	187b      	adds	r3, r7, r1
 8004c7e:	2202      	movs	r2, #2
 8004c80:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004c82:	187b      	adds	r3, r7, r1
 8004c84:	2280      	movs	r2, #128	; 0x80
 8004c86:	0212      	lsls	r2, r2, #8
 8004c88:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8004c8a:	187b      	adds	r3, r7, r1
 8004c8c:	22c0      	movs	r2, #192	; 0xc0
 8004c8e:	0312      	lsls	r2, r2, #12
 8004c90:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004c92:	187b      	adds	r3, r7, r1
 8004c94:	2200      	movs	r2, #0
 8004c96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	f002 fe9a 	bl	80079d4 <HAL_RCC_OscConfig>
 8004ca0:	1e03      	subs	r3, r0, #0
 8004ca2:	d001      	beq.n	8004ca8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8004ca4:	f000 f94c 	bl	8004f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ca8:	003b      	movs	r3, r7
 8004caa:	2207      	movs	r2, #7
 8004cac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cae:	003b      	movs	r3, r7
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004cb4:	003b      	movs	r3, r7
 8004cb6:	2280      	movs	r2, #128	; 0x80
 8004cb8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004cba:	003b      	movs	r3, r7
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004cc0:	003b      	movs	r3, r7
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f003 f9a3 	bl	8008010 <HAL_RCC_ClockConfig>
 8004cca:	1e03      	subs	r3, r0, #0
 8004ccc:	d001      	beq.n	8004cd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004cce:	f000 f937 	bl	8004f40 <Error_Handler>
  }
}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b011      	add	sp, #68	; 0x44
 8004cd8:	bd90      	pop	{r4, r7, pc}
	...

08004cdc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	230c      	movs	r3, #12
 8004ce8:	001a      	movs	r2, r3
 8004cea:	2100      	movs	r1, #0
 8004cec:	f003 fe44 	bl	8008978 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004cf0:	4b26      	ldr	r3, [pc, #152]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004cf2:	4a27      	ldr	r2, [pc, #156]	; (8004d90 <MX_ADC_Init+0xb4>)
 8004cf4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004cf6:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004cfc:	4b23      	ldr	r3, [pc, #140]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d02:	4b22      	ldr	r3, [pc, #136]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004d08:	4b20      	ldr	r3, [pc, #128]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004d0e:	4b1f      	ldr	r3, [pc, #124]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d10:	2204      	movs	r2, #4
 8004d12:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004d14:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004d20:	4b1a      	ldr	r3, [pc, #104]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004d26:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004d2c:	4b17      	ldr	r3, [pc, #92]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d2e:	22c2      	movs	r2, #194	; 0xc2
 8004d30:	32ff      	adds	r2, #255	; 0xff
 8004d32:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004d34:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004d3a:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d3c:	2224      	movs	r2, #36	; 0x24
 8004d3e:	2100      	movs	r1, #0
 8004d40:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004d48:	4b10      	ldr	r3, [pc, #64]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f001 fec8 	bl	8006ae0 <HAL_ADC_Init>
 8004d50:	1e03      	subs	r3, r0, #0
 8004d52:	d001      	beq.n	8004d58 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8004d54:	f000 f8f4 	bl	8004f40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004d58:	1d3b      	adds	r3, r7, #4
 8004d5a:	2208      	movs	r2, #8
 8004d5c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004d5e:	1d3b      	adds	r3, r7, #4
 8004d60:	2280      	movs	r2, #128	; 0x80
 8004d62:	0152      	lsls	r2, r2, #5
 8004d64:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004d66:	1d3b      	adds	r3, r7, #4
 8004d68:	2280      	movs	r2, #128	; 0x80
 8004d6a:	0552      	lsls	r2, r2, #21
 8004d6c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004d6e:	1d3a      	adds	r2, r7, #4
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <MX_ADC_Init+0xb0>)
 8004d72:	0011      	movs	r1, r2
 8004d74:	0018      	movs	r0, r3
 8004d76:	f002 f853 	bl	8006e20 <HAL_ADC_ConfigChannel>
 8004d7a:	1e03      	subs	r3, r0, #0
 8004d7c:	d001      	beq.n	8004d82 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8004d7e:	f000 f8df 	bl	8004f40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004d82:	46c0      	nop			; (mov r8, r8)
 8004d84:	46bd      	mov	sp, r7
 8004d86:	b004      	add	sp, #16
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	2000009c 	.word	0x2000009c
 8004d90:	40012400 	.word	0x40012400

08004d94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004d98:	4b1b      	ldr	r3, [pc, #108]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <MX_SPI1_Init+0x78>)
 8004d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004d9e:	4b1a      	ldr	r3, [pc, #104]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004da0:	2282      	movs	r2, #130	; 0x82
 8004da2:	0052      	lsls	r2, r2, #1
 8004da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004da6:	4b18      	ldr	r3, [pc, #96]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004dac:	4b16      	ldr	r3, [pc, #88]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004dae:	22e0      	movs	r2, #224	; 0xe0
 8004db0:	00d2      	lsls	r2, r2, #3
 8004db2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004db4:	4b14      	ldr	r3, [pc, #80]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004dba:	4b13      	ldr	r3, [pc, #76]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004dc0:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004dc2:	2280      	movs	r2, #128	; 0x80
 8004dc4:	0092      	lsls	r2, r2, #2
 8004dc6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004dc8:	4b0f      	ldr	r3, [pc, #60]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004dca:	2208      	movs	r2, #8
 8004dcc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004dce:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004de0:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004de2:	2207      	movs	r2, #7
 8004de4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004de6:	4b08      	ldr	r3, [pc, #32]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004dee:	2208      	movs	r2, #8
 8004df0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004df2:	4b05      	ldr	r3, [pc, #20]	; (8004e08 <MX_SPI1_Init+0x74>)
 8004df4:	0018      	movs	r0, r3
 8004df6:	f003 fa31 	bl	800825c <HAL_SPI_Init>
 8004dfa:	1e03      	subs	r3, r0, #0
 8004dfc:	d001      	beq.n	8004e02 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004dfe:	f000 f89f 	bl	8004f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	200000dc 	.word	0x200000dc
 8004e0c:	40013000 	.word	0x40013000

08004e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e10:	b590      	push	{r4, r7, lr}
 8004e12:	b08b      	sub	sp, #44	; 0x2c
 8004e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e16:	2414      	movs	r4, #20
 8004e18:	193b      	adds	r3, r7, r4
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	2314      	movs	r3, #20
 8004e1e:	001a      	movs	r2, r3
 8004e20:	2100      	movs	r1, #0
 8004e22:	f003 fda9 	bl	8008978 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e26:	4b43      	ldr	r3, [pc, #268]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e28:	695a      	ldr	r2, [r3, #20]
 8004e2a:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e2c:	2180      	movs	r1, #128	; 0x80
 8004e2e:	0309      	lsls	r1, r1, #12
 8004e30:	430a      	orrs	r2, r1
 8004e32:	615a      	str	r2, [r3, #20]
 8004e34:	4b3f      	ldr	r3, [pc, #252]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e36:	695a      	ldr	r2, [r3, #20]
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	031b      	lsls	r3, r3, #12
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e42:	4b3c      	ldr	r3, [pc, #240]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	4b3b      	ldr	r3, [pc, #236]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e48:	2180      	movs	r1, #128	; 0x80
 8004e4a:	03c9      	lsls	r1, r1, #15
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	615a      	str	r2, [r3, #20]
 8004e50:	4b38      	ldr	r3, [pc, #224]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e52:	695a      	ldr	r2, [r3, #20]
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	03db      	lsls	r3, r3, #15
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e5e:	4b35      	ldr	r3, [pc, #212]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e60:	695a      	ldr	r2, [r3, #20]
 8004e62:	4b34      	ldr	r3, [pc, #208]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e64:	2180      	movs	r1, #128	; 0x80
 8004e66:	0289      	lsls	r1, r1, #10
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	615a      	str	r2, [r3, #20]
 8004e6c:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e6e:	695a      	ldr	r2, [r3, #20]
 8004e70:	2380      	movs	r3, #128	; 0x80
 8004e72:	029b      	lsls	r3, r3, #10
 8004e74:	4013      	ands	r3, r2
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e7a:	4b2e      	ldr	r3, [pc, #184]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	02c9      	lsls	r1, r1, #11
 8004e84:	430a      	orrs	r2, r1
 8004e86:	615a      	str	r2, [r3, #20]
 8004e88:	4b2a      	ldr	r3, [pc, #168]	; (8004f34 <MX_GPIO_Init+0x124>)
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	2380      	movs	r3, #128	; 0x80
 8004e8e:	02db      	lsls	r3, r3, #11
 8004e90:	4013      	ands	r3, r2
 8004e92:	607b      	str	r3, [r7, #4]
 8004e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_AD_Pin|ST7735_RESET_Pin|ST7735_CS_Pin, GPIO_PIN_RESET);
 8004e96:	4928      	ldr	r1, [pc, #160]	; (8004f38 <MX_GPIO_Init+0x128>)
 8004e98:	4b28      	ldr	r3, [pc, #160]	; (8004f3c <MX_GPIO_Init+0x12c>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	f002 fd7c 	bl	800799a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UP_Pin DOWN_Pin SEL_Pin */
  GPIO_InitStruct.Pin = SEL_Pin;
 8004ea2:	193b      	adds	r3, r7, r4
 8004ea4:	2280      	movs	r2, #128	; 0x80
 8004ea6:	0152      	lsls	r2, r2, #5
 8004ea8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004eaa:	193b      	adds	r3, r7, r4
 8004eac:	2200      	movs	r2, #0
 8004eae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eb0:	193b      	adds	r3, r7, r4
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb6:	193a      	adds	r2, r7, r4
 8004eb8:	2390      	movs	r3, #144	; 0x90
 8004eba:	05db      	lsls	r3, r3, #23
 8004ebc:	0011      	movs	r1, r2
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	f002 fbde 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8004ec4:	193b      	adds	r3, r7, r4
 8004ec6:	22c0      	movs	r2, #192	; 0xc0
 8004ec8:	0112      	lsls	r2, r2, #4
 8004eca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ecc:	193b      	adds	r3, r7, r4
 8004ece:	2200      	movs	r2, #0
 8004ed0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ed2:	193b      	adds	r3, r7, r4
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed8:	193a      	adds	r2, r7, r4
 8004eda:	2390      	movs	r3, #144	; 0x90
 8004edc:	05db      	lsls	r3, r3, #23
 8004ede:	0011      	movs	r1, r2
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	f002 fbcd 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_AD_Pin ST7735_RESET_Pin ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_AD_Pin|ST7735_RESET_Pin|ST7735_CS_Pin;
 8004ee6:	193b      	adds	r3, r7, r4
 8004ee8:	4a13      	ldr	r2, [pc, #76]	; (8004f38 <MX_GPIO_Init+0x128>)
 8004eea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eec:	193b      	adds	r3, r7, r4
 8004eee:	2201      	movs	r2, #1
 8004ef0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef2:	193b      	adds	r3, r7, r4
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef8:	193b      	adds	r3, r7, r4
 8004efa:	2200      	movs	r2, #0
 8004efc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	4a0e      	ldr	r2, [pc, #56]	; (8004f3c <MX_GPIO_Init+0x12c>)
 8004f02:	0019      	movs	r1, r3
 8004f04:	0010      	movs	r0, r2
 8004f06:	f002 fbbb 	bl	8007680 <HAL_GPIO_Init>

  /*Configure GPIO pin : OPAMP_CALIB_Pin */
  GPIO_InitStruct.Pin = OPAMP_CALIB_Pin;
 8004f0a:	0021      	movs	r1, r4
 8004f0c:	187b      	adds	r3, r7, r1
 8004f0e:	2280      	movs	r2, #128	; 0x80
 8004f10:	0152      	lsls	r2, r2, #5
 8004f12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f14:	187b      	adds	r3, r7, r1
 8004f16:	2200      	movs	r2, #0
 8004f18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f1a:	187b      	adds	r3, r7, r1
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OPAMP_CALIB_GPIO_Port, &GPIO_InitStruct);
 8004f20:	187b      	adds	r3, r7, r1
 8004f22:	4a06      	ldr	r2, [pc, #24]	; (8004f3c <MX_GPIO_Init+0x12c>)
 8004f24:	0019      	movs	r1, r3
 8004f26:	0010      	movs	r0, r2
 8004f28:	f002 fbaa 	bl	8007680 <HAL_GPIO_Init>

}
 8004f2c:	46c0      	nop			; (mov r8, r8)
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	b00b      	add	sp, #44	; 0x2c
 8004f32:	bd90      	pop	{r4, r7, pc}
 8004f34:	40021000 	.word	0x40021000
 8004f38:	00000406 	.word	0x00000406
 8004f3c:	48000400 	.word	0x48000400

08004f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f44:	b672      	cpsid	i
}
 8004f46:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f48:	e7fe      	b.n	8004f48 <Error_Handler+0x8>
	...

08004f4c <pHMeter_process>:
/*
 *  @ Function; pHMeter_process()
 *  @ Description; handles the screen views
 */
void pHMeter_process(void)
{
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0

	uint8_t pageChanged = 0;
 8004f52:	1dfb      	adds	r3, r7, #7
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]

	if(first)
 8004f58:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <pHMeter_process+0x80>)
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <pHMeter_process+0x1c>
	{

		idlePage();
 8004f60:	f000 f8ee 	bl	8005140 <idlePage>

		// Read sw calibration parameters from virtual EEPROM
		readAppDataFromEE();
 8004f64:	f001 fb5e 	bl	8006624 <readAppDataFromEE>

	}

	// Get a new pH value
	pH_read();
 8004f68:	f000 f836 	bl	8004fd8 <pH_read>

    // New pH status evaluation
	pHStatus_update();
 8004f6c:	f000 fe88 	bl	8005c80 <pHStatus_update>

	// New process status evaluation
	pageChanged = processStatus_update();
 8004f70:	1dfc      	adds	r4, r7, #7
 8004f72:	f000 fe4b 	bl	8005c0c <processStatus_update>
 8004f76:	0003      	movs	r3, r0
 8004f78:	7023      	strb	r3, [r4, #0]

	switch(process_status)
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <pHMeter_process+0x84>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d007      	beq.n	8004f92 <pHMeter_process+0x46>
 8004f82:	2b08      	cmp	r3, #8
 8004f84:	d00b      	beq.n	8004f9e <pHMeter_process+0x52>
	{

		default:
		case MAIN_PROCESS:

			mainPage(pageChanged);
 8004f86:	1dfb      	adds	r3, r7, #7
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f000 f950 	bl	8005230 <mainPage>

			break;
 8004f90:	e00b      	b.n	8004faa <pHMeter_process+0x5e>

		case SW_PROCESS:

			softwareCalibPage(pageChanged);
 8004f92:	1dfb      	adds	r3, r7, #7
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f000 fafe 	bl	8005598 <softwareCalibPage>

			break;
 8004f9c:	e005      	b.n	8004faa <pHMeter_process+0x5e>

		case HW_PROCESS:

			circuitCalibPage(pageChanged);
 8004f9e:	1dfb      	adds	r3, r7, #7
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	0018      	movs	r0, r3
 8004fa4:	f000 f9fa 	bl	800539c <circuitCalibPage>

			break;
 8004fa8:	46c0      	nop			; (mov r8, r8)

	}


	if(first == 1)
 8004faa:	4b08      	ldr	r3, [pc, #32]	; (8004fcc <pHMeter_process+0x80>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d102      	bne.n	8004fb8 <pHMeter_process+0x6c>
		first = 0;
 8004fb2:	4b06      	ldr	r3, [pc, #24]	; (8004fcc <pHMeter_process+0x80>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	701a      	strb	r2, [r3, #0]

	joysticHandler(elements);
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <pHMeter_process+0x88>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	f000 fc67 	bl	8005890 <joysticHandler>

}
 8004fc2:	46c0      	nop			; (mov r8, r8)
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b003      	add	sp, #12
 8004fc8:	bd90      	pop	{r4, r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	20000018 	.word	0x20000018
 8004fd0:	20000020 	.word	0x20000020
 8004fd4:	20000144 	.word	0x20000144

08004fd8 <pH_read>:
 *  @ Function; pH_read()
 *  @ Description; read a new pH value from the probe
 *  @ every PH_PROCESS_DELAY seconds
 */
void pH_read(void)
{
 8004fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0

	uint32_t rawAdcData;
	float rawAdcmV;
	float pHValue = 0.0;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]

	static float buff[6] = {0};
	static uint32_t count = 0;

	if(getDelayMs(pHTimeStamp) < PH_PROCESS_DELAY)
 8004fe2:	4b4d      	ldr	r3, [pc, #308]	; (8005118 <pH_read+0x140>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f001 f9da 	bl	80063a0 <getDelayMs>
 8004fec:	0002      	movs	r2, r0
 8004fee:	23fa      	movs	r3, #250	; 0xfa
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d200      	bcs.n	8004ff8 <pH_read+0x20>
 8004ff6:	e08a      	b.n	800510e <pH_read+0x136>
		return;

	pHTimeStamp = getTimeMs();
 8004ff8:	f001 f9c6 	bl	8006388 <getTimeMs>
 8004ffc:	0002      	movs	r2, r0
 8004ffe:	4b46      	ldr	r3, [pc, #280]	; (8005118 <pH_read+0x140>)
 8005000:	601a      	str	r2, [r3, #0]

	rawAdcData = HAL_ADC_GetValue(&hadc);
 8005002:	4b46      	ldr	r3, [pc, #280]	; (800511c <pH_read+0x144>)
 8005004:	0018      	movs	r0, r3
 8005006:	f001 feff 	bl	8006e08 <HAL_ADC_GetValue>
 800500a:	0003      	movs	r3, r0
 800500c:	607b      	str	r3, [r7, #4]

	rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fd fc00 	bl	8002814 <__aeabi_ui2d>
 8005014:	4a42      	ldr	r2, [pc, #264]	; (8005120 <pH_read+0x148>)
 8005016:	4b43      	ldr	r3, [pc, #268]	; (8005124 <pH_read+0x14c>)
 8005018:	f7fc fd52 	bl	8001ac0 <__aeabi_dmul>
 800501c:	0002      	movs	r2, r0
 800501e:	000b      	movs	r3, r1
 8005020:	0010      	movs	r0, r2
 8005022:	0019      	movs	r1, r3
 8005024:	f7fd fc64 	bl	80028f0 <__aeabi_d2f>
 8005028:	1c03      	adds	r3, r0, #0
 800502a:	603b      	str	r3, [r7, #0]

	buff[count%6] = ( ( PH_V_SLOPE() * ( rawAdcmV - V_OFFSET() ) ) + PH_OFFSET() );
 800502c:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <pH_read+0x150>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b3d      	ldr	r3, [pc, #244]	; (8005128 <pH_read+0x150>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	1c19      	adds	r1, r3, #0
 8005036:	1c10      	adds	r0, r2, #0
 8005038:	f7fb ff40 	bl	8000ebc <__aeabi_fsub>
 800503c:	1c03      	adds	r3, r0, #0
 800503e:	1c1c      	adds	r4, r3, #0
 8005040:	4b3a      	ldr	r3, [pc, #232]	; (800512c <pH_read+0x154>)
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	4b39      	ldr	r3, [pc, #228]	; (800512c <pH_read+0x154>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	1c19      	adds	r1, r3, #0
 800504a:	1c10      	adds	r0, r2, #0
 800504c:	f7fb ff36 	bl	8000ebc <__aeabi_fsub>
 8005050:	1c03      	adds	r3, r0, #0
 8005052:	1c19      	adds	r1, r3, #0
 8005054:	1c20      	adds	r0, r4, #0
 8005056:	f7fb fc19 	bl	800088c <__aeabi_fdiv>
 800505a:	1c03      	adds	r3, r0, #0
 800505c:	1c1c      	adds	r4, r3, #0
 800505e:	4b33      	ldr	r3, [pc, #204]	; (800512c <pH_read+0x154>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	1c19      	adds	r1, r3, #0
 8005064:	6838      	ldr	r0, [r7, #0]
 8005066:	f7fb ff29 	bl	8000ebc <__aeabi_fsub>
 800506a:	1c03      	adds	r3, r0, #0
 800506c:	1c19      	adds	r1, r3, #0
 800506e:	1c20      	adds	r0, r4, #0
 8005070:	f7fb fdd6 	bl	8000c20 <__aeabi_fmul>
 8005074:	1c03      	adds	r3, r0, #0
 8005076:	1c1e      	adds	r6, r3, #0
 8005078:	4b2b      	ldr	r3, [pc, #172]	; (8005128 <pH_read+0x150>)
 800507a:	681c      	ldr	r4, [r3, #0]
 800507c:	4b2c      	ldr	r3, [pc, #176]	; (8005130 <pH_read+0x158>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2106      	movs	r1, #6
 8005082:	0018      	movs	r0, r3
 8005084:	f7fb f8c4 	bl	8000210 <__aeabi_uidivmod>
 8005088:	000b      	movs	r3, r1
 800508a:	001d      	movs	r5, r3
 800508c:	1c21      	adds	r1, r4, #0
 800508e:	1c30      	adds	r0, r6, #0
 8005090:	f7fb fa5c 	bl	800054c <__aeabi_fadd>
 8005094:	1c03      	adds	r3, r0, #0
 8005096:	1c19      	adds	r1, r3, #0
 8005098:	4b26      	ldr	r3, [pc, #152]	; (8005134 <pH_read+0x15c>)
 800509a:	00aa      	lsls	r2, r5, #2
 800509c:	50d1      	str	r1, [r2, r3]

	pHValue = buff[count%6];
 800509e:	4b24      	ldr	r3, [pc, #144]	; (8005130 <pH_read+0x158>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2106      	movs	r1, #6
 80050a4:	0018      	movs	r0, r3
 80050a6:	f7fb f8b3 	bl	8000210 <__aeabi_uidivmod>
 80050aa:	000b      	movs	r3, r1
 80050ac:	001a      	movs	r2, r3
 80050ae:	4b21      	ldr	r3, [pc, #132]	; (8005134 <pH_read+0x15c>)
 80050b0:	0092      	lsls	r2, r2, #2
 80050b2:	58d3      	ldr	r3, [r2, r3]
 80050b4:	60fb      	str	r3, [r7, #12]

	count++;
 80050b6:	4b1e      	ldr	r3, [pc, #120]	; (8005130 <pH_read+0x158>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	4b1c      	ldr	r3, [pc, #112]	; (8005130 <pH_read+0x158>)
 80050be:	601a      	str	r2, [r3, #0]

	if(count >= 6)
 80050c0:	4b1b      	ldr	r3, [pc, #108]	; (8005130 <pH_read+0x158>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b05      	cmp	r3, #5
 80050c6:	d91a      	bls.n	80050fe <pH_read+0x126>
	{

		pHValue = 0.0;
 80050c8:	2300      	movs	r3, #0
 80050ca:	60fb      	str	r3, [r7, #12]
		for(int i = 0 ; i < 6 ; i++)
 80050cc:	2300      	movs	r3, #0
 80050ce:	60bb      	str	r3, [r7, #8]
 80050d0:	e00c      	b.n	80050ec <pH_read+0x114>
			pHValue += buff[i];
 80050d2:	4b18      	ldr	r3, [pc, #96]	; (8005134 <pH_read+0x15c>)
 80050d4:	68ba      	ldr	r2, [r7, #8]
 80050d6:	0092      	lsls	r2, r2, #2
 80050d8:	58d3      	ldr	r3, [r2, r3]
 80050da:	1c19      	adds	r1, r3, #0
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f7fb fa35 	bl	800054c <__aeabi_fadd>
 80050e2:	1c03      	adds	r3, r0, #0
 80050e4:	60fb      	str	r3, [r7, #12]
		for(int i = 0 ; i < 6 ; i++)
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	3301      	adds	r3, #1
 80050ea:	60bb      	str	r3, [r7, #8]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	ddef      	ble.n	80050d2 <pH_read+0xfa>

		pHValue = ( pHValue / 6.0 );
 80050f2:	4911      	ldr	r1, [pc, #68]	; (8005138 <pH_read+0x160>)
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f7fb fbc9 	bl	800088c <__aeabi_fdiv>
 80050fa:	1c03      	adds	r3, r0, #0
 80050fc:	60fb      	str	r3, [r7, #12]

	}

	pH_current = pHValue;
 80050fe:	4b0f      	ldr	r3, [pc, #60]	; (800513c <pH_read+0x164>)
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start(&hadc);
 8005104:	4b05      	ldr	r3, [pc, #20]	; (800511c <pH_read+0x144>)
 8005106:	0018      	movs	r0, r3
 8005108:	f001 fe2a 	bl	8006d60 <HAL_ADC_Start>
 800510c:	e000      	b.n	8005110 <pH_read+0x138>
		return;
 800510e:	46c0      	nop			; (mov r8, r8)

}
 8005110:	46bd      	mov	sp, r7
 8005112:	b005      	add	sp, #20
 8005114:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005116:	46c0      	nop			; (mov r8, r8)
 8005118:	20000224 	.word	0x20000224
 800511c:	2000009c 	.word	0x2000009c
 8005120:	66666666 	.word	0x66666666
 8005124:	3f4a6666 	.word	0x3f4a6666
 8005128:	20000024 	.word	0x20000024
 800512c:	2000002c 	.word	0x2000002c
 8005130:	2000022c 	.word	0x2000022c
 8005134:	20000230 	.word	0x20000230
 8005138:	40c00000 	.word	0x40c00000
 800513c:	2000001c 	.word	0x2000001c

08005140 <idlePage>:
/*
 * 	@ Function: st7735_hallScreen
 * 	@ Description: Presentation screen
 */
void idlePage(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af04      	add	r7, sp, #16

	  ST7735_SetRotation(1);
 8005146:	2001      	movs	r0, #1
 8005148:	f7fe ff34 	bl	8003fb4 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "UnNatural presents", Font_7x10, WHITE,BLACK);
 800514c:	4b31      	ldr	r3, [pc, #196]	; (8005214 <idlePage+0xd4>)
 800514e:	4832      	ldr	r0, [pc, #200]	; (8005218 <idlePage+0xd8>)
 8005150:	2200      	movs	r2, #0
 8005152:	9202      	str	r2, [sp, #8]
 8005154:	4a31      	ldr	r2, [pc, #196]	; (800521c <idlePage+0xdc>)
 8005156:	9201      	str	r2, [sp, #4]
 8005158:	466a      	mov	r2, sp
 800515a:	6859      	ldr	r1, [r3, #4]
 800515c:	6011      	str	r1, [r2, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	0002      	movs	r2, r0
 8005162:	2100      	movs	r1, #0
 8005164:	2000      	movs	r0, #0
 8005166:	f7ff f899 	bl	800429c <ST7735_WriteString>
	  HAL_Delay(1000);
 800516a:	23fa      	movs	r3, #250	; 0xfa
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	0018      	movs	r0, r3
 8005170:	f001 fc92 	bl	8006a98 <HAL_Delay>
	  fillScreen(BLACK);
 8005174:	2000      	movs	r0, #0
 8005176:	f7fe fda9 	bl	8003ccc <fillScreen>

	  ST7735_SetRotation(1);
 800517a:	2001      	movs	r0, #1
 800517c:	f7fe ff1a 	bl	8003fb4 <ST7735_SetRotation>
	  ST7735_WriteString(20, 50, "pH-METER V0", Font_11x18, GREEN,BLACK);
 8005180:	4b27      	ldr	r3, [pc, #156]	; (8005220 <idlePage+0xe0>)
 8005182:	4828      	ldr	r0, [pc, #160]	; (8005224 <idlePage+0xe4>)
 8005184:	2200      	movs	r2, #0
 8005186:	9202      	str	r2, [sp, #8]
 8005188:	22fc      	movs	r2, #252	; 0xfc
 800518a:	00d2      	lsls	r2, r2, #3
 800518c:	9201      	str	r2, [sp, #4]
 800518e:	466a      	mov	r2, sp
 8005190:	6859      	ldr	r1, [r3, #4]
 8005192:	6011      	str	r1, [r2, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	0002      	movs	r2, r0
 8005198:	2132      	movs	r1, #50	; 0x32
 800519a:	2014      	movs	r0, #20
 800519c:	f7ff f87e 	bl	800429c <ST7735_WriteString>
	  HAL_Delay(1000);
 80051a0:	23fa      	movs	r3, #250	; 0xfa
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	0018      	movs	r0, r3
 80051a6:	f001 fc77 	bl	8006a98 <HAL_Delay>
	  fillScreen(BLACK);
 80051aa:	2000      	movs	r0, #0
 80051ac:	f7fe fd8e 	bl	8003ccc <fillScreen>

	  ST7735_SetRotation(1);
 80051b0:	2001      	movs	r0, #1
 80051b2:	f7fe feff 	bl	8003fb4 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "A product developed by", Font_7x10, WHITE,BLACK);
 80051b6:	4b17      	ldr	r3, [pc, #92]	; (8005214 <idlePage+0xd4>)
 80051b8:	481b      	ldr	r0, [pc, #108]	; (8005228 <idlePage+0xe8>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	9202      	str	r2, [sp, #8]
 80051be:	4a17      	ldr	r2, [pc, #92]	; (800521c <idlePage+0xdc>)
 80051c0:	9201      	str	r2, [sp, #4]
 80051c2:	466a      	mov	r2, sp
 80051c4:	6859      	ldr	r1, [r3, #4]
 80051c6:	6011      	str	r1, [r2, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	0002      	movs	r2, r0
 80051cc:	2100      	movs	r1, #0
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7ff f864 	bl	800429c <ST7735_WriteString>
	  HAL_Delay(1000);
 80051d4:	23fa      	movs	r3, #250	; 0xfa
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	0018      	movs	r0, r3
 80051da:	f001 fc5d 	bl	8006a98 <HAL_Delay>
	  ST7735_WriteString(20, 50, "Eng. Andrea", Font_11x18, GREEN,BLACK);
 80051de:	4b10      	ldr	r3, [pc, #64]	; (8005220 <idlePage+0xe0>)
 80051e0:	4812      	ldr	r0, [pc, #72]	; (800522c <idlePage+0xec>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	9202      	str	r2, [sp, #8]
 80051e6:	22fc      	movs	r2, #252	; 0xfc
 80051e8:	00d2      	lsls	r2, r2, #3
 80051ea:	9201      	str	r2, [sp, #4]
 80051ec:	466a      	mov	r2, sp
 80051ee:	6859      	ldr	r1, [r3, #4]
 80051f0:	6011      	str	r1, [r2, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	0002      	movs	r2, r0
 80051f6:	2132      	movs	r1, #50	; 0x32
 80051f8:	2014      	movs	r0, #20
 80051fa:	f7ff f84f 	bl	800429c <ST7735_WriteString>
	  HAL_Delay(1000);
 80051fe:	23fa      	movs	r3, #250	; 0xfa
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	0018      	movs	r0, r3
 8005204:	f001 fc48 	bl	8006a98 <HAL_Delay>
	  fillScreen(BLACK);
 8005208:	2000      	movs	r0, #0
 800520a:	f7fe fd5f 	bl	8003ccc <fillScreen>

}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000000 	.word	0x20000000
 8005218:	080089ec 	.word	0x080089ec
 800521c:	0000ffff 	.word	0x0000ffff
 8005220:	20000008 	.word	0x20000008
 8005224:	08008a00 	.word	0x08008a00
 8005228:	08008a0c 	.word	0x08008a0c
 800522c:	08008a24 	.word	0x08008a24

08005230 <mainPage>:
 *  @ Function; mainPage
 *  @ Description; This is the main page where the current
 *  @ value of pH is shown
 */
void mainPage(uint8_t updatePage)
{
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b089      	sub	sp, #36	; 0x24
 8005234:	af04      	add	r7, sp, #16
 8005236:	0002      	movs	r2, r0
 8005238:	1dfb      	adds	r3, r7, #7
 800523a:	701a      	strb	r2, [r3, #0]

	static PH_STATUS main_pH_status = IDLE;
	static uint16_t mainColor = GREEN;


	if( ( updatePage == 1 ) || ( pH_status != main_pH_status ) )
 800523c:	1dfb      	adds	r3, r7, #7
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d005      	beq.n	8005250 <mainPage+0x20>
 8005244:	4b49      	ldr	r3, [pc, #292]	; (800536c <mainPage+0x13c>)
 8005246:	781a      	ldrb	r2, [r3, #0]
 8005248:	4b49      	ldr	r3, [pc, #292]	; (8005370 <mainPage+0x140>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d05f      	beq.n	8005310 <mainPage+0xe0>
	{

		switch(pH_status)
 8005250:	4b46      	ldr	r3, [pc, #280]	; (800536c <mainPage+0x13c>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b05      	cmp	r3, #5
 8005256:	d01a      	beq.n	800528e <mainPage+0x5e>
 8005258:	dc06      	bgt.n	8005268 <mainPage+0x38>
 800525a:	2b04      	cmp	r3, #4
 800525c:	d028      	beq.n	80052b0 <mainPage+0x80>
 800525e:	dc03      	bgt.n	8005268 <mainPage+0x38>
 8005260:	2b01      	cmp	r3, #1
 8005262:	d046      	beq.n	80052f2 <mainPage+0xc2>
 8005264:	2b02      	cmp	r3, #2
 8005266:	d035      	beq.n	80052d4 <mainPage+0xa4>
		{

			default:
			case NEUTRAL:

				main_pH_status = NEUTRAL;
 8005268:	4b41      	ldr	r3, [pc, #260]	; (8005370 <mainPage+0x140>)
 800526a:	2203      	movs	r2, #3
 800526c:	701a      	strb	r2, [r3, #0]

				background = GREEN;
 800526e:	4b41      	ldr	r3, [pc, #260]	; (8005374 <mainPage+0x144>)
 8005270:	22fc      	movs	r2, #252	; 0xfc
 8005272:	00d2      	lsls	r2, r2, #3
 8005274:	801a      	strh	r2, [r3, #0]

				fillScreen(GREEN);
 8005276:	23fc      	movs	r3, #252	; 0xfc
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	0018      	movs	r0, r3
 800527c:	f7fe fd26 	bl	8003ccc <fillScreen>
				mainPage_graphics();
 8005280:	f000 fd54 	bl	8005d2c <mainPage_graphics>

				mainColor = GREEN;
 8005284:	4b3c      	ldr	r3, [pc, #240]	; (8005378 <mainPage+0x148>)
 8005286:	22fc      	movs	r2, #252	; 0xfc
 8005288:	00d2      	lsls	r2, r2, #3
 800528a:	801a      	strh	r2, [r3, #0]

				break;
 800528c:	e040      	b.n	8005310 <mainPage+0xe0>

			case STRONG_ACID:

				main_pH_status = STRONG_ACID;
 800528e:	4b38      	ldr	r3, [pc, #224]	; (8005370 <mainPage+0x140>)
 8005290:	2205      	movs	r2, #5
 8005292:	701a      	strb	r2, [r3, #0]

				background = RED;
 8005294:	4b37      	ldr	r3, [pc, #220]	; (8005374 <mainPage+0x144>)
 8005296:	4a39      	ldr	r2, [pc, #228]	; (800537c <mainPage+0x14c>)
 8005298:	801a      	strh	r2, [r3, #0]

				fillScreen(RED);
 800529a:	23f8      	movs	r3, #248	; 0xf8
 800529c:	021b      	lsls	r3, r3, #8
 800529e:	0018      	movs	r0, r3
 80052a0:	f7fe fd14 	bl	8003ccc <fillScreen>
				mainPage_graphics();
 80052a4:	f000 fd42 	bl	8005d2c <mainPage_graphics>

				mainColor = RED;
 80052a8:	4b33      	ldr	r3, [pc, #204]	; (8005378 <mainPage+0x148>)
 80052aa:	4a34      	ldr	r2, [pc, #208]	; (800537c <mainPage+0x14c>)
 80052ac:	801a      	strh	r2, [r3, #0]

				break;
 80052ae:	e02f      	b.n	8005310 <mainPage+0xe0>

			case ACID:

				main_pH_status = ACID;
 80052b0:	4b2f      	ldr	r3, [pc, #188]	; (8005370 <mainPage+0x140>)
 80052b2:	2204      	movs	r2, #4
 80052b4:	701a      	strb	r2, [r3, #0]

				background = YELLOW;
 80052b6:	4b2f      	ldr	r3, [pc, #188]	; (8005374 <mainPage+0x144>)
 80052b8:	2220      	movs	r2, #32
 80052ba:	4252      	negs	r2, r2
 80052bc:	801a      	strh	r2, [r3, #0]

				fillScreen(YELLOW);
 80052be:	4b30      	ldr	r3, [pc, #192]	; (8005380 <mainPage+0x150>)
 80052c0:	0018      	movs	r0, r3
 80052c2:	f7fe fd03 	bl	8003ccc <fillScreen>
				mainPage_graphics();
 80052c6:	f000 fd31 	bl	8005d2c <mainPage_graphics>

				mainColor = YELLOW;
 80052ca:	4b2b      	ldr	r3, [pc, #172]	; (8005378 <mainPage+0x148>)
 80052cc:	2220      	movs	r2, #32
 80052ce:	4252      	negs	r2, r2
 80052d0:	801a      	strh	r2, [r3, #0]

				break;
 80052d2:	e01d      	b.n	8005310 <mainPage+0xe0>

			case BASE:

				main_pH_status = BASE;
 80052d4:	4b26      	ldr	r3, [pc, #152]	; (8005370 <mainPage+0x140>)
 80052d6:	2202      	movs	r2, #2
 80052d8:	701a      	strb	r2, [r3, #0]

				background = BLUE;
 80052da:	4b26      	ldr	r3, [pc, #152]	; (8005374 <mainPage+0x144>)
 80052dc:	22ff      	movs	r2, #255	; 0xff
 80052de:	801a      	strh	r2, [r3, #0]

				fillScreen(BLUE);
 80052e0:	20ff      	movs	r0, #255	; 0xff
 80052e2:	f7fe fcf3 	bl	8003ccc <fillScreen>
				mainPage_graphics();
 80052e6:	f000 fd21 	bl	8005d2c <mainPage_graphics>

				mainColor = BLUE;
 80052ea:	4b23      	ldr	r3, [pc, #140]	; (8005378 <mainPage+0x148>)
 80052ec:	22ff      	movs	r2, #255	; 0xff
 80052ee:	801a      	strh	r2, [r3, #0]

				break;
 80052f0:	e00e      	b.n	8005310 <mainPage+0xe0>

			case STRONG_BASE:

				main_pH_status = STRONG_BASE;
 80052f2:	4b1f      	ldr	r3, [pc, #124]	; (8005370 <mainPage+0x140>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]

				background = DARK_BLUE;
 80052f8:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <mainPage+0x144>)
 80052fa:	221f      	movs	r2, #31
 80052fc:	801a      	strh	r2, [r3, #0]

				fillScreen(DARK_BLUE);
 80052fe:	201f      	movs	r0, #31
 8005300:	f7fe fce4 	bl	8003ccc <fillScreen>
				mainPage_graphics();
 8005304:	f000 fd12 	bl	8005d2c <mainPage_graphics>

				mainColor = DARK_BLUE;
 8005308:	4b1b      	ldr	r3, [pc, #108]	; (8005378 <mainPage+0x148>)
 800530a:	221f      	movs	r2, #31
 800530c:	801a      	strh	r2, [r3, #0]

				break;
 800530e:	46c0      	nop			; (mov r8, r8)

		}

	}

	if(updatePage == 1)
 8005310:	1dfb      	adds	r3, r7, #7
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d109      	bne.n	800532c <mainPage+0xfc>
	{

		elements = mainElement;
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <mainPage+0x154>)
 800531a:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <mainPage+0x158>)
 800531c:	601a      	str	r2, [r3, #0]
		elementIndexLim = MAIN_NUM_OF_ELEMENTS;
 800531e:	4b1b      	ldr	r3, [pc, #108]	; (800538c <mainPage+0x15c>)
 8005320:	2202      	movs	r2, #2
 8005322:	701a      	strb	r2, [r3, #0]
		background = mainColor;
 8005324:	4b14      	ldr	r3, [pc, #80]	; (8005378 <mainPage+0x148>)
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	4b12      	ldr	r3, [pc, #72]	; (8005374 <mainPage+0x144>)
 800532a:	801a      	strh	r2, [r3, #0]

	}

	char pHstring[6];

	floatToString(pH_current, pHstring);
 800532c:	4b18      	ldr	r3, [pc, #96]	; (8005390 <mainPage+0x160>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2408      	movs	r4, #8
 8005332:	193a      	adds	r2, r7, r4
 8005334:	0011      	movs	r1, r2
 8005336:	1c18      	adds	r0, r3, #0
 8005338:	f001 f850 	bl	80063dc <floatToString>

	ST7735_SetRotation(1);
 800533c:	2001      	movs	r0, #1
 800533e:	f7fe fe39 	bl	8003fb4 <ST7735_SetRotation>
	ST7735_WriteString(MAIN_PH_VAL_POSX, MAIN_PH_VAL_POSY, pHstring, Font_16x26, WHITE, mainColor);
 8005342:	4b0d      	ldr	r3, [pc, #52]	; (8005378 <mainPage+0x148>)
 8005344:	881a      	ldrh	r2, [r3, #0]
 8005346:	4b13      	ldr	r3, [pc, #76]	; (8005394 <mainPage+0x164>)
 8005348:	1938      	adds	r0, r7, r4
 800534a:	9202      	str	r2, [sp, #8]
 800534c:	4a12      	ldr	r2, [pc, #72]	; (8005398 <mainPage+0x168>)
 800534e:	9201      	str	r2, [sp, #4]
 8005350:	466a      	mov	r2, sp
 8005352:	6859      	ldr	r1, [r3, #4]
 8005354:	6011      	str	r1, [r2, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	0002      	movs	r2, r0
 800535a:	2138      	movs	r1, #56	; 0x38
 800535c:	2014      	movs	r0, #20
 800535e:	f7fe ff9d 	bl	800429c <ST7735_WriteString>

}
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	46bd      	mov	sp, r7
 8005366:	b005      	add	sp, #20
 8005368:	bd90      	pop	{r4, r7, pc}
 800536a:	46c0      	nop			; (mov r8, r8)
 800536c:	20000021 	.word	0x20000021
 8005370:	20000248 	.word	0x20000248
 8005374:	20000228 	.word	0x20000228
 8005378:	20000034 	.word	0x20000034
 800537c:	fffff800 	.word	0xfffff800
 8005380:	0000ffe0 	.word	0x0000ffe0
 8005384:	20000144 	.word	0x20000144
 8005388:	200001d8 	.word	0x200001d8
 800538c:	20000221 	.word	0x20000221
 8005390:	2000001c 	.word	0x2000001c
 8005394:	20000010 	.word	0x20000010
 8005398:	0000ffff 	.word	0x0000ffff

0800539c <circuitCalibPage>:
 *  @ Function; circuitCalibPage
 *  @ Description; When user push left button, this page
 *  @ indicates the OPAMP calibration
 */
void circuitCalibPage(uint8_t updatePage)
{
 800539c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539e:	b08b      	sub	sp, #44	; 0x2c
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	0002      	movs	r2, r0
 80053a4:	1dfb      	adds	r3, r7, #7
 80053a6:	701a      	strb	r2, [r3, #0]

	static float hLineBuff[6] = {0};
	static uint32_t hLineCount = 0;
	static uint32_t hLine_old = 128;

	uint16_t indicatorsColor = RED;
 80053a8:	231e      	movs	r3, #30
 80053aa:	18fb      	adds	r3, r7, r3
 80053ac:	4a6d      	ldr	r2, [pc, #436]	; (8005564 <circuitCalibPage+0x1c8>)
 80053ae:	801a      	strh	r2, [r3, #0]

	uint16_t rawAdcData = 128;
 80053b0:	2312      	movs	r3, #18
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	2280      	movs	r2, #128	; 0x80
 80053b6:	801a      	strh	r2, [r3, #0]
	uint32_t hLine = 128;
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	61bb      	str	r3, [r7, #24]
	float rawAdcmV = 0.0;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]


	if(updatePage == 1)
 80053c0:	1dfb      	adds	r3, r7, #7
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d10c      	bne.n	80053e2 <circuitCalibPage+0x46>
	{

		fillScreen(BLACK);
 80053c8:	2000      	movs	r0, #0
 80053ca:	f7fe fc7f 	bl	8003ccc <fillScreen>
		circuitCalibPage_graphics();
 80053ce:	f000 fce1 	bl	8005d94 <circuitCalibPage_graphics>
		background = BLACK;
 80053d2:	4b65      	ldr	r3, [pc, #404]	; (8005568 <circuitCalibPage+0x1cc>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	801a      	strh	r2, [r3, #0]

		HAL_ADC_Start(&hadc);
 80053d8:	4b64      	ldr	r3, [pc, #400]	; (800556c <circuitCalibPage+0x1d0>)
 80053da:	0018      	movs	r0, r3
 80053dc:	f001 fcc0 	bl	8006d60 <HAL_ADC_Start>

		return;
 80053e0:	e0bc      	b.n	800555c <circuitCalibPage+0x1c0>

	}

	rawAdcData = HAL_ADC_GetValue(&hadc);
 80053e2:	4b62      	ldr	r3, [pc, #392]	; (800556c <circuitCalibPage+0x1d0>)
 80053e4:	0018      	movs	r0, r3
 80053e6:	f001 fd0f 	bl	8006e08 <HAL_ADC_GetValue>
 80053ea:	0002      	movs	r2, r0
 80053ec:	2112      	movs	r1, #18
 80053ee:	187b      	adds	r3, r7, r1
 80053f0:	801a      	strh	r2, [r3, #0]
	rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 80053f2:	187b      	adds	r3, r7, r1
 80053f4:	881b      	ldrh	r3, [r3, #0]
 80053f6:	0018      	movs	r0, r3
 80053f8:	f7fd f9dc 	bl	80027b4 <__aeabi_i2d>
 80053fc:	4a5c      	ldr	r2, [pc, #368]	; (8005570 <circuitCalibPage+0x1d4>)
 80053fe:	4b5d      	ldr	r3, [pc, #372]	; (8005574 <circuitCalibPage+0x1d8>)
 8005400:	f7fc fb5e 	bl	8001ac0 <__aeabi_dmul>
 8005404:	0002      	movs	r2, r0
 8005406:	000b      	movs	r3, r1
 8005408:	0010      	movs	r0, r2
 800540a:	0019      	movs	r1, r3
 800540c:	f7fd fa70 	bl	80028f0 <__aeabi_d2f>
 8005410:	1c03      	adds	r3, r0, #0
 8005412:	60fb      	str	r3, [r7, #12]
	hLineBuff[hLineCount%6] = 128.0 - ( rawAdcmV * 32.72); // ( 128 pixels / 3.3 V ) = 38.79
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f7fd fa23 	bl	8002860 <__aeabi_f2d>
 800541a:	4a57      	ldr	r2, [pc, #348]	; (8005578 <circuitCalibPage+0x1dc>)
 800541c:	4b57      	ldr	r3, [pc, #348]	; (800557c <circuitCalibPage+0x1e0>)
 800541e:	f7fc fb4f 	bl	8001ac0 <__aeabi_dmul>
 8005422:	0002      	movs	r2, r0
 8005424:	000b      	movs	r3, r1
 8005426:	2000      	movs	r0, #0
 8005428:	4955      	ldr	r1, [pc, #340]	; (8005580 <circuitCalibPage+0x1e4>)
 800542a:	f7fc fe0b 	bl	8002044 <__aeabi_dsub>
 800542e:	0002      	movs	r2, r0
 8005430:	000b      	movs	r3, r1
 8005432:	0014      	movs	r4, r2
 8005434:	001d      	movs	r5, r3
 8005436:	4b53      	ldr	r3, [pc, #332]	; (8005584 <circuitCalibPage+0x1e8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2106      	movs	r1, #6
 800543c:	0018      	movs	r0, r3
 800543e:	f7fa fee7 	bl	8000210 <__aeabi_uidivmod>
 8005442:	000b      	movs	r3, r1
 8005444:	001e      	movs	r6, r3
 8005446:	0020      	movs	r0, r4
 8005448:	0029      	movs	r1, r5
 800544a:	f7fd fa51 	bl	80028f0 <__aeabi_d2f>
 800544e:	1c01      	adds	r1, r0, #0
 8005450:	4b4d      	ldr	r3, [pc, #308]	; (8005588 <circuitCalibPage+0x1ec>)
 8005452:	00b2      	lsls	r2, r6, #2
 8005454:	50d1      	str	r1, [r2, r3]

	hLine = hLineBuff[hLineCount%6];
 8005456:	4b4b      	ldr	r3, [pc, #300]	; (8005584 <circuitCalibPage+0x1e8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2106      	movs	r1, #6
 800545c:	0018      	movs	r0, r3
 800545e:	f7fa fed7 	bl	8000210 <__aeabi_uidivmod>
 8005462:	000b      	movs	r3, r1
 8005464:	001a      	movs	r2, r3
 8005466:	4b48      	ldr	r3, [pc, #288]	; (8005588 <circuitCalibPage+0x1ec>)
 8005468:	0092      	lsls	r2, r2, #2
 800546a:	58d3      	ldr	r3, [r2, r3]
 800546c:	1c18      	adds	r0, r3, #0
 800546e:	f7fb f837 	bl	80004e0 <__aeabi_f2uiz>
 8005472:	0003      	movs	r3, r0
 8005474:	61bb      	str	r3, [r7, #24]

	hLineCount++;
 8005476:	4b43      	ldr	r3, [pc, #268]	; (8005584 <circuitCalibPage+0x1e8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	1c5a      	adds	r2, r3, #1
 800547c:	4b41      	ldr	r3, [pc, #260]	; (8005584 <circuitCalibPage+0x1e8>)
 800547e:	601a      	str	r2, [r3, #0]

	if(hLineCount >= 6)
 8005480:	4b40      	ldr	r3, [pc, #256]	; (8005584 <circuitCalibPage+0x1e8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b05      	cmp	r3, #5
 8005486:	d929      	bls.n	80054dc <circuitCalibPage+0x140>
	{

		hLine = 0.0;
 8005488:	2300      	movs	r3, #0
 800548a:	61bb      	str	r3, [r7, #24]
		for(int i = 0 ; i < 6 ; i++)
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e012      	b.n	80054b8 <circuitCalibPage+0x11c>
			hLine += hLineBuff[i];
 8005492:	69b8      	ldr	r0, [r7, #24]
 8005494:	f7fb fed2 	bl	800123c <__aeabi_ui2f>
 8005498:	4b3b      	ldr	r3, [pc, #236]	; (8005588 <circuitCalibPage+0x1ec>)
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	0092      	lsls	r2, r2, #2
 800549e:	58d3      	ldr	r3, [r2, r3]
 80054a0:	1c19      	adds	r1, r3, #0
 80054a2:	f7fb f853 	bl	800054c <__aeabi_fadd>
 80054a6:	1c03      	adds	r3, r0, #0
 80054a8:	1c18      	adds	r0, r3, #0
 80054aa:	f7fb f819 	bl	80004e0 <__aeabi_f2uiz>
 80054ae:	0003      	movs	r3, r0
 80054b0:	61bb      	str	r3, [r7, #24]
		for(int i = 0 ; i < 6 ; i++)
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	3301      	adds	r3, #1
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	dde9      	ble.n	8005492 <circuitCalibPage+0xf6>

		hLine = ( hLine / 6.0 );
 80054be:	69b8      	ldr	r0, [r7, #24]
 80054c0:	f7fd f9a8 	bl	8002814 <__aeabi_ui2d>
 80054c4:	2200      	movs	r2, #0
 80054c6:	4b31      	ldr	r3, [pc, #196]	; (800558c <circuitCalibPage+0x1f0>)
 80054c8:	f7fb ff00 	bl	80012cc <__aeabi_ddiv>
 80054cc:	0002      	movs	r2, r0
 80054ce:	000b      	movs	r3, r1
 80054d0:	0010      	movs	r0, r2
 80054d2:	0019      	movs	r1, r3
 80054d4:	f7fb f81c 	bl	8000510 <__aeabi_d2uiz>
 80054d8:	0003      	movs	r3, r0
 80054da:	61bb      	str	r3, [r7, #24]

	}

	HAL_ADC_Start(&hadc);
 80054dc:	4b23      	ldr	r3, [pc, #140]	; (800556c <circuitCalibPage+0x1d0>)
 80054de:	0018      	movs	r0, r3
 80054e0:	f001 fc3e 	bl	8006d60 <HAL_ADC_Start>

	// Draw a line indicator

	if( (uint8_t)(hLine_old*100) != (uint8_t)(hLine*100) )
 80054e4:	4b2a      	ldr	r3, [pc, #168]	; (8005590 <circuitCalibPage+0x1f4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2264      	movs	r2, #100	; 0x64
 80054ec:	4353      	muls	r3, r2
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2164      	movs	r1, #100	; 0x64
 80054f6:	434b      	muls	r3, r1
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d00b      	beq.n	8005516 <circuitCalibPage+0x17a>
		drawLine(0, hLine_old, 160, hLine_old, BLACK);
 80054fe:	4b24      	ldr	r3, [pc, #144]	; (8005590 <circuitCalibPage+0x1f4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	b219      	sxth	r1, r3
 8005504:	4b22      	ldr	r3, [pc, #136]	; (8005590 <circuitCalibPage+0x1f4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	b21b      	sxth	r3, r3
 800550a:	2200      	movs	r2, #0
 800550c:	9200      	str	r2, [sp, #0]
 800550e:	22a0      	movs	r2, #160	; 0xa0
 8005510:	2000      	movs	r0, #0
 8005512:	f7fd fc48 	bl	8002da6 <drawLine>

	drawLine(0, hLine, 160, hLine, WHITE);
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	b219      	sxth	r1, r3
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	b21b      	sxth	r3, r3
 800551e:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <circuitCalibPage+0x1f8>)
 8005520:	9200      	str	r2, [sp, #0]
 8005522:	22a0      	movs	r2, #160	; 0xa0
 8005524:	2000      	movs	r0, #0
 8005526:	f7fd fc3e 	bl	8002da6 <drawLine>

	hLine_old = hLine;
 800552a:	4b19      	ldr	r3, [pc, #100]	; (8005590 <circuitCalibPage+0x1f4>)
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	601a      	str	r2, [r3, #0]

	if(( hLine >= ( 128 - 54 - 1 ) ) && ( hLine <= ( 128 - 54 + 1 ) ))
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b48      	cmp	r3, #72	; 0x48
 8005534:	d908      	bls.n	8005548 <circuitCalibPage+0x1ac>
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b4b      	cmp	r3, #75	; 0x4b
 800553a:	d805      	bhi.n	8005548 <circuitCalibPage+0x1ac>
		indicatorsColor = GREEN;
 800553c:	231e      	movs	r3, #30
 800553e:	18fb      	adds	r3, r7, r3
 8005540:	22fc      	movs	r2, #252	; 0xfc
 8005542:	00d2      	lsls	r2, r2, #3
 8005544:	801a      	strh	r2, [r3, #0]
 8005546:	e003      	b.n	8005550 <circuitCalibPage+0x1b4>
	else
		indicatorsColor = RED;
 8005548:	231e      	movs	r3, #30
 800554a:	18fb      	adds	r3, r7, r3
 800554c:	4a05      	ldr	r2, [pc, #20]	; (8005564 <circuitCalibPage+0x1c8>)
 800554e:	801a      	strh	r2, [r3, #0]

	orizzIndicators_graphics(indicatorsColor);
 8005550:	231e      	movs	r3, #30
 8005552:	18fb      	adds	r3, r7, r3
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	0018      	movs	r0, r3
 8005558:	f000 fe20 	bl	800619c <orizzIndicators_graphics>

}
 800555c:	46bd      	mov	sp, r7
 800555e:	b009      	add	sp, #36	; 0x24
 8005560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005562:	46c0      	nop			; (mov r8, r8)
 8005564:	fffff800 	.word	0xfffff800
 8005568:	20000228 	.word	0x20000228
 800556c:	2000009c 	.word	0x2000009c
 8005570:	66666666 	.word	0x66666666
 8005574:	3f4a6666 	.word	0x3f4a6666
 8005578:	f5c28f5c 	.word	0xf5c28f5c
 800557c:	40405c28 	.word	0x40405c28
 8005580:	40600000 	.word	0x40600000
 8005584:	2000024c 	.word	0x2000024c
 8005588:	20000250 	.word	0x20000250
 800558c:	40180000 	.word	0x40180000
 8005590:	20000038 	.word	0x20000038
 8005594:	0000ffff 	.word	0x0000ffff

08005598 <softwareCalibPage>:
 *  @ Description; user reach this page from
 *  @ the main page. Here it is performed the
 *  @ two points probe calibration
 */
void softwareCalibPage(uint8_t updatePage)
{
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b08b      	sub	sp, #44	; 0x2c
 800559c:	af04      	add	r7, sp, #16
 800559e:	0002      	movs	r2, r0
 80055a0:	1dfb      	adds	r3, r7, #7
 80055a2:	701a      	strb	r2, [r3, #0]

	static uint8_t swCalibTimer = 9;
	static uint32_t swCalibTimeStamp = 0;
	static uint8_t pointIndex = 0;

	char sTimer[2] = {0};
 80055a4:	230c      	movs	r3, #12
 80055a6:	18fb      	adds	r3, r7, r3
 80055a8:	2200      	movs	r2, #0
 80055aa:	801a      	strh	r2, [r3, #0]
	uint16_t rawAdcData;

	static uint8_t count = 0;


	if(updatePage == 1)
 80055ac:	1dfb      	adds	r3, r7, #7
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d112      	bne.n	80055da <softwareCalibPage+0x42>
	{

		fillScreen(BLACK);
 80055b4:	2000      	movs	r0, #0
 80055b6:	f7fe fb89 	bl	8003ccc <fillScreen>
		softwareCalibPage_graphics();
 80055ba:	f000 fbfd 	bl	8005db8 <softwareCalibPage_graphics>
		elements = swCalibElement;
 80055be:	4b8b      	ldr	r3, [pc, #556]	; (80057ec <softwareCalibPage+0x254>)
 80055c0:	4a8b      	ldr	r2, [pc, #556]	; (80057f0 <softwareCalibPage+0x258>)
 80055c2:	601a      	str	r2, [r3, #0]
		elementIndexLim = SWCALIB_NUM_OF_ELEMENTS;
 80055c4:	4b8b      	ldr	r3, [pc, #556]	; (80057f4 <softwareCalibPage+0x25c>)
 80055c6:	2204      	movs	r2, #4
 80055c8:	701a      	strb	r2, [r3, #0]
		background = BLACK;
 80055ca:	4b8b      	ldr	r3, [pc, #556]	; (80057f8 <softwareCalibPage+0x260>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	801a      	strh	r2, [r3, #0]

		HAL_ADC_Start(&hadc);
 80055d0:	4b8a      	ldr	r3, [pc, #552]	; (80057fc <softwareCalibPage+0x264>)
 80055d2:	0018      	movs	r0, r3
 80055d4:	f001 fbc4 	bl	8006d60 <HAL_ADC_Start>
 80055d8:	e105      	b.n	80057e6 <softwareCalibPage+0x24e>

		return;

	}

	if(timerOn)
 80055da:	4b89      	ldr	r3, [pc, #548]	; (8005800 <softwareCalibPage+0x268>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d100      	bne.n	80055e4 <softwareCalibPage+0x4c>
 80055e2:	e0dc      	b.n	800579e <softwareCalibPage+0x206>
	{

		if(getDelayMs(swCalibTimeStamp) >= 1000)
 80055e4:	4b87      	ldr	r3, [pc, #540]	; (8005804 <softwareCalibPage+0x26c>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	0018      	movs	r0, r3
 80055ea:	f000 fed9 	bl	80063a0 <getDelayMs>
 80055ee:	0002      	movs	r2, r0
 80055f0:	23fa      	movs	r3, #250	; 0xfa
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d200      	bcs.n	80055fa <softwareCalibPage+0x62>
 80055f8:	e0f5      	b.n	80057e6 <softwareCalibPage+0x24e>
		{

			rawAdcData = HAL_ADC_GetValue(&hadc);
 80055fa:	4b80      	ldr	r3, [pc, #512]	; (80057fc <softwareCalibPage+0x264>)
 80055fc:	0018      	movs	r0, r3
 80055fe:	f001 fc03 	bl	8006e08 <HAL_ADC_GetValue>
 8005602:	0002      	movs	r2, r0
 8005604:	210e      	movs	r1, #14
 8005606:	187b      	adds	r3, r7, r1
 8005608:	801a      	strh	r2, [r3, #0]
			rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 800560a:	187b      	adds	r3, r7, r1
 800560c:	881b      	ldrh	r3, [r3, #0]
 800560e:	0018      	movs	r0, r3
 8005610:	f7fd f8d0 	bl	80027b4 <__aeabi_i2d>
 8005614:	4a7c      	ldr	r2, [pc, #496]	; (8005808 <softwareCalibPage+0x270>)
 8005616:	4b7d      	ldr	r3, [pc, #500]	; (800580c <softwareCalibPage+0x274>)
 8005618:	f7fc fa52 	bl	8001ac0 <__aeabi_dmul>
 800561c:	0002      	movs	r2, r0
 800561e:	000b      	movs	r3, r1
 8005620:	0010      	movs	r0, r2
 8005622:	0019      	movs	r1, r3
 8005624:	f7fd f964 	bl	80028f0 <__aeabi_d2f>
 8005628:	1c03      	adds	r3, r0, #0
 800562a:	617b      	str	r3, [r7, #20]
			mVBuffCalib[count%6] = rawAdcmV;
 800562c:	4b78      	ldr	r3, [pc, #480]	; (8005810 <softwareCalibPage+0x278>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2106      	movs	r1, #6
 8005632:	0018      	movs	r0, r3
 8005634:	f7fa fdec 	bl	8000210 <__aeabi_uidivmod>
 8005638:	000b      	movs	r3, r1
 800563a:	b2db      	uxtb	r3, r3
 800563c:	001a      	movs	r2, r3
 800563e:	4b75      	ldr	r3, [pc, #468]	; (8005814 <softwareCalibPage+0x27c>)
 8005640:	0092      	lsls	r2, r2, #2
 8005642:	6979      	ldr	r1, [r7, #20]
 8005644:	50d1      	str	r1, [r2, r3]

			count++;
 8005646:	4b72      	ldr	r3, [pc, #456]	; (8005810 <softwareCalibPage+0x278>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4b70      	ldr	r3, [pc, #448]	; (8005810 <softwareCalibPage+0x278>)
 8005650:	701a      	strb	r2, [r3, #0]

			if(count >= 6)
 8005652:	4b6f      	ldr	r3, [pc, #444]	; (8005810 <softwareCalibPage+0x278>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b05      	cmp	r3, #5
 8005658:	d91a      	bls.n	8005690 <softwareCalibPage+0xf8>
			{

				rawAdcmV = 0.0;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
				for(int i = 0 ; i < 6 ; i++)
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	e00c      	b.n	800567e <softwareCalibPage+0xe6>
					rawAdcmV += mVBuffCalib[i];
 8005664:	4b6b      	ldr	r3, [pc, #428]	; (8005814 <softwareCalibPage+0x27c>)
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	0092      	lsls	r2, r2, #2
 800566a:	58d3      	ldr	r3, [r2, r3]
 800566c:	1c19      	adds	r1, r3, #0
 800566e:	6978      	ldr	r0, [r7, #20]
 8005670:	f7fa ff6c 	bl	800054c <__aeabi_fadd>
 8005674:	1c03      	adds	r3, r0, #0
 8005676:	617b      	str	r3, [r7, #20]
				for(int i = 0 ; i < 6 ; i++)
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	3301      	adds	r3, #1
 800567c:	613b      	str	r3, [r7, #16]
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	2b05      	cmp	r3, #5
 8005682:	ddef      	ble.n	8005664 <softwareCalibPage+0xcc>

				rawAdcmV = ( rawAdcmV / 6.0 );
 8005684:	4964      	ldr	r1, [pc, #400]	; (8005818 <softwareCalibPage+0x280>)
 8005686:	6978      	ldr	r0, [r7, #20]
 8005688:	f7fb f900 	bl	800088c <__aeabi_fdiv>
 800568c:	1c03      	adds	r3, r0, #0
 800568e:	617b      	str	r3, [r7, #20]

			}

			HAL_ADC_Start(&hadc);
 8005690:	4b5a      	ldr	r3, [pc, #360]	; (80057fc <softwareCalibPage+0x264>)
 8005692:	0018      	movs	r0, r3
 8005694:	f001 fb64 	bl	8006d60 <HAL_ADC_Start>

			swCalibTimer--;
 8005698:	4b60      	ldr	r3, [pc, #384]	; (800581c <softwareCalibPage+0x284>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	3b01      	subs	r3, #1
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	4b5e      	ldr	r3, [pc, #376]	; (800581c <softwareCalibPage+0x284>)
 80056a2:	701a      	strb	r2, [r3, #0]

			if(swCalibTimer <= 0)
 80056a4:	4b5d      	ldr	r3, [pc, #372]	; (800581c <softwareCalibPage+0x284>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d158      	bne.n	800575e <softwareCalibPage+0x1c6>
			{

				swCalibTimer = 9;
 80056ac:	4b5b      	ldr	r3, [pc, #364]	; (800581c <softwareCalibPage+0x284>)
 80056ae:	2209      	movs	r2, #9
 80056b0:	701a      	strb	r2, [r3, #0]
				timerOn = 0;
 80056b2:	4b53      	ldr	r3, [pc, #332]	; (8005800 <softwareCalibPage+0x268>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	701a      	strb	r2, [r3, #0]

				count = 0;
 80056b8:	4b55      	ldr	r3, [pc, #340]	; (8005810 <softwareCalibPage+0x278>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	701a      	strb	r2, [r3, #0]

				ST7735_WriteString(SWCALIB_PT_NUM_POSX, SWCALIB_PT_NUM_POSY, "PT.2", Font_11x18, WHITE, background);
 80056be:	4b4e      	ldr	r3, [pc, #312]	; (80057f8 <softwareCalibPage+0x260>)
 80056c0:	881a      	ldrh	r2, [r3, #0]
 80056c2:	4b57      	ldr	r3, [pc, #348]	; (8005820 <softwareCalibPage+0x288>)
 80056c4:	4857      	ldr	r0, [pc, #348]	; (8005824 <softwareCalibPage+0x28c>)
 80056c6:	9202      	str	r2, [sp, #8]
 80056c8:	4a57      	ldr	r2, [pc, #348]	; (8005828 <softwareCalibPage+0x290>)
 80056ca:	9201      	str	r2, [sp, #4]
 80056cc:	466a      	mov	r2, sp
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	6011      	str	r1, [r2, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	0002      	movs	r2, r0
 80056d6:	2168      	movs	r1, #104	; 0x68
 80056d8:	203c      	movs	r0, #60	; 0x3c
 80056da:	f7fe fddf 	bl	800429c <ST7735_WriteString>

				buttonChangeColour(&swCalibElement[3].btn);
 80056de:	4b53      	ldr	r3, [pc, #332]	; (800582c <softwareCalibPage+0x294>)
 80056e0:	0018      	movs	r0, r3
 80056e2:	f7ff f923 	bl	800492c <buttonChangeColour>

				twoPointsCalib_mV[pointIndex] = rawAdcmV;
 80056e6:	4b52      	ldr	r3, [pc, #328]	; (8005830 <softwareCalibPage+0x298>)
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	001a      	movs	r2, r3
 80056ec:	4b51      	ldr	r3, [pc, #324]	; (8005834 <softwareCalibPage+0x29c>)
 80056ee:	0092      	lsls	r2, r2, #2
 80056f0:	6979      	ldr	r1, [r7, #20]
 80056f2:	50d1      	str	r1, [r2, r3]
				twoPointsCalib_pH[pointIndex] = swCalibElement[2].nBox.boxNum;
 80056f4:	4b3e      	ldr	r3, [pc, #248]	; (80057f0 <softwareCalibPage+0x258>)
 80056f6:	2268      	movs	r2, #104	; 0x68
 80056f8:	5c9a      	ldrb	r2, [r3, r2]
 80056fa:	4b4d      	ldr	r3, [pc, #308]	; (8005830 <softwareCalibPage+0x298>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	001c      	movs	r4, r3
 8005700:	0010      	movs	r0, r2
 8005702:	f7fb fd9b 	bl	800123c <__aeabi_ui2f>
 8005706:	1c01      	adds	r1, r0, #0
 8005708:	4b4b      	ldr	r3, [pc, #300]	; (8005838 <softwareCalibPage+0x2a0>)
 800570a:	00a2      	lsls	r2, r4, #2
 800570c:	50d1      	str	r1, [r2, r3]

				pointIndex++;
 800570e:	4b48      	ldr	r3, [pc, #288]	; (8005830 <softwareCalibPage+0x298>)
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	3301      	adds	r3, #1
 8005714:	b2da      	uxtb	r2, r3
 8005716:	4b46      	ldr	r3, [pc, #280]	; (8005830 <softwareCalibPage+0x298>)
 8005718:	701a      	strb	r2, [r3, #0]

				if(pointIndex >= 2)
 800571a:	4b45      	ldr	r3, [pc, #276]	; (8005830 <softwareCalibPage+0x298>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d91d      	bls.n	800575e <softwareCalibPage+0x1c6>
				{

					writeFloatToEE(EE_SWCALIB_PH_PT1, twoPointsCalib_pH[0]);
 8005722:	4b45      	ldr	r3, [pc, #276]	; (8005838 <softwareCalibPage+0x2a0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	1c19      	adds	r1, r3, #0
 8005728:	2000      	movs	r0, #0
 800572a:	f001 f826 	bl	800677a <writeFloatToEE>
					writeFloatToEE(EE_SWCALIB_MV_PT1, twoPointsCalib_mV[0]);
 800572e:	4b41      	ldr	r3, [pc, #260]	; (8005834 <softwareCalibPage+0x29c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	1c19      	adds	r1, r3, #0
 8005734:	2004      	movs	r0, #4
 8005736:	f001 f820 	bl	800677a <writeFloatToEE>
					writeFloatToEE(EE_SWCALIB_PH_PT2, twoPointsCalib_pH[1]);
 800573a:	4b3f      	ldr	r3, [pc, #252]	; (8005838 <softwareCalibPage+0x2a0>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	1c19      	adds	r1, r3, #0
 8005740:	2008      	movs	r0, #8
 8005742:	f001 f81a 	bl	800677a <writeFloatToEE>
					writeFloatToEE(EE_SWCALIB_MV_PT2, twoPointsCalib_mV[1]);
 8005746:	4b3b      	ldr	r3, [pc, #236]	; (8005834 <softwareCalibPage+0x29c>)
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	1c19      	adds	r1, r3, #0
 800574c:	200c      	movs	r0, #12
 800574e:	f001 f814 	bl	800677a <writeFloatToEE>

					pointIndex = 0;
 8005752:	4b37      	ldr	r3, [pc, #220]	; (8005830 <softwareCalibPage+0x298>)
 8005754:	2200      	movs	r2, #0
 8005756:	701a      	strb	r2, [r3, #0]
					newPageFlags = 2;
 8005758:	4b38      	ldr	r3, [pc, #224]	; (800583c <softwareCalibPage+0x2a4>)
 800575a:	2202      	movs	r2, #2
 800575c:	801a      	strh	r2, [r3, #0]

				}

			}

			sTimer[0] = ( swCalibTimer + 0x30 );
 800575e:	4b2f      	ldr	r3, [pc, #188]	; (800581c <softwareCalibPage+0x284>)
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	3330      	adds	r3, #48	; 0x30
 8005764:	b2da      	uxtb	r2, r3
 8005766:	210c      	movs	r1, #12
 8005768:	187b      	adds	r3, r7, r1
 800576a:	701a      	strb	r2, [r3, #0]
			sTimer[1] = 0;
 800576c:	187b      	adds	r3, r7, r1
 800576e:	2200      	movs	r2, #0
 8005770:	705a      	strb	r2, [r3, #1]
			ST7735_WriteString(SWCALIB_TIMER_POSX, SWCALIB_TIMER_POSY,sTimer ,Font_11x18, WHITE, background);
 8005772:	4b21      	ldr	r3, [pc, #132]	; (80057f8 <softwareCalibPage+0x260>)
 8005774:	881a      	ldrh	r2, [r3, #0]
 8005776:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <softwareCalibPage+0x288>)
 8005778:	1878      	adds	r0, r7, r1
 800577a:	9202      	str	r2, [sp, #8]
 800577c:	4a2a      	ldr	r2, [pc, #168]	; (8005828 <softwareCalibPage+0x290>)
 800577e:	9201      	str	r2, [sp, #4]
 8005780:	466a      	mov	r2, sp
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	6011      	str	r1, [r2, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	0002      	movs	r2, r0
 800578a:	2137      	movs	r1, #55	; 0x37
 800578c:	2014      	movs	r0, #20
 800578e:	f7fe fd85 	bl	800429c <ST7735_WriteString>

			swCalibTimeStamp = getTimeMs();
 8005792:	f000 fdf9 	bl	8006388 <getTimeMs>
 8005796:	0002      	movs	r2, r0
 8005798:	4b1a      	ldr	r3, [pc, #104]	; (8005804 <softwareCalibPage+0x26c>)
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e023      	b.n	80057e6 <softwareCalibPage+0x24e>

		}

	}
	else if(swCalibTimer != 9)
 800579e:	4b1f      	ldr	r3, [pc, #124]	; (800581c <softwareCalibPage+0x284>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b09      	cmp	r3, #9
 80057a4:	d01f      	beq.n	80057e6 <softwareCalibPage+0x24e>
	{

		swCalibTimer = 9;
 80057a6:	4b1d      	ldr	r3, [pc, #116]	; (800581c <softwareCalibPage+0x284>)
 80057a8:	2209      	movs	r2, #9
 80057aa:	701a      	strb	r2, [r3, #0]
		swCalibTimeStamp = 0;
 80057ac:	4b15      	ldr	r3, [pc, #84]	; (8005804 <softwareCalibPage+0x26c>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	601a      	str	r2, [r3, #0]
		sTimer[0] = ( swCalibTimer + 0x30 );
 80057b2:	4b1a      	ldr	r3, [pc, #104]	; (800581c <softwareCalibPage+0x284>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	3330      	adds	r3, #48	; 0x30
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	210c      	movs	r1, #12
 80057bc:	187b      	adds	r3, r7, r1
 80057be:	701a      	strb	r2, [r3, #0]
		sTimer[1] = 0;
 80057c0:	187b      	adds	r3, r7, r1
 80057c2:	2200      	movs	r2, #0
 80057c4:	705a      	strb	r2, [r3, #1]
		ST7735_WriteString(SWCALIB_TIMER_POSX, SWCALIB_TIMER_POSY,sTimer ,Font_11x18, WHITE, background);
 80057c6:	4b0c      	ldr	r3, [pc, #48]	; (80057f8 <softwareCalibPage+0x260>)
 80057c8:	881a      	ldrh	r2, [r3, #0]
 80057ca:	4b15      	ldr	r3, [pc, #84]	; (8005820 <softwareCalibPage+0x288>)
 80057cc:	1878      	adds	r0, r7, r1
 80057ce:	9202      	str	r2, [sp, #8]
 80057d0:	4a15      	ldr	r2, [pc, #84]	; (8005828 <softwareCalibPage+0x290>)
 80057d2:	9201      	str	r2, [sp, #4]
 80057d4:	466a      	mov	r2, sp
 80057d6:	6859      	ldr	r1, [r3, #4]
 80057d8:	6011      	str	r1, [r2, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	0002      	movs	r2, r0
 80057de:	2137      	movs	r1, #55	; 0x37
 80057e0:	2014      	movs	r0, #20
 80057e2:	f7fe fd5b 	bl	800429c <ST7735_WriteString>

	}

}
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b007      	add	sp, #28
 80057ea:	bd90      	pop	{r4, r7, pc}
 80057ec:	20000144 	.word	0x20000144
 80057f0:	20000148 	.word	0x20000148
 80057f4:	20000221 	.word	0x20000221
 80057f8:	20000228 	.word	0x20000228
 80057fc:	2000009c 	.word	0x2000009c
 8005800:	2000022a 	.word	0x2000022a
 8005804:	20000268 	.word	0x20000268
 8005808:	66666666 	.word	0x66666666
 800580c:	3f4a6666 	.word	0x3f4a6666
 8005810:	2000026c 	.word	0x2000026c
 8005814:	20000270 	.word	0x20000270
 8005818:	40c00000 	.word	0x40c00000
 800581c:	2000003c 	.word	0x2000003c
 8005820:	20000008 	.word	0x20000008
 8005824:	08008a30 	.word	0x08008a30
 8005828:	0000ffff 	.word	0x0000ffff
 800582c:	200001b8 	.word	0x200001b8
 8005830:	20000288 	.word	0x20000288
 8005834:	2000002c 	.word	0x2000002c
 8005838:	20000024 	.word	0x20000024
 800583c:	20000022 	.word	0x20000022

08005840 <btnSwitchPage>:


void btnSwitchPage(BTN *btn)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

	buttonChangeColour(btn);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	0018      	movs	r0, r3
 800584c:	f7ff f86e 	bl	800492c <buttonChangeColour>
	newPageFlags = btn->btnArg;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8a1a      	ldrh	r2, [r3, #16]
 8005854:	4b02      	ldr	r3, [pc, #8]	; (8005860 <btnSwitchPage+0x20>)
 8005856:	801a      	strh	r2, [r3, #0]

}
 8005858:	46c0      	nop			; (mov r8, r8)
 800585a:	46bd      	mov	sp, r7
 800585c:	b002      	add	sp, #8
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20000022 	.word	0x20000022

08005864 <btnStartTimer>:


void btnStartTimer(BTN *btn)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]

	buttonChangeColour(btn);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	0018      	movs	r0, r3
 8005870:	f7ff f85c 	bl	800492c <buttonChangeColour>
	timerOn = !timerOn;
 8005874:	4b05      	ldr	r3, [pc, #20]	; (800588c <btnStartTimer+0x28>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	425a      	negs	r2, r3
 800587a:	4153      	adcs	r3, r2
 800587c:	b2db      	uxtb	r3, r3
 800587e:	001a      	movs	r2, r3
 8005880:	4b02      	ldr	r3, [pc, #8]	; (800588c <btnStartTimer+0x28>)
 8005882:	701a      	strb	r2, [r3, #0]

}
 8005884:	46c0      	nop			; (mov r8, r8)
 8005886:	46bd      	mov	sp, r7
 8005888:	b002      	add	sp, #8
 800588a:	bd80      	pop	{r7, pc}
 800588c:	2000022a 	.word	0x2000022a

08005890 <joysticHandler>:


/**************** PRIVATE FUNCTIONS ******************/

static void joysticHandler(ELEMENT *element)
{
 8005890:	b5b0      	push	{r4, r5, r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af06      	add	r7, sp, #24
 8005896:	6078      	str	r0, [r7, #4]

	/*
	if(!HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin))
	{
	*/
	if(!HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin))
 8005898:	2380      	movs	r3, #128	; 0x80
 800589a:	011a      	lsls	r2, r3, #4
 800589c:	2390      	movs	r3, #144	; 0x90
 800589e:	05db      	lsls	r3, r3, #23
 80058a0:	0011      	movs	r1, r2
 80058a2:	0018      	movs	r0, r3
 80058a4:	f002 f85c 	bl	8007960 <HAL_GPIO_ReadPin>
 80058a8:	1e03      	subs	r3, r0, #0
 80058aa:	d16c      	bne.n	8005986 <joysticHandler+0xf6>
	{

		joystick = UP;
 80058ac:	4bd2      	ldr	r3, [pc, #840]	; (8005bf8 <joysticHandler+0x368>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	701a      	strb	r2, [r3, #0]

		if(joystick_old == REST)
 80058b2:	4bd2      	ldr	r3, [pc, #840]	; (8005bfc <joysticHandler+0x36c>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d161      	bne.n	800597e <joysticHandler+0xee>
		{

			if(( element[elementIndex].elemtentType == EDITNUMBOX ) && ( element[elementIndex].nBox.boxNum < 14 ))
 80058ba:	4bd1      	ldr	r3, [pc, #836]	; (8005c00 <joysticHandler+0x370>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	001a      	movs	r2, r3
 80058c0:	0013      	movs	r3, r2
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	001a      	movs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	189b      	adds	r3, r3, r2
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d12d      	bne.n	8005930 <joysticHandler+0xa0>
 80058d4:	4bca      	ldr	r3, [pc, #808]	; (8005c00 <joysticHandler+0x370>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	001a      	movs	r2, r3
 80058da:	0013      	movs	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	189b      	adds	r3, r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	001a      	movs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	189b      	adds	r3, r3, r2
 80058e8:	2220      	movs	r2, #32
 80058ea:	5c9b      	ldrb	r3, [r3, r2]
 80058ec:	2b0d      	cmp	r3, #13
 80058ee:	d81f      	bhi.n	8005930 <joysticHandler+0xa0>
			{

				element[elementIndex].nBox.boxNum++;
 80058f0:	4bc3      	ldr	r3, [pc, #780]	; (8005c00 <joysticHandler+0x370>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	001a      	movs	r2, r3
 80058f6:	0013      	movs	r3, r2
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	189b      	adds	r3, r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	001a      	movs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	189b      	adds	r3, r3, r2
 8005904:	2220      	movs	r2, #32
 8005906:	5c9a      	ldrb	r2, [r3, r2]
 8005908:	3201      	adds	r2, #1
 800590a:	b2d1      	uxtb	r1, r2
 800590c:	2220      	movs	r2, #32
 800590e:	5499      	strb	r1, [r3, r2]
				modifyNumBox(element[elementIndex].nBox);
 8005910:	4bbb      	ldr	r3, [pc, #748]	; (8005c00 <joysticHandler+0x370>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	001a      	movs	r2, r3
 8005916:	0013      	movs	r3, r2
 8005918:	00db      	lsls	r3, r3, #3
 800591a:	189b      	adds	r3, r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	001a      	movs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	189b      	adds	r3, r3, r2
 8005924:	6998      	ldr	r0, [r3, #24]
 8005926:	69d9      	ldr	r1, [r3, #28]
 8005928:	6a1a      	ldr	r2, [r3, #32]
 800592a:	f7fe ff6f 	bl	800480c <modifyNumBox>
 800592e:	e026      	b.n	800597e <joysticHandler+0xee>

			}
			else
			{

				elementIndex--;
 8005930:	4bb3      	ldr	r3, [pc, #716]	; (8005c00 <joysticHandler+0x370>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	3b01      	subs	r3, #1
 8005936:	b2da      	uxtb	r2, r3
 8005938:	4bb1      	ldr	r3, [pc, #708]	; (8005c00 <joysticHandler+0x370>)
 800593a:	701a      	strb	r2, [r3, #0]

				if(( elementIndex >= elementIndexLim ) || ( elementIndex < 0 ))
 800593c:	4bb0      	ldr	r3, [pc, #704]	; (8005c00 <joysticHandler+0x370>)
 800593e:	781a      	ldrb	r2, [r3, #0]
 8005940:	4bb0      	ldr	r3, [pc, #704]	; (8005c04 <joysticHandler+0x374>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d302      	bcc.n	800594e <joysticHandler+0xbe>
					elementIndex = 0;
 8005948:	4bad      	ldr	r3, [pc, #692]	; (8005c00 <joysticHandler+0x370>)
 800594a:	2200      	movs	r2, #0
 800594c:	701a      	strb	r2, [r3, #0]

				targetElement(element[elementIndex]);
 800594e:	4bac      	ldr	r3, [pc, #688]	; (8005c00 <joysticHandler+0x370>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	001a      	movs	r2, r3
 8005954:	0013      	movs	r3, r2
 8005956:	00db      	lsls	r3, r3, #3
 8005958:	189b      	adds	r3, r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	001a      	movs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	189b      	adds	r3, r3, r2
 8005962:	466a      	mov	r2, sp
 8005964:	0011      	movs	r1, r2
 8005966:	001a      	movs	r2, r3
 8005968:	3210      	adds	r2, #16
 800596a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800596c:	c131      	stmia	r1!, {r0, r4, r5}
 800596e:	ca11      	ldmia	r2!, {r0, r4}
 8005970:	c111      	stmia	r1!, {r0, r4}
 8005972:	6818      	ldr	r0, [r3, #0]
 8005974:	6859      	ldr	r1, [r3, #4]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f7ff f841 	bl	8004a00 <targetElement>

			}

		}

		HAL_Delay(200);
 800597e:	20c8      	movs	r0, #200	; 0xc8
 8005980:	f001 f88a 	bl	8006a98 <HAL_Delay>
 8005984:	e130      	b.n	8005be8 <joysticHandler+0x358>

	}
	else if(!HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin))
 8005986:	2380      	movs	r3, #128	; 0x80
 8005988:	01db      	lsls	r3, r3, #7
 800598a:	4a9f      	ldr	r2, [pc, #636]	; (8005c08 <joysticHandler+0x378>)
 800598c:	0019      	movs	r1, r3
 800598e:	0010      	movs	r0, r2
 8005990:	f001 ffe6 	bl	8007960 <HAL_GPIO_ReadPin>
 8005994:	1e03      	subs	r3, r0, #0
 8005996:	d16f      	bne.n	8005a78 <joysticHandler+0x1e8>
	{

		joystick = DOWN;
 8005998:	4b97      	ldr	r3, [pc, #604]	; (8005bf8 <joysticHandler+0x368>)
 800599a:	2202      	movs	r2, #2
 800599c:	701a      	strb	r2, [r3, #0]

		if(joystick_old == REST)
 800599e:	4b97      	ldr	r3, [pc, #604]	; (8005bfc <joysticHandler+0x36c>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d164      	bne.n	8005a70 <joysticHandler+0x1e0>
		{

			if(( element[elementIndex].elemtentType == EDITNUMBOX )  && ( element[elementIndex].nBox.boxNum > 0 ))
 80059a6:	4b96      	ldr	r3, [pc, #600]	; (8005c00 <joysticHandler+0x370>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	001a      	movs	r2, r3
 80059ac:	0013      	movs	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	189b      	adds	r3, r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	001a      	movs	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	189b      	adds	r3, r3, r2
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d12d      	bne.n	8005a1c <joysticHandler+0x18c>
 80059c0:	4b8f      	ldr	r3, [pc, #572]	; (8005c00 <joysticHandler+0x370>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	001a      	movs	r2, r3
 80059c6:	0013      	movs	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	189b      	adds	r3, r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	001a      	movs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	2220      	movs	r2, #32
 80059d6:	5c9b      	ldrb	r3, [r3, r2]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d01f      	beq.n	8005a1c <joysticHandler+0x18c>
			{

				element[elementIndex].nBox.boxNum--;
 80059dc:	4b88      	ldr	r3, [pc, #544]	; (8005c00 <joysticHandler+0x370>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	001a      	movs	r2, r3
 80059e2:	0013      	movs	r3, r2
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	189b      	adds	r3, r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	001a      	movs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	2220      	movs	r2, #32
 80059f2:	5c9a      	ldrb	r2, [r3, r2]
 80059f4:	3a01      	subs	r2, #1
 80059f6:	b2d1      	uxtb	r1, r2
 80059f8:	2220      	movs	r2, #32
 80059fa:	5499      	strb	r1, [r3, r2]
				modifyNumBox(element[elementIndex].nBox);
 80059fc:	4b80      	ldr	r3, [pc, #512]	; (8005c00 <joysticHandler+0x370>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	001a      	movs	r2, r3
 8005a02:	0013      	movs	r3, r2
 8005a04:	00db      	lsls	r3, r3, #3
 8005a06:	189b      	adds	r3, r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	001a      	movs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	189b      	adds	r3, r3, r2
 8005a10:	6998      	ldr	r0, [r3, #24]
 8005a12:	69d9      	ldr	r1, [r3, #28]
 8005a14:	6a1a      	ldr	r2, [r3, #32]
 8005a16:	f7fe fef9 	bl	800480c <modifyNumBox>
 8005a1a:	e029      	b.n	8005a70 <joysticHandler+0x1e0>

			}
			else
			{

				elementIndex++;
 8005a1c:	4b78      	ldr	r3, [pc, #480]	; (8005c00 <joysticHandler+0x370>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	3301      	adds	r3, #1
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	4b76      	ldr	r3, [pc, #472]	; (8005c00 <joysticHandler+0x370>)
 8005a26:	701a      	strb	r2, [r3, #0]

				if(( elementIndex >= elementIndexLim ) || ( elementIndex < 0 ))
 8005a28:	4b75      	ldr	r3, [pc, #468]	; (8005c00 <joysticHandler+0x370>)
 8005a2a:	781a      	ldrb	r2, [r3, #0]
 8005a2c:	4b75      	ldr	r3, [pc, #468]	; (8005c04 <joysticHandler+0x374>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d305      	bcc.n	8005a40 <joysticHandler+0x1b0>
					elementIndex = ( elementIndexLim - 1 );
 8005a34:	4b73      	ldr	r3, [pc, #460]	; (8005c04 <joysticHandler+0x374>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	4b70      	ldr	r3, [pc, #448]	; (8005c00 <joysticHandler+0x370>)
 8005a3e:	701a      	strb	r2, [r3, #0]

				targetElement(element[elementIndex]);
 8005a40:	4b6f      	ldr	r3, [pc, #444]	; (8005c00 <joysticHandler+0x370>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	001a      	movs	r2, r3
 8005a46:	0013      	movs	r3, r2
 8005a48:	00db      	lsls	r3, r3, #3
 8005a4a:	189b      	adds	r3, r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	001a      	movs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	189b      	adds	r3, r3, r2
 8005a54:	466a      	mov	r2, sp
 8005a56:	0011      	movs	r1, r2
 8005a58:	001a      	movs	r2, r3
 8005a5a:	3210      	adds	r2, #16
 8005a5c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005a5e:	c131      	stmia	r1!, {r0, r4, r5}
 8005a60:	ca11      	ldmia	r2!, {r0, r4}
 8005a62:	c111      	stmia	r1!, {r0, r4}
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	6859      	ldr	r1, [r3, #4]
 8005a68:	689a      	ldr	r2, [r3, #8]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f7fe ffc8 	bl	8004a00 <targetElement>

			}

		}

		HAL_Delay(200);
 8005a70:	20c8      	movs	r0, #200	; 0xc8
 8005a72:	f001 f811 	bl	8006a98 <HAL_Delay>
 8005a76:	e0b7      	b.n	8005be8 <joysticHandler+0x358>

	}
	else if(!HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin))
 8005a78:	2380      	movs	r3, #128	; 0x80
 8005a7a:	011a      	lsls	r2, r3, #4
 8005a7c:	2390      	movs	r3, #144	; 0x90
 8005a7e:	05db      	lsls	r3, r3, #23
 8005a80:	0011      	movs	r1, r2
 8005a82:	0018      	movs	r0, r3
 8005a84:	f001 ff6c 	bl	8007960 <HAL_GPIO_ReadPin>
 8005a88:	1e03      	subs	r3, r0, #0
 8005a8a:	d134      	bne.n	8005af6 <joysticHandler+0x266>
	{

		joystick = LEFT;
 8005a8c:	4b5a      	ldr	r3, [pc, #360]	; (8005bf8 <joysticHandler+0x368>)
 8005a8e:	2203      	movs	r2, #3
 8005a90:	701a      	strb	r2, [r3, #0]

		if(joystick_old == REST)
 8005a92:	4b5a      	ldr	r3, [pc, #360]	; (8005bfc <joysticHandler+0x36c>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d129      	bne.n	8005aee <joysticHandler+0x25e>
		{

			elementIndex--;
 8005a9a:	4b59      	ldr	r3, [pc, #356]	; (8005c00 <joysticHandler+0x370>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	4b57      	ldr	r3, [pc, #348]	; (8005c00 <joysticHandler+0x370>)
 8005aa4:	701a      	strb	r2, [r3, #0]

			if(( elementIndex >= elementIndexLim ) || ( elementIndex < 0 ))
 8005aa6:	4b56      	ldr	r3, [pc, #344]	; (8005c00 <joysticHandler+0x370>)
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	4b56      	ldr	r3, [pc, #344]	; (8005c04 <joysticHandler+0x374>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d305      	bcc.n	8005abe <joysticHandler+0x22e>
				elementIndex = ( elementIndexLim - 1 );
 8005ab2:	4b54      	ldr	r3, [pc, #336]	; (8005c04 <joysticHandler+0x374>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	4b51      	ldr	r3, [pc, #324]	; (8005c00 <joysticHandler+0x370>)
 8005abc:	701a      	strb	r2, [r3, #0]

			targetElement(element[elementIndex]);
 8005abe:	4b50      	ldr	r3, [pc, #320]	; (8005c00 <joysticHandler+0x370>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	0013      	movs	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	189b      	adds	r3, r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	001a      	movs	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	189b      	adds	r3, r3, r2
 8005ad2:	466a      	mov	r2, sp
 8005ad4:	0011      	movs	r1, r2
 8005ad6:	001a      	movs	r2, r3
 8005ad8:	3210      	adds	r2, #16
 8005ada:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005adc:	c131      	stmia	r1!, {r0, r4, r5}
 8005ade:	ca11      	ldmia	r2!, {r0, r4}
 8005ae0:	c111      	stmia	r1!, {r0, r4}
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
 8005ae6:	689a      	ldr	r2, [r3, #8]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	f7fe ff89 	bl	8004a00 <targetElement>

		}

		HAL_Delay(200);
 8005aee:	20c8      	movs	r0, #200	; 0xc8
 8005af0:	f000 ffd2 	bl	8006a98 <HAL_Delay>
 8005af4:	e078      	b.n	8005be8 <joysticHandler+0x358>

	}
	else if(!HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin))
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	00da      	lsls	r2, r3, #3
 8005afa:	2390      	movs	r3, #144	; 0x90
 8005afc:	05db      	lsls	r3, r3, #23
 8005afe:	0011      	movs	r1, r2
 8005b00:	0018      	movs	r0, r3
 8005b02:	f001 ff2d 	bl	8007960 <HAL_GPIO_ReadPin>
 8005b06:	1e03      	subs	r3, r0, #0
 8005b08:	d131      	bne.n	8005b6e <joysticHandler+0x2de>
	{

		joystick = RIGHT;
 8005b0a:	4b3b      	ldr	r3, [pc, #236]	; (8005bf8 <joysticHandler+0x368>)
 8005b0c:	2204      	movs	r2, #4
 8005b0e:	701a      	strb	r2, [r3, #0]

		if(joystick_old == REST)
 8005b10:	4b3a      	ldr	r3, [pc, #232]	; (8005bfc <joysticHandler+0x36c>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d126      	bne.n	8005b66 <joysticHandler+0x2d6>
		{

			elementIndex++;
 8005b18:	4b39      	ldr	r3, [pc, #228]	; (8005c00 <joysticHandler+0x370>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	4b37      	ldr	r3, [pc, #220]	; (8005c00 <joysticHandler+0x370>)
 8005b22:	701a      	strb	r2, [r3, #0]

			if(( elementIndex >= elementIndexLim ) || ( elementIndex < 0 ))
 8005b24:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <joysticHandler+0x370>)
 8005b26:	781a      	ldrb	r2, [r3, #0]
 8005b28:	4b36      	ldr	r3, [pc, #216]	; (8005c04 <joysticHandler+0x374>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d302      	bcc.n	8005b36 <joysticHandler+0x2a6>
				elementIndex = 0;
 8005b30:	4b33      	ldr	r3, [pc, #204]	; (8005c00 <joysticHandler+0x370>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	701a      	strb	r2, [r3, #0]

			targetElement(element[elementIndex]);
 8005b36:	4b32      	ldr	r3, [pc, #200]	; (8005c00 <joysticHandler+0x370>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	001a      	movs	r2, r3
 8005b3c:	0013      	movs	r3, r2
 8005b3e:	00db      	lsls	r3, r3, #3
 8005b40:	189b      	adds	r3, r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	001a      	movs	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	189b      	adds	r3, r3, r2
 8005b4a:	466a      	mov	r2, sp
 8005b4c:	0011      	movs	r1, r2
 8005b4e:	001a      	movs	r2, r3
 8005b50:	3210      	adds	r2, #16
 8005b52:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005b54:	c131      	stmia	r1!, {r0, r4, r5}
 8005b56:	ca11      	ldmia	r2!, {r0, r4}
 8005b58:	c111      	stmia	r1!, {r0, r4}
 8005b5a:	6818      	ldr	r0, [r3, #0]
 8005b5c:	6859      	ldr	r1, [r3, #4]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	f7fe ff4d 	bl	8004a00 <targetElement>

		}

		HAL_Delay(200);
 8005b66:	20c8      	movs	r0, #200	; 0xc8
 8005b68:	f000 ff96 	bl	8006a98 <HAL_Delay>
 8005b6c:	e03c      	b.n	8005be8 <joysticHandler+0x358>

	}
	else if(!HAL_GPIO_ReadPin(SEL_GPIO_Port, SEL_Pin))
 8005b6e:	2380      	movs	r3, #128	; 0x80
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	2390      	movs	r3, #144	; 0x90
 8005b74:	05db      	lsls	r3, r3, #23
 8005b76:	0011      	movs	r1, r2
 8005b78:	0018      	movs	r0, r3
 8005b7a:	f001 fef1 	bl	8007960 <HAL_GPIO_ReadPin>
 8005b7e:	1e03      	subs	r3, r0, #0
 8005b80:	d12f      	bne.n	8005be2 <joysticHandler+0x352>
	{

		joystick = CENTER;
 8005b82:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <joysticHandler+0x368>)
 8005b84:	2205      	movs	r2, #5
 8005b86:	701a      	strb	r2, [r3, #0]

		if(joystick_old == REST)
 8005b88:	4b1c      	ldr	r3, [pc, #112]	; (8005bfc <joysticHandler+0x36c>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d124      	bne.n	8005bda <joysticHandler+0x34a>
		{

			if(element[elementIndex].elemtentType == BUTTON)
 8005b90:	4b1b      	ldr	r3, [pc, #108]	; (8005c00 <joysticHandler+0x370>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	001a      	movs	r2, r3
 8005b96:	0013      	movs	r3, r2
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	189b      	adds	r3, r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	001a      	movs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	189b      	adds	r3, r3, r2
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d117      	bne.n	8005bda <joysticHandler+0x34a>
				element[elementIndex].btn.btnAction(&element[elementIndex].btn);
 8005baa:	4b15      	ldr	r3, [pc, #84]	; (8005c00 <joysticHandler+0x370>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	001a      	movs	r2, r3
 8005bb0:	0013      	movs	r3, r2
 8005bb2:	00db      	lsls	r3, r3, #3
 8005bb4:	189b      	adds	r3, r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	001a      	movs	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	189b      	adds	r3, r3, r2
 8005bbe:	691a      	ldr	r2, [r3, #16]
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <joysticHandler+0x370>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	0019      	movs	r1, r3
 8005bc6:	000b      	movs	r3, r1
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	185b      	adds	r3, r3, r1
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	0019      	movs	r1, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	185b      	adds	r3, r3, r1
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	4790      	blx	r2

		}

		HAL_Delay(200);
 8005bda:	20c8      	movs	r0, #200	; 0xc8
 8005bdc:	f000 ff5c 	bl	8006a98 <HAL_Delay>
 8005be0:	e002      	b.n	8005be8 <joysticHandler+0x358>

	}
	else
	{

		joystick = REST;
 8005be2:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <joysticHandler+0x368>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	701a      	strb	r2, [r3, #0]

	}

	joystick_old = joystick;
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <joysticHandler+0x368>)
 8005bea:	781a      	ldrb	r2, [r3, #0]
 8005bec:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <joysticHandler+0x36c>)
 8005bee:	701a      	strb	r2, [r3, #0]

}
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b002      	add	sp, #8
 8005bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf8:	20000140 	.word	0x20000140
 8005bfc:	20000289 	.word	0x20000289
 8005c00:	20000220 	.word	0x20000220
 8005c04:	20000221 	.word	0x20000221
 8005c08:	48000800 	.word	0x48000800

08005c0c <processStatus_update>:


static uint8_t processStatus_update(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0

	static PROCESS_STATUS local_process_status = IDLE_PROCESS;


	if(HAL_GPIO_ReadPin(OPAMP_CALIB_GPIO_Port, OPAMP_CALIB_Pin) == 0)
 8005c10:	2380      	movs	r3, #128	; 0x80
 8005c12:	015b      	lsls	r3, r3, #5
 8005c14:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <processStatus_update+0x5c>)
 8005c16:	0019      	movs	r1, r3
 8005c18:	0010      	movs	r0, r2
 8005c1a:	f001 fea1 	bl	8007960 <HAL_GPIO_ReadPin>
 8005c1e:	1e03      	subs	r3, r0, #0
 8005c20:	d103      	bne.n	8005c2a <processStatus_update+0x1e>
		process_status = HW_PROCESS;
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <processStatus_update+0x60>)
 8005c24:	2208      	movs	r2, #8
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e004      	b.n	8005c34 <processStatus_update+0x28>
	else
		process_status = newPageFlags;
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <processStatus_update+0x64>)
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <processStatus_update+0x60>)
 8005c32:	701a      	strb	r2, [r3, #0]

	if(local_process_status != process_status)
 8005c34:	4b0f      	ldr	r3, [pc, #60]	; (8005c74 <processStatus_update+0x68>)
 8005c36:	781a      	ldrb	r2, [r3, #0]
 8005c38:	4b0c      	ldr	r3, [pc, #48]	; (8005c6c <processStatus_update+0x60>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d00b      	beq.n	8005c58 <processStatus_update+0x4c>
	{

		local_process_status = process_status;
 8005c40:	4b0a      	ldr	r3, [pc, #40]	; (8005c6c <processStatus_update+0x60>)
 8005c42:	781a      	ldrb	r2, [r3, #0]
 8005c44:	4b0b      	ldr	r3, [pc, #44]	; (8005c74 <processStatus_update+0x68>)
 8005c46:	701a      	strb	r2, [r3, #0]
		elementIndex = 0;
 8005c48:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <processStatus_update+0x6c>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	701a      	strb	r2, [r3, #0]
		timerOn = 0;
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <processStatus_update+0x70>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	701a      	strb	r2, [r3, #0]

		return 1;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e004      	b.n	8005c62 <processStatus_update+0x56>

	}
	else
	{

		local_process_status = process_status;
 8005c58:	4b04      	ldr	r3, [pc, #16]	; (8005c6c <processStatus_update+0x60>)
 8005c5a:	781a      	ldrb	r2, [r3, #0]
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <processStatus_update+0x68>)
 8005c5e:	701a      	strb	r2, [r3, #0]
		return 0;
 8005c60:	2300      	movs	r3, #0

	}

}
 8005c62:	0018      	movs	r0, r3
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	48000400 	.word	0x48000400
 8005c6c:	20000020 	.word	0x20000020
 8005c70:	20000022 	.word	0x20000022
 8005c74:	2000003d 	.word	0x2000003d
 8005c78:	20000220 	.word	0x20000220
 8005c7c:	2000022a 	.word	0x2000022a

08005c80 <pHStatus_update>:


static void pHStatus_update(void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0

	if(pH_current >= STRONG_BASE_THR)
 8005c84:	4b23      	ldr	r3, [pc, #140]	; (8005d14 <pHStatus_update+0x94>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4923      	ldr	r1, [pc, #140]	; (8005d18 <pHStatus_update+0x98>)
 8005c8a:	1c18      	adds	r0, r3, #0
 8005c8c:	f7fa fc1e 	bl	80004cc <__aeabi_fcmpge>
 8005c90:	1e03      	subs	r3, r0, #0
 8005c92:	d003      	beq.n	8005c9c <pHStatus_update+0x1c>
		pH_status = STRONG_BASE;
 8005c94:	4b21      	ldr	r3, [pc, #132]	; (8005d1c <pHStatus_update+0x9c>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	701a      	strb	r2, [r3, #0]
	else if(pH_current <= STRONG_ACID_THR)
		pH_status = STRONG_ACID;
	else
		pH_status = NEUTRAL;

}
 8005c9a:	e037      	b.n	8005d0c <pHStatus_update+0x8c>
	else if(( pH_current > BASE_THR ) && ( pH_current < STRONG_BASE_THR ))
 8005c9c:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <pHStatus_update+0x94>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	491f      	ldr	r1, [pc, #124]	; (8005d20 <pHStatus_update+0xa0>)
 8005ca2:	1c18      	adds	r0, r3, #0
 8005ca4:	f7fa fc08 	bl	80004b8 <__aeabi_fcmpgt>
 8005ca8:	1e03      	subs	r3, r0, #0
 8005caa:	d00b      	beq.n	8005cc4 <pHStatus_update+0x44>
 8005cac:	4b19      	ldr	r3, [pc, #100]	; (8005d14 <pHStatus_update+0x94>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4919      	ldr	r1, [pc, #100]	; (8005d18 <pHStatus_update+0x98>)
 8005cb2:	1c18      	adds	r0, r3, #0
 8005cb4:	f7fa fbec 	bl	8000490 <__aeabi_fcmplt>
 8005cb8:	1e03      	subs	r3, r0, #0
 8005cba:	d003      	beq.n	8005cc4 <pHStatus_update+0x44>
		pH_status = BASE;
 8005cbc:	4b17      	ldr	r3, [pc, #92]	; (8005d1c <pHStatus_update+0x9c>)
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	701a      	strb	r2, [r3, #0]
 8005cc2:	e023      	b.n	8005d0c <pHStatus_update+0x8c>
	else if(( pH_current > STRONG_ACID_THR ) && ( pH_current < ACID_THR ))
 8005cc4:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <pHStatus_update+0x94>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4916      	ldr	r1, [pc, #88]	; (8005d24 <pHStatus_update+0xa4>)
 8005cca:	1c18      	adds	r0, r3, #0
 8005ccc:	f7fa fbf4 	bl	80004b8 <__aeabi_fcmpgt>
 8005cd0:	1e03      	subs	r3, r0, #0
 8005cd2:	d00b      	beq.n	8005cec <pHStatus_update+0x6c>
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <pHStatus_update+0x94>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4913      	ldr	r1, [pc, #76]	; (8005d28 <pHStatus_update+0xa8>)
 8005cda:	1c18      	adds	r0, r3, #0
 8005cdc:	f7fa fbd8 	bl	8000490 <__aeabi_fcmplt>
 8005ce0:	1e03      	subs	r3, r0, #0
 8005ce2:	d003      	beq.n	8005cec <pHStatus_update+0x6c>
		pH_status = ACID;
 8005ce4:	4b0d      	ldr	r3, [pc, #52]	; (8005d1c <pHStatus_update+0x9c>)
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	701a      	strb	r2, [r3, #0]
 8005cea:	e00f      	b.n	8005d0c <pHStatus_update+0x8c>
	else if(pH_current <= STRONG_ACID_THR)
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <pHStatus_update+0x94>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	490c      	ldr	r1, [pc, #48]	; (8005d24 <pHStatus_update+0xa4>)
 8005cf2:	1c18      	adds	r0, r3, #0
 8005cf4:	f7fa fbd6 	bl	80004a4 <__aeabi_fcmple>
 8005cf8:	1e03      	subs	r3, r0, #0
 8005cfa:	d003      	beq.n	8005d04 <pHStatus_update+0x84>
		pH_status = STRONG_ACID;
 8005cfc:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <pHStatus_update+0x9c>)
 8005cfe:	2205      	movs	r2, #5
 8005d00:	701a      	strb	r2, [r3, #0]
}
 8005d02:	e003      	b.n	8005d0c <pHStatus_update+0x8c>
		pH_status = NEUTRAL;
 8005d04:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <pHStatus_update+0x9c>)
 8005d06:	2203      	movs	r2, #3
 8005d08:	701a      	strb	r2, [r3, #0]
}
 8005d0a:	e7ff      	b.n	8005d0c <pHStatus_update+0x8c>
 8005d0c:	46c0      	nop			; (mov r8, r8)
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	2000001c 	.word	0x2000001c
 8005d18:	41280000 	.word	0x41280000
 8005d1c:	20000021 	.word	0x20000021
 8005d20:	41080000 	.word	0x41080000
 8005d24:	40600000 	.word	0x40600000
 8005d28:	40b00000 	.word	0x40b00000

08005d2c <mainPage_graphics>:


static void mainPage_graphics(void)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b08f      	sub	sp, #60	; 0x3c
 8005d30:	af04      	add	r7, sp, #16

	// 1. Title
	pageTitle_graphics("Current pH", MAIN_PAGE);
 8005d32:	4b13      	ldr	r3, [pc, #76]	; (8005d80 <mainPage_graphics+0x54>)
 8005d34:	2102      	movs	r1, #2
 8005d36:	0018      	movs	r0, r3
 8005d38:	f000 f8e0 	bl	8005efc <pageTitle_graphics>

	// 2. Color scale
	colorBar_graphics();
 8005d3c:	f000 f97a 	bl	8006034 <colorBar_graphics>

	// 3. Buttons
	mainElement[0].elemtentType = NONE;
 8005d40:	4b10      	ldr	r3, [pc, #64]	; (8005d84 <mainPage_graphics+0x58>)
 8005d42:	2200      	movs	r2, #0
 8005d44:	701a      	strb	r2, [r3, #0]
	mainElement[1] = createButton(MAIN_TO_SWCALIB_BTN_POSX, MAIN_TO_SWCALIB_BTN_POSY, "CAL", GRAY, BLACK, btnSwitchPage, SW_PROCESS);
 8005d46:	4c0f      	ldr	r4, [pc, #60]	; (8005d84 <mainPage_graphics+0x58>)
 8005d48:	0038      	movs	r0, r7
 8005d4a:	4a0f      	ldr	r2, [pc, #60]	; (8005d88 <mainPage_graphics+0x5c>)
 8005d4c:	2304      	movs	r3, #4
 8005d4e:	9303      	str	r3, [sp, #12]
 8005d50:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <mainPage_graphics+0x60>)
 8005d52:	9302      	str	r3, [sp, #8]
 8005d54:	2300      	movs	r3, #0
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	4b0d      	ldr	r3, [pc, #52]	; (8005d90 <mainPage_graphics+0x64>)
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	0013      	movs	r3, r2
 8005d5e:	2268      	movs	r2, #104	; 0x68
 8005d60:	2132      	movs	r1, #50	; 0x32
 8005d62:	f7fe fbdd 	bl	8004520 <createButton>
 8005d66:	003a      	movs	r2, r7
 8005d68:	0023      	movs	r3, r4
 8005d6a:	3324      	adds	r3, #36	; 0x24
 8005d6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d6e:	c313      	stmia	r3!, {r0, r1, r4}
 8005d70:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d72:	c313      	stmia	r3!, {r0, r1, r4}
 8005d74:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d76:	c313      	stmia	r3!, {r0, r1, r4}

}
 8005d78:	46c0      	nop			; (mov r8, r8)
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b00b      	add	sp, #44	; 0x2c
 8005d7e:	bd90      	pop	{r4, r7, pc}
 8005d80:	08008a38 	.word	0x08008a38
 8005d84:	200001d8 	.word	0x200001d8
 8005d88:	08008a44 	.word	0x08008a44
 8005d8c:	08005841 	.word	0x08005841
 8005d90:	00009cd3 	.word	0x00009cd3

08005d94 <circuitCalibPage_graphics>:


static void circuitCalibPage_graphics(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0

	// 1. Title
	pageTitle_graphics("HW calibration", CIRCUIT_CALIBRATION_PAGE);
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <circuitCalibPage_graphics+0x20>)
 8005d9a:	2108      	movs	r1, #8
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f000 f8ad 	bl	8005efc <pageTitle_graphics>

	// 2. Offset indicators
	orizzIndicators_graphics(RED);
 8005da2:	23f8      	movs	r3, #248	; 0xf8
 8005da4:	021b      	lsls	r3, r3, #8
 8005da6:	0018      	movs	r0, r3
 8005da8:	f000 f9f8 	bl	800619c <orizzIndicators_graphics>

}
 8005dac:	46c0      	nop			; (mov r8, r8)
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	46c0      	nop			; (mov r8, r8)
 8005db4:	08008a48 	.word	0x08008a48

08005db8 <softwareCalibPage_graphics>:


static void softwareCalibPage_graphics(void)
{
 8005db8:	b590      	push	{r4, r7, lr}
 8005dba:	b091      	sub	sp, #68	; 0x44
 8005dbc:	af04      	add	r7, sp, #16

	// 1. Title
	pageTitle_graphics("SW calibration", SOFTWARE_CALIBRATION_PAGE);
 8005dbe:	4b43      	ldr	r3, [pc, #268]	; (8005ecc <softwareCalibPage_graphics+0x114>)
 8005dc0:	2104      	movs	r1, #4
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f000 f89a 	bl	8005efc <pageTitle_graphics>

	// 2. Timer
	char sTimer[] = {'9', 0};
 8005dc8:	242c      	movs	r4, #44	; 0x2c
 8005dca:	193b      	adds	r3, r7, r4
 8005dcc:	2239      	movs	r2, #57	; 0x39
 8005dce:	801a      	strh	r2, [r3, #0]
	ST7735_WriteString(5, 35, "TIMER", Font_11x18, WHITE, BLACK);
 8005dd0:	4b3f      	ldr	r3, [pc, #252]	; (8005ed0 <softwareCalibPage_graphics+0x118>)
 8005dd2:	4840      	ldr	r0, [pc, #256]	; (8005ed4 <softwareCalibPage_graphics+0x11c>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	9202      	str	r2, [sp, #8]
 8005dd8:	4a3f      	ldr	r2, [pc, #252]	; (8005ed8 <softwareCalibPage_graphics+0x120>)
 8005dda:	9201      	str	r2, [sp, #4]
 8005ddc:	466a      	mov	r2, sp
 8005dde:	6859      	ldr	r1, [r3, #4]
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	0002      	movs	r2, r0
 8005de6:	2123      	movs	r1, #35	; 0x23
 8005de8:	2005      	movs	r0, #5
 8005dea:	f7fe fa57 	bl	800429c <ST7735_WriteString>
	ST7735_WriteString(SWCALIB_TIMER_POSX, SWCALIB_TIMER_POSY, sTimer, Font_11x18, WHITE, BLACK);
 8005dee:	4b38      	ldr	r3, [pc, #224]	; (8005ed0 <softwareCalibPage_graphics+0x118>)
 8005df0:	1938      	adds	r0, r7, r4
 8005df2:	2200      	movs	r2, #0
 8005df4:	9202      	str	r2, [sp, #8]
 8005df6:	4a38      	ldr	r2, [pc, #224]	; (8005ed8 <softwareCalibPage_graphics+0x120>)
 8005df8:	9201      	str	r2, [sp, #4]
 8005dfa:	466a      	mov	r2, sp
 8005dfc:	6859      	ldr	r1, [r3, #4]
 8005dfe:	6011      	str	r1, [r2, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	0002      	movs	r2, r0
 8005e04:	2137      	movs	r1, #55	; 0x37
 8005e06:	2014      	movs	r0, #20
 8005e08:	f7fe fa48 	bl	800429c <ST7735_WriteString>

	// 3. Point number
	ST7735_WriteString(SWCALIB_PT_NUM_POSX, SWCALIB_PT_NUM_POSY, "PT.1", Font_11x18, WHITE, BLACK);
 8005e0c:	4b30      	ldr	r3, [pc, #192]	; (8005ed0 <softwareCalibPage_graphics+0x118>)
 8005e0e:	4833      	ldr	r0, [pc, #204]	; (8005edc <softwareCalibPage_graphics+0x124>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	9202      	str	r2, [sp, #8]
 8005e14:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <softwareCalibPage_graphics+0x120>)
 8005e16:	9201      	str	r2, [sp, #4]
 8005e18:	466a      	mov	r2, sp
 8005e1a:	6859      	ldr	r1, [r3, #4]
 8005e1c:	6011      	str	r1, [r2, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	0002      	movs	r2, r0
 8005e22:	2168      	movs	r1, #104	; 0x68
 8005e24:	203c      	movs	r0, #60	; 0x3c
 8005e26:	f7fe fa39 	bl	800429c <ST7735_WriteString>

	// 4. First element always NULL
	swCalibElement[0].elemtentType = NONE;
 8005e2a:	4b2d      	ldr	r3, [pc, #180]	; (8005ee0 <softwareCalibPage_graphics+0x128>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]

	// 5. Home button
	swCalibElement[1] = createButton(HOME_BTN_POSX, HOME_BTN_POSY, "<-", GRAY, GRAY, btnSwitchPage, 2);
 8005e30:	4c2b      	ldr	r4, [pc, #172]	; (8005ee0 <softwareCalibPage_graphics+0x128>)
 8005e32:	0038      	movs	r0, r7
 8005e34:	4a2b      	ldr	r2, [pc, #172]	; (8005ee4 <softwareCalibPage_graphics+0x12c>)
 8005e36:	2302      	movs	r3, #2
 8005e38:	9303      	str	r3, [sp, #12]
 8005e3a:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <softwareCalibPage_graphics+0x130>)
 8005e3c:	9302      	str	r3, [sp, #8]
 8005e3e:	4b2b      	ldr	r3, [pc, #172]	; (8005eec <softwareCalibPage_graphics+0x134>)
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	4b2a      	ldr	r3, [pc, #168]	; (8005eec <softwareCalibPage_graphics+0x134>)
 8005e44:	9300      	str	r3, [sp, #0]
 8005e46:	0013      	movs	r3, r2
 8005e48:	2268      	movs	r2, #104	; 0x68
 8005e4a:	210c      	movs	r1, #12
 8005e4c:	f7fe fb68 	bl	8004520 <createButton>
 8005e50:	003a      	movs	r2, r7
 8005e52:	0023      	movs	r3, r4
 8005e54:	3324      	adds	r3, #36	; 0x24
 8005e56:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005e58:	c313      	stmia	r3!, {r0, r1, r4}
 8005e5a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005e5c:	c313      	stmia	r3!, {r0, r1, r4}
 8005e5e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005e60:	c313      	stmia	r3!, {r0, r1, r4}

	// 6. pH buffer
	swCalibElement[2] = createEditNumBox(PH_BUFFER_TEXT_POSX, PH_BUFFER_TEXT_POSY, "pH BUFF", BLACK, 0, BLACK);
 8005e62:	4c1f      	ldr	r4, [pc, #124]	; (8005ee0 <softwareCalibPage_graphics+0x128>)
 8005e64:	0038      	movs	r0, r7
 8005e66:	4b22      	ldr	r3, [pc, #136]	; (8005ef0 <softwareCalibPage_graphics+0x138>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	9202      	str	r2, [sp, #8]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	9201      	str	r2, [sp, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	9200      	str	r2, [sp, #0]
 8005e74:	2223      	movs	r2, #35	; 0x23
 8005e76:	2150      	movs	r1, #80	; 0x50
 8005e78:	f7fe fbf8 	bl	800466c <createEditNumBox>
 8005e7c:	003a      	movs	r2, r7
 8005e7e:	0023      	movs	r3, r4
 8005e80:	3348      	adds	r3, #72	; 0x48
 8005e82:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005e84:	c313      	stmia	r3!, {r0, r1, r4}
 8005e86:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005e88:	c313      	stmia	r3!, {r0, r1, r4}
 8005e8a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005e8c:	c313      	stmia	r3!, {r0, r1, r4}

	// 7. Buttons
	swCalibElement[3] = createButton(PH_BUFFER_START_BTN_POSX, PH_BUFFER_START_BTN_POSY, "START/STOP", RED, GREEN, btnStartTimer, 0);
 8005e8e:	4c14      	ldr	r4, [pc, #80]	; (8005ee0 <softwareCalibPage_graphics+0x128>)
 8005e90:	0038      	movs	r0, r7
 8005e92:	4a18      	ldr	r2, [pc, #96]	; (8005ef4 <softwareCalibPage_graphics+0x13c>)
 8005e94:	2300      	movs	r3, #0
 8005e96:	9303      	str	r3, [sp, #12]
 8005e98:	4b17      	ldr	r3, [pc, #92]	; (8005ef8 <softwareCalibPage_graphics+0x140>)
 8005e9a:	9302      	str	r3, [sp, #8]
 8005e9c:	23fc      	movs	r3, #252	; 0xfc
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	23f8      	movs	r3, #248	; 0xf8
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	0013      	movs	r3, r2
 8005eaa:	2250      	movs	r2, #80	; 0x50
 8005eac:	2150      	movs	r1, #80	; 0x50
 8005eae:	f7fe fb37 	bl	8004520 <createButton>
 8005eb2:	003a      	movs	r2, r7
 8005eb4:	0023      	movs	r3, r4
 8005eb6:	336c      	adds	r3, #108	; 0x6c
 8005eb8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005eba:	c313      	stmia	r3!, {r0, r1, r4}
 8005ebc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ebe:	c313      	stmia	r3!, {r0, r1, r4}
 8005ec0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005ec2:	c313      	stmia	r3!, {r0, r1, r4}

}
 8005ec4:	46c0      	nop			; (mov r8, r8)
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	b00d      	add	sp, #52	; 0x34
 8005eca:	bd90      	pop	{r4, r7, pc}
 8005ecc:	08008a58 	.word	0x08008a58
 8005ed0:	20000008 	.word	0x20000008
 8005ed4:	08008a68 	.word	0x08008a68
 8005ed8:	0000ffff 	.word	0x0000ffff
 8005edc:	08008a70 	.word	0x08008a70
 8005ee0:	20000148 	.word	0x20000148
 8005ee4:	08008a78 	.word	0x08008a78
 8005ee8:	08005841 	.word	0x08005841
 8005eec:	00009cd3 	.word	0x00009cd3
 8005ef0:	08008a7c 	.word	0x08008a7c
 8005ef4:	08008a84 	.word	0x08008a84
 8005ef8:	08005865 	.word	0x08005865

08005efc <pageTitle_graphics>:

static void pageTitle_graphics(const char *title, uint8_t page)
{
 8005efc:	b590      	push	{r4, r7, lr}
 8005efe:	b089      	sub	sp, #36	; 0x24
 8005f00:	af04      	add	r7, sp, #16
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	000a      	movs	r2, r1
 8005f06:	1cfb      	adds	r3, r7, #3
 8005f08:	701a      	strb	r2, [r3, #0]
	 *   \						   /
	 *	  \-----------------------/
	 */


	uint8_t offset = 0;
 8005f0a:	210f      	movs	r1, #15
 8005f0c:	187b      	adds	r3, r7, r1
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]


	if(page == MAIN_PAGE)
 8005f12:	1cfb      	adds	r3, r7, #3
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d103      	bne.n	8005f22 <pageTitle_graphics+0x26>
		offset = 0;
 8005f1a:	187b      	adds	r3, r7, r1
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e015      	b.n	8005f4e <pageTitle_graphics+0x52>
	else if(page == CIRCUIT_CALIBRATION_PAGE)
 8005f22:	1cfb      	adds	r3, r7, #3
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d104      	bne.n	8005f34 <pageTitle_graphics+0x38>
		offset = 13;
 8005f2a:	230f      	movs	r3, #15
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	220d      	movs	r2, #13
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e00c      	b.n	8005f4e <pageTitle_graphics+0x52>
	else if(page == SOFTWARE_CALIBRATION_PAGE)
 8005f34:	1cfb      	adds	r3, r7, #3
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d104      	bne.n	8005f46 <pageTitle_graphics+0x4a>
		offset = 13;
 8005f3c:	230f      	movs	r3, #15
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	220d      	movs	r2, #13
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	e003      	b.n	8005f4e <pageTitle_graphics+0x52>
	else
		offset = 0;
 8005f46:	230f      	movs	r3, #15
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	701a      	strb	r2, [r3, #0]

	ST7735_SetRotation(1);
 8005f4e:	2001      	movs	r0, #1
 8005f50:	f7fe f830 	bl	8003fb4 <ST7735_SetRotation>

	fillTriangle(30-offset, 0, 50-offset, 0, 50-offset, 20, MAIN_COLOR);
 8005f54:	240f      	movs	r4, #15
 8005f56:	193b      	adds	r3, r7, r4
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	221e      	movs	r2, #30
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	b218      	sxth	r0, r3
 8005f64:	193b      	adds	r3, r7, r4
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	2232      	movs	r2, #50	; 0x32
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	b219      	sxth	r1, r3
 8005f72:	193b      	adds	r3, r7, r4
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	2232      	movs	r2, #50	; 0x32
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	b21b      	sxth	r3, r3
 8005f80:	22c3      	movs	r2, #195	; 0xc3
 8005f82:	0112      	lsls	r2, r2, #4
 8005f84:	9202      	str	r2, [sp, #8]
 8005f86:	2214      	movs	r2, #20
 8005f88:	9201      	str	r2, [sp, #4]
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	000a      	movs	r2, r1
 8005f90:	2100      	movs	r1, #0
 8005f92:	f7fd fc69 	bl	8003868 <fillTriangle>
	fillTriangle(110+offset, 0, 130+offset, 0, 110+offset, 20, MAIN_COLOR);
 8005f96:	193b      	adds	r3, r7, r4
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	336e      	adds	r3, #110	; 0x6e
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	b218      	sxth	r0, r3
 8005fa2:	193b      	adds	r3, r7, r4
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	3382      	adds	r3, #130	; 0x82
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	b219      	sxth	r1, r3
 8005fae:	193b      	adds	r3, r7, r4
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	336e      	adds	r3, #110	; 0x6e
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	b21b      	sxth	r3, r3
 8005fba:	22c3      	movs	r2, #195	; 0xc3
 8005fbc:	0112      	lsls	r2, r2, #4
 8005fbe:	9202      	str	r2, [sp, #8]
 8005fc0:	2214      	movs	r2, #20
 8005fc2:	9201      	str	r2, [sp, #4]
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	000a      	movs	r2, r1
 8005fca:	2100      	movs	r1, #0
 8005fcc:	f7fd fc4c 	bl	8003868 <fillTriangle>
    fillRect(50-offset, 0, 60+(2*offset), 21, MAIN_COLOR);
 8005fd0:	193b      	adds	r3, r7, r4
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2232      	movs	r2, #50	; 0x32
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	b218      	sxth	r0, r3
 8005fde:	193b      	adds	r3, r7, r4
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	331e      	adds	r3, #30
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	18db      	adds	r3, r3, r3
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	b21a      	sxth	r2, r3
 8005fec:	23c3      	movs	r3, #195	; 0xc3
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	2315      	movs	r3, #21
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	f7fc fd3b 	bl	8002a70 <fillRect>

    ST7735_WriteString(45-offset, 3, title, Font_7x10, WHITE, MAIN_COLOR);
 8005ffa:	193b      	adds	r3, r7, r4
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	222d      	movs	r2, #45	; 0x2d
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	b298      	uxth	r0, r3
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <pageTitle_graphics+0x130>)
 8006008:	687c      	ldr	r4, [r7, #4]
 800600a:	22c3      	movs	r2, #195	; 0xc3
 800600c:	0112      	lsls	r2, r2, #4
 800600e:	9202      	str	r2, [sp, #8]
 8006010:	4a07      	ldr	r2, [pc, #28]	; (8006030 <pageTitle_graphics+0x134>)
 8006012:	9201      	str	r2, [sp, #4]
 8006014:	466a      	mov	r2, sp
 8006016:	6859      	ldr	r1, [r3, #4]
 8006018:	6011      	str	r1, [r2, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	0022      	movs	r2, r4
 800601e:	2103      	movs	r1, #3
 8006020:	f7fe f93c 	bl	800429c <ST7735_WriteString>

}
 8006024:	46c0      	nop			; (mov r8, r8)
 8006026:	46bd      	mov	sp, r7
 8006028:	b005      	add	sp, #20
 800602a:	bd90      	pop	{r4, r7, pc}
 800602c:	20000000 	.word	0x20000000
 8006030:	0000ffff 	.word	0x0000ffff

08006034 <colorBar_graphics>:

static void colorBar_graphics(void)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af02      	add	r7, sp, #8
	 * |________|	0
	 *
	 */


	ST7735_SetRotation(1);
 800603a:	2001      	movs	r0, #1
 800603c:	f7fd ffba 	bl	8003fb4 <ST7735_SetRotation>

	uint8_t x = 120;
 8006040:	1dfb      	adds	r3, r7, #7
 8006042:	2278      	movs	r2, #120	; 0x78
 8006044:	701a      	strb	r2, [r3, #0]
	uint8_t y = 100;
 8006046:	1dbb      	adds	r3, r7, #6
 8006048:	2264      	movs	r2, #100	; 0x64
 800604a:	701a      	strb	r2, [r3, #0]

	drawRect(x, y-80, 40, 20, BLACK);
 800604c:	1dfb      	adds	r3, r7, #7
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	b218      	sxth	r0, r3
 8006052:	1dbb      	adds	r3, r7, #6
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b50      	subs	r3, #80	; 0x50
 800605a:	b29b      	uxth	r3, r3
 800605c:	b219      	sxth	r1, r3
 800605e:	2300      	movs	r3, #0
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	2314      	movs	r3, #20
 8006064:	2228      	movs	r2, #40	; 0x28
 8006066:	f7fd f9a9 	bl	80033bc <drawRect>
	drawRect(x, y-60, 40, 20, BLACK);
 800606a:	1dfb      	adds	r3, r7, #7
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	b218      	sxth	r0, r3
 8006070:	1dbb      	adds	r3, r7, #6
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b3c      	subs	r3, #60	; 0x3c
 8006078:	b29b      	uxth	r3, r3
 800607a:	b219      	sxth	r1, r3
 800607c:	2300      	movs	r3, #0
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	2314      	movs	r3, #20
 8006082:	2228      	movs	r2, #40	; 0x28
 8006084:	f7fd f99a 	bl	80033bc <drawRect>
	drawRect(x, y-40, 40, 20, BLACK);
 8006088:	1dfb      	adds	r3, r7, #7
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	b218      	sxth	r0, r3
 800608e:	1dbb      	adds	r3, r7, #6
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	3b28      	subs	r3, #40	; 0x28
 8006096:	b29b      	uxth	r3, r3
 8006098:	b219      	sxth	r1, r3
 800609a:	2300      	movs	r3, #0
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	2314      	movs	r3, #20
 80060a0:	2228      	movs	r2, #40	; 0x28
 80060a2:	f7fd f98b 	bl	80033bc <drawRect>
	drawRect(x, y-20, 40, 20, BLACK);
 80060a6:	1dfb      	adds	r3, r7, #7
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	b218      	sxth	r0, r3
 80060ac:	1dbb      	adds	r3, r7, #6
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	3b14      	subs	r3, #20
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	b219      	sxth	r1, r3
 80060b8:	2300      	movs	r3, #0
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	2314      	movs	r3, #20
 80060be:	2228      	movs	r2, #40	; 0x28
 80060c0:	f7fd f97c 	bl	80033bc <drawRect>
	drawRect(x, y, 40, 20, BLACK);
 80060c4:	1dfb      	adds	r3, r7, #7
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	b218      	sxth	r0, r3
 80060ca:	1dbb      	adds	r3, r7, #6
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	b219      	sxth	r1, r3
 80060d0:	2300      	movs	r3, #0
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	2314      	movs	r3, #20
 80060d6:	2228      	movs	r2, #40	; 0x28
 80060d8:	f7fd f970 	bl	80033bc <drawRect>

	fillRect(x+1, y-80, 39, 19, DARK_BLUE);
 80060dc:	1dfb      	adds	r3, r7, #7
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3301      	adds	r3, #1
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	b218      	sxth	r0, r3
 80060e8:	1dbb      	adds	r3, r7, #6
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b50      	subs	r3, #80	; 0x50
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	b219      	sxth	r1, r3
 80060f4:	231f      	movs	r3, #31
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	2313      	movs	r3, #19
 80060fa:	2227      	movs	r2, #39	; 0x27
 80060fc:	f7fc fcb8 	bl	8002a70 <fillRect>
	fillRect(x+1, y-60, 39, 19, BLUE);
 8006100:	1dfb      	adds	r3, r7, #7
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	3301      	adds	r3, #1
 8006108:	b29b      	uxth	r3, r3
 800610a:	b218      	sxth	r0, r3
 800610c:	1dbb      	adds	r3, r7, #6
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	b29b      	uxth	r3, r3
 8006112:	3b3c      	subs	r3, #60	; 0x3c
 8006114:	b29b      	uxth	r3, r3
 8006116:	b219      	sxth	r1, r3
 8006118:	23ff      	movs	r3, #255	; 0xff
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	2313      	movs	r3, #19
 800611e:	2227      	movs	r2, #39	; 0x27
 8006120:	f7fc fca6 	bl	8002a70 <fillRect>
	fillRect(x+1, y-40, 39, 19, GREEN);
 8006124:	1dfb      	adds	r3, r7, #7
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	3301      	adds	r3, #1
 800612c:	b29b      	uxth	r3, r3
 800612e:	b218      	sxth	r0, r3
 8006130:	1dbb      	adds	r3, r7, #6
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b28      	subs	r3, #40	; 0x28
 8006138:	b29b      	uxth	r3, r3
 800613a:	b219      	sxth	r1, r3
 800613c:	23fc      	movs	r3, #252	; 0xfc
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	9300      	str	r3, [sp, #0]
 8006142:	2313      	movs	r3, #19
 8006144:	2227      	movs	r2, #39	; 0x27
 8006146:	f7fc fc93 	bl	8002a70 <fillRect>
	fillRect(x+1, y-20, 39, 19, YELLOW);
 800614a:	1dfb      	adds	r3, r7, #7
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	3301      	adds	r3, #1
 8006152:	b29b      	uxth	r3, r3
 8006154:	b218      	sxth	r0, r3
 8006156:	1dbb      	adds	r3, r7, #6
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b14      	subs	r3, #20
 800615e:	b29b      	uxth	r3, r3
 8006160:	b219      	sxth	r1, r3
 8006162:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <colorBar_graphics+0x164>)
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	2313      	movs	r3, #19
 8006168:	2227      	movs	r2, #39	; 0x27
 800616a:	f7fc fc81 	bl	8002a70 <fillRect>
	fillRect(x+1, y, 39, 19, RED);
 800616e:	1dfb      	adds	r3, r7, #7
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	b29b      	uxth	r3, r3
 8006174:	3301      	adds	r3, #1
 8006176:	b29b      	uxth	r3, r3
 8006178:	b218      	sxth	r0, r3
 800617a:	1dbb      	adds	r3, r7, #6
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	b219      	sxth	r1, r3
 8006180:	23f8      	movs	r3, #248	; 0xf8
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	2313      	movs	r3, #19
 8006188:	2227      	movs	r2, #39	; 0x27
 800618a:	f7fc fc71 	bl	8002a70 <fillRect>

}
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	46bd      	mov	sp, r7
 8006192:	b002      	add	sp, #8
 8006194:	bd80      	pop	{r7, pc}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	0000ffe0 	.word	0x0000ffe0

0800619c <orizzIndicators_graphics>:


static void orizzIndicators_graphics(uint16_t color)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b086      	sub	sp, #24
 80061a0:	af04      	add	r7, sp, #16
 80061a2:	0002      	movs	r2, r0
 80061a4:	1dbb      	adds	r3, r7, #6
 80061a6:	801a      	strh	r2, [r3, #0]
	 * |/                              \|
	 *
	 */


	fillTriangle(0, 128-34, 20, 128-54, 0, 128-74, color);
 80061a8:	1dbb      	adds	r3, r7, #6
 80061aa:	881b      	ldrh	r3, [r3, #0]
 80061ac:	9302      	str	r3, [sp, #8]
 80061ae:	2336      	movs	r3, #54	; 0x36
 80061b0:	9301      	str	r3, [sp, #4]
 80061b2:	2300      	movs	r3, #0
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	234a      	movs	r3, #74	; 0x4a
 80061b8:	2214      	movs	r2, #20
 80061ba:	215e      	movs	r1, #94	; 0x5e
 80061bc:	2000      	movs	r0, #0
 80061be:	f7fd fb53 	bl	8003868 <fillTriangle>
	fillTriangle(160, 128-34, 140, 128-54, 160, 128-74, color);
 80061c2:	1dbb      	adds	r3, r7, #6
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	9302      	str	r3, [sp, #8]
 80061c8:	2336      	movs	r3, #54	; 0x36
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	23a0      	movs	r3, #160	; 0xa0
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	234a      	movs	r3, #74	; 0x4a
 80061d2:	228c      	movs	r2, #140	; 0x8c
 80061d4:	215e      	movs	r1, #94	; 0x5e
 80061d6:	20a0      	movs	r0, #160	; 0xa0
 80061d8:	f7fd fb46 	bl	8003868 <fillTriangle>

}
 80061dc:	46c0      	nop			; (mov r8, r8)
 80061de:	46bd      	mov	sp, r7
 80061e0:	b002      	add	sp, #8
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <HAL_MspInit+0x44>)
 80061ec:	699a      	ldr	r2, [r3, #24]
 80061ee:	4b0e      	ldr	r3, [pc, #56]	; (8006228 <HAL_MspInit+0x44>)
 80061f0:	2101      	movs	r1, #1
 80061f2:	430a      	orrs	r2, r1
 80061f4:	619a      	str	r2, [r3, #24]
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <HAL_MspInit+0x44>)
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	2201      	movs	r2, #1
 80061fc:	4013      	ands	r3, r2
 80061fe:	607b      	str	r3, [r7, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006202:	4b09      	ldr	r3, [pc, #36]	; (8006228 <HAL_MspInit+0x44>)
 8006204:	69da      	ldr	r2, [r3, #28]
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <HAL_MspInit+0x44>)
 8006208:	2180      	movs	r1, #128	; 0x80
 800620a:	0549      	lsls	r1, r1, #21
 800620c:	430a      	orrs	r2, r1
 800620e:	61da      	str	r2, [r3, #28]
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <HAL_MspInit+0x44>)
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	2380      	movs	r3, #128	; 0x80
 8006216:	055b      	lsls	r3, r3, #21
 8006218:	4013      	ands	r3, r2
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800621e:	46c0      	nop			; (mov r8, r8)
 8006220:	46bd      	mov	sp, r7
 8006222:	b002      	add	sp, #8
 8006224:	bd80      	pop	{r7, pc}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	40021000 	.word	0x40021000

0800622c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800622c:	b590      	push	{r4, r7, lr}
 800622e:	b08b      	sub	sp, #44	; 0x2c
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006234:	2414      	movs	r4, #20
 8006236:	193b      	adds	r3, r7, r4
 8006238:	0018      	movs	r0, r3
 800623a:	2314      	movs	r3, #20
 800623c:	001a      	movs	r2, r3
 800623e:	2100      	movs	r1, #0
 8006240:	f002 fb9a 	bl	8008978 <memset>
  if(hadc->Instance==ADC1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a18      	ldr	r2, [pc, #96]	; (80062ac <HAL_ADC_MspInit+0x80>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d12a      	bne.n	80062a4 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800624e:	4b18      	ldr	r3, [pc, #96]	; (80062b0 <HAL_ADC_MspInit+0x84>)
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	4b17      	ldr	r3, [pc, #92]	; (80062b0 <HAL_ADC_MspInit+0x84>)
 8006254:	2180      	movs	r1, #128	; 0x80
 8006256:	0089      	lsls	r1, r1, #2
 8006258:	430a      	orrs	r2, r1
 800625a:	619a      	str	r2, [r3, #24]
 800625c:	4b14      	ldr	r3, [pc, #80]	; (80062b0 <HAL_ADC_MspInit+0x84>)
 800625e:	699a      	ldr	r2, [r3, #24]
 8006260:	2380      	movs	r3, #128	; 0x80
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4013      	ands	r3, r2
 8006266:	613b      	str	r3, [r7, #16]
 8006268:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800626a:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <HAL_ADC_MspInit+0x84>)
 800626c:	695a      	ldr	r2, [r3, #20]
 800626e:	4b10      	ldr	r3, [pc, #64]	; (80062b0 <HAL_ADC_MspInit+0x84>)
 8006270:	2180      	movs	r1, #128	; 0x80
 8006272:	02c9      	lsls	r1, r1, #11
 8006274:	430a      	orrs	r2, r1
 8006276:	615a      	str	r2, [r3, #20]
 8006278:	4b0d      	ldr	r3, [pc, #52]	; (80062b0 <HAL_ADC_MspInit+0x84>)
 800627a:	695a      	ldr	r2, [r3, #20]
 800627c:	2380      	movs	r3, #128	; 0x80
 800627e:	02db      	lsls	r3, r3, #11
 8006280:	4013      	ands	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8006286:	193b      	adds	r3, r7, r4
 8006288:	2201      	movs	r2, #1
 800628a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800628c:	193b      	adds	r3, r7, r4
 800628e:	2203      	movs	r2, #3
 8006290:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006292:	193b      	adds	r3, r7, r4
 8006294:	2200      	movs	r2, #0
 8006296:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8006298:	193b      	adds	r3, r7, r4
 800629a:	4a06      	ldr	r2, [pc, #24]	; (80062b4 <HAL_ADC_MspInit+0x88>)
 800629c:	0019      	movs	r1, r3
 800629e:	0010      	movs	r0, r2
 80062a0:	f001 f9ee 	bl	8007680 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80062a4:	46c0      	nop			; (mov r8, r8)
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b00b      	add	sp, #44	; 0x2c
 80062aa:	bd90      	pop	{r4, r7, pc}
 80062ac:	40012400 	.word	0x40012400
 80062b0:	40021000 	.word	0x40021000
 80062b4:	48000400 	.word	0x48000400

080062b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80062b8:	b590      	push	{r4, r7, lr}
 80062ba:	b08b      	sub	sp, #44	; 0x2c
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062c0:	2414      	movs	r4, #20
 80062c2:	193b      	adds	r3, r7, r4
 80062c4:	0018      	movs	r0, r3
 80062c6:	2314      	movs	r3, #20
 80062c8:	001a      	movs	r2, r3
 80062ca:	2100      	movs	r1, #0
 80062cc:	f002 fb54 	bl	8008978 <memset>
  if(hspi->Instance==SPI1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1c      	ldr	r2, [pc, #112]	; (8006348 <HAL_SPI_MspInit+0x90>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d132      	bne.n	8006340 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80062da:	4b1c      	ldr	r3, [pc, #112]	; (800634c <HAL_SPI_MspInit+0x94>)
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	4b1b      	ldr	r3, [pc, #108]	; (800634c <HAL_SPI_MspInit+0x94>)
 80062e0:	2180      	movs	r1, #128	; 0x80
 80062e2:	0149      	lsls	r1, r1, #5
 80062e4:	430a      	orrs	r2, r1
 80062e6:	619a      	str	r2, [r3, #24]
 80062e8:	4b18      	ldr	r3, [pc, #96]	; (800634c <HAL_SPI_MspInit+0x94>)
 80062ea:	699a      	ldr	r2, [r3, #24]
 80062ec:	2380      	movs	r3, #128	; 0x80
 80062ee:	015b      	lsls	r3, r3, #5
 80062f0:	4013      	ands	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]
 80062f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062f6:	4b15      	ldr	r3, [pc, #84]	; (800634c <HAL_SPI_MspInit+0x94>)
 80062f8:	695a      	ldr	r2, [r3, #20]
 80062fa:	4b14      	ldr	r3, [pc, #80]	; (800634c <HAL_SPI_MspInit+0x94>)
 80062fc:	2180      	movs	r1, #128	; 0x80
 80062fe:	0289      	lsls	r1, r1, #10
 8006300:	430a      	orrs	r2, r1
 8006302:	615a      	str	r2, [r3, #20]
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <HAL_SPI_MspInit+0x94>)
 8006306:	695a      	ldr	r2, [r3, #20]
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	029b      	lsls	r3, r3, #10
 800630c:	4013      	ands	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006312:	0021      	movs	r1, r4
 8006314:	187b      	adds	r3, r7, r1
 8006316:	22e0      	movs	r2, #224	; 0xe0
 8006318:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800631a:	187b      	adds	r3, r7, r1
 800631c:	2202      	movs	r2, #2
 800631e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006320:	187b      	adds	r3, r7, r1
 8006322:	2200      	movs	r2, #0
 8006324:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006326:	187b      	adds	r3, r7, r1
 8006328:	2203      	movs	r2, #3
 800632a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800632c:	187b      	adds	r3, r7, r1
 800632e:	2200      	movs	r2, #0
 8006330:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006332:	187a      	adds	r2, r7, r1
 8006334:	2390      	movs	r3, #144	; 0x90
 8006336:	05db      	lsls	r3, r3, #23
 8006338:	0011      	movs	r1, r2
 800633a:	0018      	movs	r0, r3
 800633c:	f001 f9a0 	bl	8007680 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006340:	46c0      	nop			; (mov r8, r8)
 8006342:	46bd      	mov	sp, r7
 8006344:	b00b      	add	sp, #44	; 0x2c
 8006346:	bd90      	pop	{r4, r7, pc}
 8006348:	40013000 	.word	0x40013000
 800634c:	40021000 	.word	0x40021000

08006350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006354:	e7fe      	b.n	8006354 <NMI_Handler+0x4>

08006356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800635a:	e7fe      	b.n	800635a <HardFault_Handler+0x4>

0800635c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006374:	f000 fb6a 	bl	8006a4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006378:	46c0      	nop			; (mov r8, r8)
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <getTimeMs>:
/*
 *	@ Function; getDelayms
 *  @ Return; uint32_t -> current time in ms
 */
uint32_t getTimeMs(void)
{
 8006388:	b5b0      	push	{r4, r5, r7, lr}
 800638a:	af00      	add	r7, sp, #0

	// Tick frequency is by default 1kHz (1ms period)
	return ( HAL_GetTick() * HAL_GetTickFreq() );
 800638c:	f000 fb70 	bl	8006a70 <HAL_GetTick>
 8006390:	0004      	movs	r4, r0
 8006392:	f000 fb77 	bl	8006a84 <HAL_GetTickFreq>
 8006396:	0003      	movs	r3, r0
 8006398:	4363      	muls	r3, r4

}
 800639a:	0018      	movs	r0, r3
 800639c:	46bd      	mov	sp, r7
 800639e:	bdb0      	pop	{r4, r5, r7, pc}

080063a0 <getDelayMs>:
 *	@ Function; getDelayms
 * 	@ Par1; uint32_t timeStamp -> captured time
 *  @ Return; uint32_t tDiff -> time elapsed since timeStamp in ms
 */
uint32_t getDelayMs(uint32_t timeStamp)
{
 80063a0:	b590      	push	{r4, r7, lr}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]

	uint32_t tDiff;
	uint32_t currentTime;

	currentTime = ( getTimeMs() * HAL_GetTickFreq() );
 80063a8:	f7ff ffee 	bl	8006388 <getTimeMs>
 80063ac:	0004      	movs	r4, r0
 80063ae:	f000 fb69 	bl	8006a84 <HAL_GetTickFreq>
 80063b2:	0003      	movs	r3, r0
 80063b4:	4363      	muls	r3, r4
 80063b6:	60bb      	str	r3, [r7, #8]

	if(currentTime >= timeStamp)
 80063b8:	68ba      	ldr	r2, [r7, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d304      	bcc.n	80063ca <getDelayMs+0x2a>
		tDiff = currentTime - timeStamp;
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e003      	b.n	80063d2 <getDelayMs+0x32>
	else
		tDiff = timeStamp - currentTime;
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	60fb      	str	r3, [r7, #12]

	return tDiff;
 80063d2:	68fb      	ldr	r3, [r7, #12]

}
 80063d4:	0018      	movs	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b005      	add	sp, #20
 80063da:	bd90      	pop	{r4, r7, pc}

080063dc <floatToString>:
 *	@ Description; converts a float number into a string
 * 	@ Par1; float f -> float number
 * 	@ Par2; char *s -> string
 */
void floatToString(float f, char *s)
{
 80063dc:	b5b0      	push	{r4, r5, r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
 80063e4:	6039      	str	r1, [r7, #0]

	uint16_t ui16Temp = (uint16_t)( f * 100 );
 80063e6:	496a      	ldr	r1, [pc, #424]	; (8006590 <floatToString+0x1b4>)
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f7fa fc19 	bl	8000c20 <__aeabi_fmul>
 80063ee:	1c03      	adds	r3, r0, #0
 80063f0:	250e      	movs	r5, #14
 80063f2:	197c      	adds	r4, r7, r5
 80063f4:	1c18      	adds	r0, r3, #0
 80063f6:	f7fa f873 	bl	80004e0 <__aeabi_f2uiz>
 80063fa:	0003      	movs	r3, r0
 80063fc:	8023      	strh	r3, [r4, #0]

	if(ui16Temp >= 1000)
 80063fe:	197b      	adds	r3, r7, r5
 8006400:	881a      	ldrh	r2, [r3, #0]
 8006402:	23fa      	movs	r3, #250	; 0xfa
 8006404:	009b      	lsls	r3, r3, #2
 8006406:	429a      	cmp	r2, r3
 8006408:	d36d      	bcc.n	80064e6 <floatToString+0x10a>
	{

		s[5] = 0;
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	3305      	adds	r3, #5
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]

		s[0] = (uint8_t)( ui16Temp / 1000 ) + 0x30;
 8006412:	197b      	adds	r3, r7, r5
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	22fa      	movs	r2, #250	; 0xfa
 8006418:	0091      	lsls	r1, r2, #2
 800641a:	0018      	movs	r0, r3
 800641c:	f7f9 fe72 	bl	8000104 <__udivsi3>
 8006420:	0003      	movs	r3, r0
 8006422:	b29b      	uxth	r3, r3
 8006424:	b2db      	uxtb	r3, r3
 8006426:	3330      	adds	r3, #48	; 0x30
 8006428:	b2da      	uxtb	r2, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	701a      	strb	r2, [r3, #0]
		s[1] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 1000 ) * 1000 ) ) / 100 ) + 0x30;
 800642e:	197b      	adds	r3, r7, r5
 8006430:	881c      	ldrh	r4, [r3, #0]
 8006432:	197b      	adds	r3, r7, r5
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	22fa      	movs	r2, #250	; 0xfa
 8006438:	0091      	lsls	r1, r2, #2
 800643a:	0018      	movs	r0, r3
 800643c:	f7f9 fe62 	bl	8000104 <__udivsi3>
 8006440:	0003      	movs	r3, r0
 8006442:	b29b      	uxth	r3, r3
 8006444:	001a      	movs	r2, r3
 8006446:	0013      	movs	r3, r2
 8006448:	059b      	lsls	r3, r3, #22
 800644a:	1a9b      	subs	r3, r3, r2
 800644c:	019b      	lsls	r3, r3, #6
 800644e:	189b      	adds	r3, r3, r2
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	189b      	adds	r3, r3, r2
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	18e3      	adds	r3, r4, r3
 8006458:	2164      	movs	r1, #100	; 0x64
 800645a:	0018      	movs	r0, r3
 800645c:	f7f9 fedc 	bl	8000218 <__divsi3>
 8006460:	0003      	movs	r3, r0
 8006462:	b2da      	uxtb	r2, r3
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	3230      	adds	r2, #48	; 0x30
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]
		s[2] = '.';
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	3302      	adds	r3, #2
 8006472:	222e      	movs	r2, #46	; 0x2e
 8006474:	701a      	strb	r2, [r3, #0]
		s[3] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
 8006476:	197b      	adds	r3, r7, r5
 8006478:	881c      	ldrh	r4, [r3, #0]
 800647a:	197b      	adds	r3, r7, r5
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	2164      	movs	r1, #100	; 0x64
 8006480:	0018      	movs	r0, r3
 8006482:	f7f9 fe3f 	bl	8000104 <__udivsi3>
 8006486:	0003      	movs	r3, r0
 8006488:	b29b      	uxth	r3, r3
 800648a:	001a      	movs	r2, r3
 800648c:	0013      	movs	r3, r2
 800648e:	065b      	lsls	r3, r3, #25
 8006490:	1a9b      	subs	r3, r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	189b      	adds	r3, r3, r2
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	1a9b      	subs	r3, r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	18e3      	adds	r3, r4, r3
 800649e:	210a      	movs	r1, #10
 80064a0:	0018      	movs	r0, r3
 80064a2:	f7f9 feb9 	bl	8000218 <__divsi3>
 80064a6:	0003      	movs	r3, r0
 80064a8:	b2da      	uxtb	r2, r3
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	3303      	adds	r3, #3
 80064ae:	3230      	adds	r2, #48	; 0x30
 80064b0:	b2d2      	uxtb	r2, r2
 80064b2:	701a      	strb	r2, [r3, #0]
		s[4] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;
 80064b4:	197b      	adds	r3, r7, r5
 80064b6:	881b      	ldrh	r3, [r3, #0]
 80064b8:	b2dc      	uxtb	r4, r3
 80064ba:	197b      	adds	r3, r7, r5
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	210a      	movs	r1, #10
 80064c0:	0018      	movs	r0, r3
 80064c2:	f7f9 fe1f 	bl	8000104 <__udivsi3>
 80064c6:	0003      	movs	r3, r0
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	1c1a      	adds	r2, r3, #0
 80064ce:	0092      	lsls	r2, r2, #2
 80064d0:	18d3      	adds	r3, r2, r3
 80064d2:	18db      	adds	r3, r3, r3
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	1ae3      	subs	r3, r4, r3
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	3304      	adds	r3, #4
 80064de:	3230      	adds	r2, #48	; 0x30
 80064e0:	b2d2      	uxtb	r2, r2
 80064e2:	701a      	strb	r2, [r3, #0]
		s[2] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
		s[3] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;

	}

}
 80064e4:	e050      	b.n	8006588 <floatToString+0x1ac>
		s[5] = 0;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	3305      	adds	r3, #5
 80064ea:	2200      	movs	r2, #0
 80064ec:	701a      	strb	r2, [r3, #0]
		s[4] = 0;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	3304      	adds	r3, #4
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
		s[0] = (uint8_t)( ui16Temp / 100 ) + 0x30;
 80064f6:	250e      	movs	r5, #14
 80064f8:	197b      	adds	r3, r7, r5
 80064fa:	881b      	ldrh	r3, [r3, #0]
 80064fc:	2164      	movs	r1, #100	; 0x64
 80064fe:	0018      	movs	r0, r3
 8006500:	f7f9 fe00 	bl	8000104 <__udivsi3>
 8006504:	0003      	movs	r3, r0
 8006506:	b29b      	uxth	r3, r3
 8006508:	b2db      	uxtb	r3, r3
 800650a:	3330      	adds	r3, #48	; 0x30
 800650c:	b2da      	uxtb	r2, r3
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	701a      	strb	r2, [r3, #0]
		s[1] = '.';
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	222e      	movs	r2, #46	; 0x2e
 8006518:	701a      	strb	r2, [r3, #0]
		s[2] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
 800651a:	197b      	adds	r3, r7, r5
 800651c:	881c      	ldrh	r4, [r3, #0]
 800651e:	197b      	adds	r3, r7, r5
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	2164      	movs	r1, #100	; 0x64
 8006524:	0018      	movs	r0, r3
 8006526:	f7f9 fded 	bl	8000104 <__udivsi3>
 800652a:	0003      	movs	r3, r0
 800652c:	b29b      	uxth	r3, r3
 800652e:	001a      	movs	r2, r3
 8006530:	0013      	movs	r3, r2
 8006532:	065b      	lsls	r3, r3, #25
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	189b      	adds	r3, r3, r2
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	18e3      	adds	r3, r4, r3
 8006542:	210a      	movs	r1, #10
 8006544:	0018      	movs	r0, r3
 8006546:	f7f9 fe67 	bl	8000218 <__divsi3>
 800654a:	0003      	movs	r3, r0
 800654c:	b2da      	uxtb	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	3302      	adds	r3, #2
 8006552:	3230      	adds	r2, #48	; 0x30
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]
		s[3] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;
 8006558:	197b      	adds	r3, r7, r5
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	b2dc      	uxtb	r4, r3
 800655e:	197b      	adds	r3, r7, r5
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	210a      	movs	r1, #10
 8006564:	0018      	movs	r0, r3
 8006566:	f7f9 fdcd 	bl	8000104 <__udivsi3>
 800656a:	0003      	movs	r3, r0
 800656c:	b29b      	uxth	r3, r3
 800656e:	b2db      	uxtb	r3, r3
 8006570:	1c1a      	adds	r2, r3, #0
 8006572:	0092      	lsls	r2, r2, #2
 8006574:	18d3      	adds	r3, r2, r3
 8006576:	18db      	adds	r3, r3, r3
 8006578:	b2db      	uxtb	r3, r3
 800657a:	1ae3      	subs	r3, r4, r3
 800657c:	b2da      	uxtb	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	3303      	adds	r3, #3
 8006582:	3230      	adds	r2, #48	; 0x30
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
}
 8006588:	46c0      	nop			; (mov r8, r8)
 800658a:	46bd      	mov	sp, r7
 800658c:	b004      	add	sp, #16
 800658e:	bdb0      	pop	{r4, r5, r7, pc}
 8006590:	42c80000 	.word	0x42c80000

08006594 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE]; // RAM buffer
#endif


bool ee_init(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0

  uint8_t dataFlagEeW[2] = {0xAA, 0xAA};
 800659a:	1d3b      	adds	r3, r7, #4
 800659c:	4a1f      	ldr	r2, [pc, #124]	; (800661c <ee_init+0x88>)
 800659e:	801a      	strh	r2, [r3, #0]
  UNION4_CONVERSION dataFlagEeR;

  dataFlagEeR.un4_uchar[0] = 0;
 80065a0:	003b      	movs	r3, r7
 80065a2:	2200      	movs	r2, #0
 80065a4:	701a      	strb	r2, [r3, #0]
  dataFlagEeR.un4_uchar[1] = 0;
 80065a6:	003b      	movs	r3, r7
 80065a8:	2200      	movs	r2, #0
 80065aa:	705a      	strb	r2, [r3, #1]


  if(ee_read(EE_FLAG_ADDR, 2, dataFlagEeR.un4_uchar) == false)
 80065ac:	003a      	movs	r2, r7
 80065ae:	23ff      	movs	r3, #255	; 0xff
 80065b0:	00db      	lsls	r3, r3, #3
 80065b2:	2102      	movs	r1, #2
 80065b4:	0018      	movs	r0, r3
 80065b6:	f000 f95f 	bl	8006878 <ee_read>
 80065ba:	0003      	movs	r3, r0
 80065bc:	001a      	movs	r2, r3
 80065be:	2301      	movs	r3, #1
 80065c0:	4053      	eors	r3, r2
 80065c2:	b2db      	uxtb	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <ee_init+0x38>
	  return false;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e023      	b.n	8006614 <ee_init+0x80>
  else if(dataFlagEeR.un4_uint[0] == _EE_INIZIALIZED)
 80065cc:	003b      	movs	r3, r7
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	4a13      	ldr	r2, [pc, #76]	; (8006620 <ee_init+0x8c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d101      	bne.n	80065da <ee_init+0x46>
	  return true;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e01c      	b.n	8006614 <ee_init+0x80>

  // Erase FLASH memory page
  if(ee_format(0) == false)
 80065da:	2000      	movs	r0, #0
 80065dc:	f000 f91e 	bl	800681c <ee_format>
 80065e0:	0003      	movs	r3, r0
 80065e2:	001a      	movs	r2, r3
 80065e4:	2301      	movs	r3, #1
 80065e6:	4053      	eors	r3, r2
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <ee_init+0x5e>
	  return false;
 80065ee:	2300      	movs	r3, #0
 80065f0:	e010      	b.n	8006614 <ee_init+0x80>

  // Write a flag to avoid furthers erases of FLASH memory page
  if(ee_write(EE_FLAG_ADDR, 2, dataFlagEeW) == false)
 80065f2:	1d3a      	adds	r2, r7, #4
 80065f4:	23ff      	movs	r3, #255	; 0xff
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	2102      	movs	r1, #2
 80065fa:	0018      	movs	r0, r3
 80065fc:	f000 f96c 	bl	80068d8 <ee_write>
 8006600:	0003      	movs	r3, r0
 8006602:	001a      	movs	r2, r3
 8006604:	2301      	movs	r3, #1
 8006606:	4053      	eors	r3, r2
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <ee_init+0x7e>
	  return false;
 800660e:	2300      	movs	r3, #0
 8006610:	e000      	b.n	8006614 <ee_init+0x80>

  return true;
 8006612:	2301      	movs	r3, #1

}
 8006614:	0018      	movs	r0, r3
 8006616:	46bd      	mov	sp, r7
 8006618:	b002      	add	sp, #8
 800661a:	bd80      	pop	{r7, pc}
 800661c:	ffffaaaa 	.word	0xffffaaaa
 8006620:	0000aaaa 	.word	0x0000aaaa

08006624 <readAppDataFromEE>:


void readAppDataFromEE(void)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0

	float pH_pt1 = readFloatFromEE(EE_SWCALIB_PH_PT1);
 800662a:	2000      	movs	r0, #0
 800662c:	f000 f86a 	bl	8006704 <readFloatFromEE>
 8006630:	1c03      	adds	r3, r0, #0
 8006632:	60fb      	str	r3, [r7, #12]
	float mV_pt1 = readFloatFromEE(EE_SWCALIB_MV_PT1);
 8006634:	2004      	movs	r0, #4
 8006636:	f000 f865 	bl	8006704 <readFloatFromEE>
 800663a:	1c03      	adds	r3, r0, #0
 800663c:	60bb      	str	r3, [r7, #8]
	float pH_pt2 = readFloatFromEE(EE_SWCALIB_PH_PT2);
 800663e:	2008      	movs	r0, #8
 8006640:	f000 f860 	bl	8006704 <readFloatFromEE>
 8006644:	1c03      	adds	r3, r0, #0
 8006646:	607b      	str	r3, [r7, #4]
	float mV_pt2 = readFloatFromEE(EE_SWCALIB_MV_PT2);
 8006648:	200c      	movs	r0, #12
 800664a:	f000 f85b 	bl	8006704 <readFloatFromEE>
 800664e:	1c03      	adds	r3, r0, #0
 8006650:	603b      	str	r3, [r7, #0]


	if(( pH_pt1  > 14 ) || ( pH_pt2 > 14 ) || ( pH_pt1 == pH_pt2 ))
 8006652:	4925      	ldr	r1, [pc, #148]	; (80066e8 <readAppDataFromEE+0xc4>)
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f7f9 ff2f 	bl	80004b8 <__aeabi_fcmpgt>
 800665a:	1e03      	subs	r3, r0, #0
 800665c:	d10b      	bne.n	8006676 <readAppDataFromEE+0x52>
 800665e:	4922      	ldr	r1, [pc, #136]	; (80066e8 <readAppDataFromEE+0xc4>)
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7f9 ff29 	bl	80004b8 <__aeabi_fcmpgt>
 8006666:	1e03      	subs	r3, r0, #0
 8006668:	d105      	bne.n	8006676 <readAppDataFromEE+0x52>
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7f9 ff09 	bl	8000484 <__aeabi_fcmpeq>
 8006672:	1e03      	subs	r3, r0, #0
 8006674:	d007      	beq.n	8006686 <readAppDataFromEE+0x62>
	{

		twoPointsCalib_pH[0] = 7.0;
 8006676:	4b1d      	ldr	r3, [pc, #116]	; (80066ec <readAppDataFromEE+0xc8>)
 8006678:	4a1d      	ldr	r2, [pc, #116]	; (80066f0 <readAppDataFromEE+0xcc>)
 800667a:	601a      	str	r2, [r3, #0]
		twoPointsCalib_pH[1] = 4.0;
 800667c:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <readAppDataFromEE+0xc8>)
 800667e:	2281      	movs	r2, #129	; 0x81
 8006680:	05d2      	lsls	r2, r2, #23
 8006682:	605a      	str	r2, [r3, #4]
 8006684:	e005      	b.n	8006692 <readAppDataFromEE+0x6e>

	}
	else
	{

		twoPointsCalib_pH[0] = pH_pt1;
 8006686:	4b19      	ldr	r3, [pc, #100]	; (80066ec <readAppDataFromEE+0xc8>)
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	601a      	str	r2, [r3, #0]
		twoPointsCalib_pH[1] = pH_pt2;
 800668c:	4b17      	ldr	r3, [pc, #92]	; (80066ec <readAppDataFromEE+0xc8>)
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	605a      	str	r2, [r3, #4]

	}

	if(( mV_pt1  > 3.6 ) || ( mV_pt2 > 3.6 ) || ( mV_pt1 == mV_pt2 ))
 8006692:	68b8      	ldr	r0, [r7, #8]
 8006694:	f7fc f8e4 	bl	8002860 <__aeabi_f2d>
 8006698:	4a16      	ldr	r2, [pc, #88]	; (80066f4 <readAppDataFromEE+0xd0>)
 800669a:	4b17      	ldr	r3, [pc, #92]	; (80066f8 <readAppDataFromEE+0xd4>)
 800669c:	f7f9 fed2 	bl	8000444 <__aeabi_dcmpgt>
 80066a0:	1e03      	subs	r3, r0, #0
 80066a2:	d10e      	bne.n	80066c2 <readAppDataFromEE+0x9e>
 80066a4:	6838      	ldr	r0, [r7, #0]
 80066a6:	f7fc f8db 	bl	8002860 <__aeabi_f2d>
 80066aa:	4a12      	ldr	r2, [pc, #72]	; (80066f4 <readAppDataFromEE+0xd0>)
 80066ac:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <readAppDataFromEE+0xd4>)
 80066ae:	f7f9 fec9 	bl	8000444 <__aeabi_dcmpgt>
 80066b2:	1e03      	subs	r3, r0, #0
 80066b4:	d105      	bne.n	80066c2 <readAppDataFromEE+0x9e>
 80066b6:	6839      	ldr	r1, [r7, #0]
 80066b8:	68b8      	ldr	r0, [r7, #8]
 80066ba:	f7f9 fee3 	bl	8000484 <__aeabi_fcmpeq>
 80066be:	1e03      	subs	r3, r0, #0
 80066c0:	d007      	beq.n	80066d2 <readAppDataFromEE+0xae>
	{

		twoPointsCalib_mV[0] = 2.0;
 80066c2:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <readAppDataFromEE+0xd8>)
 80066c4:	2280      	movs	r2, #128	; 0x80
 80066c6:	05d2      	lsls	r2, r2, #23
 80066c8:	601a      	str	r2, [r3, #0]
		twoPointsCalib_mV[1] = 2.6;
 80066ca:	4b0c      	ldr	r3, [pc, #48]	; (80066fc <readAppDataFromEE+0xd8>)
 80066cc:	4a0c      	ldr	r2, [pc, #48]	; (8006700 <readAppDataFromEE+0xdc>)
 80066ce:	605a      	str	r2, [r3, #4]
 80066d0:	e006      	b.n	80066e0 <readAppDataFromEE+0xbc>

	}
	else
	{

		twoPointsCalib_mV[0] = mV_pt1;
 80066d2:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <readAppDataFromEE+0xd8>)
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	601a      	str	r2, [r3, #0]
		twoPointsCalib_mV[1] = mV_pt2;
 80066d8:	4b08      	ldr	r3, [pc, #32]	; (80066fc <readAppDataFromEE+0xd8>)
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	605a      	str	r2, [r3, #4]

	}


}
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	46c0      	nop			; (mov r8, r8)
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b004      	add	sp, #16
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	41600000 	.word	0x41600000
 80066ec:	20000024 	.word	0x20000024
 80066f0:	40e00000 	.word	0x40e00000
 80066f4:	cccccccd 	.word	0xcccccccd
 80066f8:	400ccccc 	.word	0x400ccccc
 80066fc:	2000002c 	.word	0x2000002c
 8006700:	40266666 	.word	0x40266666

08006704 <readFloatFromEE>:


float readFloatFromEE(uint32_t eeadr)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]

	UNION4_CONVERSION uconv;


	if(getByteEe(eeadr+0, &uconv.un4_uchar[0]) == EE_INVALID)
 800670c:	230c      	movs	r3, #12
 800670e:	18fa      	adds	r2, r7, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	0011      	movs	r1, r2
 8006714:	0018      	movs	r0, r3
 8006716:	f000 f84d 	bl	80067b4 <getByteEe>
 800671a:	1e03      	subs	r3, r0, #0
 800671c:	d101      	bne.n	8006722 <readFloatFromEE+0x1e>
		return 0.0;
 800671e:	2300      	movs	r3, #0
 8006720:	e027      	b.n	8006772 <readFloatFromEE+0x6e>
	if(getByteEe(eeadr+1, &uconv.un4_uchar[1]) == EE_INVALID)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	230c      	movs	r3, #12
 8006728:	18fb      	adds	r3, r7, r3
 800672a:	3301      	adds	r3, #1
 800672c:	0019      	movs	r1, r3
 800672e:	0010      	movs	r0, r2
 8006730:	f000 f840 	bl	80067b4 <getByteEe>
 8006734:	1e03      	subs	r3, r0, #0
 8006736:	d101      	bne.n	800673c <readFloatFromEE+0x38>
		return 0.0;
 8006738:	2300      	movs	r3, #0
 800673a:	e01a      	b.n	8006772 <readFloatFromEE+0x6e>
	if(getByteEe(eeadr+2, &uconv.un4_uchar[2]) == EE_INVALID)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	1c9a      	adds	r2, r3, #2
 8006740:	230c      	movs	r3, #12
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	3302      	adds	r3, #2
 8006746:	0019      	movs	r1, r3
 8006748:	0010      	movs	r0, r2
 800674a:	f000 f833 	bl	80067b4 <getByteEe>
 800674e:	1e03      	subs	r3, r0, #0
 8006750:	d101      	bne.n	8006756 <readFloatFromEE+0x52>
		return 0.0;
 8006752:	2300      	movs	r3, #0
 8006754:	e00d      	b.n	8006772 <readFloatFromEE+0x6e>
	if(getByteEe(eeadr+3, &uconv.un4_uchar[3]) == EE_INVALID)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	1cda      	adds	r2, r3, #3
 800675a:	230c      	movs	r3, #12
 800675c:	18fb      	adds	r3, r7, r3
 800675e:	3303      	adds	r3, #3
 8006760:	0019      	movs	r1, r3
 8006762:	0010      	movs	r0, r2
 8006764:	f000 f826 	bl	80067b4 <getByteEe>
 8006768:	1e03      	subs	r3, r0, #0
 800676a:	d101      	bne.n	8006770 <readFloatFromEE+0x6c>
		return 0.0;
 800676c:	2300      	movs	r3, #0
 800676e:	e000      	b.n	8006772 <readFloatFromEE+0x6e>

	return uconv.un4_float;
 8006770:	68fb      	ldr	r3, [r7, #12]

}
 8006772:	1c18      	adds	r0, r3, #0
 8006774:	46bd      	mov	sp, r7
 8006776:	b004      	add	sp, #16
 8006778:	bd80      	pop	{r7, pc}

0800677a <writeFloatToEE>:

/*
 * @ NOTE; you can only write HALF-WORLD AT TIME
 */
void writeFloatToEE(uint32_t eeadr, float fvalue)
{
 800677a:	b590      	push	{r4, r7, lr}
 800677c:	b085      	sub	sp, #20
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
 8006782:	6039      	str	r1, [r7, #0]

	UNION4_CONVERSION uconv;
	uconv.un4_float = fvalue;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	60fb      	str	r3, [r7, #12]


	setHalfWorldEe(eeadr+0, uconv.un4_uint[0]);
 8006788:	240c      	movs	r4, #12
 800678a:	193b      	adds	r3, r7, r4
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	b2da      	uxtb	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	0011      	movs	r1, r2
 8006794:	0018      	movs	r0, r3
 8006796:	f000 f826 	bl	80067e6 <setHalfWorldEe>
	setHalfWorldEe(eeadr+2, uconv.un4_uint[2]);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	1c9a      	adds	r2, r3, #2
 800679e:	193b      	adds	r3, r7, r4
 80067a0:	889b      	ldrh	r3, [r3, #4]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	0019      	movs	r1, r3
 80067a6:	0010      	movs	r0, r2
 80067a8:	f000 f81d 	bl	80067e6 <setHalfWorldEe>

}
 80067ac:	46c0      	nop			; (mov r8, r8)
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b005      	add	sp, #20
 80067b2:	bd90      	pop	{r4, r7, pc}

080067b4 <getByteEe>:

/******************* PRIVARE FUNCTIONS ************************/


static EEPROM_STATUS getByteEe(uint32_t eeadr, uint8_t *byte)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]

	if(ee_read(eeadr, 1, byte) == false)
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2101      	movs	r1, #1
 80067c4:	0018      	movs	r0, r3
 80067c6:	f000 f857 	bl	8006878 <ee_read>
 80067ca:	0003      	movs	r3, r0
 80067cc:	001a      	movs	r2, r3
 80067ce:	2301      	movs	r3, #1
 80067d0:	4053      	eors	r3, r2
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <getByteEe+0x28>
		return EE_INVALID;
 80067d8:	2300      	movs	r3, #0
 80067da:	e000      	b.n	80067de <getByteEe+0x2a>

	return EE_VALID;
 80067dc:	2301      	movs	r3, #1

}
 80067de:	0018      	movs	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b002      	add	sp, #8
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <setHalfWorldEe>:


static EEPROM_STATUS setHalfWorldEe(uint32_t eeadr, uint8_t halfW)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	000a      	movs	r2, r1
 80067f0:	1cfb      	adds	r3, r7, #3
 80067f2:	701a      	strb	r2, [r3, #0]

	if(ee_write(eeadr, 2, &halfW) == false)
 80067f4:	1cfa      	adds	r2, r7, #3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2102      	movs	r1, #2
 80067fa:	0018      	movs	r0, r3
 80067fc:	f000 f86c 	bl	80068d8 <ee_write>
 8006800:	0003      	movs	r3, r0
 8006802:	001a      	movs	r2, r3
 8006804:	2301      	movs	r3, #1
 8006806:	4053      	eors	r3, r2
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d001      	beq.n	8006812 <setHalfWorldEe+0x2c>
		return EE_INVALID;
 800680e:	2300      	movs	r3, #0
 8006810:	e000      	b.n	8006814 <setHalfWorldEe+0x2e>

	return EE_VALID;
 8006812:	2301      	movs	r3, #1

}
 8006814:	0018      	movs	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	b002      	add	sp, #8
 800681a:	bd80      	pop	{r7, pc}

0800681c <ee_format>:



static bool ee_format(bool keepRamData)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b086      	sub	sp, #24
 8006820:	af00      	add	r7, sp, #0
 8006822:	0002      	movs	r2, r0
 8006824:	1dfb      	adds	r3, r7, #7
 8006826:	701a      	strb	r2, [r3, #0]

  uint32_t error;
  FLASH_EraseInitTypeDef flashErase;


  HAL_FLASH_Unlock();
 8006828:	f000 fdbe 	bl	80073a8 <HAL_FLASH_Unlock>

  // Erase page 32
  flashErase.NbPages = 1;
 800682c:	2108      	movs	r1, #8
 800682e:	187b      	adds	r3, r7, r1
 8006830:	2201      	movs	r2, #1
 8006832:	609a      	str	r2, [r3, #8]
  flashErase.PageAddress = _EE_ADDR_INUSE;
 8006834:	187b      	adds	r3, r7, r1
 8006836:	4a0f      	ldr	r2, [pc, #60]	; (8006874 <ee_format+0x58>)
 8006838:	605a      	str	r2, [r3, #4]
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 800683a:	187b      	adds	r3, r7, r1
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]

  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8006840:	2314      	movs	r3, #20
 8006842:	18fa      	adds	r2, r7, r3
 8006844:	187b      	adds	r3, r7, r1
 8006846:	0011      	movs	r1, r2
 8006848:	0018      	movs	r0, r3
 800684a:	f000 fe6d 	bl	8007528 <HAL_FLASHEx_Erase>
 800684e:	1e03      	subs	r3, r0, #0
 8006850:	d108      	bne.n	8006864 <ee_format+0x48>
  {

    HAL_FLASH_Lock();
 8006852:	f000 fdcf 	bl	80073f4 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	3301      	adds	r3, #1
 800685a:	d001      	beq.n	8006860 <ee_format+0x44>
    {

    	return false;
 800685c:	2300      	movs	r3, #0
 800685e:	e004      	b.n	800686a <ee_format+0x4e>
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
#endif

      return true;
 8006860:	2301      	movs	r3, #1
 8006862:	e002      	b.n	800686a <ee_format+0x4e>

    }

  }

  HAL_FLASH_Lock();
 8006864:	f000 fdc6 	bl	80073f4 <HAL_FLASH_Lock>

  return false;
 8006868:	2300      	movs	r3, #0

}
 800686a:	0018      	movs	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	b006      	add	sp, #24
 8006870:	bd80      	pop	{r7, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	0800f800 	.word	0x0800f800

08006878 <ee_read>:


static bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]

  if(( startVirtualAddress + len ) > _EE_SIZE)
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	18d2      	adds	r2, r2, r3
 800688a:	2380      	movs	r3, #128	; 0x80
 800688c:	011b      	lsls	r3, r3, #4
 800688e:	429a      	cmp	r2, r3
 8006890:	d901      	bls.n	8006896 <ee_read+0x1e>
	  // Max size is one page ( 2kB )
	  return false;
 8006892:	2300      	movs	r3, #0
 8006894:	e01a      	b.n	80068cc <ee_read+0x54>

  for(uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	e010      	b.n	80068be <ee_read+0x46>
  {

    if(data != NULL)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <ee_read+0x40>
    {

      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE)); // __IO is volatile type, which allows to read and write memory
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	4a0b      	ldr	r2, [pc, #44]	; (80068d4 <ee_read+0x5c>)
 80068a6:	4694      	mov	ip, r2
 80068a8:	4463      	add	r3, ip
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	701a      	strb	r2, [r3, #0]
      data++;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3301      	adds	r3, #1
 80068b6:	607b      	str	r3, [r7, #4]
  for(uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	3301      	adds	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	18d3      	adds	r3, r2, r3
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d3e8      	bcc.n	800689c <ee_read+0x24>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
#endif

  }

  return true;
 80068ca:	2301      	movs	r3, #1

}
 80068cc:	0018      	movs	r0, r3
 80068ce:	46bd      	mov	sp, r7
 80068d0:	b006      	add	sp, #24
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	0800f800 	.word	0x0800f800

080068d8 <ee_write>:


static bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 80068d8:	b5b0      	push	{r4, r5, r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]

  if(( startVirtualAddress + len ) > _EE_SIZE)
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	18d2      	adds	r2, r2, r3
 80068ea:	2380      	movs	r3, #128	; 0x80
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d901      	bls.n	80068f6 <ee_write+0x1e>
    return false;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e032      	b.n	800695c <ee_write+0x84>

  if(data == NULL)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d101      	bne.n	8006900 <ee_write+0x28>
    return false;
 80068fc:	2300      	movs	r3, #0
 80068fe:	e02d      	b.n	800695c <ee_write+0x84>

  HAL_FLASH_Unlock();
 8006900:	f000 fd52 	bl	80073a8 <HAL_FLASH_Unlock>

  // Write half-worlds
  for(uint32_t i = 0; i < len ; i+=2)
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e021      	b.n	800694e <ee_write+0x76>
  {

    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	18d3      	adds	r3, r2, r3
 8006910:	4a14      	ldr	r2, [pc, #80]	; (8006964 <ee_write+0x8c>)
 8006912:	1899      	adds	r1, r3, r2
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	18d3      	adds	r3, r2, r3
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	0018      	movs	r0, r3
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	3301      	adds	r3, #1
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	18d3      	adds	r3, r2, r3
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	4303      	orrs	r3, r0
 800692c:	001c      	movs	r4, r3
 800692e:	17db      	asrs	r3, r3, #31
 8006930:	001d      	movs	r5, r3
 8006932:	0022      	movs	r2, r4
 8006934:	002b      	movs	r3, r5
 8006936:	2001      	movs	r0, #1
 8006938:	f000 fca0 	bl	800727c <HAL_FLASH_Program>
 800693c:	1e03      	subs	r3, r0, #0
 800693e:	d003      	beq.n	8006948 <ee_write+0x70>
    {

      HAL_FLASH_Lock();
 8006940:	f000 fd58 	bl	80073f4 <HAL_FLASH_Lock>

      return false;
 8006944:	2300      	movs	r3, #0
 8006946:	e009      	b.n	800695c <ee_write+0x84>
  for(uint32_t i = 0; i < len ; i+=2)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	3302      	adds	r3, #2
 800694c:	617b      	str	r3, [r7, #20]
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	429a      	cmp	r2, r3
 8006954:	d3d9      	bcc.n	800690a <ee_write+0x32>

    }

  }

  HAL_FLASH_Lock();
 8006956:	f000 fd4d 	bl	80073f4 <HAL_FLASH_Lock>

  return true;
 800695a:	2301      	movs	r3, #1

}
 800695c:	0018      	movs	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	b006      	add	sp, #24
 8006962:	bdb0      	pop	{r4, r5, r7, pc}
 8006964:	0800f800 	.word	0x0800f800

08006968 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006968:	480d      	ldr	r0, [pc, #52]	; (80069a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800696a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800696c:	f7ff fd07 	bl	800637e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006970:	480c      	ldr	r0, [pc, #48]	; (80069a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8006972:	490d      	ldr	r1, [pc, #52]	; (80069a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006974:	4a0d      	ldr	r2, [pc, #52]	; (80069ac <LoopForever+0xe>)
  movs r3, #0
 8006976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006978:	e002      	b.n	8006980 <LoopCopyDataInit>

0800697a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800697a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800697c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800697e:	3304      	adds	r3, #4

08006980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006984:	d3f9      	bcc.n	800697a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006986:	4a0a      	ldr	r2, [pc, #40]	; (80069b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006988:	4c0a      	ldr	r4, [pc, #40]	; (80069b4 <LoopForever+0x16>)
  movs r3, #0
 800698a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800698c:	e001      	b.n	8006992 <LoopFillZerobss>

0800698e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800698e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006990:	3204      	adds	r2, #4

08006992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006994:	d3fb      	bcc.n	800698e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006996:	f001 fff7 	bl	8008988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800699a:	f7fe f92b 	bl	8004bf4 <main>

0800699e <LoopForever>:

LoopForever:
    b LoopForever
 800699e:	e7fe      	b.n	800699e <LoopForever>
  ldr   r0, =_estack
 80069a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80069a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80069a8:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80069ac:	0800b410 	.word	0x0800b410
  ldr r2, =_sbss
 80069b0:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80069b4:	200002b0 	.word	0x200002b0

080069b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80069b8:	e7fe      	b.n	80069b8 <ADC1_IRQHandler>
	...

080069bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <HAL_Init+0x24>)
 80069c2:	681a      	ldr	r2, [r3, #0]
 80069c4:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <HAL_Init+0x24>)
 80069c6:	2110      	movs	r1, #16
 80069c8:	430a      	orrs	r2, r1
 80069ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80069cc:	2003      	movs	r0, #3
 80069ce:	f000 f809 	bl	80069e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80069d2:	f7ff fc07 	bl	80061e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	0018      	movs	r0, r3
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	46c0      	nop			; (mov r8, r8)
 80069e0:	40022000 	.word	0x40022000

080069e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069e4:	b590      	push	{r4, r7, lr}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069ec:	4b14      	ldr	r3, [pc, #80]	; (8006a40 <HAL_InitTick+0x5c>)
 80069ee:	681c      	ldr	r4, [r3, #0]
 80069f0:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <HAL_InitTick+0x60>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	0019      	movs	r1, r3
 80069f6:	23fa      	movs	r3, #250	; 0xfa
 80069f8:	0098      	lsls	r0, r3, #2
 80069fa:	f7f9 fb83 	bl	8000104 <__udivsi3>
 80069fe:	0003      	movs	r3, r0
 8006a00:	0019      	movs	r1, r3
 8006a02:	0020      	movs	r0, r4
 8006a04:	f7f9 fb7e 	bl	8000104 <__udivsi3>
 8006a08:	0003      	movs	r3, r0
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f000 fc29 	bl	8007262 <HAL_SYSTICK_Config>
 8006a10:	1e03      	subs	r3, r0, #0
 8006a12:	d001      	beq.n	8006a18 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e00f      	b.n	8006a38 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d80b      	bhi.n	8006a36 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	2301      	movs	r3, #1
 8006a22:	425b      	negs	r3, r3
 8006a24:	2200      	movs	r2, #0
 8006a26:	0018      	movs	r0, r3
 8006a28:	f000 fc06 	bl	8007238 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a2c:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <HAL_InitTick+0x64>)
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
}
 8006a38:	0018      	movs	r0, r3
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	b003      	add	sp, #12
 8006a3e:	bd90      	pop	{r4, r7, pc}
 8006a40:	20000040 	.word	0x20000040
 8006a44:	20000048 	.word	0x20000048
 8006a48:	20000044 	.word	0x20000044

08006a4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <HAL_IncTick+0x1c>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	001a      	movs	r2, r3
 8006a56:	4b05      	ldr	r3, [pc, #20]	; (8006a6c <HAL_IncTick+0x20>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	18d2      	adds	r2, r2, r3
 8006a5c:	4b03      	ldr	r3, [pc, #12]	; (8006a6c <HAL_IncTick+0x20>)
 8006a5e:	601a      	str	r2, [r3, #0]
}
 8006a60:	46c0      	nop			; (mov r8, r8)
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	20000048 	.word	0x20000048
 8006a6c:	2000028c 	.word	0x2000028c

08006a70 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	af00      	add	r7, sp, #0
  return uwTick;
 8006a74:	4b02      	ldr	r3, [pc, #8]	; (8006a80 <HAL_GetTick+0x10>)
 8006a76:	681b      	ldr	r3, [r3, #0]
}
 8006a78:	0018      	movs	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	2000028c 	.word	0x2000028c

08006a84 <HAL_GetTickFreq>:
  * @brief return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8006a88:	4b02      	ldr	r3, [pc, #8]	; (8006a94 <HAL_GetTickFreq+0x10>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
}
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	46c0      	nop			; (mov r8, r8)
 8006a94:	20000048 	.word	0x20000048

08006a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006aa0:	f7ff ffe6 	bl	8006a70 <HAL_GetTick>
 8006aa4:	0003      	movs	r3, r0
 8006aa6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	d005      	beq.n	8006abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	; (8006adc <HAL_Delay+0x44>)
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	001a      	movs	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	189b      	adds	r3, r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	f7ff ffd6 	bl	8006a70 <HAL_GetTick>
 8006ac4:	0002      	movs	r2, r0
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d8f7      	bhi.n	8006ac0 <HAL_Delay+0x28>
  {
  }
}
 8006ad0:	46c0      	nop			; (mov r8, r8)
 8006ad2:	46c0      	nop			; (mov r8, r8)
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b004      	add	sp, #16
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	20000048 	.word	0x20000048

08006ae0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ae8:	230f      	movs	r3, #15
 8006aea:	18fb      	adds	r3, r7, r3
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d101      	bne.n	8006afe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8006afa:	2301      	movs	r3, #1
 8006afc:	e125      	b.n	8006d4a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d10a      	bne.n	8006b1c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2234      	movs	r2, #52	; 0x34
 8006b10:	2100      	movs	r1, #0
 8006b12:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	0018      	movs	r0, r3
 8006b18:	f7ff fb88 	bl	800622c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	2210      	movs	r2, #16
 8006b22:	4013      	ands	r3, r2
 8006b24:	d000      	beq.n	8006b28 <HAL_ADC_Init+0x48>
 8006b26:	e103      	b.n	8006d30 <HAL_ADC_Init+0x250>
 8006b28:	230f      	movs	r3, #15
 8006b2a:	18fb      	adds	r3, r7, r3
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d000      	beq.n	8006b34 <HAL_ADC_Init+0x54>
 8006b32:	e0fd      	b.n	8006d30 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8006b3e:	d000      	beq.n	8006b42 <HAL_ADC_Init+0x62>
 8006b40:	e0f6      	b.n	8006d30 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b46:	4a83      	ldr	r2, [pc, #524]	; (8006d54 <HAL_ADC_Init+0x274>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	2203      	movs	r2, #3
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d112      	bne.n	8006b86 <HAL_ADC_Init+0xa6>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2201      	movs	r2, #1
 8006b68:	4013      	ands	r3, r2
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d009      	beq.n	8006b82 <HAL_ADC_Init+0xa2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	2380      	movs	r3, #128	; 0x80
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	401a      	ands	r2, r3
 8006b7a:	2380      	movs	r3, #128	; 0x80
 8006b7c:	021b      	lsls	r3, r3, #8
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d101      	bne.n	8006b86 <HAL_ADC_Init+0xa6>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <HAL_ADC_Init+0xa8>
 8006b86:	2300      	movs	r3, #0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d116      	bne.n	8006bba <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2218      	movs	r2, #24
 8006b94:	4393      	bics	r3, r2
 8006b96:	0019      	movs	r1, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	0899      	lsrs	r1, r3, #2
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685a      	ldr	r2, [r3, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	68da      	ldr	r2, [r3, #12]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4964      	ldr	r1, [pc, #400]	; (8006d58 <HAL_ADC_Init+0x278>)
 8006bc6:	400a      	ands	r2, r1
 8006bc8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	7e1b      	ldrb	r3, [r3, #24]
 8006bce:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	7e5b      	ldrb	r3, [r3, #25]
 8006bd4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006bd6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	7e9b      	ldrb	r3, [r3, #26]
 8006bdc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006bde:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d002      	beq.n	8006bee <HAL_ADC_Init+0x10e>
 8006be8:	2380      	movs	r3, #128	; 0x80
 8006bea:	015b      	lsls	r3, r3, #5
 8006bec:	e000      	b.n	8006bf0 <HAL_ADC_Init+0x110>
 8006bee:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006bf0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006bf6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d101      	bne.n	8006c04 <HAL_ADC_Init+0x124>
 8006c00:	2304      	movs	r3, #4
 8006c02:	e000      	b.n	8006c06 <HAL_ADC_Init+0x126>
 8006c04:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8006c06:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2124      	movs	r1, #36	; 0x24
 8006c0c:	5c5b      	ldrb	r3, [r3, r1]
 8006c0e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006c10:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	7edb      	ldrb	r3, [r3, #27]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d115      	bne.n	8006c4c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7e9b      	ldrb	r3, [r3, #26]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d105      	bne.n	8006c34 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2280      	movs	r2, #128	; 0x80
 8006c2c:	0252      	lsls	r2, r2, #9
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60bb      	str	r3, [r7, #8]
 8006c32:	e00b      	b.n	8006c4c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	2220      	movs	r2, #32
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c44:	2201      	movs	r2, #1
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	23c2      	movs	r3, #194	; 0xc2
 8006c52:	33ff      	adds	r3, #255	; 0xff
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d007      	beq.n	8006c68 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006c60:	4313      	orrs	r3, r2
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68d9      	ldr	r1, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c7c:	2380      	movs	r3, #128	; 0x80
 8006c7e:	055b      	lsls	r3, r3, #21
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d01b      	beq.n	8006cbc <HAL_ADC_Init+0x1dc>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d017      	beq.n	8006cbc <HAL_ADC_Init+0x1dc>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d013      	beq.n	8006cbc <HAL_ADC_Init+0x1dc>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	2b03      	cmp	r3, #3
 8006c9a:	d00f      	beq.n	8006cbc <HAL_ADC_Init+0x1dc>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d00b      	beq.n	8006cbc <HAL_ADC_Init+0x1dc>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	d007      	beq.n	8006cbc <HAL_ADC_Init+0x1dc>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	2b06      	cmp	r3, #6
 8006cb2:	d003      	beq.n	8006cbc <HAL_ADC_Init+0x1dc>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb8:	2b07      	cmp	r3, #7
 8006cba:	d112      	bne.n	8006ce2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695a      	ldr	r2, [r3, #20]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2107      	movs	r1, #7
 8006cc8:	438a      	bics	r2, r1
 8006cca:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6959      	ldr	r1, [r3, #20]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	2207      	movs	r2, #7
 8006cd8:	401a      	ands	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4a1c      	ldr	r2, [pc, #112]	; (8006d5c <HAL_ADC_Init+0x27c>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d10b      	bne.n	8006d0a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfc:	2203      	movs	r2, #3
 8006cfe:	4393      	bics	r3, r2
 8006d00:	2201      	movs	r2, #1
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006d08:	e01c      	b.n	8006d44 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0e:	2212      	movs	r2, #18
 8006d10:	4393      	bics	r3, r2
 8006d12:	2210      	movs	r2, #16
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d1e:	2201      	movs	r2, #1
 8006d20:	431a      	orrs	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8006d26:	230f      	movs	r3, #15
 8006d28:	18fb      	adds	r3, r7, r3
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006d2e:	e009      	b.n	8006d44 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	2210      	movs	r2, #16
 8006d36:	431a      	orrs	r2, r3
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8006d3c:	230f      	movs	r3, #15
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	2201      	movs	r2, #1
 8006d42:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006d44:	230f      	movs	r3, #15
 8006d46:	18fb      	adds	r3, r7, r3
 8006d48:	781b      	ldrb	r3, [r3, #0]
}
 8006d4a:	0018      	movs	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	b004      	add	sp, #16
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	fffffefd 	.word	0xfffffefd
 8006d58:	fffe0219 	.word	0xfffe0219
 8006d5c:	833fffe7 	.word	0x833fffe7

08006d60 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006d60:	b590      	push	{r4, r7, lr}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d68:	230f      	movs	r3, #15
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2204      	movs	r2, #4
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d138      	bne.n	8006dee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2234      	movs	r2, #52	; 0x34
 8006d80:	5c9b      	ldrb	r3, [r3, r2]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d101      	bne.n	8006d8a <HAL_ADC_Start+0x2a>
 8006d86:	2302      	movs	r3, #2
 8006d88:	e038      	b.n	8006dfc <HAL_ADC_Start+0x9c>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2234      	movs	r2, #52	; 0x34
 8006d8e:	2101      	movs	r1, #1
 8006d90:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	7e5b      	ldrb	r3, [r3, #25]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d007      	beq.n	8006daa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006d9a:	230f      	movs	r3, #15
 8006d9c:	18fc      	adds	r4, r7, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	0018      	movs	r0, r3
 8006da2:	f000 f933 	bl	800700c <ADC_Enable>
 8006da6:	0003      	movs	r3, r0
 8006da8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006daa:	230f      	movs	r3, #15
 8006dac:	18fb      	adds	r3, r7, r3
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d120      	bne.n	8006df6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	4a12      	ldr	r2, [pc, #72]	; (8006e04 <HAL_ADC_Start+0xa4>)
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2280      	movs	r2, #128	; 0x80
 8006dbe:	0052      	lsls	r2, r2, #1
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2234      	movs	r2, #52	; 0x34
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	221c      	movs	r2, #28
 8006dda:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2104      	movs	r1, #4
 8006de8:	430a      	orrs	r2, r1
 8006dea:	609a      	str	r2, [r3, #8]
 8006dec:	e003      	b.n	8006df6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006dee:	230f      	movs	r3, #15
 8006df0:	18fb      	adds	r3, r7, r3
 8006df2:	2202      	movs	r2, #2
 8006df4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006df6:	230f      	movs	r3, #15
 8006df8:	18fb      	adds	r3, r7, r3
 8006dfa:	781b      	ldrb	r3, [r3, #0]
}
 8006dfc:	0018      	movs	r0, r3
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	b005      	add	sp, #20
 8006e02:	bd90      	pop	{r4, r7, pc}
 8006e04:	fffff0fe 	.word	0xfffff0fe

08006e08 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006e16:	0018      	movs	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b002      	add	sp, #8
 8006e1c:	bd80      	pop	{r7, pc}
	...

08006e20 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e2a:	230f      	movs	r3, #15
 8006e2c:	18fb      	adds	r3, r7, r3
 8006e2e:	2200      	movs	r2, #0
 8006e30:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e3a:	2380      	movs	r3, #128	; 0x80
 8006e3c:	055b      	lsls	r3, r3, #21
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d011      	beq.n	8006e66 <HAL_ADC_ConfigChannel+0x46>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d00d      	beq.n	8006e66 <HAL_ADC_ConfigChannel+0x46>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d009      	beq.n	8006e66 <HAL_ADC_ConfigChannel+0x46>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d005      	beq.n	8006e66 <HAL_ADC_ConfigChannel+0x46>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d001      	beq.n	8006e66 <HAL_ADC_ConfigChannel+0x46>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2234      	movs	r2, #52	; 0x34
 8006e6a:	5c9b      	ldrb	r3, [r3, r2]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_ADC_ConfigChannel+0x54>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e0bb      	b.n	8006fec <HAL_ADC_ConfigChannel+0x1cc>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2234      	movs	r2, #52	; 0x34
 8006e78:	2101      	movs	r1, #1
 8006e7a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	2204      	movs	r2, #4
 8006e84:	4013      	ands	r3, r2
 8006e86:	d000      	beq.n	8006e8a <HAL_ADC_ConfigChannel+0x6a>
 8006e88:	e09f      	b.n	8006fca <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	4a59      	ldr	r2, [pc, #356]	; (8006ff4 <HAL_ADC_ConfigChannel+0x1d4>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <HAL_ADC_ConfigChannel+0x76>
 8006e94:	e077      	b.n	8006f86 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	409a      	lsls	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb0:	2380      	movs	r3, #128	; 0x80
 8006eb2:	055b      	lsls	r3, r3, #21
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d037      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x108>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d033      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x108>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d02f      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x108>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	2b03      	cmp	r3, #3
 8006ece:	d02b      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x108>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d027      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x108>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006edc:	2b05      	cmp	r3, #5
 8006ede:	d023      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x108>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	2b06      	cmp	r3, #6
 8006ee6:	d01f      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x108>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eec:	2b07      	cmp	r3, #7
 8006eee:	d01b      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	2107      	movs	r1, #7
 8006efc:	400b      	ands	r3, r1
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d012      	beq.n	8006f28 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2107      	movs	r1, #7
 8006f0e:	438a      	bics	r2, r1
 8006f10:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6959      	ldr	r1, [r3, #20]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2207      	movs	r2, #7
 8006f1e:	401a      	ands	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	430a      	orrs	r2, r1
 8006f26:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b10      	cmp	r3, #16
 8006f2e:	d003      	beq.n	8006f38 <HAL_ADC_ConfigChannel+0x118>
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b11      	cmp	r3, #17
 8006f36:	d152      	bne.n	8006fde <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006f38:	4b2f      	ldr	r3, [pc, #188]	; (8006ff8 <HAL_ADC_ConfigChannel+0x1d8>)
 8006f3a:	6819      	ldr	r1, [r3, #0]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b10      	cmp	r3, #16
 8006f42:	d102      	bne.n	8006f4a <HAL_ADC_ConfigChannel+0x12a>
 8006f44:	2380      	movs	r3, #128	; 0x80
 8006f46:	041b      	lsls	r3, r3, #16
 8006f48:	e001      	b.n	8006f4e <HAL_ADC_ConfigChannel+0x12e>
 8006f4a:	2380      	movs	r3, #128	; 0x80
 8006f4c:	03db      	lsls	r3, r3, #15
 8006f4e:	4a2a      	ldr	r2, [pc, #168]	; (8006ff8 <HAL_ADC_ConfigChannel+0x1d8>)
 8006f50:	430b      	orrs	r3, r1
 8006f52:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b10      	cmp	r3, #16
 8006f5a:	d140      	bne.n	8006fde <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006f5c:	4b27      	ldr	r3, [pc, #156]	; (8006ffc <HAL_ADC_ConfigChannel+0x1dc>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4927      	ldr	r1, [pc, #156]	; (8007000 <HAL_ADC_ConfigChannel+0x1e0>)
 8006f62:	0018      	movs	r0, r3
 8006f64:	f7f9 f8ce 	bl	8000104 <__udivsi3>
 8006f68:	0003      	movs	r3, r0
 8006f6a:	001a      	movs	r2, r3
 8006f6c:	0013      	movs	r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	189b      	adds	r3, r3, r2
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006f76:	e002      	b.n	8006f7e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1f9      	bne.n	8006f78 <HAL_ADC_ConfigChannel+0x158>
 8006f84:	e02b      	b.n	8006fde <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2101      	movs	r1, #1
 8006f92:	4099      	lsls	r1, r3
 8006f94:	000b      	movs	r3, r1
 8006f96:	43d9      	mvns	r1, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	400a      	ands	r2, r1
 8006f9e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b10      	cmp	r3, #16
 8006fa6:	d003      	beq.n	8006fb0 <HAL_ADC_ConfigChannel+0x190>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b11      	cmp	r3, #17
 8006fae:	d116      	bne.n	8006fde <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006fb0:	4b11      	ldr	r3, [pc, #68]	; (8006ff8 <HAL_ADC_ConfigChannel+0x1d8>)
 8006fb2:	6819      	ldr	r1, [r3, #0]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b10      	cmp	r3, #16
 8006fba:	d101      	bne.n	8006fc0 <HAL_ADC_ConfigChannel+0x1a0>
 8006fbc:	4a11      	ldr	r2, [pc, #68]	; (8007004 <HAL_ADC_ConfigChannel+0x1e4>)
 8006fbe:	e000      	b.n	8006fc2 <HAL_ADC_ConfigChannel+0x1a2>
 8006fc0:	4a11      	ldr	r2, [pc, #68]	; (8007008 <HAL_ADC_ConfigChannel+0x1e8>)
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <HAL_ADC_ConfigChannel+0x1d8>)
 8006fc4:	400a      	ands	r2, r1
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	e009      	b.n	8006fde <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fce:	2220      	movs	r2, #32
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006fd6:	230f      	movs	r3, #15
 8006fd8:	18fb      	adds	r3, r7, r3
 8006fda:	2201      	movs	r2, #1
 8006fdc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2234      	movs	r2, #52	; 0x34
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006fe6:	230f      	movs	r3, #15
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	781b      	ldrb	r3, [r3, #0]
}
 8006fec:	0018      	movs	r0, r3
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	b004      	add	sp, #16
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	00001001 	.word	0x00001001
 8006ff8:	40012708 	.word	0x40012708
 8006ffc:	20000040 	.word	0x20000040
 8007000:	000f4240 	.word	0x000f4240
 8007004:	ff7fffff 	.word	0xff7fffff
 8007008:	ffbfffff 	.word	0xffbfffff

0800700c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2203      	movs	r2, #3
 8007024:	4013      	ands	r3, r2
 8007026:	2b01      	cmp	r3, #1
 8007028:	d112      	bne.n	8007050 <ADC_Enable+0x44>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2201      	movs	r2, #1
 8007032:	4013      	ands	r3, r2
 8007034:	2b01      	cmp	r3, #1
 8007036:	d009      	beq.n	800704c <ADC_Enable+0x40>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	2380      	movs	r3, #128	; 0x80
 8007040:	021b      	lsls	r3, r3, #8
 8007042:	401a      	ands	r2, r3
 8007044:	2380      	movs	r3, #128	; 0x80
 8007046:	021b      	lsls	r3, r3, #8
 8007048:	429a      	cmp	r2, r3
 800704a:	d101      	bne.n	8007050 <ADC_Enable+0x44>
 800704c:	2301      	movs	r3, #1
 800704e:	e000      	b.n	8007052 <ADC_Enable+0x46>
 8007050:	2300      	movs	r3, #0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d152      	bne.n	80070fc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	4a2a      	ldr	r2, [pc, #168]	; (8007108 <ADC_Enable+0xfc>)
 800705e:	4013      	ands	r3, r2
 8007060:	d00d      	beq.n	800707e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	2210      	movs	r2, #16
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	2201      	movs	r2, #1
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e03f      	b.n	80070fe <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2101      	movs	r1, #1
 800708a:	430a      	orrs	r2, r1
 800708c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800708e:	4b1f      	ldr	r3, [pc, #124]	; (800710c <ADC_Enable+0x100>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	491f      	ldr	r1, [pc, #124]	; (8007110 <ADC_Enable+0x104>)
 8007094:	0018      	movs	r0, r3
 8007096:	f7f9 f835 	bl	8000104 <__udivsi3>
 800709a:	0003      	movs	r3, r0
 800709c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800709e:	e002      	b.n	80070a6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	3b01      	subs	r3, #1
 80070a4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1f9      	bne.n	80070a0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80070ac:	f7ff fce0 	bl	8006a70 <HAL_GetTick>
 80070b0:	0003      	movs	r3, r0
 80070b2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80070b4:	e01b      	b.n	80070ee <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80070b6:	f7ff fcdb 	bl	8006a70 <HAL_GetTick>
 80070ba:	0002      	movs	r2, r0
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	d914      	bls.n	80070ee <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2201      	movs	r2, #1
 80070cc:	4013      	ands	r3, r2
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d00d      	beq.n	80070ee <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d6:	2210      	movs	r2, #16
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e2:	2201      	movs	r2, #1
 80070e4:	431a      	orrs	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e007      	b.n	80070fe <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2201      	movs	r2, #1
 80070f6:	4013      	ands	r3, r2
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d1dc      	bne.n	80070b6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	0018      	movs	r0, r3
 8007100:	46bd      	mov	sp, r7
 8007102:	b004      	add	sp, #16
 8007104:	bd80      	pop	{r7, pc}
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	80000017 	.word	0x80000017
 800710c:	20000040 	.word	0x20000040
 8007110:	000f4240 	.word	0x000f4240

08007114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007114:	b590      	push	{r4, r7, lr}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	0002      	movs	r2, r0
 800711c:	6039      	str	r1, [r7, #0]
 800711e:	1dfb      	adds	r3, r7, #7
 8007120:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007122:	1dfb      	adds	r3, r7, #7
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	2b7f      	cmp	r3, #127	; 0x7f
 8007128:	d828      	bhi.n	800717c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800712a:	4a2f      	ldr	r2, [pc, #188]	; (80071e8 <__NVIC_SetPriority+0xd4>)
 800712c:	1dfb      	adds	r3, r7, #7
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	b25b      	sxtb	r3, r3
 8007132:	089b      	lsrs	r3, r3, #2
 8007134:	33c0      	adds	r3, #192	; 0xc0
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	589b      	ldr	r3, [r3, r2]
 800713a:	1dfa      	adds	r2, r7, #7
 800713c:	7812      	ldrb	r2, [r2, #0]
 800713e:	0011      	movs	r1, r2
 8007140:	2203      	movs	r2, #3
 8007142:	400a      	ands	r2, r1
 8007144:	00d2      	lsls	r2, r2, #3
 8007146:	21ff      	movs	r1, #255	; 0xff
 8007148:	4091      	lsls	r1, r2
 800714a:	000a      	movs	r2, r1
 800714c:	43d2      	mvns	r2, r2
 800714e:	401a      	ands	r2, r3
 8007150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	019b      	lsls	r3, r3, #6
 8007156:	22ff      	movs	r2, #255	; 0xff
 8007158:	401a      	ands	r2, r3
 800715a:	1dfb      	adds	r3, r7, #7
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	0018      	movs	r0, r3
 8007160:	2303      	movs	r3, #3
 8007162:	4003      	ands	r3, r0
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007168:	481f      	ldr	r0, [pc, #124]	; (80071e8 <__NVIC_SetPriority+0xd4>)
 800716a:	1dfb      	adds	r3, r7, #7
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	b25b      	sxtb	r3, r3
 8007170:	089b      	lsrs	r3, r3, #2
 8007172:	430a      	orrs	r2, r1
 8007174:	33c0      	adds	r3, #192	; 0xc0
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800717a:	e031      	b.n	80071e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800717c:	4a1b      	ldr	r2, [pc, #108]	; (80071ec <__NVIC_SetPriority+0xd8>)
 800717e:	1dfb      	adds	r3, r7, #7
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	0019      	movs	r1, r3
 8007184:	230f      	movs	r3, #15
 8007186:	400b      	ands	r3, r1
 8007188:	3b08      	subs	r3, #8
 800718a:	089b      	lsrs	r3, r3, #2
 800718c:	3306      	adds	r3, #6
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	18d3      	adds	r3, r2, r3
 8007192:	3304      	adds	r3, #4
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	1dfa      	adds	r2, r7, #7
 8007198:	7812      	ldrb	r2, [r2, #0]
 800719a:	0011      	movs	r1, r2
 800719c:	2203      	movs	r2, #3
 800719e:	400a      	ands	r2, r1
 80071a0:	00d2      	lsls	r2, r2, #3
 80071a2:	21ff      	movs	r1, #255	; 0xff
 80071a4:	4091      	lsls	r1, r2
 80071a6:	000a      	movs	r2, r1
 80071a8:	43d2      	mvns	r2, r2
 80071aa:	401a      	ands	r2, r3
 80071ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	019b      	lsls	r3, r3, #6
 80071b2:	22ff      	movs	r2, #255	; 0xff
 80071b4:	401a      	ands	r2, r3
 80071b6:	1dfb      	adds	r3, r7, #7
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	0018      	movs	r0, r3
 80071bc:	2303      	movs	r3, #3
 80071be:	4003      	ands	r3, r0
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80071c4:	4809      	ldr	r0, [pc, #36]	; (80071ec <__NVIC_SetPriority+0xd8>)
 80071c6:	1dfb      	adds	r3, r7, #7
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	001c      	movs	r4, r3
 80071cc:	230f      	movs	r3, #15
 80071ce:	4023      	ands	r3, r4
 80071d0:	3b08      	subs	r3, #8
 80071d2:	089b      	lsrs	r3, r3, #2
 80071d4:	430a      	orrs	r2, r1
 80071d6:	3306      	adds	r3, #6
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	18c3      	adds	r3, r0, r3
 80071dc:	3304      	adds	r3, #4
 80071de:	601a      	str	r2, [r3, #0]
}
 80071e0:	46c0      	nop			; (mov r8, r8)
 80071e2:	46bd      	mov	sp, r7
 80071e4:	b003      	add	sp, #12
 80071e6:	bd90      	pop	{r4, r7, pc}
 80071e8:	e000e100 	.word	0xe000e100
 80071ec:	e000ed00 	.word	0xe000ed00

080071f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	1e5a      	subs	r2, r3, #1
 80071fc:	2380      	movs	r3, #128	; 0x80
 80071fe:	045b      	lsls	r3, r3, #17
 8007200:	429a      	cmp	r2, r3
 8007202:	d301      	bcc.n	8007208 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007204:	2301      	movs	r3, #1
 8007206:	e010      	b.n	800722a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007208:	4b0a      	ldr	r3, [pc, #40]	; (8007234 <SysTick_Config+0x44>)
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	3a01      	subs	r2, #1
 800720e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007210:	2301      	movs	r3, #1
 8007212:	425b      	negs	r3, r3
 8007214:	2103      	movs	r1, #3
 8007216:	0018      	movs	r0, r3
 8007218:	f7ff ff7c 	bl	8007114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800721c:	4b05      	ldr	r3, [pc, #20]	; (8007234 <SysTick_Config+0x44>)
 800721e:	2200      	movs	r2, #0
 8007220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007222:	4b04      	ldr	r3, [pc, #16]	; (8007234 <SysTick_Config+0x44>)
 8007224:	2207      	movs	r2, #7
 8007226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007228:	2300      	movs	r3, #0
}
 800722a:	0018      	movs	r0, r3
 800722c:	46bd      	mov	sp, r7
 800722e:	b002      	add	sp, #8
 8007230:	bd80      	pop	{r7, pc}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	e000e010 	.word	0xe000e010

08007238 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	210f      	movs	r1, #15
 8007244:	187b      	adds	r3, r7, r1
 8007246:	1c02      	adds	r2, r0, #0
 8007248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	187b      	adds	r3, r7, r1
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	b25b      	sxtb	r3, r3
 8007252:	0011      	movs	r1, r2
 8007254:	0018      	movs	r0, r3
 8007256:	f7ff ff5d 	bl	8007114 <__NVIC_SetPriority>
}
 800725a:	46c0      	nop			; (mov r8, r8)
 800725c:	46bd      	mov	sp, r7
 800725e:	b004      	add	sp, #16
 8007260:	bd80      	pop	{r7, pc}

08007262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	0018      	movs	r0, r3
 800726e:	f7ff ffbf 	bl	80071f0 <SysTick_Config>
 8007272:	0003      	movs	r3, r0
}
 8007274:	0018      	movs	r0, r3
 8007276:	46bd      	mov	sp, r7
 8007278:	b002      	add	sp, #8
 800727a:	bd80      	pop	{r7, pc}

0800727c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800727c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	603a      	str	r2, [r7, #0]
 8007288:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800728a:	2317      	movs	r3, #23
 800728c:	18fb      	adds	r3, r7, r3
 800728e:	2201      	movs	r2, #1
 8007290:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8007292:	2316      	movs	r3, #22
 8007294:	18fb      	adds	r3, r7, r3
 8007296:	2200      	movs	r2, #0
 8007298:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 800729a:	2315      	movs	r3, #21
 800729c:	18fb      	adds	r3, r7, r3
 800729e:	2200      	movs	r2, #0
 80072a0:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80072a2:	4b3e      	ldr	r3, [pc, #248]	; (800739c <HAL_FLASH_Program+0x120>)
 80072a4:	7e1b      	ldrb	r3, [r3, #24]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d101      	bne.n	80072ae <HAL_FLASH_Program+0x32>
 80072aa:	2302      	movs	r3, #2
 80072ac:	e072      	b.n	8007394 <HAL_FLASH_Program+0x118>
 80072ae:	4b3b      	ldr	r3, [pc, #236]	; (800739c <HAL_FLASH_Program+0x120>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80072b4:	2317      	movs	r3, #23
 80072b6:	18fe      	adds	r6, r7, r3
 80072b8:	4b39      	ldr	r3, [pc, #228]	; (80073a0 <HAL_FLASH_Program+0x124>)
 80072ba:	0018      	movs	r0, r3
 80072bc:	f000 f8c4 	bl	8007448 <FLASH_WaitForLastOperation>
 80072c0:	0003      	movs	r3, r0
 80072c2:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80072c4:	2317      	movs	r3, #23
 80072c6:	18fb      	adds	r3, r7, r3
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d15c      	bne.n	8007388 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d104      	bne.n	80072de <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80072d4:	2315      	movs	r3, #21
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	2201      	movs	r2, #1
 80072da:	701a      	strb	r2, [r3, #0]
 80072dc:	e00b      	b.n	80072f6 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d104      	bne.n	80072ee <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80072e4:	2315      	movs	r3, #21
 80072e6:	18fb      	adds	r3, r7, r3
 80072e8:	2202      	movs	r2, #2
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e003      	b.n	80072f6 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80072ee:	2315      	movs	r3, #21
 80072f0:	18fb      	adds	r3, r7, r3
 80072f2:	2204      	movs	r2, #4
 80072f4:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80072f6:	2316      	movs	r3, #22
 80072f8:	18fb      	adds	r3, r7, r3
 80072fa:	2200      	movs	r2, #0
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	e039      	b.n	8007374 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007300:	2116      	movs	r1, #22
 8007302:	187b      	adds	r3, r7, r1
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	005a      	lsls	r2, r3, #1
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	18d0      	adds	r0, r2, r3
 800730c:	187b      	adds	r3, r7, r1
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	011b      	lsls	r3, r3, #4
 8007312:	001a      	movs	r2, r3
 8007314:	3a20      	subs	r2, #32
 8007316:	2a00      	cmp	r2, #0
 8007318:	db03      	blt.n	8007322 <HAL_FLASH_Program+0xa6>
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	40d1      	lsrs	r1, r2
 800731e:	000c      	movs	r4, r1
 8007320:	e008      	b.n	8007334 <HAL_FLASH_Program+0xb8>
 8007322:	2220      	movs	r2, #32
 8007324:	1ad2      	subs	r2, r2, r3
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4091      	lsls	r1, r2
 800732a:	000a      	movs	r2, r1
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	40d9      	lsrs	r1, r3
 8007330:	000c      	movs	r4, r1
 8007332:	4314      	orrs	r4, r2
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	40da      	lsrs	r2, r3
 8007338:	0015      	movs	r5, r2
 800733a:	b2a3      	uxth	r3, r4
 800733c:	0019      	movs	r1, r3
 800733e:	f000 f867 	bl	8007410 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007342:	2317      	movs	r3, #23
 8007344:	18fe      	adds	r6, r7, r3
 8007346:	4b16      	ldr	r3, [pc, #88]	; (80073a0 <HAL_FLASH_Program+0x124>)
 8007348:	0018      	movs	r0, r3
 800734a:	f000 f87d 	bl	8007448 <FLASH_WaitForLastOperation>
 800734e:	0003      	movs	r3, r0
 8007350:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007352:	4b14      	ldr	r3, [pc, #80]	; (80073a4 <HAL_FLASH_Program+0x128>)
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	4b13      	ldr	r3, [pc, #76]	; (80073a4 <HAL_FLASH_Program+0x128>)
 8007358:	2101      	movs	r1, #1
 800735a:	438a      	bics	r2, r1
 800735c:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800735e:	2317      	movs	r3, #23
 8007360:	18fb      	adds	r3, r7, r3
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10e      	bne.n	8007386 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8007368:	2116      	movs	r1, #22
 800736a:	187b      	adds	r3, r7, r1
 800736c:	781a      	ldrb	r2, [r3, #0]
 800736e:	187b      	adds	r3, r7, r1
 8007370:	3201      	adds	r2, #1
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	2316      	movs	r3, #22
 8007376:	18fa      	adds	r2, r7, r3
 8007378:	2315      	movs	r3, #21
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	7812      	ldrb	r2, [r2, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d3bd      	bcc.n	8007300 <HAL_FLASH_Program+0x84>
 8007384:	e000      	b.n	8007388 <HAL_FLASH_Program+0x10c>
      {
        break;
 8007386:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <HAL_FLASH_Program+0x120>)
 800738a:	2200      	movs	r2, #0
 800738c:	761a      	strb	r2, [r3, #24]

  return status;
 800738e:	2317      	movs	r3, #23
 8007390:	18fb      	adds	r3, r7, r3
 8007392:	781b      	ldrb	r3, [r3, #0]
}
 8007394:	0018      	movs	r0, r3
 8007396:	46bd      	mov	sp, r7
 8007398:	b007      	add	sp, #28
 800739a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739c:	20000290 	.word	0x20000290
 80073a0:	0000c350 	.word	0x0000c350
 80073a4:	40022000 	.word	0x40022000

080073a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80073ae:	1dfb      	adds	r3, r7, #7
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80073b4:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <HAL_FLASH_Unlock+0x40>)
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	2280      	movs	r2, #128	; 0x80
 80073ba:	4013      	ands	r3, r2
 80073bc:	d00d      	beq.n	80073da <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80073be:	4b0a      	ldr	r3, [pc, #40]	; (80073e8 <HAL_FLASH_Unlock+0x40>)
 80073c0:	4a0a      	ldr	r2, [pc, #40]	; (80073ec <HAL_FLASH_Unlock+0x44>)
 80073c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80073c4:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <HAL_FLASH_Unlock+0x40>)
 80073c6:	4a0a      	ldr	r2, [pc, #40]	; (80073f0 <HAL_FLASH_Unlock+0x48>)
 80073c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80073ca:	4b07      	ldr	r3, [pc, #28]	; (80073e8 <HAL_FLASH_Unlock+0x40>)
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	2280      	movs	r2, #128	; 0x80
 80073d0:	4013      	ands	r3, r2
 80073d2:	d002      	beq.n	80073da <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80073d4:	1dfb      	adds	r3, r7, #7
 80073d6:	2201      	movs	r2, #1
 80073d8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80073da:	1dfb      	adds	r3, r7, #7
 80073dc:	781b      	ldrb	r3, [r3, #0]
}
 80073de:	0018      	movs	r0, r3
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b002      	add	sp, #8
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	40022000 	.word	0x40022000
 80073ec:	45670123 	.word	0x45670123
 80073f0:	cdef89ab 	.word	0xcdef89ab

080073f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80073f8:	4b04      	ldr	r3, [pc, #16]	; (800740c <HAL_FLASH_Lock+0x18>)
 80073fa:	691a      	ldr	r2, [r3, #16]
 80073fc:	4b03      	ldr	r3, [pc, #12]	; (800740c <HAL_FLASH_Lock+0x18>)
 80073fe:	2180      	movs	r1, #128	; 0x80
 8007400:	430a      	orrs	r2, r1
 8007402:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007404:	2300      	movs	r3, #0
}
 8007406:	0018      	movs	r0, r3
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40022000 	.word	0x40022000

08007410 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	000a      	movs	r2, r1
 800741a:	1cbb      	adds	r3, r7, #2
 800741c:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800741e:	4b08      	ldr	r3, [pc, #32]	; (8007440 <FLASH_Program_HalfWord+0x30>)
 8007420:	2200      	movs	r2, #0
 8007422:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007424:	4b07      	ldr	r3, [pc, #28]	; (8007444 <FLASH_Program_HalfWord+0x34>)
 8007426:	691a      	ldr	r2, [r3, #16]
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <FLASH_Program_HalfWord+0x34>)
 800742a:	2101      	movs	r1, #1
 800742c:	430a      	orrs	r2, r1
 800742e:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	1cba      	adds	r2, r7, #2
 8007434:	8812      	ldrh	r2, [r2, #0]
 8007436:	801a      	strh	r2, [r3, #0]
}
 8007438:	46c0      	nop			; (mov r8, r8)
 800743a:	46bd      	mov	sp, r7
 800743c:	b002      	add	sp, #8
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20000290 	.word	0x20000290
 8007444:	40022000 	.word	0x40022000

08007448 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007450:	f7ff fb0e 	bl	8006a70 <HAL_GetTick>
 8007454:	0003      	movs	r3, r0
 8007456:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8007458:	e00f      	b.n	800747a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	3301      	adds	r3, #1
 800745e:	d00c      	beq.n	800747a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d007      	beq.n	8007476 <FLASH_WaitForLastOperation+0x2e>
 8007466:	f7ff fb03 	bl	8006a70 <HAL_GetTick>
 800746a:	0002      	movs	r2, r0
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	429a      	cmp	r2, r3
 8007474:	d201      	bcs.n	800747a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e01f      	b.n	80074ba <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <FLASH_WaitForLastOperation+0x7c>)
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2201      	movs	r2, #1
 8007480:	4013      	ands	r3, r2
 8007482:	2b01      	cmp	r3, #1
 8007484:	d0e9      	beq.n	800745a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007486:	4b0f      	ldr	r3, [pc, #60]	; (80074c4 <FLASH_WaitForLastOperation+0x7c>)
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	2220      	movs	r2, #32
 800748c:	4013      	ands	r3, r2
 800748e:	2b20      	cmp	r3, #32
 8007490:	d102      	bne.n	8007498 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007492:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <FLASH_WaitForLastOperation+0x7c>)
 8007494:	2220      	movs	r2, #32
 8007496:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8007498:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <FLASH_WaitForLastOperation+0x7c>)
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	2210      	movs	r2, #16
 800749e:	4013      	ands	r3, r2
 80074a0:	2b10      	cmp	r3, #16
 80074a2:	d005      	beq.n	80074b0 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80074a4:	4b07      	ldr	r3, [pc, #28]	; (80074c4 <FLASH_WaitForLastOperation+0x7c>)
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	2204      	movs	r2, #4
 80074aa:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80074ac:	2b04      	cmp	r3, #4
 80074ae:	d103      	bne.n	80074b8 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80074b0:	f000 f80a 	bl	80074c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	0018      	movs	r0, r3
 80074bc:	46bd      	mov	sp, r7
 80074be:	b004      	add	sp, #16
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	46c0      	nop			; (mov r8, r8)
 80074c4:	40022000 	.word	0x40022000

080074c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80074d2:	4b13      	ldr	r3, [pc, #76]	; (8007520 <FLASH_SetErrorCode+0x58>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	2210      	movs	r2, #16
 80074d8:	4013      	ands	r3, r2
 80074da:	2b10      	cmp	r3, #16
 80074dc:	d109      	bne.n	80074f2 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80074de:	4b11      	ldr	r3, [pc, #68]	; (8007524 <FLASH_SetErrorCode+0x5c>)
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	2202      	movs	r2, #2
 80074e4:	431a      	orrs	r2, r3
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <FLASH_SetErrorCode+0x5c>)
 80074e8:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2210      	movs	r2, #16
 80074ee:	4313      	orrs	r3, r2
 80074f0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <FLASH_SetErrorCode+0x58>)
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	2204      	movs	r2, #4
 80074f8:	4013      	ands	r3, r2
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d109      	bne.n	8007512 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80074fe:	4b09      	ldr	r3, [pc, #36]	; (8007524 <FLASH_SetErrorCode+0x5c>)
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	2201      	movs	r2, #1
 8007504:	431a      	orrs	r2, r3
 8007506:	4b07      	ldr	r3, [pc, #28]	; (8007524 <FLASH_SetErrorCode+0x5c>)
 8007508:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	4313      	orrs	r3, r2
 8007510:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007512:	4b03      	ldr	r3, [pc, #12]	; (8007520 <FLASH_SetErrorCode+0x58>)
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	60da      	str	r2, [r3, #12]
}  
 8007518:	46c0      	nop			; (mov r8, r8)
 800751a:	46bd      	mov	sp, r7
 800751c:	b002      	add	sp, #8
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40022000 	.word	0x40022000
 8007524:	20000290 	.word	0x20000290

08007528 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007528:	b5b0      	push	{r4, r5, r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007532:	230f      	movs	r3, #15
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	2201      	movs	r2, #1
 8007538:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800753e:	4b32      	ldr	r3, [pc, #200]	; (8007608 <HAL_FLASHEx_Erase+0xe0>)
 8007540:	7e1b      	ldrb	r3, [r3, #24]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <HAL_FLASHEx_Erase+0x22>
 8007546:	2302      	movs	r3, #2
 8007548:	e05a      	b.n	8007600 <HAL_FLASHEx_Erase+0xd8>
 800754a:	4b2f      	ldr	r3, [pc, #188]	; (8007608 <HAL_FLASHEx_Erase+0xe0>)
 800754c:	2201      	movs	r2, #1
 800754e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d116      	bne.n	8007586 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007558:	4b2c      	ldr	r3, [pc, #176]	; (800760c <HAL_FLASHEx_Erase+0xe4>)
 800755a:	0018      	movs	r0, r3
 800755c:	f7ff ff74 	bl	8007448 <FLASH_WaitForLastOperation>
 8007560:	1e03      	subs	r3, r0, #0
 8007562:	d147      	bne.n	80075f4 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8007564:	f000 f856 	bl	8007614 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007568:	230f      	movs	r3, #15
 800756a:	18fc      	adds	r4, r7, r3
 800756c:	4b27      	ldr	r3, [pc, #156]	; (800760c <HAL_FLASHEx_Erase+0xe4>)
 800756e:	0018      	movs	r0, r3
 8007570:	f7ff ff6a 	bl	8007448 <FLASH_WaitForLastOperation>
 8007574:	0003      	movs	r3, r0
 8007576:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8007578:	4b25      	ldr	r3, [pc, #148]	; (8007610 <HAL_FLASHEx_Erase+0xe8>)
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	4b24      	ldr	r3, [pc, #144]	; (8007610 <HAL_FLASHEx_Erase+0xe8>)
 800757e:	2104      	movs	r1, #4
 8007580:	438a      	bics	r2, r1
 8007582:	611a      	str	r2, [r3, #16]
 8007584:	e036      	b.n	80075f4 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007586:	4b21      	ldr	r3, [pc, #132]	; (800760c <HAL_FLASHEx_Erase+0xe4>)
 8007588:	0018      	movs	r0, r3
 800758a:	f7ff ff5d 	bl	8007448 <FLASH_WaitForLastOperation>
 800758e:	1e03      	subs	r3, r0, #0
 8007590:	d130      	bne.n	80075f4 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	2201      	movs	r2, #1
 8007596:	4252      	negs	r2, r2
 8007598:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	60bb      	str	r3, [r7, #8]
 80075a0:	e01f      	b.n	80075e2 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	0018      	movs	r0, r3
 80075a6:	f000 f84d 	bl	8007644 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80075aa:	250f      	movs	r5, #15
 80075ac:	197c      	adds	r4, r7, r5
 80075ae:	4b17      	ldr	r3, [pc, #92]	; (800760c <HAL_FLASHEx_Erase+0xe4>)
 80075b0:	0018      	movs	r0, r3
 80075b2:	f7ff ff49 	bl	8007448 <FLASH_WaitForLastOperation>
 80075b6:	0003      	movs	r3, r0
 80075b8:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80075ba:	4b15      	ldr	r3, [pc, #84]	; (8007610 <HAL_FLASHEx_Erase+0xe8>)
 80075bc:	691a      	ldr	r2, [r3, #16]
 80075be:	4b14      	ldr	r3, [pc, #80]	; (8007610 <HAL_FLASHEx_Erase+0xe8>)
 80075c0:	2102      	movs	r1, #2
 80075c2:	438a      	bics	r2, r1
 80075c4:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80075c6:	197b      	adds	r3, r7, r5
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	601a      	str	r2, [r3, #0]
            break;
 80075d4:	e00e      	b.n	80075f4 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2280      	movs	r2, #128	; 0x80
 80075da:	0112      	lsls	r2, r2, #4
 80075dc:	4694      	mov	ip, r2
 80075de:	4463      	add	r3, ip
 80075e0:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	02da      	lsls	r2, r3, #11
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	18d3      	adds	r3, r2, r3
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d3d6      	bcc.n	80075a2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80075f4:	4b04      	ldr	r3, [pc, #16]	; (8007608 <HAL_FLASHEx_Erase+0xe0>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	761a      	strb	r2, [r3, #24]

  return status;
 80075fa:	230f      	movs	r3, #15
 80075fc:	18fb      	adds	r3, r7, r3
 80075fe:	781b      	ldrb	r3, [r3, #0]
}
 8007600:	0018      	movs	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	b004      	add	sp, #16
 8007606:	bdb0      	pop	{r4, r5, r7, pc}
 8007608:	20000290 	.word	0x20000290
 800760c:	0000c350 	.word	0x0000c350
 8007610:	40022000 	.word	0x40022000

08007614 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007618:	4b08      	ldr	r3, [pc, #32]	; (800763c <FLASH_MassErase+0x28>)
 800761a:	2200      	movs	r2, #0
 800761c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800761e:	4b08      	ldr	r3, [pc, #32]	; (8007640 <FLASH_MassErase+0x2c>)
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	4b07      	ldr	r3, [pc, #28]	; (8007640 <FLASH_MassErase+0x2c>)
 8007624:	2104      	movs	r1, #4
 8007626:	430a      	orrs	r2, r1
 8007628:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800762a:	4b05      	ldr	r3, [pc, #20]	; (8007640 <FLASH_MassErase+0x2c>)
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	4b04      	ldr	r3, [pc, #16]	; (8007640 <FLASH_MassErase+0x2c>)
 8007630:	2140      	movs	r1, #64	; 0x40
 8007632:	430a      	orrs	r2, r1
 8007634:	611a      	str	r2, [r3, #16]
}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000290 	.word	0x20000290
 8007640:	40022000 	.word	0x40022000

08007644 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800764c:	4b0a      	ldr	r3, [pc, #40]	; (8007678 <FLASH_PageErase+0x34>)
 800764e:	2200      	movs	r2, #0
 8007650:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007652:	4b0a      	ldr	r3, [pc, #40]	; (800767c <FLASH_PageErase+0x38>)
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	4b09      	ldr	r3, [pc, #36]	; (800767c <FLASH_PageErase+0x38>)
 8007658:	2102      	movs	r1, #2
 800765a:	430a      	orrs	r2, r1
 800765c:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800765e:	4b07      	ldr	r3, [pc, #28]	; (800767c <FLASH_PageErase+0x38>)
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <FLASH_PageErase+0x38>)
 8007666:	691a      	ldr	r2, [r3, #16]
 8007668:	4b04      	ldr	r3, [pc, #16]	; (800767c <FLASH_PageErase+0x38>)
 800766a:	2140      	movs	r1, #64	; 0x40
 800766c:	430a      	orrs	r2, r1
 800766e:	611a      	str	r2, [r3, #16]
}
 8007670:	46c0      	nop			; (mov r8, r8)
 8007672:	46bd      	mov	sp, r7
 8007674:	b002      	add	sp, #8
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20000290 	.word	0x20000290
 800767c:	40022000 	.word	0x40022000

08007680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b086      	sub	sp, #24
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800768a:	2300      	movs	r3, #0
 800768c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800768e:	e14f      	b.n	8007930 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2101      	movs	r1, #1
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	4091      	lsls	r1, r2
 800769a:	000a      	movs	r2, r1
 800769c:	4013      	ands	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d100      	bne.n	80076a8 <HAL_GPIO_Init+0x28>
 80076a6:	e140      	b.n	800792a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	2203      	movs	r2, #3
 80076ae:	4013      	ands	r3, r2
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d005      	beq.n	80076c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	2203      	movs	r2, #3
 80076ba:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d130      	bne.n	8007722 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	005b      	lsls	r3, r3, #1
 80076ca:	2203      	movs	r2, #3
 80076cc:	409a      	lsls	r2, r3
 80076ce:	0013      	movs	r3, r2
 80076d0:	43da      	mvns	r2, r3
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	4013      	ands	r3, r2
 80076d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	68da      	ldr	r2, [r3, #12]
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	005b      	lsls	r3, r3, #1
 80076e0:	409a      	lsls	r2, r3
 80076e2:	0013      	movs	r3, r2
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076f6:	2201      	movs	r2, #1
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	409a      	lsls	r2, r3
 80076fc:	0013      	movs	r3, r2
 80076fe:	43da      	mvns	r2, r3
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	4013      	ands	r3, r2
 8007704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	091b      	lsrs	r3, r3, #4
 800770c:	2201      	movs	r2, #1
 800770e:	401a      	ands	r2, r3
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	409a      	lsls	r2, r3
 8007714:	0013      	movs	r3, r2
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2203      	movs	r2, #3
 8007728:	4013      	ands	r3, r2
 800772a:	2b03      	cmp	r3, #3
 800772c:	d017      	beq.n	800775e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	2203      	movs	r2, #3
 800773a:	409a      	lsls	r2, r3
 800773c:	0013      	movs	r3, r2
 800773e:	43da      	mvns	r2, r3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4013      	ands	r3, r2
 8007744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	689a      	ldr	r2, [r3, #8]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	409a      	lsls	r2, r3
 8007750:	0013      	movs	r3, r2
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	693a      	ldr	r2, [r7, #16]
 800775c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	2203      	movs	r2, #3
 8007764:	4013      	ands	r3, r2
 8007766:	2b02      	cmp	r3, #2
 8007768:	d123      	bne.n	80077b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	08da      	lsrs	r2, r3, #3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	3208      	adds	r2, #8
 8007772:	0092      	lsls	r2, r2, #2
 8007774:	58d3      	ldr	r3, [r2, r3]
 8007776:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	2207      	movs	r2, #7
 800777c:	4013      	ands	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	220f      	movs	r2, #15
 8007782:	409a      	lsls	r2, r3
 8007784:	0013      	movs	r3, r2
 8007786:	43da      	mvns	r2, r3
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	4013      	ands	r3, r2
 800778c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	691a      	ldr	r2, [r3, #16]
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2107      	movs	r1, #7
 8007796:	400b      	ands	r3, r1
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	409a      	lsls	r2, r3
 800779c:	0013      	movs	r3, r2
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	08da      	lsrs	r2, r3, #3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	3208      	adds	r2, #8
 80077ac:	0092      	lsls	r2, r2, #2
 80077ae:	6939      	ldr	r1, [r7, #16]
 80077b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	2203      	movs	r2, #3
 80077be:	409a      	lsls	r2, r3
 80077c0:	0013      	movs	r3, r2
 80077c2:	43da      	mvns	r2, r3
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	4013      	ands	r3, r2
 80077c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	2203      	movs	r2, #3
 80077d0:	401a      	ands	r2, r3
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	409a      	lsls	r2, r3
 80077d8:	0013      	movs	r3, r2
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	4313      	orrs	r3, r2
 80077de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	23c0      	movs	r3, #192	; 0xc0
 80077ec:	029b      	lsls	r3, r3, #10
 80077ee:	4013      	ands	r3, r2
 80077f0:	d100      	bne.n	80077f4 <HAL_GPIO_Init+0x174>
 80077f2:	e09a      	b.n	800792a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077f4:	4b54      	ldr	r3, [pc, #336]	; (8007948 <HAL_GPIO_Init+0x2c8>)
 80077f6:	699a      	ldr	r2, [r3, #24]
 80077f8:	4b53      	ldr	r3, [pc, #332]	; (8007948 <HAL_GPIO_Init+0x2c8>)
 80077fa:	2101      	movs	r1, #1
 80077fc:	430a      	orrs	r2, r1
 80077fe:	619a      	str	r2, [r3, #24]
 8007800:	4b51      	ldr	r3, [pc, #324]	; (8007948 <HAL_GPIO_Init+0x2c8>)
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	2201      	movs	r2, #1
 8007806:	4013      	ands	r3, r2
 8007808:	60bb      	str	r3, [r7, #8]
 800780a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800780c:	4a4f      	ldr	r2, [pc, #316]	; (800794c <HAL_GPIO_Init+0x2cc>)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	089b      	lsrs	r3, r3, #2
 8007812:	3302      	adds	r3, #2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	589b      	ldr	r3, [r3, r2]
 8007818:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2203      	movs	r2, #3
 800781e:	4013      	ands	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	220f      	movs	r2, #15
 8007824:	409a      	lsls	r2, r3
 8007826:	0013      	movs	r3, r2
 8007828:	43da      	mvns	r2, r3
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4013      	ands	r3, r2
 800782e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	2390      	movs	r3, #144	; 0x90
 8007834:	05db      	lsls	r3, r3, #23
 8007836:	429a      	cmp	r2, r3
 8007838:	d013      	beq.n	8007862 <HAL_GPIO_Init+0x1e2>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a44      	ldr	r2, [pc, #272]	; (8007950 <HAL_GPIO_Init+0x2d0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00d      	beq.n	800785e <HAL_GPIO_Init+0x1de>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a43      	ldr	r2, [pc, #268]	; (8007954 <HAL_GPIO_Init+0x2d4>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d007      	beq.n	800785a <HAL_GPIO_Init+0x1da>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4a42      	ldr	r2, [pc, #264]	; (8007958 <HAL_GPIO_Init+0x2d8>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d101      	bne.n	8007856 <HAL_GPIO_Init+0x1d6>
 8007852:	2303      	movs	r3, #3
 8007854:	e006      	b.n	8007864 <HAL_GPIO_Init+0x1e4>
 8007856:	2305      	movs	r3, #5
 8007858:	e004      	b.n	8007864 <HAL_GPIO_Init+0x1e4>
 800785a:	2302      	movs	r3, #2
 800785c:	e002      	b.n	8007864 <HAL_GPIO_Init+0x1e4>
 800785e:	2301      	movs	r3, #1
 8007860:	e000      	b.n	8007864 <HAL_GPIO_Init+0x1e4>
 8007862:	2300      	movs	r3, #0
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	2103      	movs	r1, #3
 8007868:	400a      	ands	r2, r1
 800786a:	0092      	lsls	r2, r2, #2
 800786c:	4093      	lsls	r3, r2
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007874:	4935      	ldr	r1, [pc, #212]	; (800794c <HAL_GPIO_Init+0x2cc>)
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	089b      	lsrs	r3, r3, #2
 800787a:	3302      	adds	r3, #2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007882:	4b36      	ldr	r3, [pc, #216]	; (800795c <HAL_GPIO_Init+0x2dc>)
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	43da      	mvns	r2, r3
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	4013      	ands	r3, r2
 8007890:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	2380      	movs	r3, #128	; 0x80
 8007898:	035b      	lsls	r3, r3, #13
 800789a:	4013      	ands	r3, r2
 800789c:	d003      	beq.n	80078a6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80078a6:	4b2d      	ldr	r3, [pc, #180]	; (800795c <HAL_GPIO_Init+0x2dc>)
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80078ac:	4b2b      	ldr	r3, [pc, #172]	; (800795c <HAL_GPIO_Init+0x2dc>)
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	43da      	mvns	r2, r3
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4013      	ands	r3, r2
 80078ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
 80078c0:	2380      	movs	r3, #128	; 0x80
 80078c2:	039b      	lsls	r3, r3, #14
 80078c4:	4013      	ands	r3, r2
 80078c6:	d003      	beq.n	80078d0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80078d0:	4b22      	ldr	r3, [pc, #136]	; (800795c <HAL_GPIO_Init+0x2dc>)
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80078d6:	4b21      	ldr	r3, [pc, #132]	; (800795c <HAL_GPIO_Init+0x2dc>)
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	43da      	mvns	r2, r3
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	4013      	ands	r3, r2
 80078e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	2380      	movs	r3, #128	; 0x80
 80078ec:	029b      	lsls	r3, r3, #10
 80078ee:	4013      	ands	r3, r2
 80078f0:	d003      	beq.n	80078fa <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80078f2:	693a      	ldr	r2, [r7, #16]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80078fa:	4b18      	ldr	r3, [pc, #96]	; (800795c <HAL_GPIO_Init+0x2dc>)
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8007900:	4b16      	ldr	r3, [pc, #88]	; (800795c <HAL_GPIO_Init+0x2dc>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	43da      	mvns	r2, r3
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	4013      	ands	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	2380      	movs	r3, #128	; 0x80
 8007916:	025b      	lsls	r3, r3, #9
 8007918:	4013      	ands	r3, r2
 800791a:	d003      	beq.n	8007924 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4313      	orrs	r3, r2
 8007922:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007924:	4b0d      	ldr	r3, [pc, #52]	; (800795c <HAL_GPIO_Init+0x2dc>)
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	3301      	adds	r3, #1
 800792e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	40da      	lsrs	r2, r3
 8007938:	1e13      	subs	r3, r2, #0
 800793a:	d000      	beq.n	800793e <HAL_GPIO_Init+0x2be>
 800793c:	e6a8      	b.n	8007690 <HAL_GPIO_Init+0x10>
  } 
}
 800793e:	46c0      	nop			; (mov r8, r8)
 8007940:	46c0      	nop			; (mov r8, r8)
 8007942:	46bd      	mov	sp, r7
 8007944:	b006      	add	sp, #24
 8007946:	bd80      	pop	{r7, pc}
 8007948:	40021000 	.word	0x40021000
 800794c:	40010000 	.word	0x40010000
 8007950:	48000400 	.word	0x48000400
 8007954:	48000800 	.word	0x48000800
 8007958:	48000c00 	.word	0x48000c00
 800795c:	40010400 	.word	0x40010400

08007960 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	000a      	movs	r2, r1
 800796a:	1cbb      	adds	r3, r7, #2
 800796c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	1cba      	adds	r2, r7, #2
 8007974:	8812      	ldrh	r2, [r2, #0]
 8007976:	4013      	ands	r3, r2
 8007978:	d004      	beq.n	8007984 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800797a:	230f      	movs	r3, #15
 800797c:	18fb      	adds	r3, r7, r3
 800797e:	2201      	movs	r2, #1
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	e003      	b.n	800798c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007984:	230f      	movs	r3, #15
 8007986:	18fb      	adds	r3, r7, r3
 8007988:	2200      	movs	r2, #0
 800798a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800798c:	230f      	movs	r3, #15
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	781b      	ldrb	r3, [r3, #0]
  }
 8007992:	0018      	movs	r0, r3
 8007994:	46bd      	mov	sp, r7
 8007996:	b004      	add	sp, #16
 8007998:	bd80      	pop	{r7, pc}

0800799a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	b082      	sub	sp, #8
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	0008      	movs	r0, r1
 80079a4:	0011      	movs	r1, r2
 80079a6:	1cbb      	adds	r3, r7, #2
 80079a8:	1c02      	adds	r2, r0, #0
 80079aa:	801a      	strh	r2, [r3, #0]
 80079ac:	1c7b      	adds	r3, r7, #1
 80079ae:	1c0a      	adds	r2, r1, #0
 80079b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80079b2:	1c7b      	adds	r3, r7, #1
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d004      	beq.n	80079c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80079ba:	1cbb      	adds	r3, r7, #2
 80079bc:	881a      	ldrh	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80079c2:	e003      	b.n	80079cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80079c4:	1cbb      	adds	r3, r7, #2
 80079c6:	881a      	ldrh	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80079cc:	46c0      	nop			; (mov r8, r8)
 80079ce:	46bd      	mov	sp, r7
 80079d0:	b002      	add	sp, #8
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b088      	sub	sp, #32
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e305      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2201      	movs	r2, #1
 80079ec:	4013      	ands	r3, r2
 80079ee:	d100      	bne.n	80079f2 <HAL_RCC_OscConfig+0x1e>
 80079f0:	e08d      	b.n	8007b0e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80079f2:	4bc5      	ldr	r3, [pc, #788]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	220c      	movs	r2, #12
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b04      	cmp	r3, #4
 80079fc:	d00e      	beq.n	8007a1c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80079fe:	4bc2      	ldr	r3, [pc, #776]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	220c      	movs	r2, #12
 8007a04:	4013      	ands	r3, r2
 8007a06:	2b08      	cmp	r3, #8
 8007a08:	d116      	bne.n	8007a38 <HAL_RCC_OscConfig+0x64>
 8007a0a:	4bbf      	ldr	r3, [pc, #764]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	23c0      	movs	r3, #192	; 0xc0
 8007a10:	025b      	lsls	r3, r3, #9
 8007a12:	401a      	ands	r2, r3
 8007a14:	2380      	movs	r3, #128	; 0x80
 8007a16:	025b      	lsls	r3, r3, #9
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d10d      	bne.n	8007a38 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a1c:	4bba      	ldr	r3, [pc, #744]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	2380      	movs	r3, #128	; 0x80
 8007a22:	029b      	lsls	r3, r3, #10
 8007a24:	4013      	ands	r3, r2
 8007a26:	d100      	bne.n	8007a2a <HAL_RCC_OscConfig+0x56>
 8007a28:	e070      	b.n	8007b0c <HAL_RCC_OscConfig+0x138>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d000      	beq.n	8007a34 <HAL_RCC_OscConfig+0x60>
 8007a32:	e06b      	b.n	8007b0c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e2dc      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d107      	bne.n	8007a50 <HAL_RCC_OscConfig+0x7c>
 8007a40:	4bb1      	ldr	r3, [pc, #708]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	4bb0      	ldr	r3, [pc, #704]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a46:	2180      	movs	r1, #128	; 0x80
 8007a48:	0249      	lsls	r1, r1, #9
 8007a4a:	430a      	orrs	r2, r1
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e02f      	b.n	8007ab0 <HAL_RCC_OscConfig+0xdc>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10c      	bne.n	8007a72 <HAL_RCC_OscConfig+0x9e>
 8007a58:	4bab      	ldr	r3, [pc, #684]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	4baa      	ldr	r3, [pc, #680]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a5e:	49ab      	ldr	r1, [pc, #684]	; (8007d0c <HAL_RCC_OscConfig+0x338>)
 8007a60:	400a      	ands	r2, r1
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	4ba8      	ldr	r3, [pc, #672]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	4ba7      	ldr	r3, [pc, #668]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a6a:	49a9      	ldr	r1, [pc, #676]	; (8007d10 <HAL_RCC_OscConfig+0x33c>)
 8007a6c:	400a      	ands	r2, r1
 8007a6e:	601a      	str	r2, [r3, #0]
 8007a70:	e01e      	b.n	8007ab0 <HAL_RCC_OscConfig+0xdc>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	2b05      	cmp	r3, #5
 8007a78:	d10e      	bne.n	8007a98 <HAL_RCC_OscConfig+0xc4>
 8007a7a:	4ba3      	ldr	r3, [pc, #652]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	4ba2      	ldr	r3, [pc, #648]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a80:	2180      	movs	r1, #128	; 0x80
 8007a82:	02c9      	lsls	r1, r1, #11
 8007a84:	430a      	orrs	r2, r1
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	4b9f      	ldr	r3, [pc, #636]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	4b9e      	ldr	r3, [pc, #632]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a8e:	2180      	movs	r1, #128	; 0x80
 8007a90:	0249      	lsls	r1, r1, #9
 8007a92:	430a      	orrs	r2, r1
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	e00b      	b.n	8007ab0 <HAL_RCC_OscConfig+0xdc>
 8007a98:	4b9b      	ldr	r3, [pc, #620]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	4b9a      	ldr	r3, [pc, #616]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007a9e:	499b      	ldr	r1, [pc, #620]	; (8007d0c <HAL_RCC_OscConfig+0x338>)
 8007aa0:	400a      	ands	r2, r1
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	4b98      	ldr	r3, [pc, #608]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	4b97      	ldr	r3, [pc, #604]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007aaa:	4999      	ldr	r1, [pc, #612]	; (8007d10 <HAL_RCC_OscConfig+0x33c>)
 8007aac:	400a      	ands	r2, r1
 8007aae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d014      	beq.n	8007ae2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab8:	f7fe ffda 	bl	8006a70 <HAL_GetTick>
 8007abc:	0003      	movs	r3, r0
 8007abe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ac0:	e008      	b.n	8007ad4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ac2:	f7fe ffd5 	bl	8006a70 <HAL_GetTick>
 8007ac6:	0002      	movs	r2, r0
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	1ad3      	subs	r3, r2, r3
 8007acc:	2b64      	cmp	r3, #100	; 0x64
 8007ace:	d901      	bls.n	8007ad4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e28e      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad4:	4b8c      	ldr	r3, [pc, #560]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	2380      	movs	r3, #128	; 0x80
 8007ada:	029b      	lsls	r3, r3, #10
 8007adc:	4013      	ands	r3, r2
 8007ade:	d0f0      	beq.n	8007ac2 <HAL_RCC_OscConfig+0xee>
 8007ae0:	e015      	b.n	8007b0e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae2:	f7fe ffc5 	bl	8006a70 <HAL_GetTick>
 8007ae6:	0003      	movs	r3, r0
 8007ae8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aec:	f7fe ffc0 	bl	8006a70 <HAL_GetTick>
 8007af0:	0002      	movs	r2, r0
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b64      	cmp	r3, #100	; 0x64
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e279      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007afe:	4b82      	ldr	r3, [pc, #520]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	2380      	movs	r3, #128	; 0x80
 8007b04:	029b      	lsls	r3, r3, #10
 8007b06:	4013      	ands	r3, r2
 8007b08:	d1f0      	bne.n	8007aec <HAL_RCC_OscConfig+0x118>
 8007b0a:	e000      	b.n	8007b0e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2202      	movs	r2, #2
 8007b14:	4013      	ands	r3, r2
 8007b16:	d100      	bne.n	8007b1a <HAL_RCC_OscConfig+0x146>
 8007b18:	e06c      	b.n	8007bf4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007b1a:	4b7b      	ldr	r3, [pc, #492]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	220c      	movs	r2, #12
 8007b20:	4013      	ands	r3, r2
 8007b22:	d00e      	beq.n	8007b42 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007b24:	4b78      	ldr	r3, [pc, #480]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	220c      	movs	r2, #12
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	2b08      	cmp	r3, #8
 8007b2e:	d11f      	bne.n	8007b70 <HAL_RCC_OscConfig+0x19c>
 8007b30:	4b75      	ldr	r3, [pc, #468]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	23c0      	movs	r3, #192	; 0xc0
 8007b36:	025b      	lsls	r3, r3, #9
 8007b38:	401a      	ands	r2, r3
 8007b3a:	2380      	movs	r3, #128	; 0x80
 8007b3c:	021b      	lsls	r3, r3, #8
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d116      	bne.n	8007b70 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b42:	4b71      	ldr	r3, [pc, #452]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2202      	movs	r2, #2
 8007b48:	4013      	ands	r3, r2
 8007b4a:	d005      	beq.n	8007b58 <HAL_RCC_OscConfig+0x184>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d001      	beq.n	8007b58 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e24c      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b58:	4b6b      	ldr	r3, [pc, #428]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	22f8      	movs	r2, #248	; 0xf8
 8007b5e:	4393      	bics	r3, r2
 8007b60:	0019      	movs	r1, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	00da      	lsls	r2, r3, #3
 8007b68:	4b67      	ldr	r3, [pc, #412]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b6e:	e041      	b.n	8007bf4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d024      	beq.n	8007bc2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b78:	4b63      	ldr	r3, [pc, #396]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	4b62      	ldr	r3, [pc, #392]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007b7e:	2101      	movs	r1, #1
 8007b80:	430a      	orrs	r2, r1
 8007b82:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b84:	f7fe ff74 	bl	8006a70 <HAL_GetTick>
 8007b88:	0003      	movs	r3, r0
 8007b8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b8c:	e008      	b.n	8007ba0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b8e:	f7fe ff6f 	bl	8006a70 <HAL_GetTick>
 8007b92:	0002      	movs	r2, r0
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d901      	bls.n	8007ba0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e228      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba0:	4b59      	ldr	r3, [pc, #356]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	4013      	ands	r3, r2
 8007ba8:	d0f1      	beq.n	8007b8e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007baa:	4b57      	ldr	r3, [pc, #348]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	22f8      	movs	r2, #248	; 0xf8
 8007bb0:	4393      	bics	r3, r2
 8007bb2:	0019      	movs	r1, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	00da      	lsls	r2, r3, #3
 8007bba:	4b53      	ldr	r3, [pc, #332]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	e018      	b.n	8007bf4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bc2:	4b51      	ldr	r3, [pc, #324]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	4b50      	ldr	r3, [pc, #320]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007bc8:	2101      	movs	r1, #1
 8007bca:	438a      	bics	r2, r1
 8007bcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bce:	f7fe ff4f 	bl	8006a70 <HAL_GetTick>
 8007bd2:	0003      	movs	r3, r0
 8007bd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bd8:	f7fe ff4a 	bl	8006a70 <HAL_GetTick>
 8007bdc:	0002      	movs	r2, r0
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e203      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bea:	4b47      	ldr	r3, [pc, #284]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	d1f1      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2208      	movs	r2, #8
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	d036      	beq.n	8007c6c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d019      	beq.n	8007c3a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c06:	4b40      	ldr	r3, [pc, #256]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c0a:	4b3f      	ldr	r3, [pc, #252]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c12:	f7fe ff2d 	bl	8006a70 <HAL_GetTick>
 8007c16:	0003      	movs	r3, r0
 8007c18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c1c:	f7fe ff28 	bl	8006a70 <HAL_GetTick>
 8007c20:	0002      	movs	r2, r0
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e1e1      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c2e:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2202      	movs	r2, #2
 8007c34:	4013      	ands	r3, r2
 8007c36:	d0f1      	beq.n	8007c1c <HAL_RCC_OscConfig+0x248>
 8007c38:	e018      	b.n	8007c6c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c3a:	4b33      	ldr	r3, [pc, #204]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c3e:	4b32      	ldr	r3, [pc, #200]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007c40:	2101      	movs	r1, #1
 8007c42:	438a      	bics	r2, r1
 8007c44:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c46:	f7fe ff13 	bl	8006a70 <HAL_GetTick>
 8007c4a:	0003      	movs	r3, r0
 8007c4c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c50:	f7fe ff0e 	bl	8006a70 <HAL_GetTick>
 8007c54:	0002      	movs	r2, r0
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e1c7      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c62:	4b29      	ldr	r3, [pc, #164]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c66:	2202      	movs	r2, #2
 8007c68:	4013      	ands	r3, r2
 8007c6a:	d1f1      	bne.n	8007c50 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2204      	movs	r2, #4
 8007c72:	4013      	ands	r3, r2
 8007c74:	d100      	bne.n	8007c78 <HAL_RCC_OscConfig+0x2a4>
 8007c76:	e0b5      	b.n	8007de4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c78:	201f      	movs	r0, #31
 8007c7a:	183b      	adds	r3, r7, r0
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c80:	4b21      	ldr	r3, [pc, #132]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007c82:	69da      	ldr	r2, [r3, #28]
 8007c84:	2380      	movs	r3, #128	; 0x80
 8007c86:	055b      	lsls	r3, r3, #21
 8007c88:	4013      	ands	r3, r2
 8007c8a:	d110      	bne.n	8007cae <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c8c:	4b1e      	ldr	r3, [pc, #120]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007c8e:	69da      	ldr	r2, [r3, #28]
 8007c90:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007c92:	2180      	movs	r1, #128	; 0x80
 8007c94:	0549      	lsls	r1, r1, #21
 8007c96:	430a      	orrs	r2, r1
 8007c98:	61da      	str	r2, [r3, #28]
 8007c9a:	4b1b      	ldr	r3, [pc, #108]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007c9c:	69da      	ldr	r2, [r3, #28]
 8007c9e:	2380      	movs	r3, #128	; 0x80
 8007ca0:	055b      	lsls	r3, r3, #21
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007ca8:	183b      	adds	r3, r7, r0
 8007caa:	2201      	movs	r2, #1
 8007cac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cae:	4b19      	ldr	r3, [pc, #100]	; (8007d14 <HAL_RCC_OscConfig+0x340>)
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	2380      	movs	r3, #128	; 0x80
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	d11a      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cba:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <HAL_RCC_OscConfig+0x340>)
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	4b15      	ldr	r3, [pc, #84]	; (8007d14 <HAL_RCC_OscConfig+0x340>)
 8007cc0:	2180      	movs	r1, #128	; 0x80
 8007cc2:	0049      	lsls	r1, r1, #1
 8007cc4:	430a      	orrs	r2, r1
 8007cc6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cc8:	f7fe fed2 	bl	8006a70 <HAL_GetTick>
 8007ccc:	0003      	movs	r3, r0
 8007cce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cd0:	e008      	b.n	8007ce4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cd2:	f7fe fecd 	bl	8006a70 <HAL_GetTick>
 8007cd6:	0002      	movs	r2, r0
 8007cd8:	69bb      	ldr	r3, [r7, #24]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b64      	cmp	r3, #100	; 0x64
 8007cde:	d901      	bls.n	8007ce4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e186      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ce4:	4b0b      	ldr	r3, [pc, #44]	; (8007d14 <HAL_RCC_OscConfig+0x340>)
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	2380      	movs	r3, #128	; 0x80
 8007cea:	005b      	lsls	r3, r3, #1
 8007cec:	4013      	ands	r3, r2
 8007cee:	d0f0      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d10f      	bne.n	8007d18 <HAL_RCC_OscConfig+0x344>
 8007cf8:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007cfa:	6a1a      	ldr	r2, [r3, #32]
 8007cfc:	4b02      	ldr	r3, [pc, #8]	; (8007d08 <HAL_RCC_OscConfig+0x334>)
 8007cfe:	2101      	movs	r1, #1
 8007d00:	430a      	orrs	r2, r1
 8007d02:	621a      	str	r2, [r3, #32]
 8007d04:	e036      	b.n	8007d74 <HAL_RCC_OscConfig+0x3a0>
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	40021000 	.word	0x40021000
 8007d0c:	fffeffff 	.word	0xfffeffff
 8007d10:	fffbffff 	.word	0xfffbffff
 8007d14:	40007000 	.word	0x40007000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d10c      	bne.n	8007d3a <HAL_RCC_OscConfig+0x366>
 8007d20:	4bb6      	ldr	r3, [pc, #728]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d22:	6a1a      	ldr	r2, [r3, #32]
 8007d24:	4bb5      	ldr	r3, [pc, #724]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d26:	2101      	movs	r1, #1
 8007d28:	438a      	bics	r2, r1
 8007d2a:	621a      	str	r2, [r3, #32]
 8007d2c:	4bb3      	ldr	r3, [pc, #716]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d2e:	6a1a      	ldr	r2, [r3, #32]
 8007d30:	4bb2      	ldr	r3, [pc, #712]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d32:	2104      	movs	r1, #4
 8007d34:	438a      	bics	r2, r1
 8007d36:	621a      	str	r2, [r3, #32]
 8007d38:	e01c      	b.n	8007d74 <HAL_RCC_OscConfig+0x3a0>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	2b05      	cmp	r3, #5
 8007d40:	d10c      	bne.n	8007d5c <HAL_RCC_OscConfig+0x388>
 8007d42:	4bae      	ldr	r3, [pc, #696]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d44:	6a1a      	ldr	r2, [r3, #32]
 8007d46:	4bad      	ldr	r3, [pc, #692]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d48:	2104      	movs	r1, #4
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	621a      	str	r2, [r3, #32]
 8007d4e:	4bab      	ldr	r3, [pc, #684]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d50:	6a1a      	ldr	r2, [r3, #32]
 8007d52:	4baa      	ldr	r3, [pc, #680]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d54:	2101      	movs	r1, #1
 8007d56:	430a      	orrs	r2, r1
 8007d58:	621a      	str	r2, [r3, #32]
 8007d5a:	e00b      	b.n	8007d74 <HAL_RCC_OscConfig+0x3a0>
 8007d5c:	4ba7      	ldr	r3, [pc, #668]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d5e:	6a1a      	ldr	r2, [r3, #32]
 8007d60:	4ba6      	ldr	r3, [pc, #664]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d62:	2101      	movs	r1, #1
 8007d64:	438a      	bics	r2, r1
 8007d66:	621a      	str	r2, [r3, #32]
 8007d68:	4ba4      	ldr	r3, [pc, #656]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d6a:	6a1a      	ldr	r2, [r3, #32]
 8007d6c:	4ba3      	ldr	r3, [pc, #652]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d6e:	2104      	movs	r1, #4
 8007d70:	438a      	bics	r2, r1
 8007d72:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d014      	beq.n	8007da6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d7c:	f7fe fe78 	bl	8006a70 <HAL_GetTick>
 8007d80:	0003      	movs	r3, r0
 8007d82:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d84:	e009      	b.n	8007d9a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d86:	f7fe fe73 	bl	8006a70 <HAL_GetTick>
 8007d8a:	0002      	movs	r2, r0
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	4a9b      	ldr	r2, [pc, #620]	; (8008000 <HAL_RCC_OscConfig+0x62c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e12b      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d9a:	4b98      	ldr	r3, [pc, #608]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	4013      	ands	r3, r2
 8007da2:	d0f0      	beq.n	8007d86 <HAL_RCC_OscConfig+0x3b2>
 8007da4:	e013      	b.n	8007dce <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007da6:	f7fe fe63 	bl	8006a70 <HAL_GetTick>
 8007daa:	0003      	movs	r3, r0
 8007dac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dae:	e009      	b.n	8007dc4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007db0:	f7fe fe5e 	bl	8006a70 <HAL_GetTick>
 8007db4:	0002      	movs	r2, r0
 8007db6:	69bb      	ldr	r3, [r7, #24]
 8007db8:	1ad3      	subs	r3, r2, r3
 8007dba:	4a91      	ldr	r2, [pc, #580]	; (8008000 <HAL_RCC_OscConfig+0x62c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e116      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dc4:	4b8d      	ldr	r3, [pc, #564]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007dc6:	6a1b      	ldr	r3, [r3, #32]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	4013      	ands	r3, r2
 8007dcc:	d1f0      	bne.n	8007db0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007dce:	231f      	movs	r3, #31
 8007dd0:	18fb      	adds	r3, r7, r3
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d105      	bne.n	8007de4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dd8:	4b88      	ldr	r3, [pc, #544]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007dda:	69da      	ldr	r2, [r3, #28]
 8007ddc:	4b87      	ldr	r3, [pc, #540]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007dde:	4989      	ldr	r1, [pc, #548]	; (8008004 <HAL_RCC_OscConfig+0x630>)
 8007de0:	400a      	ands	r2, r1
 8007de2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2210      	movs	r2, #16
 8007dea:	4013      	ands	r3, r2
 8007dec:	d063      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d12a      	bne.n	8007e4c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007df6:	4b81      	ldr	r3, [pc, #516]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dfa:	4b80      	ldr	r3, [pc, #512]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007dfc:	2104      	movs	r1, #4
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8007e02:	4b7e      	ldr	r3, [pc, #504]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e06:	4b7d      	ldr	r3, [pc, #500]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e08:	2101      	movs	r1, #1
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e0e:	f7fe fe2f 	bl	8006a70 <HAL_GetTick>
 8007e12:	0003      	movs	r3, r0
 8007e14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007e18:	f7fe fe2a 	bl	8006a70 <HAL_GetTick>
 8007e1c:	0002      	movs	r2, r0
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e0e3      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007e2a:	4b74      	ldr	r3, [pc, #464]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2e:	2202      	movs	r2, #2
 8007e30:	4013      	ands	r3, r2
 8007e32:	d0f1      	beq.n	8007e18 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007e34:	4b71      	ldr	r3, [pc, #452]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e38:	22f8      	movs	r2, #248	; 0xf8
 8007e3a:	4393      	bics	r3, r2
 8007e3c:	0019      	movs	r1, r3
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	00da      	lsls	r2, r3, #3
 8007e44:	4b6d      	ldr	r3, [pc, #436]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e46:	430a      	orrs	r2, r1
 8007e48:	635a      	str	r2, [r3, #52]	; 0x34
 8007e4a:	e034      	b.n	8007eb6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	3305      	adds	r3, #5
 8007e52:	d111      	bne.n	8007e78 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8007e54:	4b69      	ldr	r3, [pc, #420]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e58:	4b68      	ldr	r3, [pc, #416]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e5a:	2104      	movs	r1, #4
 8007e5c:	438a      	bics	r2, r1
 8007e5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007e60:	4b66      	ldr	r3, [pc, #408]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e64:	22f8      	movs	r2, #248	; 0xf8
 8007e66:	4393      	bics	r3, r2
 8007e68:	0019      	movs	r1, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	00da      	lsls	r2, r3, #3
 8007e70:	4b62      	ldr	r3, [pc, #392]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e72:	430a      	orrs	r2, r1
 8007e74:	635a      	str	r2, [r3, #52]	; 0x34
 8007e76:	e01e      	b.n	8007eb6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007e78:	4b60      	ldr	r3, [pc, #384]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e7c:	4b5f      	ldr	r3, [pc, #380]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e7e:	2104      	movs	r1, #4
 8007e80:	430a      	orrs	r2, r1
 8007e82:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8007e84:	4b5d      	ldr	r3, [pc, #372]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e88:	4b5c      	ldr	r3, [pc, #368]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007e8a:	2101      	movs	r1, #1
 8007e8c:	438a      	bics	r2, r1
 8007e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e90:	f7fe fdee 	bl	8006a70 <HAL_GetTick>
 8007e94:	0003      	movs	r3, r0
 8007e96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007e98:	e008      	b.n	8007eac <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007e9a:	f7fe fde9 	bl	8006a70 <HAL_GetTick>
 8007e9e:	0002      	movs	r2, r0
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e0a2      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007eac:	4b53      	ldr	r3, [pc, #332]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	4013      	ands	r3, r2
 8007eb4:	d1f1      	bne.n	8007e9a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d100      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x4ec>
 8007ebe:	e097      	b.n	8007ff0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ec0:	4b4e      	ldr	r3, [pc, #312]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	220c      	movs	r2, #12
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	2b08      	cmp	r3, #8
 8007eca:	d100      	bne.n	8007ece <HAL_RCC_OscConfig+0x4fa>
 8007ecc:	e06b      	b.n	8007fa6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	2b02      	cmp	r3, #2
 8007ed4:	d14c      	bne.n	8007f70 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ed6:	4b49      	ldr	r3, [pc, #292]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4b48      	ldr	r3, [pc, #288]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007edc:	494a      	ldr	r1, [pc, #296]	; (8008008 <HAL_RCC_OscConfig+0x634>)
 8007ede:	400a      	ands	r2, r1
 8007ee0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ee2:	f7fe fdc5 	bl	8006a70 <HAL_GetTick>
 8007ee6:	0003      	movs	r3, r0
 8007ee8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007eec:	f7fe fdc0 	bl	8006a70 <HAL_GetTick>
 8007ef0:	0002      	movs	r2, r0
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e079      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007efe:	4b3f      	ldr	r3, [pc, #252]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	2380      	movs	r3, #128	; 0x80
 8007f04:	049b      	lsls	r3, r3, #18
 8007f06:	4013      	ands	r3, r2
 8007f08:	d1f0      	bne.n	8007eec <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f0a:	4b3c      	ldr	r3, [pc, #240]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0e:	220f      	movs	r2, #15
 8007f10:	4393      	bics	r3, r2
 8007f12:	0019      	movs	r1, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f18:	4b38      	ldr	r3, [pc, #224]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f1e:	4b37      	ldr	r3, [pc, #220]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	4a3a      	ldr	r2, [pc, #232]	; (800800c <HAL_RCC_OscConfig+0x638>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	0019      	movs	r1, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	431a      	orrs	r2, r3
 8007f32:	4b32      	ldr	r3, [pc, #200]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f34:	430a      	orrs	r2, r1
 8007f36:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f38:	4b30      	ldr	r3, [pc, #192]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	4b2f      	ldr	r3, [pc, #188]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f3e:	2180      	movs	r1, #128	; 0x80
 8007f40:	0449      	lsls	r1, r1, #17
 8007f42:	430a      	orrs	r2, r1
 8007f44:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f46:	f7fe fd93 	bl	8006a70 <HAL_GetTick>
 8007f4a:	0003      	movs	r3, r0
 8007f4c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f50:	f7fe fd8e 	bl	8006a70 <HAL_GetTick>
 8007f54:	0002      	movs	r2, r0
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e047      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007f62:	4b26      	ldr	r3, [pc, #152]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	2380      	movs	r3, #128	; 0x80
 8007f68:	049b      	lsls	r3, r3, #18
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	d0f0      	beq.n	8007f50 <HAL_RCC_OscConfig+0x57c>
 8007f6e:	e03f      	b.n	8007ff0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f70:	4b22      	ldr	r3, [pc, #136]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	4b21      	ldr	r3, [pc, #132]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f76:	4924      	ldr	r1, [pc, #144]	; (8008008 <HAL_RCC_OscConfig+0x634>)
 8007f78:	400a      	ands	r2, r1
 8007f7a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f7c:	f7fe fd78 	bl	8006a70 <HAL_GetTick>
 8007f80:	0003      	movs	r3, r0
 8007f82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f84:	e008      	b.n	8007f98 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f86:	f7fe fd73 	bl	8006a70 <HAL_GetTick>
 8007f8a:	0002      	movs	r2, r0
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	1ad3      	subs	r3, r2, r3
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d901      	bls.n	8007f98 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e02c      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007f98:	4b18      	ldr	r3, [pc, #96]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	2380      	movs	r3, #128	; 0x80
 8007f9e:	049b      	lsls	r3, r3, #18
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	d1f0      	bne.n	8007f86 <HAL_RCC_OscConfig+0x5b2>
 8007fa4:	e024      	b.n	8007ff0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a1b      	ldr	r3, [r3, #32]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e01f      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007fb2:	4b12      	ldr	r3, [pc, #72]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8007fb8:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <HAL_RCC_OscConfig+0x628>)
 8007fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	23c0      	movs	r3, #192	; 0xc0
 8007fc2:	025b      	lsls	r3, r3, #9
 8007fc4:	401a      	ands	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d10e      	bne.n	8007fec <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	220f      	movs	r2, #15
 8007fd2:	401a      	ands	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d107      	bne.n	8007fec <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007fdc:	697a      	ldr	r2, [r7, #20]
 8007fde:	23f0      	movs	r3, #240	; 0xf0
 8007fe0:	039b      	lsls	r3, r3, #14
 8007fe2:	401a      	ands	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d001      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e000      	b.n	8007ff2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	0018      	movs	r0, r3
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	b008      	add	sp, #32
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	46c0      	nop			; (mov r8, r8)
 8007ffc:	40021000 	.word	0x40021000
 8008000:	00001388 	.word	0x00001388
 8008004:	efffffff 	.word	0xefffffff
 8008008:	feffffff 	.word	0xfeffffff
 800800c:	ffc27fff 	.word	0xffc27fff

08008010 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e0b3      	b.n	800818c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008024:	4b5b      	ldr	r3, [pc, #364]	; (8008194 <HAL_RCC_ClockConfig+0x184>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2201      	movs	r2, #1
 800802a:	4013      	ands	r3, r2
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d911      	bls.n	8008056 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008032:	4b58      	ldr	r3, [pc, #352]	; (8008194 <HAL_RCC_ClockConfig+0x184>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2201      	movs	r2, #1
 8008038:	4393      	bics	r3, r2
 800803a:	0019      	movs	r1, r3
 800803c:	4b55      	ldr	r3, [pc, #340]	; (8008194 <HAL_RCC_ClockConfig+0x184>)
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008044:	4b53      	ldr	r3, [pc, #332]	; (8008194 <HAL_RCC_ClockConfig+0x184>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2201      	movs	r2, #1
 800804a:	4013      	ands	r3, r2
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	429a      	cmp	r2, r3
 8008050:	d001      	beq.n	8008056 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e09a      	b.n	800818c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2202      	movs	r2, #2
 800805c:	4013      	ands	r3, r2
 800805e:	d015      	beq.n	800808c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2204      	movs	r2, #4
 8008066:	4013      	ands	r3, r2
 8008068:	d006      	beq.n	8008078 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800806a:	4b4b      	ldr	r3, [pc, #300]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	4b4a      	ldr	r3, [pc, #296]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 8008070:	21e0      	movs	r1, #224	; 0xe0
 8008072:	00c9      	lsls	r1, r1, #3
 8008074:	430a      	orrs	r2, r1
 8008076:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008078:	4b47      	ldr	r3, [pc, #284]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	22f0      	movs	r2, #240	; 0xf0
 800807e:	4393      	bics	r3, r2
 8008080:	0019      	movs	r1, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	4b44      	ldr	r3, [pc, #272]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 8008088:	430a      	orrs	r2, r1
 800808a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2201      	movs	r2, #1
 8008092:	4013      	ands	r3, r2
 8008094:	d040      	beq.n	8008118 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	2b01      	cmp	r3, #1
 800809c:	d107      	bne.n	80080ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800809e:	4b3e      	ldr	r3, [pc, #248]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	2380      	movs	r3, #128	; 0x80
 80080a4:	029b      	lsls	r3, r3, #10
 80080a6:	4013      	ands	r3, r2
 80080a8:	d114      	bne.n	80080d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e06e      	b.n	800818c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	2b02      	cmp	r3, #2
 80080b4:	d107      	bne.n	80080c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080b6:	4b38      	ldr	r3, [pc, #224]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	2380      	movs	r3, #128	; 0x80
 80080bc:	049b      	lsls	r3, r3, #18
 80080be:	4013      	ands	r3, r2
 80080c0:	d108      	bne.n	80080d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e062      	b.n	800818c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080c6:	4b34      	ldr	r3, [pc, #208]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2202      	movs	r2, #2
 80080cc:	4013      	ands	r3, r2
 80080ce:	d101      	bne.n	80080d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e05b      	b.n	800818c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080d4:	4b30      	ldr	r3, [pc, #192]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	2203      	movs	r2, #3
 80080da:	4393      	bics	r3, r2
 80080dc:	0019      	movs	r1, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	685a      	ldr	r2, [r3, #4]
 80080e2:	4b2d      	ldr	r3, [pc, #180]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 80080e4:	430a      	orrs	r2, r1
 80080e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80080e8:	f7fe fcc2 	bl	8006a70 <HAL_GetTick>
 80080ec:	0003      	movs	r3, r0
 80080ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080f0:	e009      	b.n	8008106 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080f2:	f7fe fcbd 	bl	8006a70 <HAL_GetTick>
 80080f6:	0002      	movs	r2, r0
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	4a27      	ldr	r2, [pc, #156]	; (800819c <HAL_RCC_ClockConfig+0x18c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e042      	b.n	800818c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008106:	4b24      	ldr	r3, [pc, #144]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	220c      	movs	r2, #12
 800810c:	401a      	ands	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	429a      	cmp	r2, r3
 8008116:	d1ec      	bne.n	80080f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008118:	4b1e      	ldr	r3, [pc, #120]	; (8008194 <HAL_RCC_ClockConfig+0x184>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2201      	movs	r2, #1
 800811e:	4013      	ands	r3, r2
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d211      	bcs.n	800814a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008126:	4b1b      	ldr	r3, [pc, #108]	; (8008194 <HAL_RCC_ClockConfig+0x184>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2201      	movs	r2, #1
 800812c:	4393      	bics	r3, r2
 800812e:	0019      	movs	r1, r3
 8008130:	4b18      	ldr	r3, [pc, #96]	; (8008194 <HAL_RCC_ClockConfig+0x184>)
 8008132:	683a      	ldr	r2, [r7, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008138:	4b16      	ldr	r3, [pc, #88]	; (8008194 <HAL_RCC_ClockConfig+0x184>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2201      	movs	r2, #1
 800813e:	4013      	ands	r3, r2
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	429a      	cmp	r2, r3
 8008144:	d001      	beq.n	800814a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e020      	b.n	800818c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2204      	movs	r2, #4
 8008150:	4013      	ands	r3, r2
 8008152:	d009      	beq.n	8008168 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008154:	4b10      	ldr	r3, [pc, #64]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	4a11      	ldr	r2, [pc, #68]	; (80081a0 <HAL_RCC_ClockConfig+0x190>)
 800815a:	4013      	ands	r3, r2
 800815c:	0019      	movs	r1, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	4b0d      	ldr	r3, [pc, #52]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 8008164:	430a      	orrs	r2, r1
 8008166:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008168:	f000 f820 	bl	80081ac <HAL_RCC_GetSysClockFreq>
 800816c:	0001      	movs	r1, r0
 800816e:	4b0a      	ldr	r3, [pc, #40]	; (8008198 <HAL_RCC_ClockConfig+0x188>)
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	091b      	lsrs	r3, r3, #4
 8008174:	220f      	movs	r2, #15
 8008176:	4013      	ands	r3, r2
 8008178:	4a0a      	ldr	r2, [pc, #40]	; (80081a4 <HAL_RCC_ClockConfig+0x194>)
 800817a:	5cd3      	ldrb	r3, [r2, r3]
 800817c:	000a      	movs	r2, r1
 800817e:	40da      	lsrs	r2, r3
 8008180:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <HAL_RCC_ClockConfig+0x198>)
 8008182:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008184:	2003      	movs	r0, #3
 8008186:	f7fe fc2d 	bl	80069e4 <HAL_InitTick>
  
  return HAL_OK;
 800818a:	2300      	movs	r3, #0
}
 800818c:	0018      	movs	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	b004      	add	sp, #16
 8008192:	bd80      	pop	{r7, pc}
 8008194:	40022000 	.word	0x40022000
 8008198:	40021000 	.word	0x40021000
 800819c:	00001388 	.word	0x00001388
 80081a0:	fffff8ff 	.word	0xfffff8ff
 80081a4:	0800b3d8 	.word	0x0800b3d8
 80081a8:	20000040 	.word	0x20000040

080081ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	2300      	movs	r3, #0
 80081b8:	60bb      	str	r3, [r7, #8]
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]
 80081be:	2300      	movs	r3, #0
 80081c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80081c6:	4b21      	ldr	r3, [pc, #132]	; (800824c <HAL_RCC_GetSysClockFreq+0xa0>)
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	220c      	movs	r2, #12
 80081d0:	4013      	ands	r3, r2
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d002      	beq.n	80081dc <HAL_RCC_GetSysClockFreq+0x30>
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d003      	beq.n	80081e2 <HAL_RCC_GetSysClockFreq+0x36>
 80081da:	e02e      	b.n	800823a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80081dc:	4b1c      	ldr	r3, [pc, #112]	; (8008250 <HAL_RCC_GetSysClockFreq+0xa4>)
 80081de:	613b      	str	r3, [r7, #16]
      break;
 80081e0:	e02e      	b.n	8008240 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	0c9b      	lsrs	r3, r3, #18
 80081e6:	220f      	movs	r2, #15
 80081e8:	4013      	ands	r3, r2
 80081ea:	4a1a      	ldr	r2, [pc, #104]	; (8008254 <HAL_RCC_GetSysClockFreq+0xa8>)
 80081ec:	5cd3      	ldrb	r3, [r2, r3]
 80081ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80081f0:	4b16      	ldr	r3, [pc, #88]	; (800824c <HAL_RCC_GetSysClockFreq+0xa0>)
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	220f      	movs	r2, #15
 80081f6:	4013      	ands	r3, r2
 80081f8:	4a17      	ldr	r2, [pc, #92]	; (8008258 <HAL_RCC_GetSysClockFreq+0xac>)
 80081fa:	5cd3      	ldrb	r3, [r2, r3]
 80081fc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	23c0      	movs	r3, #192	; 0xc0
 8008202:	025b      	lsls	r3, r3, #9
 8008204:	401a      	ands	r2, r3
 8008206:	2380      	movs	r3, #128	; 0x80
 8008208:	025b      	lsls	r3, r3, #9
 800820a:	429a      	cmp	r2, r3
 800820c:	d109      	bne.n	8008222 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800820e:	68b9      	ldr	r1, [r7, #8]
 8008210:	480f      	ldr	r0, [pc, #60]	; (8008250 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008212:	f7f7 ff77 	bl	8000104 <__udivsi3>
 8008216:	0003      	movs	r3, r0
 8008218:	001a      	movs	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4353      	muls	r3, r2
 800821e:	617b      	str	r3, [r7, #20]
 8008220:	e008      	b.n	8008234 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008222:	68b9      	ldr	r1, [r7, #8]
 8008224:	480a      	ldr	r0, [pc, #40]	; (8008250 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008226:	f7f7 ff6d 	bl	8000104 <__udivsi3>
 800822a:	0003      	movs	r3, r0
 800822c:	001a      	movs	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4353      	muls	r3, r2
 8008232:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	613b      	str	r3, [r7, #16]
      break;
 8008238:	e002      	b.n	8008240 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800823a:	4b05      	ldr	r3, [pc, #20]	; (8008250 <HAL_RCC_GetSysClockFreq+0xa4>)
 800823c:	613b      	str	r3, [r7, #16]
      break;
 800823e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008240:	693b      	ldr	r3, [r7, #16]
}
 8008242:	0018      	movs	r0, r3
 8008244:	46bd      	mov	sp, r7
 8008246:	b006      	add	sp, #24
 8008248:	bd80      	pop	{r7, pc}
 800824a:	46c0      	nop			; (mov r8, r8)
 800824c:	40021000 	.word	0x40021000
 8008250:	007a1200 	.word	0x007a1200
 8008254:	0800b3e8 	.word	0x0800b3e8
 8008258:	0800b3f8 	.word	0x0800b3f8

0800825c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e0a8      	b.n	80083c0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008272:	2b00      	cmp	r3, #0
 8008274:	d109      	bne.n	800828a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	685a      	ldr	r2, [r3, #4]
 800827a:	2382      	movs	r3, #130	; 0x82
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	429a      	cmp	r2, r3
 8008280:	d009      	beq.n	8008296 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	61da      	str	r2, [r3, #28]
 8008288:	e005      	b.n	8008296 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	225d      	movs	r2, #93	; 0x5d
 80082a0:	5c9b      	ldrb	r3, [r3, r2]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d107      	bne.n	80082b8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	225c      	movs	r2, #92	; 0x5c
 80082ac:	2100      	movs	r1, #0
 80082ae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	0018      	movs	r0, r3
 80082b4:	f7fe f800 	bl	80062b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	225d      	movs	r2, #93	; 0x5d
 80082bc:	2102      	movs	r1, #2
 80082be:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2140      	movs	r1, #64	; 0x40
 80082cc:	438a      	bics	r2, r1
 80082ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	23e0      	movs	r3, #224	; 0xe0
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	429a      	cmp	r2, r3
 80082da:	d902      	bls.n	80082e2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	e002      	b.n	80082e8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80082e2:	2380      	movs	r3, #128	; 0x80
 80082e4:	015b      	lsls	r3, r3, #5
 80082e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68da      	ldr	r2, [r3, #12]
 80082ec:	23f0      	movs	r3, #240	; 0xf0
 80082ee:	011b      	lsls	r3, r3, #4
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d008      	beq.n	8008306 <HAL_SPI_Init+0xaa>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	23e0      	movs	r3, #224	; 0xe0
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d002      	beq.n	8008306 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685a      	ldr	r2, [r3, #4]
 800830a:	2382      	movs	r3, #130	; 0x82
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	401a      	ands	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6899      	ldr	r1, [r3, #8]
 8008314:	2384      	movs	r3, #132	; 0x84
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	400b      	ands	r3, r1
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2102      	movs	r1, #2
 8008322:	400b      	ands	r3, r1
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	695b      	ldr	r3, [r3, #20]
 800832a:	2101      	movs	r1, #1
 800832c:	400b      	ands	r3, r1
 800832e:	431a      	orrs	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6999      	ldr	r1, [r3, #24]
 8008334:	2380      	movs	r3, #128	; 0x80
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	400b      	ands	r3, r1
 800833a:	431a      	orrs	r2, r3
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	69db      	ldr	r3, [r3, #28]
 8008340:	2138      	movs	r1, #56	; 0x38
 8008342:	400b      	ands	r3, r1
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	2180      	movs	r1, #128	; 0x80
 800834c:	400b      	ands	r3, r1
 800834e:	431a      	orrs	r2, r3
 8008350:	0011      	movs	r1, r2
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008356:	2380      	movs	r3, #128	; 0x80
 8008358:	019b      	lsls	r3, r3, #6
 800835a:	401a      	ands	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	0c1b      	lsrs	r3, r3, #16
 800836a:	2204      	movs	r2, #4
 800836c:	401a      	ands	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008372:	2110      	movs	r1, #16
 8008374:	400b      	ands	r3, r1
 8008376:	431a      	orrs	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837c:	2108      	movs	r1, #8
 800837e:	400b      	ands	r3, r1
 8008380:	431a      	orrs	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68d9      	ldr	r1, [r3, #12]
 8008386:	23f0      	movs	r3, #240	; 0xf0
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	400b      	ands	r3, r1
 800838c:	431a      	orrs	r2, r3
 800838e:	0011      	movs	r1, r2
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	2380      	movs	r3, #128	; 0x80
 8008394:	015b      	lsls	r3, r3, #5
 8008396:	401a      	ands	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	69da      	ldr	r2, [r3, #28]
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4907      	ldr	r1, [pc, #28]	; (80083c8 <HAL_SPI_Init+0x16c>)
 80083ac:	400a      	ands	r2, r1
 80083ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	225d      	movs	r2, #93	; 0x5d
 80083ba:	2101      	movs	r1, #1
 80083bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	0018      	movs	r0, r3
 80083c2:	46bd      	mov	sp, r7
 80083c4:	b004      	add	sp, #16
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	fffff7ff 	.word	0xfffff7ff

080083cc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	603b      	str	r3, [r7, #0]
 80083d8:	1dbb      	adds	r3, r7, #6
 80083da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083dc:	231f      	movs	r3, #31
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	2200      	movs	r2, #0
 80083e2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	225c      	movs	r2, #92	; 0x5c
 80083e8:	5c9b      	ldrb	r3, [r3, r2]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_SPI_Transmit+0x26>
 80083ee:	2302      	movs	r3, #2
 80083f0:	e147      	b.n	8008682 <HAL_SPI_Transmit+0x2b6>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	225c      	movs	r2, #92	; 0x5c
 80083f6:	2101      	movs	r1, #1
 80083f8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083fa:	f7fe fb39 	bl	8006a70 <HAL_GetTick>
 80083fe:	0003      	movs	r3, r0
 8008400:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008402:	2316      	movs	r3, #22
 8008404:	18fb      	adds	r3, r7, r3
 8008406:	1dba      	adds	r2, r7, #6
 8008408:	8812      	ldrh	r2, [r2, #0]
 800840a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	225d      	movs	r2, #93	; 0x5d
 8008410:	5c9b      	ldrb	r3, [r3, r2]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b01      	cmp	r3, #1
 8008416:	d004      	beq.n	8008422 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8008418:	231f      	movs	r3, #31
 800841a:	18fb      	adds	r3, r7, r3
 800841c:	2202      	movs	r2, #2
 800841e:	701a      	strb	r2, [r3, #0]
    goto error;
 8008420:	e128      	b.n	8008674 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_SPI_Transmit+0x64>
 8008428:	1dbb      	adds	r3, r7, #6
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008430:	231f      	movs	r3, #31
 8008432:	18fb      	adds	r3, r7, r3
 8008434:	2201      	movs	r2, #1
 8008436:	701a      	strb	r2, [r3, #0]
    goto error;
 8008438:	e11c      	b.n	8008674 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	225d      	movs	r2, #93	; 0x5d
 800843e:	2103      	movs	r1, #3
 8008440:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	68ba      	ldr	r2, [r7, #8]
 800844c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	1dba      	adds	r2, r7, #6
 8008452:	8812      	ldrh	r2, [r2, #0]
 8008454:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	1dba      	adds	r2, r7, #6
 800845a:	8812      	ldrh	r2, [r2, #0]
 800845c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2244      	movs	r2, #68	; 0x44
 8008468:	2100      	movs	r1, #0
 800846a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2246      	movs	r2, #70	; 0x46
 8008470:	2100      	movs	r1, #0
 8008472:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2200      	movs	r2, #0
 8008478:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	689a      	ldr	r2, [r3, #8]
 8008484:	2380      	movs	r3, #128	; 0x80
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	429a      	cmp	r2, r3
 800848a:	d110      	bne.n	80084ae <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2140      	movs	r1, #64	; 0x40
 8008498:	438a      	bics	r2, r1
 800849a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2180      	movs	r1, #128	; 0x80
 80084a8:	01c9      	lsls	r1, r1, #7
 80084aa:	430a      	orrs	r2, r1
 80084ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	2240      	movs	r2, #64	; 0x40
 80084b6:	4013      	ands	r3, r2
 80084b8:	2b40      	cmp	r3, #64	; 0x40
 80084ba:	d007      	beq.n	80084cc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2140      	movs	r1, #64	; 0x40
 80084c8:	430a      	orrs	r2, r1
 80084ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	68da      	ldr	r2, [r3, #12]
 80084d0:	23e0      	movs	r3, #224	; 0xe0
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d952      	bls.n	800857e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d004      	beq.n	80084ea <HAL_SPI_Transmit+0x11e>
 80084e0:	2316      	movs	r3, #22
 80084e2:	18fb      	adds	r3, r7, r3
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d143      	bne.n	8008572 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	881a      	ldrh	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	1c9a      	adds	r2, r3, #2
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008504:	b29b      	uxth	r3, r3
 8008506:	3b01      	subs	r3, #1
 8008508:	b29a      	uxth	r2, r3
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800850e:	e030      	b.n	8008572 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	689b      	ldr	r3, [r3, #8]
 8008516:	2202      	movs	r2, #2
 8008518:	4013      	ands	r3, r2
 800851a:	2b02      	cmp	r3, #2
 800851c:	d112      	bne.n	8008544 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	881a      	ldrh	r2, [r3, #0]
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	1c9a      	adds	r2, r3, #2
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008538:	b29b      	uxth	r3, r3
 800853a:	3b01      	subs	r3, #1
 800853c:	b29a      	uxth	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008542:	e016      	b.n	8008572 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008544:	f7fe fa94 	bl	8006a70 <HAL_GetTick>
 8008548:	0002      	movs	r2, r0
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	1ad3      	subs	r3, r2, r3
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d802      	bhi.n	800855a <HAL_SPI_Transmit+0x18e>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	3301      	adds	r3, #1
 8008558:	d102      	bne.n	8008560 <HAL_SPI_Transmit+0x194>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d108      	bne.n	8008572 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8008560:	231f      	movs	r3, #31
 8008562:	18fb      	adds	r3, r7, r3
 8008564:	2203      	movs	r2, #3
 8008566:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	225d      	movs	r2, #93	; 0x5d
 800856c:	2101      	movs	r1, #1
 800856e:	5499      	strb	r1, [r3, r2]
          goto error;
 8008570:	e080      	b.n	8008674 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008576:	b29b      	uxth	r3, r3
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1c9      	bne.n	8008510 <HAL_SPI_Transmit+0x144>
 800857c:	e053      	b.n	8008626 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d004      	beq.n	8008590 <HAL_SPI_Transmit+0x1c4>
 8008586:	2316      	movs	r3, #22
 8008588:	18fb      	adds	r3, r7, r3
 800858a:	881b      	ldrh	r3, [r3, #0]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d145      	bne.n	800861c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	330c      	adds	r3, #12
 800859a:	7812      	ldrb	r2, [r2, #0]
 800859c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a2:	1c5a      	adds	r2, r3, #1
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	3b01      	subs	r3, #1
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80085b6:	e031      	b.n	800861c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	2202      	movs	r2, #2
 80085c0:	4013      	ands	r3, r2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d113      	bne.n	80085ee <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	330c      	adds	r3, #12
 80085d0:	7812      	ldrb	r2, [r2, #0]
 80085d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d8:	1c5a      	adds	r2, r3, #1
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085ec:	e016      	b.n	800861c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085ee:	f7fe fa3f 	bl	8006a70 <HAL_GetTick>
 80085f2:	0002      	movs	r2, r0
 80085f4:	69bb      	ldr	r3, [r7, #24]
 80085f6:	1ad3      	subs	r3, r2, r3
 80085f8:	683a      	ldr	r2, [r7, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d802      	bhi.n	8008604 <HAL_SPI_Transmit+0x238>
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	d102      	bne.n	800860a <HAL_SPI_Transmit+0x23e>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d108      	bne.n	800861c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800860a:	231f      	movs	r3, #31
 800860c:	18fb      	adds	r3, r7, r3
 800860e:	2203      	movs	r2, #3
 8008610:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	225d      	movs	r2, #93	; 0x5d
 8008616:	2101      	movs	r1, #1
 8008618:	5499      	strb	r1, [r3, r2]
          goto error;
 800861a:	e02b      	b.n	8008674 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008620:	b29b      	uxth	r3, r3
 8008622:	2b00      	cmp	r3, #0
 8008624:	d1c8      	bne.n	80085b8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	0018      	movs	r0, r3
 800862e:	f000 f95d 	bl	80088ec <SPI_EndRxTxTransaction>
 8008632:	1e03      	subs	r3, r0, #0
 8008634:	d002      	beq.n	800863c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2220      	movs	r2, #32
 800863a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10a      	bne.n	800865a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008644:	2300      	movs	r3, #0
 8008646:	613b      	str	r3, [r7, #16]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	613b      	str	r3, [r7, #16]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	613b      	str	r3, [r7, #16]
 8008658:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800865e:	2b00      	cmp	r3, #0
 8008660:	d004      	beq.n	800866c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8008662:	231f      	movs	r3, #31
 8008664:	18fb      	adds	r3, r7, r3
 8008666:	2201      	movs	r2, #1
 8008668:	701a      	strb	r2, [r3, #0]
 800866a:	e003      	b.n	8008674 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	225d      	movs	r2, #93	; 0x5d
 8008670:	2101      	movs	r1, #1
 8008672:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	225c      	movs	r2, #92	; 0x5c
 8008678:	2100      	movs	r1, #0
 800867a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800867c:	231f      	movs	r3, #31
 800867e:	18fb      	adds	r3, r7, r3
 8008680:	781b      	ldrb	r3, [r3, #0]
}
 8008682:	0018      	movs	r0, r3
 8008684:	46bd      	mov	sp, r7
 8008686:	b008      	add	sp, #32
 8008688:	bd80      	pop	{r7, pc}
	...

0800868c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	603b      	str	r3, [r7, #0]
 8008698:	1dfb      	adds	r3, r7, #7
 800869a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800869c:	f7fe f9e8 	bl	8006a70 <HAL_GetTick>
 80086a0:	0002      	movs	r2, r0
 80086a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a4:	1a9b      	subs	r3, r3, r2
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	18d3      	adds	r3, r2, r3
 80086aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086ac:	f7fe f9e0 	bl	8006a70 <HAL_GetTick>
 80086b0:	0003      	movs	r3, r0
 80086b2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086b4:	4b3a      	ldr	r3, [pc, #232]	; (80087a0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	015b      	lsls	r3, r3, #5
 80086ba:	0d1b      	lsrs	r3, r3, #20
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	4353      	muls	r3, r2
 80086c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086c2:	e058      	b.n	8008776 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	3301      	adds	r3, #1
 80086c8:	d055      	beq.n	8008776 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086ca:	f7fe f9d1 	bl	8006a70 <HAL_GetTick>
 80086ce:	0002      	movs	r2, r0
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	1ad3      	subs	r3, r2, r3
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d902      	bls.n	80086e0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d142      	bne.n	8008766 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	21e0      	movs	r1, #224	; 0xe0
 80086ec:	438a      	bics	r2, r1
 80086ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	2382      	movs	r3, #130	; 0x82
 80086f6:	005b      	lsls	r3, r3, #1
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d113      	bne.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x98>
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	689a      	ldr	r2, [r3, #8]
 8008700:	2380      	movs	r3, #128	; 0x80
 8008702:	021b      	lsls	r3, r3, #8
 8008704:	429a      	cmp	r2, r3
 8008706:	d005      	beq.n	8008714 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	2380      	movs	r3, #128	; 0x80
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	429a      	cmp	r2, r3
 8008712:	d107      	bne.n	8008724 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681a      	ldr	r2, [r3, #0]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2140      	movs	r1, #64	; 0x40
 8008720:	438a      	bics	r2, r1
 8008722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008728:	2380      	movs	r3, #128	; 0x80
 800872a:	019b      	lsls	r3, r3, #6
 800872c:	429a      	cmp	r2, r3
 800872e:	d110      	bne.n	8008752 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	491a      	ldr	r1, [pc, #104]	; (80087a4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800873c:	400a      	ands	r2, r1
 800873e:	601a      	str	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2180      	movs	r1, #128	; 0x80
 800874c:	0189      	lsls	r1, r1, #6
 800874e:	430a      	orrs	r2, r1
 8008750:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	225d      	movs	r2, #93	; 0x5d
 8008756:	2101      	movs	r1, #1
 8008758:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	225c      	movs	r2, #92	; 0x5c
 800875e:	2100      	movs	r1, #0
 8008760:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e017      	b.n	8008796 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	3b01      	subs	r3, #1
 8008774:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	4013      	ands	r3, r2
 8008780:	68ba      	ldr	r2, [r7, #8]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	425a      	negs	r2, r3
 8008786:	4153      	adcs	r3, r2
 8008788:	b2db      	uxtb	r3, r3
 800878a:	001a      	movs	r2, r3
 800878c:	1dfb      	adds	r3, r7, #7
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	429a      	cmp	r2, r3
 8008792:	d197      	bne.n	80086c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	0018      	movs	r0, r3
 8008798:	46bd      	mov	sp, r7
 800879a:	b008      	add	sp, #32
 800879c:	bd80      	pop	{r7, pc}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	20000040 	.word	0x20000040
 80087a4:	ffffdfff 	.word	0xffffdfff

080087a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08a      	sub	sp, #40	; 0x28
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	60f8      	str	r0, [r7, #12]
 80087b0:	60b9      	str	r1, [r7, #8]
 80087b2:	607a      	str	r2, [r7, #4]
 80087b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80087b6:	2317      	movs	r3, #23
 80087b8:	18fb      	adds	r3, r7, r3
 80087ba:	2200      	movs	r2, #0
 80087bc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80087be:	f7fe f957 	bl	8006a70 <HAL_GetTick>
 80087c2:	0002      	movs	r2, r0
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	18d3      	adds	r3, r2, r3
 80087cc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80087ce:	f7fe f94f 	bl	8006a70 <HAL_GetTick>
 80087d2:	0003      	movs	r3, r0
 80087d4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	330c      	adds	r3, #12
 80087dc:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80087de:	4b41      	ldr	r3, [pc, #260]	; (80088e4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	0013      	movs	r3, r2
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	189b      	adds	r3, r3, r2
 80087e8:	00da      	lsls	r2, r3, #3
 80087ea:	1ad3      	subs	r3, r2, r3
 80087ec:	0d1b      	lsrs	r3, r3, #20
 80087ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087f0:	4353      	muls	r3, r2
 80087f2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80087f4:	e068      	b.n	80088c8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	23c0      	movs	r3, #192	; 0xc0
 80087fa:	00db      	lsls	r3, r3, #3
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d10a      	bne.n	8008816 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d107      	bne.n	8008816 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008806:	69fb      	ldr	r3, [r7, #28]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	b2da      	uxtb	r2, r3
 800880c:	2117      	movs	r1, #23
 800880e:	187b      	adds	r3, r7, r1
 8008810:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008812:	187b      	adds	r3, r7, r1
 8008814:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	3301      	adds	r3, #1
 800881a:	d055      	beq.n	80088c8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800881c:	f7fe f928 	bl	8006a70 <HAL_GetTick>
 8008820:	0002      	movs	r2, r0
 8008822:	6a3b      	ldr	r3, [r7, #32]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008828:	429a      	cmp	r2, r3
 800882a:	d902      	bls.n	8008832 <SPI_WaitFifoStateUntilTimeout+0x8a>
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	2b00      	cmp	r3, #0
 8008830:	d142      	bne.n	80088b8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685a      	ldr	r2, [r3, #4]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	21e0      	movs	r1, #224	; 0xe0
 800883e:	438a      	bics	r2, r1
 8008840:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	2382      	movs	r3, #130	; 0x82
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	429a      	cmp	r2, r3
 800884c:	d113      	bne.n	8008876 <SPI_WaitFifoStateUntilTimeout+0xce>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	2380      	movs	r3, #128	; 0x80
 8008854:	021b      	lsls	r3, r3, #8
 8008856:	429a      	cmp	r2, r3
 8008858:	d005      	beq.n	8008866 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	689a      	ldr	r2, [r3, #8]
 800885e:	2380      	movs	r3, #128	; 0x80
 8008860:	00db      	lsls	r3, r3, #3
 8008862:	429a      	cmp	r2, r3
 8008864:	d107      	bne.n	8008876 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	2140      	movs	r1, #64	; 0x40
 8008872:	438a      	bics	r2, r1
 8008874:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800887a:	2380      	movs	r3, #128	; 0x80
 800887c:	019b      	lsls	r3, r3, #6
 800887e:	429a      	cmp	r2, r3
 8008880:	d110      	bne.n	80088a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4916      	ldr	r1, [pc, #88]	; (80088e8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800888e:	400a      	ands	r2, r1
 8008890:	601a      	str	r2, [r3, #0]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2180      	movs	r1, #128	; 0x80
 800889e:	0189      	lsls	r1, r1, #6
 80088a0:	430a      	orrs	r2, r1
 80088a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	225d      	movs	r2, #93	; 0x5d
 80088a8:	2101      	movs	r1, #1
 80088aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	225c      	movs	r2, #92	; 0x5c
 80088b0:	2100      	movs	r1, #0
 80088b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80088b4:	2303      	movs	r3, #3
 80088b6:	e010      	b.n	80088da <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4013      	ands	r3, r2
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d18e      	bne.n	80087f6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	0018      	movs	r0, r3
 80088dc:	46bd      	mov	sp, r7
 80088de:	b00a      	add	sp, #40	; 0x28
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	46c0      	nop			; (mov r8, r8)
 80088e4:	20000040 	.word	0x20000040
 80088e8:	ffffdfff 	.word	0xffffdfff

080088ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b086      	sub	sp, #24
 80088f0:	af02      	add	r7, sp, #8
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	23c0      	movs	r3, #192	; 0xc0
 80088fc:	0159      	lsls	r1, r3, #5
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	0013      	movs	r3, r2
 8008906:	2200      	movs	r2, #0
 8008908:	f7ff ff4e 	bl	80087a8 <SPI_WaitFifoStateUntilTimeout>
 800890c:	1e03      	subs	r3, r0, #0
 800890e:	d007      	beq.n	8008920 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008914:	2220      	movs	r2, #32
 8008916:	431a      	orrs	r2, r3
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e027      	b.n	8008970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	0013      	movs	r3, r2
 800892a:	2200      	movs	r2, #0
 800892c:	2180      	movs	r1, #128	; 0x80
 800892e:	f7ff fead 	bl	800868c <SPI_WaitFlagStateUntilTimeout>
 8008932:	1e03      	subs	r3, r0, #0
 8008934:	d007      	beq.n	8008946 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800893a:	2220      	movs	r2, #32
 800893c:	431a      	orrs	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e014      	b.n	8008970 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	23c0      	movs	r3, #192	; 0xc0
 800894a:	00d9      	lsls	r1, r3, #3
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	0013      	movs	r3, r2
 8008954:	2200      	movs	r2, #0
 8008956:	f7ff ff27 	bl	80087a8 <SPI_WaitFifoStateUntilTimeout>
 800895a:	1e03      	subs	r3, r0, #0
 800895c:	d007      	beq.n	800896e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008962:	2220      	movs	r2, #32
 8008964:	431a      	orrs	r2, r3
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e000      	b.n	8008970 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	0018      	movs	r0, r3
 8008972:	46bd      	mov	sp, r7
 8008974:	b004      	add	sp, #16
 8008976:	bd80      	pop	{r7, pc}

08008978 <memset>:
 8008978:	0003      	movs	r3, r0
 800897a:	1882      	adds	r2, r0, r2
 800897c:	4293      	cmp	r3, r2
 800897e:	d100      	bne.n	8008982 <memset+0xa>
 8008980:	4770      	bx	lr
 8008982:	7019      	strb	r1, [r3, #0]
 8008984:	3301      	adds	r3, #1
 8008986:	e7f9      	b.n	800897c <memset+0x4>

08008988 <__libc_init_array>:
 8008988:	b570      	push	{r4, r5, r6, lr}
 800898a:	2600      	movs	r6, #0
 800898c:	4c0c      	ldr	r4, [pc, #48]	; (80089c0 <__libc_init_array+0x38>)
 800898e:	4d0d      	ldr	r5, [pc, #52]	; (80089c4 <__libc_init_array+0x3c>)
 8008990:	1b64      	subs	r4, r4, r5
 8008992:	10a4      	asrs	r4, r4, #2
 8008994:	42a6      	cmp	r6, r4
 8008996:	d109      	bne.n	80089ac <__libc_init_array+0x24>
 8008998:	2600      	movs	r6, #0
 800899a:	f000 f819 	bl	80089d0 <_init>
 800899e:	4c0a      	ldr	r4, [pc, #40]	; (80089c8 <__libc_init_array+0x40>)
 80089a0:	4d0a      	ldr	r5, [pc, #40]	; (80089cc <__libc_init_array+0x44>)
 80089a2:	1b64      	subs	r4, r4, r5
 80089a4:	10a4      	asrs	r4, r4, #2
 80089a6:	42a6      	cmp	r6, r4
 80089a8:	d105      	bne.n	80089b6 <__libc_init_array+0x2e>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	00b3      	lsls	r3, r6, #2
 80089ae:	58eb      	ldr	r3, [r5, r3]
 80089b0:	4798      	blx	r3
 80089b2:	3601      	adds	r6, #1
 80089b4:	e7ee      	b.n	8008994 <__libc_init_array+0xc>
 80089b6:	00b3      	lsls	r3, r6, #2
 80089b8:	58eb      	ldr	r3, [r5, r3]
 80089ba:	4798      	blx	r3
 80089bc:	3601      	adds	r6, #1
 80089be:	e7f2      	b.n	80089a6 <__libc_init_array+0x1e>
 80089c0:	0800b408 	.word	0x0800b408
 80089c4:	0800b408 	.word	0x0800b408
 80089c8:	0800b40c 	.word	0x0800b40c
 80089cc:	0800b408 	.word	0x0800b408

080089d0 <_init>:
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	46c0      	nop			; (mov r8, r8)
 80089d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089d6:	bc08      	pop	{r3}
 80089d8:	469e      	mov	lr, r3
 80089da:	4770      	bx	lr

080089dc <_fini>:
 80089dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089de:	46c0      	nop			; (mov r8, r8)
 80089e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089e2:	bc08      	pop	{r3}
 80089e4:	469e      	mov	lr, r3
 80089e6:	4770      	bx	lr
