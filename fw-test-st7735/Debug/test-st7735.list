
test-st7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b3c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021a8  08003bf8  08003bf8  00013bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da0  08005da0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08005da0  08005da0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da0  08005da0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08005da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000001c  08005dc4  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08005dc4  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007e57  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a22  00000000  00000000  00027ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000840  00000000  00000000  00029900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000633  00000000  00000000  0002a140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010acf  00000000  00000000  0002a773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ac8d  00000000  00000000  0003b242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006417a  00000000  00000000  00045ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001c48  00000000  00000000  000aa04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000abc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08003be0 	.word	0x08003be0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08003be0 	.word	0x08003be0

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 80003f0:	b590      	push	{r4, r7, lr}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	0004      	movs	r4, r0
 80003f8:	0008      	movs	r0, r1
 80003fa:	0011      	movs	r1, r2
 80003fc:	1dbb      	adds	r3, r7, #6
 80003fe:	1c22      	adds	r2, r4, #0
 8000400:	801a      	strh	r2, [r3, #0]
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	1c02      	adds	r2, r0, #0
 8000406:	801a      	strh	r2, [r3, #0]
 8000408:	1cbb      	adds	r3, r7, #2
 800040a:	1c0a      	adds	r2, r1, #0
 800040c:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(x, y, color);
 800040e:	1dbb      	adds	r3, r7, #6
 8000410:	8818      	ldrh	r0, [r3, #0]
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	8819      	ldrh	r1, [r3, #0]
 8000416:	1cbb      	adds	r3, r7, #2
 8000418:	881b      	ldrh	r3, [r3, #0]
 800041a:	001a      	movs	r2, r3
 800041c:	f001 f8e4 	bl	80015e8 <ST7735_DrawPixel>
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b003      	add	sp, #12
 8000426:	bd90      	pop	{r4, r7, pc}

08000428 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000428:	b5b0      	push	{r4, r5, r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af02      	add	r7, sp, #8
 800042e:	0005      	movs	r5, r0
 8000430:	000c      	movs	r4, r1
 8000432:	0010      	movs	r0, r2
 8000434:	0019      	movs	r1, r3
 8000436:	1dbb      	adds	r3, r7, #6
 8000438:	1c2a      	adds	r2, r5, #0
 800043a:	801a      	strh	r2, [r3, #0]
 800043c:	1d3b      	adds	r3, r7, #4
 800043e:	1c22      	adds	r2, r4, #0
 8000440:	801a      	strh	r2, [r3, #0]
 8000442:	1cbb      	adds	r3, r7, #2
 8000444:	1c02      	adds	r2, r0, #0
 8000446:	801a      	strh	r2, [r3, #0]
 8000448:	003b      	movs	r3, r7
 800044a:	1c0a      	adds	r2, r1, #0
 800044c:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800044e:	1dbb      	adds	r3, r7, #6
 8000450:	8818      	ldrh	r0, [r3, #0]
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	8819      	ldrh	r1, [r3, #0]
 8000456:	1cbb      	adds	r3, r7, #2
 8000458:	881a      	ldrh	r2, [r3, #0]
 800045a:	003b      	movs	r3, r7
 800045c:	881c      	ldrh	r4, [r3, #0]
 800045e:	2318      	movs	r3, #24
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	9300      	str	r3, [sp, #0]
 8000466:	0023      	movs	r3, r4
 8000468:	f001 fa3a 	bl	80018e0 <ST7735_FillRectangle>
}
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	46bd      	mov	sp, r7
 8000470:	b002      	add	sp, #8
 8000472:	bdb0      	pop	{r4, r5, r7, pc}

08000474 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	0004      	movs	r4, r0
 800047c:	0008      	movs	r0, r1
 800047e:	0011      	movs	r1, r2
 8000480:	1dbb      	adds	r3, r7, #6
 8000482:	1c22      	adds	r2, r4, #0
 8000484:	801a      	strh	r2, [r3, #0]
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	1c02      	adds	r2, r0, #0
 800048a:	801a      	strh	r2, [r3, #0]
 800048c:	1cbb      	adds	r3, r7, #2
 800048e:	1c0a      	adds	r2, r1, #0
 8000490:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8000492:	1cbb      	adds	r3, r7, #2
 8000494:	881a      	ldrh	r2, [r3, #0]
 8000496:	1d3b      	adds	r3, r7, #4
 8000498:	2100      	movs	r1, #0
 800049a:	5e59      	ldrsh	r1, [r3, r1]
 800049c:	1dbb      	adds	r3, r7, #6
 800049e:	2000      	movs	r0, #0
 80004a0:	5e1b      	ldrsh	r3, [r3, r0]
 80004a2:	0018      	movs	r0, r3
 80004a4:	f7ff ffa4 	bl	80003f0 <drawPixel>
}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b003      	add	sp, #12
 80004ae:	bd90      	pop	{r4, r7, pc}

080004b0 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80004b0:	b5b0      	push	{r4, r5, r7, lr}
 80004b2:	b088      	sub	sp, #32
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	0005      	movs	r5, r0
 80004b8:	000c      	movs	r4, r1
 80004ba:	0010      	movs	r0, r2
 80004bc:	0019      	movs	r1, r3
 80004be:	1dbb      	adds	r3, r7, #6
 80004c0:	1c2a      	adds	r2, r5, #0
 80004c2:	801a      	strh	r2, [r3, #0]
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	1c22      	adds	r2, r4, #0
 80004c8:	801a      	strh	r2, [r3, #0]
 80004ca:	1cbb      	adds	r3, r7, #2
 80004cc:	1c02      	adds	r2, r0, #0
 80004ce:	801a      	strh	r2, [r3, #0]
 80004d0:	003b      	movs	r3, r7
 80004d2:	1c0a      	adds	r2, r1, #0
 80004d4:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80004d6:	003b      	movs	r3, r7
 80004d8:	2200      	movs	r2, #0
 80004da:	5e9a      	ldrsh	r2, [r3, r2]
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2100      	movs	r1, #0
 80004e0:	5e5b      	ldrsh	r3, [r3, r1]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	17d9      	asrs	r1, r3, #31
 80004e6:	185a      	adds	r2, r3, r1
 80004e8:	404a      	eors	r2, r1
 80004ea:	1cbb      	adds	r3, r7, #2
 80004ec:	2100      	movs	r1, #0
 80004ee:	5e59      	ldrsh	r1, [r3, r1]
 80004f0:	1dbb      	adds	r3, r7, #6
 80004f2:	2000      	movs	r0, #0
 80004f4:	5e1b      	ldrsh	r3, [r3, r0]
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	17d9      	asrs	r1, r3, #31
 80004fa:	185b      	adds	r3, r3, r1
 80004fc:	404b      	eors	r3, r1
 80004fe:	2101      	movs	r1, #1
 8000500:	429a      	cmp	r2, r3
 8000502:	dc01      	bgt.n	8000508 <writeLine+0x58>
 8000504:	2300      	movs	r3, #0
 8000506:	1c19      	adds	r1, r3, #0
 8000508:	b2ca      	uxtb	r2, r1
 800050a:	211a      	movs	r1, #26
 800050c:	187b      	adds	r3, r7, r1
 800050e:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	5e9b      	ldrsh	r3, [r3, r2]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d019      	beq.n	800054e <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 800051a:	2118      	movs	r1, #24
 800051c:	187b      	adds	r3, r7, r1
 800051e:	1dba      	adds	r2, r7, #6
 8000520:	8812      	ldrh	r2, [r2, #0]
 8000522:	801a      	strh	r2, [r3, #0]
 8000524:	1dbb      	adds	r3, r7, #6
 8000526:	1d3a      	adds	r2, r7, #4
 8000528:	8812      	ldrh	r2, [r2, #0]
 800052a:	801a      	strh	r2, [r3, #0]
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	187a      	adds	r2, r7, r1
 8000530:	8812      	ldrh	r2, [r2, #0]
 8000532:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8000534:	2116      	movs	r1, #22
 8000536:	187b      	adds	r3, r7, r1
 8000538:	1cba      	adds	r2, r7, #2
 800053a:	8812      	ldrh	r2, [r2, #0]
 800053c:	801a      	strh	r2, [r3, #0]
 800053e:	1cbb      	adds	r3, r7, #2
 8000540:	003a      	movs	r2, r7
 8000542:	8812      	ldrh	r2, [r2, #0]
 8000544:	801a      	strh	r2, [r3, #0]
 8000546:	003b      	movs	r3, r7
 8000548:	187a      	adds	r2, r7, r1
 800054a:	8812      	ldrh	r2, [r2, #0]
 800054c:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 800054e:	1dba      	adds	r2, r7, #6
 8000550:	1cbb      	adds	r3, r7, #2
 8000552:	2100      	movs	r1, #0
 8000554:	5e52      	ldrsh	r2, [r2, r1]
 8000556:	2100      	movs	r1, #0
 8000558:	5e5b      	ldrsh	r3, [r3, r1]
 800055a:	429a      	cmp	r2, r3
 800055c:	dd19      	ble.n	8000592 <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 800055e:	2114      	movs	r1, #20
 8000560:	187b      	adds	r3, r7, r1
 8000562:	1dba      	adds	r2, r7, #6
 8000564:	8812      	ldrh	r2, [r2, #0]
 8000566:	801a      	strh	r2, [r3, #0]
 8000568:	1dbb      	adds	r3, r7, #6
 800056a:	1cba      	adds	r2, r7, #2
 800056c:	8812      	ldrh	r2, [r2, #0]
 800056e:	801a      	strh	r2, [r3, #0]
 8000570:	1cbb      	adds	r3, r7, #2
 8000572:	187a      	adds	r2, r7, r1
 8000574:	8812      	ldrh	r2, [r2, #0]
 8000576:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8000578:	2112      	movs	r1, #18
 800057a:	187b      	adds	r3, r7, r1
 800057c:	1d3a      	adds	r2, r7, #4
 800057e:	8812      	ldrh	r2, [r2, #0]
 8000580:	801a      	strh	r2, [r3, #0]
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	003a      	movs	r2, r7
 8000586:	8812      	ldrh	r2, [r2, #0]
 8000588:	801a      	strh	r2, [r3, #0]
 800058a:	003b      	movs	r3, r7
 800058c:	187a      	adds	r2, r7, r1
 800058e:	8812      	ldrh	r2, [r2, #0]
 8000590:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8000592:	1cbb      	adds	r3, r7, #2
 8000594:	881a      	ldrh	r2, [r3, #0]
 8000596:	1dbb      	adds	r3, r7, #6
 8000598:	881b      	ldrh	r3, [r3, #0]
 800059a:	1ad3      	subs	r3, r2, r3
 800059c:	b29a      	uxth	r2, r3
 800059e:	2010      	movs	r0, #16
 80005a0:	183b      	adds	r3, r7, r0
 80005a2:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 80005a4:	003b      	movs	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	5e9a      	ldrsh	r2, [r3, r2]
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2100      	movs	r1, #0
 80005ae:	5e5b      	ldrsh	r3, [r3, r1]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	17d9      	asrs	r1, r3, #31
 80005b4:	185a      	adds	r2, r3, r1
 80005b6:	404a      	eors	r2, r1
 80005b8:	230e      	movs	r3, #14
 80005ba:	18fb      	adds	r3, r7, r3
 80005bc:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 80005be:	231e      	movs	r3, #30
 80005c0:	18fa      	adds	r2, r7, r3
 80005c2:	183b      	adds	r3, r7, r0
 80005c4:	2100      	movs	r1, #0
 80005c6:	5e5b      	ldrsh	r3, [r3, r1]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	da00      	bge.n	80005ce <writeLine+0x11e>
 80005cc:	3301      	adds	r3, #1
 80005ce:	105b      	asrs	r3, r3, #1
 80005d0:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 80005d2:	1d3a      	adds	r2, r7, #4
 80005d4:	003b      	movs	r3, r7
 80005d6:	2100      	movs	r1, #0
 80005d8:	5e52      	ldrsh	r2, [r2, r1]
 80005da:	2100      	movs	r1, #0
 80005dc:	5e5b      	ldrsh	r3, [r3, r1]
 80005de:	429a      	cmp	r2, r3
 80005e0:	da04      	bge.n	80005ec <writeLine+0x13c>
        ystep = 1;
 80005e2:	231c      	movs	r3, #28
 80005e4:	18fb      	adds	r3, r7, r3
 80005e6:	2201      	movs	r2, #1
 80005e8:	801a      	strh	r2, [r3, #0]
 80005ea:	e04d      	b.n	8000688 <writeLine+0x1d8>
    } else {
        ystep = -1;
 80005ec:	231c      	movs	r3, #28
 80005ee:	18fb      	adds	r3, r7, r3
 80005f0:	2201      	movs	r2, #1
 80005f2:	4252      	negs	r2, r2
 80005f4:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 80005f6:	e047      	b.n	8000688 <writeLine+0x1d8>
        if (steep) {
 80005f8:	231a      	movs	r3, #26
 80005fa:	18fb      	adds	r3, r7, r3
 80005fc:	2200      	movs	r2, #0
 80005fe:	5e9b      	ldrsh	r3, [r3, r2]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00c      	beq.n	800061e <writeLine+0x16e>
            writePixel(y0, x0, color);
 8000604:	2330      	movs	r3, #48	; 0x30
 8000606:	18fb      	adds	r3, r7, r3
 8000608:	881a      	ldrh	r2, [r3, #0]
 800060a:	1dbb      	adds	r3, r7, #6
 800060c:	2100      	movs	r1, #0
 800060e:	5e59      	ldrsh	r1, [r3, r1]
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2000      	movs	r0, #0
 8000614:	5e1b      	ldrsh	r3, [r3, r0]
 8000616:	0018      	movs	r0, r3
 8000618:	f7ff ff2c 	bl	8000474 <writePixel>
 800061c:	e00b      	b.n	8000636 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 800061e:	2330      	movs	r3, #48	; 0x30
 8000620:	18fb      	adds	r3, r7, r3
 8000622:	881a      	ldrh	r2, [r3, #0]
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2100      	movs	r1, #0
 8000628:	5e59      	ldrsh	r1, [r3, r1]
 800062a:	1dbb      	adds	r3, r7, #6
 800062c:	2000      	movs	r0, #0
 800062e:	5e1b      	ldrsh	r3, [r3, r0]
 8000630:	0018      	movs	r0, r3
 8000632:	f7ff ff1f 	bl	8000474 <writePixel>
        }
        err -= dy;
 8000636:	211e      	movs	r1, #30
 8000638:	187b      	adds	r3, r7, r1
 800063a:	881a      	ldrh	r2, [r3, #0]
 800063c:	230e      	movs	r3, #14
 800063e:	18fb      	adds	r3, r7, r3
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	1ad3      	subs	r3, r2, r3
 8000644:	b29a      	uxth	r2, r3
 8000646:	187b      	adds	r3, r7, r1
 8000648:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	5e9b      	ldrsh	r3, [r3, r2]
 8000650:	2b00      	cmp	r3, #0
 8000652:	da11      	bge.n	8000678 <writeLine+0x1c8>
            y0 += ystep;
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	881a      	ldrh	r2, [r3, #0]
 8000658:	231c      	movs	r3, #28
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	18d3      	adds	r3, r2, r3
 8000660:	b29a      	uxth	r2, r3
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	801a      	strh	r2, [r3, #0]
            err += dx;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	881a      	ldrh	r2, [r3, #0]
 800066a:	2310      	movs	r3, #16
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	18d3      	adds	r3, r2, r3
 8000672:	b29a      	uxth	r2, r3
 8000674:	187b      	adds	r3, r7, r1
 8000676:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8000678:	1dbb      	adds	r3, r7, #6
 800067a:	2200      	movs	r2, #0
 800067c:	5e9b      	ldrsh	r3, [r3, r2]
 800067e:	b29b      	uxth	r3, r3
 8000680:	3301      	adds	r3, #1
 8000682:	b29a      	uxth	r2, r3
 8000684:	1dbb      	adds	r3, r7, #6
 8000686:	801a      	strh	r2, [r3, #0]
 8000688:	1dba      	adds	r2, r7, #6
 800068a:	1cbb      	adds	r3, r7, #2
 800068c:	2100      	movs	r1, #0
 800068e:	5e52      	ldrsh	r2, [r2, r1]
 8000690:	2100      	movs	r1, #0
 8000692:	5e5b      	ldrsh	r3, [r3, r1]
 8000694:	429a      	cmp	r2, r3
 8000696:	ddaf      	ble.n	80005f8 <writeLine+0x148>
        }
    }
}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b008      	add	sp, #32
 80006a0:	bdb0      	pop	{r4, r5, r7, pc}

080006a2 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80006a2:	b5b0      	push	{r4, r5, r7, lr}
 80006a4:	b084      	sub	sp, #16
 80006a6:	af02      	add	r7, sp, #8
 80006a8:	0005      	movs	r5, r0
 80006aa:	000c      	movs	r4, r1
 80006ac:	0010      	movs	r0, r2
 80006ae:	0019      	movs	r1, r3
 80006b0:	1dbb      	adds	r3, r7, #6
 80006b2:	1c2a      	adds	r2, r5, #0
 80006b4:	801a      	strh	r2, [r3, #0]
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	1c22      	adds	r2, r4, #0
 80006ba:	801a      	strh	r2, [r3, #0]
 80006bc:	1cbb      	adds	r3, r7, #2
 80006be:	1c02      	adds	r2, r0, #0
 80006c0:	801a      	strh	r2, [r3, #0]
 80006c2:	003b      	movs	r3, r7
 80006c4:	1c0a      	adds	r2, r1, #0
 80006c6:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	881a      	ldrh	r2, [r3, #0]
 80006cc:	1cbb      	adds	r3, r7, #2
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	18d3      	adds	r3, r2, r3
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	b21c      	sxth	r4, r3
 80006da:	1dbb      	adds	r3, r7, #6
 80006dc:	2200      	movs	r2, #0
 80006de:	5e9a      	ldrsh	r2, [r3, r2]
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	2100      	movs	r1, #0
 80006e4:	5e59      	ldrsh	r1, [r3, r1]
 80006e6:	1dbb      	adds	r3, r7, #6
 80006e8:	2000      	movs	r0, #0
 80006ea:	5e18      	ldrsh	r0, [r3, r0]
 80006ec:	003b      	movs	r3, r7
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	0023      	movs	r3, r4
 80006f4:	f7ff fedc 	bl	80004b0 <writeLine>
}
 80006f8:	46c0      	nop			; (mov r8, r8)
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b002      	add	sp, #8
 80006fe:	bdb0      	pop	{r4, r5, r7, pc}

08000700 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000700:	b5b0      	push	{r4, r5, r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af02      	add	r7, sp, #8
 8000706:	0005      	movs	r5, r0
 8000708:	000c      	movs	r4, r1
 800070a:	0010      	movs	r0, r2
 800070c:	0019      	movs	r1, r3
 800070e:	1dbb      	adds	r3, r7, #6
 8000710:	1c2a      	adds	r2, r5, #0
 8000712:	801a      	strh	r2, [r3, #0]
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	1c22      	adds	r2, r4, #0
 8000718:	801a      	strh	r2, [r3, #0]
 800071a:	1cbb      	adds	r3, r7, #2
 800071c:	1c02      	adds	r2, r0, #0
 800071e:	801a      	strh	r2, [r3, #0]
 8000720:	003b      	movs	r3, r7
 8000722:	1c0a      	adds	r2, r1, #0
 8000724:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8000726:	1dbb      	adds	r3, r7, #6
 8000728:	881a      	ldrh	r2, [r3, #0]
 800072a:	1cbb      	adds	r3, r7, #2
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	18d3      	adds	r3, r2, r3
 8000730:	b29b      	uxth	r3, r3
 8000732:	3b01      	subs	r3, #1
 8000734:	b29b      	uxth	r3, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2400      	movs	r4, #0
 800073c:	5f1c      	ldrsh	r4, [r3, r4]
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2100      	movs	r1, #0
 8000742:	5e59      	ldrsh	r1, [r3, r1]
 8000744:	1dbb      	adds	r3, r7, #6
 8000746:	2000      	movs	r0, #0
 8000748:	5e18      	ldrsh	r0, [r3, r0]
 800074a:	003b      	movs	r3, r7
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	0023      	movs	r3, r4
 8000752:	f7ff fead 	bl	80004b0 <writeLine>
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b002      	add	sp, #8
 800075c:	bdb0      	pop	{r4, r5, r7, pc}

0800075e <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800075e:	b5b0      	push	{r4, r5, r7, lr}
 8000760:	b086      	sub	sp, #24
 8000762:	af02      	add	r7, sp, #8
 8000764:	0005      	movs	r5, r0
 8000766:	000c      	movs	r4, r1
 8000768:	0010      	movs	r0, r2
 800076a:	0019      	movs	r1, r3
 800076c:	1dbb      	adds	r3, r7, #6
 800076e:	1c2a      	adds	r2, r5, #0
 8000770:	801a      	strh	r2, [r3, #0]
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	1c22      	adds	r2, r4, #0
 8000776:	801a      	strh	r2, [r3, #0]
 8000778:	1cbb      	adds	r3, r7, #2
 800077a:	1c02      	adds	r2, r0, #0
 800077c:	801a      	strh	r2, [r3, #0]
 800077e:	003b      	movs	r3, r7
 8000780:	1c0a      	adds	r2, r1, #0
 8000782:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8000784:	1dba      	adds	r2, r7, #6
 8000786:	1cbb      	adds	r3, r7, #2
 8000788:	2100      	movs	r1, #0
 800078a:	5e52      	ldrsh	r2, [r2, r1]
 800078c:	2100      	movs	r1, #0
 800078e:	5e5b      	ldrsh	r3, [r3, r1]
 8000790:	429a      	cmp	r2, r3
 8000792:	d12a      	bne.n	80007ea <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8000794:	1d3a      	adds	r2, r7, #4
 8000796:	003b      	movs	r3, r7
 8000798:	2100      	movs	r1, #0
 800079a:	5e52      	ldrsh	r2, [r2, r1]
 800079c:	2100      	movs	r1, #0
 800079e:	5e5b      	ldrsh	r3, [r3, r1]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	dd0c      	ble.n	80007be <drawLine+0x60>
 80007a4:	210c      	movs	r1, #12
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	1d3a      	adds	r2, r7, #4
 80007aa:	8812      	ldrh	r2, [r2, #0]
 80007ac:	801a      	strh	r2, [r3, #0]
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	003a      	movs	r2, r7
 80007b2:	8812      	ldrh	r2, [r2, #0]
 80007b4:	801a      	strh	r2, [r3, #0]
 80007b6:	003b      	movs	r3, r7
 80007b8:	187a      	adds	r2, r7, r1
 80007ba:	8812      	ldrh	r2, [r2, #0]
 80007bc:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80007be:	003b      	movs	r3, r7
 80007c0:	881a      	ldrh	r2, [r3, #0]
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	b29b      	uxth	r3, r3
 80007ca:	3301      	adds	r3, #1
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	2320      	movs	r3, #32
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	881c      	ldrh	r4, [r3, #0]
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2100      	movs	r1, #0
 80007da:	5e59      	ldrsh	r1, [r3, r1]
 80007dc:	1dbb      	adds	r3, r7, #6
 80007de:	2000      	movs	r0, #0
 80007e0:	5e18      	ldrsh	r0, [r3, r0]
 80007e2:	0023      	movs	r3, r4
 80007e4:	f7ff ff5d 	bl	80006a2 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 80007e8:	e045      	b.n	8000876 <drawLine+0x118>
    } else if(y0 == y1){
 80007ea:	1d3a      	adds	r2, r7, #4
 80007ec:	003b      	movs	r3, r7
 80007ee:	2100      	movs	r1, #0
 80007f0:	5e52      	ldrsh	r2, [r2, r1]
 80007f2:	2100      	movs	r1, #0
 80007f4:	5e5b      	ldrsh	r3, [r3, r1]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d12a      	bne.n	8000850 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80007fa:	1dba      	adds	r2, r7, #6
 80007fc:	1cbb      	adds	r3, r7, #2
 80007fe:	2100      	movs	r1, #0
 8000800:	5e52      	ldrsh	r2, [r2, r1]
 8000802:	2100      	movs	r1, #0
 8000804:	5e5b      	ldrsh	r3, [r3, r1]
 8000806:	429a      	cmp	r2, r3
 8000808:	dd0c      	ble.n	8000824 <drawLine+0xc6>
 800080a:	210e      	movs	r1, #14
 800080c:	187b      	adds	r3, r7, r1
 800080e:	1dba      	adds	r2, r7, #6
 8000810:	8812      	ldrh	r2, [r2, #0]
 8000812:	801a      	strh	r2, [r3, #0]
 8000814:	1dbb      	adds	r3, r7, #6
 8000816:	1cba      	adds	r2, r7, #2
 8000818:	8812      	ldrh	r2, [r2, #0]
 800081a:	801a      	strh	r2, [r3, #0]
 800081c:	1cbb      	adds	r3, r7, #2
 800081e:	187a      	adds	r2, r7, r1
 8000820:	8812      	ldrh	r2, [r2, #0]
 8000822:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8000824:	1cbb      	adds	r3, r7, #2
 8000826:	881a      	ldrh	r2, [r3, #0]
 8000828:	1dbb      	adds	r3, r7, #6
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	b29b      	uxth	r3, r3
 8000830:	3301      	adds	r3, #1
 8000832:	b29b      	uxth	r3, r3
 8000834:	b21a      	sxth	r2, r3
 8000836:	2320      	movs	r3, #32
 8000838:	18fb      	adds	r3, r7, r3
 800083a:	881c      	ldrh	r4, [r3, #0]
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2100      	movs	r1, #0
 8000840:	5e59      	ldrsh	r1, [r3, r1]
 8000842:	1dbb      	adds	r3, r7, #6
 8000844:	2000      	movs	r0, #0
 8000846:	5e18      	ldrsh	r0, [r3, r0]
 8000848:	0023      	movs	r3, r4
 800084a:	f7ff ff59 	bl	8000700 <drawFastHLine>
}
 800084e:	e012      	b.n	8000876 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8000850:	003b      	movs	r3, r7
 8000852:	2400      	movs	r4, #0
 8000854:	5f1c      	ldrsh	r4, [r3, r4]
 8000856:	1cbb      	adds	r3, r7, #2
 8000858:	2200      	movs	r2, #0
 800085a:	5e9a      	ldrsh	r2, [r3, r2]
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2100      	movs	r1, #0
 8000860:	5e59      	ldrsh	r1, [r3, r1]
 8000862:	1dbb      	adds	r3, r7, #6
 8000864:	2000      	movs	r0, #0
 8000866:	5e18      	ldrsh	r0, [r3, r0]
 8000868:	2320      	movs	r3, #32
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	0023      	movs	r3, r4
 8000872:	f7ff fe1d 	bl	80004b0 <writeLine>
}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b004      	add	sp, #16
 800087c:	bdb0      	pop	{r4, r5, r7, pc}

0800087e <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 800087e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000880:	b087      	sub	sp, #28
 8000882:	af00      	add	r7, sp, #0
 8000884:	0005      	movs	r5, r0
 8000886:	000c      	movs	r4, r1
 8000888:	0010      	movs	r0, r2
 800088a:	0019      	movs	r1, r3
 800088c:	1dbb      	adds	r3, r7, #6
 800088e:	1c2a      	adds	r2, r5, #0
 8000890:	801a      	strh	r2, [r3, #0]
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	1c22      	adds	r2, r4, #0
 8000896:	801a      	strh	r2, [r3, #0]
 8000898:	1cbb      	adds	r3, r7, #2
 800089a:	1c02      	adds	r2, r0, #0
 800089c:	801a      	strh	r2, [r3, #0]
 800089e:	1c7b      	adds	r3, r7, #1
 80008a0:	1c0a      	adds	r2, r1, #0
 80008a2:	701a      	strb	r2, [r3, #0]
    int16_t f     = 1 - r;
 80008a4:	1cbb      	adds	r3, r7, #2
 80008a6:	881b      	ldrh	r3, [r3, #0]
 80008a8:	2201      	movs	r2, #1
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	2316      	movs	r3, #22
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 80008b4:	2314      	movs	r3, #20
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	2201      	movs	r2, #1
 80008ba:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 80008bc:	1cbb      	adds	r3, r7, #2
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	1c1a      	adds	r2, r3, #0
 80008c2:	03d2      	lsls	r2, r2, #15
 80008c4:	1ad3      	subs	r3, r2, r3
 80008c6:	18db      	adds	r3, r3, r3
 80008c8:	b29a      	uxth	r2, r3
 80008ca:	2312      	movs	r3, #18
 80008cc:	18fb      	adds	r3, r7, r3
 80008ce:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 80008d0:	2310      	movs	r3, #16
 80008d2:	18fb      	adds	r3, r7, r3
 80008d4:	2200      	movs	r2, #0
 80008d6:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 80008d8:	230e      	movs	r3, #14
 80008da:	18fb      	adds	r3, r7, r3
 80008dc:	1cba      	adds	r2, r7, #2
 80008de:	8812      	ldrh	r2, [r2, #0]
 80008e0:	801a      	strh	r2, [r3, #0]

    while (x<y) {
 80008e2:	e0fe      	b.n	8000ae2 <drawCircleHelper+0x264>
        if (f >= 0) {
 80008e4:	2116      	movs	r1, #22
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	5e9b      	ldrsh	r3, [r3, r2]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	db17      	blt.n	8000920 <drawCircleHelper+0xa2>
            y--;
 80008f0:	200e      	movs	r0, #14
 80008f2:	183b      	adds	r3, r7, r0
 80008f4:	2200      	movs	r2, #0
 80008f6:	5e9b      	ldrsh	r3, [r3, r2]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	3b01      	subs	r3, #1
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	183b      	adds	r3, r7, r0
 8000900:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8000902:	2012      	movs	r0, #18
 8000904:	183b      	adds	r3, r7, r0
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	3302      	adds	r3, #2
 800090a:	b29a      	uxth	r2, r3
 800090c:	183b      	adds	r3, r7, r0
 800090e:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	881a      	ldrh	r2, [r3, #0]
 8000914:	183b      	adds	r3, r7, r0
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	18d3      	adds	r3, r2, r3
 800091a:	b29a      	uxth	r2, r3
 800091c:	187b      	adds	r3, r7, r1
 800091e:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8000920:	2110      	movs	r1, #16
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2200      	movs	r2, #0
 8000926:	5e9b      	ldrsh	r3, [r3, r2]
 8000928:	b29b      	uxth	r3, r3
 800092a:	3301      	adds	r3, #1
 800092c:	b29a      	uxth	r2, r3
 800092e:	187b      	adds	r3, r7, r1
 8000930:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8000932:	2014      	movs	r0, #20
 8000934:	183b      	adds	r3, r7, r0
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	3302      	adds	r3, #2
 800093a:	b29a      	uxth	r2, r3
 800093c:	183b      	adds	r3, r7, r0
 800093e:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8000940:	2416      	movs	r4, #22
 8000942:	193b      	adds	r3, r7, r4
 8000944:	881a      	ldrh	r2, [r3, #0]
 8000946:	183b      	adds	r3, r7, r0
 8000948:	881b      	ldrh	r3, [r3, #0]
 800094a:	18d3      	adds	r3, r2, r3
 800094c:	b29a      	uxth	r2, r3
 800094e:	193b      	adds	r3, r7, r4
 8000950:	801a      	strh	r2, [r3, #0]
        if (cornername & 0x4) {
 8000952:	1c7b      	adds	r3, r7, #1
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2204      	movs	r2, #4
 8000958:	4013      	ands	r3, r2
 800095a:	d02c      	beq.n	80009b6 <drawCircleHelper+0x138>
            writePixel(x0 + x, y0 + y, color);
 800095c:	1dbb      	adds	r3, r7, #6
 800095e:	881a      	ldrh	r2, [r3, #0]
 8000960:	000c      	movs	r4, r1
 8000962:	187b      	adds	r3, r7, r1
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	18d3      	adds	r3, r2, r3
 8000968:	b29b      	uxth	r3, r3
 800096a:	b218      	sxth	r0, r3
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	881a      	ldrh	r2, [r3, #0]
 8000970:	250e      	movs	r5, #14
 8000972:	197b      	adds	r3, r7, r5
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	18d3      	adds	r3, r2, r3
 8000978:	b29b      	uxth	r3, r3
 800097a:	b219      	sxth	r1, r3
 800097c:	2628      	movs	r6, #40	; 0x28
 800097e:	2308      	movs	r3, #8
 8000980:	18f2      	adds	r2, r6, r3
 8000982:	19d3      	adds	r3, r2, r7
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	001a      	movs	r2, r3
 8000988:	f7ff fd74 	bl	8000474 <writePixel>
            writePixel(x0 + y, y0 + x, color);
 800098c:	1dbb      	adds	r3, r7, #6
 800098e:	881a      	ldrh	r2, [r3, #0]
 8000990:	197b      	adds	r3, r7, r5
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	18d3      	adds	r3, r2, r3
 8000996:	b29b      	uxth	r3, r3
 8000998:	b218      	sxth	r0, r3
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	881a      	ldrh	r2, [r3, #0]
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	18d3      	adds	r3, r2, r3
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b219      	sxth	r1, r3
 80009a8:	2308      	movs	r3, #8
 80009aa:	18f3      	adds	r3, r6, r3
 80009ac:	19db      	adds	r3, r3, r7
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	001a      	movs	r2, r3
 80009b2:	f7ff fd5f 	bl	8000474 <writePixel>
        }
        if (cornername & 0x2) {
 80009b6:	1c7b      	adds	r3, r7, #1
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2202      	movs	r2, #2
 80009bc:	4013      	ands	r3, r2
 80009be:	d02c      	beq.n	8000a1a <drawCircleHelper+0x19c>
            writePixel(x0 + x, y0 - y, color);
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	881a      	ldrh	r2, [r3, #0]
 80009c4:	2410      	movs	r4, #16
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	881b      	ldrh	r3, [r3, #0]
 80009ca:	18d3      	adds	r3, r2, r3
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	b218      	sxth	r0, r3
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	881a      	ldrh	r2, [r3, #0]
 80009d4:	250e      	movs	r5, #14
 80009d6:	197b      	adds	r3, r7, r5
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	1ad3      	subs	r3, r2, r3
 80009dc:	b29b      	uxth	r3, r3
 80009de:	b219      	sxth	r1, r3
 80009e0:	2628      	movs	r6, #40	; 0x28
 80009e2:	2308      	movs	r3, #8
 80009e4:	18f2      	adds	r2, r6, r3
 80009e6:	19d3      	adds	r3, r2, r7
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	001a      	movs	r2, r3
 80009ec:	f7ff fd42 	bl	8000474 <writePixel>
            writePixel(x0 + y, y0 - x, color);
 80009f0:	1dbb      	adds	r3, r7, #6
 80009f2:	881a      	ldrh	r2, [r3, #0]
 80009f4:	197b      	adds	r3, r7, r5
 80009f6:	881b      	ldrh	r3, [r3, #0]
 80009f8:	18d3      	adds	r3, r2, r3
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	b218      	sxth	r0, r3
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	881a      	ldrh	r2, [r3, #0]
 8000a02:	193b      	adds	r3, r7, r4
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	1ad3      	subs	r3, r2, r3
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	b219      	sxth	r1, r3
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	18f3      	adds	r3, r6, r3
 8000a10:	19db      	adds	r3, r3, r7
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	001a      	movs	r2, r3
 8000a16:	f7ff fd2d 	bl	8000474 <writePixel>
        }
        if (cornername & 0x8) {
 8000a1a:	1c7b      	adds	r3, r7, #1
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2208      	movs	r2, #8
 8000a20:	4013      	ands	r3, r2
 8000a22:	d02c      	beq.n	8000a7e <drawCircleHelper+0x200>
            writePixel(x0 - y, y0 + x, color);
 8000a24:	1dbb      	adds	r3, r7, #6
 8000a26:	881a      	ldrh	r2, [r3, #0]
 8000a28:	240e      	movs	r4, #14
 8000a2a:	193b      	adds	r3, r7, r4
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	1ad3      	subs	r3, r2, r3
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	b218      	sxth	r0, r3
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	881a      	ldrh	r2, [r3, #0]
 8000a38:	2510      	movs	r5, #16
 8000a3a:	197b      	adds	r3, r7, r5
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	18d3      	adds	r3, r2, r3
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	b219      	sxth	r1, r3
 8000a44:	2628      	movs	r6, #40	; 0x28
 8000a46:	2308      	movs	r3, #8
 8000a48:	18f2      	adds	r2, r6, r3
 8000a4a:	19d3      	adds	r3, r2, r7
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	001a      	movs	r2, r3
 8000a50:	f7ff fd10 	bl	8000474 <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8000a54:	1dbb      	adds	r3, r7, #6
 8000a56:	881a      	ldrh	r2, [r3, #0]
 8000a58:	197b      	adds	r3, r7, r5
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	b218      	sxth	r0, r3
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	881a      	ldrh	r2, [r3, #0]
 8000a66:	193b      	adds	r3, r7, r4
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	18d3      	adds	r3, r2, r3
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	b219      	sxth	r1, r3
 8000a70:	2308      	movs	r3, #8
 8000a72:	18f3      	adds	r3, r6, r3
 8000a74:	19db      	adds	r3, r3, r7
 8000a76:	881b      	ldrh	r3, [r3, #0]
 8000a78:	001a      	movs	r2, r3
 8000a7a:	f7ff fcfb 	bl	8000474 <writePixel>
        }
        if (cornername & 0x1) {
 8000a7e:	1c7b      	adds	r3, r7, #1
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	2201      	movs	r2, #1
 8000a84:	4013      	ands	r3, r2
 8000a86:	d02c      	beq.n	8000ae2 <drawCircleHelper+0x264>
            writePixel(x0 - y, y0 - x, color);
 8000a88:	1dbb      	adds	r3, r7, #6
 8000a8a:	881a      	ldrh	r2, [r3, #0]
 8000a8c:	240e      	movs	r4, #14
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	881b      	ldrh	r3, [r3, #0]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b218      	sxth	r0, r3
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	881a      	ldrh	r2, [r3, #0]
 8000a9c:	2510      	movs	r5, #16
 8000a9e:	197b      	adds	r3, r7, r5
 8000aa0:	881b      	ldrh	r3, [r3, #0]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b219      	sxth	r1, r3
 8000aa8:	2628      	movs	r6, #40	; 0x28
 8000aaa:	2308      	movs	r3, #8
 8000aac:	18f2      	adds	r2, r6, r3
 8000aae:	19d3      	adds	r3, r2, r7
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	f7ff fcde 	bl	8000474 <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8000ab8:	1dbb      	adds	r3, r7, #6
 8000aba:	881a      	ldrh	r2, [r3, #0]
 8000abc:	197b      	adds	r3, r7, r5
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	b218      	sxth	r0, r3
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	881a      	ldrh	r2, [r3, #0]
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	b219      	sxth	r1, r3
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	18f3      	adds	r3, r6, r3
 8000ad8:	19db      	adds	r3, r3, r7
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	001a      	movs	r2, r3
 8000ade:	f7ff fcc9 	bl	8000474 <writePixel>
    while (x<y) {
 8000ae2:	2310      	movs	r3, #16
 8000ae4:	18fa      	adds	r2, r7, r3
 8000ae6:	230e      	movs	r3, #14
 8000ae8:	18fb      	adds	r3, r7, r3
 8000aea:	2100      	movs	r1, #0
 8000aec:	5e52      	ldrsh	r2, [r2, r1]
 8000aee:	2100      	movs	r1, #0
 8000af0:	5e5b      	ldrsh	r3, [r3, r1]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	da00      	bge.n	8000af8 <drawCircleHelper+0x27a>
 8000af6:	e6f5      	b.n	80008e4 <drawCircleHelper+0x66>
        }
    }
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b007      	add	sp, #28
 8000b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000b02 <drawRoundRect>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8000b02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b04:	b087      	sub	sp, #28
 8000b06:	af02      	add	r7, sp, #8
 8000b08:	0005      	movs	r5, r0
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	0010      	movs	r0, r2
 8000b0e:	0019      	movs	r1, r3
 8000b10:	1dbb      	adds	r3, r7, #6
 8000b12:	1c2a      	adds	r2, r5, #0
 8000b14:	801a      	strh	r2, [r3, #0]
 8000b16:	1d3b      	adds	r3, r7, #4
 8000b18:	1c22      	adds	r2, r4, #0
 8000b1a:	801a      	strh	r2, [r3, #0]
 8000b1c:	1cbb      	adds	r3, r7, #2
 8000b1e:	1c02      	adds	r2, r0, #0
 8000b20:	801a      	strh	r2, [r3, #0]
 8000b22:	003b      	movs	r3, r7
 8000b24:	1c0a      	adds	r2, r1, #0
 8000b26:	801a      	strh	r2, [r3, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 8000b28:	003b      	movs	r3, r7
 8000b2a:	1cba      	adds	r2, r7, #2
 8000b2c:	8810      	ldrh	r0, [r2, #0]
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	b219      	sxth	r1, r3
 8000b32:	b202      	sxth	r2, r0
 8000b34:	4291      	cmp	r1, r2
 8000b36:	dd00      	ble.n	8000b3a <drawRoundRect+0x38>
 8000b38:	1c03      	adds	r3, r0, #0
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	220e      	movs	r2, #14
 8000b3e:	18ba      	adds	r2, r7, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	da00      	bge.n	8000b46 <drawRoundRect+0x44>
 8000b44:	3301      	adds	r3, #1
 8000b46:	105b      	asrs	r3, r3, #1
 8000b48:	8013      	strh	r3, [r2, #0]
    if(r > max_radius) r = max_radius;
 8000b4a:	2020      	movs	r0, #32
 8000b4c:	2508      	movs	r5, #8
 8000b4e:	1943      	adds	r3, r0, r5
 8000b50:	19db      	adds	r3, r3, r7
 8000b52:	240e      	movs	r4, #14
 8000b54:	1939      	adds	r1, r7, r4
 8000b56:	2200      	movs	r2, #0
 8000b58:	5e9a      	ldrsh	r2, [r3, r2]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	5ecb      	ldrsh	r3, [r1, r3]
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	dd04      	ble.n	8000b6c <drawRoundRect+0x6a>
 8000b62:	1943      	adds	r3, r0, r5
 8000b64:	19db      	adds	r3, r3, r7
 8000b66:	193a      	adds	r2, r7, r4
 8000b68:	8812      	ldrh	r2, [r2, #0]
 8000b6a:	801a      	strh	r2, [r3, #0]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 8000b6c:	1dbb      	adds	r3, r7, #6
 8000b6e:	881a      	ldrh	r2, [r3, #0]
 8000b70:	2520      	movs	r5, #32
 8000b72:	2408      	movs	r4, #8
 8000b74:	192b      	adds	r3, r5, r4
 8000b76:	19db      	adds	r3, r3, r7
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	18d3      	adds	r3, r2, r3
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	b218      	sxth	r0, r3
 8000b80:	1cbb      	adds	r3, r7, #2
 8000b82:	881a      	ldrh	r2, [r3, #0]
 8000b84:	192b      	adds	r3, r5, r4
 8000b86:	19db      	adds	r3, r3, r7
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	18db      	adds	r3, r3, r3
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	1ad3      	subs	r3, r2, r3
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	2624      	movs	r6, #36	; 0x24
 8000b96:	1933      	adds	r3, r6, r4
 8000b98:	19db      	adds	r3, r3, r7
 8000b9a:	881c      	ldrh	r4, [r3, #0]
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	5e59      	ldrsh	r1, [r3, r1]
 8000ba2:	0023      	movs	r3, r4
 8000ba4:	f7ff fdac 	bl	8000700 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 8000ba8:	1dbb      	adds	r3, r7, #6
 8000baa:	881a      	ldrh	r2, [r3, #0]
 8000bac:	2408      	movs	r4, #8
 8000bae:	192b      	adds	r3, r5, r4
 8000bb0:	19db      	adds	r3, r3, r7
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	18d3      	adds	r3, r2, r3
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	b218      	sxth	r0, r3
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	881a      	ldrh	r2, [r3, #0]
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	881b      	ldrh	r3, [r3, #0]
 8000bc2:	18d3      	adds	r3, r2, r3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	b29b      	uxth	r3, r3
 8000bca:	b219      	sxth	r1, r3
 8000bcc:	1cbb      	adds	r3, r7, #2
 8000bce:	881a      	ldrh	r2, [r3, #0]
 8000bd0:	192b      	adds	r3, r5, r4
 8000bd2:	19db      	adds	r3, r3, r7
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	18db      	adds	r3, r3, r3
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	b29b      	uxth	r3, r3
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	1933      	adds	r3, r6, r4
 8000be2:	19db      	adds	r3, r3, r7
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	f7ff fd8b 	bl	8000700 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	881a      	ldrh	r2, [r3, #0]
 8000bee:	192b      	adds	r3, r5, r4
 8000bf0:	19db      	adds	r3, r3, r7
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	18d3      	adds	r3, r2, r3
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	b219      	sxth	r1, r3
 8000bfa:	003b      	movs	r3, r7
 8000bfc:	881a      	ldrh	r2, [r3, #0]
 8000bfe:	192b      	adds	r3, r5, r4
 8000c00:	19db      	adds	r3, r3, r7
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	18db      	adds	r3, r3, r3
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	b21a      	sxth	r2, r3
 8000c0e:	1933      	adds	r3, r6, r4
 8000c10:	19db      	adds	r3, r3, r7
 8000c12:	881c      	ldrh	r4, [r3, #0]
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	2000      	movs	r0, #0
 8000c18:	5e18      	ldrsh	r0, [r3, r0]
 8000c1a:	0023      	movs	r3, r4
 8000c1c:	f7ff fd41 	bl	80006a2 <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	881a      	ldrh	r2, [r3, #0]
 8000c24:	1cbb      	adds	r3, r7, #2
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	18d3      	adds	r3, r2, r3
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	3b01      	subs	r3, #1
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	b218      	sxth	r0, r3
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	881a      	ldrh	r2, [r3, #0]
 8000c36:	2408      	movs	r4, #8
 8000c38:	192b      	adds	r3, r5, r4
 8000c3a:	19db      	adds	r3, r3, r7
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	18d3      	adds	r3, r2, r3
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	b219      	sxth	r1, r3
 8000c44:	003b      	movs	r3, r7
 8000c46:	881a      	ldrh	r2, [r3, #0]
 8000c48:	192b      	adds	r3, r5, r4
 8000c4a:	19db      	adds	r3, r3, r7
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	18db      	adds	r3, r3, r3
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	1933      	adds	r3, r6, r4
 8000c5a:	19db      	adds	r3, r3, r7
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	f7ff fd20 	bl	80006a2 <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8000c62:	1dbb      	adds	r3, r7, #6
 8000c64:	881a      	ldrh	r2, [r3, #0]
 8000c66:	192b      	adds	r3, r5, r4
 8000c68:	19db      	adds	r3, r3, r7
 8000c6a:	881b      	ldrh	r3, [r3, #0]
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	b218      	sxth	r0, r3
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	881a      	ldrh	r2, [r3, #0]
 8000c76:	1929      	adds	r1, r5, r4
 8000c78:	19cb      	adds	r3, r1, r7
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	18d3      	adds	r3, r2, r3
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	b219      	sxth	r1, r3
 8000c82:	002c      	movs	r4, r5
 8000c84:	2308      	movs	r3, #8
 8000c86:	18ea      	adds	r2, r5, r3
 8000c88:	19d3      	adds	r3, r2, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	5e9a      	ldrsh	r2, [r3, r2]
 8000c8e:	0035      	movs	r5, r6
 8000c90:	2608      	movs	r6, #8
 8000c92:	19ab      	adds	r3, r5, r6
 8000c94:	19db      	adds	r3, r3, r7
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	f7ff fdef 	bl	800087e <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8000ca0:	1dbb      	adds	r3, r7, #6
 8000ca2:	881a      	ldrh	r2, [r3, #0]
 8000ca4:	1cbb      	adds	r3, r7, #2
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	18d3      	adds	r3, r2, r3
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	0031      	movs	r1, r6
 8000cae:	1863      	adds	r3, r4, r1
 8000cb0:	19db      	adds	r3, r3, r7
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	b218      	sxth	r0, r3
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	000e      	movs	r6, r1
 8000cc4:	19a3      	adds	r3, r4, r6
 8000cc6:	19db      	adds	r3, r3, r7
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	18d3      	adds	r3, r2, r3
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	b219      	sxth	r1, r3
 8000cd0:	19a3      	adds	r3, r4, r6
 8000cd2:	19db      	adds	r3, r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	5e9a      	ldrsh	r2, [r3, r2]
 8000cd8:	19ab      	adds	r3, r5, r6
 8000cda:	19db      	adds	r3, r3, r7
 8000cdc:	881b      	ldrh	r3, [r3, #0]
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f7ff fdcc 	bl	800087e <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8000ce6:	1dbb      	adds	r3, r7, #6
 8000ce8:	881a      	ldrh	r2, [r3, #0]
 8000cea:	1cbb      	adds	r3, r7, #2
 8000cec:	881b      	ldrh	r3, [r3, #0]
 8000cee:	18d3      	adds	r3, r2, r3
 8000cf0:	b29a      	uxth	r2, r3
 8000cf2:	0021      	movs	r1, r4
 8000cf4:	198b      	adds	r3, r1, r6
 8000cf6:	19db      	adds	r3, r3, r7
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	b218      	sxth	r0, r3
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	881a      	ldrh	r2, [r3, #0]
 8000d08:	003b      	movs	r3, r7
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	18d3      	adds	r3, r2, r3
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	000c      	movs	r4, r1
 8000d12:	19a3      	adds	r3, r4, r6
 8000d14:	19db      	adds	r3, r3, r7
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	b219      	sxth	r1, r3
 8000d22:	19a3      	adds	r3, r4, r6
 8000d24:	19db      	adds	r3, r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	5e9a      	ldrsh	r2, [r3, r2]
 8000d2a:	19ab      	adds	r3, r5, r6
 8000d2c:	19db      	adds	r3, r3, r7
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2304      	movs	r3, #4
 8000d34:	f7ff fda3 	bl	800087e <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 8000d38:	1dbb      	adds	r3, r7, #6
 8000d3a:	881a      	ldrh	r2, [r3, #0]
 8000d3c:	0021      	movs	r1, r4
 8000d3e:	198b      	adds	r3, r1, r6
 8000d40:	19db      	adds	r3, r3, r7
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	18d3      	adds	r3, r2, r3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	b218      	sxth	r0, r3
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	881a      	ldrh	r2, [r3, #0]
 8000d4e:	003b      	movs	r3, r7
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	18d3      	adds	r3, r2, r3
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	000c      	movs	r4, r1
 8000d58:	198b      	adds	r3, r1, r6
 8000d5a:	19db      	adds	r3, r3, r7
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	3b01      	subs	r3, #1
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	b219      	sxth	r1, r3
 8000d68:	19a3      	adds	r3, r4, r6
 8000d6a:	19db      	adds	r3, r3, r7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	5e9a      	ldrsh	r2, [r3, r2]
 8000d70:	19ab      	adds	r3, r5, r6
 8000d72:	19db      	adds	r3, r3, r7
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2308      	movs	r3, #8
 8000d7a:	f7ff fd80 	bl	800087e <drawCircleHelper>
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	b005      	add	sp, #20
 8000d84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d86 <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8000d86:	b5b0      	push	{r4, r5, r7, lr}
 8000d88:	b08e      	sub	sp, #56	; 0x38
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	0005      	movs	r5, r0
 8000d8e:	000c      	movs	r4, r1
 8000d90:	0010      	movs	r0, r2
 8000d92:	0019      	movs	r1, r3
 8000d94:	1dbb      	adds	r3, r7, #6
 8000d96:	1c2a      	adds	r2, r5, #0
 8000d98:	801a      	strh	r2, [r3, #0]
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	1c22      	adds	r2, r4, #0
 8000d9e:	801a      	strh	r2, [r3, #0]
 8000da0:	1cbb      	adds	r3, r7, #2
 8000da2:	1c02      	adds	r2, r0, #0
 8000da4:	801a      	strh	r2, [r3, #0]
 8000da6:	003b      	movs	r3, r7
 8000da8:	1c0a      	adds	r2, r1, #0
 8000daa:	801a      	strh	r2, [r3, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 8000dac:	1d3a      	adds	r2, r7, #4
 8000dae:	003b      	movs	r3, r7
 8000db0:	2100      	movs	r1, #0
 8000db2:	5e52      	ldrsh	r2, [r2, r1]
 8000db4:	2100      	movs	r1, #0
 8000db6:	5e5b      	ldrsh	r3, [r3, r1]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	dd19      	ble.n	8000df0 <fillTriangle+0x6a>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8000dbc:	2126      	movs	r1, #38	; 0x26
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	1d3a      	adds	r2, r7, #4
 8000dc2:	8812      	ldrh	r2, [r2, #0]
 8000dc4:	801a      	strh	r2, [r3, #0]
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	003a      	movs	r2, r7
 8000dca:	8812      	ldrh	r2, [r2, #0]
 8000dcc:	801a      	strh	r2, [r3, #0]
 8000dce:	003b      	movs	r3, r7
 8000dd0:	187a      	adds	r2, r7, r1
 8000dd2:	8812      	ldrh	r2, [r2, #0]
 8000dd4:	801a      	strh	r2, [r3, #0]
 8000dd6:	2124      	movs	r1, #36	; 0x24
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	1dba      	adds	r2, r7, #6
 8000ddc:	8812      	ldrh	r2, [r2, #0]
 8000dde:	801a      	strh	r2, [r3, #0]
 8000de0:	1dbb      	adds	r3, r7, #6
 8000de2:	1cba      	adds	r2, r7, #2
 8000de4:	8812      	ldrh	r2, [r2, #0]
 8000de6:	801a      	strh	r2, [r3, #0]
 8000de8:	1cbb      	adds	r3, r7, #2
 8000dea:	187a      	adds	r2, r7, r1
 8000dec:	8812      	ldrh	r2, [r2, #0]
 8000dee:	801a      	strh	r2, [r3, #0]
    }
    if (y1 > y2) {
 8000df0:	003a      	movs	r2, r7
 8000df2:	214c      	movs	r1, #76	; 0x4c
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2000      	movs	r0, #0
 8000df8:	5e12      	ldrsh	r2, [r2, r0]
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	5e1b      	ldrsh	r3, [r3, r0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dd1a      	ble.n	8000e38 <fillTriangle+0xb2>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8000e02:	2022      	movs	r0, #34	; 0x22
 8000e04:	183b      	adds	r3, r7, r0
 8000e06:	187a      	adds	r2, r7, r1
 8000e08:	8812      	ldrh	r2, [r2, #0]
 8000e0a:	801a      	strh	r2, [r3, #0]
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	003a      	movs	r2, r7
 8000e10:	8812      	ldrh	r2, [r2, #0]
 8000e12:	801a      	strh	r2, [r3, #0]
 8000e14:	003b      	movs	r3, r7
 8000e16:	183a      	adds	r2, r7, r0
 8000e18:	8812      	ldrh	r2, [r2, #0]
 8000e1a:	801a      	strh	r2, [r3, #0]
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	187a      	adds	r2, r7, r1
 8000e20:	2048      	movs	r0, #72	; 0x48
 8000e22:	183b      	adds	r3, r7, r0
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	8013      	strh	r3, [r2, #0]
 8000e28:	183b      	adds	r3, r7, r0
 8000e2a:	1cba      	adds	r2, r7, #2
 8000e2c:	8812      	ldrh	r2, [r2, #0]
 8000e2e:	801a      	strh	r2, [r3, #0]
 8000e30:	1cbb      	adds	r3, r7, #2
 8000e32:	187a      	adds	r2, r7, r1
 8000e34:	8812      	ldrh	r2, [r2, #0]
 8000e36:	801a      	strh	r2, [r3, #0]
    }
    if (y0 > y1) {
 8000e38:	1d3a      	adds	r2, r7, #4
 8000e3a:	003b      	movs	r3, r7
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	5e52      	ldrsh	r2, [r2, r1]
 8000e40:	2100      	movs	r1, #0
 8000e42:	5e5b      	ldrsh	r3, [r3, r1]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dd19      	ble.n	8000e7c <fillTriangle+0xf6>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 8000e48:	211e      	movs	r1, #30
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	1d3a      	adds	r2, r7, #4
 8000e4e:	8812      	ldrh	r2, [r2, #0]
 8000e50:	801a      	strh	r2, [r3, #0]
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	003a      	movs	r2, r7
 8000e56:	8812      	ldrh	r2, [r2, #0]
 8000e58:	801a      	strh	r2, [r3, #0]
 8000e5a:	003b      	movs	r3, r7
 8000e5c:	187a      	adds	r2, r7, r1
 8000e5e:	8812      	ldrh	r2, [r2, #0]
 8000e60:	801a      	strh	r2, [r3, #0]
 8000e62:	211c      	movs	r1, #28
 8000e64:	187b      	adds	r3, r7, r1
 8000e66:	1dba      	adds	r2, r7, #6
 8000e68:	8812      	ldrh	r2, [r2, #0]
 8000e6a:	801a      	strh	r2, [r3, #0]
 8000e6c:	1dbb      	adds	r3, r7, #6
 8000e6e:	1cba      	adds	r2, r7, #2
 8000e70:	8812      	ldrh	r2, [r2, #0]
 8000e72:	801a      	strh	r2, [r3, #0]
 8000e74:	1cbb      	adds	r3, r7, #2
 8000e76:	187a      	adds	r2, r7, r1
 8000e78:	8812      	ldrh	r2, [r2, #0]
 8000e7a:	801a      	strh	r2, [r3, #0]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8000e7c:	1d3a      	adds	r2, r7, #4
 8000e7e:	234c      	movs	r3, #76	; 0x4c
 8000e80:	18fb      	adds	r3, r7, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	5e52      	ldrsh	r2, [r2, r1]
 8000e86:	2100      	movs	r1, #0
 8000e88:	5e5b      	ldrsh	r3, [r3, r1]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d158      	bne.n	8000f40 <fillTriangle+0x1ba>
        a = b = x0;
 8000e8e:	2034      	movs	r0, #52	; 0x34
 8000e90:	183b      	adds	r3, r7, r0
 8000e92:	1dba      	adds	r2, r7, #6
 8000e94:	8812      	ldrh	r2, [r2, #0]
 8000e96:	801a      	strh	r2, [r3, #0]
 8000e98:	2136      	movs	r1, #54	; 0x36
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	183a      	adds	r2, r7, r0
 8000e9e:	8812      	ldrh	r2, [r2, #0]
 8000ea0:	801a      	strh	r2, [r3, #0]
        if(x1 < a)      a = x1;
 8000ea2:	1cba      	adds	r2, r7, #2
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	5e12      	ldrsh	r2, [r2, r0]
 8000eaa:	2000      	movs	r0, #0
 8000eac:	5e1b      	ldrsh	r3, [r3, r0]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	da04      	bge.n	8000ebc <fillTriangle+0x136>
 8000eb2:	187b      	adds	r3, r7, r1
 8000eb4:	1cba      	adds	r2, r7, #2
 8000eb6:	8812      	ldrh	r2, [r2, #0]
 8000eb8:	801a      	strh	r2, [r3, #0]
 8000eba:	e00c      	b.n	8000ed6 <fillTriangle+0x150>
        else if(x1 > b) b = x1;
 8000ebc:	1cba      	adds	r2, r7, #2
 8000ebe:	2134      	movs	r1, #52	; 0x34
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	5e12      	ldrsh	r2, [r2, r0]
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	5e1b      	ldrsh	r3, [r3, r0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dd03      	ble.n	8000ed6 <fillTriangle+0x150>
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	1cba      	adds	r2, r7, #2
 8000ed2:	8812      	ldrh	r2, [r2, #0]
 8000ed4:	801a      	strh	r2, [r3, #0]
        if(x2 < a)      a = x2;
 8000ed6:	2048      	movs	r0, #72	; 0x48
 8000ed8:	183b      	adds	r3, r7, r0
 8000eda:	2436      	movs	r4, #54	; 0x36
 8000edc:	1939      	adds	r1, r7, r4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	5e9a      	ldrsh	r2, [r3, r2]
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	5ecb      	ldrsh	r3, [r1, r3]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	da04      	bge.n	8000ef4 <fillTriangle+0x16e>
 8000eea:	193a      	adds	r2, r7, r4
 8000eec:	183b      	adds	r3, r7, r0
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	8013      	strh	r3, [r2, #0]
 8000ef2:	e00d      	b.n	8000f10 <fillTriangle+0x18a>
        else if(x2 > b) b = x2;
 8000ef4:	2048      	movs	r0, #72	; 0x48
 8000ef6:	183b      	adds	r3, r7, r0
 8000ef8:	2434      	movs	r4, #52	; 0x34
 8000efa:	1939      	adds	r1, r7, r4
 8000efc:	2200      	movs	r2, #0
 8000efe:	5e9a      	ldrsh	r2, [r3, r2]
 8000f00:	2300      	movs	r3, #0
 8000f02:	5ecb      	ldrsh	r3, [r1, r3]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dd03      	ble.n	8000f10 <fillTriangle+0x18a>
 8000f08:	193a      	adds	r2, r7, r4
 8000f0a:	183b      	adds	r3, r7, r0
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	8013      	strh	r3, [r2, #0]
        drawFastHLine(a, y0, b-a+1, color);
 8000f10:	2334      	movs	r3, #52	; 0x34
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	881a      	ldrh	r2, [r3, #0]
 8000f16:	2036      	movs	r0, #54	; 0x36
 8000f18:	183b      	adds	r3, r7, r0
 8000f1a:	881b      	ldrh	r3, [r3, #0]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	3301      	adds	r3, #1
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	2350      	movs	r3, #80	; 0x50
 8000f28:	18fb      	adds	r3, r7, r3
 8000f2a:	881c      	ldrh	r4, [r3, #0]
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2100      	movs	r1, #0
 8000f30:	5e59      	ldrsh	r1, [r3, r1]
 8000f32:	183b      	adds	r3, r7, r0
 8000f34:	2000      	movs	r0, #0
 8000f36:	5e18      	ldrsh	r0, [r3, r0]
 8000f38:	0023      	movs	r3, r4
 8000f3a:	f7ff fbe1 	bl	8000700 <drawFastHLine>
        return;
 8000f3e:	e151      	b.n	80011e4 <fillTriangle+0x45e>
    }

    int16_t
    dx01 = x1 - x0,
 8000f40:	1cbb      	adds	r3, r7, #2
 8000f42:	881a      	ldrh	r2, [r3, #0]
 8000f44:	1dbb      	adds	r3, r7, #6
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	231a      	movs	r3, #26
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	801a      	strh	r2, [r3, #0]
    dy01 = y1 - y0,
 8000f52:	003b      	movs	r3, r7
 8000f54:	881a      	ldrh	r2, [r3, #0]
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	2318      	movs	r3, #24
 8000f60:	18fb      	adds	r3, r7, r3
 8000f62:	801a      	strh	r2, [r3, #0]
    dx02 = x2 - x0,
 8000f64:	2048      	movs	r0, #72	; 0x48
 8000f66:	183b      	adds	r3, r7, r0
 8000f68:	881a      	ldrh	r2, [r3, #0]
 8000f6a:	1dbb      	adds	r3, r7, #6
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	2316      	movs	r3, #22
 8000f74:	18fb      	adds	r3, r7, r3
 8000f76:	801a      	strh	r2, [r3, #0]
    dy02 = y2 - y0,
 8000f78:	214c      	movs	r1, #76	; 0x4c
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	881a      	ldrh	r2, [r3, #0]
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	881b      	ldrh	r3, [r3, #0]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	2314      	movs	r3, #20
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	801a      	strh	r2, [r3, #0]
    dx12 = x2 - x1,
 8000f8c:	183b      	adds	r3, r7, r0
 8000f8e:	881a      	ldrh	r2, [r3, #0]
 8000f90:	1cbb      	adds	r3, r7, #2
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	2312      	movs	r3, #18
 8000f9a:	18fb      	adds	r3, r7, r3
 8000f9c:	801a      	strh	r2, [r3, #0]
    dy12 = y2 - y1;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	881a      	ldrh	r2, [r3, #0]
 8000fa2:	003b      	movs	r3, r7
 8000fa4:	881b      	ldrh	r3, [r3, #0]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	2310      	movs	r3, #16
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	801a      	strh	r2, [r3, #0]
    int32_t
    sa   = 0,
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8000fb8:	003a      	movs	r2, r7
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	5e52      	ldrsh	r2, [r2, r1]
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	5e5b      	ldrsh	r3, [r3, r1]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d105      	bne.n	8000fd4 <fillTriangle+0x24e>
 8000fc8:	2330      	movs	r3, #48	; 0x30
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	003a      	movs	r2, r7
 8000fce:	8812      	ldrh	r2, [r2, #0]
 8000fd0:	801a      	strh	r2, [r3, #0]
 8000fd2:	e006      	b.n	8000fe2 <fillTriangle+0x25c>
    else         last = y1-1; // Skip it
 8000fd4:	003b      	movs	r3, r7
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	2330      	movs	r3, #48	; 0x30
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	801a      	strh	r2, [r3, #0]

    for(y=y0; y<=last; y++) {
 8000fe2:	2332      	movs	r3, #50	; 0x32
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	1d3a      	adds	r2, r7, #4
 8000fe8:	8812      	ldrh	r2, [r2, #0]
 8000fea:	801a      	strh	r2, [r3, #0]
 8000fec:	e065      	b.n	80010ba <fillTriangle+0x334>
        a   = x0 + sa / dy01;
 8000fee:	2318      	movs	r3, #24
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	5e9b      	ldrsh	r3, [r3, r2]
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ffa:	f7ff f90d 	bl	8000218 <__divsi3>
 8000ffe:	0003      	movs	r3, r0
 8001000:	b29a      	uxth	r2, r3
 8001002:	1dbb      	adds	r3, r7, #6
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	18d3      	adds	r3, r2, r3
 8001008:	b29a      	uxth	r2, r3
 800100a:	2436      	movs	r4, #54	; 0x36
 800100c:	193b      	adds	r3, r7, r4
 800100e:	801a      	strh	r2, [r3, #0]
        b   = x0 + sb / dy02;
 8001010:	2314      	movs	r3, #20
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	2200      	movs	r2, #0
 8001016:	5e9b      	ldrsh	r3, [r3, r2]
 8001018:	0019      	movs	r1, r3
 800101a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800101c:	f7ff f8fc 	bl	8000218 <__divsi3>
 8001020:	0003      	movs	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	18d3      	adds	r3, r2, r3
 800102a:	b29a      	uxth	r2, r3
 800102c:	2134      	movs	r1, #52	; 0x34
 800102e:	187b      	adds	r3, r7, r1
 8001030:	801a      	strh	r2, [r3, #0]
        sa += dx01;
 8001032:	231a      	movs	r3, #26
 8001034:	18fb      	adds	r3, r7, r3
 8001036:	2200      	movs	r2, #0
 8001038:	5e9b      	ldrsh	r3, [r3, r2]
 800103a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800103c:	18d3      	adds	r3, r2, r3
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8001040:	2316      	movs	r3, #22
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	2200      	movs	r2, #0
 8001046:	5e9b      	ldrsh	r3, [r3, r2]
 8001048:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800104a:	18d3      	adds	r3, r2, r3
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 800104e:	193a      	adds	r2, r7, r4
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2000      	movs	r0, #0
 8001054:	5e12      	ldrsh	r2, [r2, r0]
 8001056:	2000      	movs	r0, #0
 8001058:	5e1b      	ldrsh	r3, [r3, r0]
 800105a:	429a      	cmp	r2, r3
 800105c:	dd0c      	ble.n	8001078 <fillTriangle+0x2f2>
 800105e:	200c      	movs	r0, #12
 8001060:	183b      	adds	r3, r7, r0
 8001062:	193a      	adds	r2, r7, r4
 8001064:	8812      	ldrh	r2, [r2, #0]
 8001066:	801a      	strh	r2, [r3, #0]
 8001068:	193b      	adds	r3, r7, r4
 800106a:	187a      	adds	r2, r7, r1
 800106c:	8812      	ldrh	r2, [r2, #0]
 800106e:	801a      	strh	r2, [r3, #0]
 8001070:	187b      	adds	r3, r7, r1
 8001072:	183a      	adds	r2, r7, r0
 8001074:	8812      	ldrh	r2, [r2, #0]
 8001076:	801a      	strh	r2, [r3, #0]
        drawFastHLine(a, y, b-a+1, color);
 8001078:	2334      	movs	r3, #52	; 0x34
 800107a:	18fb      	adds	r3, r7, r3
 800107c:	881a      	ldrh	r2, [r3, #0]
 800107e:	2036      	movs	r0, #54	; 0x36
 8001080:	183b      	adds	r3, r7, r0
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	b29b      	uxth	r3, r3
 8001088:	3301      	adds	r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	b21a      	sxth	r2, r3
 800108e:	2350      	movs	r3, #80	; 0x50
 8001090:	18fb      	adds	r3, r7, r3
 8001092:	881c      	ldrh	r4, [r3, #0]
 8001094:	2532      	movs	r5, #50	; 0x32
 8001096:	197b      	adds	r3, r7, r5
 8001098:	2100      	movs	r1, #0
 800109a:	5e59      	ldrsh	r1, [r3, r1]
 800109c:	183b      	adds	r3, r7, r0
 800109e:	2000      	movs	r0, #0
 80010a0:	5e18      	ldrsh	r0, [r3, r0]
 80010a2:	0023      	movs	r3, r4
 80010a4:	f7ff fb2c 	bl	8000700 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 80010a8:	0029      	movs	r1, r5
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2200      	movs	r2, #0
 80010ae:	5e9b      	ldrsh	r3, [r3, r2]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	3301      	adds	r3, #1
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	801a      	strh	r2, [r3, #0]
 80010ba:	2032      	movs	r0, #50	; 0x32
 80010bc:	183a      	adds	r2, r7, r0
 80010be:	2330      	movs	r3, #48	; 0x30
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	2100      	movs	r1, #0
 80010c4:	5e52      	ldrsh	r2, [r2, r1]
 80010c6:	2100      	movs	r1, #0
 80010c8:	5e5b      	ldrsh	r3, [r3, r1]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	dd8f      	ble.n	8000fee <fillTriangle+0x268>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 80010ce:	2312      	movs	r3, #18
 80010d0:	18fb      	adds	r3, r7, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	5e9b      	ldrsh	r3, [r3, r2]
 80010d6:	183a      	adds	r2, r7, r0
 80010d8:	2100      	movs	r1, #0
 80010da:	5e51      	ldrsh	r1, [r2, r1]
 80010dc:	003a      	movs	r2, r7
 80010de:	2400      	movs	r4, #0
 80010e0:	5f12      	ldrsh	r2, [r2, r4]
 80010e2:	1a8a      	subs	r2, r1, r2
 80010e4:	4353      	muls	r3, r2
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 80010e8:	2316      	movs	r3, #22
 80010ea:	18fb      	adds	r3, r7, r3
 80010ec:	2200      	movs	r2, #0
 80010ee:	5e9b      	ldrsh	r3, [r3, r2]
 80010f0:	183a      	adds	r2, r7, r0
 80010f2:	2100      	movs	r1, #0
 80010f4:	5e51      	ldrsh	r1, [r2, r1]
 80010f6:	1d3a      	adds	r2, r7, #4
 80010f8:	2000      	movs	r0, #0
 80010fa:	5e12      	ldrsh	r2, [r2, r0]
 80010fc:	1a8a      	subs	r2, r1, r2
 80010fe:	4353      	muls	r3, r2
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8001102:	e065      	b.n	80011d0 <fillTriangle+0x44a>
        a   = x1 + sa / dy12;
 8001104:	2310      	movs	r3, #16
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	2200      	movs	r2, #0
 800110a:	5e9b      	ldrsh	r3, [r3, r2]
 800110c:	0019      	movs	r1, r3
 800110e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001110:	f7ff f882 	bl	8000218 <__divsi3>
 8001114:	0003      	movs	r3, r0
 8001116:	b29a      	uxth	r2, r3
 8001118:	1cbb      	adds	r3, r7, #2
 800111a:	881b      	ldrh	r3, [r3, #0]
 800111c:	18d3      	adds	r3, r2, r3
 800111e:	b29a      	uxth	r2, r3
 8001120:	2436      	movs	r4, #54	; 0x36
 8001122:	193b      	adds	r3, r7, r4
 8001124:	801a      	strh	r2, [r3, #0]
        b   = x0 + sb / dy02;
 8001126:	2314      	movs	r3, #20
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	2200      	movs	r2, #0
 800112c:	5e9b      	ldrsh	r3, [r3, r2]
 800112e:	0019      	movs	r1, r3
 8001130:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001132:	f7ff f871 	bl	8000218 <__divsi3>
 8001136:	0003      	movs	r3, r0
 8001138:	b29a      	uxth	r2, r3
 800113a:	1dbb      	adds	r3, r7, #6
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	18d3      	adds	r3, r2, r3
 8001140:	b29a      	uxth	r2, r3
 8001142:	2134      	movs	r1, #52	; 0x34
 8001144:	187b      	adds	r3, r7, r1
 8001146:	801a      	strh	r2, [r3, #0]
        sa += dx12;
 8001148:	2312      	movs	r3, #18
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	2200      	movs	r2, #0
 800114e:	5e9b      	ldrsh	r3, [r3, r2]
 8001150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001152:	18d3      	adds	r3, r2, r3
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8001156:	2316      	movs	r3, #22
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	2200      	movs	r2, #0
 800115c:	5e9b      	ldrsh	r3, [r3, r2]
 800115e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8001164:	193a      	adds	r2, r7, r4
 8001166:	187b      	adds	r3, r7, r1
 8001168:	2000      	movs	r0, #0
 800116a:	5e12      	ldrsh	r2, [r2, r0]
 800116c:	2000      	movs	r0, #0
 800116e:	5e1b      	ldrsh	r3, [r3, r0]
 8001170:	429a      	cmp	r2, r3
 8001172:	dd0c      	ble.n	800118e <fillTriangle+0x408>
 8001174:	200e      	movs	r0, #14
 8001176:	183b      	adds	r3, r7, r0
 8001178:	193a      	adds	r2, r7, r4
 800117a:	8812      	ldrh	r2, [r2, #0]
 800117c:	801a      	strh	r2, [r3, #0]
 800117e:	193b      	adds	r3, r7, r4
 8001180:	187a      	adds	r2, r7, r1
 8001182:	8812      	ldrh	r2, [r2, #0]
 8001184:	801a      	strh	r2, [r3, #0]
 8001186:	187b      	adds	r3, r7, r1
 8001188:	183a      	adds	r2, r7, r0
 800118a:	8812      	ldrh	r2, [r2, #0]
 800118c:	801a      	strh	r2, [r3, #0]
        drawFastHLine(a, y, b-a+1, color);
 800118e:	2334      	movs	r3, #52	; 0x34
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	2036      	movs	r0, #54	; 0x36
 8001196:	183b      	adds	r3, r7, r0
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b29b      	uxth	r3, r3
 800119e:	3301      	adds	r3, #1
 80011a0:	b29b      	uxth	r3, r3
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	2350      	movs	r3, #80	; 0x50
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	881c      	ldrh	r4, [r3, #0]
 80011aa:	2532      	movs	r5, #50	; 0x32
 80011ac:	197b      	adds	r3, r7, r5
 80011ae:	2100      	movs	r1, #0
 80011b0:	5e59      	ldrsh	r1, [r3, r1]
 80011b2:	183b      	adds	r3, r7, r0
 80011b4:	2000      	movs	r0, #0
 80011b6:	5e18      	ldrsh	r0, [r3, r0]
 80011b8:	0023      	movs	r3, r4
 80011ba:	f7ff faa1 	bl	8000700 <drawFastHLine>
    for(; y<=y2; y++) {
 80011be:	0029      	movs	r1, r5
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2200      	movs	r2, #0
 80011c4:	5e9b      	ldrsh	r3, [r3, r2]
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	3301      	adds	r3, #1
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	801a      	strh	r2, [r3, #0]
 80011d0:	2332      	movs	r3, #50	; 0x32
 80011d2:	18fa      	adds	r2, r7, r3
 80011d4:	234c      	movs	r3, #76	; 0x4c
 80011d6:	18fb      	adds	r3, r7, r3
 80011d8:	2100      	movs	r1, #0
 80011da:	5e52      	ldrsh	r2, [r2, r1]
 80011dc:	2100      	movs	r1, #0
 80011de:	5e5b      	ldrsh	r3, [r3, r1]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	dd8f      	ble.n	8001104 <fillTriangle+0x37e>
    }
}
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b00e      	add	sp, #56	; 0x38
 80011e8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080011ec <fillScreen>:

void fillScreen(uint16_t color) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af02      	add	r7, sp, #8
 80011f2:	0002      	movs	r2, r0
 80011f4:	1dbb      	adds	r3, r7, #6
 80011f6:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <fillScreen+0x30>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	5e9a      	ldrsh	r2, [r3, r2]
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <fillScreen+0x34>)
 8001200:	2100      	movs	r1, #0
 8001202:	5e59      	ldrsh	r1, [r3, r1]
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	000b      	movs	r3, r1
 800120c:	2100      	movs	r1, #0
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff f90a 	bl	8000428 <fillRect>
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	b002      	add	sp, #8
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000038 	.word	0x20000038
 8001220:	2000003a 	.word	0x2000003a

08001224 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <ST7735_Select+0x18>)
 800122e:	2200      	movs	r2, #0
 8001230:	0019      	movs	r1, r3
 8001232:	f001 fcb9 	bl	8002ba8 <HAL_GPIO_WritePin>
}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	48000400 	.word	0x48000400

08001240 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <ST7735_Unselect+0x18>)
 800124a:	2201      	movs	r2, #1
 800124c:	0019      	movs	r1, r3
 800124e:	f001 fcab 	bl	8002ba8 <HAL_GPIO_WritePin>
}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	48000400 	.word	0x48000400

0800125c <ST7735_Reset>:

void ST7735_Reset()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <ST7735_Reset+0x28>)
 8001262:	2200      	movs	r2, #0
 8001264:	2104      	movs	r1, #4
 8001266:	0018      	movs	r0, r3
 8001268:	f001 fc9e 	bl	8002ba8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800126c:	2005      	movs	r0, #5
 800126e:	f001 f81d 	bl	80022ac <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <ST7735_Reset+0x28>)
 8001274:	2201      	movs	r2, #1
 8001276:	2104      	movs	r1, #4
 8001278:	0018      	movs	r0, r3
 800127a:	f001 fc95 	bl	8002ba8 <HAL_GPIO_WritePin>
}
 800127e:	46c0      	nop			; (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000400 	.word	0x48000400

08001288 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	0002      	movs	r2, r0
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_RESET);
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <ST7735_WriteCommand+0x30>)
 8001296:	2200      	movs	r2, #0
 8001298:	2102      	movs	r1, #2
 800129a:	0018      	movs	r0, r3
 800129c:	f001 fc84 	bl	8002ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80012a0:	2301      	movs	r3, #1
 80012a2:	425b      	negs	r3, r3
 80012a4:	1df9      	adds	r1, r7, #7
 80012a6:	4805      	ldr	r0, [pc, #20]	; (80012bc <ST7735_WriteCommand+0x34>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	f002 f997 	bl	80035dc <HAL_SPI_Transmit>
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	48000400 	.word	0x48000400
 80012bc:	20000084 	.word	0x20000084

080012c0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 80012ca:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <ST7735_WriteData+0x30>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	2102      	movs	r1, #2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f001 fc69 	bl	8002ba8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	b29a      	uxth	r2, r3
 80012da:	2301      	movs	r3, #1
 80012dc:	425b      	negs	r3, r3
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <ST7735_WriteData+0x34>)
 80012e2:	f002 f97b 	bl	80035dc <HAL_SPI_Transmit>
}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	46bd      	mov	sp, r7
 80012ea:	b002      	add	sp, #8
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	48000400 	.word	0x48000400
 80012f4:	20000084 	.word	0x20000084

080012f8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	220f      	movs	r2, #15
 8001308:	18ba      	adds	r2, r7, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 800130e:	e04a      	b.n	80013a6 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	210b      	movs	r1, #11
 8001318:	187a      	adds	r2, r7, r1
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 800131e:	187b      	adds	r3, r7, r1
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff ffb0 	bl	8001288 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1c5a      	adds	r2, r3, #1
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	200a      	movs	r0, #10
 8001330:	183a      	adds	r2, r7, r0
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001336:	183b      	adds	r3, r7, r0
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	b29a      	uxth	r2, r3
 800133c:	230c      	movs	r3, #12
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2180      	movs	r1, #128	; 0x80
 8001342:	400a      	ands	r2, r1
 8001344:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8001346:	183b      	adds	r3, r7, r0
 8001348:	183a      	adds	r2, r7, r0
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	217f      	movs	r1, #127	; 0x7f
 800134e:	400a      	ands	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8001352:	183b      	adds	r3, r7, r0
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00c      	beq.n	8001374 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800135a:	0004      	movs	r4, r0
 800135c:	183b      	adds	r3, r7, r0
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	0011      	movs	r1, r2
 8001364:	0018      	movs	r0, r3
 8001366:	f7ff ffab 	bl	80012c0 <ST7735_WriteData>
            addr += numArgs;
 800136a:	193b      	adds	r3, r7, r4
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001374:	210c      	movs	r1, #12
 8001376:	187b      	adds	r3, r7, r1
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d013      	beq.n	80013a6 <DisplayInit+0xae>
            ms = *addr++;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	187b      	adds	r3, r7, r1
 8001388:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 800138a:	187b      	adds	r3, r7, r1
 800138c:	881b      	ldrh	r3, [r3, #0]
 800138e:	2bff      	cmp	r3, #255	; 0xff
 8001390:	d103      	bne.n	800139a <DisplayInit+0xa2>
 8001392:	187b      	adds	r3, r7, r1
 8001394:	22fa      	movs	r2, #250	; 0xfa
 8001396:	0052      	lsls	r2, r2, #1
 8001398:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 800139a:	230c      	movs	r3, #12
 800139c:	18fb      	adds	r3, r7, r3
 800139e:	881b      	ldrh	r3, [r3, #0]
 80013a0:	0018      	movs	r0, r3
 80013a2:	f000 ff83 	bl	80022ac <HAL_Delay>
    while(numCommands--) {
 80013a6:	220f      	movs	r2, #15
 80013a8:	18bb      	adds	r3, r7, r2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	18ba      	adds	r2, r7, r2
 80013ae:	1e59      	subs	r1, r3, #1
 80013b0:	7011      	strb	r1, [r2, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1ac      	bne.n	8001310 <DisplayInit+0x18>
        }
    }
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b005      	add	sp, #20
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80013c0:	b5b0      	push	{r4, r5, r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	0005      	movs	r5, r0
 80013c8:	000c      	movs	r4, r1
 80013ca:	0010      	movs	r0, r2
 80013cc:	0019      	movs	r1, r3
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	1c2a      	adds	r2, r5, #0
 80013d2:	701a      	strb	r2, [r3, #0]
 80013d4:	1dbb      	adds	r3, r7, #6
 80013d6:	1c22      	adds	r2, r4, #0
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	1d7b      	adds	r3, r7, #5
 80013dc:	1c02      	adds	r2, r0, #0
 80013de:	701a      	strb	r2, [r3, #0]
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	1c0a      	adds	r2, r1, #0
 80013e4:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80013e6:	202a      	movs	r0, #42	; 0x2a
 80013e8:	f7ff ff4e 	bl	8001288 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80013ec:	210c      	movs	r1, #12
 80013ee:	187b      	adds	r3, r7, r1
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <ST7735_SetAddressWindow+0xa8>)
 80013f6:	781a      	ldrb	r2, [r3, #0]
 80013f8:	1dfb      	adds	r3, r7, #7
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	18d3      	adds	r3, r2, r3
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	187b      	adds	r3, r7, r1
 8001402:	705a      	strb	r2, [r3, #1]
 8001404:	187b      	adds	r3, r7, r1
 8001406:	2200      	movs	r2, #0
 8001408:	709a      	strb	r2, [r3, #2]
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <ST7735_SetAddressWindow+0xa8>)
 800140c:	781a      	ldrb	r2, [r3, #0]
 800140e:	1d7b      	adds	r3, r7, #5
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	18d3      	adds	r3, r2, r3
 8001414:	b2da      	uxtb	r2, r3
 8001416:	187b      	adds	r3, r7, r1
 8001418:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800141a:	000c      	movs	r4, r1
 800141c:	187b      	adds	r3, r7, r1
 800141e:	2104      	movs	r1, #4
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff ff4d 	bl	80012c0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001426:	202b      	movs	r0, #43	; 0x2b
 8001428:	f7ff ff2e 	bl	8001288 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <ST7735_SetAddressWindow+0xac>)
 800142e:	781a      	ldrb	r2, [r3, #0]
 8001430:	1dbb      	adds	r3, r7, #6
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	18d3      	adds	r3, r2, r3
 8001436:	b2da      	uxtb	r2, r3
 8001438:	0021      	movs	r1, r4
 800143a:	187b      	adds	r3, r7, r1
 800143c:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <ST7735_SetAddressWindow+0xac>)
 8001440:	781a      	ldrb	r2, [r3, #0]
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	18d3      	adds	r3, r2, r3
 8001448:	b2da      	uxtb	r2, r3
 800144a:	187b      	adds	r3, r7, r1
 800144c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 800144e:	187b      	adds	r3, r7, r1
 8001450:	2104      	movs	r1, #4
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff ff34 	bl	80012c0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001458:	202c      	movs	r0, #44	; 0x2c
 800145a:	f7ff ff15 	bl	8001288 <ST7735_WriteCommand>
}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	b004      	add	sp, #16
 8001464:	bdb0      	pop	{r4, r5, r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	2000003f 	.word	0x2000003f
 800146c:	20000040 	.word	0x20000040

08001470 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	0002      	movs	r2, r0
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 800147c:	f7ff fed2 	bl	8001224 <ST7735_Select>
    ST7735_Reset();
 8001480:	f7ff feec 	bl	800125c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <ST7735_Init+0x50>)
 8001486:	0018      	movs	r0, r3
 8001488:	f7ff ff36 	bl	80012f8 <DisplayInit>
    DisplayInit(init_cmds2);
 800148c:	4b0d      	ldr	r3, [pc, #52]	; (80014c4 <ST7735_Init+0x54>)
 800148e:	0018      	movs	r0, r3
 8001490:	f7ff ff32 	bl	80012f8 <DisplayInit>
    DisplayInit(init_cmds3);
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <ST7735_Init+0x58>)
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff ff2e 	bl	80012f8 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800149c:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <ST7735_Init+0x5c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <ST7735_Init+0x60>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 80014a8:	1dfb      	adds	r3, r7, #7
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	0018      	movs	r0, r3
 80014ae:	f000 f811 	bl	80014d4 <ST7735_SetRotation>
    ST7735_Unselect();
 80014b2:	f7ff fec5 	bl	8001240 <ST7735_Unselect>

}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	08003c54 	.word	0x08003c54
 80014c4:	08003c8c 	.word	0x08003c8c
 80014c8:	08003c9c 	.word	0x08003c9c
 80014cc:	2000003d 	.word	0x2000003d
 80014d0:	2000003e 	.word	0x2000003e

080014d4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	0002      	movs	r2, r0
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 80014e0:	230f      	movs	r3, #15
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 80014e8:	1dfb      	adds	r3, r7, #7
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2203      	movs	r2, #3
 80014ee:	4013      	ands	r3, r2
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b36      	ldr	r3, [pc, #216]	; (80015cc <ST7735_SetRotation+0xf8>)
 80014f4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80014f6:	4b35      	ldr	r3, [pc, #212]	; (80015cc <ST7735_SetRotation+0xf8>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d041      	beq.n	8001582 <ST7735_SetRotation+0xae>
 80014fe:	dc53      	bgt.n	80015a8 <ST7735_SetRotation+0xd4>
 8001500:	2b02      	cmp	r3, #2
 8001502:	d02b      	beq.n	800155c <ST7735_SetRotation+0x88>
 8001504:	dc50      	bgt.n	80015a8 <ST7735_SetRotation+0xd4>
 8001506:	2b00      	cmp	r3, #0
 8001508:	d002      	beq.n	8001510 <ST7735_SetRotation+0x3c>
 800150a:	2b01      	cmp	r3, #1
 800150c:	d013      	beq.n	8001536 <ST7735_SetRotation+0x62>
 800150e:	e04b      	b.n	80015a8 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8001510:	230f      	movs	r3, #15
 8001512:	18fb      	adds	r3, r7, r3
 8001514:	22c0      	movs	r2, #192	; 0xc0
 8001516:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001518:	4b2d      	ldr	r3, [pc, #180]	; (80015d0 <ST7735_SetRotation+0xfc>)
 800151a:	22a0      	movs	r2, #160	; 0xa0
 800151c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800151e:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <ST7735_SetRotation+0x100>)
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8001524:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <ST7735_SetRotation+0x104>)
 8001526:	781a      	ldrb	r2, [r3, #0]
 8001528:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <ST7735_SetRotation+0x108>)
 800152a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 800152c:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <ST7735_SetRotation+0x10c>)
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	4b2c      	ldr	r3, [pc, #176]	; (80015e4 <ST7735_SetRotation+0x110>)
 8001532:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001534:	e038      	b.n	80015a8 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001536:	230f      	movs	r3, #15
 8001538:	18fb      	adds	r3, r7, r3
 800153a:	22a0      	movs	r2, #160	; 0xa0
 800153c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <ST7735_SetRotation+0x100>)
 8001540:	22a0      	movs	r2, #160	; 0xa0
 8001542:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <ST7735_SetRotation+0xfc>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <ST7735_SetRotation+0x104>)
 800154c:	781a      	ldrb	r2, [r3, #0]
 800154e:	4b25      	ldr	r3, [pc, #148]	; (80015e4 <ST7735_SetRotation+0x110>)
 8001550:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8001552:	4b23      	ldr	r3, [pc, #140]	; (80015e0 <ST7735_SetRotation+0x10c>)
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <ST7735_SetRotation+0x108>)
 8001558:	701a      	strb	r2, [r3, #0]
#endif
    break;
 800155a:	e025      	b.n	80015a8 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 800155c:	230f      	movs	r3, #15
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	2200      	movs	r2, #0
 8001562:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8001564:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <ST7735_SetRotation+0xfc>)
 8001566:	22a0      	movs	r2, #160	; 0xa0
 8001568:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800156a:	4b1a      	ldr	r3, [pc, #104]	; (80015d4 <ST7735_SetRotation+0x100>)
 800156c:	2280      	movs	r2, #128	; 0x80
 800156e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <ST7735_SetRotation+0x104>)
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	4b19      	ldr	r3, [pc, #100]	; (80015dc <ST7735_SetRotation+0x108>)
 8001576:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001578:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <ST7735_SetRotation+0x10c>)
 800157a:	781a      	ldrb	r2, [r3, #0]
 800157c:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <ST7735_SetRotation+0x110>)
 800157e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001580:	e012      	b.n	80015a8 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001582:	230f      	movs	r3, #15
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	2260      	movs	r2, #96	; 0x60
 8001588:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <ST7735_SetRotation+0x100>)
 800158c:	22a0      	movs	r2, #160	; 0xa0
 800158e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <ST7735_SetRotation+0xfc>)
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <ST7735_SetRotation+0x104>)
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <ST7735_SetRotation+0x110>)
 800159c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <ST7735_SetRotation+0x10c>)
 80015a0:	781a      	ldrb	r2, [r3, #0]
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <ST7735_SetRotation+0x108>)
 80015a4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80015a6:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 80015a8:	f7ff fe3c 	bl	8001224 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 80015ac:	2036      	movs	r0, #54	; 0x36
 80015ae:	f7ff fe6b 	bl	8001288 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 80015b2:	230f      	movs	r3, #15
 80015b4:	18fb      	adds	r3, r7, r3
 80015b6:	2101      	movs	r1, #1
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff fe81 	bl	80012c0 <ST7735_WriteData>
  ST7735_Unselect();
 80015be:	f7ff fe3f 	bl	8001240 <ST7735_Unselect>
}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	46bd      	mov	sp, r7
 80015c6:	b004      	add	sp, #16
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	2000003c 	.word	0x2000003c
 80015d0:	2000003a 	.word	0x2000003a
 80015d4:	20000038 	.word	0x20000038
 80015d8:	2000003d 	.word	0x2000003d
 80015dc:	2000003f 	.word	0x2000003f
 80015e0:	2000003e 	.word	0x2000003e
 80015e4:	20000040 	.word	0x20000040

080015e8 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80015e8:	b590      	push	{r4, r7, lr}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	0004      	movs	r4, r0
 80015f0:	0008      	movs	r0, r1
 80015f2:	0011      	movs	r1, r2
 80015f4:	1dbb      	adds	r3, r7, #6
 80015f6:	1c22      	adds	r2, r4, #0
 80015f8:	801a      	strh	r2, [r3, #0]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	1c02      	adds	r2, r0, #0
 80015fe:	801a      	strh	r2, [r3, #0]
 8001600:	1cbb      	adds	r3, r7, #2
 8001602:	1c0a      	adds	r2, r1, #0
 8001604:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8001606:	1dbb      	adds	r3, r7, #6
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <ST7735_DrawPixel+0x94>)
 800160c:	2100      	movs	r1, #0
 800160e:	5e52      	ldrsh	r2, [r2, r1]
 8001610:	4293      	cmp	r3, r2
 8001612:	da2f      	bge.n	8001674 <ST7735_DrawPixel+0x8c>
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <ST7735_DrawPixel+0x98>)
 800161a:	2100      	movs	r1, #0
 800161c:	5e52      	ldrsh	r2, [r2, r1]
 800161e:	4293      	cmp	r3, r2
 8001620:	da28      	bge.n	8001674 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8001622:	f7ff fdff 	bl	8001224 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8001626:	1dbb      	adds	r3, r7, #6
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	b2d8      	uxtb	r0, r3
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	b2d9      	uxtb	r1, r3
 8001632:	1dbb      	adds	r3, r7, #6
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	3301      	adds	r3, #1
 800163a:	b2da      	uxtb	r2, r3
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	881b      	ldrh	r3, [r3, #0]
 8001640:	b2db      	uxtb	r3, r3
 8001642:	3301      	adds	r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	f7ff febb 	bl	80013c0 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800164a:	1cbb      	adds	r3, r7, #2
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29b      	uxth	r3, r3
 8001652:	b2da      	uxtb	r2, r3
 8001654:	210c      	movs	r1, #12
 8001656:	187b      	adds	r3, r7, r1
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	1cbb      	adds	r3, r7, #2
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	187b      	adds	r3, r7, r1
 8001662:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8001664:	187b      	adds	r3, r7, r1
 8001666:	2102      	movs	r1, #2
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff fe29 	bl	80012c0 <ST7735_WriteData>

    ST7735_Unselect();
 800166e:	f7ff fde7 	bl	8001240 <ST7735_Unselect>
 8001672:	e000      	b.n	8001676 <ST7735_DrawPixel+0x8e>
        return;
 8001674:	46c0      	nop			; (mov r8, r8)
}
 8001676:	46bd      	mov	sp, r7
 8001678:	b005      	add	sp, #20
 800167a:	bd90      	pop	{r4, r7, pc}
 800167c:	20000038 	.word	0x20000038
 8001680:	2000003a 	.word	0x2000003a

08001684 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001684:	b082      	sub	sp, #8
 8001686:	b5b0      	push	{r4, r5, r7, lr}
 8001688:	b088      	sub	sp, #32
 800168a:	af00      	add	r7, sp, #0
 800168c:	0004      	movs	r4, r0
 800168e:	0008      	movs	r0, r1
 8001690:	0011      	movs	r1, r2
 8001692:	2204      	movs	r2, #4
 8001694:	2530      	movs	r5, #48	; 0x30
 8001696:	1952      	adds	r2, r2, r5
 8001698:	19d2      	adds	r2, r2, r7
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	1dbb      	adds	r3, r7, #6
 800169e:	1c22      	adds	r2, r4, #0
 80016a0:	801a      	strh	r2, [r3, #0]
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	1c02      	adds	r2, r0, #0
 80016a6:	801a      	strh	r2, [r3, #0]
 80016a8:	1cfb      	adds	r3, r7, #3
 80016aa:	1c0a      	adds	r2, r1, #0
 80016ac:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80016ae:	1dbb      	adds	r3, r7, #6
 80016b0:	881b      	ldrh	r3, [r3, #0]
 80016b2:	b2d8      	uxtb	r0, r3
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b2d9      	uxtb	r1, r3
 80016ba:	1dbb      	adds	r3, r7, #6
 80016bc:	881b      	ldrh	r3, [r3, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	2304      	movs	r3, #4
 80016c2:	195b      	adds	r3, r3, r5
 80016c4:	19db      	adds	r3, r3, r7
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	18d3      	adds	r3, r2, r3
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b2dc      	uxtb	r4, r3
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	2304      	movs	r3, #4
 80016d8:	195b      	adds	r3, r3, r5
 80016da:	19db      	adds	r3, r3, r7
 80016dc:	785b      	ldrb	r3, [r3, #1]
 80016de:	18d3      	adds	r3, r2, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	0022      	movs	r2, r4
 80016e8:	f7ff fe6a 	bl	80013c0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	e053      	b.n	800179a <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 80016f2:	2304      	movs	r3, #4
 80016f4:	2030      	movs	r0, #48	; 0x30
 80016f6:	181b      	adds	r3, r3, r0
 80016f8:	19db      	adds	r3, r3, r7
 80016fa:	685a      	ldr	r2, [r3, #4]
 80016fc:	1cfb      	adds	r3, r7, #3
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	3b20      	subs	r3, #32
 8001702:	2104      	movs	r1, #4
 8001704:	1809      	adds	r1, r1, r0
 8001706:	19c9      	adds	r1, r1, r7
 8001708:	7849      	ldrb	r1, [r1, #1]
 800170a:	434b      	muls	r3, r1
 800170c:	0019      	movs	r1, r3
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	18cb      	adds	r3, r1, r3
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	18d3      	adds	r3, r2, r3
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	e030      	b.n	8001782 <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	409a      	lsls	r2, r3
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	4013      	ands	r3, r2
 800172c:	d013      	beq.n	8001756 <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800172e:	203c      	movs	r0, #60	; 0x3c
 8001730:	183b      	adds	r3, r7, r0
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	b29b      	uxth	r3, r3
 8001738:	b2da      	uxtb	r2, r3
 800173a:	2110      	movs	r1, #16
 800173c:	187b      	adds	r3, r7, r1
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	183b      	adds	r3, r7, r0
 8001742:	881b      	ldrh	r3, [r3, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	187b      	adds	r3, r7, r1
 8001748:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 800174a:	187b      	adds	r3, r7, r1
 800174c:	2102      	movs	r1, #2
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff fdb6 	bl	80012c0 <ST7735_WriteData>
 8001754:	e012      	b.n	800177c <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001756:	2040      	movs	r0, #64	; 0x40
 8001758:	183b      	adds	r3, r7, r0
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	0a1b      	lsrs	r3, r3, #8
 800175e:	b29b      	uxth	r3, r3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	210c      	movs	r1, #12
 8001764:	187b      	adds	r3, r7, r1
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	183b      	adds	r3, r7, r0
 800176a:	881b      	ldrh	r3, [r3, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	187b      	adds	r3, r7, r1
 8001770:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8001772:	187b      	adds	r3, r7, r1
 8001774:	2102      	movs	r1, #2
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff fda2 	bl	80012c0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	3301      	adds	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	2304      	movs	r3, #4
 8001784:	2230      	movs	r2, #48	; 0x30
 8001786:	189b      	adds	r3, r3, r2
 8001788:	19db      	adds	r3, r3, r7
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	001a      	movs	r2, r3
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	4293      	cmp	r3, r2
 8001792:	d3c5      	bcc.n	8001720 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3301      	adds	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	2304      	movs	r3, #4
 800179c:	2230      	movs	r2, #48	; 0x30
 800179e:	189b      	adds	r3, r3, r2
 80017a0:	19db      	adds	r3, r3, r7
 80017a2:	785b      	ldrb	r3, [r3, #1]
 80017a4:	001a      	movs	r2, r3
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d3a2      	bcc.n	80016f2 <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	b008      	add	sp, #32
 80017b4:	bcb0      	pop	{r4, r5, r7}
 80017b6:	bc08      	pop	{r3}
 80017b8:	b002      	add	sp, #8
 80017ba:	4718      	bx	r3

080017bc <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80017bc:	b082      	sub	sp, #8
 80017be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c0:	b087      	sub	sp, #28
 80017c2:	af04      	add	r7, sp, #16
 80017c4:	603a      	str	r2, [r7, #0]
 80017c6:	2204      	movs	r2, #4
 80017c8:	2418      	movs	r4, #24
 80017ca:	1912      	adds	r2, r2, r4
 80017cc:	2408      	movs	r4, #8
 80017ce:	46a4      	mov	ip, r4
 80017d0:	44bc      	add	ip, r7
 80017d2:	4462      	add	r2, ip
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	1dbb      	adds	r3, r7, #6
 80017d8:	1c02      	adds	r2, r0, #0
 80017da:	801a      	strh	r2, [r3, #0]
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	1c0a      	adds	r2, r1, #0
 80017e0:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 80017e2:	f7ff fd1f 	bl	8001224 <ST7735_Select>

    while(*str) {
 80017e6:	e067      	b.n	80018b8 <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 80017e8:	1dbb      	adds	r3, r7, #6
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	2204      	movs	r2, #4
 80017ee:	2118      	movs	r1, #24
 80017f0:	1852      	adds	r2, r2, r1
 80017f2:	2008      	movs	r0, #8
 80017f4:	4684      	mov	ip, r0
 80017f6:	44bc      	add	ip, r7
 80017f8:	4462      	add	r2, ip
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	189b      	adds	r3, r3, r2
 80017fe:	4a36      	ldr	r2, [pc, #216]	; (80018d8 <ST7735_WriteString+0x11c>)
 8001800:	2000      	movs	r0, #0
 8001802:	5e12      	ldrsh	r2, [r2, r0]
 8001804:	4293      	cmp	r3, r2
 8001806:	db27      	blt.n	8001858 <ST7735_WriteString+0x9c>
            x = 0;
 8001808:	1dbb      	adds	r3, r7, #6
 800180a:	2200      	movs	r2, #0
 800180c:	801a      	strh	r2, [r3, #0]
            y += font.height;
 800180e:	2304      	movs	r3, #4
 8001810:	0008      	movs	r0, r1
 8001812:	185b      	adds	r3, r3, r1
 8001814:	2208      	movs	r2, #8
 8001816:	4694      	mov	ip, r2
 8001818:	44bc      	add	ip, r7
 800181a:	4463      	add	r3, ip
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	b299      	uxth	r1, r3
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	1d3a      	adds	r2, r7, #4
 8001824:	8812      	ldrh	r2, [r2, #0]
 8001826:	188a      	adds	r2, r1, r2
 8001828:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	881b      	ldrh	r3, [r3, #0]
 800182e:	2204      	movs	r2, #4
 8001830:	1812      	adds	r2, r2, r0
 8001832:	2108      	movs	r1, #8
 8001834:	468c      	mov	ip, r1
 8001836:	44bc      	add	ip, r7
 8001838:	4462      	add	r2, ip
 800183a:	7852      	ldrb	r2, [r2, #1]
 800183c:	189b      	adds	r3, r3, r2
 800183e:	4a27      	ldr	r2, [pc, #156]	; (80018dc <ST7735_WriteString+0x120>)
 8001840:	2100      	movs	r1, #0
 8001842:	5e52      	ldrsh	r2, [r2, r1]
 8001844:	4293      	cmp	r3, r2
 8001846:	da3c      	bge.n	80018c2 <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b20      	cmp	r3, #32
 800184e:	d103      	bne.n	8001858 <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	603b      	str	r3, [r7, #0]
                continue;
 8001856:	e02f      	b.n	80018b8 <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	781d      	ldrb	r5, [r3, #0]
 800185c:	2304      	movs	r3, #4
 800185e:	2618      	movs	r6, #24
 8001860:	199b      	adds	r3, r3, r6
 8001862:	2208      	movs	r2, #8
 8001864:	4694      	mov	ip, r2
 8001866:	44bc      	add	ip, r7
 8001868:	4463      	add	r3, ip
 800186a:	1d3a      	adds	r2, r7, #4
 800186c:	8814      	ldrh	r4, [r2, #0]
 800186e:	1dba      	adds	r2, r7, #6
 8001870:	8810      	ldrh	r0, [r2, #0]
 8001872:	2228      	movs	r2, #40	; 0x28
 8001874:	2108      	movs	r1, #8
 8001876:	1852      	adds	r2, r2, r1
 8001878:	19d2      	adds	r2, r2, r7
 800187a:	8812      	ldrh	r2, [r2, #0]
 800187c:	9202      	str	r2, [sp, #8]
 800187e:	2224      	movs	r2, #36	; 0x24
 8001880:	1852      	adds	r2, r2, r1
 8001882:	19d2      	adds	r2, r2, r7
 8001884:	8812      	ldrh	r2, [r2, #0]
 8001886:	9201      	str	r2, [sp, #4]
 8001888:	466a      	mov	r2, sp
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	6011      	str	r1, [r2, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	002a      	movs	r2, r5
 8001892:	0021      	movs	r1, r4
 8001894:	f7ff fef6 	bl	8001684 <ST7735_WriteChar>
        x += font.width;
 8001898:	2304      	movs	r3, #4
 800189a:	199b      	adds	r3, r3, r6
 800189c:	2208      	movs	r2, #8
 800189e:	4694      	mov	ip, r2
 80018a0:	44bc      	add	ip, r7
 80018a2:	4463      	add	r3, ip
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	b299      	uxth	r1, r3
 80018a8:	1dbb      	adds	r3, r7, #6
 80018aa:	1dba      	adds	r2, r7, #6
 80018ac:	8812      	ldrh	r2, [r2, #0]
 80018ae:	188a      	adds	r2, r1, r2
 80018b0:	801a      	strh	r2, [r3, #0]
        str++;
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d193      	bne.n	80017e8 <ST7735_WriteString+0x2c>
 80018c0:	e000      	b.n	80018c4 <ST7735_WriteString+0x108>
                break;
 80018c2:	46c0      	nop			; (mov r8, r8)
    }

    ST7735_Unselect();
 80018c4:	f7ff fcbc 	bl	8001240 <ST7735_Unselect>
}
 80018c8:	46c0      	nop			; (mov r8, r8)
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b003      	add	sp, #12
 80018ce:	bcf0      	pop	{r4, r5, r6, r7}
 80018d0:	bc08      	pop	{r3}
 80018d2:	b002      	add	sp, #8
 80018d4:	4718      	bx	r3
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	20000038 	.word	0x20000038
 80018dc:	2000003a 	.word	0x2000003a

080018e0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	0005      	movs	r5, r0
 80018e8:	000c      	movs	r4, r1
 80018ea:	0010      	movs	r0, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	1dbb      	adds	r3, r7, #6
 80018f0:	1c2a      	adds	r2, r5, #0
 80018f2:	801a      	strh	r2, [r3, #0]
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	1c22      	adds	r2, r4, #0
 80018f8:	801a      	strh	r2, [r3, #0]
 80018fa:	1cbb      	adds	r3, r7, #2
 80018fc:	1c02      	adds	r2, r0, #0
 80018fe:	801a      	strh	r2, [r3, #0]
 8001900:	003b      	movs	r3, r7
 8001902:	1c0a      	adds	r2, r1, #0
 8001904:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8001906:	1dbb      	adds	r3, r7, #6
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	4a49      	ldr	r2, [pc, #292]	; (8001a30 <ST7735_FillRectangle+0x150>)
 800190c:	2100      	movs	r1, #0
 800190e:	5e52      	ldrsh	r2, [r2, r1]
 8001910:	4293      	cmp	r3, r2
 8001912:	db00      	blt.n	8001916 <ST7735_FillRectangle+0x36>
 8001914:	e087      	b.n	8001a26 <ST7735_FillRectangle+0x146>
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	4a46      	ldr	r2, [pc, #280]	; (8001a34 <ST7735_FillRectangle+0x154>)
 800191c:	2100      	movs	r1, #0
 800191e:	5e52      	ldrsh	r2, [r2, r1]
 8001920:	4293      	cmp	r3, r2
 8001922:	db00      	blt.n	8001926 <ST7735_FillRectangle+0x46>
 8001924:	e07f      	b.n	8001a26 <ST7735_FillRectangle+0x146>
    if((x + w - 1) >= _width) w = _width - x;
 8001926:	1dbb      	adds	r3, r7, #6
 8001928:	881a      	ldrh	r2, [r3, #0]
 800192a:	1cbb      	adds	r3, r7, #2
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	18d3      	adds	r3, r2, r3
 8001930:	4a3f      	ldr	r2, [pc, #252]	; (8001a30 <ST7735_FillRectangle+0x150>)
 8001932:	2100      	movs	r1, #0
 8001934:	5e52      	ldrsh	r2, [r2, r1]
 8001936:	4293      	cmp	r3, r2
 8001938:	dd08      	ble.n	800194c <ST7735_FillRectangle+0x6c>
 800193a:	4b3d      	ldr	r3, [pc, #244]	; (8001a30 <ST7735_FillRectangle+0x150>)
 800193c:	2200      	movs	r2, #0
 800193e:	5e9b      	ldrsh	r3, [r3, r2]
 8001940:	b299      	uxth	r1, r3
 8001942:	1cbb      	adds	r3, r7, #2
 8001944:	1dba      	adds	r2, r7, #6
 8001946:	8812      	ldrh	r2, [r2, #0]
 8001948:	1a8a      	subs	r2, r1, r2
 800194a:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	881a      	ldrh	r2, [r3, #0]
 8001950:	003b      	movs	r3, r7
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	18d3      	adds	r3, r2, r3
 8001956:	4a37      	ldr	r2, [pc, #220]	; (8001a34 <ST7735_FillRectangle+0x154>)
 8001958:	2100      	movs	r1, #0
 800195a:	5e52      	ldrsh	r2, [r2, r1]
 800195c:	4293      	cmp	r3, r2
 800195e:	dd08      	ble.n	8001972 <ST7735_FillRectangle+0x92>
 8001960:	4b34      	ldr	r3, [pc, #208]	; (8001a34 <ST7735_FillRectangle+0x154>)
 8001962:	2200      	movs	r2, #0
 8001964:	5e9b      	ldrsh	r3, [r3, r2]
 8001966:	b299      	uxth	r1, r3
 8001968:	003b      	movs	r3, r7
 800196a:	1d3a      	adds	r2, r7, #4
 800196c:	8812      	ldrh	r2, [r2, #0]
 800196e:	1a8a      	subs	r2, r1, r2
 8001970:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8001972:	f7ff fc57 	bl	8001224 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001976:	1dbb      	adds	r3, r7, #6
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	b2d8      	uxtb	r0, r3
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	b2d9      	uxtb	r1, r3
 8001982:	1dbb      	adds	r3, r7, #6
 8001984:	881b      	ldrh	r3, [r3, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	1cbb      	adds	r3, r7, #2
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	18d3      	adds	r3, r2, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b2dc      	uxtb	r4, r3
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	003b      	movs	r3, r7
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	18d3      	adds	r3, r2, r3
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	0022      	movs	r2, r4
 80019ac:	f7ff fd08 	bl	80013c0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80019b0:	2120      	movs	r1, #32
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	200c      	movs	r0, #12
 80019be:	183b      	adds	r3, r7, r0
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	187b      	adds	r3, r7, r1
 80019c4:	881b      	ldrh	r3, [r3, #0]
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	183b      	adds	r3, r7, r0
 80019ca:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <ST7735_FillRectangle+0x158>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	2102      	movs	r1, #2
 80019d2:	0018      	movs	r0, r3
 80019d4:	f001 f8e8 	bl	8002ba8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80019d8:	1d3b      	adds	r3, r7, #4
 80019da:	003a      	movs	r2, r7
 80019dc:	8812      	ldrh	r2, [r2, #0]
 80019de:	801a      	strh	r2, [r3, #0]
 80019e0:	e01a      	b.n	8001a18 <ST7735_FillRectangle+0x138>
        for(x = w; x > 0; x--) {
 80019e2:	1dbb      	adds	r3, r7, #6
 80019e4:	1cba      	adds	r2, r7, #2
 80019e6:	8812      	ldrh	r2, [r2, #0]
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	e00c      	b.n	8001a06 <ST7735_FillRectangle+0x126>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80019ec:	2301      	movs	r3, #1
 80019ee:	425b      	negs	r3, r3
 80019f0:	220c      	movs	r2, #12
 80019f2:	18b9      	adds	r1, r7, r2
 80019f4:	4811      	ldr	r0, [pc, #68]	; (8001a3c <ST7735_FillRectangle+0x15c>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	f001 fdf0 	bl	80035dc <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80019fc:	1dbb      	adds	r3, r7, #6
 80019fe:	881a      	ldrh	r2, [r3, #0]
 8001a00:	1dbb      	adds	r3, r7, #6
 8001a02:	3a01      	subs	r2, #1
 8001a04:	801a      	strh	r2, [r3, #0]
 8001a06:	1dbb      	adds	r3, r7, #6
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ee      	bne.n	80019ec <ST7735_FillRectangle+0x10c>
    for(y = h; y > 0; y--) {
 8001a0e:	1d3b      	adds	r3, r7, #4
 8001a10:	881a      	ldrh	r2, [r3, #0]
 8001a12:	1d3b      	adds	r3, r7, #4
 8001a14:	3a01      	subs	r2, #1
 8001a16:	801a      	strh	r2, [r3, #0]
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e0      	bne.n	80019e2 <ST7735_FillRectangle+0x102>
        }
    }

    ST7735_Unselect();
 8001a20:	f7ff fc0e 	bl	8001240 <ST7735_Unselect>
 8001a24:	e000      	b.n	8001a28 <ST7735_FillRectangle+0x148>
    if((x >= _width) || (y >= _height)) return;
 8001a26:	46c0      	nop			; (mov r8, r8)
}
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b004      	add	sp, #16
 8001a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	20000038 	.word	0x20000038
 8001a34:	2000003a 	.word	0x2000003a
 8001a38:	48000400 	.word	0x48000400
 8001a3c:	20000084 	.word	0x20000084

08001a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a44:	f000 fbce 	bl	80021e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a48:	f000 f816 	bl	8001a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a4c:	f000 f900 	bl	8001c50 <MX_GPIO_Init>
  MX_ADC_Init();
 8001a50:	f000 f864 	bl	8001b1c <MX_ADC_Init>
  MX_SPI1_Init();
 8001a54:	f000 f8be 	bl	8001bd4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ST7735_Init(0);
 8001a58:	2000      	movs	r0, #0
 8001a5a:	f7ff fd09 	bl	8001470 <ST7735_Init>
  fillScreen(BLACK);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fbc4 	bl	80011ec <fillScreen>
  HAL_Delay(500);
 8001a64:	23fa      	movs	r3, #250	; 0xfa
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f000 fc1f 	bl	80022ac <HAL_Delay>

  st7735_hallScreen();
 8001a6e:	f000 f997 	bl	8001da0 <st7735_hallScreen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	pHMeter_process();
 8001a72:	f000 f98a 	bl	8001d8a <pHMeter_process>
 8001a76:	e7fc      	b.n	8001a72 <main+0x32>

08001a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b091      	sub	sp, #68	; 0x44
 8001a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7e:	2410      	movs	r4, #16
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	0018      	movs	r0, r3
 8001a84:	2330      	movs	r3, #48	; 0x30
 8001a86:	001a      	movs	r2, r3
 8001a88:	2100      	movs	r1, #0
 8001a8a:	f002 f87d 	bl	8003b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a8e:	003b      	movs	r3, r7
 8001a90:	0018      	movs	r0, r3
 8001a92:	2310      	movs	r3, #16
 8001a94:	001a      	movs	r2, r3
 8001a96:	2100      	movs	r1, #0
 8001a98:	f002 f876 	bl	8003b88 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8001a9c:	0021      	movs	r1, r4
 8001a9e:	187b      	adds	r3, r7, r1
 8001aa0:	2212      	movs	r2, #18
 8001aa2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa4:	187b      	adds	r3, r7, r1
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001aaa:	187b      	adds	r3, r7, r1
 8001aac:	2201      	movs	r2, #1
 8001aae:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ab0:	187b      	adds	r3, r7, r1
 8001ab2:	2210      	movs	r2, #16
 8001ab4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	2210      	movs	r2, #16
 8001aba:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2202      	movs	r2, #2
 8001ac0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac2:	187b      	adds	r3, r7, r1
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	0212      	lsls	r2, r2, #8
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	22c0      	movs	r2, #192	; 0xc0
 8001ace:	0312      	lsls	r2, r2, #12
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001ad2:	187b      	adds	r3, r7, r1
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	0018      	movs	r0, r3
 8001adc:	f001 f882 	bl	8002be4 <HAL_RCC_OscConfig>
 8001ae0:	1e03      	subs	r3, r0, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001ae4:	f000 f94c 	bl	8001d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae8:	003b      	movs	r3, r7
 8001aea:	2207      	movs	r2, #7
 8001aec:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aee:	003b      	movs	r3, r7
 8001af0:	2202      	movs	r2, #2
 8001af2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001af4:	003b      	movs	r3, r7
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001afa:	003b      	movs	r3, r7
 8001afc:	2200      	movs	r2, #0
 8001afe:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b00:	003b      	movs	r3, r7
 8001b02:	2101      	movs	r1, #1
 8001b04:	0018      	movs	r0, r3
 8001b06:	f001 fb8b 	bl	8003220 <HAL_RCC_ClockConfig>
 8001b0a:	1e03      	subs	r3, r0, #0
 8001b0c:	d001      	beq.n	8001b12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001b0e:	f000 f937 	bl	8001d80 <Error_Handler>
  }
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b011      	add	sp, #68	; 0x44
 8001b18:	bd90      	pop	{r4, r7, pc}
	...

08001b1c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	0018      	movs	r0, r3
 8001b26:	230c      	movs	r3, #12
 8001b28:	001a      	movs	r2, r3
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f002 f82c 	bl	8003b88 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001b30:	4b26      	ldr	r3, [pc, #152]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b32:	4a27      	ldr	r2, [pc, #156]	; (8001bd0 <MX_ADC_Init+0xb4>)
 8001b34:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001b36:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001b3c:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001b48:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b50:	2204      	movs	r2, #4
 8001b52:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001b5a:	4b1c      	ldr	r3, [pc, #112]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001b66:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b6c:	4b17      	ldr	r3, [pc, #92]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b6e:	22c2      	movs	r2, #194	; 0xc2
 8001b70:	32ff      	adds	r2, #255	; 0xff
 8001b72:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b7c:	2224      	movs	r2, #36	; 0x24
 8001b7e:	2100      	movs	r1, #0
 8001b80:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 fbb2 	bl	80022f4 <HAL_ADC_Init>
 8001b90:	1e03      	subs	r3, r0, #0
 8001b92:	d001      	beq.n	8001b98 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001b94:	f000 f8f4 	bl	8001d80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2208      	movs	r2, #8
 8001b9c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	2280      	movs	r2, #128	; 0x80
 8001ba2:	0152      	lsls	r2, r2, #5
 8001ba4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001ba6:	1d3b      	adds	r3, r7, #4
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	0552      	lsls	r2, r2, #21
 8001bac:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001bae:	1d3a      	adds	r2, r7, #4
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_ADC_Init+0xb0>)
 8001bb2:	0011      	movs	r1, r2
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f000 fcdd 	bl	8002574 <HAL_ADC_ConfigChannel>
 8001bba:	1e03      	subs	r3, r0, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8001bbe:	f000 f8df 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	20000044 	.word	0x20000044
 8001bd0:	40012400 	.word	0x40012400

08001bd4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001bda:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <MX_SPI1_Init+0x78>)
 8001bdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001be0:	2282      	movs	r2, #130	; 0x82
 8001be2:	0052      	lsls	r2, r2, #1
 8001be4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bec:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001bee:	22e0      	movs	r2, #224	; 0xe0
 8001bf0:	00d2      	lsls	r2, r2, #3
 8001bf2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	0092      	lsls	r2, r2, #2
 8001c06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c1a:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001c22:	2207      	movs	r2, #7
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c26:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001c2e:	2208      	movs	r2, #8
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c32:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <MX_SPI1_Init+0x74>)
 8001c34:	0018      	movs	r0, r3
 8001c36:	f001 fc19 	bl	800346c <HAL_SPI_Init>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c3e:	f000 f89f 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c42:	46c0      	nop			; (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000084 	.word	0x20000084
 8001c4c:	40013000 	.word	0x40013000

08001c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b08b      	sub	sp, #44	; 0x2c
 8001c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c56:	2414      	movs	r4, #20
 8001c58:	193b      	adds	r3, r7, r4
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	2314      	movs	r3, #20
 8001c5e:	001a      	movs	r2, r3
 8001c60:	2100      	movs	r1, #0
 8001c62:	f001 ff91 	bl	8003b88 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	4b42      	ldr	r3, [pc, #264]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	4b41      	ldr	r3, [pc, #260]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	0309      	lsls	r1, r1, #12
 8001c70:	430a      	orrs	r2, r1
 8001c72:	615a      	str	r2, [r3, #20]
 8001c74:	4b3e      	ldr	r3, [pc, #248]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	031b      	lsls	r3, r3, #12
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c82:	4b3b      	ldr	r3, [pc, #236]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001c84:	695a      	ldr	r2, [r3, #20]
 8001c86:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	03c9      	lsls	r1, r1, #15
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	615a      	str	r2, [r3, #20]
 8001c90:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	03db      	lsls	r3, r3, #15
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	4b34      	ldr	r3, [pc, #208]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001ca4:	2180      	movs	r1, #128	; 0x80
 8001ca6:	0289      	lsls	r1, r1, #10
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	615a      	str	r2, [r3, #20]
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001cae:	695a      	ldr	r2, [r3, #20]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	029b      	lsls	r3, r3, #10
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001cbc:	695a      	ldr	r2, [r3, #20]
 8001cbe:	4b2c      	ldr	r3, [pc, #176]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001cc0:	2180      	movs	r1, #128	; 0x80
 8001cc2:	02c9      	lsls	r1, r1, #11
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	615a      	str	r2, [r3, #20]
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <MX_GPIO_Init+0x120>)
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	02db      	lsls	r3, r3, #11
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_AD_Pin|ST7735_RESET_Pin|ST7735_CS_Pin, GPIO_PIN_RESET);
 8001cd6:	4927      	ldr	r1, [pc, #156]	; (8001d74 <MX_GPIO_Init+0x124>)
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <MX_GPIO_Init+0x128>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f000 ff63 	bl	8002ba8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UP_Pin DOWN_Pin SEL_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin|SEL_Pin;
 8001ce2:	193b      	adds	r3, r7, r4
 8001ce4:	22e0      	movs	r2, #224	; 0xe0
 8001ce6:	0212      	lsls	r2, r2, #8
 8001ce8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	193b      	adds	r3, r7, r4
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	193b      	adds	r3, r7, r4
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf6:	193b      	adds	r3, r7, r4
 8001cf8:	4a20      	ldr	r2, [pc, #128]	; (8001d7c <MX_GPIO_Init+0x12c>)
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	0010      	movs	r0, r2
 8001cfe:	f000 fde3 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	2203      	movs	r2, #3
 8001d06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	193b      	adds	r3, r7, r4
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	193a      	adds	r2, r7, r4
 8001d16:	2390      	movs	r3, #144	; 0x90
 8001d18:	05db      	lsls	r3, r3, #23
 8001d1a:	0011      	movs	r1, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 fdd3 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_AD_Pin ST7735_RESET_Pin ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_AD_Pin|ST7735_RESET_Pin|ST7735_CS_Pin;
 8001d22:	193b      	adds	r3, r7, r4
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <MX_GPIO_Init+0x124>)
 8001d26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	193b      	adds	r3, r7, r4
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	193b      	adds	r3, r7, r4
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d34:	193b      	adds	r3, r7, r4
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3a:	193b      	adds	r3, r7, r4
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <MX_GPIO_Init+0x128>)
 8001d3e:	0019      	movs	r1, r3
 8001d40:	0010      	movs	r0, r2
 8001d42:	f000 fdc1 	bl	80028c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OPAMP_CALIB_Pin */
  GPIO_InitStruct.Pin = OPAMP_CALIB_Pin;
 8001d46:	0021      	movs	r1, r4
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	0152      	lsls	r2, r2, #5
 8001d4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d50:	187b      	adds	r3, r7, r1
 8001d52:	2200      	movs	r2, #0
 8001d54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	187b      	adds	r3, r7, r1
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OPAMP_CALIB_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	187b      	adds	r3, r7, r1
 8001d5e:	4a06      	ldr	r2, [pc, #24]	; (8001d78 <MX_GPIO_Init+0x128>)
 8001d60:	0019      	movs	r1, r3
 8001d62:	0010      	movs	r0, r2
 8001d64:	f000 fdb0 	bl	80028c8 <HAL_GPIO_Init>

}
 8001d68:	46c0      	nop			; (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b00b      	add	sp, #44	; 0x2c
 8001d6e:	bd90      	pop	{r4, r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	00000406 	.word	0x00000406
 8001d78:	48000400 	.word	0x48000400
 8001d7c:	48000800 	.word	0x48000800

08001d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d84:	b672      	cpsid	i
}
 8001d86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <Error_Handler+0x8>

08001d8a <pHMeter_process>:


/************** pH **************/

void pHMeter_process(void)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	af00      	add	r7, sp, #0

	// If pH changed

	fillScreen(BLACK);
 8001d8e:	2000      	movs	r0, #0
 8001d90:	f7ff fa2c 	bl	80011ec <fillScreen>
	st7735_mainScreen();
 8001d94:	f000 f87c 	bl	8001e90 <st7735_mainScreen>

	//



}
 8001d98:	46c0      	nop			; (mov r8, r8)
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <st7735_hallScreen>:
/*
 * 	@ Function: st7735_hallScreen
 * 	@ Description: Presentation screen
 */
void st7735_hallScreen(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af04      	add	r7, sp, #16

	  ST7735_SetRotation(0);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff fb94 	bl	80014d4 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "UnNatural eng. presents", Font_11x18, WHITE,BLACK);
 8001dac:	4b31      	ldr	r3, [pc, #196]	; (8001e74 <st7735_hallScreen+0xd4>)
 8001dae:	4832      	ldr	r0, [pc, #200]	; (8001e78 <st7735_hallScreen+0xd8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	9202      	str	r2, [sp, #8]
 8001db4:	4a31      	ldr	r2, [pc, #196]	; (8001e7c <st7735_hallScreen+0xdc>)
 8001db6:	9201      	str	r2, [sp, #4]
 8001db8:	466a      	mov	r2, sp
 8001dba:	6859      	ldr	r1, [r3, #4]
 8001dbc:	6011      	str	r1, [r2, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	f7ff fcf9 	bl	80017bc <ST7735_WriteString>
	  HAL_Delay(1000);
 8001dca:	23fa      	movs	r3, #250	; 0xfa
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 fa6c 	bl	80022ac <HAL_Delay>
	  fillScreen(BLACK);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff fa09 	bl	80011ec <fillScreen>

	  ST7735_SetRotation(0);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fb7a 	bl	80014d4 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "pH-METER V0", Font_16x26, GREEN,BLACK);
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <st7735_hallScreen+0xe0>)
 8001de2:	4828      	ldr	r0, [pc, #160]	; (8001e84 <st7735_hallScreen+0xe4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	9202      	str	r2, [sp, #8]
 8001de8:	22fc      	movs	r2, #252	; 0xfc
 8001dea:	00d2      	lsls	r2, r2, #3
 8001dec:	9201      	str	r2, [sp, #4]
 8001dee:	466a      	mov	r2, sp
 8001df0:	6859      	ldr	r1, [r3, #4]
 8001df2:	6011      	str	r1, [r2, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	0002      	movs	r2, r0
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff fcde 	bl	80017bc <ST7735_WriteString>
	  HAL_Delay(1000);
 8001e00:	23fa      	movs	r3, #250	; 0xfa
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	0018      	movs	r0, r3
 8001e06:	f000 fa51 	bl	80022ac <HAL_Delay>
	  fillScreen(BLACK);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff f9ee 	bl	80011ec <fillScreen>

	  ST7735_SetRotation(0);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fb5f 	bl	80014d4 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "A product developed by", Font_11x18, WHITE,BLACK);
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <st7735_hallScreen+0xd4>)
 8001e18:	481b      	ldr	r0, [pc, #108]	; (8001e88 <st7735_hallScreen+0xe8>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	9202      	str	r2, [sp, #8]
 8001e1e:	4a17      	ldr	r2, [pc, #92]	; (8001e7c <st7735_hallScreen+0xdc>)
 8001e20:	9201      	str	r2, [sp, #4]
 8001e22:	466a      	mov	r2, sp
 8001e24:	6859      	ldr	r1, [r3, #4]
 8001e26:	6011      	str	r1, [r2, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff fcc4 	bl	80017bc <ST7735_WriteString>
	  HAL_Delay(1000);
 8001e34:	23fa      	movs	r3, #250	; 0xfa
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f000 fa37 	bl	80022ac <HAL_Delay>
	  ST7735_WriteString(0, 20, "Andrea Fato eng.", Font_11x18, WHITE,BLACK);
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <st7735_hallScreen+0xd4>)
 8001e40:	4812      	ldr	r0, [pc, #72]	; (8001e8c <st7735_hallScreen+0xec>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	9202      	str	r2, [sp, #8]
 8001e46:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <st7735_hallScreen+0xdc>)
 8001e48:	9201      	str	r2, [sp, #4]
 8001e4a:	466a      	mov	r2, sp
 8001e4c:	6859      	ldr	r1, [r3, #4]
 8001e4e:	6011      	str	r1, [r2, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0002      	movs	r2, r0
 8001e54:	2114      	movs	r1, #20
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fcb0 	bl	80017bc <ST7735_WriteString>
	  HAL_Delay(1000);
 8001e5c:	23fa      	movs	r3, #250	; 0xfa
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	0018      	movs	r0, r3
 8001e62:	f000 fa23 	bl	80022ac <HAL_Delay>
	  fillScreen(BLACK);
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff f9c0 	bl	80011ec <fillScreen>

}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	20000000 	.word	0x20000000
 8001e78:	08003bf8 	.word	0x08003bf8
 8001e7c:	0000ffff 	.word	0x0000ffff
 8001e80:	20000008 	.word	0x20000008
 8001e84:	08003c10 	.word	0x08003c10
 8001e88:	08003c1c 	.word	0x08003c1c
 8001e8c:	08003c34 	.word	0x08003c34

08001e90 <st7735_mainScreen>:
/*
 * 	@ Function: st7735_mainScreen
 * 	@ Description: Presentation main screen for current pH measure
 */
void st7735_mainScreen(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0

	// 1. Title
	pageTitle_graphics("Current pH");
 8001e94:	4b04      	ldr	r3, [pc, #16]	; (8001ea8 <st7735_mainScreen+0x18>)
 8001e96:	0018      	movs	r0, r3
 8001e98:	f000 f808 	bl	8001eac <pageTitle_graphics>

	// 2. Color scale
	colorBar_graphics();
 8001e9c:	f000 f86a 	bl	8001f74 <colorBar_graphics>

}
 8001ea0:	46c0      	nop			; (mov r8, r8)
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	08003c48 	.word	0x08003c48

08001eac <pageTitle_graphics>:

}


static void pageTitle_graphics(const char *title)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af04      	add	r7, sp, #16
 8001eb2:	6078      	str	r0, [r7, #4]
	 *  \---------------------------/
	 *   \						   /
	 *	  \-----------------------/
	 */

	drawLine(49, 0, 109, 0, MAIN_COLOR);
 8001eb4:	23c3      	movs	r3, #195	; 0xc3
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	226d      	movs	r2, #109	; 0x6d
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2031      	movs	r0, #49	; 0x31
 8001ec2:	f7fe fc4c 	bl	800075e <drawLine>
	drawLine(49, 0, 69, 20, MAIN_COLOR);
 8001ec6:	23c3      	movs	r3, #195	; 0xc3
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2314      	movs	r3, #20
 8001ece:	2245      	movs	r2, #69	; 0x45
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2031      	movs	r0, #49	; 0x31
 8001ed4:	f7fe fc43 	bl	800075e <drawLine>
	drawLine(69, 20, 89, 20, MAIN_COLOR);
 8001ed8:	23c3      	movs	r3, #195	; 0xc3
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2314      	movs	r3, #20
 8001ee0:	2259      	movs	r2, #89	; 0x59
 8001ee2:	2114      	movs	r1, #20
 8001ee4:	2045      	movs	r0, #69	; 0x45
 8001ee6:	f7fe fc3a 	bl	800075e <drawLine>
	drawLine(89, 20, 109, 0, MAIN_COLOR);
 8001eea:	23c3      	movs	r3, #195	; 0xc3
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	226d      	movs	r2, #109	; 0x6d
 8001ef4:	2114      	movs	r1, #20
 8001ef6:	2059      	movs	r0, #89	; 0x59
 8001ef8:	f7fe fc31 	bl	800075e <drawLine>

	fillTriangle(49, 0, 69, 0, 69, 20, MAIN_COLOR);
 8001efc:	23c3      	movs	r3, #195	; 0xc3
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	9302      	str	r3, [sp, #8]
 8001f02:	2314      	movs	r3, #20
 8001f04:	9301      	str	r3, [sp, #4]
 8001f06:	2345      	movs	r3, #69	; 0x45
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	2245      	movs	r2, #69	; 0x45
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2031      	movs	r0, #49	; 0x31
 8001f12:	f7fe ff38 	bl	8000d86 <fillTriangle>
	fillTriangle(89, 0, 109, 0, 89, 20, MAIN_COLOR);
 8001f16:	23c3      	movs	r3, #195	; 0xc3
 8001f18:	011b      	lsls	r3, r3, #4
 8001f1a:	9302      	str	r3, [sp, #8]
 8001f1c:	2314      	movs	r3, #20
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	2359      	movs	r3, #89	; 0x59
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	2300      	movs	r3, #0
 8001f26:	226d      	movs	r2, #109	; 0x6d
 8001f28:	2100      	movs	r1, #0
 8001f2a:	2059      	movs	r0, #89	; 0x59
 8001f2c:	f7fe ff2b 	bl	8000d86 <fillTriangle>
    fillRect(49, 20, 60, 20, MAIN_COLOR);
 8001f30:	23c3      	movs	r3, #195	; 0xc3
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2314      	movs	r3, #20
 8001f38:	223c      	movs	r2, #60	; 0x3c
 8001f3a:	2114      	movs	r1, #20
 8001f3c:	2031      	movs	r0, #49	; 0x31
 8001f3e:	f7fe fa73 	bl	8000428 <fillRect>

    ST7735_WriteString(59, 5, title, Font_11x18, WHITE, MAIN_COLOR);
 8001f42:	4b0a      	ldr	r3, [pc, #40]	; (8001f6c <pageTitle_graphics+0xc0>)
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	22c3      	movs	r2, #195	; 0xc3
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	4a08      	ldr	r2, [pc, #32]	; (8001f70 <pageTitle_graphics+0xc4>)
 8001f4e:	9201      	str	r2, [sp, #4]
 8001f50:	466a      	mov	r2, sp
 8001f52:	6859      	ldr	r1, [r3, #4]
 8001f54:	6011      	str	r1, [r2, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	0002      	movs	r2, r0
 8001f5a:	2105      	movs	r1, #5
 8001f5c:	203b      	movs	r0, #59	; 0x3b
 8001f5e:	f7ff fc2d 	bl	80017bc <ST7735_WriteString>

}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b002      	add	sp, #8
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			; (mov r8, r8)
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	0000ffff 	.word	0x0000ffff

08001f74 <colorBar_graphics>:

static void colorBar_graphics(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af02      	add	r7, sp, #8
	 * |________|
	 * |________|	0
	 *
	 */

	drawRoundRect(40, 110, 40, 20, 5, DARK_BLUE);
 8001f7a:	231f      	movs	r3, #31
 8001f7c:	9301      	str	r3, [sp, #4]
 8001f7e:	2305      	movs	r3, #5
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2314      	movs	r3, #20
 8001f84:	2228      	movs	r2, #40	; 0x28
 8001f86:	216e      	movs	r1, #110	; 0x6e
 8001f88:	2028      	movs	r0, #40	; 0x28
 8001f8a:	f7fe fdba 	bl	8000b02 <drawRoundRect>
	drawRoundRect(60, 110, 40, 20, 5, BLUE);
 8001f8e:	23ff      	movs	r3, #255	; 0xff
 8001f90:	9301      	str	r3, [sp, #4]
 8001f92:	2305      	movs	r3, #5
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	2314      	movs	r3, #20
 8001f98:	2228      	movs	r2, #40	; 0x28
 8001f9a:	216e      	movs	r1, #110	; 0x6e
 8001f9c:	203c      	movs	r0, #60	; 0x3c
 8001f9e:	f7fe fdb0 	bl	8000b02 <drawRoundRect>
	drawRoundRect(80, 110, 40, 20, 5, GREEN);
 8001fa2:	23fc      	movs	r3, #252	; 0xfc
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	9301      	str	r3, [sp, #4]
 8001fa8:	2305      	movs	r3, #5
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2314      	movs	r3, #20
 8001fae:	2228      	movs	r2, #40	; 0x28
 8001fb0:	216e      	movs	r1, #110	; 0x6e
 8001fb2:	2050      	movs	r0, #80	; 0x50
 8001fb4:	f7fe fda5 	bl	8000b02 <drawRoundRect>
	drawRoundRect(100, 110, 40, 20, 5, YELLOW);
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <colorBar_graphics+0x74>)
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	2305      	movs	r3, #5
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	2314      	movs	r3, #20
 8001fc2:	2228      	movs	r2, #40	; 0x28
 8001fc4:	216e      	movs	r1, #110	; 0x6e
 8001fc6:	2064      	movs	r0, #100	; 0x64
 8001fc8:	f7fe fd9b 	bl	8000b02 <drawRoundRect>
	drawRoundRect(120, 110, 40, 20, 5, RED);
 8001fcc:	23f8      	movs	r3, #248	; 0xf8
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	2314      	movs	r3, #20
 8001fd8:	2228      	movs	r2, #40	; 0x28
 8001fda:	216e      	movs	r1, #110	; 0x6e
 8001fdc:	2078      	movs	r0, #120	; 0x78
 8001fde:	f7fe fd90 	bl	8000b02 <drawRoundRect>

}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	0000ffe0 	.word	0x0000ffe0

08001fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <HAL_MspInit+0x44>)
 8001ff4:	699a      	ldr	r2, [r3, #24]
 8001ff6:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_MspInit+0x44>)
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	619a      	str	r2, [r3, #24]
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_MspInit+0x44>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2201      	movs	r2, #1
 8002004:	4013      	ands	r3, r2
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_MspInit+0x44>)
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <HAL_MspInit+0x44>)
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	0549      	lsls	r1, r1, #21
 8002014:	430a      	orrs	r2, r1
 8002016:	61da      	str	r2, [r3, #28]
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_MspInit+0x44>)
 800201a:	69da      	ldr	r2, [r3, #28]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	055b      	lsls	r3, r3, #21
 8002020:	4013      	ands	r3, r2
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}
 800202e:	46c0      	nop			; (mov r8, r8)
 8002030:	40021000 	.word	0x40021000

08002034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b08b      	sub	sp, #44	; 0x2c
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	2414      	movs	r4, #20
 800203e:	193b      	adds	r3, r7, r4
 8002040:	0018      	movs	r0, r3
 8002042:	2314      	movs	r3, #20
 8002044:	001a      	movs	r2, r3
 8002046:	2100      	movs	r1, #0
 8002048:	f001 fd9e 	bl	8003b88 <memset>
  if(hadc->Instance==ADC1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a18      	ldr	r2, [pc, #96]	; (80020b4 <HAL_ADC_MspInit+0x80>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d12a      	bne.n	80020ac <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002056:	4b18      	ldr	r3, [pc, #96]	; (80020b8 <HAL_ADC_MspInit+0x84>)
 8002058:	699a      	ldr	r2, [r3, #24]
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_ADC_MspInit+0x84>)
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	0089      	lsls	r1, r1, #2
 8002060:	430a      	orrs	r2, r1
 8002062:	619a      	str	r2, [r3, #24]
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_ADC_MspInit+0x84>)
 8002066:	699a      	ldr	r2, [r3, #24]
 8002068:	2380      	movs	r3, #128	; 0x80
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002072:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <HAL_ADC_MspInit+0x84>)
 8002074:	695a      	ldr	r2, [r3, #20]
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_ADC_MspInit+0x84>)
 8002078:	2180      	movs	r1, #128	; 0x80
 800207a:	02c9      	lsls	r1, r1, #11
 800207c:	430a      	orrs	r2, r1
 800207e:	615a      	str	r2, [r3, #20]
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_ADC_MspInit+0x84>)
 8002082:	695a      	ldr	r2, [r3, #20]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	02db      	lsls	r3, r3, #11
 8002088:	4013      	ands	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 800208e:	193b      	adds	r3, r7, r4
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002094:	193b      	adds	r3, r7, r4
 8002096:	2203      	movs	r2, #3
 8002098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	193b      	adds	r3, r7, r4
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 80020a0:	193b      	adds	r3, r7, r4
 80020a2:	4a06      	ldr	r2, [pc, #24]	; (80020bc <HAL_ADC_MspInit+0x88>)
 80020a4:	0019      	movs	r1, r3
 80020a6:	0010      	movs	r0, r2
 80020a8:	f000 fc0e 	bl	80028c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b00b      	add	sp, #44	; 0x2c
 80020b2:	bd90      	pop	{r4, r7, pc}
 80020b4:	40012400 	.word	0x40012400
 80020b8:	40021000 	.word	0x40021000
 80020bc:	48000400 	.word	0x48000400

080020c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b08b      	sub	sp, #44	; 0x2c
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	2414      	movs	r4, #20
 80020ca:	193b      	adds	r3, r7, r4
 80020cc:	0018      	movs	r0, r3
 80020ce:	2314      	movs	r3, #20
 80020d0:	001a      	movs	r2, r3
 80020d2:	2100      	movs	r1, #0
 80020d4:	f001 fd58 	bl	8003b88 <memset>
  if(hspi->Instance==SPI1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1c      	ldr	r2, [pc, #112]	; (8002150 <HAL_SPI_MspInit+0x90>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d132      	bne.n	8002148 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <HAL_SPI_MspInit+0x94>)
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_SPI_MspInit+0x94>)
 80020e8:	2180      	movs	r1, #128	; 0x80
 80020ea:	0149      	lsls	r1, r1, #5
 80020ec:	430a      	orrs	r2, r1
 80020ee:	619a      	str	r2, [r3, #24]
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <HAL_SPI_MspInit+0x94>)
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	015b      	lsls	r3, r3, #5
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <HAL_SPI_MspInit+0x94>)
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_SPI_MspInit+0x94>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0289      	lsls	r1, r1, #10
 8002108:	430a      	orrs	r2, r1
 800210a:	615a      	str	r2, [r3, #20]
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <HAL_SPI_MspInit+0x94>)
 800210e:	695a      	ldr	r2, [r3, #20]
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800211a:	0021      	movs	r1, r4
 800211c:	187b      	adds	r3, r7, r1
 800211e:	22e0      	movs	r2, #224	; 0xe0
 8002120:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2202      	movs	r2, #2
 8002126:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	187b      	adds	r3, r7, r1
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800212e:	187b      	adds	r3, r7, r1
 8002130:	2203      	movs	r2, #3
 8002132:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002134:	187b      	adds	r3, r7, r1
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	187a      	adds	r2, r7, r1
 800213c:	2390      	movs	r3, #144	; 0x90
 800213e:	05db      	lsls	r3, r3, #23
 8002140:	0011      	movs	r1, r2
 8002142:	0018      	movs	r0, r3
 8002144:	f000 fbc0 	bl	80028c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b00b      	add	sp, #44	; 0x2c
 800214e:	bd90      	pop	{r4, r7, pc}
 8002150:	40013000 	.word	0x40013000
 8002154:	40021000 	.word	0x40021000

08002158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800215c:	e7fe      	b.n	800215c <NMI_Handler+0x4>

0800215e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <HardFault_Handler+0x4>

08002164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002168:	46c0      	nop			; (mov r8, r8)
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800217c:	f000 f87a 	bl	8002274 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002180:	46c0      	nop			; (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002190:	480d      	ldr	r0, [pc, #52]	; (80021c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002192:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002194:	f7ff fff7 	bl	8002186 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002198:	480c      	ldr	r0, [pc, #48]	; (80021cc <LoopForever+0x6>)
  ldr r1, =_edata
 800219a:	490d      	ldr	r1, [pc, #52]	; (80021d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800219c:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <LoopForever+0xe>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021b0:	4c0a      	ldr	r4, [pc, #40]	; (80021dc <LoopForever+0x16>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021be:	f001 fceb 	bl	8003b98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021c2:	f7ff fc3d 	bl	8001a40 <main>

080021c6 <LoopForever>:

LoopForever:
    b LoopForever
 80021c6:	e7fe      	b.n	80021c6 <LoopForever>
  ldr   r0, =_estack
 80021c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80021cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80021d4:	08005da8 	.word	0x08005da8
  ldr r2, =_sbss
 80021d8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 80021dc:	200000ec 	.word	0x200000ec

080021e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021e0:	e7fe      	b.n	80021e0 <ADC1_IRQHandler>
	...

080021e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <HAL_Init+0x24>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_Init+0x24>)
 80021ee:	2110      	movs	r1, #16
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80021f4:	2003      	movs	r0, #3
 80021f6:	f000 f809 	bl	800220c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021fa:	f7ff fef7 	bl	8001fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	40022000 	.word	0x40022000

0800220c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002214:	4b14      	ldr	r3, [pc, #80]	; (8002268 <HAL_InitTick+0x5c>)
 8002216:	681c      	ldr	r4, [r3, #0]
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_InitTick+0x60>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	0019      	movs	r1, r3
 800221e:	23fa      	movs	r3, #250	; 0xfa
 8002220:	0098      	lsls	r0, r3, #2
 8002222:	f7fd ff6f 	bl	8000104 <__udivsi3>
 8002226:	0003      	movs	r3, r0
 8002228:	0019      	movs	r1, r3
 800222a:	0020      	movs	r0, r4
 800222c:	f7fd ff6a 	bl	8000104 <__udivsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	0018      	movs	r0, r3
 8002234:	f000 fb3b 	bl	80028ae <HAL_SYSTICK_Config>
 8002238:	1e03      	subs	r3, r0, #0
 800223a:	d001      	beq.n	8002240 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e00f      	b.n	8002260 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b03      	cmp	r3, #3
 8002244:	d80b      	bhi.n	800225e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	2301      	movs	r3, #1
 800224a:	425b      	negs	r3, r3
 800224c:	2200      	movs	r2, #0
 800224e:	0018      	movs	r0, r3
 8002250:	f000 fb18 	bl	8002884 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_InitTick+0x64>)
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b003      	add	sp, #12
 8002266:	bd90      	pop	{r4, r7, pc}
 8002268:	20000010 	.word	0x20000010
 800226c:	20000018 	.word	0x20000018
 8002270:	20000014 	.word	0x20000014

08002274 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_IncTick+0x1c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	001a      	movs	r2, r3
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_IncTick+0x20>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	18d2      	adds	r2, r2, r3
 8002284:	4b03      	ldr	r3, [pc, #12]	; (8002294 <HAL_IncTick+0x20>)
 8002286:	601a      	str	r2, [r3, #0]
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	20000018 	.word	0x20000018
 8002294:	200000e8 	.word	0x200000e8

08002298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  return uwTick;
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <HAL_GetTick+0x10>)
 800229e:	681b      	ldr	r3, [r3, #0]
}
 80022a0:	0018      	movs	r0, r3
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			; (mov r8, r8)
 80022a8:	200000e8 	.word	0x200000e8

080022ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff fff0 	bl	8002298 <HAL_GetTick>
 80022b8:	0003      	movs	r3, r0
 80022ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	3301      	adds	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_Delay+0x44>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	001a      	movs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	189b      	adds	r3, r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	f7ff ffe0 	bl	8002298 <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d8f7      	bhi.n	80022d4 <HAL_Delay+0x28>
  {
  }
}
 80022e4:	46c0      	nop			; (mov r8, r8)
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	46bd      	mov	sp, r7
 80022ea:	b004      	add	sp, #16
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	20000018 	.word	0x20000018

080022f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022fc:	230f      	movs	r3, #15
 80022fe:	18fb      	adds	r3, r7, r3
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e125      	b.n	800255e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10a      	bne.n	8002330 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2234      	movs	r2, #52	; 0x34
 8002324:	2100      	movs	r1, #0
 8002326:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	0018      	movs	r0, r3
 800232c:	f7ff fe82 	bl	8002034 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	2210      	movs	r2, #16
 8002336:	4013      	ands	r3, r2
 8002338:	d000      	beq.n	800233c <HAL_ADC_Init+0x48>
 800233a:	e103      	b.n	8002544 <HAL_ADC_Init+0x250>
 800233c:	230f      	movs	r3, #15
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d000      	beq.n	8002348 <HAL_ADC_Init+0x54>
 8002346:	e0fd      	b.n	8002544 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2204      	movs	r2, #4
 8002350:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002352:	d000      	beq.n	8002356 <HAL_ADC_Init+0x62>
 8002354:	e0f6      	b.n	8002544 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800235a:	4a83      	ldr	r2, [pc, #524]	; (8002568 <HAL_ADC_Init+0x274>)
 800235c:	4013      	ands	r3, r2
 800235e:	2202      	movs	r2, #2
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2203      	movs	r2, #3
 800236e:	4013      	ands	r3, r2
 8002370:	2b01      	cmp	r3, #1
 8002372:	d112      	bne.n	800239a <HAL_ADC_Init+0xa6>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	4013      	ands	r3, r2
 800237e:	2b01      	cmp	r3, #1
 8002380:	d009      	beq.n	8002396 <HAL_ADC_Init+0xa2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	2380      	movs	r3, #128	; 0x80
 800238a:	021b      	lsls	r3, r3, #8
 800238c:	401a      	ands	r2, r3
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	429a      	cmp	r2, r3
 8002394:	d101      	bne.n	800239a <HAL_ADC_Init+0xa6>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_ADC_Init+0xa8>
 800239a:	2300      	movs	r3, #0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d116      	bne.n	80023ce <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	2218      	movs	r2, #24
 80023a8:	4393      	bics	r3, r2
 80023aa:	0019      	movs	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	0899      	lsrs	r1, r3, #2
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4964      	ldr	r1, [pc, #400]	; (800256c <HAL_ADC_Init+0x278>)
 80023da:	400a      	ands	r2, r1
 80023dc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7e1b      	ldrb	r3, [r3, #24]
 80023e2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7e5b      	ldrb	r3, [r3, #25]
 80023e8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023ea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7e9b      	ldrb	r3, [r3, #26]
 80023f0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80023f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d002      	beq.n	8002402 <HAL_ADC_Init+0x10e>
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	015b      	lsls	r3, r3, #5
 8002400:	e000      	b.n	8002404 <HAL_ADC_Init+0x110>
 8002402:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002404:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800240a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d101      	bne.n	8002418 <HAL_ADC_Init+0x124>
 8002414:	2304      	movs	r3, #4
 8002416:	e000      	b.n	800241a <HAL_ADC_Init+0x126>
 8002418:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800241a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2124      	movs	r1, #36	; 0x24
 8002420:	5c5b      	ldrb	r3, [r3, r1]
 8002422:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002424:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	4313      	orrs	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	7edb      	ldrb	r3, [r3, #27]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d115      	bne.n	8002460 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	7e9b      	ldrb	r3, [r3, #26]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2280      	movs	r2, #128	; 0x80
 8002440:	0252      	lsls	r2, r2, #9
 8002442:	4313      	orrs	r3, r2
 8002444:	60bb      	str	r3, [r7, #8]
 8002446:	e00b      	b.n	8002460 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244c:	2220      	movs	r2, #32
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002458:	2201      	movs	r2, #1
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69da      	ldr	r2, [r3, #28]
 8002464:	23c2      	movs	r3, #194	; 0xc2
 8002466:	33ff      	adds	r3, #255	; 0xff
 8002468:	429a      	cmp	r2, r3
 800246a:	d007      	beq.n	800247c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002474:	4313      	orrs	r3, r2
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	4313      	orrs	r3, r2
 800247a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68d9      	ldr	r1, [r3, #12]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68ba      	ldr	r2, [r7, #8]
 8002488:	430a      	orrs	r2, r1
 800248a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	055b      	lsls	r3, r3, #21
 8002494:	429a      	cmp	r2, r3
 8002496:	d01b      	beq.n	80024d0 <HAL_ADC_Init+0x1dc>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d017      	beq.n	80024d0 <HAL_ADC_Init+0x1dc>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d013      	beq.n	80024d0 <HAL_ADC_Init+0x1dc>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ac:	2b03      	cmp	r3, #3
 80024ae:	d00f      	beq.n	80024d0 <HAL_ADC_Init+0x1dc>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d00b      	beq.n	80024d0 <HAL_ADC_Init+0x1dc>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d007      	beq.n	80024d0 <HAL_ADC_Init+0x1dc>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	2b06      	cmp	r3, #6
 80024c6:	d003      	beq.n	80024d0 <HAL_ADC_Init+0x1dc>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024cc:	2b07      	cmp	r3, #7
 80024ce:	d112      	bne.n	80024f6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	695a      	ldr	r2, [r3, #20]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2107      	movs	r1, #7
 80024dc:	438a      	bics	r2, r1
 80024de:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6959      	ldr	r1, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ea:	2207      	movs	r2, #7
 80024ec:	401a      	ands	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a1c      	ldr	r2, [pc, #112]	; (8002570 <HAL_ADC_Init+0x27c>)
 80024fe:	4013      	ands	r3, r2
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	429a      	cmp	r2, r3
 8002504:	d10b      	bne.n	800251e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002510:	2203      	movs	r2, #3
 8002512:	4393      	bics	r3, r2
 8002514:	2201      	movs	r2, #1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800251c:	e01c      	b.n	8002558 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002522:	2212      	movs	r2, #18
 8002524:	4393      	bics	r3, r2
 8002526:	2210      	movs	r2, #16
 8002528:	431a      	orrs	r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	2201      	movs	r2, #1
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800253a:	230f      	movs	r3, #15
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2201      	movs	r2, #1
 8002540:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002542:	e009      	b.n	8002558 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002548:	2210      	movs	r2, #16
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002550:	230f      	movs	r3, #15
 8002552:	18fb      	adds	r3, r7, r3
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002558:	230f      	movs	r3, #15
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	781b      	ldrb	r3, [r3, #0]
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b004      	add	sp, #16
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			; (mov r8, r8)
 8002568:	fffffefd 	.word	0xfffffefd
 800256c:	fffe0219 	.word	0xfffe0219
 8002570:	833fffe7 	.word	0x833fffe7

08002574 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800257e:	230f      	movs	r3, #15
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800258e:	2380      	movs	r3, #128	; 0x80
 8002590:	055b      	lsls	r3, r3, #21
 8002592:	429a      	cmp	r2, r3
 8002594:	d011      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x46>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	2b01      	cmp	r3, #1
 800259c:	d00d      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x46>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d009      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x46>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d005      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x46>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d001      	beq.n	80025ba <HAL_ADC_ConfigChannel+0x46>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2234      	movs	r2, #52	; 0x34
 80025be:	5c9b      	ldrb	r3, [r3, r2]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d101      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x54>
 80025c4:	2302      	movs	r3, #2
 80025c6:	e0bb      	b.n	8002740 <HAL_ADC_ConfigChannel+0x1cc>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2234      	movs	r2, #52	; 0x34
 80025cc:	2101      	movs	r1, #1
 80025ce:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	2204      	movs	r2, #4
 80025d8:	4013      	ands	r3, r2
 80025da:	d000      	beq.n	80025de <HAL_ADC_ConfigChannel+0x6a>
 80025dc:	e09f      	b.n	800271e <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a59      	ldr	r2, [pc, #356]	; (8002748 <HAL_ADC_ConfigChannel+0x1d4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d100      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x76>
 80025e8:	e077      	b.n	80026da <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2201      	movs	r2, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	055b      	lsls	r3, r3, #21
 8002608:	429a      	cmp	r2, r3
 800260a:	d037      	beq.n	800267c <HAL_ADC_ConfigChannel+0x108>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	2b01      	cmp	r3, #1
 8002612:	d033      	beq.n	800267c <HAL_ADC_ConfigChannel+0x108>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	2b02      	cmp	r3, #2
 800261a:	d02f      	beq.n	800267c <HAL_ADC_ConfigChannel+0x108>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	2b03      	cmp	r3, #3
 8002622:	d02b      	beq.n	800267c <HAL_ADC_ConfigChannel+0x108>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	2b04      	cmp	r3, #4
 800262a:	d027      	beq.n	800267c <HAL_ADC_ConfigChannel+0x108>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	2b05      	cmp	r3, #5
 8002632:	d023      	beq.n	800267c <HAL_ADC_ConfigChannel+0x108>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	2b06      	cmp	r3, #6
 800263a:	d01f      	beq.n	800267c <HAL_ADC_ConfigChannel+0x108>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	2b07      	cmp	r3, #7
 8002642:	d01b      	beq.n	800267c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	2107      	movs	r1, #7
 8002650:	400b      	ands	r3, r1
 8002652:	429a      	cmp	r2, r3
 8002654:	d012      	beq.n	800267c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2107      	movs	r1, #7
 8002662:	438a      	bics	r2, r1
 8002664:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	6959      	ldr	r1, [r3, #20]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2207      	movs	r2, #7
 8002672:	401a      	ands	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	430a      	orrs	r2, r1
 800267a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b10      	cmp	r3, #16
 8002682:	d003      	beq.n	800268c <HAL_ADC_ConfigChannel+0x118>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b11      	cmp	r3, #17
 800268a:	d152      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800268c:	4b2f      	ldr	r3, [pc, #188]	; (800274c <HAL_ADC_ConfigChannel+0x1d8>)
 800268e:	6819      	ldr	r1, [r3, #0]
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b10      	cmp	r3, #16
 8002696:	d102      	bne.n	800269e <HAL_ADC_ConfigChannel+0x12a>
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	e001      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x12e>
 800269e:	2380      	movs	r3, #128	; 0x80
 80026a0:	03db      	lsls	r3, r3, #15
 80026a2:	4a2a      	ldr	r2, [pc, #168]	; (800274c <HAL_ADC_ConfigChannel+0x1d8>)
 80026a4:	430b      	orrs	r3, r1
 80026a6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b10      	cmp	r3, #16
 80026ae:	d140      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <HAL_ADC_ConfigChannel+0x1dc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4927      	ldr	r1, [pc, #156]	; (8002754 <HAL_ADC_ConfigChannel+0x1e0>)
 80026b6:	0018      	movs	r0, r3
 80026b8:	f7fd fd24 	bl	8000104 <__udivsi3>
 80026bc:	0003      	movs	r3, r0
 80026be:	001a      	movs	r2, r3
 80026c0:	0013      	movs	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	189b      	adds	r3, r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026ca:	e002      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f9      	bne.n	80026cc <HAL_ADC_ConfigChannel+0x158>
 80026d8:	e02b      	b.n	8002732 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2101      	movs	r1, #1
 80026e6:	4099      	lsls	r1, r3
 80026e8:	000b      	movs	r3, r1
 80026ea:	43d9      	mvns	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	400a      	ands	r2, r1
 80026f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d003      	beq.n	8002704 <HAL_ADC_ConfigChannel+0x190>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b11      	cmp	r3, #17
 8002702:	d116      	bne.n	8002732 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002704:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_ADC_ConfigChannel+0x1d8>)
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b10      	cmp	r3, #16
 800270e:	d101      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x1a0>
 8002710:	4a11      	ldr	r2, [pc, #68]	; (8002758 <HAL_ADC_ConfigChannel+0x1e4>)
 8002712:	e000      	b.n	8002716 <HAL_ADC_ConfigChannel+0x1a2>
 8002714:	4a11      	ldr	r2, [pc, #68]	; (800275c <HAL_ADC_ConfigChannel+0x1e8>)
 8002716:	4b0d      	ldr	r3, [pc, #52]	; (800274c <HAL_ADC_ConfigChannel+0x1d8>)
 8002718:	400a      	ands	r2, r1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e009      	b.n	8002732 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002722:	2220      	movs	r2, #32
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800272a:	230f      	movs	r3, #15
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2234      	movs	r2, #52	; 0x34
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800273a:	230f      	movs	r3, #15
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	781b      	ldrb	r3, [r3, #0]
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b004      	add	sp, #16
 8002746:	bd80      	pop	{r7, pc}
 8002748:	00001001 	.word	0x00001001
 800274c:	40012708 	.word	0x40012708
 8002750:	20000010 	.word	0x20000010
 8002754:	000f4240 	.word	0x000f4240
 8002758:	ff7fffff 	.word	0xff7fffff
 800275c:	ffbfffff 	.word	0xffbfffff

08002760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002760:	b590      	push	{r4, r7, lr}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	0002      	movs	r2, r0
 8002768:	6039      	str	r1, [r7, #0]
 800276a:	1dfb      	adds	r3, r7, #7
 800276c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800276e:	1dfb      	adds	r3, r7, #7
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b7f      	cmp	r3, #127	; 0x7f
 8002774:	d828      	bhi.n	80027c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002776:	4a2f      	ldr	r2, [pc, #188]	; (8002834 <__NVIC_SetPriority+0xd4>)
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	b25b      	sxtb	r3, r3
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	33c0      	adds	r3, #192	; 0xc0
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	589b      	ldr	r3, [r3, r2]
 8002786:	1dfa      	adds	r2, r7, #7
 8002788:	7812      	ldrb	r2, [r2, #0]
 800278a:	0011      	movs	r1, r2
 800278c:	2203      	movs	r2, #3
 800278e:	400a      	ands	r2, r1
 8002790:	00d2      	lsls	r2, r2, #3
 8002792:	21ff      	movs	r1, #255	; 0xff
 8002794:	4091      	lsls	r1, r2
 8002796:	000a      	movs	r2, r1
 8002798:	43d2      	mvns	r2, r2
 800279a:	401a      	ands	r2, r3
 800279c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	019b      	lsls	r3, r3, #6
 80027a2:	22ff      	movs	r2, #255	; 0xff
 80027a4:	401a      	ands	r2, r3
 80027a6:	1dfb      	adds	r3, r7, #7
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	0018      	movs	r0, r3
 80027ac:	2303      	movs	r3, #3
 80027ae:	4003      	ands	r3, r0
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027b4:	481f      	ldr	r0, [pc, #124]	; (8002834 <__NVIC_SetPriority+0xd4>)
 80027b6:	1dfb      	adds	r3, r7, #7
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	430a      	orrs	r2, r1
 80027c0:	33c0      	adds	r3, #192	; 0xc0
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027c6:	e031      	b.n	800282c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <__NVIC_SetPriority+0xd8>)
 80027ca:	1dfb      	adds	r3, r7, #7
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	0019      	movs	r1, r3
 80027d0:	230f      	movs	r3, #15
 80027d2:	400b      	ands	r3, r1
 80027d4:	3b08      	subs	r3, #8
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3306      	adds	r3, #6
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	18d3      	adds	r3, r2, r3
 80027de:	3304      	adds	r3, #4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1dfa      	adds	r2, r7, #7
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	0011      	movs	r1, r2
 80027e8:	2203      	movs	r2, #3
 80027ea:	400a      	ands	r2, r1
 80027ec:	00d2      	lsls	r2, r2, #3
 80027ee:	21ff      	movs	r1, #255	; 0xff
 80027f0:	4091      	lsls	r1, r2
 80027f2:	000a      	movs	r2, r1
 80027f4:	43d2      	mvns	r2, r2
 80027f6:	401a      	ands	r2, r3
 80027f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	019b      	lsls	r3, r3, #6
 80027fe:	22ff      	movs	r2, #255	; 0xff
 8002800:	401a      	ands	r2, r3
 8002802:	1dfb      	adds	r3, r7, #7
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	0018      	movs	r0, r3
 8002808:	2303      	movs	r3, #3
 800280a:	4003      	ands	r3, r0
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002810:	4809      	ldr	r0, [pc, #36]	; (8002838 <__NVIC_SetPriority+0xd8>)
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	001c      	movs	r4, r3
 8002818:	230f      	movs	r3, #15
 800281a:	4023      	ands	r3, r4
 800281c:	3b08      	subs	r3, #8
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	430a      	orrs	r2, r1
 8002822:	3306      	adds	r3, #6
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	18c3      	adds	r3, r0, r3
 8002828:	3304      	adds	r3, #4
 800282a:	601a      	str	r2, [r3, #0]
}
 800282c:	46c0      	nop			; (mov r8, r8)
 800282e:	46bd      	mov	sp, r7
 8002830:	b003      	add	sp, #12
 8002832:	bd90      	pop	{r4, r7, pc}
 8002834:	e000e100 	.word	0xe000e100
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	1e5a      	subs	r2, r3, #1
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	045b      	lsls	r3, r3, #17
 800284c:	429a      	cmp	r2, r3
 800284e:	d301      	bcc.n	8002854 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002850:	2301      	movs	r3, #1
 8002852:	e010      	b.n	8002876 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002854:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <SysTick_Config+0x44>)
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	3a01      	subs	r2, #1
 800285a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285c:	2301      	movs	r3, #1
 800285e:	425b      	negs	r3, r3
 8002860:	2103      	movs	r1, #3
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff ff7c 	bl	8002760 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <SysTick_Config+0x44>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286e:	4b04      	ldr	r3, [pc, #16]	; (8002880 <SysTick_Config+0x44>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002874:	2300      	movs	r3, #0
}
 8002876:	0018      	movs	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	b002      	add	sp, #8
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	e000e010 	.word	0xe000e010

08002884 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	607a      	str	r2, [r7, #4]
 800288e:	210f      	movs	r1, #15
 8002890:	187b      	adds	r3, r7, r1
 8002892:	1c02      	adds	r2, r0, #0
 8002894:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002896:	68ba      	ldr	r2, [r7, #8]
 8002898:	187b      	adds	r3, r7, r1
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b25b      	sxtb	r3, r3
 800289e:	0011      	movs	r1, r2
 80028a0:	0018      	movs	r0, r3
 80028a2:	f7ff ff5d 	bl	8002760 <__NVIC_SetPriority>
}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b004      	add	sp, #16
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7ff ffbf 	bl	800283c <SysTick_Config>
 80028be:	0003      	movs	r3, r0
}
 80028c0:	0018      	movs	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028d2:	2300      	movs	r3, #0
 80028d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d6:	e14f      	b.n	8002b78 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2101      	movs	r1, #1
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4091      	lsls	r1, r2
 80028e2:	000a      	movs	r2, r1
 80028e4:	4013      	ands	r3, r2
 80028e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d100      	bne.n	80028f0 <HAL_GPIO_Init+0x28>
 80028ee:	e140      	b.n	8002b72 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2203      	movs	r2, #3
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d005      	beq.n	8002908 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2203      	movs	r2, #3
 8002902:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002904:	2b02      	cmp	r3, #2
 8002906:	d130      	bne.n	800296a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	2203      	movs	r2, #3
 8002914:	409a      	lsls	r2, r3
 8002916:	0013      	movs	r3, r2
 8002918:	43da      	mvns	r2, r3
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68da      	ldr	r2, [r3, #12]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	409a      	lsls	r2, r3
 800292a:	0013      	movs	r3, r2
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800293e:	2201      	movs	r2, #1
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	409a      	lsls	r2, r3
 8002944:	0013      	movs	r3, r2
 8002946:	43da      	mvns	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4013      	ands	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	2201      	movs	r2, #1
 8002956:	401a      	ands	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	409a      	lsls	r2, r3
 800295c:	0013      	movs	r3, r2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2203      	movs	r2, #3
 8002970:	4013      	ands	r3, r2
 8002972:	2b03      	cmp	r3, #3
 8002974:	d017      	beq.n	80029a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	2203      	movs	r2, #3
 8002982:	409a      	lsls	r2, r3
 8002984:	0013      	movs	r3, r2
 8002986:	43da      	mvns	r2, r3
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	4013      	ands	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	409a      	lsls	r2, r3
 8002998:	0013      	movs	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2203      	movs	r2, #3
 80029ac:	4013      	ands	r3, r2
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d123      	bne.n	80029fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	08da      	lsrs	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3208      	adds	r2, #8
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	58d3      	ldr	r3, [r2, r3]
 80029be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2207      	movs	r2, #7
 80029c4:	4013      	ands	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	220f      	movs	r2, #15
 80029ca:	409a      	lsls	r2, r3
 80029cc:	0013      	movs	r3, r2
 80029ce:	43da      	mvns	r2, r3
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4013      	ands	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2107      	movs	r1, #7
 80029de:	400b      	ands	r3, r1
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	409a      	lsls	r2, r3
 80029e4:	0013      	movs	r3, r2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	08da      	lsrs	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3208      	adds	r2, #8
 80029f4:	0092      	lsls	r2, r2, #2
 80029f6:	6939      	ldr	r1, [r7, #16]
 80029f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	2203      	movs	r2, #3
 8002a06:	409a      	lsls	r2, r3
 8002a08:	0013      	movs	r3, r2
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2203      	movs	r2, #3
 8002a18:	401a      	ands	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	0013      	movs	r3, r2
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	23c0      	movs	r3, #192	; 0xc0
 8002a34:	029b      	lsls	r3, r3, #10
 8002a36:	4013      	ands	r3, r2
 8002a38:	d100      	bne.n	8002a3c <HAL_GPIO_Init+0x174>
 8002a3a:	e09a      	b.n	8002b72 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3c:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <HAL_GPIO_Init+0x2c8>)
 8002a3e:	699a      	ldr	r2, [r3, #24]
 8002a40:	4b53      	ldr	r3, [pc, #332]	; (8002b90 <HAL_GPIO_Init+0x2c8>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	430a      	orrs	r2, r1
 8002a46:	619a      	str	r2, [r3, #24]
 8002a48:	4b51      	ldr	r3, [pc, #324]	; (8002b90 <HAL_GPIO_Init+0x2c8>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a54:	4a4f      	ldr	r2, [pc, #316]	; (8002b94 <HAL_GPIO_Init+0x2cc>)
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	089b      	lsrs	r3, r3, #2
 8002a5a:	3302      	adds	r3, #2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	589b      	ldr	r3, [r3, r2]
 8002a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2203      	movs	r2, #3
 8002a66:	4013      	ands	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	0013      	movs	r3, r2
 8002a70:	43da      	mvns	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4013      	ands	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	2390      	movs	r3, #144	; 0x90
 8002a7c:	05db      	lsls	r3, r3, #23
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0x1e2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a44      	ldr	r2, [pc, #272]	; (8002b98 <HAL_GPIO_Init+0x2d0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00d      	beq.n	8002aa6 <HAL_GPIO_Init+0x1de>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a43      	ldr	r2, [pc, #268]	; (8002b9c <HAL_GPIO_Init+0x2d4>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d007      	beq.n	8002aa2 <HAL_GPIO_Init+0x1da>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a42      	ldr	r2, [pc, #264]	; (8002ba0 <HAL_GPIO_Init+0x2d8>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d101      	bne.n	8002a9e <HAL_GPIO_Init+0x1d6>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x1e4>
 8002a9e:	2305      	movs	r3, #5
 8002aa0:	e004      	b.n	8002aac <HAL_GPIO_Init+0x1e4>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_Init+0x1e4>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_Init+0x1e4>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	2103      	movs	r1, #3
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4093      	lsls	r3, r2
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002abc:	4935      	ldr	r1, [pc, #212]	; (8002b94 <HAL_GPIO_Init+0x2cc>)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aca:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_GPIO_Init+0x2dc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	035b      	lsls	r3, r3, #13
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002aee:	4b2d      	ldr	r3, [pc, #180]	; (8002ba4 <HAL_GPIO_Init+0x2dc>)
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002af4:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <HAL_GPIO_Init+0x2dc>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685a      	ldr	r2, [r3, #4]
 8002b08:	2380      	movs	r3, #128	; 0x80
 8002b0a:	039b      	lsls	r3, r3, #14
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <HAL_GPIO_Init+0x2dc>)
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002b1e:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <HAL_GPIO_Init+0x2dc>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	43da      	mvns	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	2380      	movs	r3, #128	; 0x80
 8002b34:	029b      	lsls	r3, r3, #10
 8002b36:	4013      	ands	r3, r2
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <HAL_GPIO_Init+0x2dc>)
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <HAL_GPIO_Init+0x2dc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	43da      	mvns	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	2380      	movs	r3, #128	; 0x80
 8002b5e:	025b      	lsls	r3, r3, #9
 8002b60:	4013      	ands	r3, r2
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <HAL_GPIO_Init+0x2dc>)
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	3301      	adds	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1e13      	subs	r3, r2, #0
 8002b82:	d000      	beq.n	8002b86 <HAL_GPIO_Init+0x2be>
 8002b84:	e6a8      	b.n	80028d8 <HAL_GPIO_Init+0x10>
  } 
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b006      	add	sp, #24
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40010000 	.word	0x40010000
 8002b98:	48000400 	.word	0x48000400
 8002b9c:	48000800 	.word	0x48000800
 8002ba0:	48000c00 	.word	0x48000c00
 8002ba4:	40010400 	.word	0x40010400

08002ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	0008      	movs	r0, r1
 8002bb2:	0011      	movs	r1, r2
 8002bb4:	1cbb      	adds	r3, r7, #2
 8002bb6:	1c02      	adds	r2, r0, #0
 8002bb8:	801a      	strh	r2, [r3, #0]
 8002bba:	1c7b      	adds	r3, r7, #1
 8002bbc:	1c0a      	adds	r2, r1, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc0:	1c7b      	adds	r3, r7, #1
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d004      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bc8:	1cbb      	adds	r3, r7, #2
 8002bca:	881a      	ldrh	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bd2:	1cbb      	adds	r3, r7, #2
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b002      	add	sp, #8
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b088      	sub	sp, #32
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e305      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d100      	bne.n	8002c02 <HAL_RCC_OscConfig+0x1e>
 8002c00:	e08d      	b.n	8002d1e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c02:	4bc5      	ldr	r3, [pc, #788]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	220c      	movs	r2, #12
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d00e      	beq.n	8002c2c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c0e:	4bc2      	ldr	r3, [pc, #776]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	220c      	movs	r2, #12
 8002c14:	4013      	ands	r3, r2
 8002c16:	2b08      	cmp	r3, #8
 8002c18:	d116      	bne.n	8002c48 <HAL_RCC_OscConfig+0x64>
 8002c1a:	4bbf      	ldr	r3, [pc, #764]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	23c0      	movs	r3, #192	; 0xc0
 8002c20:	025b      	lsls	r3, r3, #9
 8002c22:	401a      	ands	r2, r3
 8002c24:	2380      	movs	r3, #128	; 0x80
 8002c26:	025b      	lsls	r3, r3, #9
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d10d      	bne.n	8002c48 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	4bba      	ldr	r3, [pc, #744]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	029b      	lsls	r3, r3, #10
 8002c34:	4013      	ands	r3, r2
 8002c36:	d100      	bne.n	8002c3a <HAL_RCC_OscConfig+0x56>
 8002c38:	e070      	b.n	8002d1c <HAL_RCC_OscConfig+0x138>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d000      	beq.n	8002c44 <HAL_RCC_OscConfig+0x60>
 8002c42:	e06b      	b.n	8002d1c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e2dc      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_OscConfig+0x7c>
 8002c50:	4bb1      	ldr	r3, [pc, #708]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4bb0      	ldr	r3, [pc, #704]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c56:	2180      	movs	r1, #128	; 0x80
 8002c58:	0249      	lsls	r1, r1, #9
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	601a      	str	r2, [r3, #0]
 8002c5e:	e02f      	b.n	8002cc0 <HAL_RCC_OscConfig+0xdc>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10c      	bne.n	8002c82 <HAL_RCC_OscConfig+0x9e>
 8002c68:	4bab      	ldr	r3, [pc, #684]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4baa      	ldr	r3, [pc, #680]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c6e:	49ab      	ldr	r1, [pc, #684]	; (8002f1c <HAL_RCC_OscConfig+0x338>)
 8002c70:	400a      	ands	r2, r1
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	4ba8      	ldr	r3, [pc, #672]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4ba7      	ldr	r3, [pc, #668]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c7a:	49a9      	ldr	r1, [pc, #676]	; (8002f20 <HAL_RCC_OscConfig+0x33c>)
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e01e      	b.n	8002cc0 <HAL_RCC_OscConfig+0xdc>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b05      	cmp	r3, #5
 8002c88:	d10e      	bne.n	8002ca8 <HAL_RCC_OscConfig+0xc4>
 8002c8a:	4ba3      	ldr	r3, [pc, #652]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4ba2      	ldr	r3, [pc, #648]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c90:	2180      	movs	r1, #128	; 0x80
 8002c92:	02c9      	lsls	r1, r1, #11
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	4b9f      	ldr	r3, [pc, #636]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b9e      	ldr	r3, [pc, #632]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	0249      	lsls	r1, r1, #9
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	e00b      	b.n	8002cc0 <HAL_RCC_OscConfig+0xdc>
 8002ca8:	4b9b      	ldr	r3, [pc, #620]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b9a      	ldr	r3, [pc, #616]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002cae:	499b      	ldr	r1, [pc, #620]	; (8002f1c <HAL_RCC_OscConfig+0x338>)
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	4b98      	ldr	r3, [pc, #608]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	4b97      	ldr	r3, [pc, #604]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002cba:	4999      	ldr	r1, [pc, #612]	; (8002f20 <HAL_RCC_OscConfig+0x33c>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d014      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7ff fae6 	bl	8002298 <HAL_GetTick>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd0:	e008      	b.n	8002ce4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cd2:	f7ff fae1 	bl	8002298 <HAL_GetTick>
 8002cd6:	0002      	movs	r2, r0
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b64      	cmp	r3, #100	; 0x64
 8002cde:	d901      	bls.n	8002ce4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e28e      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce4:	4b8c      	ldr	r3, [pc, #560]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	2380      	movs	r3, #128	; 0x80
 8002cea:	029b      	lsls	r3, r3, #10
 8002cec:	4013      	ands	r3, r2
 8002cee:	d0f0      	beq.n	8002cd2 <HAL_RCC_OscConfig+0xee>
 8002cf0:	e015      	b.n	8002d1e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf2:	f7ff fad1 	bl	8002298 <HAL_GetTick>
 8002cf6:	0003      	movs	r3, r0
 8002cf8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cfc:	f7ff facc 	bl	8002298 <HAL_GetTick>
 8002d00:	0002      	movs	r2, r0
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e279      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0e:	4b82      	ldr	r3, [pc, #520]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	029b      	lsls	r3, r3, #10
 8002d16:	4013      	ands	r3, r2
 8002d18:	d1f0      	bne.n	8002cfc <HAL_RCC_OscConfig+0x118>
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2202      	movs	r2, #2
 8002d24:	4013      	ands	r3, r2
 8002d26:	d100      	bne.n	8002d2a <HAL_RCC_OscConfig+0x146>
 8002d28:	e06c      	b.n	8002e04 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002d2a:	4b7b      	ldr	r3, [pc, #492]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	220c      	movs	r2, #12
 8002d30:	4013      	ands	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002d34:	4b78      	ldr	r3, [pc, #480]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	220c      	movs	r2, #12
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b08      	cmp	r3, #8
 8002d3e:	d11f      	bne.n	8002d80 <HAL_RCC_OscConfig+0x19c>
 8002d40:	4b75      	ldr	r3, [pc, #468]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	23c0      	movs	r3, #192	; 0xc0
 8002d46:	025b      	lsls	r3, r3, #9
 8002d48:	401a      	ands	r2, r3
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d116      	bne.n	8002d80 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d52:	4b71      	ldr	r3, [pc, #452]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2202      	movs	r2, #2
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_OscConfig+0x184>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e24c      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b6b      	ldr	r3, [pc, #428]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	22f8      	movs	r2, #248	; 0xf8
 8002d6e:	4393      	bics	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	00da      	lsls	r2, r3, #3
 8002d78:	4b67      	ldr	r3, [pc, #412]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d7e:	e041      	b.n	8002e04 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d024      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d88:	4b63      	ldr	r3, [pc, #396]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002d8e:	2101      	movs	r1, #1
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7ff fa80 	bl	8002298 <HAL_GetTick>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7ff fa7b 	bl	8002298 <HAL_GetTick>
 8002da2:	0002      	movs	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e228      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	4b59      	ldr	r3, [pc, #356]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2202      	movs	r2, #2
 8002db6:	4013      	ands	r3, r2
 8002db8:	d0f1      	beq.n	8002d9e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dba:	4b57      	ldr	r3, [pc, #348]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	22f8      	movs	r2, #248	; 0xf8
 8002dc0:	4393      	bics	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	00da      	lsls	r2, r3, #3
 8002dca:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e018      	b.n	8002e04 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd2:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	4b50      	ldr	r3, [pc, #320]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	438a      	bics	r2, r1
 8002ddc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7ff fa5b 	bl	8002298 <HAL_GetTick>
 8002de2:	0003      	movs	r3, r0
 8002de4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de8:	f7ff fa56 	bl	8002298 <HAL_GetTick>
 8002dec:	0002      	movs	r2, r0
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e203      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfa:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2202      	movs	r2, #2
 8002e00:	4013      	ands	r3, r2
 8002e02:	d1f1      	bne.n	8002de8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2208      	movs	r2, #8
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	d036      	beq.n	8002e7c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d019      	beq.n	8002e4a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b40      	ldr	r3, [pc, #256]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e1a:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7ff fa39 	bl	8002298 <HAL_GetTick>
 8002e26:	0003      	movs	r3, r0
 8002e28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7ff fa34 	bl	8002298 <HAL_GetTick>
 8002e30:	0002      	movs	r2, r0
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e1e1      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	4b36      	ldr	r3, [pc, #216]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2202      	movs	r2, #2
 8002e44:	4013      	ands	r3, r2
 8002e46:	d0f1      	beq.n	8002e2c <HAL_RCC_OscConfig+0x248>
 8002e48:	e018      	b.n	8002e7c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4a:	4b33      	ldr	r3, [pc, #204]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e4e:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002e50:	2101      	movs	r1, #1
 8002e52:	438a      	bics	r2, r1
 8002e54:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e56:	f7ff fa1f 	bl	8002298 <HAL_GetTick>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e60:	f7ff fa1a 	bl	8002298 <HAL_GetTick>
 8002e64:	0002      	movs	r2, r0
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e1c7      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e72:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	2202      	movs	r2, #2
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d1f1      	bne.n	8002e60 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2204      	movs	r2, #4
 8002e82:	4013      	ands	r3, r2
 8002e84:	d100      	bne.n	8002e88 <HAL_RCC_OscConfig+0x2a4>
 8002e86:	e0b5      	b.n	8002ff4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e88:	201f      	movs	r0, #31
 8002e8a:	183b      	adds	r3, r7, r0
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e90:	4b21      	ldr	r3, [pc, #132]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002e92:	69da      	ldr	r2, [r3, #28]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	055b      	lsls	r3, r3, #21
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d110      	bne.n	8002ebe <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e9c:	4b1e      	ldr	r3, [pc, #120]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002ea2:	2180      	movs	r1, #128	; 0x80
 8002ea4:	0549      	lsls	r1, r1, #21
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	61da      	str	r2, [r3, #28]
 8002eaa:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002eac:	69da      	ldr	r2, [r3, #28]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	055b      	lsls	r3, r3, #21
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002eb8:	183b      	adds	r3, r7, r0
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_RCC_OscConfig+0x340>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d11a      	bne.n	8002f00 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <HAL_RCC_OscConfig+0x340>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b15      	ldr	r3, [pc, #84]	; (8002f24 <HAL_RCC_OscConfig+0x340>)
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	0049      	lsls	r1, r1, #1
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed8:	f7ff f9de 	bl	8002298 <HAL_GetTick>
 8002edc:	0003      	movs	r3, r0
 8002ede:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee2:	f7ff f9d9 	bl	8002298 <HAL_GetTick>
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b64      	cmp	r3, #100	; 0x64
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e186      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_OscConfig+0x340>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	4013      	ands	r3, r2
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10f      	bne.n	8002f28 <HAL_RCC_OscConfig+0x344>
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002f0a:	6a1a      	ldr	r2, [r3, #32]
 8002f0c:	4b02      	ldr	r3, [pc, #8]	; (8002f18 <HAL_RCC_OscConfig+0x334>)
 8002f0e:	2101      	movs	r1, #1
 8002f10:	430a      	orrs	r2, r1
 8002f12:	621a      	str	r2, [r3, #32]
 8002f14:	e036      	b.n	8002f84 <HAL_RCC_OscConfig+0x3a0>
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	fffeffff 	.word	0xfffeffff
 8002f20:	fffbffff 	.word	0xfffbffff
 8002f24:	40007000 	.word	0x40007000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10c      	bne.n	8002f4a <HAL_RCC_OscConfig+0x366>
 8002f30:	4bb6      	ldr	r3, [pc, #728]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	4bb5      	ldr	r3, [pc, #724]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f36:	2101      	movs	r1, #1
 8002f38:	438a      	bics	r2, r1
 8002f3a:	621a      	str	r2, [r3, #32]
 8002f3c:	4bb3      	ldr	r3, [pc, #716]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f3e:	6a1a      	ldr	r2, [r3, #32]
 8002f40:	4bb2      	ldr	r3, [pc, #712]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f42:	2104      	movs	r1, #4
 8002f44:	438a      	bics	r2, r1
 8002f46:	621a      	str	r2, [r3, #32]
 8002f48:	e01c      	b.n	8002f84 <HAL_RCC_OscConfig+0x3a0>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x388>
 8002f52:	4bae      	ldr	r3, [pc, #696]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f54:	6a1a      	ldr	r2, [r3, #32]
 8002f56:	4bad      	ldr	r3, [pc, #692]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f58:	2104      	movs	r1, #4
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	621a      	str	r2, [r3, #32]
 8002f5e:	4bab      	ldr	r3, [pc, #684]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	4baa      	ldr	r3, [pc, #680]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f64:	2101      	movs	r1, #1
 8002f66:	430a      	orrs	r2, r1
 8002f68:	621a      	str	r2, [r3, #32]
 8002f6a:	e00b      	b.n	8002f84 <HAL_RCC_OscConfig+0x3a0>
 8002f6c:	4ba7      	ldr	r3, [pc, #668]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	4ba6      	ldr	r3, [pc, #664]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f72:	2101      	movs	r1, #1
 8002f74:	438a      	bics	r2, r1
 8002f76:	621a      	str	r2, [r3, #32]
 8002f78:	4ba4      	ldr	r3, [pc, #656]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f7a:	6a1a      	ldr	r2, [r3, #32]
 8002f7c:	4ba3      	ldr	r3, [pc, #652]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002f7e:	2104      	movs	r1, #4
 8002f80:	438a      	bics	r2, r1
 8002f82:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d014      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8c:	f7ff f984 	bl	8002298 <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	e009      	b.n	8002faa <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7ff f97f 	bl	8002298 <HAL_GetTick>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	4a9b      	ldr	r2, [pc, #620]	; (8003210 <HAL_RCC_OscConfig+0x62c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e12b      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002faa:	4b98      	ldr	r3, [pc, #608]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x3b2>
 8002fb4:	e013      	b.n	8002fde <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7ff f96f 	bl	8002298 <HAL_GetTick>
 8002fba:	0003      	movs	r3, r0
 8002fbc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbe:	e009      	b.n	8002fd4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7ff f96a 	bl	8002298 <HAL_GetTick>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	4a91      	ldr	r2, [pc, #580]	; (8003210 <HAL_RCC_OscConfig+0x62c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e116      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd4:	4b8d      	ldr	r3, [pc, #564]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d1f0      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fde:	231f      	movs	r3, #31
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d105      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe8:	4b88      	ldr	r3, [pc, #544]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	4b87      	ldr	r3, [pc, #540]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8002fee:	4989      	ldr	r1, [pc, #548]	; (8003214 <HAL_RCC_OscConfig+0x630>)
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2210      	movs	r2, #16
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d063      	beq.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d12a      	bne.n	800305c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003006:	4b81      	ldr	r3, [pc, #516]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300a:	4b80      	ldr	r3, [pc, #512]	; (800320c <HAL_RCC_OscConfig+0x628>)
 800300c:	2104      	movs	r1, #4
 800300e:	430a      	orrs	r2, r1
 8003010:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003012:	4b7e      	ldr	r3, [pc, #504]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003016:	4b7d      	ldr	r3, [pc, #500]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003018:	2101      	movs	r1, #1
 800301a:	430a      	orrs	r2, r1
 800301c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7ff f93b 	bl	8002298 <HAL_GetTick>
 8003022:	0003      	movs	r3, r0
 8003024:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003028:	f7ff f936 	bl	8002298 <HAL_GetTick>
 800302c:	0002      	movs	r2, r0
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0e3      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800303a:	4b74      	ldr	r3, [pc, #464]	; (800320c <HAL_RCC_OscConfig+0x628>)
 800303c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303e:	2202      	movs	r2, #2
 8003040:	4013      	ands	r3, r2
 8003042:	d0f1      	beq.n	8003028 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003044:	4b71      	ldr	r3, [pc, #452]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003048:	22f8      	movs	r2, #248	; 0xf8
 800304a:	4393      	bics	r3, r2
 800304c:	0019      	movs	r1, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	00da      	lsls	r2, r3, #3
 8003054:	4b6d      	ldr	r3, [pc, #436]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003056:	430a      	orrs	r2, r1
 8003058:	635a      	str	r2, [r3, #52]	; 0x34
 800305a:	e034      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	3305      	adds	r3, #5
 8003062:	d111      	bne.n	8003088 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003064:	4b69      	ldr	r3, [pc, #420]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003068:	4b68      	ldr	r3, [pc, #416]	; (800320c <HAL_RCC_OscConfig+0x628>)
 800306a:	2104      	movs	r1, #4
 800306c:	438a      	bics	r2, r1
 800306e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003070:	4b66      	ldr	r3, [pc, #408]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	22f8      	movs	r2, #248	; 0xf8
 8003076:	4393      	bics	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	00da      	lsls	r2, r3, #3
 8003080:	4b62      	ldr	r3, [pc, #392]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003082:	430a      	orrs	r2, r1
 8003084:	635a      	str	r2, [r3, #52]	; 0x34
 8003086:	e01e      	b.n	80030c6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003088:	4b60      	ldr	r3, [pc, #384]	; (800320c <HAL_RCC_OscConfig+0x628>)
 800308a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800308c:	4b5f      	ldr	r3, [pc, #380]	; (800320c <HAL_RCC_OscConfig+0x628>)
 800308e:	2104      	movs	r1, #4
 8003090:	430a      	orrs	r2, r1
 8003092:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003094:	4b5d      	ldr	r3, [pc, #372]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003098:	4b5c      	ldr	r3, [pc, #368]	; (800320c <HAL_RCC_OscConfig+0x628>)
 800309a:	2101      	movs	r1, #1
 800309c:	438a      	bics	r2, r1
 800309e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a0:	f7ff f8fa 	bl	8002298 <HAL_GetTick>
 80030a4:	0003      	movs	r3, r0
 80030a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80030aa:	f7ff f8f5 	bl	8002298 <HAL_GetTick>
 80030ae:	0002      	movs	r2, r0
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e0a2      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80030bc:	4b53      	ldr	r3, [pc, #332]	; (800320c <HAL_RCC_OscConfig+0x628>)
 80030be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c0:	2202      	movs	r2, #2
 80030c2:	4013      	ands	r3, r2
 80030c4:	d1f1      	bne.n	80030aa <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d100      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4ec>
 80030ce:	e097      	b.n	8003200 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030d0:	4b4e      	ldr	r3, [pc, #312]	; (800320c <HAL_RCC_OscConfig+0x628>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	220c      	movs	r2, #12
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d100      	bne.n	80030de <HAL_RCC_OscConfig+0x4fa>
 80030dc:	e06b      	b.n	80031b6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d14c      	bne.n	8003180 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b49      	ldr	r3, [pc, #292]	; (800320c <HAL_RCC_OscConfig+0x628>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	4b48      	ldr	r3, [pc, #288]	; (800320c <HAL_RCC_OscConfig+0x628>)
 80030ec:	494a      	ldr	r1, [pc, #296]	; (8003218 <HAL_RCC_OscConfig+0x634>)
 80030ee:	400a      	ands	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f2:	f7ff f8d1 	bl	8002298 <HAL_GetTick>
 80030f6:	0003      	movs	r3, r0
 80030f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fc:	f7ff f8cc 	bl	8002298 <HAL_GetTick>
 8003100:	0002      	movs	r2, r0
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e079      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800310e:	4b3f      	ldr	r3, [pc, #252]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	049b      	lsls	r3, r3, #18
 8003116:	4013      	ands	r3, r2
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311a:	4b3c      	ldr	r3, [pc, #240]	; (800320c <HAL_RCC_OscConfig+0x628>)
 800311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311e:	220f      	movs	r2, #15
 8003120:	4393      	bics	r3, r2
 8003122:	0019      	movs	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003128:	4b38      	ldr	r3, [pc, #224]	; (800320c <HAL_RCC_OscConfig+0x628>)
 800312a:	430a      	orrs	r2, r1
 800312c:	62da      	str	r2, [r3, #44]	; 0x2c
 800312e:	4b37      	ldr	r3, [pc, #220]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	4a3a      	ldr	r2, [pc, #232]	; (800321c <HAL_RCC_OscConfig+0x638>)
 8003134:	4013      	ands	r3, r2
 8003136:	0019      	movs	r1, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	431a      	orrs	r2, r3
 8003142:	4b32      	ldr	r3, [pc, #200]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003148:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_RCC_OscConfig+0x628>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b2f      	ldr	r3, [pc, #188]	; (800320c <HAL_RCC_OscConfig+0x628>)
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	0449      	lsls	r1, r1, #17
 8003152:	430a      	orrs	r2, r1
 8003154:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003156:	f7ff f89f 	bl	8002298 <HAL_GetTick>
 800315a:	0003      	movs	r3, r0
 800315c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003160:	f7ff f89a 	bl	8002298 <HAL_GetTick>
 8003164:	0002      	movs	r2, r0
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e047      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	049b      	lsls	r3, r3, #18
 800317a:	4013      	ands	r3, r2
 800317c:	d0f0      	beq.n	8003160 <HAL_RCC_OscConfig+0x57c>
 800317e:	e03f      	b.n	8003200 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003180:	4b22      	ldr	r3, [pc, #136]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b21      	ldr	r3, [pc, #132]	; (800320c <HAL_RCC_OscConfig+0x628>)
 8003186:	4924      	ldr	r1, [pc, #144]	; (8003218 <HAL_RCC_OscConfig+0x634>)
 8003188:	400a      	ands	r2, r1
 800318a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318c:	f7ff f884 	bl	8002298 <HAL_GetTick>
 8003190:	0003      	movs	r3, r0
 8003192:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003196:	f7ff f87f 	bl	8002298 <HAL_GetTick>
 800319a:	0002      	movs	r2, r0
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e02c      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_RCC_OscConfig+0x628>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	049b      	lsls	r3, r3, #18
 80031b0:	4013      	ands	r3, r2
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCC_OscConfig+0x5b2>
 80031b4:	e024      	b.n	8003200 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e01f      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_RCC_OscConfig+0x628>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80031c8:	4b10      	ldr	r3, [pc, #64]	; (800320c <HAL_RCC_OscConfig+0x628>)
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	697a      	ldr	r2, [r7, #20]
 80031d0:	23c0      	movs	r3, #192	; 0xc0
 80031d2:	025b      	lsls	r3, r3, #9
 80031d4:	401a      	ands	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031da:	429a      	cmp	r2, r3
 80031dc:	d10e      	bne.n	80031fc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	220f      	movs	r2, #15
 80031e2:	401a      	ands	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	23f0      	movs	r3, #240	; 0xf0
 80031f0:	039b      	lsls	r3, r3, #14
 80031f2:	401a      	ands	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	0018      	movs	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	b008      	add	sp, #32
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	00001388 	.word	0x00001388
 8003214:	efffffff 	.word	0xefffffff
 8003218:	feffffff 	.word	0xfeffffff
 800321c:	ffc27fff 	.word	0xffc27fff

08003220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0b3      	b.n	800339c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b5b      	ldr	r3, [pc, #364]	; (80033a4 <HAL_RCC_ClockConfig+0x184>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2201      	movs	r2, #1
 800323a:	4013      	ands	r3, r2
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d911      	bls.n	8003266 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b58      	ldr	r3, [pc, #352]	; (80033a4 <HAL_RCC_ClockConfig+0x184>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2201      	movs	r2, #1
 8003248:	4393      	bics	r3, r2
 800324a:	0019      	movs	r1, r3
 800324c:	4b55      	ldr	r3, [pc, #340]	; (80033a4 <HAL_RCC_ClockConfig+0x184>)
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003254:	4b53      	ldr	r3, [pc, #332]	; (80033a4 <HAL_RCC_ClockConfig+0x184>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2201      	movs	r2, #1
 800325a:	4013      	ands	r3, r2
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d001      	beq.n	8003266 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e09a      	b.n	800339c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2202      	movs	r2, #2
 800326c:	4013      	ands	r3, r2
 800326e:	d015      	beq.n	800329c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2204      	movs	r2, #4
 8003276:	4013      	ands	r3, r2
 8003278:	d006      	beq.n	8003288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800327a:	4b4b      	ldr	r3, [pc, #300]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	4b4a      	ldr	r3, [pc, #296]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 8003280:	21e0      	movs	r1, #224	; 0xe0
 8003282:	00c9      	lsls	r1, r1, #3
 8003284:	430a      	orrs	r2, r1
 8003286:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003288:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	22f0      	movs	r2, #240	; 0xf0
 800328e:	4393      	bics	r3, r2
 8003290:	0019      	movs	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	4b44      	ldr	r3, [pc, #272]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 8003298:	430a      	orrs	r2, r1
 800329a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2201      	movs	r2, #1
 80032a2:	4013      	ands	r3, r2
 80032a4:	d040      	beq.n	8003328 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d107      	bne.n	80032be <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ae:	4b3e      	ldr	r3, [pc, #248]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	029b      	lsls	r3, r3, #10
 80032b6:	4013      	ands	r3, r2
 80032b8:	d114      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e06e      	b.n	800339c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c6:	4b38      	ldr	r3, [pc, #224]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	049b      	lsls	r3, r3, #18
 80032ce:	4013      	ands	r3, r2
 80032d0:	d108      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e062      	b.n	800339c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d6:	4b34      	ldr	r3, [pc, #208]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2202      	movs	r2, #2
 80032dc:	4013      	ands	r3, r2
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e05b      	b.n	800339c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e4:	4b30      	ldr	r3, [pc, #192]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	4393      	bics	r3, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	4b2d      	ldr	r3, [pc, #180]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 80032f4:	430a      	orrs	r2, r1
 80032f6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f8:	f7fe ffce 	bl	8002298 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003300:	e009      	b.n	8003316 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003302:	f7fe ffc9 	bl	8002298 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	4a27      	ldr	r2, [pc, #156]	; (80033ac <HAL_RCC_ClockConfig+0x18c>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e042      	b.n	800339c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	4b24      	ldr	r3, [pc, #144]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	220c      	movs	r2, #12
 800331c:	401a      	ands	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	429a      	cmp	r2, r3
 8003326:	d1ec      	bne.n	8003302 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <HAL_RCC_ClockConfig+0x184>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2201      	movs	r2, #1
 800332e:	4013      	ands	r3, r2
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d211      	bcs.n	800335a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b1b      	ldr	r3, [pc, #108]	; (80033a4 <HAL_RCC_ClockConfig+0x184>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	4393      	bics	r3, r2
 800333e:	0019      	movs	r1, r3
 8003340:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_RCC_ClockConfig+0x184>)
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003348:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <HAL_RCC_ClockConfig+0x184>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e020      	b.n	800339c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2204      	movs	r2, #4
 8003360:	4013      	ands	r3, r2
 8003362:	d009      	beq.n	8003378 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003364:	4b10      	ldr	r3, [pc, #64]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <HAL_RCC_ClockConfig+0x190>)
 800336a:	4013      	ands	r3, r2
 800336c:	0019      	movs	r1, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	4b0d      	ldr	r3, [pc, #52]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 8003374:	430a      	orrs	r2, r1
 8003376:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003378:	f000 f820 	bl	80033bc <HAL_RCC_GetSysClockFreq>
 800337c:	0001      	movs	r1, r0
 800337e:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <HAL_RCC_ClockConfig+0x188>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	091b      	lsrs	r3, r3, #4
 8003384:	220f      	movs	r2, #15
 8003386:	4013      	ands	r3, r2
 8003388:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <HAL_RCC_ClockConfig+0x194>)
 800338a:	5cd3      	ldrb	r3, [r2, r3]
 800338c:	000a      	movs	r2, r1
 800338e:	40da      	lsrs	r2, r3
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_RCC_ClockConfig+0x198>)
 8003392:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003394:	2003      	movs	r0, #3
 8003396:	f7fe ff39 	bl	800220c <HAL_InitTick>
  
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	0018      	movs	r0, r3
 800339e:	46bd      	mov	sp, r7
 80033a0:	b004      	add	sp, #16
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40022000 	.word	0x40022000
 80033a8:	40021000 	.word	0x40021000
 80033ac:	00001388 	.word	0x00001388
 80033b0:	fffff8ff 	.word	0xfffff8ff
 80033b4:	08005d70 	.word	0x08005d70
 80033b8:	20000010 	.word	0x20000010

080033bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60fb      	str	r3, [r7, #12]
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
 80033ce:	2300      	movs	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80033d6:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_RCC_GetSysClockFreq+0xa0>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	220c      	movs	r2, #12
 80033e0:	4013      	ands	r3, r2
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d002      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x30>
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d003      	beq.n	80033f2 <HAL_RCC_GetSysClockFreq+0x36>
 80033ea:	e02e      	b.n	800344a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033ec:	4b1c      	ldr	r3, [pc, #112]	; (8003460 <HAL_RCC_GetSysClockFreq+0xa4>)
 80033ee:	613b      	str	r3, [r7, #16]
      break;
 80033f0:	e02e      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	0c9b      	lsrs	r3, r3, #18
 80033f6:	220f      	movs	r2, #15
 80033f8:	4013      	ands	r3, r2
 80033fa:	4a1a      	ldr	r2, [pc, #104]	; (8003464 <HAL_RCC_GetSysClockFreq+0xa8>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	220f      	movs	r2, #15
 8003406:	4013      	ands	r3, r2
 8003408:	4a17      	ldr	r2, [pc, #92]	; (8003468 <HAL_RCC_GetSysClockFreq+0xac>)
 800340a:	5cd3      	ldrb	r3, [r2, r3]
 800340c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	23c0      	movs	r3, #192	; 0xc0
 8003412:	025b      	lsls	r3, r3, #9
 8003414:	401a      	ands	r2, r3
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	025b      	lsls	r3, r3, #9
 800341a:	429a      	cmp	r2, r3
 800341c:	d109      	bne.n	8003432 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	480f      	ldr	r0, [pc, #60]	; (8003460 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003422:	f7fc fe6f 	bl	8000104 <__udivsi3>
 8003426:	0003      	movs	r3, r0
 8003428:	001a      	movs	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4353      	muls	r3, r2
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	e008      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003432:	68b9      	ldr	r1, [r7, #8]
 8003434:	480a      	ldr	r0, [pc, #40]	; (8003460 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003436:	f7fc fe65 	bl	8000104 <__udivsi3>
 800343a:	0003      	movs	r3, r0
 800343c:	001a      	movs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4353      	muls	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	613b      	str	r3, [r7, #16]
      break;
 8003448:	e002      	b.n	8003450 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800344a:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetSysClockFreq+0xa4>)
 800344c:	613b      	str	r3, [r7, #16]
      break;
 800344e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003450:	693b      	ldr	r3, [r7, #16]
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b006      	add	sp, #24
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	40021000 	.word	0x40021000
 8003460:	007a1200 	.word	0x007a1200
 8003464:	08005d80 	.word	0x08005d80
 8003468:	08005d90 	.word	0x08005d90

0800346c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e0a8      	b.n	80035d0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	2382      	movs	r3, #130	; 0x82
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	429a      	cmp	r2, r3
 8003490:	d009      	beq.n	80034a6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	61da      	str	r2, [r3, #28]
 8003498:	e005      	b.n	80034a6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	225d      	movs	r2, #93	; 0x5d
 80034b0:	5c9b      	ldrb	r3, [r3, r2]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	225c      	movs	r2, #92	; 0x5c
 80034bc:	2100      	movs	r1, #0
 80034be:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	0018      	movs	r0, r3
 80034c4:	f7fe fdfc 	bl	80020c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	225d      	movs	r2, #93	; 0x5d
 80034cc:	2102      	movs	r1, #2
 80034ce:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2140      	movs	r1, #64	; 0x40
 80034dc:	438a      	bics	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	23e0      	movs	r3, #224	; 0xe0
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d902      	bls.n	80034f2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	e002      	b.n	80034f8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80034f2:	2380      	movs	r3, #128	; 0x80
 80034f4:	015b      	lsls	r3, r3, #5
 80034f6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	23f0      	movs	r3, #240	; 0xf0
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	429a      	cmp	r2, r3
 8003502:	d008      	beq.n	8003516 <HAL_SPI_Init+0xaa>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	23e0      	movs	r3, #224	; 0xe0
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	429a      	cmp	r2, r3
 800350e:	d002      	beq.n	8003516 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	2382      	movs	r3, #130	; 0x82
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	401a      	ands	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	2384      	movs	r3, #132	; 0x84
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	400b      	ands	r3, r1
 800352a:	431a      	orrs	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	2102      	movs	r1, #2
 8003532:	400b      	ands	r3, r1
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	2101      	movs	r1, #1
 800353c:	400b      	ands	r3, r1
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6999      	ldr	r1, [r3, #24]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	400b      	ands	r3, r1
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	2138      	movs	r1, #56	; 0x38
 8003552:	400b      	ands	r3, r1
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	2180      	movs	r1, #128	; 0x80
 800355c:	400b      	ands	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	0011      	movs	r1, r2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	019b      	lsls	r3, r3, #6
 800356a:	401a      	ands	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	2204      	movs	r2, #4
 800357c:	401a      	ands	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	2110      	movs	r1, #16
 8003584:	400b      	ands	r3, r1
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358c:	2108      	movs	r1, #8
 800358e:	400b      	ands	r3, r1
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68d9      	ldr	r1, [r3, #12]
 8003596:	23f0      	movs	r3, #240	; 0xf0
 8003598:	011b      	lsls	r3, r3, #4
 800359a:	400b      	ands	r3, r1
 800359c:	431a      	orrs	r2, r3
 800359e:	0011      	movs	r1, r2
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	015b      	lsls	r3, r3, #5
 80035a6:	401a      	ands	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4907      	ldr	r1, [pc, #28]	; (80035d8 <HAL_SPI_Init+0x16c>)
 80035bc:	400a      	ands	r2, r1
 80035be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	225d      	movs	r2, #93	; 0x5d
 80035ca:	2101      	movs	r1, #1
 80035cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b004      	add	sp, #16
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	fffff7ff 	.word	0xfffff7ff

080035dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	1dbb      	adds	r3, r7, #6
 80035ea:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ec:	231f      	movs	r3, #31
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	225c      	movs	r2, #92	; 0x5c
 80035f8:	5c9b      	ldrb	r3, [r3, r2]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_SPI_Transmit+0x26>
 80035fe:	2302      	movs	r3, #2
 8003600:	e147      	b.n	8003892 <HAL_SPI_Transmit+0x2b6>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	225c      	movs	r2, #92	; 0x5c
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800360a:	f7fe fe45 	bl	8002298 <HAL_GetTick>
 800360e:	0003      	movs	r3, r0
 8003610:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003612:	2316      	movs	r3, #22
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	1dba      	adds	r2, r7, #6
 8003618:	8812      	ldrh	r2, [r2, #0]
 800361a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	225d      	movs	r2, #93	; 0x5d
 8003620:	5c9b      	ldrb	r3, [r3, r2]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b01      	cmp	r3, #1
 8003626:	d004      	beq.n	8003632 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8003628:	231f      	movs	r3, #31
 800362a:	18fb      	adds	r3, r7, r3
 800362c:	2202      	movs	r2, #2
 800362e:	701a      	strb	r2, [r3, #0]
    goto error;
 8003630:	e128      	b.n	8003884 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_SPI_Transmit+0x64>
 8003638:	1dbb      	adds	r3, r7, #6
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d104      	bne.n	800364a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8003640:	231f      	movs	r3, #31
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
    goto error;
 8003648:	e11c      	b.n	8003884 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	225d      	movs	r2, #93	; 0x5d
 800364e:	2103      	movs	r1, #3
 8003650:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	1dba      	adds	r2, r7, #6
 8003662:	8812      	ldrh	r2, [r2, #0]
 8003664:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1dba      	adds	r2, r7, #6
 800366a:	8812      	ldrh	r2, [r2, #0]
 800366c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2244      	movs	r2, #68	; 0x44
 8003678:	2100      	movs	r1, #0
 800367a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2246      	movs	r2, #70	; 0x46
 8003680:	2100      	movs	r1, #0
 8003682:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	021b      	lsls	r3, r3, #8
 8003698:	429a      	cmp	r2, r3
 800369a:	d110      	bne.n	80036be <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2140      	movs	r1, #64	; 0x40
 80036a8:	438a      	bics	r2, r1
 80036aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2180      	movs	r1, #128	; 0x80
 80036b8:	01c9      	lsls	r1, r1, #7
 80036ba:	430a      	orrs	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d007      	beq.n	80036dc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2140      	movs	r1, #64	; 0x40
 80036d8:	430a      	orrs	r2, r1
 80036da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	23e0      	movs	r3, #224	; 0xe0
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d952      	bls.n	800378e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d004      	beq.n	80036fa <HAL_SPI_Transmit+0x11e>
 80036f0:	2316      	movs	r3, #22
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d143      	bne.n	8003782 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	881a      	ldrh	r2, [r3, #0]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003714:	b29b      	uxth	r3, r3
 8003716:	3b01      	subs	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800371e:	e030      	b.n	8003782 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2202      	movs	r2, #2
 8003728:	4013      	ands	r3, r2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d112      	bne.n	8003754 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	881a      	ldrh	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	1c9a      	adds	r2, r3, #2
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003752:	e016      	b.n	8003782 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003754:	f7fe fda0 	bl	8002298 <HAL_GetTick>
 8003758:	0002      	movs	r2, r0
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d802      	bhi.n	800376a <HAL_SPI_Transmit+0x18e>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	3301      	adds	r3, #1
 8003768:	d102      	bne.n	8003770 <HAL_SPI_Transmit+0x194>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d108      	bne.n	8003782 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003770:	231f      	movs	r3, #31
 8003772:	18fb      	adds	r3, r7, r3
 8003774:	2203      	movs	r2, #3
 8003776:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	225d      	movs	r2, #93	; 0x5d
 800377c:	2101      	movs	r1, #1
 800377e:	5499      	strb	r1, [r3, r2]
          goto error;
 8003780:	e080      	b.n	8003884 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1c9      	bne.n	8003720 <HAL_SPI_Transmit+0x144>
 800378c:	e053      	b.n	8003836 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d004      	beq.n	80037a0 <HAL_SPI_Transmit+0x1c4>
 8003796:	2316      	movs	r3, #22
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d145      	bne.n	800382c <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	7812      	ldrb	r2, [r2, #0]
 80037ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80037c6:	e031      	b.n	800382c <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2202      	movs	r2, #2
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d113      	bne.n	80037fe <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037fc:	e016      	b.n	800382c <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037fe:	f7fe fd4b 	bl	8002298 <HAL_GetTick>
 8003802:	0002      	movs	r2, r0
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d802      	bhi.n	8003814 <HAL_SPI_Transmit+0x238>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	3301      	adds	r3, #1
 8003812:	d102      	bne.n	800381a <HAL_SPI_Transmit+0x23e>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d108      	bne.n	800382c <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800381a:	231f      	movs	r3, #31
 800381c:	18fb      	adds	r3, r7, r3
 800381e:	2203      	movs	r2, #3
 8003820:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	225d      	movs	r2, #93	; 0x5d
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]
          goto error;
 800382a:	e02b      	b.n	8003884 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1c8      	bne.n	80037c8 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	6839      	ldr	r1, [r7, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	0018      	movs	r0, r3
 800383e:	f000 f95d 	bl	8003afc <SPI_EndRxTxTransaction>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d002      	beq.n	800384c <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10a      	bne.n	800386a <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800386e:	2b00      	cmp	r3, #0
 8003870:	d004      	beq.n	800387c <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003872:	231f      	movs	r3, #31
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	e003      	b.n	8003884 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	225d      	movs	r2, #93	; 0x5d
 8003880:	2101      	movs	r1, #1
 8003882:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	225c      	movs	r2, #92	; 0x5c
 8003888:	2100      	movs	r1, #0
 800388a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800388c:	231f      	movs	r3, #31
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	781b      	ldrb	r3, [r3, #0]
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	b008      	add	sp, #32
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	1dfb      	adds	r3, r7, #7
 80038aa:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80038ac:	f7fe fcf4 	bl	8002298 <HAL_GetTick>
 80038b0:	0002      	movs	r2, r0
 80038b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80038bc:	f7fe fcec 	bl	8002298 <HAL_GetTick>
 80038c0:	0003      	movs	r3, r0
 80038c2:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80038c4:	4b3a      	ldr	r3, [pc, #232]	; (80039b0 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	015b      	lsls	r3, r3, #5
 80038ca:	0d1b      	lsrs	r3, r3, #20
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	4353      	muls	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038d2:	e058      	b.n	8003986 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	3301      	adds	r3, #1
 80038d8:	d055      	beq.n	8003986 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038da:	f7fe fcdd 	bl	8002298 <HAL_GetTick>
 80038de:	0002      	movs	r2, r0
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	69fa      	ldr	r2, [r7, #28]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d902      	bls.n	80038f0 <SPI_WaitFlagStateUntilTimeout+0x54>
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d142      	bne.n	8003976 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	21e0      	movs	r1, #224	; 0xe0
 80038fc:	438a      	bics	r2, r1
 80038fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	2382      	movs	r3, #130	; 0x82
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	429a      	cmp	r2, r3
 800390a:	d113      	bne.n	8003934 <SPI_WaitFlagStateUntilTimeout+0x98>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	2380      	movs	r3, #128	; 0x80
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	429a      	cmp	r2, r3
 8003916:	d005      	beq.n	8003924 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	429a      	cmp	r2, r3
 8003922:	d107      	bne.n	8003934 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2140      	movs	r1, #64	; 0x40
 8003930:	438a      	bics	r2, r1
 8003932:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	019b      	lsls	r3, r3, #6
 800393c:	429a      	cmp	r2, r3
 800393e:	d110      	bne.n	8003962 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	491a      	ldr	r1, [pc, #104]	; (80039b4 <SPI_WaitFlagStateUntilTimeout+0x118>)
 800394c:	400a      	ands	r2, r1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2180      	movs	r1, #128	; 0x80
 800395c:	0189      	lsls	r1, r1, #6
 800395e:	430a      	orrs	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	225d      	movs	r2, #93	; 0x5d
 8003966:	2101      	movs	r1, #1
 8003968:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	225c      	movs	r2, #92	; 0x5c
 800396e:	2100      	movs	r1, #0
 8003970:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e017      	b.n	80039a6 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d101      	bne.n	8003980 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	3b01      	subs	r3, #1
 8003984:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	68ba      	ldr	r2, [r7, #8]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	425a      	negs	r2, r3
 8003996:	4153      	adcs	r3, r2
 8003998:	b2db      	uxtb	r3, r3
 800399a:	001a      	movs	r2, r3
 800399c:	1dfb      	adds	r3, r7, #7
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d197      	bne.n	80038d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b008      	add	sp, #32
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	46c0      	nop			; (mov r8, r8)
 80039b0:	20000010 	.word	0x20000010
 80039b4:	ffffdfff 	.word	0xffffdfff

080039b8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b08a      	sub	sp, #40	; 0x28
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80039c6:	2317      	movs	r3, #23
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80039ce:	f7fe fc63 	bl	8002298 <HAL_GetTick>
 80039d2:	0002      	movs	r2, r0
 80039d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	18d3      	adds	r3, r2, r3
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80039de:	f7fe fc5b 	bl	8002298 <HAL_GetTick>
 80039e2:	0003      	movs	r3, r0
 80039e4:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	330c      	adds	r3, #12
 80039ec:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80039ee:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	0013      	movs	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	189b      	adds	r3, r3, r2
 80039f8:	00da      	lsls	r2, r3, #3
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	0d1b      	lsrs	r3, r3, #20
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	4353      	muls	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a04:	e068      	b.n	8003ad8 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	23c0      	movs	r3, #192	; 0xc0
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d10a      	bne.n	8003a26 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d107      	bne.n	8003a26 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	2117      	movs	r1, #23
 8003a1e:	187b      	adds	r3, r7, r1
 8003a20:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a22:	187b      	adds	r3, r7, r1
 8003a24:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	3301      	adds	r3, #1
 8003a2a:	d055      	beq.n	8003ad8 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a2c:	f7fe fc34 	bl	8002298 <HAL_GetTick>
 8003a30:	0002      	movs	r2, r0
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d902      	bls.n	8003a42 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d142      	bne.n	8003ac8 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	21e0      	movs	r1, #224	; 0xe0
 8003a4e:	438a      	bics	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	2382      	movs	r3, #130	; 0x82
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d113      	bne.n	8003a86 <SPI_WaitFifoStateUntilTimeout+0xce>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	021b      	lsls	r3, r3, #8
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d005      	beq.n	8003a76 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d107      	bne.n	8003a86 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2140      	movs	r1, #64	; 0x40
 8003a82:	438a      	bics	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a8a:	2380      	movs	r3, #128	; 0x80
 8003a8c:	019b      	lsls	r3, r3, #6
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d110      	bne.n	8003ab4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4916      	ldr	r1, [pc, #88]	; (8003af8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2180      	movs	r1, #128	; 0x80
 8003aae:	0189      	lsls	r1, r1, #6
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	225d      	movs	r2, #93	; 0x5d
 8003ab8:	2101      	movs	r1, #1
 8003aba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	225c      	movs	r2, #92	; 0x5c
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e010      	b.n	8003aea <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d18e      	bne.n	8003a06 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	0018      	movs	r0, r3
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b00a      	add	sp, #40	; 0x28
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	46c0      	nop			; (mov r8, r8)
 8003af4:	20000010 	.word	0x20000010
 8003af8:	ffffdfff 	.word	0xffffdfff

08003afc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	23c0      	movs	r3, #192	; 0xc0
 8003b0c:	0159      	lsls	r1, r3, #5
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	0013      	movs	r3, r2
 8003b16:	2200      	movs	r2, #0
 8003b18:	f7ff ff4e 	bl	80039b8 <SPI_WaitFifoStateUntilTimeout>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d007      	beq.n	8003b30 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b24:	2220      	movs	r2, #32
 8003b26:	431a      	orrs	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e027      	b.n	8003b80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	0013      	movs	r3, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2180      	movs	r1, #128	; 0x80
 8003b3e:	f7ff fead 	bl	800389c <SPI_WaitFlagStateUntilTimeout>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	d007      	beq.n	8003b56 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e014      	b.n	8003b80 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	23c0      	movs	r3, #192	; 0xc0
 8003b5a:	00d9      	lsls	r1, r3, #3
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	0013      	movs	r3, r2
 8003b64:	2200      	movs	r2, #0
 8003b66:	f7ff ff27 	bl	80039b8 <SPI_WaitFifoStateUntilTimeout>
 8003b6a:	1e03      	subs	r3, r0, #0
 8003b6c:	d007      	beq.n	8003b7e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b72:	2220      	movs	r2, #32
 8003b74:	431a      	orrs	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e000      	b.n	8003b80 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	0018      	movs	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b004      	add	sp, #16
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <memset>:
 8003b88:	0003      	movs	r3, r0
 8003b8a:	1882      	adds	r2, r0, r2
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d100      	bne.n	8003b92 <memset+0xa>
 8003b90:	4770      	bx	lr
 8003b92:	7019      	strb	r1, [r3, #0]
 8003b94:	3301      	adds	r3, #1
 8003b96:	e7f9      	b.n	8003b8c <memset+0x4>

08003b98 <__libc_init_array>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	2600      	movs	r6, #0
 8003b9c:	4c0c      	ldr	r4, [pc, #48]	; (8003bd0 <__libc_init_array+0x38>)
 8003b9e:	4d0d      	ldr	r5, [pc, #52]	; (8003bd4 <__libc_init_array+0x3c>)
 8003ba0:	1b64      	subs	r4, r4, r5
 8003ba2:	10a4      	asrs	r4, r4, #2
 8003ba4:	42a6      	cmp	r6, r4
 8003ba6:	d109      	bne.n	8003bbc <__libc_init_array+0x24>
 8003ba8:	2600      	movs	r6, #0
 8003baa:	f000 f819 	bl	8003be0 <_init>
 8003bae:	4c0a      	ldr	r4, [pc, #40]	; (8003bd8 <__libc_init_array+0x40>)
 8003bb0:	4d0a      	ldr	r5, [pc, #40]	; (8003bdc <__libc_init_array+0x44>)
 8003bb2:	1b64      	subs	r4, r4, r5
 8003bb4:	10a4      	asrs	r4, r4, #2
 8003bb6:	42a6      	cmp	r6, r4
 8003bb8:	d105      	bne.n	8003bc6 <__libc_init_array+0x2e>
 8003bba:	bd70      	pop	{r4, r5, r6, pc}
 8003bbc:	00b3      	lsls	r3, r6, #2
 8003bbe:	58eb      	ldr	r3, [r5, r3]
 8003bc0:	4798      	blx	r3
 8003bc2:	3601      	adds	r6, #1
 8003bc4:	e7ee      	b.n	8003ba4 <__libc_init_array+0xc>
 8003bc6:	00b3      	lsls	r3, r6, #2
 8003bc8:	58eb      	ldr	r3, [r5, r3]
 8003bca:	4798      	blx	r3
 8003bcc:	3601      	adds	r6, #1
 8003bce:	e7f2      	b.n	8003bb6 <__libc_init_array+0x1e>
 8003bd0:	08005da0 	.word	0x08005da0
 8003bd4:	08005da0 	.word	0x08005da0
 8003bd8:	08005da4 	.word	0x08005da4
 8003bdc:	08005da0 	.word	0x08005da0

08003be0 <_init>:
 8003be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be6:	bc08      	pop	{r3}
 8003be8:	469e      	mov	lr, r3
 8003bea:	4770      	bx	lr

08003bec <_fini>:
 8003bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bf2:	bc08      	pop	{r3}
 8003bf4:	469e      	mov	lr, r3
 8003bf6:	4770      	bx	lr
