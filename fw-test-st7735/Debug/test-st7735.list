
test-st7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008840  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a9c  080088fc  080088fc  000188fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b398  0800b398  0002004c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b398  0800b398  0002004c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b398  0800b398  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b398  0800b398  0001b398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b39c  0800b39c  0001b39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000004c  20000000  0800b3a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000050  0800b3ec  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  0800b3ec  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a763  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023af  00000000  00000000  0002a7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002cb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002d620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011ea7  00000000  00000000  0002df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de2b  00000000  00000000  0003fe1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065e2a  00000000  00000000  0004dc4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b3a74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002868  00000000  00000000  000b3ac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000050 	.word	0x20000050
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080088e4 	.word	0x080088e4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000054 	.word	0x20000054
 8000100:	080088e4 	.word	0x080088e4

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cdrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0010      	movs	r0, r2
 80003f4:	4662      	mov	r2, ip
 80003f6:	468c      	mov	ip, r1
 80003f8:	0019      	movs	r1, r3
 80003fa:	4663      	mov	r3, ip
 80003fc:	e000      	b.n	8000400 <__aeabi_cdcmpeq>
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <__aeabi_cdcmpeq>:
 8000400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000402:	f001 fadd 	bl	80019c0 <__ledf2>
 8000406:	2800      	cmp	r0, #0
 8000408:	d401      	bmi.n	800040e <__aeabi_cdcmpeq+0xe>
 800040a:	2100      	movs	r1, #0
 800040c:	42c8      	cmn	r0, r1
 800040e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000410 <__aeabi_dcmpeq>:
 8000410:	b510      	push	{r4, lr}
 8000412:	f001 fa2d 	bl	8001870 <__eqdf2>
 8000416:	4240      	negs	r0, r0
 8000418:	3001      	adds	r0, #1
 800041a:	bd10      	pop	{r4, pc}

0800041c <__aeabi_dcmplt>:
 800041c:	b510      	push	{r4, lr}
 800041e:	f001 facf 	bl	80019c0 <__ledf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	db01      	blt.n	800042a <__aeabi_dcmplt+0xe>
 8000426:	2000      	movs	r0, #0
 8000428:	bd10      	pop	{r4, pc}
 800042a:	2001      	movs	r0, #1
 800042c:	bd10      	pop	{r4, pc}
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dcmple>:
 8000430:	b510      	push	{r4, lr}
 8000432:	f001 fac5 	bl	80019c0 <__ledf2>
 8000436:	2800      	cmp	r0, #0
 8000438:	dd01      	ble.n	800043e <__aeabi_dcmple+0xe>
 800043a:	2000      	movs	r0, #0
 800043c:	bd10      	pop	{r4, pc}
 800043e:	2001      	movs	r0, #1
 8000440:	bd10      	pop	{r4, pc}
 8000442:	46c0      	nop			; (mov r8, r8)

08000444 <__aeabi_dcmpgt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fa55 	bl	80018f4 <__gedf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	dc01      	bgt.n	8000452 <__aeabi_dcmpgt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmpge>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa4b 	bl	80018f4 <__gedf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	da01      	bge.n	8000466 <__aeabi_dcmpge+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_cfrcmple>:
 800046c:	4684      	mov	ip, r0
 800046e:	0008      	movs	r0, r1
 8000470:	4661      	mov	r1, ip
 8000472:	e7ff      	b.n	8000474 <__aeabi_cfcmpeq>

08000474 <__aeabi_cfcmpeq>:
 8000474:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000476:	f000 fb8b 	bl	8000b90 <__lesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	d401      	bmi.n	8000482 <__aeabi_cfcmpeq+0xe>
 800047e:	2100      	movs	r1, #0
 8000480:	42c8      	cmn	r0, r1
 8000482:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000484 <__aeabi_fcmpeq>:
 8000484:	b510      	push	{r4, lr}
 8000486:	f000 fb17 	bl	8000ab8 <__eqsf2>
 800048a:	4240      	negs	r0, r0
 800048c:	3001      	adds	r0, #1
 800048e:	bd10      	pop	{r4, pc}

08000490 <__aeabi_fcmplt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 fb7d 	bl	8000b90 <__lesf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	db01      	blt.n	800049e <__aeabi_fcmplt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fcmple>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f000 fb73 	bl	8000b90 <__lesf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	dd01      	ble.n	80004b2 <__aeabi_fcmple+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_fcmpgt>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fb23 	bl	8000b04 <__gesf2>
 80004be:	2800      	cmp	r0, #0
 80004c0:	dc01      	bgt.n	80004c6 <__aeabi_fcmpgt+0xe>
 80004c2:	2000      	movs	r0, #0
 80004c4:	bd10      	pop	{r4, pc}
 80004c6:	2001      	movs	r0, #1
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <__aeabi_fcmpge>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb19 	bl	8000b04 <__gesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	da01      	bge.n	80004da <__aeabi_fcmpge+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_f2uiz>:
 80004e0:	219e      	movs	r1, #158	; 0x9e
 80004e2:	b510      	push	{r4, lr}
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	1c04      	adds	r4, r0, #0
 80004e8:	f7ff fff0 	bl	80004cc <__aeabi_fcmpge>
 80004ec:	2800      	cmp	r0, #0
 80004ee:	d103      	bne.n	80004f8 <__aeabi_f2uiz+0x18>
 80004f0:	1c20      	adds	r0, r4, #0
 80004f2:	f000 fe65 	bl	80011c0 <__aeabi_f2iz>
 80004f6:	bd10      	pop	{r4, pc}
 80004f8:	219e      	movs	r1, #158	; 0x9e
 80004fa:	1c20      	adds	r0, r4, #0
 80004fc:	05c9      	lsls	r1, r1, #23
 80004fe:	f000 fcb1 	bl	8000e64 <__aeabi_fsub>
 8000502:	f000 fe5d 	bl	80011c0 <__aeabi_f2iz>
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	061b      	lsls	r3, r3, #24
 800050a:	469c      	mov	ip, r3
 800050c:	4460      	add	r0, ip
 800050e:	e7f2      	b.n	80004f6 <__aeabi_f2uiz+0x16>

08000510 <__aeabi_d2uiz>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2200      	movs	r2, #0
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <__aeabi_d2uiz+0x38>)
 8000516:	0004      	movs	r4, r0
 8000518:	000d      	movs	r5, r1
 800051a:	f7ff ff9d 	bl	8000458 <__aeabi_dcmpge>
 800051e:	2800      	cmp	r0, #0
 8000520:	d104      	bne.n	800052c <__aeabi_d2uiz+0x1c>
 8000522:	0020      	movs	r0, r4
 8000524:	0029      	movs	r1, r5
 8000526:	f002 f8ad 	bl	8002684 <__aeabi_d2iz>
 800052a:	bd70      	pop	{r4, r5, r6, pc}
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <__aeabi_d2uiz+0x38>)
 800052e:	2200      	movs	r2, #0
 8000530:	0020      	movs	r0, r4
 8000532:	0029      	movs	r1, r5
 8000534:	f001 fd14 	bl	8001f60 <__aeabi_dsub>
 8000538:	f002 f8a4 	bl	8002684 <__aeabi_d2iz>
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	061b      	lsls	r3, r3, #24
 8000540:	469c      	mov	ip, r3
 8000542:	4460      	add	r0, ip
 8000544:	e7f1      	b.n	800052a <__aeabi_d2uiz+0x1a>
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	41e00000 	.word	0x41e00000

0800054c <__aeabi_fadd>:
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	46c6      	mov	lr, r8
 8000550:	0243      	lsls	r3, r0, #9
 8000552:	0a5b      	lsrs	r3, r3, #9
 8000554:	024e      	lsls	r6, r1, #9
 8000556:	0045      	lsls	r5, r0, #1
 8000558:	004f      	lsls	r7, r1, #1
 800055a:	00da      	lsls	r2, r3, #3
 800055c:	0fc4      	lsrs	r4, r0, #31
 800055e:	469c      	mov	ip, r3
 8000560:	0a70      	lsrs	r0, r6, #9
 8000562:	4690      	mov	r8, r2
 8000564:	b500      	push	{lr}
 8000566:	0e2d      	lsrs	r5, r5, #24
 8000568:	0e3f      	lsrs	r7, r7, #24
 800056a:	0fc9      	lsrs	r1, r1, #31
 800056c:	09b6      	lsrs	r6, r6, #6
 800056e:	428c      	cmp	r4, r1
 8000570:	d04b      	beq.n	800060a <__aeabi_fadd+0xbe>
 8000572:	1bea      	subs	r2, r5, r7
 8000574:	2a00      	cmp	r2, #0
 8000576:	dd36      	ble.n	80005e6 <__aeabi_fadd+0x9a>
 8000578:	2f00      	cmp	r7, #0
 800057a:	d061      	beq.n	8000640 <__aeabi_fadd+0xf4>
 800057c:	2dff      	cmp	r5, #255	; 0xff
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x36>
 8000580:	e0ad      	b.n	80006de <__aeabi_fadd+0x192>
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	04db      	lsls	r3, r3, #19
 8000586:	431e      	orrs	r6, r3
 8000588:	2a1b      	cmp	r2, #27
 800058a:	dc00      	bgt.n	800058e <__aeabi_fadd+0x42>
 800058c:	e0d3      	b.n	8000736 <__aeabi_fadd+0x1ea>
 800058e:	2001      	movs	r0, #1
 8000590:	4643      	mov	r3, r8
 8000592:	1a18      	subs	r0, r3, r0
 8000594:	0143      	lsls	r3, r0, #5
 8000596:	d400      	bmi.n	800059a <__aeabi_fadd+0x4e>
 8000598:	e08c      	b.n	80006b4 <__aeabi_fadd+0x168>
 800059a:	0180      	lsls	r0, r0, #6
 800059c:	0987      	lsrs	r7, r0, #6
 800059e:	0038      	movs	r0, r7
 80005a0:	f002 f9cc 	bl	800293c <__clzsi2>
 80005a4:	3805      	subs	r0, #5
 80005a6:	4087      	lsls	r7, r0
 80005a8:	4285      	cmp	r5, r0
 80005aa:	dc00      	bgt.n	80005ae <__aeabi_fadd+0x62>
 80005ac:	e0b6      	b.n	800071c <__aeabi_fadd+0x1d0>
 80005ae:	1a2d      	subs	r5, r5, r0
 80005b0:	48b3      	ldr	r0, [pc, #716]	; (8000880 <__aeabi_fadd+0x334>)
 80005b2:	4038      	ands	r0, r7
 80005b4:	0743      	lsls	r3, r0, #29
 80005b6:	d004      	beq.n	80005c2 <__aeabi_fadd+0x76>
 80005b8:	230f      	movs	r3, #15
 80005ba:	4003      	ands	r3, r0
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x76>
 80005c0:	3004      	adds	r0, #4
 80005c2:	0143      	lsls	r3, r0, #5
 80005c4:	d400      	bmi.n	80005c8 <__aeabi_fadd+0x7c>
 80005c6:	e078      	b.n	80006ba <__aeabi_fadd+0x16e>
 80005c8:	1c6a      	adds	r2, r5, #1
 80005ca:	2dfe      	cmp	r5, #254	; 0xfe
 80005cc:	d065      	beq.n	800069a <__aeabi_fadd+0x14e>
 80005ce:	0180      	lsls	r0, r0, #6
 80005d0:	0a43      	lsrs	r3, r0, #9
 80005d2:	469c      	mov	ip, r3
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	4663      	mov	r3, ip
 80005d8:	05d0      	lsls	r0, r2, #23
 80005da:	4318      	orrs	r0, r3
 80005dc:	07e4      	lsls	r4, r4, #31
 80005de:	4320      	orrs	r0, r4
 80005e0:	bc80      	pop	{r7}
 80005e2:	46b8      	mov	r8, r7
 80005e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e6:	2a00      	cmp	r2, #0
 80005e8:	d035      	beq.n	8000656 <__aeabi_fadd+0x10a>
 80005ea:	1b7a      	subs	r2, r7, r5
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0xa6>
 80005f0:	e0af      	b.n	8000752 <__aeabi_fadd+0x206>
 80005f2:	4643      	mov	r3, r8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0xae>
 80005f8:	e0a7      	b.n	800074a <__aeabi_fadd+0x1fe>
 80005fa:	1e53      	subs	r3, r2, #1
 80005fc:	2a01      	cmp	r2, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0xb6>
 8000600:	e12f      	b.n	8000862 <__aeabi_fadd+0x316>
 8000602:	2aff      	cmp	r2, #255	; 0xff
 8000604:	d069      	beq.n	80006da <__aeabi_fadd+0x18e>
 8000606:	001a      	movs	r2, r3
 8000608:	e0aa      	b.n	8000760 <__aeabi_fadd+0x214>
 800060a:	1be9      	subs	r1, r5, r7
 800060c:	2900      	cmp	r1, #0
 800060e:	dd70      	ble.n	80006f2 <__aeabi_fadd+0x1a6>
 8000610:	2f00      	cmp	r7, #0
 8000612:	d037      	beq.n	8000684 <__aeabi_fadd+0x138>
 8000614:	2dff      	cmp	r5, #255	; 0xff
 8000616:	d062      	beq.n	80006de <__aeabi_fadd+0x192>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	04db      	lsls	r3, r3, #19
 800061c:	431e      	orrs	r6, r3
 800061e:	291b      	cmp	r1, #27
 8000620:	dc00      	bgt.n	8000624 <__aeabi_fadd+0xd8>
 8000622:	e0b0      	b.n	8000786 <__aeabi_fadd+0x23a>
 8000624:	2001      	movs	r0, #1
 8000626:	4440      	add	r0, r8
 8000628:	0143      	lsls	r3, r0, #5
 800062a:	d543      	bpl.n	80006b4 <__aeabi_fadd+0x168>
 800062c:	3501      	adds	r5, #1
 800062e:	2dff      	cmp	r5, #255	; 0xff
 8000630:	d033      	beq.n	800069a <__aeabi_fadd+0x14e>
 8000632:	2301      	movs	r3, #1
 8000634:	4a93      	ldr	r2, [pc, #588]	; (8000884 <__aeabi_fadd+0x338>)
 8000636:	4003      	ands	r3, r0
 8000638:	0840      	lsrs	r0, r0, #1
 800063a:	4010      	ands	r0, r2
 800063c:	4318      	orrs	r0, r3
 800063e:	e7b9      	b.n	80005b4 <__aeabi_fadd+0x68>
 8000640:	2e00      	cmp	r6, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_fadd+0xfa>
 8000644:	e083      	b.n	800074e <__aeabi_fadd+0x202>
 8000646:	1e51      	subs	r1, r2, #1
 8000648:	2a01      	cmp	r2, #1
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0x102>
 800064c:	e0d8      	b.n	8000800 <__aeabi_fadd+0x2b4>
 800064e:	2aff      	cmp	r2, #255	; 0xff
 8000650:	d045      	beq.n	80006de <__aeabi_fadd+0x192>
 8000652:	000a      	movs	r2, r1
 8000654:	e798      	b.n	8000588 <__aeabi_fadd+0x3c>
 8000656:	27fe      	movs	r7, #254	; 0xfe
 8000658:	1c6a      	adds	r2, r5, #1
 800065a:	4217      	tst	r7, r2
 800065c:	d000      	beq.n	8000660 <__aeabi_fadd+0x114>
 800065e:	e086      	b.n	800076e <__aeabi_fadd+0x222>
 8000660:	2d00      	cmp	r5, #0
 8000662:	d000      	beq.n	8000666 <__aeabi_fadd+0x11a>
 8000664:	e0b7      	b.n	80007d6 <__aeabi_fadd+0x28a>
 8000666:	4643      	mov	r3, r8
 8000668:	2b00      	cmp	r3, #0
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x122>
 800066c:	e0f3      	b.n	8000856 <__aeabi_fadd+0x30a>
 800066e:	2200      	movs	r2, #0
 8000670:	2e00      	cmp	r6, #0
 8000672:	d0b0      	beq.n	80005d6 <__aeabi_fadd+0x8a>
 8000674:	1b98      	subs	r0, r3, r6
 8000676:	0143      	lsls	r3, r0, #5
 8000678:	d400      	bmi.n	800067c <__aeabi_fadd+0x130>
 800067a:	e0fa      	b.n	8000872 <__aeabi_fadd+0x326>
 800067c:	4643      	mov	r3, r8
 800067e:	000c      	movs	r4, r1
 8000680:	1af0      	subs	r0, r6, r3
 8000682:	e797      	b.n	80005b4 <__aeabi_fadd+0x68>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x13e>
 8000688:	e0c8      	b.n	800081c <__aeabi_fadd+0x2d0>
 800068a:	1e4a      	subs	r2, r1, #1
 800068c:	2901      	cmp	r1, #1
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x146>
 8000690:	e0ae      	b.n	80007f0 <__aeabi_fadd+0x2a4>
 8000692:	29ff      	cmp	r1, #255	; 0xff
 8000694:	d023      	beq.n	80006de <__aeabi_fadd+0x192>
 8000696:	0011      	movs	r1, r2
 8000698:	e7c1      	b.n	800061e <__aeabi_fadd+0xd2>
 800069a:	2300      	movs	r3, #0
 800069c:	22ff      	movs	r2, #255	; 0xff
 800069e:	469c      	mov	ip, r3
 80006a0:	e799      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80006a2:	21fe      	movs	r1, #254	; 0xfe
 80006a4:	1c6a      	adds	r2, r5, #1
 80006a6:	4211      	tst	r1, r2
 80006a8:	d077      	beq.n	800079a <__aeabi_fadd+0x24e>
 80006aa:	2aff      	cmp	r2, #255	; 0xff
 80006ac:	d0f5      	beq.n	800069a <__aeabi_fadd+0x14e>
 80006ae:	0015      	movs	r5, r2
 80006b0:	4446      	add	r6, r8
 80006b2:	0870      	lsrs	r0, r6, #1
 80006b4:	0743      	lsls	r3, r0, #29
 80006b6:	d000      	beq.n	80006ba <__aeabi_fadd+0x16e>
 80006b8:	e77e      	b.n	80005b8 <__aeabi_fadd+0x6c>
 80006ba:	08c3      	lsrs	r3, r0, #3
 80006bc:	2dff      	cmp	r5, #255	; 0xff
 80006be:	d00e      	beq.n	80006de <__aeabi_fadd+0x192>
 80006c0:	025b      	lsls	r3, r3, #9
 80006c2:	0a5b      	lsrs	r3, r3, #9
 80006c4:	469c      	mov	ip, r3
 80006c6:	b2ea      	uxtb	r2, r5
 80006c8:	e785      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d007      	beq.n	80006de <__aeabi_fadd+0x192>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	03d2      	lsls	r2, r2, #15
 80006d2:	4213      	tst	r3, r2
 80006d4:	d003      	beq.n	80006de <__aeabi_fadd+0x192>
 80006d6:	4210      	tst	r0, r2
 80006d8:	d101      	bne.n	80006de <__aeabi_fadd+0x192>
 80006da:	000c      	movs	r4, r1
 80006dc:	0003      	movs	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0db      	beq.n	800069a <__aeabi_fadd+0x14e>
 80006e2:	2080      	movs	r0, #128	; 0x80
 80006e4:	03c0      	lsls	r0, r0, #15
 80006e6:	4318      	orrs	r0, r3
 80006e8:	0240      	lsls	r0, r0, #9
 80006ea:	0a43      	lsrs	r3, r0, #9
 80006ec:	469c      	mov	ip, r3
 80006ee:	22ff      	movs	r2, #255	; 0xff
 80006f0:	e771      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d0d5      	beq.n	80006a2 <__aeabi_fadd+0x156>
 80006f6:	1b7a      	subs	r2, r7, r5
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d160      	bne.n	80007be <__aeabi_fadd+0x272>
 80006fc:	4643      	mov	r3, r8
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d024      	beq.n	800074c <__aeabi_fadd+0x200>
 8000702:	1e53      	subs	r3, r2, #1
 8000704:	2a01      	cmp	r2, #1
 8000706:	d073      	beq.n	80007f0 <__aeabi_fadd+0x2a4>
 8000708:	2aff      	cmp	r2, #255	; 0xff
 800070a:	d0e7      	beq.n	80006dc <__aeabi_fadd+0x190>
 800070c:	001a      	movs	r2, r3
 800070e:	2a1b      	cmp	r2, #27
 8000710:	dc00      	bgt.n	8000714 <__aeabi_fadd+0x1c8>
 8000712:	e085      	b.n	8000820 <__aeabi_fadd+0x2d4>
 8000714:	2001      	movs	r0, #1
 8000716:	003d      	movs	r5, r7
 8000718:	1980      	adds	r0, r0, r6
 800071a:	e785      	b.n	8000628 <__aeabi_fadd+0xdc>
 800071c:	2320      	movs	r3, #32
 800071e:	003a      	movs	r2, r7
 8000720:	1b45      	subs	r5, r0, r5
 8000722:	0038      	movs	r0, r7
 8000724:	3501      	adds	r5, #1
 8000726:	40ea      	lsrs	r2, r5
 8000728:	1b5d      	subs	r5, r3, r5
 800072a:	40a8      	lsls	r0, r5
 800072c:	1e43      	subs	r3, r0, #1
 800072e:	4198      	sbcs	r0, r3
 8000730:	2500      	movs	r5, #0
 8000732:	4310      	orrs	r0, r2
 8000734:	e73e      	b.n	80005b4 <__aeabi_fadd+0x68>
 8000736:	2320      	movs	r3, #32
 8000738:	0030      	movs	r0, r6
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	0031      	movs	r1, r6
 800073e:	4098      	lsls	r0, r3
 8000740:	40d1      	lsrs	r1, r2
 8000742:	1e43      	subs	r3, r0, #1
 8000744:	4198      	sbcs	r0, r3
 8000746:	4308      	orrs	r0, r1
 8000748:	e722      	b.n	8000590 <__aeabi_fadd+0x44>
 800074a:	000c      	movs	r4, r1
 800074c:	0003      	movs	r3, r0
 800074e:	0015      	movs	r5, r2
 8000750:	e7b4      	b.n	80006bc <__aeabi_fadd+0x170>
 8000752:	2fff      	cmp	r7, #255	; 0xff
 8000754:	d0c1      	beq.n	80006da <__aeabi_fadd+0x18e>
 8000756:	2380      	movs	r3, #128	; 0x80
 8000758:	4640      	mov	r0, r8
 800075a:	04db      	lsls	r3, r3, #19
 800075c:	4318      	orrs	r0, r3
 800075e:	4680      	mov	r8, r0
 8000760:	2a1b      	cmp	r2, #27
 8000762:	dd51      	ble.n	8000808 <__aeabi_fadd+0x2bc>
 8000764:	2001      	movs	r0, #1
 8000766:	000c      	movs	r4, r1
 8000768:	003d      	movs	r5, r7
 800076a:	1a30      	subs	r0, r6, r0
 800076c:	e712      	b.n	8000594 <__aeabi_fadd+0x48>
 800076e:	4643      	mov	r3, r8
 8000770:	1b9f      	subs	r7, r3, r6
 8000772:	017b      	lsls	r3, r7, #5
 8000774:	d42b      	bmi.n	80007ce <__aeabi_fadd+0x282>
 8000776:	2f00      	cmp	r7, #0
 8000778:	d000      	beq.n	800077c <__aeabi_fadd+0x230>
 800077a:	e710      	b.n	800059e <__aeabi_fadd+0x52>
 800077c:	2300      	movs	r3, #0
 800077e:	2400      	movs	r4, #0
 8000780:	2200      	movs	r2, #0
 8000782:	469c      	mov	ip, r3
 8000784:	e727      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000786:	2320      	movs	r3, #32
 8000788:	0032      	movs	r2, r6
 800078a:	0030      	movs	r0, r6
 800078c:	40ca      	lsrs	r2, r1
 800078e:	1a59      	subs	r1, r3, r1
 8000790:	4088      	lsls	r0, r1
 8000792:	1e43      	subs	r3, r0, #1
 8000794:	4198      	sbcs	r0, r3
 8000796:	4310      	orrs	r0, r2
 8000798:	e745      	b.n	8000626 <__aeabi_fadd+0xda>
 800079a:	2d00      	cmp	r5, #0
 800079c:	d14a      	bne.n	8000834 <__aeabi_fadd+0x2e8>
 800079e:	4643      	mov	r3, r8
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d063      	beq.n	800086c <__aeabi_fadd+0x320>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x260>
 80007aa:	e714      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80007ac:	0030      	movs	r0, r6
 80007ae:	4440      	add	r0, r8
 80007b0:	0143      	lsls	r3, r0, #5
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_fadd+0x26a>
 80007b4:	e77e      	b.n	80006b4 <__aeabi_fadd+0x168>
 80007b6:	4b32      	ldr	r3, [pc, #200]	; (8000880 <__aeabi_fadd+0x334>)
 80007b8:	3501      	adds	r5, #1
 80007ba:	4018      	ands	r0, r3
 80007bc:	e77a      	b.n	80006b4 <__aeabi_fadd+0x168>
 80007be:	2fff      	cmp	r7, #255	; 0xff
 80007c0:	d08c      	beq.n	80006dc <__aeabi_fadd+0x190>
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	4641      	mov	r1, r8
 80007c6:	04db      	lsls	r3, r3, #19
 80007c8:	4319      	orrs	r1, r3
 80007ca:	4688      	mov	r8, r1
 80007cc:	e79f      	b.n	800070e <__aeabi_fadd+0x1c2>
 80007ce:	4643      	mov	r3, r8
 80007d0:	000c      	movs	r4, r1
 80007d2:	1af7      	subs	r7, r6, r3
 80007d4:	e6e3      	b.n	800059e <__aeabi_fadd+0x52>
 80007d6:	4642      	mov	r2, r8
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d000      	beq.n	80007de <__aeabi_fadd+0x292>
 80007dc:	e775      	b.n	80006ca <__aeabi_fadd+0x17e>
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fadd+0x298>
 80007e2:	e77a      	b.n	80006da <__aeabi_fadd+0x18e>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	03db      	lsls	r3, r3, #15
 80007e8:	2400      	movs	r4, #0
 80007ea:	469c      	mov	ip, r3
 80007ec:	22ff      	movs	r2, #255	; 0xff
 80007ee:	e6f2      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80007f0:	0030      	movs	r0, r6
 80007f2:	4440      	add	r0, r8
 80007f4:	2501      	movs	r5, #1
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fadd+0x2b0>
 80007fa:	e75b      	b.n	80006b4 <__aeabi_fadd+0x168>
 80007fc:	2502      	movs	r5, #2
 80007fe:	e718      	b.n	8000632 <__aeabi_fadd+0xe6>
 8000800:	4643      	mov	r3, r8
 8000802:	2501      	movs	r5, #1
 8000804:	1b98      	subs	r0, r3, r6
 8000806:	e6c5      	b.n	8000594 <__aeabi_fadd+0x48>
 8000808:	2320      	movs	r3, #32
 800080a:	4644      	mov	r4, r8
 800080c:	4640      	mov	r0, r8
 800080e:	40d4      	lsrs	r4, r2
 8000810:	1a9a      	subs	r2, r3, r2
 8000812:	4090      	lsls	r0, r2
 8000814:	1e43      	subs	r3, r0, #1
 8000816:	4198      	sbcs	r0, r3
 8000818:	4320      	orrs	r0, r4
 800081a:	e7a4      	b.n	8000766 <__aeabi_fadd+0x21a>
 800081c:	000d      	movs	r5, r1
 800081e:	e74d      	b.n	80006bc <__aeabi_fadd+0x170>
 8000820:	2320      	movs	r3, #32
 8000822:	4641      	mov	r1, r8
 8000824:	4640      	mov	r0, r8
 8000826:	40d1      	lsrs	r1, r2
 8000828:	1a9a      	subs	r2, r3, r2
 800082a:	4090      	lsls	r0, r2
 800082c:	1e43      	subs	r3, r0, #1
 800082e:	4198      	sbcs	r0, r3
 8000830:	4308      	orrs	r0, r1
 8000832:	e770      	b.n	8000716 <__aeabi_fadd+0x1ca>
 8000834:	4642      	mov	r2, r8
 8000836:	2a00      	cmp	r2, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x2f0>
 800083a:	e74f      	b.n	80006dc <__aeabi_fadd+0x190>
 800083c:	2e00      	cmp	r6, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x2f6>
 8000840:	e74d      	b.n	80006de <__aeabi_fadd+0x192>
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	03d2      	lsls	r2, r2, #15
 8000846:	4213      	tst	r3, r2
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0x300>
 800084a:	e748      	b.n	80006de <__aeabi_fadd+0x192>
 800084c:	4210      	tst	r0, r2
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0x306>
 8000850:	e745      	b.n	80006de <__aeabi_fadd+0x192>
 8000852:	0003      	movs	r3, r0
 8000854:	e743      	b.n	80006de <__aeabi_fadd+0x192>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d090      	beq.n	800077c <__aeabi_fadd+0x230>
 800085a:	000c      	movs	r4, r1
 800085c:	4684      	mov	ip, r0
 800085e:	2200      	movs	r2, #0
 8000860:	e6b9      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000862:	4643      	mov	r3, r8
 8000864:	000c      	movs	r4, r1
 8000866:	1af0      	subs	r0, r6, r3
 8000868:	3501      	adds	r5, #1
 800086a:	e693      	b.n	8000594 <__aeabi_fadd+0x48>
 800086c:	4684      	mov	ip, r0
 800086e:	2200      	movs	r2, #0
 8000870:	e6b1      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000872:	2800      	cmp	r0, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_fadd+0x32c>
 8000876:	e71d      	b.n	80006b4 <__aeabi_fadd+0x168>
 8000878:	2300      	movs	r3, #0
 800087a:	2400      	movs	r4, #0
 800087c:	469c      	mov	ip, r3
 800087e:	e6aa      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000880:	fbffffff 	.word	0xfbffffff
 8000884:	7dffffff 	.word	0x7dffffff

08000888 <__aeabi_fdiv>:
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	464f      	mov	r7, r9
 800088c:	4646      	mov	r6, r8
 800088e:	46d6      	mov	lr, sl
 8000890:	0245      	lsls	r5, r0, #9
 8000892:	b5c0      	push	{r6, r7, lr}
 8000894:	0047      	lsls	r7, r0, #1
 8000896:	1c0c      	adds	r4, r1, #0
 8000898:	0a6d      	lsrs	r5, r5, #9
 800089a:	0e3f      	lsrs	r7, r7, #24
 800089c:	0fc6      	lsrs	r6, r0, #31
 800089e:	2f00      	cmp	r7, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fdiv+0x1c>
 80008a2:	e070      	b.n	8000986 <__aeabi_fdiv+0xfe>
 80008a4:	2fff      	cmp	r7, #255	; 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fdiv+0x22>
 80008a8:	e075      	b.n	8000996 <__aeabi_fdiv+0x10e>
 80008aa:	00eb      	lsls	r3, r5, #3
 80008ac:	2580      	movs	r5, #128	; 0x80
 80008ae:	04ed      	lsls	r5, r5, #19
 80008b0:	431d      	orrs	r5, r3
 80008b2:	2300      	movs	r3, #0
 80008b4:	4699      	mov	r9, r3
 80008b6:	469a      	mov	sl, r3
 80008b8:	3f7f      	subs	r7, #127	; 0x7f
 80008ba:	0260      	lsls	r0, r4, #9
 80008bc:	0a43      	lsrs	r3, r0, #9
 80008be:	4698      	mov	r8, r3
 80008c0:	0063      	lsls	r3, r4, #1
 80008c2:	0e1b      	lsrs	r3, r3, #24
 80008c4:	0fe4      	lsrs	r4, r4, #31
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d04e      	beq.n	8000968 <__aeabi_fdiv+0xe0>
 80008ca:	2bff      	cmp	r3, #255	; 0xff
 80008cc:	d046      	beq.n	800095c <__aeabi_fdiv+0xd4>
 80008ce:	4642      	mov	r2, r8
 80008d0:	00d0      	lsls	r0, r2, #3
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	04d2      	lsls	r2, r2, #19
 80008d6:	4302      	orrs	r2, r0
 80008d8:	4690      	mov	r8, r2
 80008da:	2200      	movs	r2, #0
 80008dc:	3b7f      	subs	r3, #127	; 0x7f
 80008de:	0031      	movs	r1, r6
 80008e0:	1aff      	subs	r7, r7, r3
 80008e2:	464b      	mov	r3, r9
 80008e4:	4061      	eors	r1, r4
 80008e6:	b2c9      	uxtb	r1, r1
 80008e8:	4313      	orrs	r3, r2
 80008ea:	2b0f      	cmp	r3, #15
 80008ec:	d900      	bls.n	80008f0 <__aeabi_fdiv+0x68>
 80008ee:	e0b5      	b.n	8000a5c <__aeabi_fdiv+0x1d4>
 80008f0:	486e      	ldr	r0, [pc, #440]	; (8000aac <__aeabi_fdiv+0x224>)
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	58c3      	ldr	r3, [r0, r3]
 80008f6:	469f      	mov	pc, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	4698      	mov	r8, r3
 80008fc:	0026      	movs	r6, r4
 80008fe:	4645      	mov	r5, r8
 8000900:	4692      	mov	sl, r2
 8000902:	4653      	mov	r3, sl
 8000904:	2b02      	cmp	r3, #2
 8000906:	d100      	bne.n	800090a <__aeabi_fdiv+0x82>
 8000908:	e089      	b.n	8000a1e <__aeabi_fdiv+0x196>
 800090a:	2b03      	cmp	r3, #3
 800090c:	d100      	bne.n	8000910 <__aeabi_fdiv+0x88>
 800090e:	e09e      	b.n	8000a4e <__aeabi_fdiv+0x1c6>
 8000910:	2b01      	cmp	r3, #1
 8000912:	d018      	beq.n	8000946 <__aeabi_fdiv+0xbe>
 8000914:	003b      	movs	r3, r7
 8000916:	337f      	adds	r3, #127	; 0x7f
 8000918:	2b00      	cmp	r3, #0
 800091a:	dd69      	ble.n	80009f0 <__aeabi_fdiv+0x168>
 800091c:	076a      	lsls	r2, r5, #29
 800091e:	d004      	beq.n	800092a <__aeabi_fdiv+0xa2>
 8000920:	220f      	movs	r2, #15
 8000922:	402a      	ands	r2, r5
 8000924:	2a04      	cmp	r2, #4
 8000926:	d000      	beq.n	800092a <__aeabi_fdiv+0xa2>
 8000928:	3504      	adds	r5, #4
 800092a:	012a      	lsls	r2, r5, #4
 800092c:	d503      	bpl.n	8000936 <__aeabi_fdiv+0xae>
 800092e:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <__aeabi_fdiv+0x228>)
 8000930:	401d      	ands	r5, r3
 8000932:	003b      	movs	r3, r7
 8000934:	3380      	adds	r3, #128	; 0x80
 8000936:	2bfe      	cmp	r3, #254	; 0xfe
 8000938:	dd00      	ble.n	800093c <__aeabi_fdiv+0xb4>
 800093a:	e070      	b.n	8000a1e <__aeabi_fdiv+0x196>
 800093c:	01ad      	lsls	r5, r5, #6
 800093e:	0a6d      	lsrs	r5, r5, #9
 8000940:	b2d8      	uxtb	r0, r3
 8000942:	e002      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000944:	000e      	movs	r6, r1
 8000946:	2000      	movs	r0, #0
 8000948:	2500      	movs	r5, #0
 800094a:	05c0      	lsls	r0, r0, #23
 800094c:	4328      	orrs	r0, r5
 800094e:	07f6      	lsls	r6, r6, #31
 8000950:	4330      	orrs	r0, r6
 8000952:	bce0      	pop	{r5, r6, r7}
 8000954:	46ba      	mov	sl, r7
 8000956:	46b1      	mov	r9, r6
 8000958:	46a8      	mov	r8, r5
 800095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095c:	4643      	mov	r3, r8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d13f      	bne.n	80009e2 <__aeabi_fdiv+0x15a>
 8000962:	2202      	movs	r2, #2
 8000964:	3fff      	subs	r7, #255	; 0xff
 8000966:	e003      	b.n	8000970 <__aeabi_fdiv+0xe8>
 8000968:	4643      	mov	r3, r8
 800096a:	2b00      	cmp	r3, #0
 800096c:	d12d      	bne.n	80009ca <__aeabi_fdiv+0x142>
 800096e:	2201      	movs	r2, #1
 8000970:	0031      	movs	r1, r6
 8000972:	464b      	mov	r3, r9
 8000974:	4061      	eors	r1, r4
 8000976:	b2c9      	uxtb	r1, r1
 8000978:	4313      	orrs	r3, r2
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d834      	bhi.n	80009e8 <__aeabi_fdiv+0x160>
 800097e:	484d      	ldr	r0, [pc, #308]	; (8000ab4 <__aeabi_fdiv+0x22c>)
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	58c3      	ldr	r3, [r0, r3]
 8000984:	469f      	mov	pc, r3
 8000986:	2d00      	cmp	r5, #0
 8000988:	d113      	bne.n	80009b2 <__aeabi_fdiv+0x12a>
 800098a:	2304      	movs	r3, #4
 800098c:	4699      	mov	r9, r3
 800098e:	3b03      	subs	r3, #3
 8000990:	2700      	movs	r7, #0
 8000992:	469a      	mov	sl, r3
 8000994:	e791      	b.n	80008ba <__aeabi_fdiv+0x32>
 8000996:	2d00      	cmp	r5, #0
 8000998:	d105      	bne.n	80009a6 <__aeabi_fdiv+0x11e>
 800099a:	2308      	movs	r3, #8
 800099c:	4699      	mov	r9, r3
 800099e:	3b06      	subs	r3, #6
 80009a0:	27ff      	movs	r7, #255	; 0xff
 80009a2:	469a      	mov	sl, r3
 80009a4:	e789      	b.n	80008ba <__aeabi_fdiv+0x32>
 80009a6:	230c      	movs	r3, #12
 80009a8:	4699      	mov	r9, r3
 80009aa:	3b09      	subs	r3, #9
 80009ac:	27ff      	movs	r7, #255	; 0xff
 80009ae:	469a      	mov	sl, r3
 80009b0:	e783      	b.n	80008ba <__aeabi_fdiv+0x32>
 80009b2:	0028      	movs	r0, r5
 80009b4:	f001 ffc2 	bl	800293c <__clzsi2>
 80009b8:	2776      	movs	r7, #118	; 0x76
 80009ba:	1f43      	subs	r3, r0, #5
 80009bc:	409d      	lsls	r5, r3
 80009be:	2300      	movs	r3, #0
 80009c0:	427f      	negs	r7, r7
 80009c2:	4699      	mov	r9, r3
 80009c4:	469a      	mov	sl, r3
 80009c6:	1a3f      	subs	r7, r7, r0
 80009c8:	e777      	b.n	80008ba <__aeabi_fdiv+0x32>
 80009ca:	4640      	mov	r0, r8
 80009cc:	f001 ffb6 	bl	800293c <__clzsi2>
 80009d0:	4642      	mov	r2, r8
 80009d2:	1f43      	subs	r3, r0, #5
 80009d4:	409a      	lsls	r2, r3
 80009d6:	2376      	movs	r3, #118	; 0x76
 80009d8:	425b      	negs	r3, r3
 80009da:	4690      	mov	r8, r2
 80009dc:	1a1b      	subs	r3, r3, r0
 80009de:	2200      	movs	r2, #0
 80009e0:	e77d      	b.n	80008de <__aeabi_fdiv+0x56>
 80009e2:	23ff      	movs	r3, #255	; 0xff
 80009e4:	2203      	movs	r2, #3
 80009e6:	e77a      	b.n	80008de <__aeabi_fdiv+0x56>
 80009e8:	000e      	movs	r6, r1
 80009ea:	20ff      	movs	r0, #255	; 0xff
 80009ec:	2500      	movs	r5, #0
 80009ee:	e7ac      	b.n	800094a <__aeabi_fdiv+0xc2>
 80009f0:	2001      	movs	r0, #1
 80009f2:	1ac0      	subs	r0, r0, r3
 80009f4:	281b      	cmp	r0, #27
 80009f6:	dca6      	bgt.n	8000946 <__aeabi_fdiv+0xbe>
 80009f8:	379e      	adds	r7, #158	; 0x9e
 80009fa:	002a      	movs	r2, r5
 80009fc:	40bd      	lsls	r5, r7
 80009fe:	40c2      	lsrs	r2, r0
 8000a00:	1e6b      	subs	r3, r5, #1
 8000a02:	419d      	sbcs	r5, r3
 8000a04:	4315      	orrs	r5, r2
 8000a06:	076b      	lsls	r3, r5, #29
 8000a08:	d004      	beq.n	8000a14 <__aeabi_fdiv+0x18c>
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	402b      	ands	r3, r5
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d000      	beq.n	8000a14 <__aeabi_fdiv+0x18c>
 8000a12:	3504      	adds	r5, #4
 8000a14:	016b      	lsls	r3, r5, #5
 8000a16:	d544      	bpl.n	8000aa2 <__aeabi_fdiv+0x21a>
 8000a18:	2001      	movs	r0, #1
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	e795      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a1e:	20ff      	movs	r0, #255	; 0xff
 8000a20:	2500      	movs	r5, #0
 8000a22:	e792      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a24:	2580      	movs	r5, #128	; 0x80
 8000a26:	2600      	movs	r6, #0
 8000a28:	20ff      	movs	r0, #255	; 0xff
 8000a2a:	03ed      	lsls	r5, r5, #15
 8000a2c:	e78d      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	4698      	mov	r8, r3
 8000a32:	2080      	movs	r0, #128	; 0x80
 8000a34:	03c0      	lsls	r0, r0, #15
 8000a36:	4205      	tst	r5, r0
 8000a38:	d009      	beq.n	8000a4e <__aeabi_fdiv+0x1c6>
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	4203      	tst	r3, r0
 8000a3e:	d106      	bne.n	8000a4e <__aeabi_fdiv+0x1c6>
 8000a40:	4645      	mov	r5, r8
 8000a42:	4305      	orrs	r5, r0
 8000a44:	026d      	lsls	r5, r5, #9
 8000a46:	0026      	movs	r6, r4
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	0a6d      	lsrs	r5, r5, #9
 8000a4c:	e77d      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a4e:	2080      	movs	r0, #128	; 0x80
 8000a50:	03c0      	lsls	r0, r0, #15
 8000a52:	4305      	orrs	r5, r0
 8000a54:	026d      	lsls	r5, r5, #9
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	e776      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a5c:	4642      	mov	r2, r8
 8000a5e:	016b      	lsls	r3, r5, #5
 8000a60:	0150      	lsls	r0, r2, #5
 8000a62:	4283      	cmp	r3, r0
 8000a64:	d219      	bcs.n	8000a9a <__aeabi_fdiv+0x212>
 8000a66:	221b      	movs	r2, #27
 8000a68:	2500      	movs	r5, #0
 8000a6a:	3f01      	subs	r7, #1
 8000a6c:	2601      	movs	r6, #1
 8000a6e:	001c      	movs	r4, r3
 8000a70:	006d      	lsls	r5, r5, #1
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2c00      	cmp	r4, #0
 8000a76:	db01      	blt.n	8000a7c <__aeabi_fdiv+0x1f4>
 8000a78:	4298      	cmp	r0, r3
 8000a7a:	d801      	bhi.n	8000a80 <__aeabi_fdiv+0x1f8>
 8000a7c:	1a1b      	subs	r3, r3, r0
 8000a7e:	4335      	orrs	r5, r6
 8000a80:	3a01      	subs	r2, #1
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d1f3      	bne.n	8000a6e <__aeabi_fdiv+0x1e6>
 8000a86:	1e5a      	subs	r2, r3, #1
 8000a88:	4193      	sbcs	r3, r2
 8000a8a:	431d      	orrs	r5, r3
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	337f      	adds	r3, #127	; 0x7f
 8000a90:	000e      	movs	r6, r1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_fdiv+0x210>
 8000a96:	e741      	b.n	800091c <__aeabi_fdiv+0x94>
 8000a98:	e7aa      	b.n	80009f0 <__aeabi_fdiv+0x168>
 8000a9a:	221a      	movs	r2, #26
 8000a9c:	2501      	movs	r5, #1
 8000a9e:	1a1b      	subs	r3, r3, r0
 8000aa0:	e7e4      	b.n	8000a6c <__aeabi_fdiv+0x1e4>
 8000aa2:	01ad      	lsls	r5, r5, #6
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	0a6d      	lsrs	r5, r5, #9
 8000aa8:	e74f      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	080089a0 	.word	0x080089a0
 8000ab0:	f7ffffff 	.word	0xf7ffffff
 8000ab4:	080089e0 	.word	0x080089e0

08000ab8 <__eqsf2>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	0042      	lsls	r2, r0, #1
 8000abc:	0245      	lsls	r5, r0, #9
 8000abe:	024e      	lsls	r6, r1, #9
 8000ac0:	004c      	lsls	r4, r1, #1
 8000ac2:	0fc3      	lsrs	r3, r0, #31
 8000ac4:	0a6d      	lsrs	r5, r5, #9
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	0e12      	lsrs	r2, r2, #24
 8000aca:	0a76      	lsrs	r6, r6, #9
 8000acc:	0e24      	lsrs	r4, r4, #24
 8000ace:	0fc9      	lsrs	r1, r1, #31
 8000ad0:	2aff      	cmp	r2, #255	; 0xff
 8000ad2:	d006      	beq.n	8000ae2 <__eqsf2+0x2a>
 8000ad4:	2cff      	cmp	r4, #255	; 0xff
 8000ad6:	d003      	beq.n	8000ae0 <__eqsf2+0x28>
 8000ad8:	42a2      	cmp	r2, r4
 8000ada:	d101      	bne.n	8000ae0 <__eqsf2+0x28>
 8000adc:	42b5      	cmp	r5, r6
 8000ade:	d006      	beq.n	8000aee <__eqsf2+0x36>
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d1fc      	bne.n	8000ae0 <__eqsf2+0x28>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d1fa      	bne.n	8000ae0 <__eqsf2+0x28>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d1f8      	bne.n	8000ae0 <__eqsf2+0x28>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d006      	beq.n	8000b00 <__eqsf2+0x48>
 8000af2:	2001      	movs	r0, #1
 8000af4:	2a00      	cmp	r2, #0
 8000af6:	d1f3      	bne.n	8000ae0 <__eqsf2+0x28>
 8000af8:	0028      	movs	r0, r5
 8000afa:	1e43      	subs	r3, r0, #1
 8000afc:	4198      	sbcs	r0, r3
 8000afe:	e7ef      	b.n	8000ae0 <__eqsf2+0x28>
 8000b00:	2000      	movs	r0, #0
 8000b02:	e7ed      	b.n	8000ae0 <__eqsf2+0x28>

08000b04 <__gesf2>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	0042      	lsls	r2, r0, #1
 8000b08:	0245      	lsls	r5, r0, #9
 8000b0a:	024e      	lsls	r6, r1, #9
 8000b0c:	004c      	lsls	r4, r1, #1
 8000b0e:	0fc3      	lsrs	r3, r0, #31
 8000b10:	0a6d      	lsrs	r5, r5, #9
 8000b12:	0e12      	lsrs	r2, r2, #24
 8000b14:	0a76      	lsrs	r6, r6, #9
 8000b16:	0e24      	lsrs	r4, r4, #24
 8000b18:	0fc8      	lsrs	r0, r1, #31
 8000b1a:	2aff      	cmp	r2, #255	; 0xff
 8000b1c:	d01b      	beq.n	8000b56 <__gesf2+0x52>
 8000b1e:	2cff      	cmp	r4, #255	; 0xff
 8000b20:	d00e      	beq.n	8000b40 <__gesf2+0x3c>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d11b      	bne.n	8000b5e <__gesf2+0x5a>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d101      	bne.n	8000b2e <__gesf2+0x2a>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d01c      	beq.n	8000b68 <__gesf2+0x64>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d00c      	beq.n	8000b4c <__gesf2+0x48>
 8000b32:	4283      	cmp	r3, r0
 8000b34:	d01c      	beq.n	8000b70 <__gesf2+0x6c>
 8000b36:	2102      	movs	r1, #2
 8000b38:	1e58      	subs	r0, r3, #1
 8000b3a:	4008      	ands	r0, r1
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
 8000b40:	2e00      	cmp	r6, #0
 8000b42:	d122      	bne.n	8000b8a <__gesf2+0x86>
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d1f4      	bne.n	8000b32 <__gesf2+0x2e>
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d1f2      	bne.n	8000b32 <__gesf2+0x2e>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d1f6      	bne.n	8000b3e <__gesf2+0x3a>
 8000b50:	2001      	movs	r0, #1
 8000b52:	4240      	negs	r0, r0
 8000b54:	e7f3      	b.n	8000b3e <__gesf2+0x3a>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d117      	bne.n	8000b8a <__gesf2+0x86>
 8000b5a:	2cff      	cmp	r4, #255	; 0xff
 8000b5c:	d0f0      	beq.n	8000b40 <__gesf2+0x3c>
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d1e7      	bne.n	8000b32 <__gesf2+0x2e>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d1e5      	bne.n	8000b32 <__gesf2+0x2e>
 8000b66:	e7e6      	b.n	8000b36 <__gesf2+0x32>
 8000b68:	2000      	movs	r0, #0
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e7      	beq.n	8000b3e <__gesf2+0x3a>
 8000b6e:	e7e2      	b.n	8000b36 <__gesf2+0x32>
 8000b70:	42a2      	cmp	r2, r4
 8000b72:	dc05      	bgt.n	8000b80 <__gesf2+0x7c>
 8000b74:	dbea      	blt.n	8000b4c <__gesf2+0x48>
 8000b76:	42b5      	cmp	r5, r6
 8000b78:	d802      	bhi.n	8000b80 <__gesf2+0x7c>
 8000b7a:	d3e7      	bcc.n	8000b4c <__gesf2+0x48>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e7de      	b.n	8000b3e <__gesf2+0x3a>
 8000b80:	4243      	negs	r3, r0
 8000b82:	4158      	adcs	r0, r3
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	3801      	subs	r0, #1
 8000b88:	e7d9      	b.n	8000b3e <__gesf2+0x3a>
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	4240      	negs	r0, r0
 8000b8e:	e7d6      	b.n	8000b3e <__gesf2+0x3a>

08000b90 <__lesf2>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	0042      	lsls	r2, r0, #1
 8000b94:	0245      	lsls	r5, r0, #9
 8000b96:	024e      	lsls	r6, r1, #9
 8000b98:	004c      	lsls	r4, r1, #1
 8000b9a:	0fc3      	lsrs	r3, r0, #31
 8000b9c:	0a6d      	lsrs	r5, r5, #9
 8000b9e:	0e12      	lsrs	r2, r2, #24
 8000ba0:	0a76      	lsrs	r6, r6, #9
 8000ba2:	0e24      	lsrs	r4, r4, #24
 8000ba4:	0fc8      	lsrs	r0, r1, #31
 8000ba6:	2aff      	cmp	r2, #255	; 0xff
 8000ba8:	d00b      	beq.n	8000bc2 <__lesf2+0x32>
 8000baa:	2cff      	cmp	r4, #255	; 0xff
 8000bac:	d00d      	beq.n	8000bca <__lesf2+0x3a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d11f      	bne.n	8000bf2 <__lesf2+0x62>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d116      	bne.n	8000be4 <__lesf2+0x54>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d114      	bne.n	8000be4 <__lesf2+0x54>
 8000bba:	2000      	movs	r0, #0
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d010      	beq.n	8000be2 <__lesf2+0x52>
 8000bc0:	e009      	b.n	8000bd6 <__lesf2+0x46>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d10c      	bne.n	8000be0 <__lesf2+0x50>
 8000bc6:	2cff      	cmp	r4, #255	; 0xff
 8000bc8:	d113      	bne.n	8000bf2 <__lesf2+0x62>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d108      	bne.n	8000be0 <__lesf2+0x50>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d008      	beq.n	8000be4 <__lesf2+0x54>
 8000bd2:	4283      	cmp	r3, r0
 8000bd4:	d012      	beq.n	8000bfc <__lesf2+0x6c>
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	1e58      	subs	r0, r3, #1
 8000bda:	4008      	ands	r0, r1
 8000bdc:	3801      	subs	r0, #1
 8000bde:	e000      	b.n	8000be2 <__lesf2+0x52>
 8000be0:	2002      	movs	r0, #2
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d1f4      	bne.n	8000bd2 <__lesf2+0x42>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d1fa      	bne.n	8000be2 <__lesf2+0x52>
 8000bec:	2001      	movs	r0, #1
 8000bee:	4240      	negs	r0, r0
 8000bf0:	e7f7      	b.n	8000be2 <__lesf2+0x52>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d1ed      	bne.n	8000bd2 <__lesf2+0x42>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d1eb      	bne.n	8000bd2 <__lesf2+0x42>
 8000bfa:	e7ec      	b.n	8000bd6 <__lesf2+0x46>
 8000bfc:	42a2      	cmp	r2, r4
 8000bfe:	dc05      	bgt.n	8000c0c <__lesf2+0x7c>
 8000c00:	dbf2      	blt.n	8000be8 <__lesf2+0x58>
 8000c02:	42b5      	cmp	r5, r6
 8000c04:	d802      	bhi.n	8000c0c <__lesf2+0x7c>
 8000c06:	d3ef      	bcc.n	8000be8 <__lesf2+0x58>
 8000c08:	2000      	movs	r0, #0
 8000c0a:	e7ea      	b.n	8000be2 <__lesf2+0x52>
 8000c0c:	4243      	negs	r3, r0
 8000c0e:	4158      	adcs	r0, r3
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	3801      	subs	r0, #1
 8000c14:	e7e5      	b.n	8000be2 <__lesf2+0x52>
 8000c16:	46c0      	nop			; (mov r8, r8)

08000c18 <__aeabi_fmul>:
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	464f      	mov	r7, r9
 8000c1c:	4646      	mov	r6, r8
 8000c1e:	46d6      	mov	lr, sl
 8000c20:	0244      	lsls	r4, r0, #9
 8000c22:	0045      	lsls	r5, r0, #1
 8000c24:	b5c0      	push	{r6, r7, lr}
 8000c26:	0a64      	lsrs	r4, r4, #9
 8000c28:	1c0f      	adds	r7, r1, #0
 8000c2a:	0e2d      	lsrs	r5, r5, #24
 8000c2c:	0fc6      	lsrs	r6, r0, #31
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_fmul+0x1c>
 8000c32:	e08d      	b.n	8000d50 <__aeabi_fmul+0x138>
 8000c34:	2dff      	cmp	r5, #255	; 0xff
 8000c36:	d100      	bne.n	8000c3a <__aeabi_fmul+0x22>
 8000c38:	e092      	b.n	8000d60 <__aeabi_fmul+0x148>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2080      	movs	r0, #128	; 0x80
 8000c3e:	4699      	mov	r9, r3
 8000c40:	469a      	mov	sl, r3
 8000c42:	00e4      	lsls	r4, r4, #3
 8000c44:	04c0      	lsls	r0, r0, #19
 8000c46:	4304      	orrs	r4, r0
 8000c48:	3d7f      	subs	r5, #127	; 0x7f
 8000c4a:	0278      	lsls	r0, r7, #9
 8000c4c:	0a43      	lsrs	r3, r0, #9
 8000c4e:	4698      	mov	r8, r3
 8000c50:	007b      	lsls	r3, r7, #1
 8000c52:	0e1b      	lsrs	r3, r3, #24
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fmul+0x44>
 8000c5a:	e070      	b.n	8000d3e <__aeabi_fmul+0x126>
 8000c5c:	2bff      	cmp	r3, #255	; 0xff
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_fmul+0x4a>
 8000c60:	e086      	b.n	8000d70 <__aeabi_fmul+0x158>
 8000c62:	4642      	mov	r2, r8
 8000c64:	00d0      	lsls	r0, r2, #3
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	3b7f      	subs	r3, #127	; 0x7f
 8000c6a:	18ed      	adds	r5, r5, r3
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	04d2      	lsls	r2, r2, #19
 8000c70:	4302      	orrs	r2, r0
 8000c72:	4690      	mov	r8, r2
 8000c74:	469c      	mov	ip, r3
 8000c76:	0031      	movs	r1, r6
 8000c78:	464b      	mov	r3, r9
 8000c7a:	4079      	eors	r1, r7
 8000c7c:	1c68      	adds	r0, r5, #1
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d81c      	bhi.n	8000cbc <__aeabi_fmul+0xa4>
 8000c82:	4a76      	ldr	r2, [pc, #472]	; (8000e5c <__aeabi_fmul+0x244>)
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	58d3      	ldr	r3, [r2, r3]
 8000c88:	469f      	mov	pc, r3
 8000c8a:	0039      	movs	r1, r7
 8000c8c:	4644      	mov	r4, r8
 8000c8e:	46e2      	mov	sl, ip
 8000c90:	4653      	mov	r3, sl
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d00f      	beq.n	8000cb6 <__aeabi_fmul+0x9e>
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d100      	bne.n	8000c9c <__aeabi_fmul+0x84>
 8000c9a:	e0d7      	b.n	8000e4c <__aeabi_fmul+0x234>
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d137      	bne.n	8000d10 <__aeabi_fmul+0xf8>
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	2400      	movs	r4, #0
 8000ca4:	05c0      	lsls	r0, r0, #23
 8000ca6:	4320      	orrs	r0, r4
 8000ca8:	07c9      	lsls	r1, r1, #31
 8000caa:	4308      	orrs	r0, r1
 8000cac:	bce0      	pop	{r5, r6, r7}
 8000cae:	46ba      	mov	sl, r7
 8000cb0:	46b1      	mov	r9, r6
 8000cb2:	46a8      	mov	r8, r5
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb6:	20ff      	movs	r0, #255	; 0xff
 8000cb8:	2400      	movs	r4, #0
 8000cba:	e7f3      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000cbc:	0c26      	lsrs	r6, r4, #16
 8000cbe:	0424      	lsls	r4, r4, #16
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	4644      	mov	r4, r8
 8000cc4:	0424      	lsls	r4, r4, #16
 8000cc6:	0c24      	lsrs	r4, r4, #16
 8000cc8:	4643      	mov	r3, r8
 8000cca:	0027      	movs	r7, r4
 8000ccc:	0c1b      	lsrs	r3, r3, #16
 8000cce:	4357      	muls	r7, r2
 8000cd0:	4374      	muls	r4, r6
 8000cd2:	435a      	muls	r2, r3
 8000cd4:	435e      	muls	r6, r3
 8000cd6:	1912      	adds	r2, r2, r4
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	189b      	adds	r3, r3, r2
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	d903      	bls.n	8000ce8 <__aeabi_fmul+0xd0>
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0252      	lsls	r2, r2, #9
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	4466      	add	r6, ip
 8000ce8:	043f      	lsls	r7, r7, #16
 8000cea:	041a      	lsls	r2, r3, #16
 8000cec:	0c3f      	lsrs	r7, r7, #16
 8000cee:	19d2      	adds	r2, r2, r7
 8000cf0:	0194      	lsls	r4, r2, #6
 8000cf2:	1e67      	subs	r7, r4, #1
 8000cf4:	41bc      	sbcs	r4, r7
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	0e92      	lsrs	r2, r2, #26
 8000cfa:	199b      	adds	r3, r3, r6
 8000cfc:	4314      	orrs	r4, r2
 8000cfe:	019b      	lsls	r3, r3, #6
 8000d00:	431c      	orrs	r4, r3
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	d400      	bmi.n	8000d08 <__aeabi_fmul+0xf0>
 8000d06:	e09b      	b.n	8000e40 <__aeabi_fmul+0x228>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	0862      	lsrs	r2, r4, #1
 8000d0c:	401c      	ands	r4, r3
 8000d0e:	4314      	orrs	r4, r2
 8000d10:	0002      	movs	r2, r0
 8000d12:	327f      	adds	r2, #127	; 0x7f
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	dd64      	ble.n	8000de2 <__aeabi_fmul+0x1ca>
 8000d18:	0763      	lsls	r3, r4, #29
 8000d1a:	d004      	beq.n	8000d26 <__aeabi_fmul+0x10e>
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	4023      	ands	r3, r4
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d000      	beq.n	8000d26 <__aeabi_fmul+0x10e>
 8000d24:	3404      	adds	r4, #4
 8000d26:	0123      	lsls	r3, r4, #4
 8000d28:	d503      	bpl.n	8000d32 <__aeabi_fmul+0x11a>
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	4b4c      	ldr	r3, [pc, #304]	; (8000e60 <__aeabi_fmul+0x248>)
 8000d2e:	3280      	adds	r2, #128	; 0x80
 8000d30:	401c      	ands	r4, r3
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	dcbf      	bgt.n	8000cb6 <__aeabi_fmul+0x9e>
 8000d36:	01a4      	lsls	r4, r4, #6
 8000d38:	0a64      	lsrs	r4, r4, #9
 8000d3a:	b2d0      	uxtb	r0, r2
 8000d3c:	e7b2      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000d3e:	4643      	mov	r3, r8
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d13d      	bne.n	8000dc0 <__aeabi_fmul+0x1a8>
 8000d44:	464a      	mov	r2, r9
 8000d46:	3301      	adds	r3, #1
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	4691      	mov	r9, r2
 8000d4c:	469c      	mov	ip, r3
 8000d4e:	e792      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d129      	bne.n	8000da8 <__aeabi_fmul+0x190>
 8000d54:	2304      	movs	r3, #4
 8000d56:	4699      	mov	r9, r3
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	469a      	mov	sl, r3
 8000d5e:	e774      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000d60:	2c00      	cmp	r4, #0
 8000d62:	d11b      	bne.n	8000d9c <__aeabi_fmul+0x184>
 8000d64:	2308      	movs	r3, #8
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b06      	subs	r3, #6
 8000d6a:	25ff      	movs	r5, #255	; 0xff
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	e76c      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000d70:	4643      	mov	r3, r8
 8000d72:	35ff      	adds	r5, #255	; 0xff
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10b      	bne.n	8000d90 <__aeabi_fmul+0x178>
 8000d78:	2302      	movs	r3, #2
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	4691      	mov	r9, r2
 8000d80:	469c      	mov	ip, r3
 8000d82:	e778      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000d84:	4653      	mov	r3, sl
 8000d86:	0031      	movs	r1, r6
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_fmul+0x176>
 8000d8c:	e783      	b.n	8000c96 <__aeabi_fmul+0x7e>
 8000d8e:	e792      	b.n	8000cb6 <__aeabi_fmul+0x9e>
 8000d90:	2303      	movs	r3, #3
 8000d92:	464a      	mov	r2, r9
 8000d94:	431a      	orrs	r2, r3
 8000d96:	4691      	mov	r9, r2
 8000d98:	469c      	mov	ip, r3
 8000d9a:	e76c      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	4699      	mov	r9, r3
 8000da0:	3b09      	subs	r3, #9
 8000da2:	25ff      	movs	r5, #255	; 0xff
 8000da4:	469a      	mov	sl, r3
 8000da6:	e750      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000da8:	0020      	movs	r0, r4
 8000daa:	f001 fdc7 	bl	800293c <__clzsi2>
 8000dae:	2576      	movs	r5, #118	; 0x76
 8000db0:	1f43      	subs	r3, r0, #5
 8000db2:	409c      	lsls	r4, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	426d      	negs	r5, r5
 8000db8:	4699      	mov	r9, r3
 8000dba:	469a      	mov	sl, r3
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	e744      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000dc0:	4640      	mov	r0, r8
 8000dc2:	f001 fdbb 	bl	800293c <__clzsi2>
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	1f43      	subs	r3, r0, #5
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	2300      	movs	r3, #0
 8000dce:	1a2d      	subs	r5, r5, r0
 8000dd0:	4690      	mov	r8, r2
 8000dd2:	469c      	mov	ip, r3
 8000dd4:	3d76      	subs	r5, #118	; 0x76
 8000dd6:	e74e      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000dd8:	2480      	movs	r4, #128	; 0x80
 8000dda:	2100      	movs	r1, #0
 8000ddc:	20ff      	movs	r0, #255	; 0xff
 8000dde:	03e4      	lsls	r4, r4, #15
 8000de0:	e760      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000de2:	2301      	movs	r3, #1
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	2b1b      	cmp	r3, #27
 8000de8:	dd00      	ble.n	8000dec <__aeabi_fmul+0x1d4>
 8000dea:	e759      	b.n	8000ca0 <__aeabi_fmul+0x88>
 8000dec:	0022      	movs	r2, r4
 8000dee:	309e      	adds	r0, #158	; 0x9e
 8000df0:	40da      	lsrs	r2, r3
 8000df2:	4084      	lsls	r4, r0
 8000df4:	0013      	movs	r3, r2
 8000df6:	1e62      	subs	r2, r4, #1
 8000df8:	4194      	sbcs	r4, r2
 8000dfa:	431c      	orrs	r4, r3
 8000dfc:	0763      	lsls	r3, r4, #29
 8000dfe:	d004      	beq.n	8000e0a <__aeabi_fmul+0x1f2>
 8000e00:	230f      	movs	r3, #15
 8000e02:	4023      	ands	r3, r4
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d000      	beq.n	8000e0a <__aeabi_fmul+0x1f2>
 8000e08:	3404      	adds	r4, #4
 8000e0a:	0163      	lsls	r3, r4, #5
 8000e0c:	d51a      	bpl.n	8000e44 <__aeabi_fmul+0x22c>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	2400      	movs	r4, #0
 8000e12:	e747      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e14:	2080      	movs	r0, #128	; 0x80
 8000e16:	03c0      	lsls	r0, r0, #15
 8000e18:	4204      	tst	r4, r0
 8000e1a:	d009      	beq.n	8000e30 <__aeabi_fmul+0x218>
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4203      	tst	r3, r0
 8000e20:	d106      	bne.n	8000e30 <__aeabi_fmul+0x218>
 8000e22:	4644      	mov	r4, r8
 8000e24:	4304      	orrs	r4, r0
 8000e26:	0264      	lsls	r4, r4, #9
 8000e28:	0039      	movs	r1, r7
 8000e2a:	20ff      	movs	r0, #255	; 0xff
 8000e2c:	0a64      	lsrs	r4, r4, #9
 8000e2e:	e739      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e30:	2080      	movs	r0, #128	; 0x80
 8000e32:	03c0      	lsls	r0, r0, #15
 8000e34:	4304      	orrs	r4, r0
 8000e36:	0264      	lsls	r4, r4, #9
 8000e38:	0031      	movs	r1, r6
 8000e3a:	20ff      	movs	r0, #255	; 0xff
 8000e3c:	0a64      	lsrs	r4, r4, #9
 8000e3e:	e731      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e40:	0028      	movs	r0, r5
 8000e42:	e765      	b.n	8000d10 <__aeabi_fmul+0xf8>
 8000e44:	01a4      	lsls	r4, r4, #6
 8000e46:	2000      	movs	r0, #0
 8000e48:	0a64      	lsrs	r4, r4, #9
 8000e4a:	e72b      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e4c:	2080      	movs	r0, #128	; 0x80
 8000e4e:	03c0      	lsls	r0, r0, #15
 8000e50:	4304      	orrs	r4, r0
 8000e52:	0264      	lsls	r4, r4, #9
 8000e54:	20ff      	movs	r0, #255	; 0xff
 8000e56:	0a64      	lsrs	r4, r4, #9
 8000e58:	e724      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	08008a20 	.word	0x08008a20
 8000e60:	f7ffffff 	.word	0xf7ffffff

08000e64 <__aeabi_fsub>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	46ce      	mov	lr, r9
 8000e68:	4647      	mov	r7, r8
 8000e6a:	0243      	lsls	r3, r0, #9
 8000e6c:	0a5b      	lsrs	r3, r3, #9
 8000e6e:	024e      	lsls	r6, r1, #9
 8000e70:	00da      	lsls	r2, r3, #3
 8000e72:	4694      	mov	ip, r2
 8000e74:	0a72      	lsrs	r2, r6, #9
 8000e76:	4691      	mov	r9, r2
 8000e78:	0045      	lsls	r5, r0, #1
 8000e7a:	004a      	lsls	r2, r1, #1
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	0e2d      	lsrs	r5, r5, #24
 8000e80:	001f      	movs	r7, r3
 8000e82:	0fc4      	lsrs	r4, r0, #31
 8000e84:	0e12      	lsrs	r2, r2, #24
 8000e86:	0fc9      	lsrs	r1, r1, #31
 8000e88:	09b6      	lsrs	r6, r6, #6
 8000e8a:	2aff      	cmp	r2, #255	; 0xff
 8000e8c:	d05b      	beq.n	8000f46 <__aeabi_fsub+0xe2>
 8000e8e:	2001      	movs	r0, #1
 8000e90:	4041      	eors	r1, r0
 8000e92:	428c      	cmp	r4, r1
 8000e94:	d039      	beq.n	8000f0a <__aeabi_fsub+0xa6>
 8000e96:	1aa8      	subs	r0, r5, r2
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	dd5a      	ble.n	8000f52 <__aeabi_fsub+0xee>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d06a      	beq.n	8000f76 <__aeabi_fsub+0x112>
 8000ea0:	2dff      	cmp	r5, #255	; 0xff
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x42>
 8000ea4:	e0d9      	b.n	800105a <__aeabi_fsub+0x1f6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	04d2      	lsls	r2, r2, #19
 8000eaa:	4316      	orrs	r6, r2
 8000eac:	281b      	cmp	r0, #27
 8000eae:	dc00      	bgt.n	8000eb2 <__aeabi_fsub+0x4e>
 8000eb0:	e0e9      	b.n	8001086 <__aeabi_fsub+0x222>
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	4663      	mov	r3, ip
 8000eb6:	1a18      	subs	r0, r3, r0
 8000eb8:	0143      	lsls	r3, r0, #5
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_fsub+0x5a>
 8000ebc:	e0b4      	b.n	8001028 <__aeabi_fsub+0x1c4>
 8000ebe:	0180      	lsls	r0, r0, #6
 8000ec0:	0987      	lsrs	r7, r0, #6
 8000ec2:	0038      	movs	r0, r7
 8000ec4:	f001 fd3a 	bl	800293c <__clzsi2>
 8000ec8:	3805      	subs	r0, #5
 8000eca:	4087      	lsls	r7, r0
 8000ecc:	4285      	cmp	r5, r0
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_fsub+0x6e>
 8000ed0:	e0cc      	b.n	800106c <__aeabi_fsub+0x208>
 8000ed2:	1a2d      	subs	r5, r5, r0
 8000ed4:	48b5      	ldr	r0, [pc, #724]	; (80011ac <__aeabi_fsub+0x348>)
 8000ed6:	4038      	ands	r0, r7
 8000ed8:	0743      	lsls	r3, r0, #29
 8000eda:	d004      	beq.n	8000ee6 <__aeabi_fsub+0x82>
 8000edc:	230f      	movs	r3, #15
 8000ede:	4003      	ands	r3, r0
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_fsub+0x82>
 8000ee4:	3004      	adds	r0, #4
 8000ee6:	0143      	lsls	r3, r0, #5
 8000ee8:	d400      	bmi.n	8000eec <__aeabi_fsub+0x88>
 8000eea:	e0a0      	b.n	800102e <__aeabi_fsub+0x1ca>
 8000eec:	1c6a      	adds	r2, r5, #1
 8000eee:	2dfe      	cmp	r5, #254	; 0xfe
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_fsub+0x90>
 8000ef2:	e08d      	b.n	8001010 <__aeabi_fsub+0x1ac>
 8000ef4:	0180      	lsls	r0, r0, #6
 8000ef6:	0a47      	lsrs	r7, r0, #9
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	05d0      	lsls	r0, r2, #23
 8000efc:	4338      	orrs	r0, r7
 8000efe:	07e4      	lsls	r4, r4, #31
 8000f00:	4320      	orrs	r0, r4
 8000f02:	bcc0      	pop	{r6, r7}
 8000f04:	46b9      	mov	r9, r7
 8000f06:	46b0      	mov	r8, r6
 8000f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f0a:	1aa8      	subs	r0, r5, r2
 8000f0c:	4680      	mov	r8, r0
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	dd45      	ble.n	8000f9e <__aeabi_fsub+0x13a>
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d070      	beq.n	8000ff8 <__aeabi_fsub+0x194>
 8000f16:	2dff      	cmp	r5, #255	; 0xff
 8000f18:	d100      	bne.n	8000f1c <__aeabi_fsub+0xb8>
 8000f1a:	e09e      	b.n	800105a <__aeabi_fsub+0x1f6>
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	04db      	lsls	r3, r3, #19
 8000f20:	431e      	orrs	r6, r3
 8000f22:	4643      	mov	r3, r8
 8000f24:	2b1b      	cmp	r3, #27
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_fsub+0xc6>
 8000f28:	e0d2      	b.n	80010d0 <__aeabi_fsub+0x26c>
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	4460      	add	r0, ip
 8000f2e:	0143      	lsls	r3, r0, #5
 8000f30:	d57a      	bpl.n	8001028 <__aeabi_fsub+0x1c4>
 8000f32:	3501      	adds	r5, #1
 8000f34:	2dff      	cmp	r5, #255	; 0xff
 8000f36:	d06b      	beq.n	8001010 <__aeabi_fsub+0x1ac>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4a9d      	ldr	r2, [pc, #628]	; (80011b0 <__aeabi_fsub+0x34c>)
 8000f3c:	4003      	ands	r3, r0
 8000f3e:	0840      	lsrs	r0, r0, #1
 8000f40:	4010      	ands	r0, r2
 8000f42:	4318      	orrs	r0, r3
 8000f44:	e7c8      	b.n	8000ed8 <__aeabi_fsub+0x74>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d020      	beq.n	8000f8c <__aeabi_fsub+0x128>
 8000f4a:	428c      	cmp	r4, r1
 8000f4c:	d023      	beq.n	8000f96 <__aeabi_fsub+0x132>
 8000f4e:	0028      	movs	r0, r5
 8000f50:	38ff      	subs	r0, #255	; 0xff
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d039      	beq.n	8000fca <__aeabi_fsub+0x166>
 8000f56:	1b57      	subs	r7, r2, r5
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_fsub+0xfa>
 8000f5c:	e09d      	b.n	800109a <__aeabi_fsub+0x236>
 8000f5e:	4663      	mov	r3, ip
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_fsub+0x102>
 8000f64:	e0db      	b.n	800111e <__aeabi_fsub+0x2ba>
 8000f66:	1e7b      	subs	r3, r7, #1
 8000f68:	2f01      	cmp	r7, #1
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x10a>
 8000f6c:	e10d      	b.n	800118a <__aeabi_fsub+0x326>
 8000f6e:	2fff      	cmp	r7, #255	; 0xff
 8000f70:	d071      	beq.n	8001056 <__aeabi_fsub+0x1f2>
 8000f72:	001f      	movs	r7, r3
 8000f74:	e098      	b.n	80010a8 <__aeabi_fsub+0x244>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x118>
 8000f7a:	e0a7      	b.n	80010cc <__aeabi_fsub+0x268>
 8000f7c:	1e42      	subs	r2, r0, #1
 8000f7e:	2801      	cmp	r0, #1
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0x120>
 8000f82:	e0e6      	b.n	8001152 <__aeabi_fsub+0x2ee>
 8000f84:	28ff      	cmp	r0, #255	; 0xff
 8000f86:	d068      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8000f88:	0010      	movs	r0, r2
 8000f8a:	e78f      	b.n	8000eac <__aeabi_fsub+0x48>
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	4041      	eors	r1, r0
 8000f90:	42a1      	cmp	r1, r4
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fsub+0x132>
 8000f94:	e77f      	b.n	8000e96 <__aeabi_fsub+0x32>
 8000f96:	20ff      	movs	r0, #255	; 0xff
 8000f98:	4240      	negs	r0, r0
 8000f9a:	4680      	mov	r8, r0
 8000f9c:	44a8      	add	r8, r5
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d038      	beq.n	8001016 <__aeabi_fsub+0x1b2>
 8000fa4:	1b51      	subs	r1, r2, r5
 8000fa6:	2d00      	cmp	r5, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x148>
 8000faa:	e0ae      	b.n	800110a <__aeabi_fsub+0x2a6>
 8000fac:	2aff      	cmp	r2, #255	; 0xff
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_fsub+0x14e>
 8000fb0:	e0df      	b.n	8001172 <__aeabi_fsub+0x30e>
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	4660      	mov	r0, ip
 8000fb6:	04db      	lsls	r3, r3, #19
 8000fb8:	4318      	orrs	r0, r3
 8000fba:	4684      	mov	ip, r0
 8000fbc:	291b      	cmp	r1, #27
 8000fbe:	dc00      	bgt.n	8000fc2 <__aeabi_fsub+0x15e>
 8000fc0:	e0d9      	b.n	8001176 <__aeabi_fsub+0x312>
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	0015      	movs	r5, r2
 8000fc6:	1980      	adds	r0, r0, r6
 8000fc8:	e7b1      	b.n	8000f2e <__aeabi_fsub+0xca>
 8000fca:	20fe      	movs	r0, #254	; 0xfe
 8000fcc:	1c6a      	adds	r2, r5, #1
 8000fce:	4210      	tst	r0, r2
 8000fd0:	d171      	bne.n	80010b6 <__aeabi_fsub+0x252>
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_fsub+0x174>
 8000fd6:	e0a6      	b.n	8001126 <__aeabi_fsub+0x2c2>
 8000fd8:	4663      	mov	r3, ip
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_fsub+0x17c>
 8000fde:	e0d9      	b.n	8001194 <__aeabi_fsub+0x330>
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2e00      	cmp	r6, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x184>
 8000fe6:	e788      	b.n	8000efa <__aeabi_fsub+0x96>
 8000fe8:	1b98      	subs	r0, r3, r6
 8000fea:	0143      	lsls	r3, r0, #5
 8000fec:	d400      	bmi.n	8000ff0 <__aeabi_fsub+0x18c>
 8000fee:	e0e1      	b.n	80011b4 <__aeabi_fsub+0x350>
 8000ff0:	4663      	mov	r3, ip
 8000ff2:	000c      	movs	r4, r1
 8000ff4:	1af0      	subs	r0, r6, r3
 8000ff6:	e76f      	b.n	8000ed8 <__aeabi_fsub+0x74>
 8000ff8:	2e00      	cmp	r6, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_fsub+0x19a>
 8000ffc:	e0b7      	b.n	800116e <__aeabi_fsub+0x30a>
 8000ffe:	0002      	movs	r2, r0
 8001000:	3a01      	subs	r2, #1
 8001002:	2801      	cmp	r0, #1
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x1a4>
 8001006:	e09c      	b.n	8001142 <__aeabi_fsub+0x2de>
 8001008:	28ff      	cmp	r0, #255	; 0xff
 800100a:	d026      	beq.n	800105a <__aeabi_fsub+0x1f6>
 800100c:	4690      	mov	r8, r2
 800100e:	e788      	b.n	8000f22 <__aeabi_fsub+0xbe>
 8001010:	22ff      	movs	r2, #255	; 0xff
 8001012:	2700      	movs	r7, #0
 8001014:	e771      	b.n	8000efa <__aeabi_fsub+0x96>
 8001016:	20fe      	movs	r0, #254	; 0xfe
 8001018:	1c6a      	adds	r2, r5, #1
 800101a:	4210      	tst	r0, r2
 800101c:	d064      	beq.n	80010e8 <__aeabi_fsub+0x284>
 800101e:	2aff      	cmp	r2, #255	; 0xff
 8001020:	d0f6      	beq.n	8001010 <__aeabi_fsub+0x1ac>
 8001022:	0015      	movs	r5, r2
 8001024:	4466      	add	r6, ip
 8001026:	0870      	lsrs	r0, r6, #1
 8001028:	0743      	lsls	r3, r0, #29
 800102a:	d000      	beq.n	800102e <__aeabi_fsub+0x1ca>
 800102c:	e756      	b.n	8000edc <__aeabi_fsub+0x78>
 800102e:	08c3      	lsrs	r3, r0, #3
 8001030:	2dff      	cmp	r5, #255	; 0xff
 8001032:	d012      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	0a5f      	lsrs	r7, r3, #9
 8001038:	b2ea      	uxtb	r2, r5
 800103a:	e75e      	b.n	8000efa <__aeabi_fsub+0x96>
 800103c:	4662      	mov	r2, ip
 800103e:	2a00      	cmp	r2, #0
 8001040:	d100      	bne.n	8001044 <__aeabi_fsub+0x1e0>
 8001042:	e096      	b.n	8001172 <__aeabi_fsub+0x30e>
 8001044:	2e00      	cmp	r6, #0
 8001046:	d008      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	03d2      	lsls	r2, r2, #15
 800104c:	4213      	tst	r3, r2
 800104e:	d004      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8001050:	4648      	mov	r0, r9
 8001052:	4210      	tst	r0, r2
 8001054:	d101      	bne.n	800105a <__aeabi_fsub+0x1f6>
 8001056:	000c      	movs	r4, r1
 8001058:	464b      	mov	r3, r9
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0d8      	beq.n	8001010 <__aeabi_fsub+0x1ac>
 800105e:	2780      	movs	r7, #128	; 0x80
 8001060:	03ff      	lsls	r7, r7, #15
 8001062:	431f      	orrs	r7, r3
 8001064:	027f      	lsls	r7, r7, #9
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	0a7f      	lsrs	r7, r7, #9
 800106a:	e746      	b.n	8000efa <__aeabi_fsub+0x96>
 800106c:	2320      	movs	r3, #32
 800106e:	003a      	movs	r2, r7
 8001070:	1b45      	subs	r5, r0, r5
 8001072:	0038      	movs	r0, r7
 8001074:	3501      	adds	r5, #1
 8001076:	40ea      	lsrs	r2, r5
 8001078:	1b5d      	subs	r5, r3, r5
 800107a:	40a8      	lsls	r0, r5
 800107c:	1e43      	subs	r3, r0, #1
 800107e:	4198      	sbcs	r0, r3
 8001080:	2500      	movs	r5, #0
 8001082:	4310      	orrs	r0, r2
 8001084:	e728      	b.n	8000ed8 <__aeabi_fsub+0x74>
 8001086:	2320      	movs	r3, #32
 8001088:	1a1b      	subs	r3, r3, r0
 800108a:	0032      	movs	r2, r6
 800108c:	409e      	lsls	r6, r3
 800108e:	40c2      	lsrs	r2, r0
 8001090:	0030      	movs	r0, r6
 8001092:	1e43      	subs	r3, r0, #1
 8001094:	4198      	sbcs	r0, r3
 8001096:	4310      	orrs	r0, r2
 8001098:	e70c      	b.n	8000eb4 <__aeabi_fsub+0x50>
 800109a:	2aff      	cmp	r2, #255	; 0xff
 800109c:	d0db      	beq.n	8001056 <__aeabi_fsub+0x1f2>
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	4660      	mov	r0, ip
 80010a2:	04db      	lsls	r3, r3, #19
 80010a4:	4318      	orrs	r0, r3
 80010a6:	4684      	mov	ip, r0
 80010a8:	2f1b      	cmp	r7, #27
 80010aa:	dd56      	ble.n	800115a <__aeabi_fsub+0x2f6>
 80010ac:	2001      	movs	r0, #1
 80010ae:	000c      	movs	r4, r1
 80010b0:	0015      	movs	r5, r2
 80010b2:	1a30      	subs	r0, r6, r0
 80010b4:	e700      	b.n	8000eb8 <__aeabi_fsub+0x54>
 80010b6:	4663      	mov	r3, ip
 80010b8:	1b9f      	subs	r7, r3, r6
 80010ba:	017b      	lsls	r3, r7, #5
 80010bc:	d43d      	bmi.n	800113a <__aeabi_fsub+0x2d6>
 80010be:	2f00      	cmp	r7, #0
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fsub+0x260>
 80010c2:	e6fe      	b.n	8000ec2 <__aeabi_fsub+0x5e>
 80010c4:	2400      	movs	r4, #0
 80010c6:	2200      	movs	r2, #0
 80010c8:	2700      	movs	r7, #0
 80010ca:	e716      	b.n	8000efa <__aeabi_fsub+0x96>
 80010cc:	0005      	movs	r5, r0
 80010ce:	e7af      	b.n	8001030 <__aeabi_fsub+0x1cc>
 80010d0:	0032      	movs	r2, r6
 80010d2:	4643      	mov	r3, r8
 80010d4:	4641      	mov	r1, r8
 80010d6:	40da      	lsrs	r2, r3
 80010d8:	2320      	movs	r3, #32
 80010da:	1a5b      	subs	r3, r3, r1
 80010dc:	409e      	lsls	r6, r3
 80010de:	0030      	movs	r0, r6
 80010e0:	1e43      	subs	r3, r0, #1
 80010e2:	4198      	sbcs	r0, r3
 80010e4:	4310      	orrs	r0, r2
 80010e6:	e721      	b.n	8000f2c <__aeabi_fsub+0xc8>
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	d1a7      	bne.n	800103c <__aeabi_fsub+0x1d8>
 80010ec:	4663      	mov	r3, ip
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d059      	beq.n	80011a6 <__aeabi_fsub+0x342>
 80010f2:	2200      	movs	r2, #0
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_fsub+0x296>
 80010f8:	e6ff      	b.n	8000efa <__aeabi_fsub+0x96>
 80010fa:	0030      	movs	r0, r6
 80010fc:	4460      	add	r0, ip
 80010fe:	0143      	lsls	r3, r0, #5
 8001100:	d592      	bpl.n	8001028 <__aeabi_fsub+0x1c4>
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <__aeabi_fsub+0x348>)
 8001104:	3501      	adds	r5, #1
 8001106:	4018      	ands	r0, r3
 8001108:	e78e      	b.n	8001028 <__aeabi_fsub+0x1c4>
 800110a:	4663      	mov	r3, ip
 800110c:	2b00      	cmp	r3, #0
 800110e:	d047      	beq.n	80011a0 <__aeabi_fsub+0x33c>
 8001110:	1e4b      	subs	r3, r1, #1
 8001112:	2901      	cmp	r1, #1
 8001114:	d015      	beq.n	8001142 <__aeabi_fsub+0x2de>
 8001116:	29ff      	cmp	r1, #255	; 0xff
 8001118:	d02b      	beq.n	8001172 <__aeabi_fsub+0x30e>
 800111a:	0019      	movs	r1, r3
 800111c:	e74e      	b.n	8000fbc <__aeabi_fsub+0x158>
 800111e:	000c      	movs	r4, r1
 8001120:	464b      	mov	r3, r9
 8001122:	003d      	movs	r5, r7
 8001124:	e784      	b.n	8001030 <__aeabi_fsub+0x1cc>
 8001126:	4662      	mov	r2, ip
 8001128:	2a00      	cmp	r2, #0
 800112a:	d18b      	bne.n	8001044 <__aeabi_fsub+0x1e0>
 800112c:	2e00      	cmp	r6, #0
 800112e:	d192      	bne.n	8001056 <__aeabi_fsub+0x1f2>
 8001130:	2780      	movs	r7, #128	; 0x80
 8001132:	2400      	movs	r4, #0
 8001134:	22ff      	movs	r2, #255	; 0xff
 8001136:	03ff      	lsls	r7, r7, #15
 8001138:	e6df      	b.n	8000efa <__aeabi_fsub+0x96>
 800113a:	4663      	mov	r3, ip
 800113c:	000c      	movs	r4, r1
 800113e:	1af7      	subs	r7, r6, r3
 8001140:	e6bf      	b.n	8000ec2 <__aeabi_fsub+0x5e>
 8001142:	0030      	movs	r0, r6
 8001144:	4460      	add	r0, ip
 8001146:	2501      	movs	r5, #1
 8001148:	0143      	lsls	r3, r0, #5
 800114a:	d400      	bmi.n	800114e <__aeabi_fsub+0x2ea>
 800114c:	e76c      	b.n	8001028 <__aeabi_fsub+0x1c4>
 800114e:	2502      	movs	r5, #2
 8001150:	e6f2      	b.n	8000f38 <__aeabi_fsub+0xd4>
 8001152:	4663      	mov	r3, ip
 8001154:	2501      	movs	r5, #1
 8001156:	1b98      	subs	r0, r3, r6
 8001158:	e6ae      	b.n	8000eb8 <__aeabi_fsub+0x54>
 800115a:	2320      	movs	r3, #32
 800115c:	4664      	mov	r4, ip
 800115e:	4660      	mov	r0, ip
 8001160:	40fc      	lsrs	r4, r7
 8001162:	1bdf      	subs	r7, r3, r7
 8001164:	40b8      	lsls	r0, r7
 8001166:	1e43      	subs	r3, r0, #1
 8001168:	4198      	sbcs	r0, r3
 800116a:	4320      	orrs	r0, r4
 800116c:	e79f      	b.n	80010ae <__aeabi_fsub+0x24a>
 800116e:	0005      	movs	r5, r0
 8001170:	e75e      	b.n	8001030 <__aeabi_fsub+0x1cc>
 8001172:	464b      	mov	r3, r9
 8001174:	e771      	b.n	800105a <__aeabi_fsub+0x1f6>
 8001176:	2320      	movs	r3, #32
 8001178:	4665      	mov	r5, ip
 800117a:	4660      	mov	r0, ip
 800117c:	40cd      	lsrs	r5, r1
 800117e:	1a59      	subs	r1, r3, r1
 8001180:	4088      	lsls	r0, r1
 8001182:	1e43      	subs	r3, r0, #1
 8001184:	4198      	sbcs	r0, r3
 8001186:	4328      	orrs	r0, r5
 8001188:	e71c      	b.n	8000fc4 <__aeabi_fsub+0x160>
 800118a:	4663      	mov	r3, ip
 800118c:	000c      	movs	r4, r1
 800118e:	2501      	movs	r5, #1
 8001190:	1af0      	subs	r0, r6, r3
 8001192:	e691      	b.n	8000eb8 <__aeabi_fsub+0x54>
 8001194:	2e00      	cmp	r6, #0
 8001196:	d095      	beq.n	80010c4 <__aeabi_fsub+0x260>
 8001198:	000c      	movs	r4, r1
 800119a:	464f      	mov	r7, r9
 800119c:	2200      	movs	r2, #0
 800119e:	e6ac      	b.n	8000efa <__aeabi_fsub+0x96>
 80011a0:	464b      	mov	r3, r9
 80011a2:	000d      	movs	r5, r1
 80011a4:	e744      	b.n	8001030 <__aeabi_fsub+0x1cc>
 80011a6:	464f      	mov	r7, r9
 80011a8:	2200      	movs	r2, #0
 80011aa:	e6a6      	b.n	8000efa <__aeabi_fsub+0x96>
 80011ac:	fbffffff 	.word	0xfbffffff
 80011b0:	7dffffff 	.word	0x7dffffff
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d000      	beq.n	80011ba <__aeabi_fsub+0x356>
 80011b8:	e736      	b.n	8001028 <__aeabi_fsub+0x1c4>
 80011ba:	2400      	movs	r4, #0
 80011bc:	2700      	movs	r7, #0
 80011be:	e69c      	b.n	8000efa <__aeabi_fsub+0x96>

080011c0 <__aeabi_f2iz>:
 80011c0:	0241      	lsls	r1, r0, #9
 80011c2:	0042      	lsls	r2, r0, #1
 80011c4:	0fc3      	lsrs	r3, r0, #31
 80011c6:	0a49      	lsrs	r1, r1, #9
 80011c8:	2000      	movs	r0, #0
 80011ca:	0e12      	lsrs	r2, r2, #24
 80011cc:	2a7e      	cmp	r2, #126	; 0x7e
 80011ce:	dd03      	ble.n	80011d8 <__aeabi_f2iz+0x18>
 80011d0:	2a9d      	cmp	r2, #157	; 0x9d
 80011d2:	dd02      	ble.n	80011da <__aeabi_f2iz+0x1a>
 80011d4:	4a09      	ldr	r2, [pc, #36]	; (80011fc <__aeabi_f2iz+0x3c>)
 80011d6:	1898      	adds	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	2080      	movs	r0, #128	; 0x80
 80011dc:	0400      	lsls	r0, r0, #16
 80011de:	4301      	orrs	r1, r0
 80011e0:	2a95      	cmp	r2, #149	; 0x95
 80011e2:	dc07      	bgt.n	80011f4 <__aeabi_f2iz+0x34>
 80011e4:	2096      	movs	r0, #150	; 0x96
 80011e6:	1a82      	subs	r2, r0, r2
 80011e8:	40d1      	lsrs	r1, r2
 80011ea:	4248      	negs	r0, r1
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d1f3      	bne.n	80011d8 <__aeabi_f2iz+0x18>
 80011f0:	0008      	movs	r0, r1
 80011f2:	e7f1      	b.n	80011d8 <__aeabi_f2iz+0x18>
 80011f4:	3a96      	subs	r2, #150	; 0x96
 80011f6:	4091      	lsls	r1, r2
 80011f8:	e7f7      	b.n	80011ea <__aeabi_f2iz+0x2a>
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	7fffffff 	.word	0x7fffffff

08001200 <__aeabi_ui2f>:
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	1e05      	subs	r5, r0, #0
 8001204:	d00e      	beq.n	8001224 <__aeabi_ui2f+0x24>
 8001206:	f001 fb99 	bl	800293c <__clzsi2>
 800120a:	239e      	movs	r3, #158	; 0x9e
 800120c:	0004      	movs	r4, r0
 800120e:	1a1b      	subs	r3, r3, r0
 8001210:	2b96      	cmp	r3, #150	; 0x96
 8001212:	dc0c      	bgt.n	800122e <__aeabi_ui2f+0x2e>
 8001214:	2808      	cmp	r0, #8
 8001216:	dd01      	ble.n	800121c <__aeabi_ui2f+0x1c>
 8001218:	3c08      	subs	r4, #8
 800121a:	40a5      	lsls	r5, r4
 800121c:	026d      	lsls	r5, r5, #9
 800121e:	0a6d      	lsrs	r5, r5, #9
 8001220:	b2d8      	uxtb	r0, r3
 8001222:	e001      	b.n	8001228 <__aeabi_ui2f+0x28>
 8001224:	2000      	movs	r0, #0
 8001226:	2500      	movs	r5, #0
 8001228:	05c0      	lsls	r0, r0, #23
 800122a:	4328      	orrs	r0, r5
 800122c:	bd70      	pop	{r4, r5, r6, pc}
 800122e:	2b99      	cmp	r3, #153	; 0x99
 8001230:	dd09      	ble.n	8001246 <__aeabi_ui2f+0x46>
 8001232:	0002      	movs	r2, r0
 8001234:	0029      	movs	r1, r5
 8001236:	321b      	adds	r2, #27
 8001238:	4091      	lsls	r1, r2
 800123a:	1e4a      	subs	r2, r1, #1
 800123c:	4191      	sbcs	r1, r2
 800123e:	2205      	movs	r2, #5
 8001240:	1a12      	subs	r2, r2, r0
 8001242:	40d5      	lsrs	r5, r2
 8001244:	430d      	orrs	r5, r1
 8001246:	2c05      	cmp	r4, #5
 8001248:	dc12      	bgt.n	8001270 <__aeabi_ui2f+0x70>
 800124a:	0029      	movs	r1, r5
 800124c:	4e0c      	ldr	r6, [pc, #48]	; (8001280 <__aeabi_ui2f+0x80>)
 800124e:	4031      	ands	r1, r6
 8001250:	076a      	lsls	r2, r5, #29
 8001252:	d009      	beq.n	8001268 <__aeabi_ui2f+0x68>
 8001254:	200f      	movs	r0, #15
 8001256:	4028      	ands	r0, r5
 8001258:	2804      	cmp	r0, #4
 800125a:	d005      	beq.n	8001268 <__aeabi_ui2f+0x68>
 800125c:	3104      	adds	r1, #4
 800125e:	014a      	lsls	r2, r1, #5
 8001260:	d502      	bpl.n	8001268 <__aeabi_ui2f+0x68>
 8001262:	239f      	movs	r3, #159	; 0x9f
 8001264:	4031      	ands	r1, r6
 8001266:	1b1b      	subs	r3, r3, r4
 8001268:	0189      	lsls	r1, r1, #6
 800126a:	0a4d      	lsrs	r5, r1, #9
 800126c:	b2d8      	uxtb	r0, r3
 800126e:	e7db      	b.n	8001228 <__aeabi_ui2f+0x28>
 8001270:	1f62      	subs	r2, r4, #5
 8001272:	4095      	lsls	r5, r2
 8001274:	0029      	movs	r1, r5
 8001276:	4e02      	ldr	r6, [pc, #8]	; (8001280 <__aeabi_ui2f+0x80>)
 8001278:	4031      	ands	r1, r6
 800127a:	076a      	lsls	r2, r5, #29
 800127c:	d0f4      	beq.n	8001268 <__aeabi_ui2f+0x68>
 800127e:	e7e9      	b.n	8001254 <__aeabi_ui2f+0x54>
 8001280:	fbffffff 	.word	0xfbffffff

08001284 <__aeabi_ddiv>:
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	4657      	mov	r7, sl
 8001288:	464e      	mov	r6, r9
 800128a:	4645      	mov	r5, r8
 800128c:	46de      	mov	lr, fp
 800128e:	b5e0      	push	{r5, r6, r7, lr}
 8001290:	4681      	mov	r9, r0
 8001292:	0005      	movs	r5, r0
 8001294:	030c      	lsls	r4, r1, #12
 8001296:	0048      	lsls	r0, r1, #1
 8001298:	4692      	mov	sl, r2
 800129a:	001f      	movs	r7, r3
 800129c:	b085      	sub	sp, #20
 800129e:	0b24      	lsrs	r4, r4, #12
 80012a0:	0d40      	lsrs	r0, r0, #21
 80012a2:	0fce      	lsrs	r6, r1, #31
 80012a4:	2800      	cmp	r0, #0
 80012a6:	d100      	bne.n	80012aa <__aeabi_ddiv+0x26>
 80012a8:	e156      	b.n	8001558 <__aeabi_ddiv+0x2d4>
 80012aa:	4bd4      	ldr	r3, [pc, #848]	; (80015fc <__aeabi_ddiv+0x378>)
 80012ac:	4298      	cmp	r0, r3
 80012ae:	d100      	bne.n	80012b2 <__aeabi_ddiv+0x2e>
 80012b0:	e172      	b.n	8001598 <__aeabi_ddiv+0x314>
 80012b2:	0f6b      	lsrs	r3, r5, #29
 80012b4:	00e4      	lsls	r4, r4, #3
 80012b6:	431c      	orrs	r4, r3
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	041b      	lsls	r3, r3, #16
 80012bc:	4323      	orrs	r3, r4
 80012be:	4698      	mov	r8, r3
 80012c0:	4bcf      	ldr	r3, [pc, #828]	; (8001600 <__aeabi_ddiv+0x37c>)
 80012c2:	00ed      	lsls	r5, r5, #3
 80012c4:	469b      	mov	fp, r3
 80012c6:	2300      	movs	r3, #0
 80012c8:	4699      	mov	r9, r3
 80012ca:	4483      	add	fp, r0
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	033c      	lsls	r4, r7, #12
 80012d0:	007b      	lsls	r3, r7, #1
 80012d2:	4650      	mov	r0, sl
 80012d4:	0b24      	lsrs	r4, r4, #12
 80012d6:	0d5b      	lsrs	r3, r3, #21
 80012d8:	0fff      	lsrs	r7, r7, #31
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d100      	bne.n	80012e0 <__aeabi_ddiv+0x5c>
 80012de:	e11f      	b.n	8001520 <__aeabi_ddiv+0x29c>
 80012e0:	4ac6      	ldr	r2, [pc, #792]	; (80015fc <__aeabi_ddiv+0x378>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d100      	bne.n	80012e8 <__aeabi_ddiv+0x64>
 80012e6:	e162      	b.n	80015ae <__aeabi_ddiv+0x32a>
 80012e8:	49c5      	ldr	r1, [pc, #788]	; (8001600 <__aeabi_ddiv+0x37c>)
 80012ea:	0f42      	lsrs	r2, r0, #29
 80012ec:	468c      	mov	ip, r1
 80012ee:	00e4      	lsls	r4, r4, #3
 80012f0:	4659      	mov	r1, fp
 80012f2:	4314      	orrs	r4, r2
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	4463      	add	r3, ip
 80012f8:	0412      	lsls	r2, r2, #16
 80012fa:	1acb      	subs	r3, r1, r3
 80012fc:	4314      	orrs	r4, r2
 80012fe:	469b      	mov	fp, r3
 8001300:	00c2      	lsls	r2, r0, #3
 8001302:	2000      	movs	r0, #0
 8001304:	0033      	movs	r3, r6
 8001306:	407b      	eors	r3, r7
 8001308:	469a      	mov	sl, r3
 800130a:	464b      	mov	r3, r9
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d827      	bhi.n	8001360 <__aeabi_ddiv+0xdc>
 8001310:	49bc      	ldr	r1, [pc, #752]	; (8001604 <__aeabi_ddiv+0x380>)
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	58cb      	ldr	r3, [r1, r3]
 8001316:	469f      	mov	pc, r3
 8001318:	46b2      	mov	sl, r6
 800131a:	9b00      	ldr	r3, [sp, #0]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d016      	beq.n	800134e <__aeabi_ddiv+0xca>
 8001320:	2b03      	cmp	r3, #3
 8001322:	d100      	bne.n	8001326 <__aeabi_ddiv+0xa2>
 8001324:	e28e      	b.n	8001844 <__aeabi_ddiv+0x5c0>
 8001326:	2b01      	cmp	r3, #1
 8001328:	d000      	beq.n	800132c <__aeabi_ddiv+0xa8>
 800132a:	e0d9      	b.n	80014e0 <__aeabi_ddiv+0x25c>
 800132c:	2300      	movs	r3, #0
 800132e:	2400      	movs	r4, #0
 8001330:	2500      	movs	r5, #0
 8001332:	4652      	mov	r2, sl
 8001334:	051b      	lsls	r3, r3, #20
 8001336:	4323      	orrs	r3, r4
 8001338:	07d2      	lsls	r2, r2, #31
 800133a:	4313      	orrs	r3, r2
 800133c:	0028      	movs	r0, r5
 800133e:	0019      	movs	r1, r3
 8001340:	b005      	add	sp, #20
 8001342:	bcf0      	pop	{r4, r5, r6, r7}
 8001344:	46bb      	mov	fp, r7
 8001346:	46b2      	mov	sl, r6
 8001348:	46a9      	mov	r9, r5
 800134a:	46a0      	mov	r8, r4
 800134c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134e:	2400      	movs	r4, #0
 8001350:	2500      	movs	r5, #0
 8001352:	4baa      	ldr	r3, [pc, #680]	; (80015fc <__aeabi_ddiv+0x378>)
 8001354:	e7ed      	b.n	8001332 <__aeabi_ddiv+0xae>
 8001356:	46ba      	mov	sl, r7
 8001358:	46a0      	mov	r8, r4
 800135a:	0015      	movs	r5, r2
 800135c:	9000      	str	r0, [sp, #0]
 800135e:	e7dc      	b.n	800131a <__aeabi_ddiv+0x96>
 8001360:	4544      	cmp	r4, r8
 8001362:	d200      	bcs.n	8001366 <__aeabi_ddiv+0xe2>
 8001364:	e1c7      	b.n	80016f6 <__aeabi_ddiv+0x472>
 8001366:	d100      	bne.n	800136a <__aeabi_ddiv+0xe6>
 8001368:	e1c2      	b.n	80016f0 <__aeabi_ddiv+0x46c>
 800136a:	2301      	movs	r3, #1
 800136c:	425b      	negs	r3, r3
 800136e:	469c      	mov	ip, r3
 8001370:	002e      	movs	r6, r5
 8001372:	4640      	mov	r0, r8
 8001374:	2500      	movs	r5, #0
 8001376:	44e3      	add	fp, ip
 8001378:	0223      	lsls	r3, r4, #8
 800137a:	0e14      	lsrs	r4, r2, #24
 800137c:	431c      	orrs	r4, r3
 800137e:	0c1b      	lsrs	r3, r3, #16
 8001380:	4699      	mov	r9, r3
 8001382:	0423      	lsls	r3, r4, #16
 8001384:	0c1f      	lsrs	r7, r3, #16
 8001386:	0212      	lsls	r2, r2, #8
 8001388:	4649      	mov	r1, r9
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	9701      	str	r7, [sp, #4]
 800138e:	f7fe ff3f 	bl	8000210 <__aeabi_uidivmod>
 8001392:	0002      	movs	r2, r0
 8001394:	437a      	muls	r2, r7
 8001396:	040b      	lsls	r3, r1, #16
 8001398:	0c31      	lsrs	r1, r6, #16
 800139a:	4680      	mov	r8, r0
 800139c:	4319      	orrs	r1, r3
 800139e:	428a      	cmp	r2, r1
 80013a0:	d907      	bls.n	80013b2 <__aeabi_ddiv+0x12e>
 80013a2:	2301      	movs	r3, #1
 80013a4:	425b      	negs	r3, r3
 80013a6:	469c      	mov	ip, r3
 80013a8:	1909      	adds	r1, r1, r4
 80013aa:	44e0      	add	r8, ip
 80013ac:	428c      	cmp	r4, r1
 80013ae:	d800      	bhi.n	80013b2 <__aeabi_ddiv+0x12e>
 80013b0:	e207      	b.n	80017c2 <__aeabi_ddiv+0x53e>
 80013b2:	1a88      	subs	r0, r1, r2
 80013b4:	4649      	mov	r1, r9
 80013b6:	f7fe ff2b 	bl	8000210 <__aeabi_uidivmod>
 80013ba:	0409      	lsls	r1, r1, #16
 80013bc:	468c      	mov	ip, r1
 80013be:	0431      	lsls	r1, r6, #16
 80013c0:	4666      	mov	r6, ip
 80013c2:	9a01      	ldr	r2, [sp, #4]
 80013c4:	0c09      	lsrs	r1, r1, #16
 80013c6:	4342      	muls	r2, r0
 80013c8:	0003      	movs	r3, r0
 80013ca:	4331      	orrs	r1, r6
 80013cc:	428a      	cmp	r2, r1
 80013ce:	d904      	bls.n	80013da <__aeabi_ddiv+0x156>
 80013d0:	1909      	adds	r1, r1, r4
 80013d2:	3b01      	subs	r3, #1
 80013d4:	428c      	cmp	r4, r1
 80013d6:	d800      	bhi.n	80013da <__aeabi_ddiv+0x156>
 80013d8:	e1ed      	b.n	80017b6 <__aeabi_ddiv+0x532>
 80013da:	1a88      	subs	r0, r1, r2
 80013dc:	4642      	mov	r2, r8
 80013de:	0412      	lsls	r2, r2, #16
 80013e0:	431a      	orrs	r2, r3
 80013e2:	4690      	mov	r8, r2
 80013e4:	4641      	mov	r1, r8
 80013e6:	9b00      	ldr	r3, [sp, #0]
 80013e8:	040e      	lsls	r6, r1, #16
 80013ea:	0c1b      	lsrs	r3, r3, #16
 80013ec:	001f      	movs	r7, r3
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	9b00      	ldr	r3, [sp, #0]
 80013f2:	0c36      	lsrs	r6, r6, #16
 80013f4:	041b      	lsls	r3, r3, #16
 80013f6:	0c19      	lsrs	r1, r3, #16
 80013f8:	000b      	movs	r3, r1
 80013fa:	4373      	muls	r3, r6
 80013fc:	0c12      	lsrs	r2, r2, #16
 80013fe:	437e      	muls	r6, r7
 8001400:	9103      	str	r1, [sp, #12]
 8001402:	4351      	muls	r1, r2
 8001404:	437a      	muls	r2, r7
 8001406:	0c1f      	lsrs	r7, r3, #16
 8001408:	46bc      	mov	ip, r7
 800140a:	1876      	adds	r6, r6, r1
 800140c:	4466      	add	r6, ip
 800140e:	42b1      	cmp	r1, r6
 8001410:	d903      	bls.n	800141a <__aeabi_ddiv+0x196>
 8001412:	2180      	movs	r1, #128	; 0x80
 8001414:	0249      	lsls	r1, r1, #9
 8001416:	468c      	mov	ip, r1
 8001418:	4462      	add	r2, ip
 800141a:	0c31      	lsrs	r1, r6, #16
 800141c:	188a      	adds	r2, r1, r2
 800141e:	0431      	lsls	r1, r6, #16
 8001420:	041e      	lsls	r6, r3, #16
 8001422:	0c36      	lsrs	r6, r6, #16
 8001424:	198e      	adds	r6, r1, r6
 8001426:	4290      	cmp	r0, r2
 8001428:	d302      	bcc.n	8001430 <__aeabi_ddiv+0x1ac>
 800142a:	d112      	bne.n	8001452 <__aeabi_ddiv+0x1ce>
 800142c:	42b5      	cmp	r5, r6
 800142e:	d210      	bcs.n	8001452 <__aeabi_ddiv+0x1ce>
 8001430:	4643      	mov	r3, r8
 8001432:	1e59      	subs	r1, r3, #1
 8001434:	9b00      	ldr	r3, [sp, #0]
 8001436:	469c      	mov	ip, r3
 8001438:	4465      	add	r5, ip
 800143a:	001f      	movs	r7, r3
 800143c:	429d      	cmp	r5, r3
 800143e:	419b      	sbcs	r3, r3
 8001440:	425b      	negs	r3, r3
 8001442:	191b      	adds	r3, r3, r4
 8001444:	18c0      	adds	r0, r0, r3
 8001446:	4284      	cmp	r4, r0
 8001448:	d200      	bcs.n	800144c <__aeabi_ddiv+0x1c8>
 800144a:	e1a0      	b.n	800178e <__aeabi_ddiv+0x50a>
 800144c:	d100      	bne.n	8001450 <__aeabi_ddiv+0x1cc>
 800144e:	e19b      	b.n	8001788 <__aeabi_ddiv+0x504>
 8001450:	4688      	mov	r8, r1
 8001452:	1bae      	subs	r6, r5, r6
 8001454:	42b5      	cmp	r5, r6
 8001456:	41ad      	sbcs	r5, r5
 8001458:	1a80      	subs	r0, r0, r2
 800145a:	426d      	negs	r5, r5
 800145c:	1b40      	subs	r0, r0, r5
 800145e:	4284      	cmp	r4, r0
 8001460:	d100      	bne.n	8001464 <__aeabi_ddiv+0x1e0>
 8001462:	e1d5      	b.n	8001810 <__aeabi_ddiv+0x58c>
 8001464:	4649      	mov	r1, r9
 8001466:	f7fe fed3 	bl	8000210 <__aeabi_uidivmod>
 800146a:	9a01      	ldr	r2, [sp, #4]
 800146c:	040b      	lsls	r3, r1, #16
 800146e:	4342      	muls	r2, r0
 8001470:	0c31      	lsrs	r1, r6, #16
 8001472:	0005      	movs	r5, r0
 8001474:	4319      	orrs	r1, r3
 8001476:	428a      	cmp	r2, r1
 8001478:	d900      	bls.n	800147c <__aeabi_ddiv+0x1f8>
 800147a:	e16c      	b.n	8001756 <__aeabi_ddiv+0x4d2>
 800147c:	1a88      	subs	r0, r1, r2
 800147e:	4649      	mov	r1, r9
 8001480:	f7fe fec6 	bl	8000210 <__aeabi_uidivmod>
 8001484:	9a01      	ldr	r2, [sp, #4]
 8001486:	0436      	lsls	r6, r6, #16
 8001488:	4342      	muls	r2, r0
 800148a:	0409      	lsls	r1, r1, #16
 800148c:	0c36      	lsrs	r6, r6, #16
 800148e:	0003      	movs	r3, r0
 8001490:	430e      	orrs	r6, r1
 8001492:	42b2      	cmp	r2, r6
 8001494:	d900      	bls.n	8001498 <__aeabi_ddiv+0x214>
 8001496:	e153      	b.n	8001740 <__aeabi_ddiv+0x4bc>
 8001498:	9803      	ldr	r0, [sp, #12]
 800149a:	1ab6      	subs	r6, r6, r2
 800149c:	0002      	movs	r2, r0
 800149e:	042d      	lsls	r5, r5, #16
 80014a0:	431d      	orrs	r5, r3
 80014a2:	9f02      	ldr	r7, [sp, #8]
 80014a4:	042b      	lsls	r3, r5, #16
 80014a6:	0c1b      	lsrs	r3, r3, #16
 80014a8:	435a      	muls	r2, r3
 80014aa:	437b      	muls	r3, r7
 80014ac:	469c      	mov	ip, r3
 80014ae:	0c29      	lsrs	r1, r5, #16
 80014b0:	4348      	muls	r0, r1
 80014b2:	0c13      	lsrs	r3, r2, #16
 80014b4:	4484      	add	ip, r0
 80014b6:	4463      	add	r3, ip
 80014b8:	4379      	muls	r1, r7
 80014ba:	4298      	cmp	r0, r3
 80014bc:	d903      	bls.n	80014c6 <__aeabi_ddiv+0x242>
 80014be:	2080      	movs	r0, #128	; 0x80
 80014c0:	0240      	lsls	r0, r0, #9
 80014c2:	4684      	mov	ip, r0
 80014c4:	4461      	add	r1, ip
 80014c6:	0c18      	lsrs	r0, r3, #16
 80014c8:	0412      	lsls	r2, r2, #16
 80014ca:	041b      	lsls	r3, r3, #16
 80014cc:	0c12      	lsrs	r2, r2, #16
 80014ce:	1841      	adds	r1, r0, r1
 80014d0:	189b      	adds	r3, r3, r2
 80014d2:	428e      	cmp	r6, r1
 80014d4:	d200      	bcs.n	80014d8 <__aeabi_ddiv+0x254>
 80014d6:	e0ff      	b.n	80016d8 <__aeabi_ddiv+0x454>
 80014d8:	d100      	bne.n	80014dc <__aeabi_ddiv+0x258>
 80014da:	e0fa      	b.n	80016d2 <__aeabi_ddiv+0x44e>
 80014dc:	2301      	movs	r3, #1
 80014de:	431d      	orrs	r5, r3
 80014e0:	4a49      	ldr	r2, [pc, #292]	; (8001608 <__aeabi_ddiv+0x384>)
 80014e2:	445a      	add	r2, fp
 80014e4:	2a00      	cmp	r2, #0
 80014e6:	dc00      	bgt.n	80014ea <__aeabi_ddiv+0x266>
 80014e8:	e0aa      	b.n	8001640 <__aeabi_ddiv+0x3bc>
 80014ea:	076b      	lsls	r3, r5, #29
 80014ec:	d000      	beq.n	80014f0 <__aeabi_ddiv+0x26c>
 80014ee:	e13d      	b.n	800176c <__aeabi_ddiv+0x4e8>
 80014f0:	08ed      	lsrs	r5, r5, #3
 80014f2:	4643      	mov	r3, r8
 80014f4:	01db      	lsls	r3, r3, #7
 80014f6:	d506      	bpl.n	8001506 <__aeabi_ddiv+0x282>
 80014f8:	4642      	mov	r2, r8
 80014fa:	4b44      	ldr	r3, [pc, #272]	; (800160c <__aeabi_ddiv+0x388>)
 80014fc:	401a      	ands	r2, r3
 80014fe:	4690      	mov	r8, r2
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	00d2      	lsls	r2, r2, #3
 8001504:	445a      	add	r2, fp
 8001506:	4b42      	ldr	r3, [pc, #264]	; (8001610 <__aeabi_ddiv+0x38c>)
 8001508:	429a      	cmp	r2, r3
 800150a:	dd00      	ble.n	800150e <__aeabi_ddiv+0x28a>
 800150c:	e71f      	b.n	800134e <__aeabi_ddiv+0xca>
 800150e:	4643      	mov	r3, r8
 8001510:	075b      	lsls	r3, r3, #29
 8001512:	431d      	orrs	r5, r3
 8001514:	4643      	mov	r3, r8
 8001516:	0552      	lsls	r2, r2, #21
 8001518:	025c      	lsls	r4, r3, #9
 800151a:	0b24      	lsrs	r4, r4, #12
 800151c:	0d53      	lsrs	r3, r2, #21
 800151e:	e708      	b.n	8001332 <__aeabi_ddiv+0xae>
 8001520:	4652      	mov	r2, sl
 8001522:	4322      	orrs	r2, r4
 8001524:	d100      	bne.n	8001528 <__aeabi_ddiv+0x2a4>
 8001526:	e07b      	b.n	8001620 <__aeabi_ddiv+0x39c>
 8001528:	2c00      	cmp	r4, #0
 800152a:	d100      	bne.n	800152e <__aeabi_ddiv+0x2aa>
 800152c:	e0fa      	b.n	8001724 <__aeabi_ddiv+0x4a0>
 800152e:	0020      	movs	r0, r4
 8001530:	f001 fa04 	bl	800293c <__clzsi2>
 8001534:	0002      	movs	r2, r0
 8001536:	3a0b      	subs	r2, #11
 8001538:	231d      	movs	r3, #29
 800153a:	0001      	movs	r1, r0
 800153c:	1a9b      	subs	r3, r3, r2
 800153e:	4652      	mov	r2, sl
 8001540:	3908      	subs	r1, #8
 8001542:	40da      	lsrs	r2, r3
 8001544:	408c      	lsls	r4, r1
 8001546:	4314      	orrs	r4, r2
 8001548:	4652      	mov	r2, sl
 800154a:	408a      	lsls	r2, r1
 800154c:	4b31      	ldr	r3, [pc, #196]	; (8001614 <__aeabi_ddiv+0x390>)
 800154e:	4458      	add	r0, fp
 8001550:	469b      	mov	fp, r3
 8001552:	4483      	add	fp, r0
 8001554:	2000      	movs	r0, #0
 8001556:	e6d5      	b.n	8001304 <__aeabi_ddiv+0x80>
 8001558:	464b      	mov	r3, r9
 800155a:	4323      	orrs	r3, r4
 800155c:	4698      	mov	r8, r3
 800155e:	d044      	beq.n	80015ea <__aeabi_ddiv+0x366>
 8001560:	2c00      	cmp	r4, #0
 8001562:	d100      	bne.n	8001566 <__aeabi_ddiv+0x2e2>
 8001564:	e0ce      	b.n	8001704 <__aeabi_ddiv+0x480>
 8001566:	0020      	movs	r0, r4
 8001568:	f001 f9e8 	bl	800293c <__clzsi2>
 800156c:	0001      	movs	r1, r0
 800156e:	0002      	movs	r2, r0
 8001570:	390b      	subs	r1, #11
 8001572:	231d      	movs	r3, #29
 8001574:	1a5b      	subs	r3, r3, r1
 8001576:	4649      	mov	r1, r9
 8001578:	0010      	movs	r0, r2
 800157a:	40d9      	lsrs	r1, r3
 800157c:	3808      	subs	r0, #8
 800157e:	4084      	lsls	r4, r0
 8001580:	000b      	movs	r3, r1
 8001582:	464d      	mov	r5, r9
 8001584:	4323      	orrs	r3, r4
 8001586:	4698      	mov	r8, r3
 8001588:	4085      	lsls	r5, r0
 800158a:	4823      	ldr	r0, [pc, #140]	; (8001618 <__aeabi_ddiv+0x394>)
 800158c:	1a83      	subs	r3, r0, r2
 800158e:	469b      	mov	fp, r3
 8001590:	2300      	movs	r3, #0
 8001592:	4699      	mov	r9, r3
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	e69a      	b.n	80012ce <__aeabi_ddiv+0x4a>
 8001598:	464b      	mov	r3, r9
 800159a:	4323      	orrs	r3, r4
 800159c:	4698      	mov	r8, r3
 800159e:	d11d      	bne.n	80015dc <__aeabi_ddiv+0x358>
 80015a0:	2308      	movs	r3, #8
 80015a2:	4699      	mov	r9, r3
 80015a4:	3b06      	subs	r3, #6
 80015a6:	2500      	movs	r5, #0
 80015a8:	4683      	mov	fp, r0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	e68f      	b.n	80012ce <__aeabi_ddiv+0x4a>
 80015ae:	4652      	mov	r2, sl
 80015b0:	4322      	orrs	r2, r4
 80015b2:	d109      	bne.n	80015c8 <__aeabi_ddiv+0x344>
 80015b4:	2302      	movs	r3, #2
 80015b6:	4649      	mov	r1, r9
 80015b8:	4319      	orrs	r1, r3
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <__aeabi_ddiv+0x398>)
 80015bc:	4689      	mov	r9, r1
 80015be:	469c      	mov	ip, r3
 80015c0:	2400      	movs	r4, #0
 80015c2:	2002      	movs	r0, #2
 80015c4:	44e3      	add	fp, ip
 80015c6:	e69d      	b.n	8001304 <__aeabi_ddiv+0x80>
 80015c8:	2303      	movs	r3, #3
 80015ca:	464a      	mov	r2, r9
 80015cc:	431a      	orrs	r2, r3
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <__aeabi_ddiv+0x398>)
 80015d0:	4691      	mov	r9, r2
 80015d2:	469c      	mov	ip, r3
 80015d4:	4652      	mov	r2, sl
 80015d6:	2003      	movs	r0, #3
 80015d8:	44e3      	add	fp, ip
 80015da:	e693      	b.n	8001304 <__aeabi_ddiv+0x80>
 80015dc:	230c      	movs	r3, #12
 80015de:	4699      	mov	r9, r3
 80015e0:	3b09      	subs	r3, #9
 80015e2:	46a0      	mov	r8, r4
 80015e4:	4683      	mov	fp, r0
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	e671      	b.n	80012ce <__aeabi_ddiv+0x4a>
 80015ea:	2304      	movs	r3, #4
 80015ec:	4699      	mov	r9, r3
 80015ee:	2300      	movs	r3, #0
 80015f0:	469b      	mov	fp, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	2500      	movs	r5, #0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	e669      	b.n	80012ce <__aeabi_ddiv+0x4a>
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	000007ff 	.word	0x000007ff
 8001600:	fffffc01 	.word	0xfffffc01
 8001604:	08008a60 	.word	0x08008a60
 8001608:	000003ff 	.word	0x000003ff
 800160c:	feffffff 	.word	0xfeffffff
 8001610:	000007fe 	.word	0x000007fe
 8001614:	000003f3 	.word	0x000003f3
 8001618:	fffffc0d 	.word	0xfffffc0d
 800161c:	fffff801 	.word	0xfffff801
 8001620:	4649      	mov	r1, r9
 8001622:	2301      	movs	r3, #1
 8001624:	4319      	orrs	r1, r3
 8001626:	4689      	mov	r9, r1
 8001628:	2400      	movs	r4, #0
 800162a:	2001      	movs	r0, #1
 800162c:	e66a      	b.n	8001304 <__aeabi_ddiv+0x80>
 800162e:	2300      	movs	r3, #0
 8001630:	2480      	movs	r4, #128	; 0x80
 8001632:	469a      	mov	sl, r3
 8001634:	2500      	movs	r5, #0
 8001636:	4b8a      	ldr	r3, [pc, #552]	; (8001860 <__aeabi_ddiv+0x5dc>)
 8001638:	0324      	lsls	r4, r4, #12
 800163a:	e67a      	b.n	8001332 <__aeabi_ddiv+0xae>
 800163c:	2501      	movs	r5, #1
 800163e:	426d      	negs	r5, r5
 8001640:	2301      	movs	r3, #1
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	2b38      	cmp	r3, #56	; 0x38
 8001646:	dd00      	ble.n	800164a <__aeabi_ddiv+0x3c6>
 8001648:	e670      	b.n	800132c <__aeabi_ddiv+0xa8>
 800164a:	2b1f      	cmp	r3, #31
 800164c:	dc00      	bgt.n	8001650 <__aeabi_ddiv+0x3cc>
 800164e:	e0bf      	b.n	80017d0 <__aeabi_ddiv+0x54c>
 8001650:	211f      	movs	r1, #31
 8001652:	4249      	negs	r1, r1
 8001654:	1a8a      	subs	r2, r1, r2
 8001656:	4641      	mov	r1, r8
 8001658:	40d1      	lsrs	r1, r2
 800165a:	000a      	movs	r2, r1
 800165c:	2b20      	cmp	r3, #32
 800165e:	d004      	beq.n	800166a <__aeabi_ddiv+0x3e6>
 8001660:	4641      	mov	r1, r8
 8001662:	4b80      	ldr	r3, [pc, #512]	; (8001864 <__aeabi_ddiv+0x5e0>)
 8001664:	445b      	add	r3, fp
 8001666:	4099      	lsls	r1, r3
 8001668:	430d      	orrs	r5, r1
 800166a:	1e6b      	subs	r3, r5, #1
 800166c:	419d      	sbcs	r5, r3
 800166e:	2307      	movs	r3, #7
 8001670:	432a      	orrs	r2, r5
 8001672:	001d      	movs	r5, r3
 8001674:	2400      	movs	r4, #0
 8001676:	4015      	ands	r5, r2
 8001678:	4213      	tst	r3, r2
 800167a:	d100      	bne.n	800167e <__aeabi_ddiv+0x3fa>
 800167c:	e0d4      	b.n	8001828 <__aeabi_ddiv+0x5a4>
 800167e:	210f      	movs	r1, #15
 8001680:	2300      	movs	r3, #0
 8001682:	4011      	ands	r1, r2
 8001684:	2904      	cmp	r1, #4
 8001686:	d100      	bne.n	800168a <__aeabi_ddiv+0x406>
 8001688:	e0cb      	b.n	8001822 <__aeabi_ddiv+0x59e>
 800168a:	1d11      	adds	r1, r2, #4
 800168c:	4291      	cmp	r1, r2
 800168e:	4192      	sbcs	r2, r2
 8001690:	4252      	negs	r2, r2
 8001692:	189b      	adds	r3, r3, r2
 8001694:	000a      	movs	r2, r1
 8001696:	0219      	lsls	r1, r3, #8
 8001698:	d400      	bmi.n	800169c <__aeabi_ddiv+0x418>
 800169a:	e0c2      	b.n	8001822 <__aeabi_ddiv+0x59e>
 800169c:	2301      	movs	r3, #1
 800169e:	2400      	movs	r4, #0
 80016a0:	2500      	movs	r5, #0
 80016a2:	e646      	b.n	8001332 <__aeabi_ddiv+0xae>
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	4641      	mov	r1, r8
 80016a8:	031b      	lsls	r3, r3, #12
 80016aa:	4219      	tst	r1, r3
 80016ac:	d008      	beq.n	80016c0 <__aeabi_ddiv+0x43c>
 80016ae:	421c      	tst	r4, r3
 80016b0:	d106      	bne.n	80016c0 <__aeabi_ddiv+0x43c>
 80016b2:	431c      	orrs	r4, r3
 80016b4:	0324      	lsls	r4, r4, #12
 80016b6:	46ba      	mov	sl, r7
 80016b8:	0015      	movs	r5, r2
 80016ba:	4b69      	ldr	r3, [pc, #420]	; (8001860 <__aeabi_ddiv+0x5dc>)
 80016bc:	0b24      	lsrs	r4, r4, #12
 80016be:	e638      	b.n	8001332 <__aeabi_ddiv+0xae>
 80016c0:	2480      	movs	r4, #128	; 0x80
 80016c2:	4643      	mov	r3, r8
 80016c4:	0324      	lsls	r4, r4, #12
 80016c6:	431c      	orrs	r4, r3
 80016c8:	0324      	lsls	r4, r4, #12
 80016ca:	46b2      	mov	sl, r6
 80016cc:	4b64      	ldr	r3, [pc, #400]	; (8001860 <__aeabi_ddiv+0x5dc>)
 80016ce:	0b24      	lsrs	r4, r4, #12
 80016d0:	e62f      	b.n	8001332 <__aeabi_ddiv+0xae>
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d100      	bne.n	80016d8 <__aeabi_ddiv+0x454>
 80016d6:	e703      	b.n	80014e0 <__aeabi_ddiv+0x25c>
 80016d8:	19a6      	adds	r6, r4, r6
 80016da:	1e68      	subs	r0, r5, #1
 80016dc:	42a6      	cmp	r6, r4
 80016de:	d200      	bcs.n	80016e2 <__aeabi_ddiv+0x45e>
 80016e0:	e08d      	b.n	80017fe <__aeabi_ddiv+0x57a>
 80016e2:	428e      	cmp	r6, r1
 80016e4:	d200      	bcs.n	80016e8 <__aeabi_ddiv+0x464>
 80016e6:	e0a3      	b.n	8001830 <__aeabi_ddiv+0x5ac>
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0x468>
 80016ea:	e0b3      	b.n	8001854 <__aeabi_ddiv+0x5d0>
 80016ec:	0005      	movs	r5, r0
 80016ee:	e6f5      	b.n	80014dc <__aeabi_ddiv+0x258>
 80016f0:	42aa      	cmp	r2, r5
 80016f2:	d900      	bls.n	80016f6 <__aeabi_ddiv+0x472>
 80016f4:	e639      	b.n	800136a <__aeabi_ddiv+0xe6>
 80016f6:	4643      	mov	r3, r8
 80016f8:	07de      	lsls	r6, r3, #31
 80016fa:	0858      	lsrs	r0, r3, #1
 80016fc:	086b      	lsrs	r3, r5, #1
 80016fe:	431e      	orrs	r6, r3
 8001700:	07ed      	lsls	r5, r5, #31
 8001702:	e639      	b.n	8001378 <__aeabi_ddiv+0xf4>
 8001704:	4648      	mov	r0, r9
 8001706:	f001 f919 	bl	800293c <__clzsi2>
 800170a:	0001      	movs	r1, r0
 800170c:	0002      	movs	r2, r0
 800170e:	3115      	adds	r1, #21
 8001710:	3220      	adds	r2, #32
 8001712:	291c      	cmp	r1, #28
 8001714:	dc00      	bgt.n	8001718 <__aeabi_ddiv+0x494>
 8001716:	e72c      	b.n	8001572 <__aeabi_ddiv+0x2ee>
 8001718:	464b      	mov	r3, r9
 800171a:	3808      	subs	r0, #8
 800171c:	4083      	lsls	r3, r0
 800171e:	2500      	movs	r5, #0
 8001720:	4698      	mov	r8, r3
 8001722:	e732      	b.n	800158a <__aeabi_ddiv+0x306>
 8001724:	f001 f90a 	bl	800293c <__clzsi2>
 8001728:	0003      	movs	r3, r0
 800172a:	001a      	movs	r2, r3
 800172c:	3215      	adds	r2, #21
 800172e:	3020      	adds	r0, #32
 8001730:	2a1c      	cmp	r2, #28
 8001732:	dc00      	bgt.n	8001736 <__aeabi_ddiv+0x4b2>
 8001734:	e700      	b.n	8001538 <__aeabi_ddiv+0x2b4>
 8001736:	4654      	mov	r4, sl
 8001738:	3b08      	subs	r3, #8
 800173a:	2200      	movs	r2, #0
 800173c:	409c      	lsls	r4, r3
 800173e:	e705      	b.n	800154c <__aeabi_ddiv+0x2c8>
 8001740:	1936      	adds	r6, r6, r4
 8001742:	3b01      	subs	r3, #1
 8001744:	42b4      	cmp	r4, r6
 8001746:	d900      	bls.n	800174a <__aeabi_ddiv+0x4c6>
 8001748:	e6a6      	b.n	8001498 <__aeabi_ddiv+0x214>
 800174a:	42b2      	cmp	r2, r6
 800174c:	d800      	bhi.n	8001750 <__aeabi_ddiv+0x4cc>
 800174e:	e6a3      	b.n	8001498 <__aeabi_ddiv+0x214>
 8001750:	1e83      	subs	r3, r0, #2
 8001752:	1936      	adds	r6, r6, r4
 8001754:	e6a0      	b.n	8001498 <__aeabi_ddiv+0x214>
 8001756:	1909      	adds	r1, r1, r4
 8001758:	3d01      	subs	r5, #1
 800175a:	428c      	cmp	r4, r1
 800175c:	d900      	bls.n	8001760 <__aeabi_ddiv+0x4dc>
 800175e:	e68d      	b.n	800147c <__aeabi_ddiv+0x1f8>
 8001760:	428a      	cmp	r2, r1
 8001762:	d800      	bhi.n	8001766 <__aeabi_ddiv+0x4e2>
 8001764:	e68a      	b.n	800147c <__aeabi_ddiv+0x1f8>
 8001766:	1e85      	subs	r5, r0, #2
 8001768:	1909      	adds	r1, r1, r4
 800176a:	e687      	b.n	800147c <__aeabi_ddiv+0x1f8>
 800176c:	230f      	movs	r3, #15
 800176e:	402b      	ands	r3, r5
 8001770:	2b04      	cmp	r3, #4
 8001772:	d100      	bne.n	8001776 <__aeabi_ddiv+0x4f2>
 8001774:	e6bc      	b.n	80014f0 <__aeabi_ddiv+0x26c>
 8001776:	2305      	movs	r3, #5
 8001778:	425b      	negs	r3, r3
 800177a:	42ab      	cmp	r3, r5
 800177c:	419b      	sbcs	r3, r3
 800177e:	3504      	adds	r5, #4
 8001780:	425b      	negs	r3, r3
 8001782:	08ed      	lsrs	r5, r5, #3
 8001784:	4498      	add	r8, r3
 8001786:	e6b4      	b.n	80014f2 <__aeabi_ddiv+0x26e>
 8001788:	42af      	cmp	r7, r5
 800178a:	d900      	bls.n	800178e <__aeabi_ddiv+0x50a>
 800178c:	e660      	b.n	8001450 <__aeabi_ddiv+0x1cc>
 800178e:	4282      	cmp	r2, r0
 8001790:	d804      	bhi.n	800179c <__aeabi_ddiv+0x518>
 8001792:	d000      	beq.n	8001796 <__aeabi_ddiv+0x512>
 8001794:	e65c      	b.n	8001450 <__aeabi_ddiv+0x1cc>
 8001796:	42ae      	cmp	r6, r5
 8001798:	d800      	bhi.n	800179c <__aeabi_ddiv+0x518>
 800179a:	e659      	b.n	8001450 <__aeabi_ddiv+0x1cc>
 800179c:	2302      	movs	r3, #2
 800179e:	425b      	negs	r3, r3
 80017a0:	469c      	mov	ip, r3
 80017a2:	9b00      	ldr	r3, [sp, #0]
 80017a4:	44e0      	add	r8, ip
 80017a6:	469c      	mov	ip, r3
 80017a8:	4465      	add	r5, ip
 80017aa:	429d      	cmp	r5, r3
 80017ac:	419b      	sbcs	r3, r3
 80017ae:	425b      	negs	r3, r3
 80017b0:	191b      	adds	r3, r3, r4
 80017b2:	18c0      	adds	r0, r0, r3
 80017b4:	e64d      	b.n	8001452 <__aeabi_ddiv+0x1ce>
 80017b6:	428a      	cmp	r2, r1
 80017b8:	d800      	bhi.n	80017bc <__aeabi_ddiv+0x538>
 80017ba:	e60e      	b.n	80013da <__aeabi_ddiv+0x156>
 80017bc:	1e83      	subs	r3, r0, #2
 80017be:	1909      	adds	r1, r1, r4
 80017c0:	e60b      	b.n	80013da <__aeabi_ddiv+0x156>
 80017c2:	428a      	cmp	r2, r1
 80017c4:	d800      	bhi.n	80017c8 <__aeabi_ddiv+0x544>
 80017c6:	e5f4      	b.n	80013b2 <__aeabi_ddiv+0x12e>
 80017c8:	1e83      	subs	r3, r0, #2
 80017ca:	4698      	mov	r8, r3
 80017cc:	1909      	adds	r1, r1, r4
 80017ce:	e5f0      	b.n	80013b2 <__aeabi_ddiv+0x12e>
 80017d0:	4925      	ldr	r1, [pc, #148]	; (8001868 <__aeabi_ddiv+0x5e4>)
 80017d2:	0028      	movs	r0, r5
 80017d4:	4459      	add	r1, fp
 80017d6:	408d      	lsls	r5, r1
 80017d8:	4642      	mov	r2, r8
 80017da:	408a      	lsls	r2, r1
 80017dc:	1e69      	subs	r1, r5, #1
 80017de:	418d      	sbcs	r5, r1
 80017e0:	4641      	mov	r1, r8
 80017e2:	40d8      	lsrs	r0, r3
 80017e4:	40d9      	lsrs	r1, r3
 80017e6:	4302      	orrs	r2, r0
 80017e8:	432a      	orrs	r2, r5
 80017ea:	000b      	movs	r3, r1
 80017ec:	0751      	lsls	r1, r2, #29
 80017ee:	d100      	bne.n	80017f2 <__aeabi_ddiv+0x56e>
 80017f0:	e751      	b.n	8001696 <__aeabi_ddiv+0x412>
 80017f2:	210f      	movs	r1, #15
 80017f4:	4011      	ands	r1, r2
 80017f6:	2904      	cmp	r1, #4
 80017f8:	d000      	beq.n	80017fc <__aeabi_ddiv+0x578>
 80017fa:	e746      	b.n	800168a <__aeabi_ddiv+0x406>
 80017fc:	e74b      	b.n	8001696 <__aeabi_ddiv+0x412>
 80017fe:	0005      	movs	r5, r0
 8001800:	428e      	cmp	r6, r1
 8001802:	d000      	beq.n	8001806 <__aeabi_ddiv+0x582>
 8001804:	e66a      	b.n	80014dc <__aeabi_ddiv+0x258>
 8001806:	9a00      	ldr	r2, [sp, #0]
 8001808:	4293      	cmp	r3, r2
 800180a:	d000      	beq.n	800180e <__aeabi_ddiv+0x58a>
 800180c:	e666      	b.n	80014dc <__aeabi_ddiv+0x258>
 800180e:	e667      	b.n	80014e0 <__aeabi_ddiv+0x25c>
 8001810:	4a16      	ldr	r2, [pc, #88]	; (800186c <__aeabi_ddiv+0x5e8>)
 8001812:	445a      	add	r2, fp
 8001814:	2a00      	cmp	r2, #0
 8001816:	dc00      	bgt.n	800181a <__aeabi_ddiv+0x596>
 8001818:	e710      	b.n	800163c <__aeabi_ddiv+0x3b8>
 800181a:	2301      	movs	r3, #1
 800181c:	2500      	movs	r5, #0
 800181e:	4498      	add	r8, r3
 8001820:	e667      	b.n	80014f2 <__aeabi_ddiv+0x26e>
 8001822:	075d      	lsls	r5, r3, #29
 8001824:	025b      	lsls	r3, r3, #9
 8001826:	0b1c      	lsrs	r4, r3, #12
 8001828:	08d2      	lsrs	r2, r2, #3
 800182a:	2300      	movs	r3, #0
 800182c:	4315      	orrs	r5, r2
 800182e:	e580      	b.n	8001332 <__aeabi_ddiv+0xae>
 8001830:	9800      	ldr	r0, [sp, #0]
 8001832:	3d02      	subs	r5, #2
 8001834:	0042      	lsls	r2, r0, #1
 8001836:	4282      	cmp	r2, r0
 8001838:	41bf      	sbcs	r7, r7
 800183a:	427f      	negs	r7, r7
 800183c:	193c      	adds	r4, r7, r4
 800183e:	1936      	adds	r6, r6, r4
 8001840:	9200      	str	r2, [sp, #0]
 8001842:	e7dd      	b.n	8001800 <__aeabi_ddiv+0x57c>
 8001844:	2480      	movs	r4, #128	; 0x80
 8001846:	4643      	mov	r3, r8
 8001848:	0324      	lsls	r4, r4, #12
 800184a:	431c      	orrs	r4, r3
 800184c:	0324      	lsls	r4, r4, #12
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__aeabi_ddiv+0x5dc>)
 8001850:	0b24      	lsrs	r4, r4, #12
 8001852:	e56e      	b.n	8001332 <__aeabi_ddiv+0xae>
 8001854:	9a00      	ldr	r2, [sp, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d3ea      	bcc.n	8001830 <__aeabi_ddiv+0x5ac>
 800185a:	0005      	movs	r5, r0
 800185c:	e7d3      	b.n	8001806 <__aeabi_ddiv+0x582>
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	000007ff 	.word	0x000007ff
 8001864:	0000043e 	.word	0x0000043e
 8001868:	0000041e 	.word	0x0000041e
 800186c:	000003ff 	.word	0x000003ff

08001870 <__eqdf2>:
 8001870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001872:	464e      	mov	r6, r9
 8001874:	4645      	mov	r5, r8
 8001876:	46de      	mov	lr, fp
 8001878:	4657      	mov	r7, sl
 800187a:	4690      	mov	r8, r2
 800187c:	b5e0      	push	{r5, r6, r7, lr}
 800187e:	0017      	movs	r7, r2
 8001880:	031a      	lsls	r2, r3, #12
 8001882:	0b12      	lsrs	r2, r2, #12
 8001884:	0005      	movs	r5, r0
 8001886:	4684      	mov	ip, r0
 8001888:	4819      	ldr	r0, [pc, #100]	; (80018f0 <__eqdf2+0x80>)
 800188a:	030e      	lsls	r6, r1, #12
 800188c:	004c      	lsls	r4, r1, #1
 800188e:	4691      	mov	r9, r2
 8001890:	005a      	lsls	r2, r3, #1
 8001892:	0fdb      	lsrs	r3, r3, #31
 8001894:	469b      	mov	fp, r3
 8001896:	0b36      	lsrs	r6, r6, #12
 8001898:	0d64      	lsrs	r4, r4, #21
 800189a:	0fc9      	lsrs	r1, r1, #31
 800189c:	0d52      	lsrs	r2, r2, #21
 800189e:	4284      	cmp	r4, r0
 80018a0:	d019      	beq.n	80018d6 <__eqdf2+0x66>
 80018a2:	4282      	cmp	r2, r0
 80018a4:	d010      	beq.n	80018c8 <__eqdf2+0x58>
 80018a6:	2001      	movs	r0, #1
 80018a8:	4294      	cmp	r4, r2
 80018aa:	d10e      	bne.n	80018ca <__eqdf2+0x5a>
 80018ac:	454e      	cmp	r6, r9
 80018ae:	d10c      	bne.n	80018ca <__eqdf2+0x5a>
 80018b0:	2001      	movs	r0, #1
 80018b2:	45c4      	cmp	ip, r8
 80018b4:	d109      	bne.n	80018ca <__eqdf2+0x5a>
 80018b6:	4559      	cmp	r1, fp
 80018b8:	d017      	beq.n	80018ea <__eqdf2+0x7a>
 80018ba:	2c00      	cmp	r4, #0
 80018bc:	d105      	bne.n	80018ca <__eqdf2+0x5a>
 80018be:	0030      	movs	r0, r6
 80018c0:	4328      	orrs	r0, r5
 80018c2:	1e43      	subs	r3, r0, #1
 80018c4:	4198      	sbcs	r0, r3
 80018c6:	e000      	b.n	80018ca <__eqdf2+0x5a>
 80018c8:	2001      	movs	r0, #1
 80018ca:	bcf0      	pop	{r4, r5, r6, r7}
 80018cc:	46bb      	mov	fp, r7
 80018ce:	46b2      	mov	sl, r6
 80018d0:	46a9      	mov	r9, r5
 80018d2:	46a0      	mov	r8, r4
 80018d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018d6:	0033      	movs	r3, r6
 80018d8:	2001      	movs	r0, #1
 80018da:	432b      	orrs	r3, r5
 80018dc:	d1f5      	bne.n	80018ca <__eqdf2+0x5a>
 80018de:	42a2      	cmp	r2, r4
 80018e0:	d1f3      	bne.n	80018ca <__eqdf2+0x5a>
 80018e2:	464b      	mov	r3, r9
 80018e4:	433b      	orrs	r3, r7
 80018e6:	d1f0      	bne.n	80018ca <__eqdf2+0x5a>
 80018e8:	e7e2      	b.n	80018b0 <__eqdf2+0x40>
 80018ea:	2000      	movs	r0, #0
 80018ec:	e7ed      	b.n	80018ca <__eqdf2+0x5a>
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	000007ff 	.word	0x000007ff

080018f4 <__gedf2>:
 80018f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f6:	4647      	mov	r7, r8
 80018f8:	46ce      	mov	lr, r9
 80018fa:	0004      	movs	r4, r0
 80018fc:	0018      	movs	r0, r3
 80018fe:	0016      	movs	r6, r2
 8001900:	031b      	lsls	r3, r3, #12
 8001902:	0b1b      	lsrs	r3, r3, #12
 8001904:	4d2d      	ldr	r5, [pc, #180]	; (80019bc <__gedf2+0xc8>)
 8001906:	004a      	lsls	r2, r1, #1
 8001908:	4699      	mov	r9, r3
 800190a:	b580      	push	{r7, lr}
 800190c:	0043      	lsls	r3, r0, #1
 800190e:	030f      	lsls	r7, r1, #12
 8001910:	46a4      	mov	ip, r4
 8001912:	46b0      	mov	r8, r6
 8001914:	0b3f      	lsrs	r7, r7, #12
 8001916:	0d52      	lsrs	r2, r2, #21
 8001918:	0fc9      	lsrs	r1, r1, #31
 800191a:	0d5b      	lsrs	r3, r3, #21
 800191c:	0fc0      	lsrs	r0, r0, #31
 800191e:	42aa      	cmp	r2, r5
 8001920:	d021      	beq.n	8001966 <__gedf2+0x72>
 8001922:	42ab      	cmp	r3, r5
 8001924:	d013      	beq.n	800194e <__gedf2+0x5a>
 8001926:	2a00      	cmp	r2, #0
 8001928:	d122      	bne.n	8001970 <__gedf2+0x7c>
 800192a:	433c      	orrs	r4, r7
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <__gedf2+0x42>
 8001930:	464d      	mov	r5, r9
 8001932:	432e      	orrs	r6, r5
 8001934:	d022      	beq.n	800197c <__gedf2+0x88>
 8001936:	2c00      	cmp	r4, #0
 8001938:	d010      	beq.n	800195c <__gedf2+0x68>
 800193a:	4281      	cmp	r1, r0
 800193c:	d022      	beq.n	8001984 <__gedf2+0x90>
 800193e:	2002      	movs	r0, #2
 8001940:	3901      	subs	r1, #1
 8001942:	4008      	ands	r0, r1
 8001944:	3801      	subs	r0, #1
 8001946:	bcc0      	pop	{r6, r7}
 8001948:	46b9      	mov	r9, r7
 800194a:	46b0      	mov	r8, r6
 800194c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194e:	464d      	mov	r5, r9
 8001950:	432e      	orrs	r6, r5
 8001952:	d129      	bne.n	80019a8 <__gedf2+0xb4>
 8001954:	2a00      	cmp	r2, #0
 8001956:	d1f0      	bne.n	800193a <__gedf2+0x46>
 8001958:	433c      	orrs	r4, r7
 800195a:	d1ee      	bne.n	800193a <__gedf2+0x46>
 800195c:	2800      	cmp	r0, #0
 800195e:	d1f2      	bne.n	8001946 <__gedf2+0x52>
 8001960:	2001      	movs	r0, #1
 8001962:	4240      	negs	r0, r0
 8001964:	e7ef      	b.n	8001946 <__gedf2+0x52>
 8001966:	003d      	movs	r5, r7
 8001968:	4325      	orrs	r5, r4
 800196a:	d11d      	bne.n	80019a8 <__gedf2+0xb4>
 800196c:	4293      	cmp	r3, r2
 800196e:	d0ee      	beq.n	800194e <__gedf2+0x5a>
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1e2      	bne.n	800193a <__gedf2+0x46>
 8001974:	464c      	mov	r4, r9
 8001976:	4326      	orrs	r6, r4
 8001978:	d1df      	bne.n	800193a <__gedf2+0x46>
 800197a:	e7e0      	b.n	800193e <__gedf2+0x4a>
 800197c:	2000      	movs	r0, #0
 800197e:	2c00      	cmp	r4, #0
 8001980:	d0e1      	beq.n	8001946 <__gedf2+0x52>
 8001982:	e7dc      	b.n	800193e <__gedf2+0x4a>
 8001984:	429a      	cmp	r2, r3
 8001986:	dc0a      	bgt.n	800199e <__gedf2+0xaa>
 8001988:	dbe8      	blt.n	800195c <__gedf2+0x68>
 800198a:	454f      	cmp	r7, r9
 800198c:	d8d7      	bhi.n	800193e <__gedf2+0x4a>
 800198e:	d00e      	beq.n	80019ae <__gedf2+0xba>
 8001990:	2000      	movs	r0, #0
 8001992:	454f      	cmp	r7, r9
 8001994:	d2d7      	bcs.n	8001946 <__gedf2+0x52>
 8001996:	2900      	cmp	r1, #0
 8001998:	d0e2      	beq.n	8001960 <__gedf2+0x6c>
 800199a:	0008      	movs	r0, r1
 800199c:	e7d3      	b.n	8001946 <__gedf2+0x52>
 800199e:	4243      	negs	r3, r0
 80019a0:	4158      	adcs	r0, r3
 80019a2:	0040      	lsls	r0, r0, #1
 80019a4:	3801      	subs	r0, #1
 80019a6:	e7ce      	b.n	8001946 <__gedf2+0x52>
 80019a8:	2002      	movs	r0, #2
 80019aa:	4240      	negs	r0, r0
 80019ac:	e7cb      	b.n	8001946 <__gedf2+0x52>
 80019ae:	45c4      	cmp	ip, r8
 80019b0:	d8c5      	bhi.n	800193e <__gedf2+0x4a>
 80019b2:	2000      	movs	r0, #0
 80019b4:	45c4      	cmp	ip, r8
 80019b6:	d2c6      	bcs.n	8001946 <__gedf2+0x52>
 80019b8:	e7ed      	b.n	8001996 <__gedf2+0xa2>
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	000007ff 	.word	0x000007ff

080019c0 <__ledf2>:
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	4647      	mov	r7, r8
 80019c4:	46ce      	mov	lr, r9
 80019c6:	0004      	movs	r4, r0
 80019c8:	0018      	movs	r0, r3
 80019ca:	0016      	movs	r6, r2
 80019cc:	031b      	lsls	r3, r3, #12
 80019ce:	0b1b      	lsrs	r3, r3, #12
 80019d0:	4d2c      	ldr	r5, [pc, #176]	; (8001a84 <__ledf2+0xc4>)
 80019d2:	004a      	lsls	r2, r1, #1
 80019d4:	4699      	mov	r9, r3
 80019d6:	b580      	push	{r7, lr}
 80019d8:	0043      	lsls	r3, r0, #1
 80019da:	030f      	lsls	r7, r1, #12
 80019dc:	46a4      	mov	ip, r4
 80019de:	46b0      	mov	r8, r6
 80019e0:	0b3f      	lsrs	r7, r7, #12
 80019e2:	0d52      	lsrs	r2, r2, #21
 80019e4:	0fc9      	lsrs	r1, r1, #31
 80019e6:	0d5b      	lsrs	r3, r3, #21
 80019e8:	0fc0      	lsrs	r0, r0, #31
 80019ea:	42aa      	cmp	r2, r5
 80019ec:	d00d      	beq.n	8001a0a <__ledf2+0x4a>
 80019ee:	42ab      	cmp	r3, r5
 80019f0:	d010      	beq.n	8001a14 <__ledf2+0x54>
 80019f2:	2a00      	cmp	r2, #0
 80019f4:	d127      	bne.n	8001a46 <__ledf2+0x86>
 80019f6:	433c      	orrs	r4, r7
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d111      	bne.n	8001a20 <__ledf2+0x60>
 80019fc:	464d      	mov	r5, r9
 80019fe:	432e      	orrs	r6, r5
 8001a00:	d10e      	bne.n	8001a20 <__ledf2+0x60>
 8001a02:	2000      	movs	r0, #0
 8001a04:	2c00      	cmp	r4, #0
 8001a06:	d015      	beq.n	8001a34 <__ledf2+0x74>
 8001a08:	e00e      	b.n	8001a28 <__ledf2+0x68>
 8001a0a:	003d      	movs	r5, r7
 8001a0c:	4325      	orrs	r5, r4
 8001a0e:	d110      	bne.n	8001a32 <__ledf2+0x72>
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d118      	bne.n	8001a46 <__ledf2+0x86>
 8001a14:	464d      	mov	r5, r9
 8001a16:	432e      	orrs	r6, r5
 8001a18:	d10b      	bne.n	8001a32 <__ledf2+0x72>
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	d102      	bne.n	8001a24 <__ledf2+0x64>
 8001a1e:	433c      	orrs	r4, r7
 8001a20:	2c00      	cmp	r4, #0
 8001a22:	d00b      	beq.n	8001a3c <__ledf2+0x7c>
 8001a24:	4281      	cmp	r1, r0
 8001a26:	d014      	beq.n	8001a52 <__ledf2+0x92>
 8001a28:	2002      	movs	r0, #2
 8001a2a:	3901      	subs	r1, #1
 8001a2c:	4008      	ands	r0, r1
 8001a2e:	3801      	subs	r0, #1
 8001a30:	e000      	b.n	8001a34 <__ledf2+0x74>
 8001a32:	2002      	movs	r0, #2
 8001a34:	bcc0      	pop	{r6, r7}
 8001a36:	46b9      	mov	r9, r7
 8001a38:	46b0      	mov	r8, r6
 8001a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d1f9      	bne.n	8001a34 <__ledf2+0x74>
 8001a40:	2001      	movs	r0, #1
 8001a42:	4240      	negs	r0, r0
 8001a44:	e7f6      	b.n	8001a34 <__ledf2+0x74>
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1ec      	bne.n	8001a24 <__ledf2+0x64>
 8001a4a:	464c      	mov	r4, r9
 8001a4c:	4326      	orrs	r6, r4
 8001a4e:	d1e9      	bne.n	8001a24 <__ledf2+0x64>
 8001a50:	e7ea      	b.n	8001a28 <__ledf2+0x68>
 8001a52:	429a      	cmp	r2, r3
 8001a54:	dd04      	ble.n	8001a60 <__ledf2+0xa0>
 8001a56:	4243      	negs	r3, r0
 8001a58:	4158      	adcs	r0, r3
 8001a5a:	0040      	lsls	r0, r0, #1
 8001a5c:	3801      	subs	r0, #1
 8001a5e:	e7e9      	b.n	8001a34 <__ledf2+0x74>
 8001a60:	429a      	cmp	r2, r3
 8001a62:	dbeb      	blt.n	8001a3c <__ledf2+0x7c>
 8001a64:	454f      	cmp	r7, r9
 8001a66:	d8df      	bhi.n	8001a28 <__ledf2+0x68>
 8001a68:	d006      	beq.n	8001a78 <__ledf2+0xb8>
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	454f      	cmp	r7, r9
 8001a6e:	d2e1      	bcs.n	8001a34 <__ledf2+0x74>
 8001a70:	2900      	cmp	r1, #0
 8001a72:	d0e5      	beq.n	8001a40 <__ledf2+0x80>
 8001a74:	0008      	movs	r0, r1
 8001a76:	e7dd      	b.n	8001a34 <__ledf2+0x74>
 8001a78:	45c4      	cmp	ip, r8
 8001a7a:	d8d5      	bhi.n	8001a28 <__ledf2+0x68>
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	45c4      	cmp	ip, r8
 8001a80:	d2d8      	bcs.n	8001a34 <__ledf2+0x74>
 8001a82:	e7f5      	b.n	8001a70 <__ledf2+0xb0>
 8001a84:	000007ff 	.word	0x000007ff

08001a88 <__aeabi_dmul>:
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	4657      	mov	r7, sl
 8001a8c:	464e      	mov	r6, r9
 8001a8e:	4645      	mov	r5, r8
 8001a90:	46de      	mov	lr, fp
 8001a92:	b5e0      	push	{r5, r6, r7, lr}
 8001a94:	4698      	mov	r8, r3
 8001a96:	030c      	lsls	r4, r1, #12
 8001a98:	004b      	lsls	r3, r1, #1
 8001a9a:	0006      	movs	r6, r0
 8001a9c:	4692      	mov	sl, r2
 8001a9e:	b087      	sub	sp, #28
 8001aa0:	0b24      	lsrs	r4, r4, #12
 8001aa2:	0d5b      	lsrs	r3, r3, #21
 8001aa4:	0fcf      	lsrs	r7, r1, #31
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dmul+0x24>
 8001aaa:	e15c      	b.n	8001d66 <__aeabi_dmul+0x2de>
 8001aac:	4ad9      	ldr	r2, [pc, #868]	; (8001e14 <__aeabi_dmul+0x38c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dmul+0x2c>
 8001ab2:	e175      	b.n	8001da0 <__aeabi_dmul+0x318>
 8001ab4:	0f42      	lsrs	r2, r0, #29
 8001ab6:	00e4      	lsls	r4, r4, #3
 8001ab8:	4314      	orrs	r4, r2
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	0412      	lsls	r2, r2, #16
 8001abe:	4314      	orrs	r4, r2
 8001ac0:	4ad5      	ldr	r2, [pc, #852]	; (8001e18 <__aeabi_dmul+0x390>)
 8001ac2:	00c5      	lsls	r5, r0, #3
 8001ac4:	4694      	mov	ip, r2
 8001ac6:	4463      	add	r3, ip
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2300      	movs	r3, #0
 8001acc:	4699      	mov	r9, r3
 8001ace:	469b      	mov	fp, r3
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	4642      	mov	r2, r8
 8001ad4:	031e      	lsls	r6, r3, #12
 8001ad6:	0fd2      	lsrs	r2, r2, #31
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	4650      	mov	r0, sl
 8001adc:	4690      	mov	r8, r2
 8001ade:	0b36      	lsrs	r6, r6, #12
 8001ae0:	0d5b      	lsrs	r3, r3, #21
 8001ae2:	d100      	bne.n	8001ae6 <__aeabi_dmul+0x5e>
 8001ae4:	e120      	b.n	8001d28 <__aeabi_dmul+0x2a0>
 8001ae6:	4acb      	ldr	r2, [pc, #812]	; (8001e14 <__aeabi_dmul+0x38c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d100      	bne.n	8001aee <__aeabi_dmul+0x66>
 8001aec:	e162      	b.n	8001db4 <__aeabi_dmul+0x32c>
 8001aee:	49ca      	ldr	r1, [pc, #808]	; (8001e18 <__aeabi_dmul+0x390>)
 8001af0:	0f42      	lsrs	r2, r0, #29
 8001af2:	468c      	mov	ip, r1
 8001af4:	9900      	ldr	r1, [sp, #0]
 8001af6:	4463      	add	r3, ip
 8001af8:	00f6      	lsls	r6, r6, #3
 8001afa:	468c      	mov	ip, r1
 8001afc:	4316      	orrs	r6, r2
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	449c      	add	ip, r3
 8001b02:	0412      	lsls	r2, r2, #16
 8001b04:	4663      	mov	r3, ip
 8001b06:	4316      	orrs	r6, r2
 8001b08:	00c2      	lsls	r2, r0, #3
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	9900      	ldr	r1, [sp, #0]
 8001b10:	4643      	mov	r3, r8
 8001b12:	3101      	adds	r1, #1
 8001b14:	468c      	mov	ip, r1
 8001b16:	4649      	mov	r1, r9
 8001b18:	407b      	eors	r3, r7
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	290f      	cmp	r1, #15
 8001b1e:	d826      	bhi.n	8001b6e <__aeabi_dmul+0xe6>
 8001b20:	4bbe      	ldr	r3, [pc, #760]	; (8001e1c <__aeabi_dmul+0x394>)
 8001b22:	0089      	lsls	r1, r1, #2
 8001b24:	5859      	ldr	r1, [r3, r1]
 8001b26:	468f      	mov	pc, r1
 8001b28:	4643      	mov	r3, r8
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	0034      	movs	r4, r6
 8001b2e:	0015      	movs	r5, r2
 8001b30:	4683      	mov	fp, r0
 8001b32:	465b      	mov	r3, fp
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d016      	beq.n	8001b66 <__aeabi_dmul+0xde>
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dmul+0xb6>
 8001b3c:	e203      	b.n	8001f46 <__aeabi_dmul+0x4be>
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d000      	beq.n	8001b44 <__aeabi_dmul+0xbc>
 8001b42:	e0cd      	b.n	8001ce0 <__aeabi_dmul+0x258>
 8001b44:	2200      	movs	r2, #0
 8001b46:	2400      	movs	r4, #0
 8001b48:	2500      	movs	r5, #0
 8001b4a:	9b01      	ldr	r3, [sp, #4]
 8001b4c:	0512      	lsls	r2, r2, #20
 8001b4e:	4322      	orrs	r2, r4
 8001b50:	07db      	lsls	r3, r3, #31
 8001b52:	431a      	orrs	r2, r3
 8001b54:	0028      	movs	r0, r5
 8001b56:	0011      	movs	r1, r2
 8001b58:	b007      	add	sp, #28
 8001b5a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b5c:	46bb      	mov	fp, r7
 8001b5e:	46b2      	mov	sl, r6
 8001b60:	46a9      	mov	r9, r5
 8001b62:	46a0      	mov	r8, r4
 8001b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b66:	2400      	movs	r4, #0
 8001b68:	2500      	movs	r5, #0
 8001b6a:	4aaa      	ldr	r2, [pc, #680]	; (8001e14 <__aeabi_dmul+0x38c>)
 8001b6c:	e7ed      	b.n	8001b4a <__aeabi_dmul+0xc2>
 8001b6e:	0c28      	lsrs	r0, r5, #16
 8001b70:	042d      	lsls	r5, r5, #16
 8001b72:	0c2d      	lsrs	r5, r5, #16
 8001b74:	002b      	movs	r3, r5
 8001b76:	0c11      	lsrs	r1, r2, #16
 8001b78:	0412      	lsls	r2, r2, #16
 8001b7a:	0c12      	lsrs	r2, r2, #16
 8001b7c:	4353      	muls	r3, r2
 8001b7e:	4698      	mov	r8, r3
 8001b80:	0013      	movs	r3, r2
 8001b82:	002f      	movs	r7, r5
 8001b84:	4343      	muls	r3, r0
 8001b86:	4699      	mov	r9, r3
 8001b88:	434f      	muls	r7, r1
 8001b8a:	444f      	add	r7, r9
 8001b8c:	46bb      	mov	fp, r7
 8001b8e:	4647      	mov	r7, r8
 8001b90:	000b      	movs	r3, r1
 8001b92:	0c3f      	lsrs	r7, r7, #16
 8001b94:	46ba      	mov	sl, r7
 8001b96:	4343      	muls	r3, r0
 8001b98:	44da      	add	sl, fp
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	45d1      	cmp	r9, sl
 8001b9e:	d904      	bls.n	8001baa <__aeabi_dmul+0x122>
 8001ba0:	2780      	movs	r7, #128	; 0x80
 8001ba2:	027f      	lsls	r7, r7, #9
 8001ba4:	46b9      	mov	r9, r7
 8001ba6:	444b      	add	r3, r9
 8001ba8:	9302      	str	r3, [sp, #8]
 8001baa:	4653      	mov	r3, sl
 8001bac:	0c1b      	lsrs	r3, r3, #16
 8001bae:	469b      	mov	fp, r3
 8001bb0:	4653      	mov	r3, sl
 8001bb2:	041f      	lsls	r7, r3, #16
 8001bb4:	4643      	mov	r3, r8
 8001bb6:	041b      	lsls	r3, r3, #16
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	4698      	mov	r8, r3
 8001bbc:	003b      	movs	r3, r7
 8001bbe:	4443      	add	r3, r8
 8001bc0:	9304      	str	r3, [sp, #16]
 8001bc2:	0c33      	lsrs	r3, r6, #16
 8001bc4:	0436      	lsls	r6, r6, #16
 8001bc6:	0c36      	lsrs	r6, r6, #16
 8001bc8:	4698      	mov	r8, r3
 8001bca:	0033      	movs	r3, r6
 8001bcc:	4343      	muls	r3, r0
 8001bce:	4699      	mov	r9, r3
 8001bd0:	4643      	mov	r3, r8
 8001bd2:	4343      	muls	r3, r0
 8001bd4:	002f      	movs	r7, r5
 8001bd6:	469a      	mov	sl, r3
 8001bd8:	4643      	mov	r3, r8
 8001bda:	4377      	muls	r7, r6
 8001bdc:	435d      	muls	r5, r3
 8001bde:	0c38      	lsrs	r0, r7, #16
 8001be0:	444d      	add	r5, r9
 8001be2:	1945      	adds	r5, r0, r5
 8001be4:	45a9      	cmp	r9, r5
 8001be6:	d903      	bls.n	8001bf0 <__aeabi_dmul+0x168>
 8001be8:	2380      	movs	r3, #128	; 0x80
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	4699      	mov	r9, r3
 8001bee:	44ca      	add	sl, r9
 8001bf0:	043f      	lsls	r7, r7, #16
 8001bf2:	0c28      	lsrs	r0, r5, #16
 8001bf4:	0c3f      	lsrs	r7, r7, #16
 8001bf6:	042d      	lsls	r5, r5, #16
 8001bf8:	19ed      	adds	r5, r5, r7
 8001bfa:	0c27      	lsrs	r7, r4, #16
 8001bfc:	0424      	lsls	r4, r4, #16
 8001bfe:	0c24      	lsrs	r4, r4, #16
 8001c00:	0003      	movs	r3, r0
 8001c02:	0020      	movs	r0, r4
 8001c04:	4350      	muls	r0, r2
 8001c06:	437a      	muls	r2, r7
 8001c08:	4691      	mov	r9, r2
 8001c0a:	003a      	movs	r2, r7
 8001c0c:	4453      	add	r3, sl
 8001c0e:	9305      	str	r3, [sp, #20]
 8001c10:	0c03      	lsrs	r3, r0, #16
 8001c12:	469a      	mov	sl, r3
 8001c14:	434a      	muls	r2, r1
 8001c16:	4361      	muls	r1, r4
 8001c18:	4449      	add	r1, r9
 8001c1a:	4451      	add	r1, sl
 8001c1c:	44ab      	add	fp, r5
 8001c1e:	4589      	cmp	r9, r1
 8001c20:	d903      	bls.n	8001c2a <__aeabi_dmul+0x1a2>
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	025b      	lsls	r3, r3, #9
 8001c26:	4699      	mov	r9, r3
 8001c28:	444a      	add	r2, r9
 8001c2a:	0400      	lsls	r0, r0, #16
 8001c2c:	0c0b      	lsrs	r3, r1, #16
 8001c2e:	0c00      	lsrs	r0, r0, #16
 8001c30:	0409      	lsls	r1, r1, #16
 8001c32:	1809      	adds	r1, r1, r0
 8001c34:	0020      	movs	r0, r4
 8001c36:	4699      	mov	r9, r3
 8001c38:	4643      	mov	r3, r8
 8001c3a:	4370      	muls	r0, r6
 8001c3c:	435c      	muls	r4, r3
 8001c3e:	437e      	muls	r6, r7
 8001c40:	435f      	muls	r7, r3
 8001c42:	0c03      	lsrs	r3, r0, #16
 8001c44:	4698      	mov	r8, r3
 8001c46:	19a4      	adds	r4, r4, r6
 8001c48:	4444      	add	r4, r8
 8001c4a:	444a      	add	r2, r9
 8001c4c:	9703      	str	r7, [sp, #12]
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d904      	bls.n	8001c5c <__aeabi_dmul+0x1d4>
 8001c52:	2380      	movs	r3, #128	; 0x80
 8001c54:	025b      	lsls	r3, r3, #9
 8001c56:	4698      	mov	r8, r3
 8001c58:	4447      	add	r7, r8
 8001c5a:	9703      	str	r7, [sp, #12]
 8001c5c:	0423      	lsls	r3, r4, #16
 8001c5e:	9e02      	ldr	r6, [sp, #8]
 8001c60:	469a      	mov	sl, r3
 8001c62:	9b05      	ldr	r3, [sp, #20]
 8001c64:	445e      	add	r6, fp
 8001c66:	4698      	mov	r8, r3
 8001c68:	42ae      	cmp	r6, r5
 8001c6a:	41ad      	sbcs	r5, r5
 8001c6c:	1876      	adds	r6, r6, r1
 8001c6e:	428e      	cmp	r6, r1
 8001c70:	4189      	sbcs	r1, r1
 8001c72:	0400      	lsls	r0, r0, #16
 8001c74:	0c00      	lsrs	r0, r0, #16
 8001c76:	4450      	add	r0, sl
 8001c78:	4440      	add	r0, r8
 8001c7a:	426d      	negs	r5, r5
 8001c7c:	1947      	adds	r7, r0, r5
 8001c7e:	46b8      	mov	r8, r7
 8001c80:	4693      	mov	fp, r2
 8001c82:	4249      	negs	r1, r1
 8001c84:	4689      	mov	r9, r1
 8001c86:	44c3      	add	fp, r8
 8001c88:	44d9      	add	r9, fp
 8001c8a:	4298      	cmp	r0, r3
 8001c8c:	4180      	sbcs	r0, r0
 8001c8e:	45a8      	cmp	r8, r5
 8001c90:	41ad      	sbcs	r5, r5
 8001c92:	4593      	cmp	fp, r2
 8001c94:	4192      	sbcs	r2, r2
 8001c96:	4589      	cmp	r9, r1
 8001c98:	4189      	sbcs	r1, r1
 8001c9a:	426d      	negs	r5, r5
 8001c9c:	4240      	negs	r0, r0
 8001c9e:	4328      	orrs	r0, r5
 8001ca0:	0c24      	lsrs	r4, r4, #16
 8001ca2:	4252      	negs	r2, r2
 8001ca4:	4249      	negs	r1, r1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	9b03      	ldr	r3, [sp, #12]
 8001caa:	1900      	adds	r0, r0, r4
 8001cac:	1880      	adds	r0, r0, r2
 8001cae:	18c7      	adds	r7, r0, r3
 8001cb0:	464b      	mov	r3, r9
 8001cb2:	0ddc      	lsrs	r4, r3, #23
 8001cb4:	9b04      	ldr	r3, [sp, #16]
 8001cb6:	0275      	lsls	r5, r6, #9
 8001cb8:	431d      	orrs	r5, r3
 8001cba:	1e6a      	subs	r2, r5, #1
 8001cbc:	4195      	sbcs	r5, r2
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	0df6      	lsrs	r6, r6, #23
 8001cc2:	027f      	lsls	r7, r7, #9
 8001cc4:	4335      	orrs	r5, r6
 8001cc6:	025a      	lsls	r2, r3, #9
 8001cc8:	433c      	orrs	r4, r7
 8001cca:	4315      	orrs	r5, r2
 8001ccc:	01fb      	lsls	r3, r7, #7
 8001cce:	d400      	bmi.n	8001cd2 <__aeabi_dmul+0x24a>
 8001cd0:	e11c      	b.n	8001f0c <__aeabi_dmul+0x484>
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	086a      	lsrs	r2, r5, #1
 8001cd6:	400d      	ands	r5, r1
 8001cd8:	4315      	orrs	r5, r2
 8001cda:	07e2      	lsls	r2, r4, #31
 8001cdc:	4315      	orrs	r5, r2
 8001cde:	0864      	lsrs	r4, r4, #1
 8001ce0:	494f      	ldr	r1, [pc, #316]	; (8001e20 <__aeabi_dmul+0x398>)
 8001ce2:	4461      	add	r1, ip
 8001ce4:	2900      	cmp	r1, #0
 8001ce6:	dc00      	bgt.n	8001cea <__aeabi_dmul+0x262>
 8001ce8:	e0b0      	b.n	8001e4c <__aeabi_dmul+0x3c4>
 8001cea:	076b      	lsls	r3, r5, #29
 8001cec:	d009      	beq.n	8001d02 <__aeabi_dmul+0x27a>
 8001cee:	220f      	movs	r2, #15
 8001cf0:	402a      	ands	r2, r5
 8001cf2:	2a04      	cmp	r2, #4
 8001cf4:	d005      	beq.n	8001d02 <__aeabi_dmul+0x27a>
 8001cf6:	1d2a      	adds	r2, r5, #4
 8001cf8:	42aa      	cmp	r2, r5
 8001cfa:	41ad      	sbcs	r5, r5
 8001cfc:	426d      	negs	r5, r5
 8001cfe:	1964      	adds	r4, r4, r5
 8001d00:	0015      	movs	r5, r2
 8001d02:	01e3      	lsls	r3, r4, #7
 8001d04:	d504      	bpl.n	8001d10 <__aeabi_dmul+0x288>
 8001d06:	2180      	movs	r1, #128	; 0x80
 8001d08:	4a46      	ldr	r2, [pc, #280]	; (8001e24 <__aeabi_dmul+0x39c>)
 8001d0a:	00c9      	lsls	r1, r1, #3
 8001d0c:	4014      	ands	r4, r2
 8001d0e:	4461      	add	r1, ip
 8001d10:	4a45      	ldr	r2, [pc, #276]	; (8001e28 <__aeabi_dmul+0x3a0>)
 8001d12:	4291      	cmp	r1, r2
 8001d14:	dd00      	ble.n	8001d18 <__aeabi_dmul+0x290>
 8001d16:	e726      	b.n	8001b66 <__aeabi_dmul+0xde>
 8001d18:	0762      	lsls	r2, r4, #29
 8001d1a:	08ed      	lsrs	r5, r5, #3
 8001d1c:	0264      	lsls	r4, r4, #9
 8001d1e:	0549      	lsls	r1, r1, #21
 8001d20:	4315      	orrs	r5, r2
 8001d22:	0b24      	lsrs	r4, r4, #12
 8001d24:	0d4a      	lsrs	r2, r1, #21
 8001d26:	e710      	b.n	8001b4a <__aeabi_dmul+0xc2>
 8001d28:	4652      	mov	r2, sl
 8001d2a:	4332      	orrs	r2, r6
 8001d2c:	d100      	bne.n	8001d30 <__aeabi_dmul+0x2a8>
 8001d2e:	e07f      	b.n	8001e30 <__aeabi_dmul+0x3a8>
 8001d30:	2e00      	cmp	r6, #0
 8001d32:	d100      	bne.n	8001d36 <__aeabi_dmul+0x2ae>
 8001d34:	e0dc      	b.n	8001ef0 <__aeabi_dmul+0x468>
 8001d36:	0030      	movs	r0, r6
 8001d38:	f000 fe00 	bl	800293c <__clzsi2>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	3a0b      	subs	r2, #11
 8001d40:	231d      	movs	r3, #29
 8001d42:	0001      	movs	r1, r0
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	4652      	mov	r2, sl
 8001d48:	3908      	subs	r1, #8
 8001d4a:	40da      	lsrs	r2, r3
 8001d4c:	408e      	lsls	r6, r1
 8001d4e:	4316      	orrs	r6, r2
 8001d50:	4652      	mov	r2, sl
 8001d52:	408a      	lsls	r2, r1
 8001d54:	9b00      	ldr	r3, [sp, #0]
 8001d56:	4935      	ldr	r1, [pc, #212]	; (8001e2c <__aeabi_dmul+0x3a4>)
 8001d58:	1a18      	subs	r0, r3, r0
 8001d5a:	0003      	movs	r3, r0
 8001d5c:	468c      	mov	ip, r1
 8001d5e:	4463      	add	r3, ip
 8001d60:	2000      	movs	r0, #0
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	e6d3      	b.n	8001b0e <__aeabi_dmul+0x86>
 8001d66:	0025      	movs	r5, r4
 8001d68:	4305      	orrs	r5, r0
 8001d6a:	d04a      	beq.n	8001e02 <__aeabi_dmul+0x37a>
 8001d6c:	2c00      	cmp	r4, #0
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dmul+0x2ea>
 8001d70:	e0b0      	b.n	8001ed4 <__aeabi_dmul+0x44c>
 8001d72:	0020      	movs	r0, r4
 8001d74:	f000 fde2 	bl	800293c <__clzsi2>
 8001d78:	0001      	movs	r1, r0
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	390b      	subs	r1, #11
 8001d7e:	231d      	movs	r3, #29
 8001d80:	0010      	movs	r0, r2
 8001d82:	1a5b      	subs	r3, r3, r1
 8001d84:	0031      	movs	r1, r6
 8001d86:	0035      	movs	r5, r6
 8001d88:	3808      	subs	r0, #8
 8001d8a:	4084      	lsls	r4, r0
 8001d8c:	40d9      	lsrs	r1, r3
 8001d8e:	4085      	lsls	r5, r0
 8001d90:	430c      	orrs	r4, r1
 8001d92:	4826      	ldr	r0, [pc, #152]	; (8001e2c <__aeabi_dmul+0x3a4>)
 8001d94:	1a83      	subs	r3, r0, r2
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	4699      	mov	r9, r3
 8001d9c:	469b      	mov	fp, r3
 8001d9e:	e697      	b.n	8001ad0 <__aeabi_dmul+0x48>
 8001da0:	0005      	movs	r5, r0
 8001da2:	4325      	orrs	r5, r4
 8001da4:	d126      	bne.n	8001df4 <__aeabi_dmul+0x36c>
 8001da6:	2208      	movs	r2, #8
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2302      	movs	r3, #2
 8001dac:	2400      	movs	r4, #0
 8001dae:	4691      	mov	r9, r2
 8001db0:	469b      	mov	fp, r3
 8001db2:	e68d      	b.n	8001ad0 <__aeabi_dmul+0x48>
 8001db4:	4652      	mov	r2, sl
 8001db6:	9b00      	ldr	r3, [sp, #0]
 8001db8:	4332      	orrs	r2, r6
 8001dba:	d110      	bne.n	8001dde <__aeabi_dmul+0x356>
 8001dbc:	4915      	ldr	r1, [pc, #84]	; (8001e14 <__aeabi_dmul+0x38c>)
 8001dbe:	2600      	movs	r6, #0
 8001dc0:	468c      	mov	ip, r1
 8001dc2:	4463      	add	r3, ip
 8001dc4:	4649      	mov	r1, r9
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	4319      	orrs	r1, r3
 8001dcc:	4689      	mov	r9, r1
 8001dce:	2002      	movs	r0, #2
 8001dd0:	e69d      	b.n	8001b0e <__aeabi_dmul+0x86>
 8001dd2:	465b      	mov	r3, fp
 8001dd4:	9701      	str	r7, [sp, #4]
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_dmul+0x354>
 8001dda:	e6ad      	b.n	8001b38 <__aeabi_dmul+0xb0>
 8001ddc:	e6c3      	b.n	8001b66 <__aeabi_dmul+0xde>
 8001dde:	4a0d      	ldr	r2, [pc, #52]	; (8001e14 <__aeabi_dmul+0x38c>)
 8001de0:	2003      	movs	r0, #3
 8001de2:	4694      	mov	ip, r2
 8001de4:	4463      	add	r3, ip
 8001de6:	464a      	mov	r2, r9
 8001de8:	9300      	str	r3, [sp, #0]
 8001dea:	2303      	movs	r3, #3
 8001dec:	431a      	orrs	r2, r3
 8001dee:	4691      	mov	r9, r2
 8001df0:	4652      	mov	r2, sl
 8001df2:	e68c      	b.n	8001b0e <__aeabi_dmul+0x86>
 8001df4:	220c      	movs	r2, #12
 8001df6:	9300      	str	r3, [sp, #0]
 8001df8:	2303      	movs	r3, #3
 8001dfa:	0005      	movs	r5, r0
 8001dfc:	4691      	mov	r9, r2
 8001dfe:	469b      	mov	fp, r3
 8001e00:	e666      	b.n	8001ad0 <__aeabi_dmul+0x48>
 8001e02:	2304      	movs	r3, #4
 8001e04:	4699      	mov	r9, r3
 8001e06:	2300      	movs	r3, #0
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	2400      	movs	r4, #0
 8001e0e:	469b      	mov	fp, r3
 8001e10:	e65e      	b.n	8001ad0 <__aeabi_dmul+0x48>
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	000007ff 	.word	0x000007ff
 8001e18:	fffffc01 	.word	0xfffffc01
 8001e1c:	08008aa0 	.word	0x08008aa0
 8001e20:	000003ff 	.word	0x000003ff
 8001e24:	feffffff 	.word	0xfeffffff
 8001e28:	000007fe 	.word	0x000007fe
 8001e2c:	fffffc0d 	.word	0xfffffc0d
 8001e30:	4649      	mov	r1, r9
 8001e32:	2301      	movs	r3, #1
 8001e34:	4319      	orrs	r1, r3
 8001e36:	4689      	mov	r9, r1
 8001e38:	2600      	movs	r6, #0
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	e667      	b.n	8001b0e <__aeabi_dmul+0x86>
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	2500      	movs	r5, #0
 8001e44:	4a43      	ldr	r2, [pc, #268]	; (8001f54 <__aeabi_dmul+0x4cc>)
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	0324      	lsls	r4, r4, #12
 8001e4a:	e67e      	b.n	8001b4a <__aeabi_dmul+0xc2>
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	1a40      	subs	r0, r0, r1
 8001e50:	2838      	cmp	r0, #56	; 0x38
 8001e52:	dd00      	ble.n	8001e56 <__aeabi_dmul+0x3ce>
 8001e54:	e676      	b.n	8001b44 <__aeabi_dmul+0xbc>
 8001e56:	281f      	cmp	r0, #31
 8001e58:	dd5b      	ble.n	8001f12 <__aeabi_dmul+0x48a>
 8001e5a:	221f      	movs	r2, #31
 8001e5c:	0023      	movs	r3, r4
 8001e5e:	4252      	negs	r2, r2
 8001e60:	1a51      	subs	r1, r2, r1
 8001e62:	40cb      	lsrs	r3, r1
 8001e64:	0019      	movs	r1, r3
 8001e66:	2820      	cmp	r0, #32
 8001e68:	d003      	beq.n	8001e72 <__aeabi_dmul+0x3ea>
 8001e6a:	4a3b      	ldr	r2, [pc, #236]	; (8001f58 <__aeabi_dmul+0x4d0>)
 8001e6c:	4462      	add	r2, ip
 8001e6e:	4094      	lsls	r4, r2
 8001e70:	4325      	orrs	r5, r4
 8001e72:	1e6a      	subs	r2, r5, #1
 8001e74:	4195      	sbcs	r5, r2
 8001e76:	002a      	movs	r2, r5
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	2107      	movs	r1, #7
 8001e7c:	000d      	movs	r5, r1
 8001e7e:	2400      	movs	r4, #0
 8001e80:	4015      	ands	r5, r2
 8001e82:	4211      	tst	r1, r2
 8001e84:	d05b      	beq.n	8001f3e <__aeabi_dmul+0x4b6>
 8001e86:	210f      	movs	r1, #15
 8001e88:	2400      	movs	r4, #0
 8001e8a:	4011      	ands	r1, r2
 8001e8c:	2904      	cmp	r1, #4
 8001e8e:	d053      	beq.n	8001f38 <__aeabi_dmul+0x4b0>
 8001e90:	1d11      	adds	r1, r2, #4
 8001e92:	4291      	cmp	r1, r2
 8001e94:	4192      	sbcs	r2, r2
 8001e96:	4252      	negs	r2, r2
 8001e98:	18a4      	adds	r4, r4, r2
 8001e9a:	000a      	movs	r2, r1
 8001e9c:	0223      	lsls	r3, r4, #8
 8001e9e:	d54b      	bpl.n	8001f38 <__aeabi_dmul+0x4b0>
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	2400      	movs	r4, #0
 8001ea4:	2500      	movs	r5, #0
 8001ea6:	e650      	b.n	8001b4a <__aeabi_dmul+0xc2>
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	031b      	lsls	r3, r3, #12
 8001eac:	421c      	tst	r4, r3
 8001eae:	d009      	beq.n	8001ec4 <__aeabi_dmul+0x43c>
 8001eb0:	421e      	tst	r6, r3
 8001eb2:	d107      	bne.n	8001ec4 <__aeabi_dmul+0x43c>
 8001eb4:	4333      	orrs	r3, r6
 8001eb6:	031c      	lsls	r4, r3, #12
 8001eb8:	4643      	mov	r3, r8
 8001eba:	0015      	movs	r5, r2
 8001ebc:	0b24      	lsrs	r4, r4, #12
 8001ebe:	4a25      	ldr	r2, [pc, #148]	; (8001f54 <__aeabi_dmul+0x4cc>)
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	e642      	b.n	8001b4a <__aeabi_dmul+0xc2>
 8001ec4:	2280      	movs	r2, #128	; 0x80
 8001ec6:	0312      	lsls	r2, r2, #12
 8001ec8:	4314      	orrs	r4, r2
 8001eca:	0324      	lsls	r4, r4, #12
 8001ecc:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <__aeabi_dmul+0x4cc>)
 8001ece:	0b24      	lsrs	r4, r4, #12
 8001ed0:	9701      	str	r7, [sp, #4]
 8001ed2:	e63a      	b.n	8001b4a <__aeabi_dmul+0xc2>
 8001ed4:	f000 fd32 	bl	800293c <__clzsi2>
 8001ed8:	0001      	movs	r1, r0
 8001eda:	0002      	movs	r2, r0
 8001edc:	3115      	adds	r1, #21
 8001ede:	3220      	adds	r2, #32
 8001ee0:	291c      	cmp	r1, #28
 8001ee2:	dc00      	bgt.n	8001ee6 <__aeabi_dmul+0x45e>
 8001ee4:	e74b      	b.n	8001d7e <__aeabi_dmul+0x2f6>
 8001ee6:	0034      	movs	r4, r6
 8001ee8:	3808      	subs	r0, #8
 8001eea:	2500      	movs	r5, #0
 8001eec:	4084      	lsls	r4, r0
 8001eee:	e750      	b.n	8001d92 <__aeabi_dmul+0x30a>
 8001ef0:	f000 fd24 	bl	800293c <__clzsi2>
 8001ef4:	0003      	movs	r3, r0
 8001ef6:	001a      	movs	r2, r3
 8001ef8:	3215      	adds	r2, #21
 8001efa:	3020      	adds	r0, #32
 8001efc:	2a1c      	cmp	r2, #28
 8001efe:	dc00      	bgt.n	8001f02 <__aeabi_dmul+0x47a>
 8001f00:	e71e      	b.n	8001d40 <__aeabi_dmul+0x2b8>
 8001f02:	4656      	mov	r6, sl
 8001f04:	3b08      	subs	r3, #8
 8001f06:	2200      	movs	r2, #0
 8001f08:	409e      	lsls	r6, r3
 8001f0a:	e723      	b.n	8001d54 <__aeabi_dmul+0x2cc>
 8001f0c:	9b00      	ldr	r3, [sp, #0]
 8001f0e:	469c      	mov	ip, r3
 8001f10:	e6e6      	b.n	8001ce0 <__aeabi_dmul+0x258>
 8001f12:	4912      	ldr	r1, [pc, #72]	; (8001f5c <__aeabi_dmul+0x4d4>)
 8001f14:	0022      	movs	r2, r4
 8001f16:	4461      	add	r1, ip
 8001f18:	002e      	movs	r6, r5
 8001f1a:	408d      	lsls	r5, r1
 8001f1c:	408a      	lsls	r2, r1
 8001f1e:	40c6      	lsrs	r6, r0
 8001f20:	1e69      	subs	r1, r5, #1
 8001f22:	418d      	sbcs	r5, r1
 8001f24:	4332      	orrs	r2, r6
 8001f26:	432a      	orrs	r2, r5
 8001f28:	40c4      	lsrs	r4, r0
 8001f2a:	0753      	lsls	r3, r2, #29
 8001f2c:	d0b6      	beq.n	8001e9c <__aeabi_dmul+0x414>
 8001f2e:	210f      	movs	r1, #15
 8001f30:	4011      	ands	r1, r2
 8001f32:	2904      	cmp	r1, #4
 8001f34:	d1ac      	bne.n	8001e90 <__aeabi_dmul+0x408>
 8001f36:	e7b1      	b.n	8001e9c <__aeabi_dmul+0x414>
 8001f38:	0765      	lsls	r5, r4, #29
 8001f3a:	0264      	lsls	r4, r4, #9
 8001f3c:	0b24      	lsrs	r4, r4, #12
 8001f3e:	08d2      	lsrs	r2, r2, #3
 8001f40:	4315      	orrs	r5, r2
 8001f42:	2200      	movs	r2, #0
 8001f44:	e601      	b.n	8001b4a <__aeabi_dmul+0xc2>
 8001f46:	2280      	movs	r2, #128	; 0x80
 8001f48:	0312      	lsls	r2, r2, #12
 8001f4a:	4314      	orrs	r4, r2
 8001f4c:	0324      	lsls	r4, r4, #12
 8001f4e:	4a01      	ldr	r2, [pc, #4]	; (8001f54 <__aeabi_dmul+0x4cc>)
 8001f50:	0b24      	lsrs	r4, r4, #12
 8001f52:	e5fa      	b.n	8001b4a <__aeabi_dmul+0xc2>
 8001f54:	000007ff 	.word	0x000007ff
 8001f58:	0000043e 	.word	0x0000043e
 8001f5c:	0000041e 	.word	0x0000041e

08001f60 <__aeabi_dsub>:
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f62:	4657      	mov	r7, sl
 8001f64:	464e      	mov	r6, r9
 8001f66:	4645      	mov	r5, r8
 8001f68:	46de      	mov	lr, fp
 8001f6a:	b5e0      	push	{r5, r6, r7, lr}
 8001f6c:	001e      	movs	r6, r3
 8001f6e:	0017      	movs	r7, r2
 8001f70:	004a      	lsls	r2, r1, #1
 8001f72:	030b      	lsls	r3, r1, #12
 8001f74:	0d52      	lsrs	r2, r2, #21
 8001f76:	0a5b      	lsrs	r3, r3, #9
 8001f78:	4690      	mov	r8, r2
 8001f7a:	0f42      	lsrs	r2, r0, #29
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	0fcd      	lsrs	r5, r1, #31
 8001f80:	4ccd      	ldr	r4, [pc, #820]	; (80022b8 <__aeabi_dsub+0x358>)
 8001f82:	0331      	lsls	r1, r6, #12
 8001f84:	00c3      	lsls	r3, r0, #3
 8001f86:	4694      	mov	ip, r2
 8001f88:	0070      	lsls	r0, r6, #1
 8001f8a:	0f7a      	lsrs	r2, r7, #29
 8001f8c:	0a49      	lsrs	r1, r1, #9
 8001f8e:	00ff      	lsls	r7, r7, #3
 8001f90:	469a      	mov	sl, r3
 8001f92:	46b9      	mov	r9, r7
 8001f94:	0d40      	lsrs	r0, r0, #21
 8001f96:	0ff6      	lsrs	r6, r6, #31
 8001f98:	4311      	orrs	r1, r2
 8001f9a:	42a0      	cmp	r0, r4
 8001f9c:	d100      	bne.n	8001fa0 <__aeabi_dsub+0x40>
 8001f9e:	e0b1      	b.n	8002104 <__aeabi_dsub+0x1a4>
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4056      	eors	r6, r2
 8001fa4:	46b3      	mov	fp, r6
 8001fa6:	42b5      	cmp	r5, r6
 8001fa8:	d100      	bne.n	8001fac <__aeabi_dsub+0x4c>
 8001faa:	e088      	b.n	80020be <__aeabi_dsub+0x15e>
 8001fac:	4642      	mov	r2, r8
 8001fae:	1a12      	subs	r2, r2, r0
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	dc00      	bgt.n	8001fb6 <__aeabi_dsub+0x56>
 8001fb4:	e0ae      	b.n	8002114 <__aeabi_dsub+0x1b4>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d100      	bne.n	8001fbc <__aeabi_dsub+0x5c>
 8001fba:	e0c1      	b.n	8002140 <__aeabi_dsub+0x1e0>
 8001fbc:	48be      	ldr	r0, [pc, #760]	; (80022b8 <__aeabi_dsub+0x358>)
 8001fbe:	4580      	cmp	r8, r0
 8001fc0:	d100      	bne.n	8001fc4 <__aeabi_dsub+0x64>
 8001fc2:	e151      	b.n	8002268 <__aeabi_dsub+0x308>
 8001fc4:	2080      	movs	r0, #128	; 0x80
 8001fc6:	0400      	lsls	r0, r0, #16
 8001fc8:	4301      	orrs	r1, r0
 8001fca:	2a38      	cmp	r2, #56	; 0x38
 8001fcc:	dd00      	ble.n	8001fd0 <__aeabi_dsub+0x70>
 8001fce:	e17b      	b.n	80022c8 <__aeabi_dsub+0x368>
 8001fd0:	2a1f      	cmp	r2, #31
 8001fd2:	dd00      	ble.n	8001fd6 <__aeabi_dsub+0x76>
 8001fd4:	e1ee      	b.n	80023b4 <__aeabi_dsub+0x454>
 8001fd6:	2020      	movs	r0, #32
 8001fd8:	003e      	movs	r6, r7
 8001fda:	1a80      	subs	r0, r0, r2
 8001fdc:	000c      	movs	r4, r1
 8001fde:	40d6      	lsrs	r6, r2
 8001fe0:	40d1      	lsrs	r1, r2
 8001fe2:	4087      	lsls	r7, r0
 8001fe4:	4662      	mov	r2, ip
 8001fe6:	4084      	lsls	r4, r0
 8001fe8:	1a52      	subs	r2, r2, r1
 8001fea:	1e78      	subs	r0, r7, #1
 8001fec:	4187      	sbcs	r7, r0
 8001fee:	4694      	mov	ip, r2
 8001ff0:	4334      	orrs	r4, r6
 8001ff2:	4327      	orrs	r7, r4
 8001ff4:	1bdc      	subs	r4, r3, r7
 8001ff6:	42a3      	cmp	r3, r4
 8001ff8:	419b      	sbcs	r3, r3
 8001ffa:	4662      	mov	r2, ip
 8001ffc:	425b      	negs	r3, r3
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	4699      	mov	r9, r3
 8002002:	464b      	mov	r3, r9
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	d400      	bmi.n	800200a <__aeabi_dsub+0xaa>
 8002008:	e118      	b.n	800223c <__aeabi_dsub+0x2dc>
 800200a:	464b      	mov	r3, r9
 800200c:	0258      	lsls	r0, r3, #9
 800200e:	0a43      	lsrs	r3, r0, #9
 8002010:	4699      	mov	r9, r3
 8002012:	464b      	mov	r3, r9
 8002014:	2b00      	cmp	r3, #0
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0xba>
 8002018:	e137      	b.n	800228a <__aeabi_dsub+0x32a>
 800201a:	4648      	mov	r0, r9
 800201c:	f000 fc8e 	bl	800293c <__clzsi2>
 8002020:	0001      	movs	r1, r0
 8002022:	3908      	subs	r1, #8
 8002024:	2320      	movs	r3, #32
 8002026:	0022      	movs	r2, r4
 8002028:	4648      	mov	r0, r9
 800202a:	1a5b      	subs	r3, r3, r1
 800202c:	40da      	lsrs	r2, r3
 800202e:	4088      	lsls	r0, r1
 8002030:	408c      	lsls	r4, r1
 8002032:	4643      	mov	r3, r8
 8002034:	4310      	orrs	r0, r2
 8002036:	4588      	cmp	r8, r1
 8002038:	dd00      	ble.n	800203c <__aeabi_dsub+0xdc>
 800203a:	e136      	b.n	80022aa <__aeabi_dsub+0x34a>
 800203c:	1ac9      	subs	r1, r1, r3
 800203e:	1c4b      	adds	r3, r1, #1
 8002040:	2b1f      	cmp	r3, #31
 8002042:	dd00      	ble.n	8002046 <__aeabi_dsub+0xe6>
 8002044:	e0ea      	b.n	800221c <__aeabi_dsub+0x2bc>
 8002046:	2220      	movs	r2, #32
 8002048:	0026      	movs	r6, r4
 800204a:	1ad2      	subs	r2, r2, r3
 800204c:	0001      	movs	r1, r0
 800204e:	4094      	lsls	r4, r2
 8002050:	40de      	lsrs	r6, r3
 8002052:	40d8      	lsrs	r0, r3
 8002054:	2300      	movs	r3, #0
 8002056:	4091      	lsls	r1, r2
 8002058:	1e62      	subs	r2, r4, #1
 800205a:	4194      	sbcs	r4, r2
 800205c:	4681      	mov	r9, r0
 800205e:	4698      	mov	r8, r3
 8002060:	4331      	orrs	r1, r6
 8002062:	430c      	orrs	r4, r1
 8002064:	0763      	lsls	r3, r4, #29
 8002066:	d009      	beq.n	800207c <__aeabi_dsub+0x11c>
 8002068:	230f      	movs	r3, #15
 800206a:	4023      	ands	r3, r4
 800206c:	2b04      	cmp	r3, #4
 800206e:	d005      	beq.n	800207c <__aeabi_dsub+0x11c>
 8002070:	1d23      	adds	r3, r4, #4
 8002072:	42a3      	cmp	r3, r4
 8002074:	41a4      	sbcs	r4, r4
 8002076:	4264      	negs	r4, r4
 8002078:	44a1      	add	r9, r4
 800207a:	001c      	movs	r4, r3
 800207c:	464b      	mov	r3, r9
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	d400      	bmi.n	8002084 <__aeabi_dsub+0x124>
 8002082:	e0de      	b.n	8002242 <__aeabi_dsub+0x2e2>
 8002084:	4641      	mov	r1, r8
 8002086:	4b8c      	ldr	r3, [pc, #560]	; (80022b8 <__aeabi_dsub+0x358>)
 8002088:	3101      	adds	r1, #1
 800208a:	4299      	cmp	r1, r3
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x130>
 800208e:	e0e7      	b.n	8002260 <__aeabi_dsub+0x300>
 8002090:	464b      	mov	r3, r9
 8002092:	488a      	ldr	r0, [pc, #552]	; (80022bc <__aeabi_dsub+0x35c>)
 8002094:	08e4      	lsrs	r4, r4, #3
 8002096:	4003      	ands	r3, r0
 8002098:	0018      	movs	r0, r3
 800209a:	0549      	lsls	r1, r1, #21
 800209c:	075b      	lsls	r3, r3, #29
 800209e:	0240      	lsls	r0, r0, #9
 80020a0:	4323      	orrs	r3, r4
 80020a2:	0d4a      	lsrs	r2, r1, #21
 80020a4:	0b04      	lsrs	r4, r0, #12
 80020a6:	0512      	lsls	r2, r2, #20
 80020a8:	07ed      	lsls	r5, r5, #31
 80020aa:	4322      	orrs	r2, r4
 80020ac:	432a      	orrs	r2, r5
 80020ae:	0018      	movs	r0, r3
 80020b0:	0011      	movs	r1, r2
 80020b2:	bcf0      	pop	{r4, r5, r6, r7}
 80020b4:	46bb      	mov	fp, r7
 80020b6:	46b2      	mov	sl, r6
 80020b8:	46a9      	mov	r9, r5
 80020ba:	46a0      	mov	r8, r4
 80020bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020be:	4642      	mov	r2, r8
 80020c0:	1a12      	subs	r2, r2, r0
 80020c2:	2a00      	cmp	r2, #0
 80020c4:	dd52      	ble.n	800216c <__aeabi_dsub+0x20c>
 80020c6:	2800      	cmp	r0, #0
 80020c8:	d100      	bne.n	80020cc <__aeabi_dsub+0x16c>
 80020ca:	e09c      	b.n	8002206 <__aeabi_dsub+0x2a6>
 80020cc:	45a0      	cmp	r8, r4
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dsub+0x172>
 80020d0:	e0ca      	b.n	8002268 <__aeabi_dsub+0x308>
 80020d2:	2080      	movs	r0, #128	; 0x80
 80020d4:	0400      	lsls	r0, r0, #16
 80020d6:	4301      	orrs	r1, r0
 80020d8:	2a38      	cmp	r2, #56	; 0x38
 80020da:	dd00      	ble.n	80020de <__aeabi_dsub+0x17e>
 80020dc:	e149      	b.n	8002372 <__aeabi_dsub+0x412>
 80020de:	2a1f      	cmp	r2, #31
 80020e0:	dc00      	bgt.n	80020e4 <__aeabi_dsub+0x184>
 80020e2:	e197      	b.n	8002414 <__aeabi_dsub+0x4b4>
 80020e4:	0010      	movs	r0, r2
 80020e6:	000e      	movs	r6, r1
 80020e8:	3820      	subs	r0, #32
 80020ea:	40c6      	lsrs	r6, r0
 80020ec:	2a20      	cmp	r2, #32
 80020ee:	d004      	beq.n	80020fa <__aeabi_dsub+0x19a>
 80020f0:	2040      	movs	r0, #64	; 0x40
 80020f2:	1a82      	subs	r2, r0, r2
 80020f4:	4091      	lsls	r1, r2
 80020f6:	430f      	orrs	r7, r1
 80020f8:	46b9      	mov	r9, r7
 80020fa:	464c      	mov	r4, r9
 80020fc:	1e62      	subs	r2, r4, #1
 80020fe:	4194      	sbcs	r4, r2
 8002100:	4334      	orrs	r4, r6
 8002102:	e13a      	b.n	800237a <__aeabi_dsub+0x41a>
 8002104:	000a      	movs	r2, r1
 8002106:	433a      	orrs	r2, r7
 8002108:	d028      	beq.n	800215c <__aeabi_dsub+0x1fc>
 800210a:	46b3      	mov	fp, r6
 800210c:	42b5      	cmp	r5, r6
 800210e:	d02b      	beq.n	8002168 <__aeabi_dsub+0x208>
 8002110:	4a6b      	ldr	r2, [pc, #428]	; (80022c0 <__aeabi_dsub+0x360>)
 8002112:	4442      	add	r2, r8
 8002114:	2a00      	cmp	r2, #0
 8002116:	d05d      	beq.n	80021d4 <__aeabi_dsub+0x274>
 8002118:	4642      	mov	r2, r8
 800211a:	4644      	mov	r4, r8
 800211c:	1a82      	subs	r2, r0, r2
 800211e:	2c00      	cmp	r4, #0
 8002120:	d000      	beq.n	8002124 <__aeabi_dsub+0x1c4>
 8002122:	e0f5      	b.n	8002310 <__aeabi_dsub+0x3b0>
 8002124:	4665      	mov	r5, ip
 8002126:	431d      	orrs	r5, r3
 8002128:	d100      	bne.n	800212c <__aeabi_dsub+0x1cc>
 800212a:	e19c      	b.n	8002466 <__aeabi_dsub+0x506>
 800212c:	1e55      	subs	r5, r2, #1
 800212e:	2a01      	cmp	r2, #1
 8002130:	d100      	bne.n	8002134 <__aeabi_dsub+0x1d4>
 8002132:	e1fb      	b.n	800252c <__aeabi_dsub+0x5cc>
 8002134:	4c60      	ldr	r4, [pc, #384]	; (80022b8 <__aeabi_dsub+0x358>)
 8002136:	42a2      	cmp	r2, r4
 8002138:	d100      	bne.n	800213c <__aeabi_dsub+0x1dc>
 800213a:	e1bd      	b.n	80024b8 <__aeabi_dsub+0x558>
 800213c:	002a      	movs	r2, r5
 800213e:	e0f0      	b.n	8002322 <__aeabi_dsub+0x3c2>
 8002140:	0008      	movs	r0, r1
 8002142:	4338      	orrs	r0, r7
 8002144:	d100      	bne.n	8002148 <__aeabi_dsub+0x1e8>
 8002146:	e0c3      	b.n	80022d0 <__aeabi_dsub+0x370>
 8002148:	1e50      	subs	r0, r2, #1
 800214a:	2a01      	cmp	r2, #1
 800214c:	d100      	bne.n	8002150 <__aeabi_dsub+0x1f0>
 800214e:	e1a8      	b.n	80024a2 <__aeabi_dsub+0x542>
 8002150:	4c59      	ldr	r4, [pc, #356]	; (80022b8 <__aeabi_dsub+0x358>)
 8002152:	42a2      	cmp	r2, r4
 8002154:	d100      	bne.n	8002158 <__aeabi_dsub+0x1f8>
 8002156:	e087      	b.n	8002268 <__aeabi_dsub+0x308>
 8002158:	0002      	movs	r2, r0
 800215a:	e736      	b.n	8001fca <__aeabi_dsub+0x6a>
 800215c:	2201      	movs	r2, #1
 800215e:	4056      	eors	r6, r2
 8002160:	46b3      	mov	fp, r6
 8002162:	42b5      	cmp	r5, r6
 8002164:	d000      	beq.n	8002168 <__aeabi_dsub+0x208>
 8002166:	e721      	b.n	8001fac <__aeabi_dsub+0x4c>
 8002168:	4a55      	ldr	r2, [pc, #340]	; (80022c0 <__aeabi_dsub+0x360>)
 800216a:	4442      	add	r2, r8
 800216c:	2a00      	cmp	r2, #0
 800216e:	d100      	bne.n	8002172 <__aeabi_dsub+0x212>
 8002170:	e0b5      	b.n	80022de <__aeabi_dsub+0x37e>
 8002172:	4642      	mov	r2, r8
 8002174:	4644      	mov	r4, r8
 8002176:	1a82      	subs	r2, r0, r2
 8002178:	2c00      	cmp	r4, #0
 800217a:	d100      	bne.n	800217e <__aeabi_dsub+0x21e>
 800217c:	e138      	b.n	80023f0 <__aeabi_dsub+0x490>
 800217e:	4e4e      	ldr	r6, [pc, #312]	; (80022b8 <__aeabi_dsub+0x358>)
 8002180:	42b0      	cmp	r0, r6
 8002182:	d100      	bne.n	8002186 <__aeabi_dsub+0x226>
 8002184:	e1de      	b.n	8002544 <__aeabi_dsub+0x5e4>
 8002186:	2680      	movs	r6, #128	; 0x80
 8002188:	4664      	mov	r4, ip
 800218a:	0436      	lsls	r6, r6, #16
 800218c:	4334      	orrs	r4, r6
 800218e:	46a4      	mov	ip, r4
 8002190:	2a38      	cmp	r2, #56	; 0x38
 8002192:	dd00      	ble.n	8002196 <__aeabi_dsub+0x236>
 8002194:	e196      	b.n	80024c4 <__aeabi_dsub+0x564>
 8002196:	2a1f      	cmp	r2, #31
 8002198:	dd00      	ble.n	800219c <__aeabi_dsub+0x23c>
 800219a:	e224      	b.n	80025e6 <__aeabi_dsub+0x686>
 800219c:	2620      	movs	r6, #32
 800219e:	1ab4      	subs	r4, r6, r2
 80021a0:	46a2      	mov	sl, r4
 80021a2:	4664      	mov	r4, ip
 80021a4:	4656      	mov	r6, sl
 80021a6:	40b4      	lsls	r4, r6
 80021a8:	46a1      	mov	r9, r4
 80021aa:	001c      	movs	r4, r3
 80021ac:	464e      	mov	r6, r9
 80021ae:	40d4      	lsrs	r4, r2
 80021b0:	4326      	orrs	r6, r4
 80021b2:	0034      	movs	r4, r6
 80021b4:	4656      	mov	r6, sl
 80021b6:	40b3      	lsls	r3, r6
 80021b8:	1e5e      	subs	r6, r3, #1
 80021ba:	41b3      	sbcs	r3, r6
 80021bc:	431c      	orrs	r4, r3
 80021be:	4663      	mov	r3, ip
 80021c0:	40d3      	lsrs	r3, r2
 80021c2:	18c9      	adds	r1, r1, r3
 80021c4:	19e4      	adds	r4, r4, r7
 80021c6:	42bc      	cmp	r4, r7
 80021c8:	41bf      	sbcs	r7, r7
 80021ca:	427f      	negs	r7, r7
 80021cc:	46b9      	mov	r9, r7
 80021ce:	4680      	mov	r8, r0
 80021d0:	4489      	add	r9, r1
 80021d2:	e0d8      	b.n	8002386 <__aeabi_dsub+0x426>
 80021d4:	4640      	mov	r0, r8
 80021d6:	4c3b      	ldr	r4, [pc, #236]	; (80022c4 <__aeabi_dsub+0x364>)
 80021d8:	3001      	adds	r0, #1
 80021da:	4220      	tst	r0, r4
 80021dc:	d000      	beq.n	80021e0 <__aeabi_dsub+0x280>
 80021de:	e0b4      	b.n	800234a <__aeabi_dsub+0x3ea>
 80021e0:	4640      	mov	r0, r8
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d000      	beq.n	80021e8 <__aeabi_dsub+0x288>
 80021e6:	e144      	b.n	8002472 <__aeabi_dsub+0x512>
 80021e8:	4660      	mov	r0, ip
 80021ea:	4318      	orrs	r0, r3
 80021ec:	d100      	bne.n	80021f0 <__aeabi_dsub+0x290>
 80021ee:	e190      	b.n	8002512 <__aeabi_dsub+0x5b2>
 80021f0:	0008      	movs	r0, r1
 80021f2:	4338      	orrs	r0, r7
 80021f4:	d000      	beq.n	80021f8 <__aeabi_dsub+0x298>
 80021f6:	e1aa      	b.n	800254e <__aeabi_dsub+0x5ee>
 80021f8:	4661      	mov	r1, ip
 80021fa:	08db      	lsrs	r3, r3, #3
 80021fc:	0749      	lsls	r1, r1, #29
 80021fe:	430b      	orrs	r3, r1
 8002200:	4661      	mov	r1, ip
 8002202:	08cc      	lsrs	r4, r1, #3
 8002204:	e027      	b.n	8002256 <__aeabi_dsub+0x2f6>
 8002206:	0008      	movs	r0, r1
 8002208:	4338      	orrs	r0, r7
 800220a:	d061      	beq.n	80022d0 <__aeabi_dsub+0x370>
 800220c:	1e50      	subs	r0, r2, #1
 800220e:	2a01      	cmp	r2, #1
 8002210:	d100      	bne.n	8002214 <__aeabi_dsub+0x2b4>
 8002212:	e139      	b.n	8002488 <__aeabi_dsub+0x528>
 8002214:	42a2      	cmp	r2, r4
 8002216:	d027      	beq.n	8002268 <__aeabi_dsub+0x308>
 8002218:	0002      	movs	r2, r0
 800221a:	e75d      	b.n	80020d8 <__aeabi_dsub+0x178>
 800221c:	0002      	movs	r2, r0
 800221e:	391f      	subs	r1, #31
 8002220:	40ca      	lsrs	r2, r1
 8002222:	0011      	movs	r1, r2
 8002224:	2b20      	cmp	r3, #32
 8002226:	d003      	beq.n	8002230 <__aeabi_dsub+0x2d0>
 8002228:	2240      	movs	r2, #64	; 0x40
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	4098      	lsls	r0, r3
 800222e:	4304      	orrs	r4, r0
 8002230:	1e63      	subs	r3, r4, #1
 8002232:	419c      	sbcs	r4, r3
 8002234:	2300      	movs	r3, #0
 8002236:	4699      	mov	r9, r3
 8002238:	4698      	mov	r8, r3
 800223a:	430c      	orrs	r4, r1
 800223c:	0763      	lsls	r3, r4, #29
 800223e:	d000      	beq.n	8002242 <__aeabi_dsub+0x2e2>
 8002240:	e712      	b.n	8002068 <__aeabi_dsub+0x108>
 8002242:	464b      	mov	r3, r9
 8002244:	464a      	mov	r2, r9
 8002246:	08e4      	lsrs	r4, r4, #3
 8002248:	075b      	lsls	r3, r3, #29
 800224a:	4323      	orrs	r3, r4
 800224c:	08d4      	lsrs	r4, r2, #3
 800224e:	4642      	mov	r2, r8
 8002250:	4919      	ldr	r1, [pc, #100]	; (80022b8 <__aeabi_dsub+0x358>)
 8002252:	428a      	cmp	r2, r1
 8002254:	d00e      	beq.n	8002274 <__aeabi_dsub+0x314>
 8002256:	0324      	lsls	r4, r4, #12
 8002258:	0552      	lsls	r2, r2, #21
 800225a:	0b24      	lsrs	r4, r4, #12
 800225c:	0d52      	lsrs	r2, r2, #21
 800225e:	e722      	b.n	80020a6 <__aeabi_dsub+0x146>
 8002260:	000a      	movs	r2, r1
 8002262:	2400      	movs	r4, #0
 8002264:	2300      	movs	r3, #0
 8002266:	e71e      	b.n	80020a6 <__aeabi_dsub+0x146>
 8002268:	08db      	lsrs	r3, r3, #3
 800226a:	4662      	mov	r2, ip
 800226c:	0752      	lsls	r2, r2, #29
 800226e:	4313      	orrs	r3, r2
 8002270:	4662      	mov	r2, ip
 8002272:	08d4      	lsrs	r4, r2, #3
 8002274:	001a      	movs	r2, r3
 8002276:	4322      	orrs	r2, r4
 8002278:	d100      	bne.n	800227c <__aeabi_dsub+0x31c>
 800227a:	e1fc      	b.n	8002676 <__aeabi_dsub+0x716>
 800227c:	2280      	movs	r2, #128	; 0x80
 800227e:	0312      	lsls	r2, r2, #12
 8002280:	4314      	orrs	r4, r2
 8002282:	0324      	lsls	r4, r4, #12
 8002284:	4a0c      	ldr	r2, [pc, #48]	; (80022b8 <__aeabi_dsub+0x358>)
 8002286:	0b24      	lsrs	r4, r4, #12
 8002288:	e70d      	b.n	80020a6 <__aeabi_dsub+0x146>
 800228a:	0020      	movs	r0, r4
 800228c:	f000 fb56 	bl	800293c <__clzsi2>
 8002290:	0001      	movs	r1, r0
 8002292:	3118      	adds	r1, #24
 8002294:	291f      	cmp	r1, #31
 8002296:	dc00      	bgt.n	800229a <__aeabi_dsub+0x33a>
 8002298:	e6c4      	b.n	8002024 <__aeabi_dsub+0xc4>
 800229a:	3808      	subs	r0, #8
 800229c:	4084      	lsls	r4, r0
 800229e:	4643      	mov	r3, r8
 80022a0:	0020      	movs	r0, r4
 80022a2:	2400      	movs	r4, #0
 80022a4:	4588      	cmp	r8, r1
 80022a6:	dc00      	bgt.n	80022aa <__aeabi_dsub+0x34a>
 80022a8:	e6c8      	b.n	800203c <__aeabi_dsub+0xdc>
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__aeabi_dsub+0x35c>)
 80022ac:	1a5b      	subs	r3, r3, r1
 80022ae:	4010      	ands	r0, r2
 80022b0:	4698      	mov	r8, r3
 80022b2:	4681      	mov	r9, r0
 80022b4:	e6d6      	b.n	8002064 <__aeabi_dsub+0x104>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	000007ff 	.word	0x000007ff
 80022bc:	ff7fffff 	.word	0xff7fffff
 80022c0:	fffff801 	.word	0xfffff801
 80022c4:	000007fe 	.word	0x000007fe
 80022c8:	430f      	orrs	r7, r1
 80022ca:	1e7a      	subs	r2, r7, #1
 80022cc:	4197      	sbcs	r7, r2
 80022ce:	e691      	b.n	8001ff4 <__aeabi_dsub+0x94>
 80022d0:	4661      	mov	r1, ip
 80022d2:	08db      	lsrs	r3, r3, #3
 80022d4:	0749      	lsls	r1, r1, #29
 80022d6:	430b      	orrs	r3, r1
 80022d8:	4661      	mov	r1, ip
 80022da:	08cc      	lsrs	r4, r1, #3
 80022dc:	e7b8      	b.n	8002250 <__aeabi_dsub+0x2f0>
 80022de:	4640      	mov	r0, r8
 80022e0:	4cd3      	ldr	r4, [pc, #844]	; (8002630 <__aeabi_dsub+0x6d0>)
 80022e2:	3001      	adds	r0, #1
 80022e4:	4220      	tst	r0, r4
 80022e6:	d000      	beq.n	80022ea <__aeabi_dsub+0x38a>
 80022e8:	e0a2      	b.n	8002430 <__aeabi_dsub+0x4d0>
 80022ea:	4640      	mov	r0, r8
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d000      	beq.n	80022f2 <__aeabi_dsub+0x392>
 80022f0:	e101      	b.n	80024f6 <__aeabi_dsub+0x596>
 80022f2:	4660      	mov	r0, ip
 80022f4:	4318      	orrs	r0, r3
 80022f6:	d100      	bne.n	80022fa <__aeabi_dsub+0x39a>
 80022f8:	e15e      	b.n	80025b8 <__aeabi_dsub+0x658>
 80022fa:	0008      	movs	r0, r1
 80022fc:	4338      	orrs	r0, r7
 80022fe:	d000      	beq.n	8002302 <__aeabi_dsub+0x3a2>
 8002300:	e15f      	b.n	80025c2 <__aeabi_dsub+0x662>
 8002302:	4661      	mov	r1, ip
 8002304:	08db      	lsrs	r3, r3, #3
 8002306:	0749      	lsls	r1, r1, #29
 8002308:	430b      	orrs	r3, r1
 800230a:	4661      	mov	r1, ip
 800230c:	08cc      	lsrs	r4, r1, #3
 800230e:	e7a2      	b.n	8002256 <__aeabi_dsub+0x2f6>
 8002310:	4dc8      	ldr	r5, [pc, #800]	; (8002634 <__aeabi_dsub+0x6d4>)
 8002312:	42a8      	cmp	r0, r5
 8002314:	d100      	bne.n	8002318 <__aeabi_dsub+0x3b8>
 8002316:	e0cf      	b.n	80024b8 <__aeabi_dsub+0x558>
 8002318:	2580      	movs	r5, #128	; 0x80
 800231a:	4664      	mov	r4, ip
 800231c:	042d      	lsls	r5, r5, #16
 800231e:	432c      	orrs	r4, r5
 8002320:	46a4      	mov	ip, r4
 8002322:	2a38      	cmp	r2, #56	; 0x38
 8002324:	dc56      	bgt.n	80023d4 <__aeabi_dsub+0x474>
 8002326:	2a1f      	cmp	r2, #31
 8002328:	dd00      	ble.n	800232c <__aeabi_dsub+0x3cc>
 800232a:	e0d1      	b.n	80024d0 <__aeabi_dsub+0x570>
 800232c:	2520      	movs	r5, #32
 800232e:	001e      	movs	r6, r3
 8002330:	1aad      	subs	r5, r5, r2
 8002332:	4664      	mov	r4, ip
 8002334:	40ab      	lsls	r3, r5
 8002336:	40ac      	lsls	r4, r5
 8002338:	40d6      	lsrs	r6, r2
 800233a:	1e5d      	subs	r5, r3, #1
 800233c:	41ab      	sbcs	r3, r5
 800233e:	4334      	orrs	r4, r6
 8002340:	4323      	orrs	r3, r4
 8002342:	4664      	mov	r4, ip
 8002344:	40d4      	lsrs	r4, r2
 8002346:	1b09      	subs	r1, r1, r4
 8002348:	e049      	b.n	80023de <__aeabi_dsub+0x47e>
 800234a:	4660      	mov	r0, ip
 800234c:	1bdc      	subs	r4, r3, r7
 800234e:	1a46      	subs	r6, r0, r1
 8002350:	42a3      	cmp	r3, r4
 8002352:	4180      	sbcs	r0, r0
 8002354:	4240      	negs	r0, r0
 8002356:	4681      	mov	r9, r0
 8002358:	0030      	movs	r0, r6
 800235a:	464e      	mov	r6, r9
 800235c:	1b80      	subs	r0, r0, r6
 800235e:	4681      	mov	r9, r0
 8002360:	0200      	lsls	r0, r0, #8
 8002362:	d476      	bmi.n	8002452 <__aeabi_dsub+0x4f2>
 8002364:	464b      	mov	r3, r9
 8002366:	4323      	orrs	r3, r4
 8002368:	d000      	beq.n	800236c <__aeabi_dsub+0x40c>
 800236a:	e652      	b.n	8002012 <__aeabi_dsub+0xb2>
 800236c:	2400      	movs	r4, #0
 800236e:	2500      	movs	r5, #0
 8002370:	e771      	b.n	8002256 <__aeabi_dsub+0x2f6>
 8002372:	4339      	orrs	r1, r7
 8002374:	000c      	movs	r4, r1
 8002376:	1e62      	subs	r2, r4, #1
 8002378:	4194      	sbcs	r4, r2
 800237a:	18e4      	adds	r4, r4, r3
 800237c:	429c      	cmp	r4, r3
 800237e:	419b      	sbcs	r3, r3
 8002380:	425b      	negs	r3, r3
 8002382:	4463      	add	r3, ip
 8002384:	4699      	mov	r9, r3
 8002386:	464b      	mov	r3, r9
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	d400      	bmi.n	800238e <__aeabi_dsub+0x42e>
 800238c:	e756      	b.n	800223c <__aeabi_dsub+0x2dc>
 800238e:	2301      	movs	r3, #1
 8002390:	469c      	mov	ip, r3
 8002392:	4ba8      	ldr	r3, [pc, #672]	; (8002634 <__aeabi_dsub+0x6d4>)
 8002394:	44e0      	add	r8, ip
 8002396:	4598      	cmp	r8, r3
 8002398:	d038      	beq.n	800240c <__aeabi_dsub+0x4ac>
 800239a:	464b      	mov	r3, r9
 800239c:	48a6      	ldr	r0, [pc, #664]	; (8002638 <__aeabi_dsub+0x6d8>)
 800239e:	2201      	movs	r2, #1
 80023a0:	4003      	ands	r3, r0
 80023a2:	0018      	movs	r0, r3
 80023a4:	0863      	lsrs	r3, r4, #1
 80023a6:	4014      	ands	r4, r2
 80023a8:	431c      	orrs	r4, r3
 80023aa:	07c3      	lsls	r3, r0, #31
 80023ac:	431c      	orrs	r4, r3
 80023ae:	0843      	lsrs	r3, r0, #1
 80023b0:	4699      	mov	r9, r3
 80023b2:	e657      	b.n	8002064 <__aeabi_dsub+0x104>
 80023b4:	0010      	movs	r0, r2
 80023b6:	000e      	movs	r6, r1
 80023b8:	3820      	subs	r0, #32
 80023ba:	40c6      	lsrs	r6, r0
 80023bc:	2a20      	cmp	r2, #32
 80023be:	d004      	beq.n	80023ca <__aeabi_dsub+0x46a>
 80023c0:	2040      	movs	r0, #64	; 0x40
 80023c2:	1a82      	subs	r2, r0, r2
 80023c4:	4091      	lsls	r1, r2
 80023c6:	430f      	orrs	r7, r1
 80023c8:	46b9      	mov	r9, r7
 80023ca:	464f      	mov	r7, r9
 80023cc:	1e7a      	subs	r2, r7, #1
 80023ce:	4197      	sbcs	r7, r2
 80023d0:	4337      	orrs	r7, r6
 80023d2:	e60f      	b.n	8001ff4 <__aeabi_dsub+0x94>
 80023d4:	4662      	mov	r2, ip
 80023d6:	431a      	orrs	r2, r3
 80023d8:	0013      	movs	r3, r2
 80023da:	1e5a      	subs	r2, r3, #1
 80023dc:	4193      	sbcs	r3, r2
 80023de:	1afc      	subs	r4, r7, r3
 80023e0:	42a7      	cmp	r7, r4
 80023e2:	41bf      	sbcs	r7, r7
 80023e4:	427f      	negs	r7, r7
 80023e6:	1bcb      	subs	r3, r1, r7
 80023e8:	4699      	mov	r9, r3
 80023ea:	465d      	mov	r5, fp
 80023ec:	4680      	mov	r8, r0
 80023ee:	e608      	b.n	8002002 <__aeabi_dsub+0xa2>
 80023f0:	4666      	mov	r6, ip
 80023f2:	431e      	orrs	r6, r3
 80023f4:	d100      	bne.n	80023f8 <__aeabi_dsub+0x498>
 80023f6:	e0be      	b.n	8002576 <__aeabi_dsub+0x616>
 80023f8:	1e56      	subs	r6, r2, #1
 80023fa:	2a01      	cmp	r2, #1
 80023fc:	d100      	bne.n	8002400 <__aeabi_dsub+0x4a0>
 80023fe:	e109      	b.n	8002614 <__aeabi_dsub+0x6b4>
 8002400:	4c8c      	ldr	r4, [pc, #560]	; (8002634 <__aeabi_dsub+0x6d4>)
 8002402:	42a2      	cmp	r2, r4
 8002404:	d100      	bne.n	8002408 <__aeabi_dsub+0x4a8>
 8002406:	e119      	b.n	800263c <__aeabi_dsub+0x6dc>
 8002408:	0032      	movs	r2, r6
 800240a:	e6c1      	b.n	8002190 <__aeabi_dsub+0x230>
 800240c:	4642      	mov	r2, r8
 800240e:	2400      	movs	r4, #0
 8002410:	2300      	movs	r3, #0
 8002412:	e648      	b.n	80020a6 <__aeabi_dsub+0x146>
 8002414:	2020      	movs	r0, #32
 8002416:	000c      	movs	r4, r1
 8002418:	1a80      	subs	r0, r0, r2
 800241a:	003e      	movs	r6, r7
 800241c:	4087      	lsls	r7, r0
 800241e:	4084      	lsls	r4, r0
 8002420:	40d6      	lsrs	r6, r2
 8002422:	1e78      	subs	r0, r7, #1
 8002424:	4187      	sbcs	r7, r0
 8002426:	40d1      	lsrs	r1, r2
 8002428:	4334      	orrs	r4, r6
 800242a:	433c      	orrs	r4, r7
 800242c:	448c      	add	ip, r1
 800242e:	e7a4      	b.n	800237a <__aeabi_dsub+0x41a>
 8002430:	4a80      	ldr	r2, [pc, #512]	; (8002634 <__aeabi_dsub+0x6d4>)
 8002432:	4290      	cmp	r0, r2
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x4d8>
 8002436:	e0e9      	b.n	800260c <__aeabi_dsub+0x6ac>
 8002438:	19df      	adds	r7, r3, r7
 800243a:	429f      	cmp	r7, r3
 800243c:	419b      	sbcs	r3, r3
 800243e:	4461      	add	r1, ip
 8002440:	425b      	negs	r3, r3
 8002442:	18c9      	adds	r1, r1, r3
 8002444:	07cc      	lsls	r4, r1, #31
 8002446:	087f      	lsrs	r7, r7, #1
 8002448:	084b      	lsrs	r3, r1, #1
 800244a:	4699      	mov	r9, r3
 800244c:	4680      	mov	r8, r0
 800244e:	433c      	orrs	r4, r7
 8002450:	e6f4      	b.n	800223c <__aeabi_dsub+0x2dc>
 8002452:	1afc      	subs	r4, r7, r3
 8002454:	42a7      	cmp	r7, r4
 8002456:	41bf      	sbcs	r7, r7
 8002458:	4663      	mov	r3, ip
 800245a:	427f      	negs	r7, r7
 800245c:	1ac9      	subs	r1, r1, r3
 800245e:	1bcb      	subs	r3, r1, r7
 8002460:	4699      	mov	r9, r3
 8002462:	465d      	mov	r5, fp
 8002464:	e5d5      	b.n	8002012 <__aeabi_dsub+0xb2>
 8002466:	08ff      	lsrs	r7, r7, #3
 8002468:	074b      	lsls	r3, r1, #29
 800246a:	465d      	mov	r5, fp
 800246c:	433b      	orrs	r3, r7
 800246e:	08cc      	lsrs	r4, r1, #3
 8002470:	e6ee      	b.n	8002250 <__aeabi_dsub+0x2f0>
 8002472:	4662      	mov	r2, ip
 8002474:	431a      	orrs	r2, r3
 8002476:	d000      	beq.n	800247a <__aeabi_dsub+0x51a>
 8002478:	e082      	b.n	8002580 <__aeabi_dsub+0x620>
 800247a:	000b      	movs	r3, r1
 800247c:	433b      	orrs	r3, r7
 800247e:	d11b      	bne.n	80024b8 <__aeabi_dsub+0x558>
 8002480:	2480      	movs	r4, #128	; 0x80
 8002482:	2500      	movs	r5, #0
 8002484:	0324      	lsls	r4, r4, #12
 8002486:	e6f9      	b.n	800227c <__aeabi_dsub+0x31c>
 8002488:	19dc      	adds	r4, r3, r7
 800248a:	429c      	cmp	r4, r3
 800248c:	419b      	sbcs	r3, r3
 800248e:	4461      	add	r1, ip
 8002490:	4689      	mov	r9, r1
 8002492:	425b      	negs	r3, r3
 8002494:	4499      	add	r9, r3
 8002496:	464b      	mov	r3, r9
 8002498:	021b      	lsls	r3, r3, #8
 800249a:	d444      	bmi.n	8002526 <__aeabi_dsub+0x5c6>
 800249c:	2301      	movs	r3, #1
 800249e:	4698      	mov	r8, r3
 80024a0:	e6cc      	b.n	800223c <__aeabi_dsub+0x2dc>
 80024a2:	1bdc      	subs	r4, r3, r7
 80024a4:	4662      	mov	r2, ip
 80024a6:	42a3      	cmp	r3, r4
 80024a8:	419b      	sbcs	r3, r3
 80024aa:	1a51      	subs	r1, r2, r1
 80024ac:	425b      	negs	r3, r3
 80024ae:	1acb      	subs	r3, r1, r3
 80024b0:	4699      	mov	r9, r3
 80024b2:	2301      	movs	r3, #1
 80024b4:	4698      	mov	r8, r3
 80024b6:	e5a4      	b.n	8002002 <__aeabi_dsub+0xa2>
 80024b8:	08ff      	lsrs	r7, r7, #3
 80024ba:	074b      	lsls	r3, r1, #29
 80024bc:	465d      	mov	r5, fp
 80024be:	433b      	orrs	r3, r7
 80024c0:	08cc      	lsrs	r4, r1, #3
 80024c2:	e6d7      	b.n	8002274 <__aeabi_dsub+0x314>
 80024c4:	4662      	mov	r2, ip
 80024c6:	431a      	orrs	r2, r3
 80024c8:	0014      	movs	r4, r2
 80024ca:	1e63      	subs	r3, r4, #1
 80024cc:	419c      	sbcs	r4, r3
 80024ce:	e679      	b.n	80021c4 <__aeabi_dsub+0x264>
 80024d0:	0015      	movs	r5, r2
 80024d2:	4664      	mov	r4, ip
 80024d4:	3d20      	subs	r5, #32
 80024d6:	40ec      	lsrs	r4, r5
 80024d8:	46a0      	mov	r8, r4
 80024da:	2a20      	cmp	r2, #32
 80024dc:	d005      	beq.n	80024ea <__aeabi_dsub+0x58a>
 80024de:	2540      	movs	r5, #64	; 0x40
 80024e0:	4664      	mov	r4, ip
 80024e2:	1aaa      	subs	r2, r5, r2
 80024e4:	4094      	lsls	r4, r2
 80024e6:	4323      	orrs	r3, r4
 80024e8:	469a      	mov	sl, r3
 80024ea:	4654      	mov	r4, sl
 80024ec:	1e63      	subs	r3, r4, #1
 80024ee:	419c      	sbcs	r4, r3
 80024f0:	4643      	mov	r3, r8
 80024f2:	4323      	orrs	r3, r4
 80024f4:	e773      	b.n	80023de <__aeabi_dsub+0x47e>
 80024f6:	4662      	mov	r2, ip
 80024f8:	431a      	orrs	r2, r3
 80024fa:	d023      	beq.n	8002544 <__aeabi_dsub+0x5e4>
 80024fc:	000a      	movs	r2, r1
 80024fe:	433a      	orrs	r2, r7
 8002500:	d000      	beq.n	8002504 <__aeabi_dsub+0x5a4>
 8002502:	e0a0      	b.n	8002646 <__aeabi_dsub+0x6e6>
 8002504:	4662      	mov	r2, ip
 8002506:	08db      	lsrs	r3, r3, #3
 8002508:	0752      	lsls	r2, r2, #29
 800250a:	4313      	orrs	r3, r2
 800250c:	4662      	mov	r2, ip
 800250e:	08d4      	lsrs	r4, r2, #3
 8002510:	e6b0      	b.n	8002274 <__aeabi_dsub+0x314>
 8002512:	000b      	movs	r3, r1
 8002514:	433b      	orrs	r3, r7
 8002516:	d100      	bne.n	800251a <__aeabi_dsub+0x5ba>
 8002518:	e728      	b.n	800236c <__aeabi_dsub+0x40c>
 800251a:	08ff      	lsrs	r7, r7, #3
 800251c:	074b      	lsls	r3, r1, #29
 800251e:	465d      	mov	r5, fp
 8002520:	433b      	orrs	r3, r7
 8002522:	08cc      	lsrs	r4, r1, #3
 8002524:	e697      	b.n	8002256 <__aeabi_dsub+0x2f6>
 8002526:	2302      	movs	r3, #2
 8002528:	4698      	mov	r8, r3
 800252a:	e736      	b.n	800239a <__aeabi_dsub+0x43a>
 800252c:	1afc      	subs	r4, r7, r3
 800252e:	42a7      	cmp	r7, r4
 8002530:	41bf      	sbcs	r7, r7
 8002532:	4663      	mov	r3, ip
 8002534:	427f      	negs	r7, r7
 8002536:	1ac9      	subs	r1, r1, r3
 8002538:	1bcb      	subs	r3, r1, r7
 800253a:	4699      	mov	r9, r3
 800253c:	2301      	movs	r3, #1
 800253e:	465d      	mov	r5, fp
 8002540:	4698      	mov	r8, r3
 8002542:	e55e      	b.n	8002002 <__aeabi_dsub+0xa2>
 8002544:	074b      	lsls	r3, r1, #29
 8002546:	08ff      	lsrs	r7, r7, #3
 8002548:	433b      	orrs	r3, r7
 800254a:	08cc      	lsrs	r4, r1, #3
 800254c:	e692      	b.n	8002274 <__aeabi_dsub+0x314>
 800254e:	1bdc      	subs	r4, r3, r7
 8002550:	4660      	mov	r0, ip
 8002552:	42a3      	cmp	r3, r4
 8002554:	41b6      	sbcs	r6, r6
 8002556:	1a40      	subs	r0, r0, r1
 8002558:	4276      	negs	r6, r6
 800255a:	1b80      	subs	r0, r0, r6
 800255c:	4681      	mov	r9, r0
 800255e:	0200      	lsls	r0, r0, #8
 8002560:	d560      	bpl.n	8002624 <__aeabi_dsub+0x6c4>
 8002562:	1afc      	subs	r4, r7, r3
 8002564:	42a7      	cmp	r7, r4
 8002566:	41bf      	sbcs	r7, r7
 8002568:	4663      	mov	r3, ip
 800256a:	427f      	negs	r7, r7
 800256c:	1ac9      	subs	r1, r1, r3
 800256e:	1bcb      	subs	r3, r1, r7
 8002570:	4699      	mov	r9, r3
 8002572:	465d      	mov	r5, fp
 8002574:	e576      	b.n	8002064 <__aeabi_dsub+0x104>
 8002576:	08ff      	lsrs	r7, r7, #3
 8002578:	074b      	lsls	r3, r1, #29
 800257a:	433b      	orrs	r3, r7
 800257c:	08cc      	lsrs	r4, r1, #3
 800257e:	e667      	b.n	8002250 <__aeabi_dsub+0x2f0>
 8002580:	000a      	movs	r2, r1
 8002582:	08db      	lsrs	r3, r3, #3
 8002584:	433a      	orrs	r2, r7
 8002586:	d100      	bne.n	800258a <__aeabi_dsub+0x62a>
 8002588:	e66f      	b.n	800226a <__aeabi_dsub+0x30a>
 800258a:	4662      	mov	r2, ip
 800258c:	0752      	lsls	r2, r2, #29
 800258e:	4313      	orrs	r3, r2
 8002590:	4662      	mov	r2, ip
 8002592:	08d4      	lsrs	r4, r2, #3
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	0312      	lsls	r2, r2, #12
 8002598:	4214      	tst	r4, r2
 800259a:	d007      	beq.n	80025ac <__aeabi_dsub+0x64c>
 800259c:	08c8      	lsrs	r0, r1, #3
 800259e:	4210      	tst	r0, r2
 80025a0:	d104      	bne.n	80025ac <__aeabi_dsub+0x64c>
 80025a2:	465d      	mov	r5, fp
 80025a4:	0004      	movs	r4, r0
 80025a6:	08fb      	lsrs	r3, r7, #3
 80025a8:	0749      	lsls	r1, r1, #29
 80025aa:	430b      	orrs	r3, r1
 80025ac:	0f5a      	lsrs	r2, r3, #29
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	08db      	lsrs	r3, r3, #3
 80025b2:	0752      	lsls	r2, r2, #29
 80025b4:	4313      	orrs	r3, r2
 80025b6:	e65d      	b.n	8002274 <__aeabi_dsub+0x314>
 80025b8:	074b      	lsls	r3, r1, #29
 80025ba:	08ff      	lsrs	r7, r7, #3
 80025bc:	433b      	orrs	r3, r7
 80025be:	08cc      	lsrs	r4, r1, #3
 80025c0:	e649      	b.n	8002256 <__aeabi_dsub+0x2f6>
 80025c2:	19dc      	adds	r4, r3, r7
 80025c4:	429c      	cmp	r4, r3
 80025c6:	419b      	sbcs	r3, r3
 80025c8:	4461      	add	r1, ip
 80025ca:	4689      	mov	r9, r1
 80025cc:	425b      	negs	r3, r3
 80025ce:	4499      	add	r9, r3
 80025d0:	464b      	mov	r3, r9
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	d400      	bmi.n	80025d8 <__aeabi_dsub+0x678>
 80025d6:	e631      	b.n	800223c <__aeabi_dsub+0x2dc>
 80025d8:	464a      	mov	r2, r9
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <__aeabi_dsub+0x6d8>)
 80025dc:	401a      	ands	r2, r3
 80025de:	2301      	movs	r3, #1
 80025e0:	4691      	mov	r9, r2
 80025e2:	4698      	mov	r8, r3
 80025e4:	e62a      	b.n	800223c <__aeabi_dsub+0x2dc>
 80025e6:	0016      	movs	r6, r2
 80025e8:	4664      	mov	r4, ip
 80025ea:	3e20      	subs	r6, #32
 80025ec:	40f4      	lsrs	r4, r6
 80025ee:	46a0      	mov	r8, r4
 80025f0:	2a20      	cmp	r2, #32
 80025f2:	d005      	beq.n	8002600 <__aeabi_dsub+0x6a0>
 80025f4:	2640      	movs	r6, #64	; 0x40
 80025f6:	4664      	mov	r4, ip
 80025f8:	1ab2      	subs	r2, r6, r2
 80025fa:	4094      	lsls	r4, r2
 80025fc:	4323      	orrs	r3, r4
 80025fe:	469a      	mov	sl, r3
 8002600:	4654      	mov	r4, sl
 8002602:	1e63      	subs	r3, r4, #1
 8002604:	419c      	sbcs	r4, r3
 8002606:	4643      	mov	r3, r8
 8002608:	431c      	orrs	r4, r3
 800260a:	e5db      	b.n	80021c4 <__aeabi_dsub+0x264>
 800260c:	0002      	movs	r2, r0
 800260e:	2400      	movs	r4, #0
 8002610:	2300      	movs	r3, #0
 8002612:	e548      	b.n	80020a6 <__aeabi_dsub+0x146>
 8002614:	19dc      	adds	r4, r3, r7
 8002616:	42bc      	cmp	r4, r7
 8002618:	41bf      	sbcs	r7, r7
 800261a:	4461      	add	r1, ip
 800261c:	4689      	mov	r9, r1
 800261e:	427f      	negs	r7, r7
 8002620:	44b9      	add	r9, r7
 8002622:	e738      	b.n	8002496 <__aeabi_dsub+0x536>
 8002624:	464b      	mov	r3, r9
 8002626:	4323      	orrs	r3, r4
 8002628:	d100      	bne.n	800262c <__aeabi_dsub+0x6cc>
 800262a:	e69f      	b.n	800236c <__aeabi_dsub+0x40c>
 800262c:	e606      	b.n	800223c <__aeabi_dsub+0x2dc>
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	000007fe 	.word	0x000007fe
 8002634:	000007ff 	.word	0x000007ff
 8002638:	ff7fffff 	.word	0xff7fffff
 800263c:	08ff      	lsrs	r7, r7, #3
 800263e:	074b      	lsls	r3, r1, #29
 8002640:	433b      	orrs	r3, r7
 8002642:	08cc      	lsrs	r4, r1, #3
 8002644:	e616      	b.n	8002274 <__aeabi_dsub+0x314>
 8002646:	4662      	mov	r2, ip
 8002648:	08db      	lsrs	r3, r3, #3
 800264a:	0752      	lsls	r2, r2, #29
 800264c:	4313      	orrs	r3, r2
 800264e:	4662      	mov	r2, ip
 8002650:	08d4      	lsrs	r4, r2, #3
 8002652:	2280      	movs	r2, #128	; 0x80
 8002654:	0312      	lsls	r2, r2, #12
 8002656:	4214      	tst	r4, r2
 8002658:	d007      	beq.n	800266a <__aeabi_dsub+0x70a>
 800265a:	08c8      	lsrs	r0, r1, #3
 800265c:	4210      	tst	r0, r2
 800265e:	d104      	bne.n	800266a <__aeabi_dsub+0x70a>
 8002660:	465d      	mov	r5, fp
 8002662:	0004      	movs	r4, r0
 8002664:	08fb      	lsrs	r3, r7, #3
 8002666:	0749      	lsls	r1, r1, #29
 8002668:	430b      	orrs	r3, r1
 800266a:	0f5a      	lsrs	r2, r3, #29
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	0752      	lsls	r2, r2, #29
 8002670:	08db      	lsrs	r3, r3, #3
 8002672:	4313      	orrs	r3, r2
 8002674:	e5fe      	b.n	8002274 <__aeabi_dsub+0x314>
 8002676:	2300      	movs	r3, #0
 8002678:	4a01      	ldr	r2, [pc, #4]	; (8002680 <__aeabi_dsub+0x720>)
 800267a:	001c      	movs	r4, r3
 800267c:	e513      	b.n	80020a6 <__aeabi_dsub+0x146>
 800267e:	46c0      	nop			; (mov r8, r8)
 8002680:	000007ff 	.word	0x000007ff

08002684 <__aeabi_d2iz>:
 8002684:	000a      	movs	r2, r1
 8002686:	b530      	push	{r4, r5, lr}
 8002688:	4c13      	ldr	r4, [pc, #76]	; (80026d8 <__aeabi_d2iz+0x54>)
 800268a:	0053      	lsls	r3, r2, #1
 800268c:	0309      	lsls	r1, r1, #12
 800268e:	0005      	movs	r5, r0
 8002690:	0b09      	lsrs	r1, r1, #12
 8002692:	2000      	movs	r0, #0
 8002694:	0d5b      	lsrs	r3, r3, #21
 8002696:	0fd2      	lsrs	r2, r2, #31
 8002698:	42a3      	cmp	r3, r4
 800269a:	dd04      	ble.n	80026a6 <__aeabi_d2iz+0x22>
 800269c:	480f      	ldr	r0, [pc, #60]	; (80026dc <__aeabi_d2iz+0x58>)
 800269e:	4283      	cmp	r3, r0
 80026a0:	dd02      	ble.n	80026a8 <__aeabi_d2iz+0x24>
 80026a2:	4b0f      	ldr	r3, [pc, #60]	; (80026e0 <__aeabi_d2iz+0x5c>)
 80026a4:	18d0      	adds	r0, r2, r3
 80026a6:	bd30      	pop	{r4, r5, pc}
 80026a8:	2080      	movs	r0, #128	; 0x80
 80026aa:	0340      	lsls	r0, r0, #13
 80026ac:	4301      	orrs	r1, r0
 80026ae:	480d      	ldr	r0, [pc, #52]	; (80026e4 <__aeabi_d2iz+0x60>)
 80026b0:	1ac0      	subs	r0, r0, r3
 80026b2:	281f      	cmp	r0, #31
 80026b4:	dd08      	ble.n	80026c8 <__aeabi_d2iz+0x44>
 80026b6:	480c      	ldr	r0, [pc, #48]	; (80026e8 <__aeabi_d2iz+0x64>)
 80026b8:	1ac3      	subs	r3, r0, r3
 80026ba:	40d9      	lsrs	r1, r3
 80026bc:	000b      	movs	r3, r1
 80026be:	4258      	negs	r0, r3
 80026c0:	2a00      	cmp	r2, #0
 80026c2:	d1f0      	bne.n	80026a6 <__aeabi_d2iz+0x22>
 80026c4:	0018      	movs	r0, r3
 80026c6:	e7ee      	b.n	80026a6 <__aeabi_d2iz+0x22>
 80026c8:	4c08      	ldr	r4, [pc, #32]	; (80026ec <__aeabi_d2iz+0x68>)
 80026ca:	40c5      	lsrs	r5, r0
 80026cc:	46a4      	mov	ip, r4
 80026ce:	4463      	add	r3, ip
 80026d0:	4099      	lsls	r1, r3
 80026d2:	000b      	movs	r3, r1
 80026d4:	432b      	orrs	r3, r5
 80026d6:	e7f2      	b.n	80026be <__aeabi_d2iz+0x3a>
 80026d8:	000003fe 	.word	0x000003fe
 80026dc:	0000041d 	.word	0x0000041d
 80026e0:	7fffffff 	.word	0x7fffffff
 80026e4:	00000433 	.word	0x00000433
 80026e8:	00000413 	.word	0x00000413
 80026ec:	fffffbed 	.word	0xfffffbed

080026f0 <__aeabi_i2d>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	2800      	cmp	r0, #0
 80026f4:	d016      	beq.n	8002724 <__aeabi_i2d+0x34>
 80026f6:	17c3      	asrs	r3, r0, #31
 80026f8:	18c5      	adds	r5, r0, r3
 80026fa:	405d      	eors	r5, r3
 80026fc:	0fc4      	lsrs	r4, r0, #31
 80026fe:	0028      	movs	r0, r5
 8002700:	f000 f91c 	bl	800293c <__clzsi2>
 8002704:	4a11      	ldr	r2, [pc, #68]	; (800274c <__aeabi_i2d+0x5c>)
 8002706:	1a12      	subs	r2, r2, r0
 8002708:	280a      	cmp	r0, #10
 800270a:	dc16      	bgt.n	800273a <__aeabi_i2d+0x4a>
 800270c:	0003      	movs	r3, r0
 800270e:	002e      	movs	r6, r5
 8002710:	3315      	adds	r3, #21
 8002712:	409e      	lsls	r6, r3
 8002714:	230b      	movs	r3, #11
 8002716:	1a18      	subs	r0, r3, r0
 8002718:	40c5      	lsrs	r5, r0
 800271a:	0552      	lsls	r2, r2, #21
 800271c:	032d      	lsls	r5, r5, #12
 800271e:	0b2d      	lsrs	r5, r5, #12
 8002720:	0d53      	lsrs	r3, r2, #21
 8002722:	e003      	b.n	800272c <__aeabi_i2d+0x3c>
 8002724:	2400      	movs	r4, #0
 8002726:	2300      	movs	r3, #0
 8002728:	2500      	movs	r5, #0
 800272a:	2600      	movs	r6, #0
 800272c:	051b      	lsls	r3, r3, #20
 800272e:	432b      	orrs	r3, r5
 8002730:	07e4      	lsls	r4, r4, #31
 8002732:	4323      	orrs	r3, r4
 8002734:	0030      	movs	r0, r6
 8002736:	0019      	movs	r1, r3
 8002738:	bd70      	pop	{r4, r5, r6, pc}
 800273a:	380b      	subs	r0, #11
 800273c:	4085      	lsls	r5, r0
 800273e:	0552      	lsls	r2, r2, #21
 8002740:	032d      	lsls	r5, r5, #12
 8002742:	2600      	movs	r6, #0
 8002744:	0b2d      	lsrs	r5, r5, #12
 8002746:	0d53      	lsrs	r3, r2, #21
 8002748:	e7f0      	b.n	800272c <__aeabi_i2d+0x3c>
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	0000041e 	.word	0x0000041e

08002750 <__aeabi_ui2d>:
 8002750:	b510      	push	{r4, lr}
 8002752:	1e04      	subs	r4, r0, #0
 8002754:	d010      	beq.n	8002778 <__aeabi_ui2d+0x28>
 8002756:	f000 f8f1 	bl	800293c <__clzsi2>
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <__aeabi_ui2d+0x48>)
 800275c:	1a1b      	subs	r3, r3, r0
 800275e:	280a      	cmp	r0, #10
 8002760:	dc11      	bgt.n	8002786 <__aeabi_ui2d+0x36>
 8002762:	220b      	movs	r2, #11
 8002764:	0021      	movs	r1, r4
 8002766:	1a12      	subs	r2, r2, r0
 8002768:	40d1      	lsrs	r1, r2
 800276a:	3015      	adds	r0, #21
 800276c:	030a      	lsls	r2, r1, #12
 800276e:	055b      	lsls	r3, r3, #21
 8002770:	4084      	lsls	r4, r0
 8002772:	0b12      	lsrs	r2, r2, #12
 8002774:	0d5b      	lsrs	r3, r3, #21
 8002776:	e001      	b.n	800277c <__aeabi_ui2d+0x2c>
 8002778:	2300      	movs	r3, #0
 800277a:	2200      	movs	r2, #0
 800277c:	051b      	lsls	r3, r3, #20
 800277e:	4313      	orrs	r3, r2
 8002780:	0020      	movs	r0, r4
 8002782:	0019      	movs	r1, r3
 8002784:	bd10      	pop	{r4, pc}
 8002786:	0022      	movs	r2, r4
 8002788:	380b      	subs	r0, #11
 800278a:	4082      	lsls	r2, r0
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	0312      	lsls	r2, r2, #12
 8002790:	2400      	movs	r4, #0
 8002792:	0b12      	lsrs	r2, r2, #12
 8002794:	0d5b      	lsrs	r3, r3, #21
 8002796:	e7f1      	b.n	800277c <__aeabi_ui2d+0x2c>
 8002798:	0000041e 	.word	0x0000041e

0800279c <__aeabi_f2d>:
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	0043      	lsls	r3, r0, #1
 80027a0:	0246      	lsls	r6, r0, #9
 80027a2:	0fc4      	lsrs	r4, r0, #31
 80027a4:	20fe      	movs	r0, #254	; 0xfe
 80027a6:	0e1b      	lsrs	r3, r3, #24
 80027a8:	1c59      	adds	r1, r3, #1
 80027aa:	0a75      	lsrs	r5, r6, #9
 80027ac:	4208      	tst	r0, r1
 80027ae:	d00c      	beq.n	80027ca <__aeabi_f2d+0x2e>
 80027b0:	22e0      	movs	r2, #224	; 0xe0
 80027b2:	0092      	lsls	r2, r2, #2
 80027b4:	4694      	mov	ip, r2
 80027b6:	076d      	lsls	r5, r5, #29
 80027b8:	0b36      	lsrs	r6, r6, #12
 80027ba:	4463      	add	r3, ip
 80027bc:	051b      	lsls	r3, r3, #20
 80027be:	4333      	orrs	r3, r6
 80027c0:	07e4      	lsls	r4, r4, #31
 80027c2:	4323      	orrs	r3, r4
 80027c4:	0028      	movs	r0, r5
 80027c6:	0019      	movs	r1, r3
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d114      	bne.n	80027f8 <__aeabi_f2d+0x5c>
 80027ce:	2d00      	cmp	r5, #0
 80027d0:	d01b      	beq.n	800280a <__aeabi_f2d+0x6e>
 80027d2:	0028      	movs	r0, r5
 80027d4:	f000 f8b2 	bl	800293c <__clzsi2>
 80027d8:	280a      	cmp	r0, #10
 80027da:	dc1c      	bgt.n	8002816 <__aeabi_f2d+0x7a>
 80027dc:	230b      	movs	r3, #11
 80027de:	002e      	movs	r6, r5
 80027e0:	1a1b      	subs	r3, r3, r0
 80027e2:	40de      	lsrs	r6, r3
 80027e4:	0003      	movs	r3, r0
 80027e6:	3315      	adds	r3, #21
 80027e8:	409d      	lsls	r5, r3
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <__aeabi_f2d+0x88>)
 80027ec:	0336      	lsls	r6, r6, #12
 80027ee:	1a12      	subs	r2, r2, r0
 80027f0:	0552      	lsls	r2, r2, #21
 80027f2:	0b36      	lsrs	r6, r6, #12
 80027f4:	0d53      	lsrs	r3, r2, #21
 80027f6:	e7e1      	b.n	80027bc <__aeabi_f2d+0x20>
 80027f8:	2d00      	cmp	r5, #0
 80027fa:	d009      	beq.n	8002810 <__aeabi_f2d+0x74>
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	0b36      	lsrs	r6, r6, #12
 8002800:	0312      	lsls	r2, r2, #12
 8002802:	4b09      	ldr	r3, [pc, #36]	; (8002828 <__aeabi_f2d+0x8c>)
 8002804:	076d      	lsls	r5, r5, #29
 8002806:	4316      	orrs	r6, r2
 8002808:	e7d8      	b.n	80027bc <__aeabi_f2d+0x20>
 800280a:	2300      	movs	r3, #0
 800280c:	2600      	movs	r6, #0
 800280e:	e7d5      	b.n	80027bc <__aeabi_f2d+0x20>
 8002810:	2600      	movs	r6, #0
 8002812:	4b05      	ldr	r3, [pc, #20]	; (8002828 <__aeabi_f2d+0x8c>)
 8002814:	e7d2      	b.n	80027bc <__aeabi_f2d+0x20>
 8002816:	0003      	movs	r3, r0
 8002818:	3b0b      	subs	r3, #11
 800281a:	409d      	lsls	r5, r3
 800281c:	002e      	movs	r6, r5
 800281e:	2500      	movs	r5, #0
 8002820:	e7e3      	b.n	80027ea <__aeabi_f2d+0x4e>
 8002822:	46c0      	nop			; (mov r8, r8)
 8002824:	00000389 	.word	0x00000389
 8002828:	000007ff 	.word	0x000007ff

0800282c <__aeabi_d2f>:
 800282c:	0002      	movs	r2, r0
 800282e:	004b      	lsls	r3, r1, #1
 8002830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002832:	0d5b      	lsrs	r3, r3, #21
 8002834:	030c      	lsls	r4, r1, #12
 8002836:	4e3d      	ldr	r6, [pc, #244]	; (800292c <__aeabi_d2f+0x100>)
 8002838:	0a64      	lsrs	r4, r4, #9
 800283a:	0f40      	lsrs	r0, r0, #29
 800283c:	1c5f      	adds	r7, r3, #1
 800283e:	0fc9      	lsrs	r1, r1, #31
 8002840:	4304      	orrs	r4, r0
 8002842:	00d5      	lsls	r5, r2, #3
 8002844:	4237      	tst	r7, r6
 8002846:	d00a      	beq.n	800285e <__aeabi_d2f+0x32>
 8002848:	4839      	ldr	r0, [pc, #228]	; (8002930 <__aeabi_d2f+0x104>)
 800284a:	181e      	adds	r6, r3, r0
 800284c:	2efe      	cmp	r6, #254	; 0xfe
 800284e:	dd16      	ble.n	800287e <__aeabi_d2f+0x52>
 8002850:	20ff      	movs	r0, #255	; 0xff
 8002852:	2400      	movs	r4, #0
 8002854:	05c0      	lsls	r0, r0, #23
 8002856:	4320      	orrs	r0, r4
 8002858:	07c9      	lsls	r1, r1, #31
 800285a:	4308      	orrs	r0, r1
 800285c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <__aeabi_d2f+0x44>
 8002862:	432c      	orrs	r4, r5
 8002864:	d026      	beq.n	80028b4 <__aeabi_d2f+0x88>
 8002866:	2205      	movs	r2, #5
 8002868:	0192      	lsls	r2, r2, #6
 800286a:	0a54      	lsrs	r4, r2, #9
 800286c:	b2d8      	uxtb	r0, r3
 800286e:	e7f1      	b.n	8002854 <__aeabi_d2f+0x28>
 8002870:	4325      	orrs	r5, r4
 8002872:	d0ed      	beq.n	8002850 <__aeabi_d2f+0x24>
 8002874:	2080      	movs	r0, #128	; 0x80
 8002876:	03c0      	lsls	r0, r0, #15
 8002878:	4304      	orrs	r4, r0
 800287a:	20ff      	movs	r0, #255	; 0xff
 800287c:	e7ea      	b.n	8002854 <__aeabi_d2f+0x28>
 800287e:	2e00      	cmp	r6, #0
 8002880:	dd1b      	ble.n	80028ba <__aeabi_d2f+0x8e>
 8002882:	0192      	lsls	r2, r2, #6
 8002884:	1e53      	subs	r3, r2, #1
 8002886:	419a      	sbcs	r2, r3
 8002888:	00e4      	lsls	r4, r4, #3
 800288a:	0f6d      	lsrs	r5, r5, #29
 800288c:	4322      	orrs	r2, r4
 800288e:	432a      	orrs	r2, r5
 8002890:	0753      	lsls	r3, r2, #29
 8002892:	d048      	beq.n	8002926 <__aeabi_d2f+0xfa>
 8002894:	230f      	movs	r3, #15
 8002896:	4013      	ands	r3, r2
 8002898:	2b04      	cmp	r3, #4
 800289a:	d000      	beq.n	800289e <__aeabi_d2f+0x72>
 800289c:	3204      	adds	r2, #4
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	04db      	lsls	r3, r3, #19
 80028a2:	4013      	ands	r3, r2
 80028a4:	d03f      	beq.n	8002926 <__aeabi_d2f+0xfa>
 80028a6:	1c70      	adds	r0, r6, #1
 80028a8:	2efe      	cmp	r6, #254	; 0xfe
 80028aa:	d0d1      	beq.n	8002850 <__aeabi_d2f+0x24>
 80028ac:	0192      	lsls	r2, r2, #6
 80028ae:	0a54      	lsrs	r4, r2, #9
 80028b0:	b2c0      	uxtb	r0, r0
 80028b2:	e7cf      	b.n	8002854 <__aeabi_d2f+0x28>
 80028b4:	2000      	movs	r0, #0
 80028b6:	2400      	movs	r4, #0
 80028b8:	e7cc      	b.n	8002854 <__aeabi_d2f+0x28>
 80028ba:	0032      	movs	r2, r6
 80028bc:	3217      	adds	r2, #23
 80028be:	db22      	blt.n	8002906 <__aeabi_d2f+0xda>
 80028c0:	2080      	movs	r0, #128	; 0x80
 80028c2:	0400      	lsls	r0, r0, #16
 80028c4:	4320      	orrs	r0, r4
 80028c6:	241e      	movs	r4, #30
 80028c8:	1ba4      	subs	r4, r4, r6
 80028ca:	2c1f      	cmp	r4, #31
 80028cc:	dd1d      	ble.n	800290a <__aeabi_d2f+0xde>
 80028ce:	2202      	movs	r2, #2
 80028d0:	4252      	negs	r2, r2
 80028d2:	1b96      	subs	r6, r2, r6
 80028d4:	0002      	movs	r2, r0
 80028d6:	40f2      	lsrs	r2, r6
 80028d8:	0016      	movs	r6, r2
 80028da:	2c20      	cmp	r4, #32
 80028dc:	d004      	beq.n	80028e8 <__aeabi_d2f+0xbc>
 80028de:	4a15      	ldr	r2, [pc, #84]	; (8002934 <__aeabi_d2f+0x108>)
 80028e0:	4694      	mov	ip, r2
 80028e2:	4463      	add	r3, ip
 80028e4:	4098      	lsls	r0, r3
 80028e6:	4305      	orrs	r5, r0
 80028e8:	002a      	movs	r2, r5
 80028ea:	1e53      	subs	r3, r2, #1
 80028ec:	419a      	sbcs	r2, r3
 80028ee:	4332      	orrs	r2, r6
 80028f0:	2600      	movs	r6, #0
 80028f2:	0753      	lsls	r3, r2, #29
 80028f4:	d1ce      	bne.n	8002894 <__aeabi_d2f+0x68>
 80028f6:	2480      	movs	r4, #128	; 0x80
 80028f8:	0013      	movs	r3, r2
 80028fa:	04e4      	lsls	r4, r4, #19
 80028fc:	2001      	movs	r0, #1
 80028fe:	4023      	ands	r3, r4
 8002900:	4222      	tst	r2, r4
 8002902:	d1d3      	bne.n	80028ac <__aeabi_d2f+0x80>
 8002904:	e7b0      	b.n	8002868 <__aeabi_d2f+0x3c>
 8002906:	2300      	movs	r3, #0
 8002908:	e7ad      	b.n	8002866 <__aeabi_d2f+0x3a>
 800290a:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <__aeabi_d2f+0x10c>)
 800290c:	4694      	mov	ip, r2
 800290e:	002a      	movs	r2, r5
 8002910:	40e2      	lsrs	r2, r4
 8002912:	0014      	movs	r4, r2
 8002914:	002a      	movs	r2, r5
 8002916:	4463      	add	r3, ip
 8002918:	409a      	lsls	r2, r3
 800291a:	4098      	lsls	r0, r3
 800291c:	1e55      	subs	r5, r2, #1
 800291e:	41aa      	sbcs	r2, r5
 8002920:	4302      	orrs	r2, r0
 8002922:	4322      	orrs	r2, r4
 8002924:	e7e4      	b.n	80028f0 <__aeabi_d2f+0xc4>
 8002926:	0033      	movs	r3, r6
 8002928:	e79e      	b.n	8002868 <__aeabi_d2f+0x3c>
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	000007fe 	.word	0x000007fe
 8002930:	fffffc80 	.word	0xfffffc80
 8002934:	fffffca2 	.word	0xfffffca2
 8002938:	fffffc82 	.word	0xfffffc82

0800293c <__clzsi2>:
 800293c:	211c      	movs	r1, #28
 800293e:	2301      	movs	r3, #1
 8002940:	041b      	lsls	r3, r3, #16
 8002942:	4298      	cmp	r0, r3
 8002944:	d301      	bcc.n	800294a <__clzsi2+0xe>
 8002946:	0c00      	lsrs	r0, r0, #16
 8002948:	3910      	subs	r1, #16
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	4298      	cmp	r0, r3
 800294e:	d301      	bcc.n	8002954 <__clzsi2+0x18>
 8002950:	0a00      	lsrs	r0, r0, #8
 8002952:	3908      	subs	r1, #8
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	4298      	cmp	r0, r3
 8002958:	d301      	bcc.n	800295e <__clzsi2+0x22>
 800295a:	0900      	lsrs	r0, r0, #4
 800295c:	3904      	subs	r1, #4
 800295e:	a202      	add	r2, pc, #8	; (adr r2, 8002968 <__clzsi2+0x2c>)
 8002960:	5c10      	ldrb	r0, [r2, r0]
 8002962:	1840      	adds	r0, r0, r1
 8002964:	4770      	bx	lr
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	02020304 	.word	0x02020304
 800296c:	01010101 	.word	0x01010101
	...

08002978 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	0004      	movs	r4, r0
 8002980:	0008      	movs	r0, r1
 8002982:	0011      	movs	r1, r2
 8002984:	1dbb      	adds	r3, r7, #6
 8002986:	1c22      	adds	r2, r4, #0
 8002988:	801a      	strh	r2, [r3, #0]
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	1c02      	adds	r2, r0, #0
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	1cbb      	adds	r3, r7, #2
 8002992:	1c0a      	adds	r2, r1, #0
 8002994:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(x, y, color);
 8002996:	1dbb      	adds	r3, r7, #6
 8002998:	8818      	ldrh	r0, [r3, #0]
 800299a:	1d3b      	adds	r3, r7, #4
 800299c:	8819      	ldrh	r1, [r3, #0]
 800299e:	1cbb      	adds	r3, r7, #2
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	001a      	movs	r2, r3
 80029a4:	f001 fb30 	bl	8004008 <ST7735_DrawPixel>
}
 80029a8:	46c0      	nop			; (mov r8, r8)
 80029aa:	46bd      	mov	sp, r7
 80029ac:	b003      	add	sp, #12
 80029ae:	bd90      	pop	{r4, r7, pc}

080029b0 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	0005      	movs	r5, r0
 80029b8:	000c      	movs	r4, r1
 80029ba:	0010      	movs	r0, r2
 80029bc:	0019      	movs	r1, r3
 80029be:	1dbb      	adds	r3, r7, #6
 80029c0:	1c2a      	adds	r2, r5, #0
 80029c2:	801a      	strh	r2, [r3, #0]
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	1c22      	adds	r2, r4, #0
 80029c8:	801a      	strh	r2, [r3, #0]
 80029ca:	1cbb      	adds	r3, r7, #2
 80029cc:	1c02      	adds	r2, r0, #0
 80029ce:	801a      	strh	r2, [r3, #0]
 80029d0:	003b      	movs	r3, r7
 80029d2:	1c0a      	adds	r2, r1, #0
 80029d4:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80029d6:	1dbb      	adds	r3, r7, #6
 80029d8:	8818      	ldrh	r0, [r3, #0]
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	8819      	ldrh	r1, [r3, #0]
 80029de:	1cbb      	adds	r3, r7, #2
 80029e0:	881a      	ldrh	r2, [r3, #0]
 80029e2:	003b      	movs	r3, r7
 80029e4:	881c      	ldrh	r4, [r3, #0]
 80029e6:	2318      	movs	r3, #24
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	0023      	movs	r3, r4
 80029f0:	f001 fc86 	bl	8004300 <ST7735_FillRectangle>
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b002      	add	sp, #8
 80029fa:	bdb0      	pop	{r4, r5, r7, pc}

080029fc <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	0004      	movs	r4, r0
 8002a04:	0008      	movs	r0, r1
 8002a06:	0011      	movs	r1, r2
 8002a08:	1dbb      	adds	r3, r7, #6
 8002a0a:	1c22      	adds	r2, r4, #0
 8002a0c:	801a      	strh	r2, [r3, #0]
 8002a0e:	1d3b      	adds	r3, r7, #4
 8002a10:	1c02      	adds	r2, r0, #0
 8002a12:	801a      	strh	r2, [r3, #0]
 8002a14:	1cbb      	adds	r3, r7, #2
 8002a16:	1c0a      	adds	r2, r1, #0
 8002a18:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8002a1a:	1cbb      	adds	r3, r7, #2
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	2100      	movs	r1, #0
 8002a22:	5e59      	ldrsh	r1, [r3, r1]
 8002a24:	1dbb      	adds	r3, r7, #6
 8002a26:	2000      	movs	r0, #0
 8002a28:	5e1b      	ldrsh	r3, [r3, r0]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff ffa4 	bl	8002978 <drawPixel>
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b003      	add	sp, #12
 8002a36:	bd90      	pop	{r4, r7, pc}

08002a38 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002a38:	b5b0      	push	{r4, r5, r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	0005      	movs	r5, r0
 8002a40:	000c      	movs	r4, r1
 8002a42:	0010      	movs	r0, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	1dbb      	adds	r3, r7, #6
 8002a48:	1c2a      	adds	r2, r5, #0
 8002a4a:	801a      	strh	r2, [r3, #0]
 8002a4c:	1d3b      	adds	r3, r7, #4
 8002a4e:	1c22      	adds	r2, r4, #0
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	1cbb      	adds	r3, r7, #2
 8002a54:	1c02      	adds	r2, r0, #0
 8002a56:	801a      	strh	r2, [r3, #0]
 8002a58:	003b      	movs	r3, r7
 8002a5a:	1c0a      	adds	r2, r1, #0
 8002a5c:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8002a5e:	003b      	movs	r3, r7
 8002a60:	2200      	movs	r2, #0
 8002a62:	5e9a      	ldrsh	r2, [r3, r2]
 8002a64:	1d3b      	adds	r3, r7, #4
 8002a66:	2100      	movs	r1, #0
 8002a68:	5e5b      	ldrsh	r3, [r3, r1]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	17d9      	asrs	r1, r3, #31
 8002a6e:	185a      	adds	r2, r3, r1
 8002a70:	404a      	eors	r2, r1
 8002a72:	1cbb      	adds	r3, r7, #2
 8002a74:	2100      	movs	r1, #0
 8002a76:	5e59      	ldrsh	r1, [r3, r1]
 8002a78:	1dbb      	adds	r3, r7, #6
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	5e1b      	ldrsh	r3, [r3, r0]
 8002a7e:	1acb      	subs	r3, r1, r3
 8002a80:	17d9      	asrs	r1, r3, #31
 8002a82:	185b      	adds	r3, r3, r1
 8002a84:	404b      	eors	r3, r1
 8002a86:	2101      	movs	r1, #1
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dc01      	bgt.n	8002a90 <writeLine+0x58>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	1c19      	adds	r1, r3, #0
 8002a90:	b2ca      	uxtb	r2, r1
 8002a92:	211a      	movs	r1, #26
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	5e9b      	ldrsh	r3, [r3, r2]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d019      	beq.n	8002ad6 <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 8002aa2:	2118      	movs	r1, #24
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	1dba      	adds	r2, r7, #6
 8002aa8:	8812      	ldrh	r2, [r2, #0]
 8002aaa:	801a      	strh	r2, [r3, #0]
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	1d3a      	adds	r2, r7, #4
 8002ab0:	8812      	ldrh	r2, [r2, #0]
 8002ab2:	801a      	strh	r2, [r3, #0]
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	187a      	adds	r2, r7, r1
 8002ab8:	8812      	ldrh	r2, [r2, #0]
 8002aba:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8002abc:	2116      	movs	r1, #22
 8002abe:	187b      	adds	r3, r7, r1
 8002ac0:	1cba      	adds	r2, r7, #2
 8002ac2:	8812      	ldrh	r2, [r2, #0]
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	1cbb      	adds	r3, r7, #2
 8002ac8:	003a      	movs	r2, r7
 8002aca:	8812      	ldrh	r2, [r2, #0]
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	003b      	movs	r3, r7
 8002ad0:	187a      	adds	r2, r7, r1
 8002ad2:	8812      	ldrh	r2, [r2, #0]
 8002ad4:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 8002ad6:	1dba      	adds	r2, r7, #6
 8002ad8:	1cbb      	adds	r3, r7, #2
 8002ada:	2100      	movs	r1, #0
 8002adc:	5e52      	ldrsh	r2, [r2, r1]
 8002ade:	2100      	movs	r1, #0
 8002ae0:	5e5b      	ldrsh	r3, [r3, r1]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	dd19      	ble.n	8002b1a <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 8002ae6:	2114      	movs	r1, #20
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	1dba      	adds	r2, r7, #6
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	801a      	strh	r2, [r3, #0]
 8002af0:	1dbb      	adds	r3, r7, #6
 8002af2:	1cba      	adds	r2, r7, #2
 8002af4:	8812      	ldrh	r2, [r2, #0]
 8002af6:	801a      	strh	r2, [r3, #0]
 8002af8:	1cbb      	adds	r3, r7, #2
 8002afa:	187a      	adds	r2, r7, r1
 8002afc:	8812      	ldrh	r2, [r2, #0]
 8002afe:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8002b00:	2112      	movs	r1, #18
 8002b02:	187b      	adds	r3, r7, r1
 8002b04:	1d3a      	adds	r2, r7, #4
 8002b06:	8812      	ldrh	r2, [r2, #0]
 8002b08:	801a      	strh	r2, [r3, #0]
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	003a      	movs	r2, r7
 8002b0e:	8812      	ldrh	r2, [r2, #0]
 8002b10:	801a      	strh	r2, [r3, #0]
 8002b12:	003b      	movs	r3, r7
 8002b14:	187a      	adds	r2, r7, r1
 8002b16:	8812      	ldrh	r2, [r2, #0]
 8002b18:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8002b1a:	1cbb      	adds	r3, r7, #2
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	1dbb      	adds	r3, r7, #6
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	2110      	movs	r1, #16
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 8002b2c:	003b      	movs	r3, r7
 8002b2e:	2200      	movs	r2, #0
 8002b30:	5e9a      	ldrsh	r2, [r3, r2]
 8002b32:	1d3b      	adds	r3, r7, #4
 8002b34:	2000      	movs	r0, #0
 8002b36:	5e1b      	ldrsh	r3, [r3, r0]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	17d8      	asrs	r0, r3, #31
 8002b3c:	181a      	adds	r2, r3, r0
 8002b3e:	4042      	eors	r2, r0
 8002b40:	230e      	movs	r3, #14
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 8002b46:	231e      	movs	r3, #30
 8002b48:	18fa      	adds	r2, r7, r3
 8002b4a:	187b      	adds	r3, r7, r1
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	5e5b      	ldrsh	r3, [r3, r1]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	da00      	bge.n	8002b56 <writeLine+0x11e>
 8002b54:	3301      	adds	r3, #1
 8002b56:	105b      	asrs	r3, r3, #1
 8002b58:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 8002b5a:	1d3a      	adds	r2, r7, #4
 8002b5c:	003b      	movs	r3, r7
 8002b5e:	2100      	movs	r1, #0
 8002b60:	5e52      	ldrsh	r2, [r2, r1]
 8002b62:	2100      	movs	r1, #0
 8002b64:	5e5b      	ldrsh	r3, [r3, r1]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	da04      	bge.n	8002b74 <writeLine+0x13c>
        ystep = 1;
 8002b6a:	231c      	movs	r3, #28
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	2201      	movs	r2, #1
 8002b70:	801a      	strh	r2, [r3, #0]
 8002b72:	e04d      	b.n	8002c10 <writeLine+0x1d8>
    } else {
        ystep = -1;
 8002b74:	231c      	movs	r3, #28
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4252      	negs	r2, r2
 8002b7c:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 8002b7e:	e047      	b.n	8002c10 <writeLine+0x1d8>
        if (steep) {
 8002b80:	231a      	movs	r3, #26
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	2200      	movs	r2, #0
 8002b86:	5e9b      	ldrsh	r3, [r3, r2]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00c      	beq.n	8002ba6 <writeLine+0x16e>
            writePixel(y0, x0, color);
 8002b8c:	2330      	movs	r3, #48	; 0x30
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	881a      	ldrh	r2, [r3, #0]
 8002b92:	1dbb      	adds	r3, r7, #6
 8002b94:	2100      	movs	r1, #0
 8002b96:	5e59      	ldrsh	r1, [r3, r1]
 8002b98:	1d3b      	adds	r3, r7, #4
 8002b9a:	2000      	movs	r0, #0
 8002b9c:	5e1b      	ldrsh	r3, [r3, r0]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7ff ff2c 	bl	80029fc <writePixel>
 8002ba4:	e00b      	b.n	8002bbe <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 8002ba6:	2330      	movs	r3, #48	; 0x30
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	881a      	ldrh	r2, [r3, #0]
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5e59      	ldrsh	r1, [r3, r1]
 8002bb2:	1dbb      	adds	r3, r7, #6
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	5e1b      	ldrsh	r3, [r3, r0]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff ff1f 	bl	80029fc <writePixel>
        }
        err -= dy;
 8002bbe:	211e      	movs	r1, #30
 8002bc0:	187b      	adds	r3, r7, r1
 8002bc2:	881a      	ldrh	r2, [r3, #0]
 8002bc4:	230e      	movs	r3, #14
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	5e9b      	ldrsh	r3, [r3, r2]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da11      	bge.n	8002c00 <writeLine+0x1c8>
            y0 += ystep;
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	881a      	ldrh	r2, [r3, #0]
 8002be0:	231c      	movs	r3, #28
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	18d3      	adds	r3, r2, r3
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	801a      	strh	r2, [r3, #0]
            err += dx;
 8002bee:	187b      	adds	r3, r7, r1
 8002bf0:	881a      	ldrh	r2, [r3, #0]
 8002bf2:	2310      	movs	r3, #16
 8002bf4:	18fb      	adds	r3, r7, r3
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	18d3      	adds	r3, r2, r3
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8002c00:	1dbb      	adds	r3, r7, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	5e9b      	ldrsh	r3, [r3, r2]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	3301      	adds	r3, #1
 8002c0a:	b29a      	uxth	r2, r3
 8002c0c:	1dbb      	adds	r3, r7, #6
 8002c0e:	801a      	strh	r2, [r3, #0]
 8002c10:	1dba      	adds	r2, r7, #6
 8002c12:	1cbb      	adds	r3, r7, #2
 8002c14:	2100      	movs	r1, #0
 8002c16:	5e52      	ldrsh	r2, [r2, r1]
 8002c18:	2100      	movs	r1, #0
 8002c1a:	5e5b      	ldrsh	r3, [r3, r1]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	ddaf      	ble.n	8002b80 <writeLine+0x148>
        }
    }
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46c0      	nop			; (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b008      	add	sp, #32
 8002c28:	bdb0      	pop	{r4, r5, r7, pc}

08002c2a <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8002c2a:	b5b0      	push	{r4, r5, r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af02      	add	r7, sp, #8
 8002c30:	0005      	movs	r5, r0
 8002c32:	000c      	movs	r4, r1
 8002c34:	0010      	movs	r0, r2
 8002c36:	0019      	movs	r1, r3
 8002c38:	1dbb      	adds	r3, r7, #6
 8002c3a:	1c2a      	adds	r2, r5, #0
 8002c3c:	801a      	strh	r2, [r3, #0]
 8002c3e:	1d3b      	adds	r3, r7, #4
 8002c40:	1c22      	adds	r2, r4, #0
 8002c42:	801a      	strh	r2, [r3, #0]
 8002c44:	1cbb      	adds	r3, r7, #2
 8002c46:	1c02      	adds	r2, r0, #0
 8002c48:	801a      	strh	r2, [r3, #0]
 8002c4a:	003b      	movs	r3, r7
 8002c4c:	1c0a      	adds	r2, r1, #0
 8002c4e:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	1cbb      	adds	r3, r7, #2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	18d3      	adds	r3, r2, r3
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	b21c      	sxth	r4, r3
 8002c62:	1dbb      	adds	r3, r7, #6
 8002c64:	2200      	movs	r2, #0
 8002c66:	5e9a      	ldrsh	r2, [r3, r2]
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	5e59      	ldrsh	r1, [r3, r1]
 8002c6e:	1dbb      	adds	r3, r7, #6
 8002c70:	2000      	movs	r0, #0
 8002c72:	5e18      	ldrsh	r0, [r3, r0]
 8002c74:	003b      	movs	r3, r7
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	0023      	movs	r3, r4
 8002c7c:	f7ff fedc 	bl	8002a38 <writeLine>
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	b002      	add	sp, #8
 8002c86:	bdb0      	pop	{r4, r5, r7, pc}

08002c88 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	0005      	movs	r5, r0
 8002c90:	000c      	movs	r4, r1
 8002c92:	0010      	movs	r0, r2
 8002c94:	0019      	movs	r1, r3
 8002c96:	1dbb      	adds	r3, r7, #6
 8002c98:	1c2a      	adds	r2, r5, #0
 8002c9a:	801a      	strh	r2, [r3, #0]
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	1c22      	adds	r2, r4, #0
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	1cbb      	adds	r3, r7, #2
 8002ca4:	1c02      	adds	r2, r0, #0
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	003b      	movs	r3, r7
 8002caa:	1c0a      	adds	r2, r1, #0
 8002cac:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8002cae:	1dbb      	adds	r3, r7, #6
 8002cb0:	881a      	ldrh	r2, [r3, #0]
 8002cb2:	1cbb      	adds	r3, r7, #2
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	18d3      	adds	r3, r2, r3
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	b21a      	sxth	r2, r3
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	2400      	movs	r4, #0
 8002cc4:	5f1c      	ldrsh	r4, [r3, r4]
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5e59      	ldrsh	r1, [r3, r1]
 8002ccc:	1dbb      	adds	r3, r7, #6
 8002cce:	2000      	movs	r0, #0
 8002cd0:	5e18      	ldrsh	r0, [r3, r0]
 8002cd2:	003b      	movs	r3, r7
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	0023      	movs	r3, r4
 8002cda:	f7ff fead 	bl	8002a38 <writeLine>
}
 8002cde:	46c0      	nop			; (mov r8, r8)
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	b002      	add	sp, #8
 8002ce4:	bdb0      	pop	{r4, r5, r7, pc}

08002ce6 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002ce6:	b5b0      	push	{r4, r5, r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af02      	add	r7, sp, #8
 8002cec:	0005      	movs	r5, r0
 8002cee:	000c      	movs	r4, r1
 8002cf0:	0010      	movs	r0, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	1dbb      	adds	r3, r7, #6
 8002cf6:	1c2a      	adds	r2, r5, #0
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	1c22      	adds	r2, r4, #0
 8002cfe:	801a      	strh	r2, [r3, #0]
 8002d00:	1cbb      	adds	r3, r7, #2
 8002d02:	1c02      	adds	r2, r0, #0
 8002d04:	801a      	strh	r2, [r3, #0]
 8002d06:	003b      	movs	r3, r7
 8002d08:	1c0a      	adds	r2, r1, #0
 8002d0a:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8002d0c:	1dba      	adds	r2, r7, #6
 8002d0e:	1cbb      	adds	r3, r7, #2
 8002d10:	2100      	movs	r1, #0
 8002d12:	5e52      	ldrsh	r2, [r2, r1]
 8002d14:	2100      	movs	r1, #0
 8002d16:	5e5b      	ldrsh	r3, [r3, r1]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d12a      	bne.n	8002d72 <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8002d1c:	1d3a      	adds	r2, r7, #4
 8002d1e:	003b      	movs	r3, r7
 8002d20:	2100      	movs	r1, #0
 8002d22:	5e52      	ldrsh	r2, [r2, r1]
 8002d24:	2100      	movs	r1, #0
 8002d26:	5e5b      	ldrsh	r3, [r3, r1]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dd0c      	ble.n	8002d46 <drawLine+0x60>
 8002d2c:	210c      	movs	r1, #12
 8002d2e:	187b      	adds	r3, r7, r1
 8002d30:	1d3a      	adds	r2, r7, #4
 8002d32:	8812      	ldrh	r2, [r2, #0]
 8002d34:	801a      	strh	r2, [r3, #0]
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	003a      	movs	r2, r7
 8002d3a:	8812      	ldrh	r2, [r2, #0]
 8002d3c:	801a      	strh	r2, [r3, #0]
 8002d3e:	003b      	movs	r3, r7
 8002d40:	187a      	adds	r2, r7, r1
 8002d42:	8812      	ldrh	r2, [r2, #0]
 8002d44:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 8002d46:	003b      	movs	r3, r7
 8002d48:	881a      	ldrh	r2, [r3, #0]
 8002d4a:	1d3b      	adds	r3, r7, #4
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	b21a      	sxth	r2, r3
 8002d58:	2320      	movs	r3, #32
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	881c      	ldrh	r4, [r3, #0]
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	2100      	movs	r1, #0
 8002d62:	5e59      	ldrsh	r1, [r3, r1]
 8002d64:	1dbb      	adds	r3, r7, #6
 8002d66:	2000      	movs	r0, #0
 8002d68:	5e18      	ldrsh	r0, [r3, r0]
 8002d6a:	0023      	movs	r3, r4
 8002d6c:	f7ff ff5d 	bl	8002c2a <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 8002d70:	e045      	b.n	8002dfe <drawLine+0x118>
    } else if(y0 == y1){
 8002d72:	1d3a      	adds	r2, r7, #4
 8002d74:	003b      	movs	r3, r7
 8002d76:	2100      	movs	r1, #0
 8002d78:	5e52      	ldrsh	r2, [r2, r1]
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	5e5b      	ldrsh	r3, [r3, r1]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d12a      	bne.n	8002dd8 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8002d82:	1dba      	adds	r2, r7, #6
 8002d84:	1cbb      	adds	r3, r7, #2
 8002d86:	2100      	movs	r1, #0
 8002d88:	5e52      	ldrsh	r2, [r2, r1]
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	5e5b      	ldrsh	r3, [r3, r1]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	dd0c      	ble.n	8002dac <drawLine+0xc6>
 8002d92:	210e      	movs	r1, #14
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	1dba      	adds	r2, r7, #6
 8002d98:	8812      	ldrh	r2, [r2, #0]
 8002d9a:	801a      	strh	r2, [r3, #0]
 8002d9c:	1dbb      	adds	r3, r7, #6
 8002d9e:	1cba      	adds	r2, r7, #2
 8002da0:	8812      	ldrh	r2, [r2, #0]
 8002da2:	801a      	strh	r2, [r3, #0]
 8002da4:	1cbb      	adds	r3, r7, #2
 8002da6:	187a      	adds	r2, r7, r1
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8002dac:	1cbb      	adds	r3, r7, #2
 8002dae:	881a      	ldrh	r2, [r3, #0]
 8002db0:	1dbb      	adds	r3, r7, #6
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b21a      	sxth	r2, r3
 8002dbe:	2320      	movs	r3, #32
 8002dc0:	18fb      	adds	r3, r7, r3
 8002dc2:	881c      	ldrh	r4, [r3, #0]
 8002dc4:	1d3b      	adds	r3, r7, #4
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	5e59      	ldrsh	r1, [r3, r1]
 8002dca:	1dbb      	adds	r3, r7, #6
 8002dcc:	2000      	movs	r0, #0
 8002dce:	5e18      	ldrsh	r0, [r3, r0]
 8002dd0:	0023      	movs	r3, r4
 8002dd2:	f7ff ff59 	bl	8002c88 <drawFastHLine>
}
 8002dd6:	e012      	b.n	8002dfe <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8002dd8:	003b      	movs	r3, r7
 8002dda:	2400      	movs	r4, #0
 8002ddc:	5f1c      	ldrsh	r4, [r3, r4]
 8002dde:	1cbb      	adds	r3, r7, #2
 8002de0:	2200      	movs	r2, #0
 8002de2:	5e9a      	ldrsh	r2, [r3, r2]
 8002de4:	1d3b      	adds	r3, r7, #4
 8002de6:	2100      	movs	r1, #0
 8002de8:	5e59      	ldrsh	r1, [r3, r1]
 8002dea:	1dbb      	adds	r3, r7, #6
 8002dec:	2000      	movs	r0, #0
 8002dee:	5e18      	ldrsh	r0, [r3, r0]
 8002df0:	2320      	movs	r3, #32
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	881b      	ldrh	r3, [r3, #0]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	0023      	movs	r3, r4
 8002dfa:	f7ff fe1d 	bl	8002a38 <writeLine>
}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	46bd      	mov	sp, r7
 8002e02:	b004      	add	sp, #16
 8002e04:	bdb0      	pop	{r4, r5, r7, pc}

08002e06 <drawCircleHelper>:
        writePixel(x0 - y, y0 - x, color);
    }
}

void drawCircleHelper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint16_t color)
{
 8002e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	0005      	movs	r5, r0
 8002e0e:	000c      	movs	r4, r1
 8002e10:	0010      	movs	r0, r2
 8002e12:	0019      	movs	r1, r3
 8002e14:	1dbb      	adds	r3, r7, #6
 8002e16:	1c2a      	adds	r2, r5, #0
 8002e18:	801a      	strh	r2, [r3, #0]
 8002e1a:	1d3b      	adds	r3, r7, #4
 8002e1c:	1c22      	adds	r2, r4, #0
 8002e1e:	801a      	strh	r2, [r3, #0]
 8002e20:	1cbb      	adds	r3, r7, #2
 8002e22:	1c02      	adds	r2, r0, #0
 8002e24:	801a      	strh	r2, [r3, #0]
 8002e26:	1c7b      	adds	r3, r7, #1
 8002e28:	1c0a      	adds	r2, r1, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
    int16_t f     = 1 - r;
 8002e2c:	1cbb      	adds	r3, r7, #2
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	2201      	movs	r2, #1
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	2316      	movs	r3, #22
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 8002e3c:	2314      	movs	r3, #20
 8002e3e:	18fb      	adds	r3, r7, r3
 8002e40:	2201      	movs	r2, #1
 8002e42:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 8002e44:	1cbb      	adds	r3, r7, #2
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	1c1a      	adds	r2, r3, #0
 8002e4a:	03d2      	lsls	r2, r2, #15
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	18db      	adds	r3, r3, r3
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	2312      	movs	r3, #18
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 8002e58:	2310      	movs	r3, #16
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 8002e60:	230e      	movs	r3, #14
 8002e62:	18fb      	adds	r3, r7, r3
 8002e64:	1cba      	adds	r2, r7, #2
 8002e66:	8812      	ldrh	r2, [r2, #0]
 8002e68:	801a      	strh	r2, [r3, #0]

    while (x<y) {
 8002e6a:	e0fe      	b.n	800306a <drawCircleHelper+0x264>
        if (f >= 0) {
 8002e6c:	2116      	movs	r1, #22
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	2200      	movs	r2, #0
 8002e72:	5e9b      	ldrsh	r3, [r3, r2]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db17      	blt.n	8002ea8 <drawCircleHelper+0xa2>
            y--;
 8002e78:	200e      	movs	r0, #14
 8002e7a:	183b      	adds	r3, r7, r0
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	5e9b      	ldrsh	r3, [r3, r2]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	183b      	adds	r3, r7, r0
 8002e88:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8002e8a:	2012      	movs	r0, #18
 8002e8c:	183b      	adds	r3, r7, r0
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	3302      	adds	r3, #2
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	183b      	adds	r3, r7, r0
 8002e96:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8002e98:	187b      	adds	r3, r7, r1
 8002e9a:	881a      	ldrh	r2, [r3, #0]
 8002e9c:	183b      	adds	r3, r7, r0
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	18d3      	adds	r3, r2, r3
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8002ea8:	2110      	movs	r1, #16
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	2200      	movs	r2, #0
 8002eae:	5e9b      	ldrsh	r3, [r3, r2]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8002eba:	2014      	movs	r0, #20
 8002ebc:	183b      	adds	r3, r7, r0
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	183b      	adds	r3, r7, r0
 8002ec6:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8002ec8:	2416      	movs	r4, #22
 8002eca:	193b      	adds	r3, r7, r4
 8002ecc:	881a      	ldrh	r2, [r3, #0]
 8002ece:	183b      	adds	r3, r7, r0
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	18d3      	adds	r3, r2, r3
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	193b      	adds	r3, r7, r4
 8002ed8:	801a      	strh	r2, [r3, #0]
        if (cornername & 0x4) {
 8002eda:	1c7b      	adds	r3, r7, #1
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d02c      	beq.n	8002f3e <drawCircleHelper+0x138>
            writePixel(x0 + x, y0 + y, color);
 8002ee4:	1dbb      	adds	r3, r7, #6
 8002ee6:	881a      	ldrh	r2, [r3, #0]
 8002ee8:	000c      	movs	r4, r1
 8002eea:	187b      	adds	r3, r7, r1
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	18d3      	adds	r3, r2, r3
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	b218      	sxth	r0, r3
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	250e      	movs	r5, #14
 8002efa:	197b      	adds	r3, r7, r5
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	18d3      	adds	r3, r2, r3
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	b219      	sxth	r1, r3
 8002f04:	2628      	movs	r6, #40	; 0x28
 8002f06:	2308      	movs	r3, #8
 8002f08:	18f2      	adds	r2, r6, r3
 8002f0a:	19d3      	adds	r3, r2, r7
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	001a      	movs	r2, r3
 8002f10:	f7ff fd74 	bl	80029fc <writePixel>
            writePixel(x0 + y, y0 + x, color);
 8002f14:	1dbb      	adds	r3, r7, #6
 8002f16:	881a      	ldrh	r2, [r3, #0]
 8002f18:	197b      	adds	r3, r7, r5
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	18d3      	adds	r3, r2, r3
 8002f1e:	b29b      	uxth	r3, r3
 8002f20:	b218      	sxth	r0, r3
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	881a      	ldrh	r2, [r3, #0]
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	18d3      	adds	r3, r2, r3
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	b219      	sxth	r1, r3
 8002f30:	2308      	movs	r3, #8
 8002f32:	18f3      	adds	r3, r6, r3
 8002f34:	19db      	adds	r3, r3, r7
 8002f36:	881b      	ldrh	r3, [r3, #0]
 8002f38:	001a      	movs	r2, r3
 8002f3a:	f7ff fd5f 	bl	80029fc <writePixel>
        }
        if (cornername & 0x2) {
 8002f3e:	1c7b      	adds	r3, r7, #1
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2202      	movs	r2, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	d02c      	beq.n	8002fa2 <drawCircleHelper+0x19c>
            writePixel(x0 + x, y0 - y, color);
 8002f48:	1dbb      	adds	r3, r7, #6
 8002f4a:	881a      	ldrh	r2, [r3, #0]
 8002f4c:	2410      	movs	r4, #16
 8002f4e:	193b      	adds	r3, r7, r4
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	18d3      	adds	r3, r2, r3
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	b218      	sxth	r0, r3
 8002f58:	1d3b      	adds	r3, r7, #4
 8002f5a:	881a      	ldrh	r2, [r3, #0]
 8002f5c:	250e      	movs	r5, #14
 8002f5e:	197b      	adds	r3, r7, r5
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	b219      	sxth	r1, r3
 8002f68:	2628      	movs	r6, #40	; 0x28
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	18f2      	adds	r2, r6, r3
 8002f6e:	19d3      	adds	r3, r2, r7
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	001a      	movs	r2, r3
 8002f74:	f7ff fd42 	bl	80029fc <writePixel>
            writePixel(x0 + y, y0 - x, color);
 8002f78:	1dbb      	adds	r3, r7, #6
 8002f7a:	881a      	ldrh	r2, [r3, #0]
 8002f7c:	197b      	adds	r3, r7, r5
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	18d3      	adds	r3, r2, r3
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	b218      	sxth	r0, r3
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	881a      	ldrh	r2, [r3, #0]
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	b219      	sxth	r1, r3
 8002f94:	2308      	movs	r3, #8
 8002f96:	18f3      	adds	r3, r6, r3
 8002f98:	19db      	adds	r3, r3, r7
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	001a      	movs	r2, r3
 8002f9e:	f7ff fd2d 	bl	80029fc <writePixel>
        }
        if (cornername & 0x8) {
 8002fa2:	1c7b      	adds	r3, r7, #1
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d02c      	beq.n	8003006 <drawCircleHelper+0x200>
            writePixel(x0 - y, y0 + x, color);
 8002fac:	1dbb      	adds	r3, r7, #6
 8002fae:	881a      	ldrh	r2, [r3, #0]
 8002fb0:	240e      	movs	r4, #14
 8002fb2:	193b      	adds	r3, r7, r4
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	b218      	sxth	r0, r3
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	881a      	ldrh	r2, [r3, #0]
 8002fc0:	2510      	movs	r5, #16
 8002fc2:	197b      	adds	r3, r7, r5
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	18d3      	adds	r3, r2, r3
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	b219      	sxth	r1, r3
 8002fcc:	2628      	movs	r6, #40	; 0x28
 8002fce:	2308      	movs	r3, #8
 8002fd0:	18f2      	adds	r2, r6, r3
 8002fd2:	19d3      	adds	r3, r2, r7
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	001a      	movs	r2, r3
 8002fd8:	f7ff fd10 	bl	80029fc <writePixel>
            writePixel(x0 - x, y0 + y, color);
 8002fdc:	1dbb      	adds	r3, r7, #6
 8002fde:	881a      	ldrh	r2, [r3, #0]
 8002fe0:	197b      	adds	r3, r7, r5
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	b218      	sxth	r0, r3
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	18d3      	adds	r3, r2, r3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	b219      	sxth	r1, r3
 8002ff8:	2308      	movs	r3, #8
 8002ffa:	18f3      	adds	r3, r6, r3
 8002ffc:	19db      	adds	r3, r3, r7
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	001a      	movs	r2, r3
 8003002:	f7ff fcfb 	bl	80029fc <writePixel>
        }
        if (cornername & 0x1) {
 8003006:	1c7b      	adds	r3, r7, #1
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2201      	movs	r2, #1
 800300c:	4013      	ands	r3, r2
 800300e:	d02c      	beq.n	800306a <drawCircleHelper+0x264>
            writePixel(x0 - y, y0 - x, color);
 8003010:	1dbb      	adds	r3, r7, #6
 8003012:	881a      	ldrh	r2, [r3, #0]
 8003014:	240e      	movs	r4, #14
 8003016:	193b      	adds	r3, r7, r4
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	b29b      	uxth	r3, r3
 800301e:	b218      	sxth	r0, r3
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	881a      	ldrh	r2, [r3, #0]
 8003024:	2510      	movs	r5, #16
 8003026:	197b      	adds	r3, r7, r5
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	b29b      	uxth	r3, r3
 800302e:	b219      	sxth	r1, r3
 8003030:	2628      	movs	r6, #40	; 0x28
 8003032:	2308      	movs	r3, #8
 8003034:	18f2      	adds	r2, r6, r3
 8003036:	19d3      	adds	r3, r2, r7
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	001a      	movs	r2, r3
 800303c:	f7ff fcde 	bl	80029fc <writePixel>
            writePixel(x0 - x, y0 - y, color);
 8003040:	1dbb      	adds	r3, r7, #6
 8003042:	881a      	ldrh	r2, [r3, #0]
 8003044:	197b      	adds	r3, r7, r5
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	b29b      	uxth	r3, r3
 800304c:	b218      	sxth	r0, r3
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	881a      	ldrh	r2, [r3, #0]
 8003052:	193b      	adds	r3, r7, r4
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	b29b      	uxth	r3, r3
 800305a:	b219      	sxth	r1, r3
 800305c:	2308      	movs	r3, #8
 800305e:	18f3      	adds	r3, r6, r3
 8003060:	19db      	adds	r3, r3, r7
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	001a      	movs	r2, r3
 8003066:	f7ff fcc9 	bl	80029fc <writePixel>
    while (x<y) {
 800306a:	2310      	movs	r3, #16
 800306c:	18fa      	adds	r2, r7, r3
 800306e:	230e      	movs	r3, #14
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2100      	movs	r1, #0
 8003074:	5e52      	ldrsh	r2, [r2, r1]
 8003076:	2100      	movs	r1, #0
 8003078:	5e5b      	ldrsh	r3, [r3, r1]
 800307a:	429a      	cmp	r2, r3
 800307c:	da00      	bge.n	8003080 <drawCircleHelper+0x27a>
 800307e:	e6f5      	b.n	8002e6c <drawCircleHelper+0x66>
        }
    }
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46c0      	nop			; (mov r8, r8)
 8003084:	46bd      	mov	sp, r7
 8003086:	b007      	add	sp, #28
 8003088:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800308a <fillCircleHelper>:

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 800308a:	b5b0      	push	{r4, r5, r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	0005      	movs	r5, r0
 8003092:	000c      	movs	r4, r1
 8003094:	0010      	movs	r0, r2
 8003096:	0019      	movs	r1, r3
 8003098:	1dbb      	adds	r3, r7, #6
 800309a:	1c2a      	adds	r2, r5, #0
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	1d3b      	adds	r3, r7, #4
 80030a0:	1c22      	adds	r2, r4, #0
 80030a2:	801a      	strh	r2, [r3, #0]
 80030a4:	1cbb      	adds	r3, r7, #2
 80030a6:	1c02      	adds	r2, r0, #0
 80030a8:	801a      	strh	r2, [r3, #0]
 80030aa:	1c7b      	adds	r3, r7, #1
 80030ac:	1c0a      	adds	r2, r1, #0
 80030ae:	701a      	strb	r2, [r3, #0]

    int16_t f     = 1 - r;
 80030b0:	1cbb      	adds	r3, r7, #2
 80030b2:	881b      	ldrh	r3, [r3, #0]
 80030b4:	2201      	movs	r2, #1
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	2316      	movs	r3, #22
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	801a      	strh	r2, [r3, #0]
    int16_t ddF_x = 1;
 80030c0:	2314      	movs	r3, #20
 80030c2:	18fb      	adds	r3, r7, r3
 80030c4:	2201      	movs	r2, #1
 80030c6:	801a      	strh	r2, [r3, #0]
    int16_t ddF_y = -2 * r;
 80030c8:	1cbb      	adds	r3, r7, #2
 80030ca:	881b      	ldrh	r3, [r3, #0]
 80030cc:	1c1a      	adds	r2, r3, #0
 80030ce:	03d2      	lsls	r2, r2, #15
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	18db      	adds	r3, r3, r3
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	2312      	movs	r3, #18
 80030d8:	18fb      	adds	r3, r7, r3
 80030da:	801a      	strh	r2, [r3, #0]
    int16_t x     = 0;
 80030dc:	2110      	movs	r1, #16
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	2200      	movs	r2, #0
 80030e2:	801a      	strh	r2, [r3, #0]
    int16_t y     = r;
 80030e4:	200e      	movs	r0, #14
 80030e6:	183b      	adds	r3, r7, r0
 80030e8:	1cba      	adds	r2, r7, #2
 80030ea:	8812      	ldrh	r2, [r2, #0]
 80030ec:	801a      	strh	r2, [r3, #0]
    int16_t px    = x;
 80030ee:	230c      	movs	r3, #12
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	187a      	adds	r2, r7, r1
 80030f4:	8812      	ldrh	r2, [r2, #0]
 80030f6:	801a      	strh	r2, [r3, #0]
    int16_t py    = y;
 80030f8:	230a      	movs	r3, #10
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	183a      	adds	r2, r7, r0
 80030fe:	8812      	ldrh	r2, [r2, #0]
 8003100:	801a      	strh	r2, [r3, #0]

    delta++; // Avoid some +1's in the loop
 8003102:	2128      	movs	r1, #40	; 0x28
 8003104:	187b      	adds	r3, r7, r1
 8003106:	2200      	movs	r2, #0
 8003108:	5e9b      	ldrsh	r3, [r3, r2]
 800310a:	b29b      	uxth	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	187b      	adds	r3, r7, r1
 8003112:	801a      	strh	r2, [r3, #0]

    while(x < y) {
 8003114:	e0e2      	b.n	80032dc <fillCircleHelper+0x252>
        if (f >= 0) {
 8003116:	2116      	movs	r1, #22
 8003118:	187b      	adds	r3, r7, r1
 800311a:	2200      	movs	r2, #0
 800311c:	5e9b      	ldrsh	r3, [r3, r2]
 800311e:	2b00      	cmp	r3, #0
 8003120:	db17      	blt.n	8003152 <fillCircleHelper+0xc8>
            y--;
 8003122:	200e      	movs	r0, #14
 8003124:	183b      	adds	r3, r7, r0
 8003126:	2200      	movs	r2, #0
 8003128:	5e9b      	ldrsh	r3, [r3, r2]
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	183b      	adds	r3, r7, r0
 8003132:	801a      	strh	r2, [r3, #0]
            ddF_y += 2;
 8003134:	2012      	movs	r0, #18
 8003136:	183b      	adds	r3, r7, r0
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	3302      	adds	r3, #2
 800313c:	b29a      	uxth	r2, r3
 800313e:	183b      	adds	r3, r7, r0
 8003140:	801a      	strh	r2, [r3, #0]
            f     += ddF_y;
 8003142:	187b      	adds	r3, r7, r1
 8003144:	881a      	ldrh	r2, [r3, #0]
 8003146:	183b      	adds	r3, r7, r0
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	18d3      	adds	r3, r2, r3
 800314c:	b29a      	uxth	r2, r3
 800314e:	187b      	adds	r3, r7, r1
 8003150:	801a      	strh	r2, [r3, #0]
        }
        x++;
 8003152:	2110      	movs	r1, #16
 8003154:	187b      	adds	r3, r7, r1
 8003156:	2200      	movs	r2, #0
 8003158:	5e9b      	ldrsh	r3, [r3, r2]
 800315a:	b29b      	uxth	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	b29a      	uxth	r2, r3
 8003160:	187b      	adds	r3, r7, r1
 8003162:	801a      	strh	r2, [r3, #0]
        ddF_x += 2;
 8003164:	2014      	movs	r0, #20
 8003166:	183b      	adds	r3, r7, r0
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	3302      	adds	r3, #2
 800316c:	b29a      	uxth	r2, r3
 800316e:	183b      	adds	r3, r7, r0
 8003170:	801a      	strh	r2, [r3, #0]
        f     += ddF_x;
 8003172:	2416      	movs	r4, #22
 8003174:	193b      	adds	r3, r7, r4
 8003176:	881a      	ldrh	r2, [r3, #0]
 8003178:	183b      	adds	r3, r7, r0
 800317a:	881b      	ldrh	r3, [r3, #0]
 800317c:	18d3      	adds	r3, r2, r3
 800317e:	b29a      	uxth	r2, r3
 8003180:	193b      	adds	r3, r7, r4
 8003182:	801a      	strh	r2, [r3, #0]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 8003184:	240e      	movs	r4, #14
 8003186:	193a      	adds	r2, r7, r4
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2000      	movs	r0, #0
 800318c:	5e12      	ldrsh	r2, [r2, r0]
 800318e:	2000      	movs	r0, #0
 8003190:	5e1b      	ldrsh	r3, [r3, r0]
 8003192:	429a      	cmp	r2, r3
 8003194:	db45      	blt.n	8003222 <fillCircleHelper+0x198>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8003196:	1c7b      	adds	r3, r7, #1
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2201      	movs	r2, #1
 800319c:	4013      	ands	r3, r2
 800319e:	d01c      	beq.n	80031da <fillCircleHelper+0x150>
 80031a0:	1dbb      	adds	r3, r7, #6
 80031a2:	881a      	ldrh	r2, [r3, #0]
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	18d3      	adds	r3, r2, r3
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	b218      	sxth	r0, r3
 80031ae:	1d3b      	adds	r3, r7, #4
 80031b0:	881a      	ldrh	r2, [r3, #0]
 80031b2:	193b      	adds	r3, r7, r4
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	b219      	sxth	r1, r3
 80031bc:	193b      	adds	r3, r7, r4
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	18db      	adds	r3, r3, r3
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	2328      	movs	r3, #40	; 0x28
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	18d3      	adds	r3, r2, r3
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	b21a      	sxth	r2, r3
 80031d0:	232c      	movs	r3, #44	; 0x2c
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	f7ff fd28 	bl	8002c2a <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 80031da:	1c7b      	adds	r3, r7, #1
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2202      	movs	r2, #2
 80031e0:	4013      	ands	r3, r2
 80031e2:	d01e      	beq.n	8003222 <fillCircleHelper+0x198>
 80031e4:	1dbb      	adds	r3, r7, #6
 80031e6:	881a      	ldrh	r2, [r3, #0]
 80031e8:	2310      	movs	r3, #16
 80031ea:	18fb      	adds	r3, r7, r3
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	b218      	sxth	r0, r3
 80031f4:	1d3b      	adds	r3, r7, #4
 80031f6:	881a      	ldrh	r2, [r3, #0]
 80031f8:	240e      	movs	r4, #14
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	b29b      	uxth	r3, r3
 8003202:	b219      	sxth	r1, r3
 8003204:	193b      	adds	r3, r7, r4
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	18db      	adds	r3, r3, r3
 800320a:	b29a      	uxth	r2, r3
 800320c:	2328      	movs	r3, #40	; 0x28
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	881b      	ldrh	r3, [r3, #0]
 8003212:	18d3      	adds	r3, r2, r3
 8003214:	b29b      	uxth	r3, r3
 8003216:	b21a      	sxth	r2, r3
 8003218:	232c      	movs	r3, #44	; 0x2c
 800321a:	18fb      	adds	r3, r7, r3
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	f7ff fd04 	bl	8002c2a <drawFastVLine>
        }
        if(y != py) {
 8003222:	230e      	movs	r3, #14
 8003224:	18fa      	adds	r2, r7, r3
 8003226:	210a      	movs	r1, #10
 8003228:	187b      	adds	r3, r7, r1
 800322a:	2000      	movs	r0, #0
 800322c:	5e12      	ldrsh	r2, [r2, r0]
 800322e:	2000      	movs	r0, #0
 8003230:	5e1b      	ldrsh	r3, [r3, r0]
 8003232:	429a      	cmp	r2, r3
 8003234:	d04c      	beq.n	80032d0 <fillCircleHelper+0x246>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8003236:	1c7b      	adds	r3, r7, #1
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2201      	movs	r2, #1
 800323c:	4013      	ands	r3, r2
 800323e:	d01d      	beq.n	800327c <fillCircleHelper+0x1f2>
 8003240:	1dbb      	adds	r3, r7, #6
 8003242:	881a      	ldrh	r2, [r3, #0]
 8003244:	187b      	adds	r3, r7, r1
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	18d3      	adds	r3, r2, r3
 800324a:	b29b      	uxth	r3, r3
 800324c:	b218      	sxth	r0, r3
 800324e:	1d3b      	adds	r3, r7, #4
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	240c      	movs	r4, #12
 8003254:	193b      	adds	r3, r7, r4
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	b29b      	uxth	r3, r3
 800325c:	b219      	sxth	r1, r3
 800325e:	193b      	adds	r3, r7, r4
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	18db      	adds	r3, r3, r3
 8003264:	b29a      	uxth	r2, r3
 8003266:	2328      	movs	r3, #40	; 0x28
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	18d3      	adds	r3, r2, r3
 800326e:	b29b      	uxth	r3, r3
 8003270:	b21a      	sxth	r2, r3
 8003272:	232c      	movs	r3, #44	; 0x2c
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	f7ff fcd7 	bl	8002c2a <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 800327c:	1c7b      	adds	r3, r7, #1
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2202      	movs	r2, #2
 8003282:	4013      	ands	r3, r2
 8003284:	d01e      	beq.n	80032c4 <fillCircleHelper+0x23a>
 8003286:	1dbb      	adds	r3, r7, #6
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	230a      	movs	r3, #10
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	b29b      	uxth	r3, r3
 8003294:	b218      	sxth	r0, r3
 8003296:	1d3b      	adds	r3, r7, #4
 8003298:	881a      	ldrh	r2, [r3, #0]
 800329a:	240c      	movs	r4, #12
 800329c:	193b      	adds	r3, r7, r4
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	b219      	sxth	r1, r3
 80032a6:	193b      	adds	r3, r7, r4
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	18db      	adds	r3, r3, r3
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	2328      	movs	r3, #40	; 0x28
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	18d3      	adds	r3, r2, r3
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	b21a      	sxth	r2, r3
 80032ba:	232c      	movs	r3, #44	; 0x2c
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	f7ff fcb3 	bl	8002c2a <drawFastVLine>
            py = y;
 80032c4:	230a      	movs	r3, #10
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	220e      	movs	r2, #14
 80032ca:	18ba      	adds	r2, r7, r2
 80032cc:	8812      	ldrh	r2, [r2, #0]
 80032ce:	801a      	strh	r2, [r3, #0]
        }
        px = x;
 80032d0:	230c      	movs	r3, #12
 80032d2:	18fb      	adds	r3, r7, r3
 80032d4:	2210      	movs	r2, #16
 80032d6:	18ba      	adds	r2, r7, r2
 80032d8:	8812      	ldrh	r2, [r2, #0]
 80032da:	801a      	strh	r2, [r3, #0]
    while(x < y) {
 80032dc:	2310      	movs	r3, #16
 80032de:	18fa      	adds	r2, r7, r3
 80032e0:	230e      	movs	r3, #14
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2100      	movs	r1, #0
 80032e6:	5e52      	ldrsh	r2, [r2, r1]
 80032e8:	2100      	movs	r1, #0
 80032ea:	5e5b      	ldrsh	r3, [r3, r1]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	da00      	bge.n	80032f2 <fillCircleHelper+0x268>
 80032f0:	e711      	b.n	8003116 <fillCircleHelper+0x8c>
    }
}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b006      	add	sp, #24
 80032fa:	bdb0      	pop	{r4, r5, r7, pc}

080032fc <drawRect>:
}



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80032fc:	b5b0      	push	{r4, r5, r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	0005      	movs	r5, r0
 8003304:	000c      	movs	r4, r1
 8003306:	0010      	movs	r0, r2
 8003308:	0019      	movs	r1, r3
 800330a:	1dbb      	adds	r3, r7, #6
 800330c:	1c2a      	adds	r2, r5, #0
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	1c22      	adds	r2, r4, #0
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	1cbb      	adds	r3, r7, #2
 8003318:	1c02      	adds	r2, r0, #0
 800331a:	801a      	strh	r2, [r3, #0]
 800331c:	003b      	movs	r3, r7
 800331e:	1c0a      	adds	r2, r1, #0
 8003320:	801a      	strh	r2, [r3, #0]
    drawFastHLine(x, y, w, color);
 8003322:	2518      	movs	r5, #24
 8003324:	197b      	adds	r3, r7, r5
 8003326:	881c      	ldrh	r4, [r3, #0]
 8003328:	1cbb      	adds	r3, r7, #2
 800332a:	2200      	movs	r2, #0
 800332c:	5e9a      	ldrsh	r2, [r3, r2]
 800332e:	1d3b      	adds	r3, r7, #4
 8003330:	2100      	movs	r1, #0
 8003332:	5e59      	ldrsh	r1, [r3, r1]
 8003334:	1dbb      	adds	r3, r7, #6
 8003336:	2000      	movs	r0, #0
 8003338:	5e18      	ldrsh	r0, [r3, r0]
 800333a:	0023      	movs	r3, r4
 800333c:	f7ff fca4 	bl	8002c88 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 8003340:	1d3b      	adds	r3, r7, #4
 8003342:	881a      	ldrh	r2, [r3, #0]
 8003344:	003b      	movs	r3, r7
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	18d3      	adds	r3, r2, r3
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29b      	uxth	r3, r3
 8003350:	b219      	sxth	r1, r3
 8003352:	197b      	adds	r3, r7, r5
 8003354:	881c      	ldrh	r4, [r3, #0]
 8003356:	1cbb      	adds	r3, r7, #2
 8003358:	2200      	movs	r2, #0
 800335a:	5e9a      	ldrsh	r2, [r3, r2]
 800335c:	1dbb      	adds	r3, r7, #6
 800335e:	2000      	movs	r0, #0
 8003360:	5e18      	ldrsh	r0, [r3, r0]
 8003362:	0023      	movs	r3, r4
 8003364:	f7ff fc90 	bl	8002c88 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 8003368:	197b      	adds	r3, r7, r5
 800336a:	881c      	ldrh	r4, [r3, #0]
 800336c:	003b      	movs	r3, r7
 800336e:	2200      	movs	r2, #0
 8003370:	5e9a      	ldrsh	r2, [r3, r2]
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	2100      	movs	r1, #0
 8003376:	5e59      	ldrsh	r1, [r3, r1]
 8003378:	1dbb      	adds	r3, r7, #6
 800337a:	2000      	movs	r0, #0
 800337c:	5e18      	ldrsh	r0, [r3, r0]
 800337e:	0023      	movs	r3, r4
 8003380:	f7ff fc53 	bl	8002c2a <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8003384:	1dbb      	adds	r3, r7, #6
 8003386:	881a      	ldrh	r2, [r3, #0]
 8003388:	1cbb      	adds	r3, r7, #2
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	18d3      	adds	r3, r2, r3
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29b      	uxth	r3, r3
 8003394:	b218      	sxth	r0, r3
 8003396:	197b      	adds	r3, r7, r5
 8003398:	881c      	ldrh	r4, [r3, #0]
 800339a:	003b      	movs	r3, r7
 800339c:	2200      	movs	r2, #0
 800339e:	5e9a      	ldrsh	r2, [r3, r2]
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	2100      	movs	r1, #0
 80033a4:	5e59      	ldrsh	r1, [r3, r1]
 80033a6:	0023      	movs	r3, r4
 80033a8:	f7ff fc3f 	bl	8002c2a <drawFastVLine>
}
 80033ac:	46c0      	nop			; (mov r8, r8)
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b002      	add	sp, #8
 80033b2:	bdb0      	pop	{r4, r5, r7, pc}

080033b4 <drawRoundRect>:

void drawRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	0005      	movs	r5, r0
 80033bc:	000c      	movs	r4, r1
 80033be:	0010      	movs	r0, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	1dbb      	adds	r3, r7, #6
 80033c4:	1c2a      	adds	r2, r5, #0
 80033c6:	801a      	strh	r2, [r3, #0]
 80033c8:	1d3b      	adds	r3, r7, #4
 80033ca:	1c22      	adds	r2, r4, #0
 80033cc:	801a      	strh	r2, [r3, #0]
 80033ce:	1cbb      	adds	r3, r7, #2
 80033d0:	1c02      	adds	r2, r0, #0
 80033d2:	801a      	strh	r2, [r3, #0]
 80033d4:	003b      	movs	r3, r7
 80033d6:	1c0a      	adds	r2, r1, #0
 80033d8:	801a      	strh	r2, [r3, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 80033da:	003b      	movs	r3, r7
 80033dc:	1cba      	adds	r2, r7, #2
 80033de:	8810      	ldrh	r0, [r2, #0]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b219      	sxth	r1, r3
 80033e4:	b202      	sxth	r2, r0
 80033e6:	4291      	cmp	r1, r2
 80033e8:	dd00      	ble.n	80033ec <drawRoundRect+0x38>
 80033ea:	1c03      	adds	r3, r0, #0
 80033ec:	b21b      	sxth	r3, r3
 80033ee:	220e      	movs	r2, #14
 80033f0:	18ba      	adds	r2, r7, r2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	da00      	bge.n	80033f8 <drawRoundRect+0x44>
 80033f6:	3301      	adds	r3, #1
 80033f8:	105b      	asrs	r3, r3, #1
 80033fa:	8013      	strh	r3, [r2, #0]
    if(r > max_radius) r = max_radius;
 80033fc:	2020      	movs	r0, #32
 80033fe:	2508      	movs	r5, #8
 8003400:	1943      	adds	r3, r0, r5
 8003402:	19db      	adds	r3, r3, r7
 8003404:	240e      	movs	r4, #14
 8003406:	1939      	adds	r1, r7, r4
 8003408:	2200      	movs	r2, #0
 800340a:	5e9a      	ldrsh	r2, [r3, r2]
 800340c:	2300      	movs	r3, #0
 800340e:	5ecb      	ldrsh	r3, [r1, r3]
 8003410:	429a      	cmp	r2, r3
 8003412:	dd04      	ble.n	800341e <drawRoundRect+0x6a>
 8003414:	1943      	adds	r3, r0, r5
 8003416:	19db      	adds	r3, r3, r7
 8003418:	193a      	adds	r2, r7, r4
 800341a:	8812      	ldrh	r2, [r2, #0]
 800341c:	801a      	strh	r2, [r3, #0]
    // smarter version
    drawFastHLine(x+r  , y    , w-2*r, color); // Top
 800341e:	1dbb      	adds	r3, r7, #6
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	2520      	movs	r5, #32
 8003424:	2408      	movs	r4, #8
 8003426:	192b      	adds	r3, r5, r4
 8003428:	19db      	adds	r3, r3, r7
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	18d3      	adds	r3, r2, r3
 800342e:	b29b      	uxth	r3, r3
 8003430:	b218      	sxth	r0, r3
 8003432:	1cbb      	adds	r3, r7, #2
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	192b      	adds	r3, r5, r4
 8003438:	19db      	adds	r3, r3, r7
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	18db      	adds	r3, r3, r3
 800343e:	b29b      	uxth	r3, r3
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	b29b      	uxth	r3, r3
 8003444:	b21a      	sxth	r2, r3
 8003446:	2624      	movs	r6, #36	; 0x24
 8003448:	1933      	adds	r3, r6, r4
 800344a:	19db      	adds	r3, r3, r7
 800344c:	881c      	ldrh	r4, [r3, #0]
 800344e:	1d3b      	adds	r3, r7, #4
 8003450:	2100      	movs	r1, #0
 8003452:	5e59      	ldrsh	r1, [r3, r1]
 8003454:	0023      	movs	r3, r4
 8003456:	f7ff fc17 	bl	8002c88 <drawFastHLine>
    drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
 800345a:	1dbb      	adds	r3, r7, #6
 800345c:	881a      	ldrh	r2, [r3, #0]
 800345e:	2408      	movs	r4, #8
 8003460:	192b      	adds	r3, r5, r4
 8003462:	19db      	adds	r3, r3, r7
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	18d3      	adds	r3, r2, r3
 8003468:	b29b      	uxth	r3, r3
 800346a:	b218      	sxth	r0, r3
 800346c:	1d3b      	adds	r3, r7, #4
 800346e:	881a      	ldrh	r2, [r3, #0]
 8003470:	003b      	movs	r3, r7
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	18d3      	adds	r3, r2, r3
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29b      	uxth	r3, r3
 800347c:	b219      	sxth	r1, r3
 800347e:	1cbb      	adds	r3, r7, #2
 8003480:	881a      	ldrh	r2, [r3, #0]
 8003482:	192b      	adds	r3, r5, r4
 8003484:	19db      	adds	r3, r3, r7
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	18db      	adds	r3, r3, r3
 800348a:	b29b      	uxth	r3, r3
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	b29b      	uxth	r3, r3
 8003490:	b21a      	sxth	r2, r3
 8003492:	1933      	adds	r3, r6, r4
 8003494:	19db      	adds	r3, r3, r7
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	f7ff fbf6 	bl	8002c88 <drawFastHLine>
    drawFastVLine(x    , y+r  , h-2*r, color); // Left
 800349c:	1d3b      	adds	r3, r7, #4
 800349e:	881a      	ldrh	r2, [r3, #0]
 80034a0:	192b      	adds	r3, r5, r4
 80034a2:	19db      	adds	r3, r3, r7
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	18d3      	adds	r3, r2, r3
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	b219      	sxth	r1, r3
 80034ac:	003b      	movs	r3, r7
 80034ae:	881a      	ldrh	r2, [r3, #0]
 80034b0:	192b      	adds	r3, r5, r4
 80034b2:	19db      	adds	r3, r3, r7
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	18db      	adds	r3, r3, r3
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	b29b      	uxth	r3, r3
 80034be:	b21a      	sxth	r2, r3
 80034c0:	1933      	adds	r3, r6, r4
 80034c2:	19db      	adds	r3, r3, r7
 80034c4:	881c      	ldrh	r4, [r3, #0]
 80034c6:	1dbb      	adds	r3, r7, #6
 80034c8:	2000      	movs	r0, #0
 80034ca:	5e18      	ldrsh	r0, [r3, r0]
 80034cc:	0023      	movs	r3, r4
 80034ce:	f7ff fbac 	bl	8002c2a <drawFastVLine>
    drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
 80034d2:	1dbb      	adds	r3, r7, #6
 80034d4:	881a      	ldrh	r2, [r3, #0]
 80034d6:	1cbb      	adds	r3, r7, #2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	18d3      	adds	r3, r2, r3
 80034dc:	b29b      	uxth	r3, r3
 80034de:	3b01      	subs	r3, #1
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	b218      	sxth	r0, r3
 80034e4:	1d3b      	adds	r3, r7, #4
 80034e6:	881a      	ldrh	r2, [r3, #0]
 80034e8:	2408      	movs	r4, #8
 80034ea:	192b      	adds	r3, r5, r4
 80034ec:	19db      	adds	r3, r3, r7
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	b219      	sxth	r1, r3
 80034f6:	003b      	movs	r3, r7
 80034f8:	881a      	ldrh	r2, [r3, #0]
 80034fa:	192b      	adds	r3, r5, r4
 80034fc:	19db      	adds	r3, r3, r7
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	18db      	adds	r3, r3, r3
 8003502:	b29b      	uxth	r3, r3
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	b21a      	sxth	r2, r3
 800350a:	1933      	adds	r3, r6, r4
 800350c:	19db      	adds	r3, r3, r7
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	f7ff fb8b 	bl	8002c2a <drawFastVLine>
    // draw four corners
    drawCircleHelper(x+r    , y+r    , r, 1, color);
 8003514:	1dbb      	adds	r3, r7, #6
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	192b      	adds	r3, r5, r4
 800351a:	19db      	adds	r3, r3, r7
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	18d3      	adds	r3, r2, r3
 8003520:	b29b      	uxth	r3, r3
 8003522:	b218      	sxth	r0, r3
 8003524:	1d3b      	adds	r3, r7, #4
 8003526:	881a      	ldrh	r2, [r3, #0]
 8003528:	1929      	adds	r1, r5, r4
 800352a:	19cb      	adds	r3, r1, r7
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	18d3      	adds	r3, r2, r3
 8003530:	b29b      	uxth	r3, r3
 8003532:	b219      	sxth	r1, r3
 8003534:	002c      	movs	r4, r5
 8003536:	2308      	movs	r3, #8
 8003538:	18ea      	adds	r2, r5, r3
 800353a:	19d3      	adds	r3, r2, r7
 800353c:	2200      	movs	r2, #0
 800353e:	5e9a      	ldrsh	r2, [r3, r2]
 8003540:	0035      	movs	r5, r6
 8003542:	2608      	movs	r6, #8
 8003544:	19ab      	adds	r3, r5, r6
 8003546:	19db      	adds	r3, r3, r7
 8003548:	881b      	ldrh	r3, [r3, #0]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2301      	movs	r3, #1
 800354e:	f7ff fc5a 	bl	8002e06 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
 8003552:	1dbb      	adds	r3, r7, #6
 8003554:	881a      	ldrh	r2, [r3, #0]
 8003556:	1cbb      	adds	r3, r7, #2
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	18d3      	adds	r3, r2, r3
 800355c:	b29a      	uxth	r2, r3
 800355e:	0031      	movs	r1, r6
 8003560:	1863      	adds	r3, r4, r1
 8003562:	19db      	adds	r3, r3, r7
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29b      	uxth	r3, r3
 800356e:	b218      	sxth	r0, r3
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	000e      	movs	r6, r1
 8003576:	19a3      	adds	r3, r4, r6
 8003578:	19db      	adds	r3, r3, r7
 800357a:	881b      	ldrh	r3, [r3, #0]
 800357c:	18d3      	adds	r3, r2, r3
 800357e:	b29b      	uxth	r3, r3
 8003580:	b219      	sxth	r1, r3
 8003582:	19a3      	adds	r3, r4, r6
 8003584:	19db      	adds	r3, r3, r7
 8003586:	2200      	movs	r2, #0
 8003588:	5e9a      	ldrsh	r2, [r3, r2]
 800358a:	19ab      	adds	r3, r5, r6
 800358c:	19db      	adds	r3, r3, r7
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	2302      	movs	r3, #2
 8003594:	f7ff fc37 	bl	8002e06 <drawCircleHelper>
    drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
 8003598:	1dbb      	adds	r3, r7, #6
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	1cbb      	adds	r3, r7, #2
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	18d3      	adds	r3, r2, r3
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	0021      	movs	r1, r4
 80035a6:	198b      	adds	r3, r1, r6
 80035a8:	19db      	adds	r3, r3, r7
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	3b01      	subs	r3, #1
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	b218      	sxth	r0, r3
 80035b6:	1d3b      	adds	r3, r7, #4
 80035b8:	881a      	ldrh	r2, [r3, #0]
 80035ba:	003b      	movs	r3, r7
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	18d3      	adds	r3, r2, r3
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	000c      	movs	r4, r1
 80035c4:	19a3      	adds	r3, r4, r6
 80035c6:	19db      	adds	r3, r3, r7
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	b219      	sxth	r1, r3
 80035d4:	19a3      	adds	r3, r4, r6
 80035d6:	19db      	adds	r3, r3, r7
 80035d8:	2200      	movs	r2, #0
 80035da:	5e9a      	ldrsh	r2, [r3, r2]
 80035dc:	19ab      	adds	r3, r5, r6
 80035de:	19db      	adds	r3, r3, r7
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	2304      	movs	r3, #4
 80035e6:	f7ff fc0e 	bl	8002e06 <drawCircleHelper>
    drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
 80035ea:	1dbb      	adds	r3, r7, #6
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	0021      	movs	r1, r4
 80035f0:	198b      	adds	r3, r1, r6
 80035f2:	19db      	adds	r3, r3, r7
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	18d3      	adds	r3, r2, r3
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	b218      	sxth	r0, r3
 80035fc:	1d3b      	adds	r3, r7, #4
 80035fe:	881a      	ldrh	r2, [r3, #0]
 8003600:	003b      	movs	r3, r7
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	18d3      	adds	r3, r2, r3
 8003606:	b29a      	uxth	r2, r3
 8003608:	000c      	movs	r4, r1
 800360a:	198b      	adds	r3, r1, r6
 800360c:	19db      	adds	r3, r3, r7
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29b      	uxth	r3, r3
 8003618:	b219      	sxth	r1, r3
 800361a:	19a3      	adds	r3, r4, r6
 800361c:	19db      	adds	r3, r3, r7
 800361e:	2200      	movs	r2, #0
 8003620:	5e9a      	ldrsh	r2, [r3, r2]
 8003622:	19ab      	adds	r3, r5, r6
 8003624:	19db      	adds	r3, r3, r7
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2308      	movs	r3, #8
 800362c:	f7ff fbeb 	bl	8002e06 <drawCircleHelper>
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b005      	add	sp, #20
 8003636:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003638 <fillRoundRect>:


void fillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8003638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800363a:	b087      	sub	sp, #28
 800363c:	af02      	add	r7, sp, #8
 800363e:	0005      	movs	r5, r0
 8003640:	000c      	movs	r4, r1
 8003642:	0010      	movs	r0, r2
 8003644:	0019      	movs	r1, r3
 8003646:	1dbb      	adds	r3, r7, #6
 8003648:	1c2a      	adds	r2, r5, #0
 800364a:	801a      	strh	r2, [r3, #0]
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	1c22      	adds	r2, r4, #0
 8003650:	801a      	strh	r2, [r3, #0]
 8003652:	1cbb      	adds	r3, r7, #2
 8003654:	1c02      	adds	r2, r0, #0
 8003656:	801a      	strh	r2, [r3, #0]
 8003658:	003b      	movs	r3, r7
 800365a:	1c0a      	adds	r2, r1, #0
 800365c:	801a      	strh	r2, [r3, #0]
    int16_t max_radius = ((w < h) ? w : h) / 2; // 1/2 minor axis
 800365e:	003b      	movs	r3, r7
 8003660:	1cba      	adds	r2, r7, #2
 8003662:	8810      	ldrh	r0, [r2, #0]
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	b219      	sxth	r1, r3
 8003668:	b202      	sxth	r2, r0
 800366a:	4291      	cmp	r1, r2
 800366c:	dd00      	ble.n	8003670 <fillRoundRect+0x38>
 800366e:	1c03      	adds	r3, r0, #0
 8003670:	b21b      	sxth	r3, r3
 8003672:	220e      	movs	r2, #14
 8003674:	18ba      	adds	r2, r7, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	da00      	bge.n	800367c <fillRoundRect+0x44>
 800367a:	3301      	adds	r3, #1
 800367c:	105b      	asrs	r3, r3, #1
 800367e:	8013      	strh	r3, [r2, #0]
    if(r > max_radius) r = max_radius;
 8003680:	2020      	movs	r0, #32
 8003682:	2508      	movs	r5, #8
 8003684:	1943      	adds	r3, r0, r5
 8003686:	19db      	adds	r3, r3, r7
 8003688:	240e      	movs	r4, #14
 800368a:	1939      	adds	r1, r7, r4
 800368c:	2200      	movs	r2, #0
 800368e:	5e9a      	ldrsh	r2, [r3, r2]
 8003690:	2300      	movs	r3, #0
 8003692:	5ecb      	ldrsh	r3, [r1, r3]
 8003694:	429a      	cmp	r2, r3
 8003696:	dd04      	ble.n	80036a2 <fillRoundRect+0x6a>
 8003698:	1943      	adds	r3, r0, r5
 800369a:	19db      	adds	r3, r3, r7
 800369c:	193a      	adds	r2, r7, r4
 800369e:	8812      	ldrh	r2, [r2, #0]
 80036a0:	801a      	strh	r2, [r3, #0]
    // smarter version
    fillRect(x+r, y, w-2*r, h, color);
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	881a      	ldrh	r2, [r3, #0]
 80036a6:	2520      	movs	r5, #32
 80036a8:	2408      	movs	r4, #8
 80036aa:	192b      	adds	r3, r5, r4
 80036ac:	19db      	adds	r3, r3, r7
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	b218      	sxth	r0, r3
 80036b6:	1cbb      	adds	r3, r7, #2
 80036b8:	881a      	ldrh	r2, [r3, #0]
 80036ba:	1929      	adds	r1, r5, r4
 80036bc:	19cb      	adds	r3, r1, r7
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	18db      	adds	r3, r3, r3
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	003b      	movs	r3, r7
 80036cc:	2400      	movs	r4, #0
 80036ce:	5f1c      	ldrsh	r4, [r3, r4]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	2100      	movs	r1, #0
 80036d4:	5e59      	ldrsh	r1, [r3, r1]
 80036d6:	2624      	movs	r6, #36	; 0x24
 80036d8:	2308      	movs	r3, #8
 80036da:	18f3      	adds	r3, r6, r3
 80036dc:	19db      	adds	r3, r3, r7
 80036de:	881b      	ldrh	r3, [r3, #0]
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	0023      	movs	r3, r4
 80036e4:	f7ff f964 	bl	80029b0 <fillRect>
    // draw four corners
    fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
 80036e8:	1dbb      	adds	r3, r7, #6
 80036ea:	881a      	ldrh	r2, [r3, #0]
 80036ec:	1cbb      	adds	r3, r7, #2
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	18d3      	adds	r3, r2, r3
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	2408      	movs	r4, #8
 80036f6:	192b      	adds	r3, r5, r4
 80036f8:	19db      	adds	r3, r3, r7
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29b      	uxth	r3, r3
 8003704:	b218      	sxth	r0, r3
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	881a      	ldrh	r2, [r3, #0]
 800370a:	192b      	adds	r3, r5, r4
 800370c:	19db      	adds	r3, r3, r7
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	18d3      	adds	r3, r2, r3
 8003712:	b29b      	uxth	r3, r3
 8003714:	b219      	sxth	r1, r3
 8003716:	003b      	movs	r3, r7
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	192b      	adds	r3, r5, r4
 800371c:	19db      	adds	r3, r3, r7
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	18db      	adds	r3, r3, r3
 8003722:	b29b      	uxth	r3, r3
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29b      	uxth	r3, r3
 800372c:	b21a      	sxth	r2, r3
 800372e:	192b      	adds	r3, r5, r4
 8003730:	19db      	adds	r3, r3, r7
 8003732:	2400      	movs	r4, #0
 8003734:	5f1c      	ldrsh	r4, [r3, r4]
 8003736:	2308      	movs	r3, #8
 8003738:	18f3      	adds	r3, r6, r3
 800373a:	19db      	adds	r3, r3, r7
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	9200      	str	r2, [sp, #0]
 8003742:	2301      	movs	r3, #1
 8003744:	0022      	movs	r2, r4
 8003746:	f7ff fca0 	bl	800308a <fillCircleHelper>
    fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
 800374a:	1dbb      	adds	r3, r7, #6
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	002c      	movs	r4, r5
 8003750:	2508      	movs	r5, #8
 8003752:	1963      	adds	r3, r4, r5
 8003754:	19db      	adds	r3, r3, r7
 8003756:	881b      	ldrh	r3, [r3, #0]
 8003758:	18d3      	adds	r3, r2, r3
 800375a:	b29b      	uxth	r3, r3
 800375c:	b218      	sxth	r0, r3
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	1963      	adds	r3, r4, r5
 8003764:	19db      	adds	r3, r3, r7
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	18d3      	adds	r3, r2, r3
 800376a:	b29b      	uxth	r3, r3
 800376c:	b219      	sxth	r1, r3
 800376e:	003b      	movs	r3, r7
 8003770:	881a      	ldrh	r2, [r3, #0]
 8003772:	1963      	adds	r3, r4, r5
 8003774:	19db      	adds	r3, r3, r7
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	18db      	adds	r3, r3, r3
 800377a:	b29b      	uxth	r3, r3
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29b      	uxth	r3, r3
 8003784:	b21a      	sxth	r2, r3
 8003786:	1963      	adds	r3, r4, r5
 8003788:	19db      	adds	r3, r3, r7
 800378a:	2400      	movs	r4, #0
 800378c:	5f1c      	ldrsh	r4, [r3, r4]
 800378e:	1973      	adds	r3, r6, r5
 8003790:	19db      	adds	r3, r3, r7
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	9200      	str	r2, [sp, #0]
 8003798:	2302      	movs	r3, #2
 800379a:	0022      	movs	r2, r4
 800379c:	f7ff fc75 	bl	800308a <fillCircleHelper>
}
 80037a0:	46c0      	nop			; (mov r8, r8)
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b005      	add	sp, #20
 80037a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037a8 <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 80037a8:	b5b0      	push	{r4, r5, r7, lr}
 80037aa:	b08e      	sub	sp, #56	; 0x38
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	0005      	movs	r5, r0
 80037b0:	000c      	movs	r4, r1
 80037b2:	0010      	movs	r0, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	1dbb      	adds	r3, r7, #6
 80037b8:	1c2a      	adds	r2, r5, #0
 80037ba:	801a      	strh	r2, [r3, #0]
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	1c22      	adds	r2, r4, #0
 80037c0:	801a      	strh	r2, [r3, #0]
 80037c2:	1cbb      	adds	r3, r7, #2
 80037c4:	1c02      	adds	r2, r0, #0
 80037c6:	801a      	strh	r2, [r3, #0]
 80037c8:	003b      	movs	r3, r7
 80037ca:	1c0a      	adds	r2, r1, #0
 80037cc:	801a      	strh	r2, [r3, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 80037ce:	1d3a      	adds	r2, r7, #4
 80037d0:	003b      	movs	r3, r7
 80037d2:	2100      	movs	r1, #0
 80037d4:	5e52      	ldrsh	r2, [r2, r1]
 80037d6:	2100      	movs	r1, #0
 80037d8:	5e5b      	ldrsh	r3, [r3, r1]
 80037da:	429a      	cmp	r2, r3
 80037dc:	dd19      	ble.n	8003812 <fillTriangle+0x6a>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80037de:	2126      	movs	r1, #38	; 0x26
 80037e0:	187b      	adds	r3, r7, r1
 80037e2:	1d3a      	adds	r2, r7, #4
 80037e4:	8812      	ldrh	r2, [r2, #0]
 80037e6:	801a      	strh	r2, [r3, #0]
 80037e8:	1d3b      	adds	r3, r7, #4
 80037ea:	003a      	movs	r2, r7
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	801a      	strh	r2, [r3, #0]
 80037f0:	003b      	movs	r3, r7
 80037f2:	187a      	adds	r2, r7, r1
 80037f4:	8812      	ldrh	r2, [r2, #0]
 80037f6:	801a      	strh	r2, [r3, #0]
 80037f8:	2124      	movs	r1, #36	; 0x24
 80037fa:	187b      	adds	r3, r7, r1
 80037fc:	1dba      	adds	r2, r7, #6
 80037fe:	8812      	ldrh	r2, [r2, #0]
 8003800:	801a      	strh	r2, [r3, #0]
 8003802:	1dbb      	adds	r3, r7, #6
 8003804:	1cba      	adds	r2, r7, #2
 8003806:	8812      	ldrh	r2, [r2, #0]
 8003808:	801a      	strh	r2, [r3, #0]
 800380a:	1cbb      	adds	r3, r7, #2
 800380c:	187a      	adds	r2, r7, r1
 800380e:	8812      	ldrh	r2, [r2, #0]
 8003810:	801a      	strh	r2, [r3, #0]
    }
    if (y1 > y2) {
 8003812:	003a      	movs	r2, r7
 8003814:	214c      	movs	r1, #76	; 0x4c
 8003816:	187b      	adds	r3, r7, r1
 8003818:	2000      	movs	r0, #0
 800381a:	5e12      	ldrsh	r2, [r2, r0]
 800381c:	2000      	movs	r0, #0
 800381e:	5e1b      	ldrsh	r3, [r3, r0]
 8003820:	429a      	cmp	r2, r3
 8003822:	dd1a      	ble.n	800385a <fillTriangle+0xb2>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 8003824:	2022      	movs	r0, #34	; 0x22
 8003826:	183b      	adds	r3, r7, r0
 8003828:	187a      	adds	r2, r7, r1
 800382a:	8812      	ldrh	r2, [r2, #0]
 800382c:	801a      	strh	r2, [r3, #0]
 800382e:	187b      	adds	r3, r7, r1
 8003830:	003a      	movs	r2, r7
 8003832:	8812      	ldrh	r2, [r2, #0]
 8003834:	801a      	strh	r2, [r3, #0]
 8003836:	003b      	movs	r3, r7
 8003838:	183a      	adds	r2, r7, r0
 800383a:	8812      	ldrh	r2, [r2, #0]
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	2120      	movs	r1, #32
 8003840:	187a      	adds	r2, r7, r1
 8003842:	2048      	movs	r0, #72	; 0x48
 8003844:	183b      	adds	r3, r7, r0
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	8013      	strh	r3, [r2, #0]
 800384a:	183b      	adds	r3, r7, r0
 800384c:	1cba      	adds	r2, r7, #2
 800384e:	8812      	ldrh	r2, [r2, #0]
 8003850:	801a      	strh	r2, [r3, #0]
 8003852:	1cbb      	adds	r3, r7, #2
 8003854:	187a      	adds	r2, r7, r1
 8003856:	8812      	ldrh	r2, [r2, #0]
 8003858:	801a      	strh	r2, [r3, #0]
    }
    if (y0 > y1) {
 800385a:	1d3a      	adds	r2, r7, #4
 800385c:	003b      	movs	r3, r7
 800385e:	2100      	movs	r1, #0
 8003860:	5e52      	ldrsh	r2, [r2, r1]
 8003862:	2100      	movs	r1, #0
 8003864:	5e5b      	ldrsh	r3, [r3, r1]
 8003866:	429a      	cmp	r2, r3
 8003868:	dd19      	ble.n	800389e <fillTriangle+0xf6>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800386a:	211e      	movs	r1, #30
 800386c:	187b      	adds	r3, r7, r1
 800386e:	1d3a      	adds	r2, r7, #4
 8003870:	8812      	ldrh	r2, [r2, #0]
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	003a      	movs	r2, r7
 8003878:	8812      	ldrh	r2, [r2, #0]
 800387a:	801a      	strh	r2, [r3, #0]
 800387c:	003b      	movs	r3, r7
 800387e:	187a      	adds	r2, r7, r1
 8003880:	8812      	ldrh	r2, [r2, #0]
 8003882:	801a      	strh	r2, [r3, #0]
 8003884:	211c      	movs	r1, #28
 8003886:	187b      	adds	r3, r7, r1
 8003888:	1dba      	adds	r2, r7, #6
 800388a:	8812      	ldrh	r2, [r2, #0]
 800388c:	801a      	strh	r2, [r3, #0]
 800388e:	1dbb      	adds	r3, r7, #6
 8003890:	1cba      	adds	r2, r7, #2
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	801a      	strh	r2, [r3, #0]
 8003896:	1cbb      	adds	r3, r7, #2
 8003898:	187a      	adds	r2, r7, r1
 800389a:	8812      	ldrh	r2, [r2, #0]
 800389c:	801a      	strh	r2, [r3, #0]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800389e:	1d3a      	adds	r2, r7, #4
 80038a0:	234c      	movs	r3, #76	; 0x4c
 80038a2:	18fb      	adds	r3, r7, r3
 80038a4:	2100      	movs	r1, #0
 80038a6:	5e52      	ldrsh	r2, [r2, r1]
 80038a8:	2100      	movs	r1, #0
 80038aa:	5e5b      	ldrsh	r3, [r3, r1]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d158      	bne.n	8003962 <fillTriangle+0x1ba>
        a = b = x0;
 80038b0:	2034      	movs	r0, #52	; 0x34
 80038b2:	183b      	adds	r3, r7, r0
 80038b4:	1dba      	adds	r2, r7, #6
 80038b6:	8812      	ldrh	r2, [r2, #0]
 80038b8:	801a      	strh	r2, [r3, #0]
 80038ba:	2136      	movs	r1, #54	; 0x36
 80038bc:	187b      	adds	r3, r7, r1
 80038be:	183a      	adds	r2, r7, r0
 80038c0:	8812      	ldrh	r2, [r2, #0]
 80038c2:	801a      	strh	r2, [r3, #0]
        if(x1 < a)      a = x1;
 80038c4:	1cba      	adds	r2, r7, #2
 80038c6:	187b      	adds	r3, r7, r1
 80038c8:	2000      	movs	r0, #0
 80038ca:	5e12      	ldrsh	r2, [r2, r0]
 80038cc:	2000      	movs	r0, #0
 80038ce:	5e1b      	ldrsh	r3, [r3, r0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	da04      	bge.n	80038de <fillTriangle+0x136>
 80038d4:	187b      	adds	r3, r7, r1
 80038d6:	1cba      	adds	r2, r7, #2
 80038d8:	8812      	ldrh	r2, [r2, #0]
 80038da:	801a      	strh	r2, [r3, #0]
 80038dc:	e00c      	b.n	80038f8 <fillTriangle+0x150>
        else if(x1 > b) b = x1;
 80038de:	1cba      	adds	r2, r7, #2
 80038e0:	2134      	movs	r1, #52	; 0x34
 80038e2:	187b      	adds	r3, r7, r1
 80038e4:	2000      	movs	r0, #0
 80038e6:	5e12      	ldrsh	r2, [r2, r0]
 80038e8:	2000      	movs	r0, #0
 80038ea:	5e1b      	ldrsh	r3, [r3, r0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	dd03      	ble.n	80038f8 <fillTriangle+0x150>
 80038f0:	187b      	adds	r3, r7, r1
 80038f2:	1cba      	adds	r2, r7, #2
 80038f4:	8812      	ldrh	r2, [r2, #0]
 80038f6:	801a      	strh	r2, [r3, #0]
        if(x2 < a)      a = x2;
 80038f8:	2048      	movs	r0, #72	; 0x48
 80038fa:	183b      	adds	r3, r7, r0
 80038fc:	2436      	movs	r4, #54	; 0x36
 80038fe:	1939      	adds	r1, r7, r4
 8003900:	2200      	movs	r2, #0
 8003902:	5e9a      	ldrsh	r2, [r3, r2]
 8003904:	2300      	movs	r3, #0
 8003906:	5ecb      	ldrsh	r3, [r1, r3]
 8003908:	429a      	cmp	r2, r3
 800390a:	da04      	bge.n	8003916 <fillTriangle+0x16e>
 800390c:	193a      	adds	r2, r7, r4
 800390e:	183b      	adds	r3, r7, r0
 8003910:	881b      	ldrh	r3, [r3, #0]
 8003912:	8013      	strh	r3, [r2, #0]
 8003914:	e00d      	b.n	8003932 <fillTriangle+0x18a>
        else if(x2 > b) b = x2;
 8003916:	2048      	movs	r0, #72	; 0x48
 8003918:	183b      	adds	r3, r7, r0
 800391a:	2434      	movs	r4, #52	; 0x34
 800391c:	1939      	adds	r1, r7, r4
 800391e:	2200      	movs	r2, #0
 8003920:	5e9a      	ldrsh	r2, [r3, r2]
 8003922:	2300      	movs	r3, #0
 8003924:	5ecb      	ldrsh	r3, [r1, r3]
 8003926:	429a      	cmp	r2, r3
 8003928:	dd03      	ble.n	8003932 <fillTriangle+0x18a>
 800392a:	193a      	adds	r2, r7, r4
 800392c:	183b      	adds	r3, r7, r0
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	8013      	strh	r3, [r2, #0]
        drawFastHLine(a, y0, b-a+1, color);
 8003932:	2334      	movs	r3, #52	; 0x34
 8003934:	18fb      	adds	r3, r7, r3
 8003936:	881a      	ldrh	r2, [r3, #0]
 8003938:	2036      	movs	r0, #54	; 0x36
 800393a:	183b      	adds	r3, r7, r0
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	b29b      	uxth	r3, r3
 8003942:	3301      	adds	r3, #1
 8003944:	b29b      	uxth	r3, r3
 8003946:	b21a      	sxth	r2, r3
 8003948:	2350      	movs	r3, #80	; 0x50
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	881c      	ldrh	r4, [r3, #0]
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	2100      	movs	r1, #0
 8003952:	5e59      	ldrsh	r1, [r3, r1]
 8003954:	183b      	adds	r3, r7, r0
 8003956:	2000      	movs	r0, #0
 8003958:	5e18      	ldrsh	r0, [r3, r0]
 800395a:	0023      	movs	r3, r4
 800395c:	f7ff f994 	bl	8002c88 <drawFastHLine>
        return;
 8003960:	e151      	b.n	8003c06 <fillTriangle+0x45e>
    }

    int16_t
    dx01 = x1 - x0,
 8003962:	1cbb      	adds	r3, r7, #2
 8003964:	881a      	ldrh	r2, [r3, #0]
 8003966:	1dbb      	adds	r3, r7, #6
 8003968:	881b      	ldrh	r3, [r3, #0]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	b29a      	uxth	r2, r3
 800396e:	231a      	movs	r3, #26
 8003970:	18fb      	adds	r3, r7, r3
 8003972:	801a      	strh	r2, [r3, #0]
    dy01 = y1 - y0,
 8003974:	003b      	movs	r3, r7
 8003976:	881a      	ldrh	r2, [r3, #0]
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	b29a      	uxth	r2, r3
 8003980:	2318      	movs	r3, #24
 8003982:	18fb      	adds	r3, r7, r3
 8003984:	801a      	strh	r2, [r3, #0]
    dx02 = x2 - x0,
 8003986:	2048      	movs	r0, #72	; 0x48
 8003988:	183b      	adds	r3, r7, r0
 800398a:	881a      	ldrh	r2, [r3, #0]
 800398c:	1dbb      	adds	r3, r7, #6
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	b29a      	uxth	r2, r3
 8003994:	2316      	movs	r3, #22
 8003996:	18fb      	adds	r3, r7, r3
 8003998:	801a      	strh	r2, [r3, #0]
    dy02 = y2 - y0,
 800399a:	214c      	movs	r1, #76	; 0x4c
 800399c:	187b      	adds	r3, r7, r1
 800399e:	881a      	ldrh	r2, [r3, #0]
 80039a0:	1d3b      	adds	r3, r7, #4
 80039a2:	881b      	ldrh	r3, [r3, #0]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	2314      	movs	r3, #20
 80039aa:	18fb      	adds	r3, r7, r3
 80039ac:	801a      	strh	r2, [r3, #0]
    dx12 = x2 - x1,
 80039ae:	183b      	adds	r3, r7, r0
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	1cbb      	adds	r3, r7, #2
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	2312      	movs	r3, #18
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	801a      	strh	r2, [r3, #0]
    dy12 = y2 - y1;
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	881a      	ldrh	r2, [r3, #0]
 80039c4:	003b      	movs	r3, r7
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	2310      	movs	r3, #16
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	801a      	strh	r2, [r3, #0]
    int32_t
    sa   = 0,
 80039d2:	2300      	movs	r3, #0
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 80039da:	003a      	movs	r2, r7
 80039dc:	187b      	adds	r3, r7, r1
 80039de:	2100      	movs	r1, #0
 80039e0:	5e52      	ldrsh	r2, [r2, r1]
 80039e2:	2100      	movs	r1, #0
 80039e4:	5e5b      	ldrsh	r3, [r3, r1]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d105      	bne.n	80039f6 <fillTriangle+0x24e>
 80039ea:	2330      	movs	r3, #48	; 0x30
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	003a      	movs	r2, r7
 80039f0:	8812      	ldrh	r2, [r2, #0]
 80039f2:	801a      	strh	r2, [r3, #0]
 80039f4:	e006      	b.n	8003a04 <fillTriangle+0x25c>
    else         last = y1-1; // Skip it
 80039f6:	003b      	movs	r3, r7
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	2330      	movs	r3, #48	; 0x30
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	801a      	strh	r2, [r3, #0]

    for(y=y0; y<=last; y++) {
 8003a04:	2332      	movs	r3, #50	; 0x32
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	1d3a      	adds	r2, r7, #4
 8003a0a:	8812      	ldrh	r2, [r2, #0]
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	e065      	b.n	8003adc <fillTriangle+0x334>
        a   = x0 + sa / dy01;
 8003a10:	2318      	movs	r3, #24
 8003a12:	18fb      	adds	r3, r7, r3
 8003a14:	2200      	movs	r2, #0
 8003a16:	5e9b      	ldrsh	r3, [r3, r2]
 8003a18:	0019      	movs	r1, r3
 8003a1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a1c:	f7fc fbfc 	bl	8000218 <__divsi3>
 8003a20:	0003      	movs	r3, r0
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	1dbb      	adds	r3, r7, #6
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	18d3      	adds	r3, r2, r3
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	2436      	movs	r4, #54	; 0x36
 8003a2e:	193b      	adds	r3, r7, r4
 8003a30:	801a      	strh	r2, [r3, #0]
        b   = x0 + sb / dy02;
 8003a32:	2314      	movs	r3, #20
 8003a34:	18fb      	adds	r3, r7, r3
 8003a36:	2200      	movs	r2, #0
 8003a38:	5e9b      	ldrsh	r3, [r3, r2]
 8003a3a:	0019      	movs	r1, r3
 8003a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a3e:	f7fc fbeb 	bl	8000218 <__divsi3>
 8003a42:	0003      	movs	r3, r0
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	1dbb      	adds	r3, r7, #6
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	18d3      	adds	r3, r2, r3
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	2134      	movs	r1, #52	; 0x34
 8003a50:	187b      	adds	r3, r7, r1
 8003a52:	801a      	strh	r2, [r3, #0]
        sa += dx01;
 8003a54:	231a      	movs	r3, #26
 8003a56:	18fb      	adds	r3, r7, r3
 8003a58:	2200      	movs	r2, #0
 8003a5a:	5e9b      	ldrsh	r3, [r3, r2]
 8003a5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a5e:	18d3      	adds	r3, r2, r3
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003a62:	2316      	movs	r3, #22
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	2200      	movs	r2, #0
 8003a68:	5e9b      	ldrsh	r3, [r3, r2]
 8003a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a6c:	18d3      	adds	r3, r2, r3
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003a70:	193a      	adds	r2, r7, r4
 8003a72:	187b      	adds	r3, r7, r1
 8003a74:	2000      	movs	r0, #0
 8003a76:	5e12      	ldrsh	r2, [r2, r0]
 8003a78:	2000      	movs	r0, #0
 8003a7a:	5e1b      	ldrsh	r3, [r3, r0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	dd0c      	ble.n	8003a9a <fillTriangle+0x2f2>
 8003a80:	200c      	movs	r0, #12
 8003a82:	183b      	adds	r3, r7, r0
 8003a84:	193a      	adds	r2, r7, r4
 8003a86:	8812      	ldrh	r2, [r2, #0]
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	193b      	adds	r3, r7, r4
 8003a8c:	187a      	adds	r2, r7, r1
 8003a8e:	8812      	ldrh	r2, [r2, #0]
 8003a90:	801a      	strh	r2, [r3, #0]
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	183a      	adds	r2, r7, r0
 8003a96:	8812      	ldrh	r2, [r2, #0]
 8003a98:	801a      	strh	r2, [r3, #0]
        drawFastHLine(a, y, b-a+1, color);
 8003a9a:	2334      	movs	r3, #52	; 0x34
 8003a9c:	18fb      	adds	r3, r7, r3
 8003a9e:	881a      	ldrh	r2, [r3, #0]
 8003aa0:	2036      	movs	r0, #54	; 0x36
 8003aa2:	183b      	adds	r3, r7, r0
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	b21a      	sxth	r2, r3
 8003ab0:	2350      	movs	r3, #80	; 0x50
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	881c      	ldrh	r4, [r3, #0]
 8003ab6:	2532      	movs	r5, #50	; 0x32
 8003ab8:	197b      	adds	r3, r7, r5
 8003aba:	2100      	movs	r1, #0
 8003abc:	5e59      	ldrsh	r1, [r3, r1]
 8003abe:	183b      	adds	r3, r7, r0
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	5e18      	ldrsh	r0, [r3, r0]
 8003ac4:	0023      	movs	r3, r4
 8003ac6:	f7ff f8df 	bl	8002c88 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8003aca:	0029      	movs	r1, r5
 8003acc:	187b      	adds	r3, r7, r1
 8003ace:	2200      	movs	r2, #0
 8003ad0:	5e9b      	ldrsh	r3, [r3, r2]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	187b      	adds	r3, r7, r1
 8003ada:	801a      	strh	r2, [r3, #0]
 8003adc:	2032      	movs	r0, #50	; 0x32
 8003ade:	183a      	adds	r2, r7, r0
 8003ae0:	2330      	movs	r3, #48	; 0x30
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	5e52      	ldrsh	r2, [r2, r1]
 8003ae8:	2100      	movs	r1, #0
 8003aea:	5e5b      	ldrsh	r3, [r3, r1]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	dd8f      	ble.n	8003a10 <fillTriangle+0x268>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 8003af0:	2312      	movs	r3, #18
 8003af2:	18fb      	adds	r3, r7, r3
 8003af4:	2200      	movs	r2, #0
 8003af6:	5e9b      	ldrsh	r3, [r3, r2]
 8003af8:	183a      	adds	r2, r7, r0
 8003afa:	2100      	movs	r1, #0
 8003afc:	5e51      	ldrsh	r1, [r2, r1]
 8003afe:	003a      	movs	r2, r7
 8003b00:	2400      	movs	r4, #0
 8003b02:	5f12      	ldrsh	r2, [r2, r4]
 8003b04:	1a8a      	subs	r2, r1, r2
 8003b06:	4353      	muls	r3, r2
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8003b0a:	2316      	movs	r3, #22
 8003b0c:	18fb      	adds	r3, r7, r3
 8003b0e:	2200      	movs	r2, #0
 8003b10:	5e9b      	ldrsh	r3, [r3, r2]
 8003b12:	183a      	adds	r2, r7, r0
 8003b14:	2100      	movs	r1, #0
 8003b16:	5e51      	ldrsh	r1, [r2, r1]
 8003b18:	1d3a      	adds	r2, r7, #4
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	5e12      	ldrsh	r2, [r2, r0]
 8003b1e:	1a8a      	subs	r2, r1, r2
 8003b20:	4353      	muls	r3, r2
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 8003b24:	e065      	b.n	8003bf2 <fillTriangle+0x44a>
        a   = x1 + sa / dy12;
 8003b26:	2310      	movs	r3, #16
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	5e9b      	ldrsh	r3, [r3, r2]
 8003b2e:	0019      	movs	r1, r3
 8003b30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b32:	f7fc fb71 	bl	8000218 <__divsi3>
 8003b36:	0003      	movs	r3, r0
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	1cbb      	adds	r3, r7, #2
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	18d3      	adds	r3, r2, r3
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	2436      	movs	r4, #54	; 0x36
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	801a      	strh	r2, [r3, #0]
        b   = x0 + sb / dy02;
 8003b48:	2314      	movs	r3, #20
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	5e9b      	ldrsh	r3, [r3, r2]
 8003b50:	0019      	movs	r1, r3
 8003b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b54:	f7fc fb60 	bl	8000218 <__divsi3>
 8003b58:	0003      	movs	r3, r0
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	1dbb      	adds	r3, r7, #6
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	18d3      	adds	r3, r2, r3
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	2134      	movs	r1, #52	; 0x34
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	801a      	strh	r2, [r3, #0]
        sa += dx12;
 8003b6a:	2312      	movs	r3, #18
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	2200      	movs	r2, #0
 8003b70:	5e9b      	ldrsh	r3, [r3, r2]
 8003b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b74:	18d3      	adds	r3, r2, r3
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003b78:	2316      	movs	r3, #22
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	5e9b      	ldrsh	r3, [r3, r2]
 8003b80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b82:	18d3      	adds	r3, r2, r3
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003b86:	193a      	adds	r2, r7, r4
 8003b88:	187b      	adds	r3, r7, r1
 8003b8a:	2000      	movs	r0, #0
 8003b8c:	5e12      	ldrsh	r2, [r2, r0]
 8003b8e:	2000      	movs	r0, #0
 8003b90:	5e1b      	ldrsh	r3, [r3, r0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	dd0c      	ble.n	8003bb0 <fillTriangle+0x408>
 8003b96:	200e      	movs	r0, #14
 8003b98:	183b      	adds	r3, r7, r0
 8003b9a:	193a      	adds	r2, r7, r4
 8003b9c:	8812      	ldrh	r2, [r2, #0]
 8003b9e:	801a      	strh	r2, [r3, #0]
 8003ba0:	193b      	adds	r3, r7, r4
 8003ba2:	187a      	adds	r2, r7, r1
 8003ba4:	8812      	ldrh	r2, [r2, #0]
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	187b      	adds	r3, r7, r1
 8003baa:	183a      	adds	r2, r7, r0
 8003bac:	8812      	ldrh	r2, [r2, #0]
 8003bae:	801a      	strh	r2, [r3, #0]
        drawFastHLine(a, y, b-a+1, color);
 8003bb0:	2334      	movs	r3, #52	; 0x34
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	2036      	movs	r0, #54	; 0x36
 8003bb8:	183b      	adds	r3, r7, r0
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	b21a      	sxth	r2, r3
 8003bc6:	2350      	movs	r3, #80	; 0x50
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	881c      	ldrh	r4, [r3, #0]
 8003bcc:	2532      	movs	r5, #50	; 0x32
 8003bce:	197b      	adds	r3, r7, r5
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	5e59      	ldrsh	r1, [r3, r1]
 8003bd4:	183b      	adds	r3, r7, r0
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	5e18      	ldrsh	r0, [r3, r0]
 8003bda:	0023      	movs	r3, r4
 8003bdc:	f7ff f854 	bl	8002c88 <drawFastHLine>
    for(; y<=y2; y++) {
 8003be0:	0029      	movs	r1, r5
 8003be2:	187b      	adds	r3, r7, r1
 8003be4:	2200      	movs	r2, #0
 8003be6:	5e9b      	ldrsh	r3, [r3, r2]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	187b      	adds	r3, r7, r1
 8003bf0:	801a      	strh	r2, [r3, #0]
 8003bf2:	2332      	movs	r3, #50	; 0x32
 8003bf4:	18fa      	adds	r2, r7, r3
 8003bf6:	234c      	movs	r3, #76	; 0x4c
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5e52      	ldrsh	r2, [r2, r1]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5e5b      	ldrsh	r3, [r3, r1]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	dd8f      	ble.n	8003b26 <fillTriangle+0x37e>
    }
}
 8003c06:	46bd      	mov	sp, r7
 8003c08:	b00e      	add	sp, #56	; 0x38
 8003c0a:	bdb0      	pop	{r4, r5, r7, pc}

08003c0c <fillScreen>:

void fillScreen(uint16_t color) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	0002      	movs	r2, r0
 8003c14:	1dbb      	adds	r3, r7, #6
 8003c16:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <fillScreen+0x30>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	5e9a      	ldrsh	r2, [r3, r2]
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <fillScreen+0x34>)
 8003c20:	2100      	movs	r1, #0
 8003c22:	5e59      	ldrsh	r1, [r3, r1]
 8003c24:	1dbb      	adds	r3, r7, #6
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	000b      	movs	r3, r1
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	2000      	movs	r0, #0
 8003c30:	f7fe febe 	bl	80029b0 <fillRect>
}
 8003c34:	46c0      	nop			; (mov r8, r8)
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	2000006c 	.word	0x2000006c
 8003c40:	2000006e 	.word	0x2000006e

08003c44 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8003c48:	2380      	movs	r3, #128	; 0x80
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4803      	ldr	r0, [pc, #12]	; (8003c5c <ST7735_Select+0x18>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	0019      	movs	r1, r3
 8003c52:	f003 fe2c 	bl	80078ae <HAL_GPIO_WritePin>
}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	48000400 	.word	0x48000400

08003c60 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	4803      	ldr	r0, [pc, #12]	; (8003c78 <ST7735_Unselect+0x18>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	f003 fe1e 	bl	80078ae <HAL_GPIO_WritePin>
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	48000400 	.word	0x48000400

08003c7c <ST7735_Reset>:

void ST7735_Reset()
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8003c80:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <ST7735_Reset+0x28>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	2104      	movs	r1, #4
 8003c86:	0018      	movs	r0, r3
 8003c88:	f003 fe11 	bl	80078ae <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003c8c:	2005      	movs	r0, #5
 8003c8e:	f002 fe8d 	bl	80069ac <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8003c92:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <ST7735_Reset+0x28>)
 8003c94:	2201      	movs	r2, #1
 8003c96:	2104      	movs	r1, #4
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f003 fe08 	bl	80078ae <HAL_GPIO_WritePin>
}
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	48000400 	.word	0x48000400

08003ca8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	0002      	movs	r2, r0
 8003cb0:	1dfb      	adds	r3, r7, #7
 8003cb2:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_RESET);
 8003cb4:	4b08      	ldr	r3, [pc, #32]	; (8003cd8 <ST7735_WriteCommand+0x30>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2102      	movs	r1, #2
 8003cba:	0018      	movs	r0, r3
 8003cbc:	f003 fdf7 	bl	80078ae <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	425b      	negs	r3, r3
 8003cc4:	1df9      	adds	r1, r7, #7
 8003cc6:	4805      	ldr	r0, [pc, #20]	; (8003cdc <ST7735_WriteCommand+0x34>)
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f004 fb09 	bl	80082e0 <HAL_SPI_Transmit>
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	48000400 	.word	0x48000400
 8003cdc:	200000dc 	.word	0x200000dc

08003ce0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <ST7735_WriteData+0x30>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	2102      	movs	r1, #2
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f003 fddc 	bl	80078ae <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	425b      	negs	r3, r3
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4804      	ldr	r0, [pc, #16]	; (8003d14 <ST7735_WriteData+0x34>)
 8003d02:	f004 faed 	bl	80082e0 <HAL_SPI_Transmit>
}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	48000400 	.word	0x48000400
 8003d14:	200000dc 	.word	0x200000dc

08003d18 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	220f      	movs	r2, #15
 8003d28:	18ba      	adds	r2, r7, r2
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8003d2e:	e04a      	b.n	8003dc6 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	210b      	movs	r1, #11
 8003d38:	187a      	adds	r2, r7, r1
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7ff ffb0 	bl	8003ca8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	607a      	str	r2, [r7, #4]
 8003d4e:	200a      	movs	r0, #10
 8003d50:	183a      	adds	r2, r7, r0
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003d56:	183b      	adds	r3, r7, r0
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	230c      	movs	r3, #12
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	400a      	ands	r2, r1
 8003d64:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8003d66:	183b      	adds	r3, r7, r0
 8003d68:	183a      	adds	r2, r7, r0
 8003d6a:	7812      	ldrb	r2, [r2, #0]
 8003d6c:	217f      	movs	r1, #127	; 0x7f
 8003d6e:	400a      	ands	r2, r1
 8003d70:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8003d72:	183b      	adds	r3, r7, r0
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00c      	beq.n	8003d94 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003d7a:	0004      	movs	r4, r0
 8003d7c:	183b      	adds	r3, r7, r0
 8003d7e:	781a      	ldrb	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	0011      	movs	r1, r2
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff ffab 	bl	8003ce0 <ST7735_WriteData>
            addr += numArgs;
 8003d8a:	193b      	adds	r3, r7, r4
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	18d3      	adds	r3, r2, r3
 8003d92:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003d94:	210c      	movs	r1, #12
 8003d96:	187b      	adds	r3, r7, r1
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d013      	beq.n	8003dc6 <DisplayInit+0xae>
            ms = *addr++;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	607a      	str	r2, [r7, #4]
 8003da4:	781a      	ldrb	r2, [r3, #0]
 8003da6:	187b      	adds	r3, r7, r1
 8003da8:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8003daa:	187b      	adds	r3, r7, r1
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	2bff      	cmp	r3, #255	; 0xff
 8003db0:	d103      	bne.n	8003dba <DisplayInit+0xa2>
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	22fa      	movs	r2, #250	; 0xfa
 8003db6:	0052      	lsls	r2, r2, #1
 8003db8:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8003dba:	230c      	movs	r3, #12
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	f002 fdf3 	bl	80069ac <HAL_Delay>
    while(numCommands--) {
 8003dc6:	220f      	movs	r2, #15
 8003dc8:	18bb      	adds	r3, r7, r2
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	18ba      	adds	r2, r7, r2
 8003dce:	1e59      	subs	r1, r3, #1
 8003dd0:	7011      	strb	r1, [r2, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1ac      	bne.n	8003d30 <DisplayInit+0x18>
        }
    }
}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	46c0      	nop			; (mov r8, r8)
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	b005      	add	sp, #20
 8003dde:	bd90      	pop	{r4, r7, pc}

08003de0 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003de0:	b5b0      	push	{r4, r5, r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	0005      	movs	r5, r0
 8003de8:	000c      	movs	r4, r1
 8003dea:	0010      	movs	r0, r2
 8003dec:	0019      	movs	r1, r3
 8003dee:	1dfb      	adds	r3, r7, #7
 8003df0:	1c2a      	adds	r2, r5, #0
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	1dbb      	adds	r3, r7, #6
 8003df6:	1c22      	adds	r2, r4, #0
 8003df8:	701a      	strb	r2, [r3, #0]
 8003dfa:	1d7b      	adds	r3, r7, #5
 8003dfc:	1c02      	adds	r2, r0, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	1c0a      	adds	r2, r1, #0
 8003e04:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003e06:	202a      	movs	r0, #42	; 0x2a
 8003e08:	f7ff ff4e 	bl	8003ca8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8003e0c:	210c      	movs	r1, #12
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
 8003e14:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <ST7735_SetAddressWindow+0xa8>)
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	18d3      	adds	r3, r2, r3
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	187b      	adds	r3, r7, r1
 8003e22:	705a      	strb	r2, [r3, #1]
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	2200      	movs	r2, #0
 8003e28:	709a      	strb	r2, [r3, #2]
 8003e2a:	4b17      	ldr	r3, [pc, #92]	; (8003e88 <ST7735_SetAddressWindow+0xa8>)
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	1d7b      	adds	r3, r7, #5
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	18d3      	adds	r3, r2, r3
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	187b      	adds	r3, r7, r1
 8003e38:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003e3a:	000c      	movs	r4, r1
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	2104      	movs	r1, #4
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7ff ff4d 	bl	8003ce0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003e46:	202b      	movs	r0, #43	; 0x2b
 8003e48:	f7ff ff2e 	bl	8003ca8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	; (8003e8c <ST7735_SetAddressWindow+0xac>)
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	1dbb      	adds	r3, r7, #6
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	18d3      	adds	r3, r2, r3
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	0021      	movs	r1, r4
 8003e5a:	187b      	adds	r3, r7, r1
 8003e5c:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <ST7735_SetAddressWindow+0xac>)
 8003e60:	781a      	ldrb	r2, [r3, #0]
 8003e62:	1d3b      	adds	r3, r7, #4
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	18d3      	adds	r3, r2, r3
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	187b      	adds	r3, r7, r1
 8003e6c:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2104      	movs	r1, #4
 8003e72:	0018      	movs	r0, r3
 8003e74:	f7ff ff34 	bl	8003ce0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003e78:	202c      	movs	r0, #44	; 0x2c
 8003e7a:	f7ff ff15 	bl	8003ca8 <ST7735_WriteCommand>
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b004      	add	sp, #16
 8003e84:	bdb0      	pop	{r4, r5, r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	20000073 	.word	0x20000073
 8003e8c:	20000074 	.word	0x20000074

08003e90 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	0002      	movs	r2, r0
 8003e98:	1dfb      	adds	r3, r7, #7
 8003e9a:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8003e9c:	f7ff fed2 	bl	8003c44 <ST7735_Select>
    ST7735_Reset();
 8003ea0:	f7ff feec 	bl	8003c7c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <ST7735_Init+0x50>)
 8003ea6:	0018      	movs	r0, r3
 8003ea8:	f7ff ff36 	bl	8003d18 <DisplayInit>
    DisplayInit(init_cmds2);
 8003eac:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <ST7735_Init+0x54>)
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7ff ff32 	bl	8003d18 <DisplayInit>
    DisplayInit(init_cmds3);
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <ST7735_Init+0x58>)
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f7ff ff2e 	bl	8003d18 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8003ebc:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <ST7735_Init+0x5c>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <ST7735_Init+0x60>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8003ec8:	1dfb      	adds	r3, r7, #7
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	0018      	movs	r0, r3
 8003ece:	f000 f811 	bl	8003ef4 <ST7735_SetRotation>
    ST7735_Unselect();
 8003ed2:	f7ff fec5 	bl	8003c60 <ST7735_Unselect>

}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	b002      	add	sp, #8
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)
 8003ee0:	08008ae0 	.word	0x08008ae0
 8003ee4:	08008b18 	.word	0x08008b18
 8003ee8:	08008b28 	.word	0x08008b28
 8003eec:	20000071 	.word	0x20000071
 8003ef0:	20000072 	.word	0x20000072

08003ef4 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	0002      	movs	r2, r0
 8003efc:	1dfb      	adds	r3, r7, #7
 8003efe:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8003f00:	230f      	movs	r3, #15
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8003f08:	1dfb      	adds	r3, r7, #7
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2203      	movs	r2, #3
 8003f0e:	4013      	ands	r3, r2
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <ST7735_SetRotation+0xf8>)
 8003f14:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8003f16:	4b35      	ldr	r3, [pc, #212]	; (8003fec <ST7735_SetRotation+0xf8>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d041      	beq.n	8003fa2 <ST7735_SetRotation+0xae>
 8003f1e:	dc53      	bgt.n	8003fc8 <ST7735_SetRotation+0xd4>
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d02b      	beq.n	8003f7c <ST7735_SetRotation+0x88>
 8003f24:	dc50      	bgt.n	8003fc8 <ST7735_SetRotation+0xd4>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <ST7735_SetRotation+0x3c>
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d013      	beq.n	8003f56 <ST7735_SetRotation+0x62>
 8003f2e:	e04b      	b.n	8003fc8 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8003f30:	230f      	movs	r3, #15
 8003f32:	18fb      	adds	r3, r7, r3
 8003f34:	22c0      	movs	r2, #192	; 0xc0
 8003f36:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003f38:	4b2d      	ldr	r3, [pc, #180]	; (8003ff0 <ST7735_SetRotation+0xfc>)
 8003f3a:	22a0      	movs	r2, #160	; 0xa0
 8003f3c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <ST7735_SetRotation+0x100>)
 8003f40:	2280      	movs	r2, #128	; 0x80
 8003f42:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8003f44:	4b2c      	ldr	r3, [pc, #176]	; (8003ff8 <ST7735_SetRotation+0x104>)
 8003f46:	781a      	ldrb	r2, [r3, #0]
 8003f48:	4b2c      	ldr	r3, [pc, #176]	; (8003ffc <ST7735_SetRotation+0x108>)
 8003f4a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8003f4c:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <ST7735_SetRotation+0x10c>)
 8003f4e:	781a      	ldrb	r2, [r3, #0]
 8003f50:	4b2c      	ldr	r3, [pc, #176]	; (8004004 <ST7735_SetRotation+0x110>)
 8003f52:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003f54:	e038      	b.n	8003fc8 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003f56:	230f      	movs	r3, #15
 8003f58:	18fb      	adds	r3, r7, r3
 8003f5a:	22a0      	movs	r2, #160	; 0xa0
 8003f5c:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003f5e:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <ST7735_SetRotation+0x100>)
 8003f60:	22a0      	movs	r2, #160	; 0xa0
 8003f62:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003f64:	4b22      	ldr	r3, [pc, #136]	; (8003ff0 <ST7735_SetRotation+0xfc>)
 8003f66:	2280      	movs	r2, #128	; 0x80
 8003f68:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003f6a:	4b23      	ldr	r3, [pc, #140]	; (8003ff8 <ST7735_SetRotation+0x104>)
 8003f6c:	781a      	ldrb	r2, [r3, #0]
 8003f6e:	4b25      	ldr	r3, [pc, #148]	; (8004004 <ST7735_SetRotation+0x110>)
 8003f70:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003f72:	4b23      	ldr	r3, [pc, #140]	; (8004000 <ST7735_SetRotation+0x10c>)
 8003f74:	781a      	ldrb	r2, [r3, #0]
 8003f76:	4b21      	ldr	r3, [pc, #132]	; (8003ffc <ST7735_SetRotation+0x108>)
 8003f78:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003f7a:	e025      	b.n	8003fc8 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8003f7c:	230f      	movs	r3, #15
 8003f7e:	18fb      	adds	r3, r7, r3
 8003f80:	2200      	movs	r2, #0
 8003f82:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003f84:	4b1a      	ldr	r3, [pc, #104]	; (8003ff0 <ST7735_SetRotation+0xfc>)
 8003f86:	22a0      	movs	r2, #160	; 0xa0
 8003f88:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003f8a:	4b1a      	ldr	r3, [pc, #104]	; (8003ff4 <ST7735_SetRotation+0x100>)
 8003f8c:	2280      	movs	r2, #128	; 0x80
 8003f8e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8003f90:	4b19      	ldr	r3, [pc, #100]	; (8003ff8 <ST7735_SetRotation+0x104>)
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <ST7735_SetRotation+0x108>)
 8003f96:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8003f98:	4b19      	ldr	r3, [pc, #100]	; (8004000 <ST7735_SetRotation+0x10c>)
 8003f9a:	781a      	ldrb	r2, [r3, #0]
 8003f9c:	4b19      	ldr	r3, [pc, #100]	; (8004004 <ST7735_SetRotation+0x110>)
 8003f9e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003fa0:	e012      	b.n	8003fc8 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003fa2:	230f      	movs	r3, #15
 8003fa4:	18fb      	adds	r3, r7, r3
 8003fa6:	2260      	movs	r2, #96	; 0x60
 8003fa8:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <ST7735_SetRotation+0x100>)
 8003fac:	22a0      	movs	r2, #160	; 0xa0
 8003fae:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <ST7735_SetRotation+0xfc>)
 8003fb2:	2280      	movs	r2, #128	; 0x80
 8003fb4:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <ST7735_SetRotation+0x104>)
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	4b12      	ldr	r3, [pc, #72]	; (8004004 <ST7735_SetRotation+0x110>)
 8003fbc:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003fbe:	4b10      	ldr	r3, [pc, #64]	; (8004000 <ST7735_SetRotation+0x10c>)
 8003fc0:	781a      	ldrb	r2, [r3, #0]
 8003fc2:	4b0e      	ldr	r3, [pc, #56]	; (8003ffc <ST7735_SetRotation+0x108>)
 8003fc4:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003fc6:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 8003fc8:	f7ff fe3c 	bl	8003c44 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8003fcc:	2036      	movs	r0, #54	; 0x36
 8003fce:	f7ff fe6b 	bl	8003ca8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8003fd2:	230f      	movs	r3, #15
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f7ff fe81 	bl	8003ce0 <ST7735_WriteData>
  ST7735_Unselect();
 8003fde:	f7ff fe3f 	bl	8003c60 <ST7735_Unselect>
}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	b004      	add	sp, #16
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	46c0      	nop			; (mov r8, r8)
 8003fec:	20000070 	.word	0x20000070
 8003ff0:	2000006e 	.word	0x2000006e
 8003ff4:	2000006c 	.word	0x2000006c
 8003ff8:	20000071 	.word	0x20000071
 8003ffc:	20000073 	.word	0x20000073
 8004000:	20000072 	.word	0x20000072
 8004004:	20000074 	.word	0x20000074

08004008 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8004008:	b590      	push	{r4, r7, lr}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	0004      	movs	r4, r0
 8004010:	0008      	movs	r0, r1
 8004012:	0011      	movs	r1, r2
 8004014:	1dbb      	adds	r3, r7, #6
 8004016:	1c22      	adds	r2, r4, #0
 8004018:	801a      	strh	r2, [r3, #0]
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	1c02      	adds	r2, r0, #0
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	1cbb      	adds	r3, r7, #2
 8004022:	1c0a      	adds	r2, r1, #0
 8004024:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8004026:	1dbb      	adds	r3, r7, #6
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	4a1c      	ldr	r2, [pc, #112]	; (800409c <ST7735_DrawPixel+0x94>)
 800402c:	2100      	movs	r1, #0
 800402e:	5e52      	ldrsh	r2, [r2, r1]
 8004030:	4293      	cmp	r3, r2
 8004032:	da2f      	bge.n	8004094 <ST7735_DrawPixel+0x8c>
 8004034:	1d3b      	adds	r3, r7, #4
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <ST7735_DrawPixel+0x98>)
 800403a:	2100      	movs	r1, #0
 800403c:	5e52      	ldrsh	r2, [r2, r1]
 800403e:	4293      	cmp	r3, r2
 8004040:	da28      	bge.n	8004094 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8004042:	f7ff fdff 	bl	8003c44 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8004046:	1dbb      	adds	r3, r7, #6
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b2d8      	uxtb	r0, r3
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b2d9      	uxtb	r1, r3
 8004052:	1dbb      	adds	r3, r7, #6
 8004054:	881b      	ldrh	r3, [r3, #0]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	3301      	adds	r3, #1
 800405a:	b2da      	uxtb	r2, r3
 800405c:	1d3b      	adds	r3, r7, #4
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	3301      	adds	r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f7ff febb 	bl	8003de0 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 800406a:	1cbb      	adds	r3, r7, #2
 800406c:	881b      	ldrh	r3, [r3, #0]
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	b29b      	uxth	r3, r3
 8004072:	b2da      	uxtb	r2, r3
 8004074:	210c      	movs	r1, #12
 8004076:	187b      	adds	r3, r7, r1
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	1cbb      	adds	r3, r7, #2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	187b      	adds	r3, r7, r1
 8004082:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8004084:	187b      	adds	r3, r7, r1
 8004086:	2102      	movs	r1, #2
 8004088:	0018      	movs	r0, r3
 800408a:	f7ff fe29 	bl	8003ce0 <ST7735_WriteData>

    ST7735_Unselect();
 800408e:	f7ff fde7 	bl	8003c60 <ST7735_Unselect>
 8004092:	e000      	b.n	8004096 <ST7735_DrawPixel+0x8e>
        return;
 8004094:	46c0      	nop			; (mov r8, r8)
}
 8004096:	46bd      	mov	sp, r7
 8004098:	b005      	add	sp, #20
 800409a:	bd90      	pop	{r4, r7, pc}
 800409c:	2000006c 	.word	0x2000006c
 80040a0:	2000006e 	.word	0x2000006e

080040a4 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80040a4:	b082      	sub	sp, #8
 80040a6:	b5b0      	push	{r4, r5, r7, lr}
 80040a8:	b088      	sub	sp, #32
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	0004      	movs	r4, r0
 80040ae:	0008      	movs	r0, r1
 80040b0:	0011      	movs	r1, r2
 80040b2:	2204      	movs	r2, #4
 80040b4:	2530      	movs	r5, #48	; 0x30
 80040b6:	1952      	adds	r2, r2, r5
 80040b8:	19d2      	adds	r2, r2, r7
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	1dbb      	adds	r3, r7, #6
 80040be:	1c22      	adds	r2, r4, #0
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	1c02      	adds	r2, r0, #0
 80040c6:	801a      	strh	r2, [r3, #0]
 80040c8:	1cfb      	adds	r3, r7, #3
 80040ca:	1c0a      	adds	r2, r1, #0
 80040cc:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80040ce:	1dbb      	adds	r3, r7, #6
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	b2d8      	uxtb	r0, r3
 80040d4:	1d3b      	adds	r3, r7, #4
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b2d9      	uxtb	r1, r3
 80040da:	1dbb      	adds	r3, r7, #6
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b2da      	uxtb	r2, r3
 80040e0:	2304      	movs	r3, #4
 80040e2:	195b      	adds	r3, r3, r5
 80040e4:	19db      	adds	r3, r3, r7
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	18d3      	adds	r3, r2, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b2dc      	uxtb	r4, r3
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	2304      	movs	r3, #4
 80040f8:	195b      	adds	r3, r3, r5
 80040fa:	19db      	adds	r3, r3, r7
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	18d3      	adds	r3, r2, r3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b2db      	uxtb	r3, r3
 8004106:	0022      	movs	r2, r4
 8004108:	f7ff fe6a 	bl	8003de0 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800410c:	2300      	movs	r3, #0
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	e053      	b.n	80041ba <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 8004112:	2304      	movs	r3, #4
 8004114:	2030      	movs	r0, #48	; 0x30
 8004116:	181b      	adds	r3, r3, r0
 8004118:	19db      	adds	r3, r3, r7
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	1cfb      	adds	r3, r7, #3
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	3b20      	subs	r3, #32
 8004122:	2104      	movs	r1, #4
 8004124:	1809      	adds	r1, r1, r0
 8004126:	19c9      	adds	r1, r1, r7
 8004128:	7849      	ldrb	r1, [r1, #1]
 800412a:	434b      	muls	r3, r1
 800412c:	0019      	movs	r1, r3
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	18cb      	adds	r3, r1, r3
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	18d3      	adds	r3, r2, r3
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800413a:	2300      	movs	r3, #0
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e030      	b.n	80041a2 <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	409a      	lsls	r2, r3
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	021b      	lsls	r3, r3, #8
 800414a:	4013      	ands	r3, r2
 800414c:	d013      	beq.n	8004176 <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800414e:	203c      	movs	r0, #60	; 0x3c
 8004150:	183b      	adds	r3, r7, r0
 8004152:	881b      	ldrh	r3, [r3, #0]
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	b29b      	uxth	r3, r3
 8004158:	b2da      	uxtb	r2, r3
 800415a:	2110      	movs	r1, #16
 800415c:	187b      	adds	r3, r7, r1
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	183b      	adds	r3, r7, r0
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	187b      	adds	r3, r7, r1
 8004168:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 800416a:	187b      	adds	r3, r7, r1
 800416c:	2102      	movs	r1, #2
 800416e:	0018      	movs	r0, r3
 8004170:	f7ff fdb6 	bl	8003ce0 <ST7735_WriteData>
 8004174:	e012      	b.n	800419c <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8004176:	2040      	movs	r0, #64	; 0x40
 8004178:	183b      	adds	r3, r7, r0
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	0a1b      	lsrs	r3, r3, #8
 800417e:	b29b      	uxth	r3, r3
 8004180:	b2da      	uxtb	r2, r3
 8004182:	210c      	movs	r1, #12
 8004184:	187b      	adds	r3, r7, r1
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	183b      	adds	r3, r7, r0
 800418a:	881b      	ldrh	r3, [r3, #0]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	187b      	adds	r3, r7, r1
 8004190:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8004192:	187b      	adds	r3, r7, r1
 8004194:	2102      	movs	r1, #2
 8004196:	0018      	movs	r0, r3
 8004198:	f7ff fda2 	bl	8003ce0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	3301      	adds	r3, #1
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	2304      	movs	r3, #4
 80041a4:	2230      	movs	r2, #48	; 0x30
 80041a6:	189b      	adds	r3, r3, r2
 80041a8:	19db      	adds	r3, r3, r7
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	001a      	movs	r2, r3
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d3c5      	bcc.n	8004140 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	3301      	adds	r3, #1
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	2304      	movs	r3, #4
 80041bc:	2230      	movs	r2, #48	; 0x30
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	19db      	adds	r3, r3, r7
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	001a      	movs	r2, r3
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d3a2      	bcc.n	8004112 <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	46bd      	mov	sp, r7
 80041d2:	b008      	add	sp, #32
 80041d4:	bcb0      	pop	{r4, r5, r7}
 80041d6:	bc08      	pop	{r3}
 80041d8:	b002      	add	sp, #8
 80041da:	4718      	bx	r3

080041dc <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80041dc:	b082      	sub	sp, #8
 80041de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e0:	b087      	sub	sp, #28
 80041e2:	af04      	add	r7, sp, #16
 80041e4:	603a      	str	r2, [r7, #0]
 80041e6:	2204      	movs	r2, #4
 80041e8:	2418      	movs	r4, #24
 80041ea:	1912      	adds	r2, r2, r4
 80041ec:	2408      	movs	r4, #8
 80041ee:	46a4      	mov	ip, r4
 80041f0:	44bc      	add	ip, r7
 80041f2:	4462      	add	r2, ip
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	1dbb      	adds	r3, r7, #6
 80041f8:	1c02      	adds	r2, r0, #0
 80041fa:	801a      	strh	r2, [r3, #0]
 80041fc:	1d3b      	adds	r3, r7, #4
 80041fe:	1c0a      	adds	r2, r1, #0
 8004200:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 8004202:	f7ff fd1f 	bl	8003c44 <ST7735_Select>

    while(*str) {
 8004206:	e067      	b.n	80042d8 <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 8004208:	1dbb      	adds	r3, r7, #6
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	2204      	movs	r2, #4
 800420e:	2118      	movs	r1, #24
 8004210:	1852      	adds	r2, r2, r1
 8004212:	2008      	movs	r0, #8
 8004214:	4684      	mov	ip, r0
 8004216:	44bc      	add	ip, r7
 8004218:	4462      	add	r2, ip
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	189b      	adds	r3, r3, r2
 800421e:	4a36      	ldr	r2, [pc, #216]	; (80042f8 <ST7735_WriteString+0x11c>)
 8004220:	2000      	movs	r0, #0
 8004222:	5e12      	ldrsh	r2, [r2, r0]
 8004224:	4293      	cmp	r3, r2
 8004226:	db27      	blt.n	8004278 <ST7735_WriteString+0x9c>
            x = 0;
 8004228:	1dbb      	adds	r3, r7, #6
 800422a:	2200      	movs	r2, #0
 800422c:	801a      	strh	r2, [r3, #0]
            y += font.height;
 800422e:	2304      	movs	r3, #4
 8004230:	0008      	movs	r0, r1
 8004232:	185b      	adds	r3, r3, r1
 8004234:	2208      	movs	r2, #8
 8004236:	4694      	mov	ip, r2
 8004238:	44bc      	add	ip, r7
 800423a:	4463      	add	r3, ip
 800423c:	785b      	ldrb	r3, [r3, #1]
 800423e:	b299      	uxth	r1, r3
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	1d3a      	adds	r2, r7, #4
 8004244:	8812      	ldrh	r2, [r2, #0]
 8004246:	188a      	adds	r2, r1, r2
 8004248:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	881b      	ldrh	r3, [r3, #0]
 800424e:	2204      	movs	r2, #4
 8004250:	1812      	adds	r2, r2, r0
 8004252:	2108      	movs	r1, #8
 8004254:	468c      	mov	ip, r1
 8004256:	44bc      	add	ip, r7
 8004258:	4462      	add	r2, ip
 800425a:	7852      	ldrb	r2, [r2, #1]
 800425c:	189b      	adds	r3, r3, r2
 800425e:	4a27      	ldr	r2, [pc, #156]	; (80042fc <ST7735_WriteString+0x120>)
 8004260:	2100      	movs	r1, #0
 8004262:	5e52      	ldrsh	r2, [r2, r1]
 8004264:	4293      	cmp	r3, r2
 8004266:	da3c      	bge.n	80042e2 <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b20      	cmp	r3, #32
 800426e:	d103      	bne.n	8004278 <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	3301      	adds	r3, #1
 8004274:	603b      	str	r3, [r7, #0]
                continue;
 8004276:	e02f      	b.n	80042d8 <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	781d      	ldrb	r5, [r3, #0]
 800427c:	2304      	movs	r3, #4
 800427e:	2618      	movs	r6, #24
 8004280:	199b      	adds	r3, r3, r6
 8004282:	2208      	movs	r2, #8
 8004284:	4694      	mov	ip, r2
 8004286:	44bc      	add	ip, r7
 8004288:	4463      	add	r3, ip
 800428a:	1d3a      	adds	r2, r7, #4
 800428c:	8814      	ldrh	r4, [r2, #0]
 800428e:	1dba      	adds	r2, r7, #6
 8004290:	8810      	ldrh	r0, [r2, #0]
 8004292:	2228      	movs	r2, #40	; 0x28
 8004294:	2108      	movs	r1, #8
 8004296:	1852      	adds	r2, r2, r1
 8004298:	19d2      	adds	r2, r2, r7
 800429a:	8812      	ldrh	r2, [r2, #0]
 800429c:	9202      	str	r2, [sp, #8]
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	1852      	adds	r2, r2, r1
 80042a2:	19d2      	adds	r2, r2, r7
 80042a4:	8812      	ldrh	r2, [r2, #0]
 80042a6:	9201      	str	r2, [sp, #4]
 80042a8:	466a      	mov	r2, sp
 80042aa:	6859      	ldr	r1, [r3, #4]
 80042ac:	6011      	str	r1, [r2, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	002a      	movs	r2, r5
 80042b2:	0021      	movs	r1, r4
 80042b4:	f7ff fef6 	bl	80040a4 <ST7735_WriteChar>
        x += font.width;
 80042b8:	2304      	movs	r3, #4
 80042ba:	199b      	adds	r3, r3, r6
 80042bc:	2208      	movs	r2, #8
 80042be:	4694      	mov	ip, r2
 80042c0:	44bc      	add	ip, r7
 80042c2:	4463      	add	r3, ip
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	b299      	uxth	r1, r3
 80042c8:	1dbb      	adds	r3, r7, #6
 80042ca:	1dba      	adds	r2, r7, #6
 80042cc:	8812      	ldrh	r2, [r2, #0]
 80042ce:	188a      	adds	r2, r1, r2
 80042d0:	801a      	strh	r2, [r3, #0]
        str++;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	603b      	str	r3, [r7, #0]
    while(*str) {
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d193      	bne.n	8004208 <ST7735_WriteString+0x2c>
 80042e0:	e000      	b.n	80042e4 <ST7735_WriteString+0x108>
                break;
 80042e2:	46c0      	nop			; (mov r8, r8)
    }

    ST7735_Unselect();
 80042e4:	f7ff fcbc 	bl	8003c60 <ST7735_Unselect>
}
 80042e8:	46c0      	nop			; (mov r8, r8)
 80042ea:	46bd      	mov	sp, r7
 80042ec:	b003      	add	sp, #12
 80042ee:	bcf0      	pop	{r4, r5, r6, r7}
 80042f0:	bc08      	pop	{r3}
 80042f2:	b002      	add	sp, #8
 80042f4:	4718      	bx	r3
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	2000006c 	.word	0x2000006c
 80042fc:	2000006e 	.word	0x2000006e

08004300 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8004300:	b5b0      	push	{r4, r5, r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	0005      	movs	r5, r0
 8004308:	000c      	movs	r4, r1
 800430a:	0010      	movs	r0, r2
 800430c:	0019      	movs	r1, r3
 800430e:	1dbb      	adds	r3, r7, #6
 8004310:	1c2a      	adds	r2, r5, #0
 8004312:	801a      	strh	r2, [r3, #0]
 8004314:	1d3b      	adds	r3, r7, #4
 8004316:	1c22      	adds	r2, r4, #0
 8004318:	801a      	strh	r2, [r3, #0]
 800431a:	1cbb      	adds	r3, r7, #2
 800431c:	1c02      	adds	r2, r0, #0
 800431e:	801a      	strh	r2, [r3, #0]
 8004320:	003b      	movs	r3, r7
 8004322:	1c0a      	adds	r2, r1, #0
 8004324:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 8004326:	1dbb      	adds	r3, r7, #6
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	4a49      	ldr	r2, [pc, #292]	; (8004450 <ST7735_FillRectangle+0x150>)
 800432c:	2100      	movs	r1, #0
 800432e:	5e52      	ldrsh	r2, [r2, r1]
 8004330:	4293      	cmp	r3, r2
 8004332:	db00      	blt.n	8004336 <ST7735_FillRectangle+0x36>
 8004334:	e087      	b.n	8004446 <ST7735_FillRectangle+0x146>
 8004336:	1d3b      	adds	r3, r7, #4
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	4a46      	ldr	r2, [pc, #280]	; (8004454 <ST7735_FillRectangle+0x154>)
 800433c:	2100      	movs	r1, #0
 800433e:	5e52      	ldrsh	r2, [r2, r1]
 8004340:	4293      	cmp	r3, r2
 8004342:	db00      	blt.n	8004346 <ST7735_FillRectangle+0x46>
 8004344:	e07f      	b.n	8004446 <ST7735_FillRectangle+0x146>
    if((x + w - 1) >= _width) w = _width - x;
 8004346:	1dbb      	adds	r3, r7, #6
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	1cbb      	adds	r3, r7, #2
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	18d3      	adds	r3, r2, r3
 8004350:	4a3f      	ldr	r2, [pc, #252]	; (8004450 <ST7735_FillRectangle+0x150>)
 8004352:	2100      	movs	r1, #0
 8004354:	5e52      	ldrsh	r2, [r2, r1]
 8004356:	4293      	cmp	r3, r2
 8004358:	dd08      	ble.n	800436c <ST7735_FillRectangle+0x6c>
 800435a:	4b3d      	ldr	r3, [pc, #244]	; (8004450 <ST7735_FillRectangle+0x150>)
 800435c:	2200      	movs	r2, #0
 800435e:	5e9b      	ldrsh	r3, [r3, r2]
 8004360:	b299      	uxth	r1, r3
 8004362:	1cbb      	adds	r3, r7, #2
 8004364:	1dba      	adds	r2, r7, #6
 8004366:	8812      	ldrh	r2, [r2, #0]
 8004368:	1a8a      	subs	r2, r1, r2
 800436a:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 800436c:	1d3b      	adds	r3, r7, #4
 800436e:	881a      	ldrh	r2, [r3, #0]
 8004370:	003b      	movs	r3, r7
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	18d3      	adds	r3, r2, r3
 8004376:	4a37      	ldr	r2, [pc, #220]	; (8004454 <ST7735_FillRectangle+0x154>)
 8004378:	2100      	movs	r1, #0
 800437a:	5e52      	ldrsh	r2, [r2, r1]
 800437c:	4293      	cmp	r3, r2
 800437e:	dd08      	ble.n	8004392 <ST7735_FillRectangle+0x92>
 8004380:	4b34      	ldr	r3, [pc, #208]	; (8004454 <ST7735_FillRectangle+0x154>)
 8004382:	2200      	movs	r2, #0
 8004384:	5e9b      	ldrsh	r3, [r3, r2]
 8004386:	b299      	uxth	r1, r3
 8004388:	003b      	movs	r3, r7
 800438a:	1d3a      	adds	r2, r7, #4
 800438c:	8812      	ldrh	r2, [r2, #0]
 800438e:	1a8a      	subs	r2, r1, r2
 8004390:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8004392:	f7ff fc57 	bl	8003c44 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b2d8      	uxtb	r0, r3
 800439c:	1d3b      	adds	r3, r7, #4
 800439e:	881b      	ldrh	r3, [r3, #0]
 80043a0:	b2d9      	uxtb	r1, r3
 80043a2:	1dbb      	adds	r3, r7, #6
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	1cbb      	adds	r3, r7, #2
 80043aa:	881b      	ldrh	r3, [r3, #0]
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	18d3      	adds	r3, r2, r3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b2dc      	uxtb	r4, r3
 80043b6:	1d3b      	adds	r3, r7, #4
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	003b      	movs	r3, r7
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	18d3      	adds	r3, r2, r3
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	0022      	movs	r2, r4
 80043cc:	f7ff fd08 	bl	8003de0 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80043d0:	2120      	movs	r1, #32
 80043d2:	187b      	adds	r3, r7, r1
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b2da      	uxtb	r2, r3
 80043dc:	200c      	movs	r0, #12
 80043de:	183b      	adds	r3, r7, r0
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	187b      	adds	r3, r7, r1
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	183b      	adds	r3, r7, r0
 80043ea:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 80043ec:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <ST7735_FillRectangle+0x158>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	2102      	movs	r1, #2
 80043f2:	0018      	movs	r0, r3
 80043f4:	f003 fa5b 	bl	80078ae <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	003a      	movs	r2, r7
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	801a      	strh	r2, [r3, #0]
 8004400:	e01a      	b.n	8004438 <ST7735_FillRectangle+0x138>
        for(x = w; x > 0; x--) {
 8004402:	1dbb      	adds	r3, r7, #6
 8004404:	1cba      	adds	r2, r7, #2
 8004406:	8812      	ldrh	r2, [r2, #0]
 8004408:	801a      	strh	r2, [r3, #0]
 800440a:	e00c      	b.n	8004426 <ST7735_FillRectangle+0x126>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800440c:	2301      	movs	r3, #1
 800440e:	425b      	negs	r3, r3
 8004410:	220c      	movs	r2, #12
 8004412:	18b9      	adds	r1, r7, r2
 8004414:	4811      	ldr	r0, [pc, #68]	; (800445c <ST7735_FillRectangle+0x15c>)
 8004416:	2202      	movs	r2, #2
 8004418:	f003 ff62 	bl	80082e0 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800441c:	1dbb      	adds	r3, r7, #6
 800441e:	881a      	ldrh	r2, [r3, #0]
 8004420:	1dbb      	adds	r3, r7, #6
 8004422:	3a01      	subs	r2, #1
 8004424:	801a      	strh	r2, [r3, #0]
 8004426:	1dbb      	adds	r3, r7, #6
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1ee      	bne.n	800440c <ST7735_FillRectangle+0x10c>
    for(y = h; y > 0; y--) {
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	881a      	ldrh	r2, [r3, #0]
 8004432:	1d3b      	adds	r3, r7, #4
 8004434:	3a01      	subs	r2, #1
 8004436:	801a      	strh	r2, [r3, #0]
 8004438:	1d3b      	adds	r3, r7, #4
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e0      	bne.n	8004402 <ST7735_FillRectangle+0x102>
        }
    }

    ST7735_Unselect();
 8004440:	f7ff fc0e 	bl	8003c60 <ST7735_Unselect>
 8004444:	e000      	b.n	8004448 <ST7735_FillRectangle+0x148>
    if((x >= _width) || (y >= _height)) return;
 8004446:	46c0      	nop			; (mov r8, r8)
}
 8004448:	46bd      	mov	sp, r7
 800444a:	b004      	add	sp, #16
 800444c:	bdb0      	pop	{r4, r5, r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	2000006c 	.word	0x2000006c
 8004454:	2000006e 	.word	0x2000006e
 8004458:	48000400 	.word	0x48000400
 800445c:	200000dc 	.word	0x200000dc

08004460 <createButton>:
#include "GFX_FUNCTIONS.h"
#include "graphicElements.h"


ELEMENT createButton(uint8_t btnX, uint8_t btnY, const char *text, uint16_t bgdColour, uint16_t bgdColour2, void (*btnAction)(), uint16_t arg)
{
 8004460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004462:	b095      	sub	sp, #84	; 0x54
 8004464:	af04      	add	r7, sp, #16
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	0008      	movs	r0, r1
 800446a:	0011      	movs	r1, r2
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	240b      	movs	r4, #11
 8004470:	193b      	adds	r3, r7, r4
 8004472:	1c02      	adds	r2, r0, #0
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	200a      	movs	r0, #10
 8004478:	183b      	adds	r3, r7, r0
 800447a:	1c0a      	adds	r2, r1, #0
 800447c:	701a      	strb	r2, [r3, #0]
	 *  |  TEXT	 |
	 *  |________|
	 *
	 */

	uint8_t textLen = 0;
 800447e:	233f      	movs	r3, #63	; 0x3f
 8004480:	18fb      	adds	r3, r7, r3
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
	uint16_t dimW = 1;
 8004486:	233c      	movs	r3, #60	; 0x3c
 8004488:	18fb      	adds	r3, r7, r3
 800448a:	2201      	movs	r2, #1
 800448c:	801a      	strh	r2, [r3, #0]
	uint8_t dimH = 1;
 800448e:	233b      	movs	r3, #59	; 0x3b
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]

	ELEMENT btnElement;

	btnElement.elemtentType = BUTTON;
 8004496:	2114      	movs	r1, #20
 8004498:	187b      	adds	r3, r7, r1
 800449a:	2201      	movs	r2, #1
 800449c:	701a      	strb	r2, [r3, #0]
	btnElement.btn.btnX = btnX;
 800449e:	187b      	adds	r3, r7, r1
 80044a0:	193a      	adds	r2, r7, r4
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	711a      	strb	r2, [r3, #4]
	btnElement.btn.btnY = btnY;
 80044a6:	187b      	adds	r3, r7, r1
 80044a8:	183a      	adds	r2, r7, r0
 80044aa:	7812      	ldrb	r2, [r2, #0]
 80044ac:	715a      	strb	r2, [r3, #5]
	btnElement.btn.btnText = text;
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	60da      	str	r2, [r3, #12]
	btnElement.btn.btnColour = bgdColour;
 80044b4:	187a      	adds	r2, r7, r1
 80044b6:	2350      	movs	r3, #80	; 0x50
 80044b8:	2008      	movs	r0, #8
 80044ba:	181b      	adds	r3, r3, r0
 80044bc:	19db      	adds	r3, r3, r7
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	80d3      	strh	r3, [r2, #6]
	btnElement.btn.btnColour2 = bgdColour2;
 80044c2:	187b      	adds	r3, r7, r1
 80044c4:	2254      	movs	r2, #84	; 0x54
 80044c6:	1812      	adds	r2, r2, r0
 80044c8:	19d2      	adds	r2, r2, r7
 80044ca:	8812      	ldrh	r2, [r2, #0]
 80044cc:	811a      	strh	r2, [r3, #8]

	btnElement.btn.btnAction = btnAction; //buttonChangeColour;
 80044ce:	187b      	adds	r3, r7, r1
 80044d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044d2:	611a      	str	r2, [r3, #16]
	btnElement.btn.btnArg = arg;
 80044d4:	187b      	adds	r3, r7, r1
 80044d6:	225c      	movs	r2, #92	; 0x5c
 80044d8:	1812      	adds	r2, r2, r0
 80044da:	19d2      	adds	r2, r2, r7
 80044dc:	8812      	ldrh	r2, [r2, #0]
 80044de:	829a      	strh	r2, [r3, #20]

	while(text[textLen] != 0)
 80044e0:	e005      	b.n	80044ee <createButton+0x8e>
		textLen++;
 80044e2:	213f      	movs	r1, #63	; 0x3f
 80044e4:	187b      	adds	r3, r7, r1
 80044e6:	781a      	ldrb	r2, [r3, #0]
 80044e8:	187b      	adds	r3, r7, r1
 80044ea:	3201      	adds	r2, #1
 80044ec:	701a      	strb	r2, [r3, #0]
	while(text[textLen] != 0)
 80044ee:	213f      	movs	r1, #63	; 0x3f
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	18d3      	adds	r3, r2, r3
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f1      	bne.n	80044e2 <createButton+0x82>


	dimW = ( textLen * 7 ) + 5;
 80044fe:	187b      	adds	r3, r7, r1
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	1c1a      	adds	r2, r3, #0
 8004506:	00d2      	lsls	r2, r2, #3
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	b29a      	uxth	r2, r3
 800450c:	243c      	movs	r4, #60	; 0x3c
 800450e:	193b      	adds	r3, r7, r4
 8004510:	3205      	adds	r2, #5
 8004512:	801a      	strh	r2, [r3, #0]
	dimH = ( 10  + 5 );
 8004514:	253b      	movs	r5, #59	; 0x3b
 8004516:	197b      	adds	r3, r7, r5
 8004518:	220f      	movs	r2, #15
 800451a:	701a      	strb	r2, [r3, #0]

	fillRoundRect(btnX, btnY, dimW, dimH, 2, bgdColour);
 800451c:	260b      	movs	r6, #11
 800451e:	19bb      	adds	r3, r7, r6
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	b218      	sxth	r0, r3
 8004524:	230a      	movs	r3, #10
 8004526:	18fb      	adds	r3, r7, r3
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	b219      	sxth	r1, r3
 800452c:	193b      	adds	r3, r7, r4
 800452e:	2400      	movs	r4, #0
 8004530:	5f1a      	ldrsh	r2, [r3, r4]
 8004532:	197b      	adds	r3, r7, r5
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b21c      	sxth	r4, r3
 8004538:	2550      	movs	r5, #80	; 0x50
 800453a:	2308      	movs	r3, #8
 800453c:	18ed      	adds	r5, r5, r3
 800453e:	19eb      	adds	r3, r5, r7
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	2302      	movs	r3, #2
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	0023      	movs	r3, r4
 800454a:	f7ff f875 	bl	8003638 <fillRoundRect>
	ST7735_WriteString(btnX+3, btnY+3, text, Font_7x10, WHITE, bgdColour);
 800454e:	19bb      	adds	r3, r7, r6
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b29b      	uxth	r3, r3
 8004554:	3303      	adds	r3, #3
 8004556:	b298      	uxth	r0, r3
 8004558:	230a      	movs	r3, #10
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	3303      	adds	r3, #3
 8004562:	b29c      	uxth	r4, r3
 8004564:	4b0f      	ldr	r3, [pc, #60]	; (80045a4 <createButton+0x144>)
 8004566:	687d      	ldr	r5, [r7, #4]
 8004568:	2250      	movs	r2, #80	; 0x50
 800456a:	2108      	movs	r1, #8
 800456c:	1852      	adds	r2, r2, r1
 800456e:	19d2      	adds	r2, r2, r7
 8004570:	8812      	ldrh	r2, [r2, #0]
 8004572:	9202      	str	r2, [sp, #8]
 8004574:	4a0c      	ldr	r2, [pc, #48]	; (80045a8 <createButton+0x148>)
 8004576:	9201      	str	r2, [sp, #4]
 8004578:	466a      	mov	r2, sp
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	6011      	str	r1, [r2, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	002a      	movs	r2, r5
 8004582:	0021      	movs	r1, r4
 8004584:	f7ff fe2a 	bl	80041dc <ST7735_WriteString>

    return btnElement;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2214      	movs	r2, #20
 800458c:	18ba      	adds	r2, r7, r2
 800458e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004590:	c313      	stmia	r3!, {r0, r1, r4}
 8004592:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004594:	c313      	stmia	r3!, {r0, r1, r4}
 8004596:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004598:	c313      	stmia	r3!, {r0, r1, r4}

}
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	46bd      	mov	sp, r7
 800459e:	b011      	add	sp, #68	; 0x44
 80045a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	20000000 	.word	0x20000000
 80045a8:	0000ffff 	.word	0x0000ffff

080045ac <createEditNumBox>:


ELEMENT createEditNumBox(uint8_t textX, uint8_t textY, const char *text, uint16_t bgdTextColor, uint8_t num, uint16_t bgdNumcolor)
{
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	b093      	sub	sp, #76	; 0x4c
 80045b0:	af04      	add	r7, sp, #16
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	0008      	movs	r0, r1
 80045b6:	0011      	movs	r1, r2
 80045b8:	607b      	str	r3, [r7, #4]
 80045ba:	240b      	movs	r4, #11
 80045bc:	193b      	adds	r3, r7, r4
 80045be:	1c02      	adds	r2, r0, #0
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	250a      	movs	r5, #10
 80045c4:	197b      	adds	r3, r7, r5
 80045c6:	1c0a      	adds	r2, r1, #0
 80045c8:	701a      	strb	r2, [r3, #0]

	ELEMENT nBoxElement;

	char numToChar[2];

	nBoxElement.elemtentType = EDITNUMBOX;
 80045ca:	2014      	movs	r0, #20
 80045cc:	183b      	adds	r3, r7, r0
 80045ce:	2202      	movs	r2, #2
 80045d0:	701a      	strb	r2, [r3, #0]
	nBoxElement.nBox.textX = textX;
 80045d2:	183b      	adds	r3, r7, r0
 80045d4:	193a      	adds	r2, r7, r4
 80045d6:	7812      	ldrb	r2, [r2, #0]
 80045d8:	761a      	strb	r2, [r3, #24]
	nBoxElement.nBox.textY = textY;
 80045da:	183b      	adds	r3, r7, r0
 80045dc:	197a      	adds	r2, r7, r5
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	765a      	strb	r2, [r3, #25]
	nBoxElement.nBox.textColour = bgdTextColor;
 80045e2:	183a      	adds	r2, r7, r0
 80045e4:	2348      	movs	r3, #72	; 0x48
 80045e6:	2608      	movs	r6, #8
 80045e8:	199b      	adds	r3, r3, r6
 80045ea:	19db      	adds	r3, r3, r7
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	8353      	strh	r3, [r2, #26]
	nBoxElement.nBox.boxText = text;
 80045f0:	183b      	adds	r3, r7, r0
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	61da      	str	r2, [r3, #28]
	nBoxElement.nBox.boxNum = num;
 80045f6:	183b      	adds	r3, r7, r0
 80045f8:	244c      	movs	r4, #76	; 0x4c
 80045fa:	19a2      	adds	r2, r4, r6
 80045fc:	19d2      	adds	r2, r2, r7
 80045fe:	2120      	movs	r1, #32
 8004600:	7812      	ldrb	r2, [r2, #0]
 8004602:	545a      	strb	r2, [r3, r1]
	nBoxElement.nBox.boxColor = bgdNumcolor;
 8004604:	2350      	movs	r3, #80	; 0x50
 8004606:	199b      	adds	r3, r3, r6
 8004608:	19db      	adds	r3, r3, r7
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b2d9      	uxtb	r1, r3
 800460e:	183b      	adds	r3, r7, r0
 8004610:	2221      	movs	r2, #33	; 0x21
 8004612:	5499      	strb	r1, [r3, r2]


	if(num > 9)
 8004614:	19a3      	adds	r3, r4, r6
 8004616:	19db      	adds	r3, r3, r7
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b09      	cmp	r3, #9
 800461c:	d927      	bls.n	800466e <createEditNumBox+0xc2>
	{
		numToChar[0] = ( num / 10 ) + 0x30;
 800461e:	19a3      	adds	r3, r4, r6
 8004620:	19db      	adds	r3, r3, r7
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	210a      	movs	r1, #10
 8004626:	0018      	movs	r0, r3
 8004628:	f7fb fd6c 	bl	8000104 <__udivsi3>
 800462c:	0003      	movs	r3, r0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	3330      	adds	r3, #48	; 0x30
 8004632:	b2da      	uxtb	r2, r3
 8004634:	2510      	movs	r5, #16
 8004636:	197b      	adds	r3, r7, r5
 8004638:	701a      	strb	r2, [r3, #0]
		numToChar[1] = ( num - ( (num / 10) * 10 ) ) + 0x30;
 800463a:	19a3      	adds	r3, r4, r6
 800463c:	19db      	adds	r3, r3, r7
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	210a      	movs	r1, #10
 8004642:	0018      	movs	r0, r3
 8004644:	f7fb fd5e 	bl	8000104 <__udivsi3>
 8004648:	0003      	movs	r3, r0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	1c1a      	adds	r2, r3, #0
 800464e:	0152      	lsls	r2, r2, #5
 8004650:	1ad2      	subs	r2, r2, r3
 8004652:	0092      	lsls	r2, r2, #2
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	18db      	adds	r3, r3, r3
 8004658:	b2da      	uxtb	r2, r3
 800465a:	19a3      	adds	r3, r4, r6
 800465c:	19db      	adds	r3, r3, r7
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	18d3      	adds	r3, r2, r3
 8004662:	b2db      	uxtb	r3, r3
 8004664:	3330      	adds	r3, #48	; 0x30
 8004666:	b2da      	uxtb	r2, r3
 8004668:	197b      	adds	r3, r7, r5
 800466a:	705a      	strb	r2, [r3, #1]
 800466c:	e00c      	b.n	8004688 <createEditNumBox+0xdc>
	}
	else
	{

		numToChar[0] = '0';
 800466e:	2110      	movs	r1, #16
 8004670:	187b      	adds	r3, r7, r1
 8004672:	2230      	movs	r2, #48	; 0x30
 8004674:	701a      	strb	r2, [r3, #0]
		numToChar[1] = num + 0x30;
 8004676:	234c      	movs	r3, #76	; 0x4c
 8004678:	2208      	movs	r2, #8
 800467a:	189b      	adds	r3, r3, r2
 800467c:	19db      	adds	r3, r3, r7
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	3330      	adds	r3, #48	; 0x30
 8004682:	b2da      	uxtb	r2, r3
 8004684:	187b      	adds	r3, r7, r1
 8004686:	705a      	strb	r2, [r3, #1]

	}

	numToChar[2] = 0;
 8004688:	2310      	movs	r3, #16
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	2200      	movs	r2, #0
 800468e:	709a      	strb	r2, [r3, #2]

	ST7735_WriteString(textX, textY, text, Font_11x18, WHITE, bgdTextColor);
 8004690:	260b      	movs	r6, #11
 8004692:	19bb      	adds	r3, r7, r6
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b298      	uxth	r0, r3
 8004698:	230a      	movs	r3, #10
 800469a:	18fb      	adds	r3, r7, r3
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	b29c      	uxth	r4, r3
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <createEditNumBox+0x198>)
 80046a2:	687d      	ldr	r5, [r7, #4]
 80046a4:	2148      	movs	r1, #72	; 0x48
 80046a6:	2208      	movs	r2, #8
 80046a8:	188a      	adds	r2, r1, r2
 80046aa:	19d2      	adds	r2, r2, r7
 80046ac:	8812      	ldrh	r2, [r2, #0]
 80046ae:	9202      	str	r2, [sp, #8]
 80046b0:	4a25      	ldr	r2, [pc, #148]	; (8004748 <createEditNumBox+0x19c>)
 80046b2:	9201      	str	r2, [sp, #4]
 80046b4:	466a      	mov	r2, sp
 80046b6:	6859      	ldr	r1, [r3, #4]
 80046b8:	6011      	str	r1, [r2, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	002a      	movs	r2, r5
 80046be:	0021      	movs	r1, r4
 80046c0:	f7ff fd8c 	bl	80041dc <ST7735_WriteString>
    ST7735_WriteString(textX+32, textY+22, numToChar, Font_11x18, WHITE, bgdNumcolor);
 80046c4:	19bb      	adds	r3, r7, r6
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3320      	adds	r3, #32
 80046cc:	b298      	uxth	r0, r3
 80046ce:	230a      	movs	r3, #10
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3316      	adds	r3, #22
 80046d8:	b29c      	uxth	r4, r3
 80046da:	4b1a      	ldr	r3, [pc, #104]	; (8004744 <createEditNumBox+0x198>)
 80046dc:	2210      	movs	r2, #16
 80046de:	18bd      	adds	r5, r7, r2
 80046e0:	2250      	movs	r2, #80	; 0x50
 80046e2:	2108      	movs	r1, #8
 80046e4:	1852      	adds	r2, r2, r1
 80046e6:	19d2      	adds	r2, r2, r7
 80046e8:	8812      	ldrh	r2, [r2, #0]
 80046ea:	9202      	str	r2, [sp, #8]
 80046ec:	4a16      	ldr	r2, [pc, #88]	; (8004748 <createEditNumBox+0x19c>)
 80046ee:	9201      	str	r2, [sp, #4]
 80046f0:	466a      	mov	r2, sp
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	6011      	str	r1, [r2, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	002a      	movs	r2, r5
 80046fa:	0021      	movs	r1, r4
 80046fc:	f7ff fd6e 	bl	80041dc <ST7735_WriteString>
    drawRoundRect(textX+27, textY+20, 30, 20, 2, WHITE);
 8004700:	19bb      	adds	r3, r7, r6
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b29b      	uxth	r3, r3
 8004706:	331b      	adds	r3, #27
 8004708:	b29b      	uxth	r3, r3
 800470a:	b218      	sxth	r0, r3
 800470c:	230a      	movs	r3, #10
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	b29b      	uxth	r3, r3
 8004714:	3314      	adds	r3, #20
 8004716:	b29b      	uxth	r3, r3
 8004718:	b219      	sxth	r1, r3
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <createEditNumBox+0x19c>)
 800471c:	9301      	str	r3, [sp, #4]
 800471e:	2302      	movs	r3, #2
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	2314      	movs	r3, #20
 8004724:	221e      	movs	r2, #30
 8004726:	f7fe fe45 	bl	80033b4 <drawRoundRect>

    return nBoxElement;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2214      	movs	r2, #20
 800472e:	18ba      	adds	r2, r7, r2
 8004730:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004732:	c313      	stmia	r3!, {r0, r1, r4}
 8004734:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004736:	c313      	stmia	r3!, {r0, r1, r4}
 8004738:	ca13      	ldmia	r2!, {r0, r1, r4}
 800473a:	c313      	stmia	r3!, {r0, r1, r4}

}
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	46bd      	mov	sp, r7
 8004740:	b00f      	add	sp, #60	; 0x3c
 8004742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004744:	20000008 	.word	0x20000008
 8004748:	0000ffff 	.word	0x0000ffff

0800474c <modifyNumBox>:


void modifyNumBox(NBOX nBox)
{
 800474c:	b5b0      	push	{r4, r5, r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af04      	add	r7, sp, #16
 8004752:	1d3b      	adds	r3, r7, #4
 8004754:	6018      	str	r0, [r3, #0]
 8004756:	6059      	str	r1, [r3, #4]
 8004758:	609a      	str	r2, [r3, #8]

	char numToChar[3] = {0};
 800475a:	2514      	movs	r5, #20
 800475c:	197b      	adds	r3, r7, r5
 800475e:	4a40      	ldr	r2, [pc, #256]	; (8004860 <modifyNumBox+0x114>)
 8004760:	8812      	ldrh	r2, [r2, #0]
 8004762:	801a      	strh	r2, [r3, #0]
 8004764:	2202      	movs	r2, #2
 8004766:	2100      	movs	r1, #0
 8004768:	5499      	strb	r1, [r3, r2]


	if(nBox.boxNum > 9)
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	7a1b      	ldrb	r3, [r3, #8]
 800476e:	2b09      	cmp	r3, #9
 8004770:	d923      	bls.n	80047ba <modifyNumBox+0x6e>
	{
		numToChar[0] = ( nBox.boxNum / 10 ) + 0x30;
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	7a1b      	ldrb	r3, [r3, #8]
 8004776:	210a      	movs	r1, #10
 8004778:	0018      	movs	r0, r3
 800477a:	f7fb fcc3 	bl	8000104 <__udivsi3>
 800477e:	0003      	movs	r3, r0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	3330      	adds	r3, #48	; 0x30
 8004784:	b2da      	uxtb	r2, r3
 8004786:	197b      	adds	r3, r7, r5
 8004788:	701a      	strb	r2, [r3, #0]
		numToChar[1] = ( nBox.boxNum - ( (nBox.boxNum / 10) * 10 ) ) + 0x30;
 800478a:	1d3b      	adds	r3, r7, #4
 800478c:	7a1c      	ldrb	r4, [r3, #8]
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	7a1b      	ldrb	r3, [r3, #8]
 8004792:	210a      	movs	r1, #10
 8004794:	0018      	movs	r0, r3
 8004796:	f7fb fcb5 	bl	8000104 <__udivsi3>
 800479a:	0003      	movs	r3, r0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	1c1a      	adds	r2, r3, #0
 80047a0:	0152      	lsls	r2, r2, #5
 80047a2:	1ad2      	subs	r2, r2, r3
 80047a4:	0092      	lsls	r2, r2, #2
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	18db      	adds	r3, r3, r3
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	18e3      	adds	r3, r4, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	3330      	adds	r3, #48	; 0x30
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	197b      	adds	r3, r7, r5
 80047b6:	705a      	strb	r2, [r3, #1]
 80047b8:	e009      	b.n	80047ce <modifyNumBox+0x82>
	}
	else
	{

		numToChar[0] = '0';
 80047ba:	2114      	movs	r1, #20
 80047bc:	187b      	adds	r3, r7, r1
 80047be:	2230      	movs	r2, #48	; 0x30
 80047c0:	701a      	strb	r2, [r3, #0]
		numToChar[1] = nBox.boxNum + 0x30;;
 80047c2:	1d3b      	adds	r3, r7, #4
 80047c4:	7a1b      	ldrb	r3, [r3, #8]
 80047c6:	3330      	adds	r3, #48	; 0x30
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	187b      	adds	r3, r7, r1
 80047cc:	705a      	strb	r2, [r3, #1]

	}

	ST7735_WriteString(nBox.textX, nBox.textY, nBox.boxText, Font_11x18, WHITE, nBox.textColour);
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b298      	uxth	r0, r3
 80047d4:	1d3b      	adds	r3, r7, #4
 80047d6:	785b      	ldrb	r3, [r3, #1]
 80047d8:	b29c      	uxth	r4, r3
 80047da:	1d3b      	adds	r3, r7, #4
 80047dc:	685d      	ldr	r5, [r3, #4]
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	885a      	ldrh	r2, [r3, #2]
 80047e2:	4b20      	ldr	r3, [pc, #128]	; (8004864 <modifyNumBox+0x118>)
 80047e4:	9202      	str	r2, [sp, #8]
 80047e6:	4a20      	ldr	r2, [pc, #128]	; (8004868 <modifyNumBox+0x11c>)
 80047e8:	9201      	str	r2, [sp, #4]
 80047ea:	466a      	mov	r2, sp
 80047ec:	6859      	ldr	r1, [r3, #4]
 80047ee:	6011      	str	r1, [r2, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	002a      	movs	r2, r5
 80047f4:	0021      	movs	r1, r4
 80047f6:	f7ff fcf1 	bl	80041dc <ST7735_WriteString>
	ST7735_WriteString(nBox.textX+32, nBox.textY+22, numToChar, Font_11x18, WHITE, nBox.boxColor);
 80047fa:	1d3b      	adds	r3, r7, #4
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	b29b      	uxth	r3, r3
 8004800:	3320      	adds	r3, #32
 8004802:	b298      	uxth	r0, r3
 8004804:	1d3b      	adds	r3, r7, #4
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	b29b      	uxth	r3, r3
 800480a:	3316      	adds	r3, #22
 800480c:	b29c      	uxth	r4, r3
 800480e:	1d3b      	adds	r3, r7, #4
 8004810:	7a5b      	ldrb	r3, [r3, #9]
 8004812:	b29a      	uxth	r2, r3
 8004814:	4b13      	ldr	r3, [pc, #76]	; (8004864 <modifyNumBox+0x118>)
 8004816:	2114      	movs	r1, #20
 8004818:	187d      	adds	r5, r7, r1
 800481a:	9202      	str	r2, [sp, #8]
 800481c:	4a12      	ldr	r2, [pc, #72]	; (8004868 <modifyNumBox+0x11c>)
 800481e:	9201      	str	r2, [sp, #4]
 8004820:	466a      	mov	r2, sp
 8004822:	6859      	ldr	r1, [r3, #4]
 8004824:	6011      	str	r1, [r2, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	002a      	movs	r2, r5
 800482a:	0021      	movs	r1, r4
 800482c:	f7ff fcd6 	bl	80041dc <ST7735_WriteString>
	drawRoundRect(nBox.textX+27, nBox.textY+20, 30, 20, 2, WHITE);
 8004830:	1d3b      	adds	r3, r7, #4
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	331b      	adds	r3, #27
 8004838:	b29b      	uxth	r3, r3
 800483a:	b218      	sxth	r0, r3
 800483c:	1d3b      	adds	r3, r7, #4
 800483e:	785b      	ldrb	r3, [r3, #1]
 8004840:	b29b      	uxth	r3, r3
 8004842:	3314      	adds	r3, #20
 8004844:	b29b      	uxth	r3, r3
 8004846:	b219      	sxth	r1, r3
 8004848:	4b07      	ldr	r3, [pc, #28]	; (8004868 <modifyNumBox+0x11c>)
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	2302      	movs	r3, #2
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	2314      	movs	r3, #20
 8004852:	221e      	movs	r2, #30
 8004854:	f7fe fdae 	bl	80033b4 <drawRoundRect>

}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b006      	add	sp, #24
 800485e:	bdb0      	pop	{r4, r5, r7, pc}
 8004860:	080088fc 	.word	0x080088fc
 8004864:	20000008 	.word	0x20000008
 8004868:	0000ffff 	.word	0x0000ffff

0800486c <buttonChangeColour>:


void buttonChangeColour(BTN *btn)
{
 800486c:	b5b0      	push	{r4, r5, r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af04      	add	r7, sp, #16
 8004872:	6078      	str	r0, [r7, #4]


	uint16_t dimW;
	uint8_t dimH;

	uint8_t textLen = 0;
 8004874:	230f      	movs	r3, #15
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]
	while(btn->btnText[textLen] != 0)
 800487c:	e005      	b.n	800488a <buttonChangeColour+0x1e>
		textLen++;
 800487e:	210f      	movs	r1, #15
 8004880:	187b      	adds	r3, r7, r1
 8004882:	781a      	ldrb	r2, [r3, #0]
 8004884:	187b      	adds	r3, r7, r1
 8004886:	3201      	adds	r2, #1
 8004888:	701a      	strb	r2, [r3, #0]
	while(btn->btnText[textLen] != 0)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	210f      	movs	r1, #15
 8004890:	187b      	adds	r3, r7, r1
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	18d3      	adds	r3, r2, r3
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <buttonChangeColour+0x12>

	dimW = ( textLen * 7 ) + 5;
 800489c:	187b      	adds	r3, r7, r1
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	1c1a      	adds	r2, r3, #0
 80048a4:	00d2      	lsls	r2, r2, #3
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	240c      	movs	r4, #12
 80048ac:	193b      	adds	r3, r7, r4
 80048ae:	3205      	adds	r2, #5
 80048b0:	801a      	strh	r2, [r3, #0]
	dimH = ( 10  + 5 );
 80048b2:	250b      	movs	r5, #11
 80048b4:	197b      	adds	r3, r7, r5
 80048b6:	220f      	movs	r2, #15
 80048b8:	701a      	strb	r2, [r3, #0]

	fillRoundRect(btn->btnX, btn->btnY, dimW, dimH, 2, btn->btnColour2);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b218      	sxth	r0, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	b219      	sxth	r1, r3
 80048c6:	193b      	adds	r3, r7, r4
 80048c8:	2200      	movs	r2, #0
 80048ca:	5e9a      	ldrsh	r2, [r3, r2]
 80048cc:	197b      	adds	r3, r7, r5
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	b21c      	sxth	r4, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	889b      	ldrh	r3, [r3, #4]
 80048d6:	9301      	str	r3, [sp, #4]
 80048d8:	2302      	movs	r3, #2
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	0023      	movs	r3, r4
 80048de:	f7fe feab 	bl	8003638 <fillRoundRect>
	ST7735_WriteString(btn->btnX+3, btn->btnY+3, btn->btnText, Font_7x10, WHITE, btn->btnColour2);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3303      	adds	r3, #3
 80048ea:	b298      	uxth	r0, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3303      	adds	r3, #3
 80048f4:	b29c      	uxth	r4, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689d      	ldr	r5, [r3, #8]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	889a      	ldrh	r2, [r3, #4]
 80048fe:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <buttonChangeColour+0xcc>)
 8004900:	9202      	str	r2, [sp, #8]
 8004902:	4a0e      	ldr	r2, [pc, #56]	; (800493c <buttonChangeColour+0xd0>)
 8004904:	9201      	str	r2, [sp, #4]
 8004906:	466a      	mov	r2, sp
 8004908:	6859      	ldr	r1, [r3, #4]
 800490a:	6011      	str	r1, [r2, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	002a      	movs	r2, r5
 8004910:	0021      	movs	r1, r4
 8004912:	f7ff fc63 	bl	80041dc <ST7735_WriteString>

	uint16_t tmp = btn->btnColour;
 8004916:	2108      	movs	r1, #8
 8004918:	187b      	adds	r3, r7, r1
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	8852      	ldrh	r2, [r2, #2]
 800491e:	801a      	strh	r2, [r3, #0]
	btn->btnColour = btn->btnColour2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	889a      	ldrh	r2, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	805a      	strh	r2, [r3, #2]
	btn->btnColour2 = tmp;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	187a      	adds	r2, r7, r1
 800492c:	8812      	ldrh	r2, [r2, #0]
 800492e:	809a      	strh	r2, [r3, #4]

}
 8004930:	46c0      	nop			; (mov r8, r8)
 8004932:	46bd      	mov	sp, r7
 8004934:	b004      	add	sp, #16
 8004936:	bdb0      	pop	{r4, r5, r7, pc}
 8004938:	20000000 	.word	0x20000000
 800493c:	0000ffff 	.word	0x0000ffff

08004940 <targetElement>:
 *	@ Function; targetElement
 * 	@ Description; creates an arrow near the element
 *  @ Par1; ELEMENT
 */
void targetElement(ELEMENT element)
{
 8004940:	b084      	sub	sp, #16
 8004942:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004944:	b087      	sub	sp, #28
 8004946:	af04      	add	r7, sp, #16
 8004948:	2420      	movs	r4, #32
 800494a:	193c      	adds	r4, r7, r4
 800494c:	6020      	str	r0, [r4, #0]
 800494e:	6061      	str	r1, [r4, #4]
 8004950:	60a2      	str	r2, [r4, #8]
 8004952:	60e3      	str	r3, [r4, #12]
	uint8_t arrowPosX;
	uint8_t arrowPosY;
	uint8_t arrowCenter;


	if(previousArrow.elemtentType == BUTTON)
 8004954:	4b74      	ldr	r3, [pc, #464]	; (8004b28 <targetElement+0x1e8>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d130      	bne.n	80049be <targetElement+0x7e>
	{

		// Clear previous position
		arrowPosX = previousArrow.btn.btnX-11;
 800495c:	4b72      	ldr	r3, [pc, #456]	; (8004b28 <targetElement+0x1e8>)
 800495e:	791a      	ldrb	r2, [r3, #4]
 8004960:	1dfb      	adds	r3, r7, #7
 8004962:	3a0b      	subs	r2, #11
 8004964:	701a      	strb	r2, [r3, #0]
		arrowPosY = previousArrow.btn.btnY;
 8004966:	1dbb      	adds	r3, r7, #6
 8004968:	4a6f      	ldr	r2, [pc, #444]	; (8004b28 <targetElement+0x1e8>)
 800496a:	7952      	ldrb	r2, [r2, #5]
 800496c:	701a      	strb	r2, [r3, #0]
		arrowCenter = (arrowPosY + 7);
 800496e:	1d7b      	adds	r3, r7, #5
 8004970:	1dba      	adds	r2, r7, #6
 8004972:	7812      	ldrb	r2, [r2, #0]
 8004974:	3207      	adds	r2, #7
 8004976:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, background);
 8004978:	1dfb      	adds	r3, r7, #7
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	b218      	sxth	r0, r3
 800497e:	1dbb      	adds	r3, r7, #6
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	b21c      	sxth	r4, r3
 8004984:	1dfb      	adds	r3, r7, #7
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	330a      	adds	r3, #10
 800498c:	b29b      	uxth	r3, r3
 800498e:	b21d      	sxth	r5, r3
 8004990:	1d7b      	adds	r3, r7, #5
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	b21e      	sxth	r6, r3
 8004996:	1dfb      	adds	r3, r7, #7
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	b21b      	sxth	r3, r3
 800499c:	1dba      	adds	r2, r7, #6
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	b292      	uxth	r2, r2
 80049a2:	320e      	adds	r2, #14
 80049a4:	b292      	uxth	r2, r2
 80049a6:	b212      	sxth	r2, r2
 80049a8:	4960      	ldr	r1, [pc, #384]	; (8004b2c <targetElement+0x1ec>)
 80049aa:	8809      	ldrh	r1, [r1, #0]
 80049ac:	9102      	str	r1, [sp, #8]
 80049ae:	9201      	str	r2, [sp, #4]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	0033      	movs	r3, r6
 80049b4:	002a      	movs	r2, r5
 80049b6:	0021      	movs	r1, r4
 80049b8:	f7fe fef6 	bl	80037a8 <fillTriangle>
 80049bc:	e033      	b.n	8004a26 <targetElement+0xe6>

	}
	else if(previousArrow.elemtentType == EDITNUMBOX)
 80049be:	4b5a      	ldr	r3, [pc, #360]	; (8004b28 <targetElement+0x1e8>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d12f      	bne.n	8004a26 <targetElement+0xe6>
	{

		// Clear previous position
		arrowPosX = previousArrow.nBox.textX-11;
 80049c6:	4b58      	ldr	r3, [pc, #352]	; (8004b28 <targetElement+0x1e8>)
 80049c8:	7e1a      	ldrb	r2, [r3, #24]
 80049ca:	1dfb      	adds	r3, r7, #7
 80049cc:	3a0b      	subs	r2, #11
 80049ce:	701a      	strb	r2, [r3, #0]
		arrowPosY = previousArrow.nBox.textY;
 80049d0:	1dbb      	adds	r3, r7, #6
 80049d2:	4a55      	ldr	r2, [pc, #340]	; (8004b28 <targetElement+0x1e8>)
 80049d4:	7e52      	ldrb	r2, [r2, #25]
 80049d6:	701a      	strb	r2, [r3, #0]
		arrowCenter = (arrowPosY + 7);
 80049d8:	1d7b      	adds	r3, r7, #5
 80049da:	1dba      	adds	r2, r7, #6
 80049dc:	7812      	ldrb	r2, [r2, #0]
 80049de:	3207      	adds	r2, #7
 80049e0:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, background);
 80049e2:	1dfb      	adds	r3, r7, #7
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	b218      	sxth	r0, r3
 80049e8:	1dbb      	adds	r3, r7, #6
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b21c      	sxth	r4, r3
 80049ee:	1dfb      	adds	r3, r7, #7
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	330a      	adds	r3, #10
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	b21d      	sxth	r5, r3
 80049fa:	1d7b      	adds	r3, r7, #5
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	b21e      	sxth	r6, r3
 8004a00:	1dfb      	adds	r3, r7, #7
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	b21b      	sxth	r3, r3
 8004a06:	1dba      	adds	r2, r7, #6
 8004a08:	7812      	ldrb	r2, [r2, #0]
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	320e      	adds	r2, #14
 8004a0e:	b292      	uxth	r2, r2
 8004a10:	b212      	sxth	r2, r2
 8004a12:	4946      	ldr	r1, [pc, #280]	; (8004b2c <targetElement+0x1ec>)
 8004a14:	8809      	ldrh	r1, [r1, #0]
 8004a16:	9102      	str	r1, [sp, #8]
 8004a18:	9201      	str	r2, [sp, #4]
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	0033      	movs	r3, r6
 8004a1e:	002a      	movs	r2, r5
 8004a20:	0021      	movs	r1, r4
 8004a22:	f7fe fec1 	bl	80037a8 <fillTriangle>

	}

	if(element.elemtentType == BUTTON)
 8004a26:	2120      	movs	r1, #32
 8004a28:	187b      	adds	r3, r7, r1
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d137      	bne.n	8004aa0 <targetElement+0x160>
	{

		arrowPosX = element.btn.btnX-11;
 8004a30:	187b      	adds	r3, r7, r1
 8004a32:	791a      	ldrb	r2, [r3, #4]
 8004a34:	1dfb      	adds	r3, r7, #7
 8004a36:	3a0b      	subs	r2, #11
 8004a38:	701a      	strb	r2, [r3, #0]
		arrowPosY = element.btn.btnY;
 8004a3a:	1dba      	adds	r2, r7, #6
 8004a3c:	187b      	adds	r3, r7, r1
 8004a3e:	795b      	ldrb	r3, [r3, #5]
 8004a40:	7013      	strb	r3, [r2, #0]
		arrowCenter = (arrowPosY + 7);
 8004a42:	1d7b      	adds	r3, r7, #5
 8004a44:	1dba      	adds	r2, r7, #6
 8004a46:	7812      	ldrb	r2, [r2, #0]
 8004a48:	3207      	adds	r2, #7
 8004a4a:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, WHITE);
 8004a4c:	1dfb      	adds	r3, r7, #7
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	b218      	sxth	r0, r3
 8004a52:	1dbb      	adds	r3, r7, #6
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b219      	sxth	r1, r3
 8004a58:	1dfb      	adds	r3, r7, #7
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	330a      	adds	r3, #10
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	b21c      	sxth	r4, r3
 8004a64:	1d7b      	adds	r3, r7, #5
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	b21d      	sxth	r5, r3
 8004a6a:	1dfb      	adds	r3, r7, #7
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b21b      	sxth	r3, r3
 8004a70:	1dba      	adds	r2, r7, #6
 8004a72:	7812      	ldrb	r2, [r2, #0]
 8004a74:	b292      	uxth	r2, r2
 8004a76:	320e      	adds	r2, #14
 8004a78:	b292      	uxth	r2, r2
 8004a7a:	b212      	sxth	r2, r2
 8004a7c:	4e2c      	ldr	r6, [pc, #176]	; (8004b30 <targetElement+0x1f0>)
 8004a7e:	9602      	str	r6, [sp, #8]
 8004a80:	9201      	str	r2, [sp, #4]
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	002b      	movs	r3, r5
 8004a86:	0022      	movs	r2, r4
 8004a88:	f7fe fe8e 	bl	80037a8 <fillTriangle>

		previousArrow = element;
 8004a8c:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <targetElement+0x1e8>)
 8004a8e:	2120      	movs	r1, #32
 8004a90:	187a      	adds	r2, r7, r1
 8004a92:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a94:	c313      	stmia	r3!, {r0, r1, r4}
 8004a96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a98:	c313      	stmia	r3!, {r0, r1, r4}
 8004a9a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004a9c:	c313      	stmia	r3!, {r0, r1, r4}

		previousArrow = element;

	}

}
 8004a9e:	e03b      	b.n	8004b18 <targetElement+0x1d8>
	else if(element.elemtentType == EDITNUMBOX)
 8004aa0:	2120      	movs	r1, #32
 8004aa2:	187b      	adds	r3, r7, r1
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d136      	bne.n	8004b18 <targetElement+0x1d8>
		arrowPosX = element.nBox.textX-11;
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	7e1a      	ldrb	r2, [r3, #24]
 8004aae:	1dfb      	adds	r3, r7, #7
 8004ab0:	3a0b      	subs	r2, #11
 8004ab2:	701a      	strb	r2, [r3, #0]
		arrowPosY = element.nBox.textY;
 8004ab4:	1dba      	adds	r2, r7, #6
 8004ab6:	187b      	adds	r3, r7, r1
 8004ab8:	7e5b      	ldrb	r3, [r3, #25]
 8004aba:	7013      	strb	r3, [r2, #0]
		arrowCenter = (arrowPosY + 7);
 8004abc:	1d7b      	adds	r3, r7, #5
 8004abe:	1dba      	adds	r2, r7, #6
 8004ac0:	7812      	ldrb	r2, [r2, #0]
 8004ac2:	3207      	adds	r2, #7
 8004ac4:	701a      	strb	r2, [r3, #0]
		fillTriangle(arrowPosX, arrowPosY, arrowPosX+10, arrowCenter, arrowPosX, arrowPosY+14, WHITE);
 8004ac6:	1dfb      	adds	r3, r7, #7
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	b218      	sxth	r0, r3
 8004acc:	1dbb      	adds	r3, r7, #6
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	b219      	sxth	r1, r3
 8004ad2:	1dfb      	adds	r3, r7, #7
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	330a      	adds	r3, #10
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	b21c      	sxth	r4, r3
 8004ade:	1d7b      	adds	r3, r7, #5
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	b21d      	sxth	r5, r3
 8004ae4:	1dfb      	adds	r3, r7, #7
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	b21b      	sxth	r3, r3
 8004aea:	1dba      	adds	r2, r7, #6
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	b292      	uxth	r2, r2
 8004af0:	320e      	adds	r2, #14
 8004af2:	b292      	uxth	r2, r2
 8004af4:	b212      	sxth	r2, r2
 8004af6:	4e0e      	ldr	r6, [pc, #56]	; (8004b30 <targetElement+0x1f0>)
 8004af8:	9602      	str	r6, [sp, #8]
 8004afa:	9201      	str	r2, [sp, #4]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	002b      	movs	r3, r5
 8004b00:	0022      	movs	r2, r4
 8004b02:	f7fe fe51 	bl	80037a8 <fillTriangle>
		previousArrow = element;
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <targetElement+0x1e8>)
 8004b08:	2120      	movs	r1, #32
 8004b0a:	187a      	adds	r2, r7, r1
 8004b0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b0e:	c313      	stmia	r3!, {r0, r1, r4}
 8004b10:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b12:	c313      	stmia	r3!, {r0, r1, r4}
 8004b14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b16:	c313      	stmia	r3!, {r0, r1, r4}
}
 8004b18:	46c0      	nop			; (mov r8, r8)
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	b003      	add	sp, #12
 8004b1e:	bcf0      	pop	{r4, r5, r6, r7}
 8004b20:	bc08      	pop	{r3}
 8004b22:	b004      	add	sp, #16
 8004b24:	4718      	bx	r3
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	20000078 	.word	0x20000078
 8004b2c:	20000204 	.word	0x20000204
 8004b30:	0000ffff 	.word	0x0000ffff

08004b34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004b38:	f001 feca 	bl	80068d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004b3c:	f000 f81a 	bl	8004b74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004b40:	f000 f904 	bl	8004d4c <MX_GPIO_Init>
  MX_ADC_Init();
 8004b44:	f000 f868 	bl	8004c18 <MX_ADC_Init>
  MX_SPI1_Init();
 8004b48:	f000 f8c2 	bl	8004cd0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc);
 8004b4c:	4b08      	ldr	r3, [pc, #32]	; (8004b70 <main+0x3c>)
 8004b4e:	0018      	movs	r0, r3
 8004b50:	f002 f890 	bl	8006c74 <HAL_ADC_Start>

  ST7735_Init(0);
 8004b54:	2000      	movs	r0, #0
 8004b56:	f7ff f99b 	bl	8003e90 <ST7735_Init>
  fillScreen(BLACK);
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	f7ff f856 	bl	8003c0c <fillScreen>
  HAL_Delay(500);
 8004b60:	23fa      	movs	r3, #250	; 0xfa
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	0018      	movs	r0, r3
 8004b66:	f001 ff21 	bl	80069ac <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	pHMeter_process();
 8004b6a:	f000 f98d 	bl	8004e88 <pHMeter_process>
 8004b6e:	e7fc      	b.n	8004b6a <main+0x36>
 8004b70:	2000009c 	.word	0x2000009c

08004b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b091      	sub	sp, #68	; 0x44
 8004b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b7a:	2410      	movs	r4, #16
 8004b7c:	193b      	adds	r3, r7, r4
 8004b7e:	0018      	movs	r0, r3
 8004b80:	2330      	movs	r3, #48	; 0x30
 8004b82:	001a      	movs	r2, r3
 8004b84:	2100      	movs	r1, #0
 8004b86:	f003 fea5 	bl	80088d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b8a:	003b      	movs	r3, r7
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	2310      	movs	r3, #16
 8004b90:	001a      	movs	r2, r3
 8004b92:	2100      	movs	r1, #0
 8004b94:	f003 fe9e 	bl	80088d4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004b98:	0021      	movs	r1, r4
 8004b9a:	187b      	adds	r3, r7, r1
 8004b9c:	2212      	movs	r2, #18
 8004b9e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004ba0:	187b      	adds	r3, r7, r1
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004ba6:	187b      	adds	r3, r7, r1
 8004ba8:	2201      	movs	r2, #1
 8004baa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	2210      	movs	r2, #16
 8004bb0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004bb2:	187b      	adds	r3, r7, r1
 8004bb4:	2210      	movs	r2, #16
 8004bb6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004bb8:	187b      	adds	r3, r7, r1
 8004bba:	2202      	movs	r2, #2
 8004bbc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004bbe:	187b      	adds	r3, r7, r1
 8004bc0:	2280      	movs	r2, #128	; 0x80
 8004bc2:	0212      	lsls	r2, r2, #8
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8004bc6:	187b      	adds	r3, r7, r1
 8004bc8:	22c0      	movs	r2, #192	; 0xc0
 8004bca:	0312      	lsls	r2, r2, #12
 8004bcc:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004bce:	187b      	adds	r3, r7, r1
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f002 fe86 	bl	80078e8 <HAL_RCC_OscConfig>
 8004bdc:	1e03      	subs	r3, r0, #0
 8004bde:	d001      	beq.n	8004be4 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8004be0:	f000 f94c 	bl	8004e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004be4:	003b      	movs	r3, r7
 8004be6:	2207      	movs	r2, #7
 8004be8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004bea:	003b      	movs	r3, r7
 8004bec:	2202      	movs	r2, #2
 8004bee:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8004bf0:	003b      	movs	r3, r7
 8004bf2:	2280      	movs	r2, #128	; 0x80
 8004bf4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004bf6:	003b      	movs	r3, r7
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004bfc:	003b      	movs	r3, r7
 8004bfe:	2101      	movs	r1, #1
 8004c00:	0018      	movs	r0, r3
 8004c02:	f003 f98f 	bl	8007f24 <HAL_RCC_ClockConfig>
 8004c06:	1e03      	subs	r3, r0, #0
 8004c08:	d001      	beq.n	8004c0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004c0a:	f000 f937 	bl	8004e7c <Error_Handler>
  }
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
 8004c10:	46bd      	mov	sp, r7
 8004c12:	b011      	add	sp, #68	; 0x44
 8004c14:	bd90      	pop	{r4, r7, pc}
	...

08004c18 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004c1e:	1d3b      	adds	r3, r7, #4
 8004c20:	0018      	movs	r0, r3
 8004c22:	230c      	movs	r3, #12
 8004c24:	001a      	movs	r2, r3
 8004c26:	2100      	movs	r1, #0
 8004c28:	f003 fe54 	bl	80088d4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004c2c:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c2e:	4a27      	ldr	r2, [pc, #156]	; (8004ccc <MX_ADC_Init+0xb4>)
 8004c30:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004c32:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004c38:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004c44:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004c56:	4b1c      	ldr	r3, [pc, #112]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004c5c:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004c62:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c68:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c6a:	22c2      	movs	r2, #194	; 0xc2
 8004c6c:	32ff      	adds	r2, #255	; 0xff
 8004c6e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c70:	4b15      	ldr	r3, [pc, #84]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004c76:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c78:	2224      	movs	r2, #36	; 0x24
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004c7e:	4b12      	ldr	r3, [pc, #72]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004c84:	4b10      	ldr	r3, [pc, #64]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004c86:	0018      	movs	r0, r3
 8004c88:	f001 feb4 	bl	80069f4 <HAL_ADC_Init>
 8004c8c:	1e03      	subs	r3, r0, #0
 8004c8e:	d001      	beq.n	8004c94 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8004c90:	f000 f8f4 	bl	8004e7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004c94:	1d3b      	adds	r3, r7, #4
 8004c96:	2208      	movs	r2, #8
 8004c98:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004c9a:	1d3b      	adds	r3, r7, #4
 8004c9c:	2280      	movs	r2, #128	; 0x80
 8004c9e:	0152      	lsls	r2, r2, #5
 8004ca0:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004ca2:	1d3b      	adds	r3, r7, #4
 8004ca4:	2280      	movs	r2, #128	; 0x80
 8004ca6:	0552      	lsls	r2, r2, #21
 8004ca8:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004caa:	1d3a      	adds	r2, r7, #4
 8004cac:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <MX_ADC_Init+0xb0>)
 8004cae:	0011      	movs	r1, r2
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f002 f83f 	bl	8006d34 <HAL_ADC_ConfigChannel>
 8004cb6:	1e03      	subs	r3, r0, #0
 8004cb8:	d001      	beq.n	8004cbe <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8004cba:	f000 f8df 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004cbe:	46c0      	nop			; (mov r8, r8)
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b004      	add	sp, #16
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	2000009c 	.word	0x2000009c
 8004ccc:	40012400 	.word	0x40012400

08004cd0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004cd4:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cd6:	4a1c      	ldr	r2, [pc, #112]	; (8004d48 <MX_SPI1_Init+0x78>)
 8004cd8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004cda:	4b1a      	ldr	r3, [pc, #104]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cdc:	2282      	movs	r2, #130	; 0x82
 8004cde:	0052      	lsls	r2, r2, #1
 8004ce0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ce8:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cea:	22e0      	movs	r2, #224	; 0xe0
 8004cec:	00d2      	lsls	r2, r2, #3
 8004cee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cf0:	4b14      	ldr	r3, [pc, #80]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004cf6:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004cfc:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004cfe:	2280      	movs	r2, #128	; 0x80
 8004d00:	0092      	lsls	r2, r2, #2
 8004d02:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004d04:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d06:	2208      	movs	r2, #8
 8004d08:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d10:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004d1c:	4b09      	ldr	r3, [pc, #36]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d1e:	2207      	movs	r2, #7
 8004d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004d28:	4b06      	ldr	r3, [pc, #24]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d2a:	2208      	movs	r2, #8
 8004d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d2e:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <MX_SPI1_Init+0x74>)
 8004d30:	0018      	movs	r0, r3
 8004d32:	f003 fa1d 	bl	8008170 <HAL_SPI_Init>
 8004d36:	1e03      	subs	r3, r0, #0
 8004d38:	d001      	beq.n	8004d3e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8004d3a:	f000 f89f 	bl	8004e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004d3e:	46c0      	nop			; (mov r8, r8)
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	200000dc 	.word	0x200000dc
 8004d48:	40013000 	.word	0x40013000

08004d4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004d4c:	b590      	push	{r4, r7, lr}
 8004d4e:	b08b      	sub	sp, #44	; 0x2c
 8004d50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d52:	2414      	movs	r4, #20
 8004d54:	193b      	adds	r3, r7, r4
 8004d56:	0018      	movs	r0, r3
 8004d58:	2314      	movs	r3, #20
 8004d5a:	001a      	movs	r2, r3
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	f003 fdb9 	bl	80088d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d62:	4b43      	ldr	r3, [pc, #268]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d64:	695a      	ldr	r2, [r3, #20]
 8004d66:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d68:	2180      	movs	r1, #128	; 0x80
 8004d6a:	0309      	lsls	r1, r1, #12
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	615a      	str	r2, [r3, #20]
 8004d70:	4b3f      	ldr	r3, [pc, #252]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	2380      	movs	r3, #128	; 0x80
 8004d76:	031b      	lsls	r3, r3, #12
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004d7e:	4b3c      	ldr	r3, [pc, #240]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d80:	695a      	ldr	r2, [r3, #20]
 8004d82:	4b3b      	ldr	r3, [pc, #236]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d84:	2180      	movs	r1, #128	; 0x80
 8004d86:	03c9      	lsls	r1, r1, #15
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	615a      	str	r2, [r3, #20]
 8004d8c:	4b38      	ldr	r3, [pc, #224]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	03db      	lsls	r3, r3, #15
 8004d94:	4013      	ands	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d9a:	4b35      	ldr	r3, [pc, #212]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004da0:	2180      	movs	r1, #128	; 0x80
 8004da2:	0289      	lsls	r1, r1, #10
 8004da4:	430a      	orrs	r2, r1
 8004da6:	615a      	str	r2, [r3, #20]
 8004da8:	4b31      	ldr	r3, [pc, #196]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004daa:	695a      	ldr	r2, [r3, #20]
 8004dac:	2380      	movs	r3, #128	; 0x80
 8004dae:	029b      	lsls	r3, r3, #10
 8004db0:	4013      	ands	r3, r2
 8004db2:	60bb      	str	r3, [r7, #8]
 8004db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db6:	4b2e      	ldr	r3, [pc, #184]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004db8:	695a      	ldr	r2, [r3, #20]
 8004dba:	4b2d      	ldr	r3, [pc, #180]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004dbc:	2180      	movs	r1, #128	; 0x80
 8004dbe:	02c9      	lsls	r1, r1, #11
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	615a      	str	r2, [r3, #20]
 8004dc4:	4b2a      	ldr	r3, [pc, #168]	; (8004e70 <MX_GPIO_Init+0x124>)
 8004dc6:	695a      	ldr	r2, [r3, #20]
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	02db      	lsls	r3, r3, #11
 8004dcc:	4013      	ands	r3, r2
 8004dce:	607b      	str	r3, [r7, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_AD_Pin|ST7735_RESET_Pin|ST7735_CS_Pin, GPIO_PIN_RESET);
 8004dd2:	4928      	ldr	r1, [pc, #160]	; (8004e74 <MX_GPIO_Init+0x128>)
 8004dd4:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <MX_GPIO_Init+0x12c>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	0018      	movs	r0, r3
 8004dda:	f002 fd68 	bl	80078ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UP_Pin DOWN_Pin SEL_Pin */
  GPIO_InitStruct.Pin = SEL_Pin;
 8004dde:	193b      	adds	r3, r7, r4
 8004de0:	2280      	movs	r2, #128	; 0x80
 8004de2:	0152      	lsls	r2, r2, #5
 8004de4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004de6:	193b      	adds	r3, r7, r4
 8004de8:	2200      	movs	r2, #0
 8004dea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dec:	193b      	adds	r3, r7, r4
 8004dee:	2201      	movs	r2, #1
 8004df0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df2:	193a      	adds	r2, r7, r4
 8004df4:	2390      	movs	r3, #144	; 0x90
 8004df6:	05db      	lsls	r3, r3, #23
 8004df8:	0011      	movs	r1, r2
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f002 fbca 	bl	8007594 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 8004e00:	193b      	adds	r3, r7, r4
 8004e02:	22c0      	movs	r2, #192	; 0xc0
 8004e04:	0112      	lsls	r2, r2, #4
 8004e06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e08:	193b      	adds	r3, r7, r4
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e0e:	193b      	adds	r3, r7, r4
 8004e10:	2201      	movs	r2, #1
 8004e12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e14:	193a      	adds	r2, r7, r4
 8004e16:	2390      	movs	r3, #144	; 0x90
 8004e18:	05db      	lsls	r3, r3, #23
 8004e1a:	0011      	movs	r1, r2
 8004e1c:	0018      	movs	r0, r3
 8004e1e:	f002 fbb9 	bl	8007594 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_AD_Pin ST7735_RESET_Pin ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_AD_Pin|ST7735_RESET_Pin|ST7735_CS_Pin;
 8004e22:	193b      	adds	r3, r7, r4
 8004e24:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <MX_GPIO_Init+0x128>)
 8004e26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e28:	193b      	adds	r3, r7, r4
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2e:	193b      	adds	r3, r7, r4
 8004e30:	2200      	movs	r2, #0
 8004e32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e34:	193b      	adds	r3, r7, r4
 8004e36:	2200      	movs	r2, #0
 8004e38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e3a:	193b      	adds	r3, r7, r4
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <MX_GPIO_Init+0x12c>)
 8004e3e:	0019      	movs	r1, r3
 8004e40:	0010      	movs	r0, r2
 8004e42:	f002 fba7 	bl	8007594 <HAL_GPIO_Init>

  /*Configure GPIO pin : OPAMP_CALIB_Pin */
  GPIO_InitStruct.Pin = OPAMP_CALIB_Pin;
 8004e46:	0021      	movs	r1, r4
 8004e48:	187b      	adds	r3, r7, r1
 8004e4a:	2280      	movs	r2, #128	; 0x80
 8004e4c:	0152      	lsls	r2, r2, #5
 8004e4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e50:	187b      	adds	r3, r7, r1
 8004e52:	2200      	movs	r2, #0
 8004e54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e56:	187b      	adds	r3, r7, r1
 8004e58:	2201      	movs	r2, #1
 8004e5a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OPAMP_CALIB_GPIO_Port, &GPIO_InitStruct);
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	4a06      	ldr	r2, [pc, #24]	; (8004e78 <MX_GPIO_Init+0x12c>)
 8004e60:	0019      	movs	r1, r3
 8004e62:	0010      	movs	r0, r2
 8004e64:	f002 fb96 	bl	8007594 <HAL_GPIO_Init>

}
 8004e68:	46c0      	nop			; (mov r8, r8)
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	b00b      	add	sp, #44	; 0x2c
 8004e6e:	bd90      	pop	{r4, r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	00000406 	.word	0x00000406
 8004e78:	48000400 	.word	0x48000400

08004e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004e80:	b672      	cpsid	i
}
 8004e82:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004e84:	e7fe      	b.n	8004e84 <Error_Handler+0x8>
	...

08004e88 <pHMeter_process>:
/*
 *  @ Function; pHMeter_process()
 *  @ Description; handles the screen views
 */
void pHMeter_process(void)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0

	uint8_t pageChanged = 0;
 8004e8e:	1dfb      	adds	r3, r7, #7
 8004e90:	2200      	movs	r2, #0
 8004e92:	701a      	strb	r2, [r3, #0]

	if(first)
 8004e94:	4b24      	ldr	r3, [pc, #144]	; (8004f28 <pHMeter_process+0xa0>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d013      	beq.n	8004ec4 <pHMeter_process+0x3c>
	{

		idlePage();
 8004e9c:	f000 f912 	bl	80050c4 <idlePage>

		ee_init();
 8004ea0:	f001 fb1a 	bl	80064d8 <ee_init>

		if(!HAL_GPIO_ReadPin(SEL_GPIO_Port, SEL_Pin))
 8004ea4:	2380      	movs	r3, #128	; 0x80
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	2390      	movs	r3, #144	; 0x90
 8004eaa:	05db      	lsls	r3, r3, #23
 8004eac:	0011      	movs	r1, r2
 8004eae:	0018      	movs	r0, r3
 8004eb0:	f002 fce0 	bl	8007874 <HAL_GPIO_ReadPin>
 8004eb4:	1e03      	subs	r3, r0, #0
 8004eb6:	d103      	bne.n	8004ec0 <pHMeter_process+0x38>
			newPageFlags = SW_PROCESS;
 8004eb8:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <pHMeter_process+0xa4>)
 8004eba:	2204      	movs	r2, #4
 8004ebc:	801a      	strh	r2, [r3, #0]
 8004ebe:	e001      	b.n	8004ec4 <pHMeter_process+0x3c>
		else
			writeAppDataToEE();
 8004ec0:	f001 fb8e 	bl	80065e0 <writeAppDataToEE>

	}

	// Get a new pH value
	pH_read();
 8004ec4:	f000 f838 	bl	8004f38 <pH_read>

    // New pH status evaluation
	pHStatus_update();
 8004ec8:	f000 fe9c 	bl	8005c04 <pHStatus_update>

	// New process status evaluation
	pageChanged = processStatus_update();
 8004ecc:	1dfc      	adds	r4, r7, #7
 8004ece:	f000 fe5f 	bl	8005b90 <processStatus_update>
 8004ed2:	0003      	movs	r3, r0
 8004ed4:	7023      	strb	r3, [r4, #0]

	switch(process_status)
 8004ed6:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <pHMeter_process+0xa8>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d007      	beq.n	8004eee <pHMeter_process+0x66>
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d00b      	beq.n	8004efa <pHMeter_process+0x72>
	{

		default:
		case MAIN_PROCESS:

			mainPage(pageChanged);
 8004ee2:	1dfb      	adds	r3, r7, #7
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	f000 f964 	bl	80051b4 <mainPage>

			break;
 8004eec:	e00b      	b.n	8004f06 <pHMeter_process+0x7e>

		case SW_PROCESS:

			softwareCalibPage(pageChanged);
 8004eee:	1dfb      	adds	r3, r7, #7
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f000 fb12 	bl	800551c <softwareCalibPage>

			break;
 8004ef8:	e005      	b.n	8004f06 <pHMeter_process+0x7e>

		case HW_PROCESS:

			circuitCalibPage(pageChanged);
 8004efa:	1dfb      	adds	r3, r7, #7
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	0018      	movs	r0, r3
 8004f00:	f000 fa0e 	bl	8005320 <circuitCalibPage>

			break;
 8004f04:	46c0      	nop			; (mov r8, r8)

	}


	if(first == 1)
 8004f06:	4b08      	ldr	r3, [pc, #32]	; (8004f28 <pHMeter_process+0xa0>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d102      	bne.n	8004f14 <pHMeter_process+0x8c>
		first = 0;
 8004f0e:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <pHMeter_process+0xa0>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	701a      	strb	r2, [r3, #0]

	joysticHandler(elements);
 8004f14:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <pHMeter_process+0xac>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f000 fc7b 	bl	8005814 <joysticHandler>

}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b003      	add	sp, #12
 8004f24:	bd90      	pop	{r4, r7, pc}
 8004f26:	46c0      	nop			; (mov r8, r8)
 8004f28:	20000018 	.word	0x20000018
 8004f2c:	20000022 	.word	0x20000022
 8004f30:	20000020 	.word	0x20000020
 8004f34:	20000144 	.word	0x20000144

08004f38 <pH_read>:
 *  @ Function; pH_read()
 *  @ Description; read a new pH value from the probe
 *  @ every PH_PROCESS_DELAY seconds
 */
void pH_read(void)
{
 8004f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0

	uint32_t rawAdcData;
	float rawAdcmV;
	float pHValue = 0.0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]

	static float buff[6] = {0};
	static uint32_t count = 0;

	if(getDelayMs(pHTimeStamp) < PH_PROCESS_DELAY)
 8004f42:	4b54      	ldr	r3, [pc, #336]	; (8005094 <pH_read+0x15c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f001 f9cc 	bl	80062e4 <getDelayMs>
 8004f4c:	0002      	movs	r2, r0
 8004f4e:	23fa      	movs	r3, #250	; 0xfa
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d200      	bcs.n	8004f58 <pH_read+0x20>
 8004f56:	e098      	b.n	800508a <pH_read+0x152>
		return;

	pHTimeStamp = getTimeMs();
 8004f58:	f001 f9b8 	bl	80062cc <getTimeMs>
 8004f5c:	0002      	movs	r2, r0
 8004f5e:	4b4d      	ldr	r3, [pc, #308]	; (8005094 <pH_read+0x15c>)
 8004f60:	601a      	str	r2, [r3, #0]

	rawAdcData = HAL_ADC_GetValue(&hadc);
 8004f62:	4b4d      	ldr	r3, [pc, #308]	; (8005098 <pH_read+0x160>)
 8004f64:	0018      	movs	r0, r3
 8004f66:	f001 fed9 	bl	8006d1c <HAL_ADC_GetValue>
 8004f6a:	0003      	movs	r3, r0
 8004f6c:	607b      	str	r3, [r7, #4]

	rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fd fbee 	bl	8002750 <__aeabi_ui2d>
 8004f74:	4a49      	ldr	r2, [pc, #292]	; (800509c <pH_read+0x164>)
 8004f76:	4b4a      	ldr	r3, [pc, #296]	; (80050a0 <pH_read+0x168>)
 8004f78:	f7fc fd86 	bl	8001a88 <__aeabi_dmul>
 8004f7c:	0002      	movs	r2, r0
 8004f7e:	000b      	movs	r3, r1
 8004f80:	0010      	movs	r0, r2
 8004f82:	0019      	movs	r1, r3
 8004f84:	f7fd fc52 	bl	800282c <__aeabi_d2f>
 8004f88:	1c03      	adds	r3, r0, #0
 8004f8a:	603b      	str	r3, [r7, #0]

	buff[count%6] = ( ( PH_V_SLOPE() * ( rawAdcmV - V_OFFSET() ) ) + PH_OFFSET() );
 8004f8c:	4b45      	ldr	r3, [pc, #276]	; (80050a4 <pH_read+0x16c>)
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	4b44      	ldr	r3, [pc, #272]	; (80050a4 <pH_read+0x16c>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	1c19      	adds	r1, r3, #0
 8004f96:	1c10      	adds	r0, r2, #0
 8004f98:	f7fb ff64 	bl	8000e64 <__aeabi_fsub>
 8004f9c:	1c03      	adds	r3, r0, #0
 8004f9e:	1c1c      	adds	r4, r3, #0
 8004fa0:	4b41      	ldr	r3, [pc, #260]	; (80050a8 <pH_read+0x170>)
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	4b40      	ldr	r3, [pc, #256]	; (80050a8 <pH_read+0x170>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	1c19      	adds	r1, r3, #0
 8004faa:	1c10      	adds	r0, r2, #0
 8004fac:	f7fb ff5a 	bl	8000e64 <__aeabi_fsub>
 8004fb0:	1c03      	adds	r3, r0, #0
 8004fb2:	1c19      	adds	r1, r3, #0
 8004fb4:	1c20      	adds	r0, r4, #0
 8004fb6:	f7fb fc67 	bl	8000888 <__aeabi_fdiv>
 8004fba:	1c03      	adds	r3, r0, #0
 8004fbc:	1c1c      	adds	r4, r3, #0
 8004fbe:	4b3a      	ldr	r3, [pc, #232]	; (80050a8 <pH_read+0x170>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	1c19      	adds	r1, r3, #0
 8004fc4:	6838      	ldr	r0, [r7, #0]
 8004fc6:	f7fb ff4d 	bl	8000e64 <__aeabi_fsub>
 8004fca:	1c03      	adds	r3, r0, #0
 8004fcc:	1c19      	adds	r1, r3, #0
 8004fce:	1c20      	adds	r0, r4, #0
 8004fd0:	f7fb fe22 	bl	8000c18 <__aeabi_fmul>
 8004fd4:	1c03      	adds	r3, r0, #0
 8004fd6:	1c1e      	adds	r6, r3, #0
 8004fd8:	4b32      	ldr	r3, [pc, #200]	; (80050a4 <pH_read+0x16c>)
 8004fda:	681c      	ldr	r4, [r3, #0]
 8004fdc:	4b33      	ldr	r3, [pc, #204]	; (80050ac <pH_read+0x174>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2106      	movs	r1, #6
 8004fe2:	0018      	movs	r0, r3
 8004fe4:	f7fb f914 	bl	8000210 <__aeabi_uidivmod>
 8004fe8:	000b      	movs	r3, r1
 8004fea:	001d      	movs	r5, r3
 8004fec:	1c21      	adds	r1, r4, #0
 8004fee:	1c30      	adds	r0, r6, #0
 8004ff0:	f7fb faac 	bl	800054c <__aeabi_fadd>
 8004ff4:	1c03      	adds	r3, r0, #0
 8004ff6:	1c19      	adds	r1, r3, #0
 8004ff8:	4b2d      	ldr	r3, [pc, #180]	; (80050b0 <pH_read+0x178>)
 8004ffa:	00aa      	lsls	r2, r5, #2
 8004ffc:	50d1      	str	r1, [r2, r3]

	pHValue = buff[count%6];
 8004ffe:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <pH_read+0x174>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2106      	movs	r1, #6
 8005004:	0018      	movs	r0, r3
 8005006:	f7fb f903 	bl	8000210 <__aeabi_uidivmod>
 800500a:	000b      	movs	r3, r1
 800500c:	001a      	movs	r2, r3
 800500e:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <pH_read+0x178>)
 8005010:	0092      	lsls	r2, r2, #2
 8005012:	58d3      	ldr	r3, [r2, r3]
 8005014:	60fb      	str	r3, [r7, #12]

	count++;
 8005016:	4b25      	ldr	r3, [pc, #148]	; (80050ac <pH_read+0x174>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	4b23      	ldr	r3, [pc, #140]	; (80050ac <pH_read+0x174>)
 800501e:	601a      	str	r2, [r3, #0]

	if(count >= 6)
 8005020:	4b22      	ldr	r3, [pc, #136]	; (80050ac <pH_read+0x174>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b05      	cmp	r3, #5
 8005026:	d91a      	bls.n	800505e <pH_read+0x126>
	{

		pHValue = 0.0;
 8005028:	2300      	movs	r3, #0
 800502a:	60fb      	str	r3, [r7, #12]
		for(int i = 0 ; i < 6 ; i++)
 800502c:	2300      	movs	r3, #0
 800502e:	60bb      	str	r3, [r7, #8]
 8005030:	e00c      	b.n	800504c <pH_read+0x114>
			pHValue += buff[i];
 8005032:	4b1f      	ldr	r3, [pc, #124]	; (80050b0 <pH_read+0x178>)
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	0092      	lsls	r2, r2, #2
 8005038:	58d3      	ldr	r3, [r2, r3]
 800503a:	1c19      	adds	r1, r3, #0
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f7fb fa85 	bl	800054c <__aeabi_fadd>
 8005042:	1c03      	adds	r3, r0, #0
 8005044:	60fb      	str	r3, [r7, #12]
		for(int i = 0 ; i < 6 ; i++)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	3301      	adds	r3, #1
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b05      	cmp	r3, #5
 8005050:	ddef      	ble.n	8005032 <pH_read+0xfa>

		pHValue = ( pHValue / 6.0 );
 8005052:	4918      	ldr	r1, [pc, #96]	; (80050b4 <pH_read+0x17c>)
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f7fb fc17 	bl	8000888 <__aeabi_fdiv>
 800505a:	1c03      	adds	r3, r0, #0
 800505c:	60fb      	str	r3, [r7, #12]

	}

	if(( pHValue < 0 ) || ( pHValue > 14 ))
 800505e:	2100      	movs	r1, #0
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7fb fa15 	bl	8000490 <__aeabi_fcmplt>
 8005066:	1e03      	subs	r3, r0, #0
 8005068:	d105      	bne.n	8005076 <pH_read+0x13e>
 800506a:	4913      	ldr	r1, [pc, #76]	; (80050b8 <pH_read+0x180>)
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f7fb fa23 	bl	80004b8 <__aeabi_fcmpgt>
 8005072:	1e03      	subs	r3, r0, #0
 8005074:	d001      	beq.n	800507a <pH_read+0x142>
		pHValue = 9.9;
 8005076:	4b11      	ldr	r3, [pc, #68]	; (80050bc <pH_read+0x184>)
 8005078:	60fb      	str	r3, [r7, #12]

	pH_current = pHValue;
 800507a:	4b11      	ldr	r3, [pc, #68]	; (80050c0 <pH_read+0x188>)
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start(&hadc);
 8005080:	4b05      	ldr	r3, [pc, #20]	; (8005098 <pH_read+0x160>)
 8005082:	0018      	movs	r0, r3
 8005084:	f001 fdf6 	bl	8006c74 <HAL_ADC_Start>
 8005088:	e000      	b.n	800508c <pH_read+0x154>
		return;
 800508a:	46c0      	nop			; (mov r8, r8)

}
 800508c:	46bd      	mov	sp, r7
 800508e:	b005      	add	sp, #20
 8005090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005092:	46c0      	nop			; (mov r8, r8)
 8005094:	20000200 	.word	0x20000200
 8005098:	2000009c 	.word	0x2000009c
 800509c:	66666666 	.word	0x66666666
 80050a0:	3f4a6666 	.word	0x3f4a6666
 80050a4:	20000024 	.word	0x20000024
 80050a8:	2000002c 	.word	0x2000002c
 80050ac:	20000208 	.word	0x20000208
 80050b0:	2000020c 	.word	0x2000020c
 80050b4:	40c00000 	.word	0x40c00000
 80050b8:	41600000 	.word	0x41600000
 80050bc:	411e6666 	.word	0x411e6666
 80050c0:	2000001c 	.word	0x2000001c

080050c4 <idlePage>:
/*
 * 	@ Function: st7735_hallScreen
 * 	@ Description: Presentation screen
 */
void idlePage(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af04      	add	r7, sp, #16

	  ST7735_SetRotation(1);
 80050ca:	2001      	movs	r0, #1
 80050cc:	f7fe ff12 	bl	8003ef4 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "UnNatural presents", Font_7x10, WHITE,BLACK);
 80050d0:	4b31      	ldr	r3, [pc, #196]	; (8005198 <idlePage+0xd4>)
 80050d2:	4832      	ldr	r0, [pc, #200]	; (800519c <idlePage+0xd8>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	9202      	str	r2, [sp, #8]
 80050d8:	4a31      	ldr	r2, [pc, #196]	; (80051a0 <idlePage+0xdc>)
 80050da:	9201      	str	r2, [sp, #4]
 80050dc:	466a      	mov	r2, sp
 80050de:	6859      	ldr	r1, [r3, #4]
 80050e0:	6011      	str	r1, [r2, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	0002      	movs	r2, r0
 80050e6:	2100      	movs	r1, #0
 80050e8:	2000      	movs	r0, #0
 80050ea:	f7ff f877 	bl	80041dc <ST7735_WriteString>
	  HAL_Delay(1000);
 80050ee:	23fa      	movs	r3, #250	; 0xfa
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	0018      	movs	r0, r3
 80050f4:	f001 fc5a 	bl	80069ac <HAL_Delay>
	  fillScreen(BLACK);
 80050f8:	2000      	movs	r0, #0
 80050fa:	f7fe fd87 	bl	8003c0c <fillScreen>

	  ST7735_SetRotation(1);
 80050fe:	2001      	movs	r0, #1
 8005100:	f7fe fef8 	bl	8003ef4 <ST7735_SetRotation>
	  ST7735_WriteString(20, 50, "pH-METER V0", Font_11x18, GREEN,BLACK);
 8005104:	4b27      	ldr	r3, [pc, #156]	; (80051a4 <idlePage+0xe0>)
 8005106:	4828      	ldr	r0, [pc, #160]	; (80051a8 <idlePage+0xe4>)
 8005108:	2200      	movs	r2, #0
 800510a:	9202      	str	r2, [sp, #8]
 800510c:	22fc      	movs	r2, #252	; 0xfc
 800510e:	00d2      	lsls	r2, r2, #3
 8005110:	9201      	str	r2, [sp, #4]
 8005112:	466a      	mov	r2, sp
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	6011      	str	r1, [r2, #0]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	0002      	movs	r2, r0
 800511c:	2132      	movs	r1, #50	; 0x32
 800511e:	2014      	movs	r0, #20
 8005120:	f7ff f85c 	bl	80041dc <ST7735_WriteString>
	  HAL_Delay(1000);
 8005124:	23fa      	movs	r3, #250	; 0xfa
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	0018      	movs	r0, r3
 800512a:	f001 fc3f 	bl	80069ac <HAL_Delay>
	  fillScreen(BLACK);
 800512e:	2000      	movs	r0, #0
 8005130:	f7fe fd6c 	bl	8003c0c <fillScreen>

	  ST7735_SetRotation(1);
 8005134:	2001      	movs	r0, #1
 8005136:	f7fe fedd 	bl	8003ef4 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "A product developed by", Font_7x10, WHITE,BLACK);
 800513a:	4b17      	ldr	r3, [pc, #92]	; (8005198 <idlePage+0xd4>)
 800513c:	481b      	ldr	r0, [pc, #108]	; (80051ac <idlePage+0xe8>)
 800513e:	2200      	movs	r2, #0
 8005140:	9202      	str	r2, [sp, #8]
 8005142:	4a17      	ldr	r2, [pc, #92]	; (80051a0 <idlePage+0xdc>)
 8005144:	9201      	str	r2, [sp, #4]
 8005146:	466a      	mov	r2, sp
 8005148:	6859      	ldr	r1, [r3, #4]
 800514a:	6011      	str	r1, [r2, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	0002      	movs	r2, r0
 8005150:	2100      	movs	r1, #0
 8005152:	2000      	movs	r0, #0
 8005154:	f7ff f842 	bl	80041dc <ST7735_WriteString>
	  HAL_Delay(1000);
 8005158:	23fa      	movs	r3, #250	; 0xfa
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	0018      	movs	r0, r3
 800515e:	f001 fc25 	bl	80069ac <HAL_Delay>
	  ST7735_WriteString(20, 50, "Eng. Andrea", Font_11x18, GREEN,BLACK);
 8005162:	4b10      	ldr	r3, [pc, #64]	; (80051a4 <idlePage+0xe0>)
 8005164:	4812      	ldr	r0, [pc, #72]	; (80051b0 <idlePage+0xec>)
 8005166:	2200      	movs	r2, #0
 8005168:	9202      	str	r2, [sp, #8]
 800516a:	22fc      	movs	r2, #252	; 0xfc
 800516c:	00d2      	lsls	r2, r2, #3
 800516e:	9201      	str	r2, [sp, #4]
 8005170:	466a      	mov	r2, sp
 8005172:	6859      	ldr	r1, [r3, #4]
 8005174:	6011      	str	r1, [r2, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	0002      	movs	r2, r0
 800517a:	2132      	movs	r1, #50	; 0x32
 800517c:	2014      	movs	r0, #20
 800517e:	f7ff f82d 	bl	80041dc <ST7735_WriteString>
	  HAL_Delay(1000);
 8005182:	23fa      	movs	r3, #250	; 0xfa
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	0018      	movs	r0, r3
 8005188:	f001 fc10 	bl	80069ac <HAL_Delay>
	  fillScreen(BLACK);
 800518c:	2000      	movs	r0, #0
 800518e:	f7fe fd3d 	bl	8003c0c <fillScreen>

}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000000 	.word	0x20000000
 800519c:	08008900 	.word	0x08008900
 80051a0:	0000ffff 	.word	0x0000ffff
 80051a4:	20000008 	.word	0x20000008
 80051a8:	08008914 	.word	0x08008914
 80051ac:	08008920 	.word	0x08008920
 80051b0:	08008938 	.word	0x08008938

080051b4 <mainPage>:
 *  @ Function; mainPage
 *  @ Description; This is the main page where the current
 *  @ value of pH is shown
 */
void mainPage(uint8_t updatePage)
{
 80051b4:	b590      	push	{r4, r7, lr}
 80051b6:	b089      	sub	sp, #36	; 0x24
 80051b8:	af04      	add	r7, sp, #16
 80051ba:	0002      	movs	r2, r0
 80051bc:	1dfb      	adds	r3, r7, #7
 80051be:	701a      	strb	r2, [r3, #0]

	static PH_STATUS main_pH_status = IDLE;
	static uint16_t mainColor = GREEN;


	if( ( updatePage == 1 ) || ( pH_status != main_pH_status ) )
 80051c0:	1dfb      	adds	r3, r7, #7
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d005      	beq.n	80051d4 <mainPage+0x20>
 80051c8:	4b49      	ldr	r3, [pc, #292]	; (80052f0 <mainPage+0x13c>)
 80051ca:	781a      	ldrb	r2, [r3, #0]
 80051cc:	4b49      	ldr	r3, [pc, #292]	; (80052f4 <mainPage+0x140>)
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d05f      	beq.n	8005294 <mainPage+0xe0>
	{

		switch(pH_status)
 80051d4:	4b46      	ldr	r3, [pc, #280]	; (80052f0 <mainPage+0x13c>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b05      	cmp	r3, #5
 80051da:	d01a      	beq.n	8005212 <mainPage+0x5e>
 80051dc:	dc06      	bgt.n	80051ec <mainPage+0x38>
 80051de:	2b04      	cmp	r3, #4
 80051e0:	d028      	beq.n	8005234 <mainPage+0x80>
 80051e2:	dc03      	bgt.n	80051ec <mainPage+0x38>
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d046      	beq.n	8005276 <mainPage+0xc2>
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d035      	beq.n	8005258 <mainPage+0xa4>
		{

			default:
			case NEUTRAL:

				main_pH_status = NEUTRAL;
 80051ec:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <mainPage+0x140>)
 80051ee:	2203      	movs	r2, #3
 80051f0:	701a      	strb	r2, [r3, #0]

				background = GREEN;
 80051f2:	4b41      	ldr	r3, [pc, #260]	; (80052f8 <mainPage+0x144>)
 80051f4:	22fc      	movs	r2, #252	; 0xfc
 80051f6:	00d2      	lsls	r2, r2, #3
 80051f8:	801a      	strh	r2, [r3, #0]

				fillScreen(GREEN);
 80051fa:	23fc      	movs	r3, #252	; 0xfc
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	0018      	movs	r0, r3
 8005200:	f7fe fd04 	bl	8003c0c <fillScreen>
				mainPage_graphics();
 8005204:	f000 fd54 	bl	8005cb0 <mainPage_graphics>

				mainColor = GREEN;
 8005208:	4b3c      	ldr	r3, [pc, #240]	; (80052fc <mainPage+0x148>)
 800520a:	22fc      	movs	r2, #252	; 0xfc
 800520c:	00d2      	lsls	r2, r2, #3
 800520e:	801a      	strh	r2, [r3, #0]

				break;
 8005210:	e041      	b.n	8005296 <mainPage+0xe2>

			case STRONG_ACID:

				main_pH_status = STRONG_ACID;
 8005212:	4b38      	ldr	r3, [pc, #224]	; (80052f4 <mainPage+0x140>)
 8005214:	2205      	movs	r2, #5
 8005216:	701a      	strb	r2, [r3, #0]

				background = RED;
 8005218:	4b37      	ldr	r3, [pc, #220]	; (80052f8 <mainPage+0x144>)
 800521a:	4a39      	ldr	r2, [pc, #228]	; (8005300 <mainPage+0x14c>)
 800521c:	801a      	strh	r2, [r3, #0]

				fillScreen(RED);
 800521e:	23f8      	movs	r3, #248	; 0xf8
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	0018      	movs	r0, r3
 8005224:	f7fe fcf2 	bl	8003c0c <fillScreen>
				mainPage_graphics();
 8005228:	f000 fd42 	bl	8005cb0 <mainPage_graphics>

				mainColor = RED;
 800522c:	4b33      	ldr	r3, [pc, #204]	; (80052fc <mainPage+0x148>)
 800522e:	4a34      	ldr	r2, [pc, #208]	; (8005300 <mainPage+0x14c>)
 8005230:	801a      	strh	r2, [r3, #0]

				break;
 8005232:	e030      	b.n	8005296 <mainPage+0xe2>

			case ACID:

				main_pH_status = ACID;
 8005234:	4b2f      	ldr	r3, [pc, #188]	; (80052f4 <mainPage+0x140>)
 8005236:	2204      	movs	r2, #4
 8005238:	701a      	strb	r2, [r3, #0]

				background = YELLOW;
 800523a:	4b2f      	ldr	r3, [pc, #188]	; (80052f8 <mainPage+0x144>)
 800523c:	2220      	movs	r2, #32
 800523e:	4252      	negs	r2, r2
 8005240:	801a      	strh	r2, [r3, #0]

				fillScreen(YELLOW);
 8005242:	4b30      	ldr	r3, [pc, #192]	; (8005304 <mainPage+0x150>)
 8005244:	0018      	movs	r0, r3
 8005246:	f7fe fce1 	bl	8003c0c <fillScreen>
				mainPage_graphics();
 800524a:	f000 fd31 	bl	8005cb0 <mainPage_graphics>

				mainColor = YELLOW;
 800524e:	4b2b      	ldr	r3, [pc, #172]	; (80052fc <mainPage+0x148>)
 8005250:	2220      	movs	r2, #32
 8005252:	4252      	negs	r2, r2
 8005254:	801a      	strh	r2, [r3, #0]

				break;
 8005256:	e01e      	b.n	8005296 <mainPage+0xe2>

			case BASE:

				main_pH_status = BASE;
 8005258:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <mainPage+0x140>)
 800525a:	2202      	movs	r2, #2
 800525c:	701a      	strb	r2, [r3, #0]

				background = BLUE;
 800525e:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <mainPage+0x144>)
 8005260:	22ff      	movs	r2, #255	; 0xff
 8005262:	801a      	strh	r2, [r3, #0]

				fillScreen(BLUE);
 8005264:	20ff      	movs	r0, #255	; 0xff
 8005266:	f7fe fcd1 	bl	8003c0c <fillScreen>
				mainPage_graphics();
 800526a:	f000 fd21 	bl	8005cb0 <mainPage_graphics>

				mainColor = BLUE;
 800526e:	4b23      	ldr	r3, [pc, #140]	; (80052fc <mainPage+0x148>)
 8005270:	22ff      	movs	r2, #255	; 0xff
 8005272:	801a      	strh	r2, [r3, #0]

				break;
 8005274:	e00f      	b.n	8005296 <mainPage+0xe2>

			case STRONG_BASE:

				main_pH_status = STRONG_BASE;
 8005276:	4b1f      	ldr	r3, [pc, #124]	; (80052f4 <mainPage+0x140>)
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]

				background = DARK_BLUE;
 800527c:	4b1e      	ldr	r3, [pc, #120]	; (80052f8 <mainPage+0x144>)
 800527e:	221f      	movs	r2, #31
 8005280:	801a      	strh	r2, [r3, #0]

				fillScreen(DARK_BLUE);
 8005282:	201f      	movs	r0, #31
 8005284:	f7fe fcc2 	bl	8003c0c <fillScreen>
				mainPage_graphics();
 8005288:	f000 fd12 	bl	8005cb0 <mainPage_graphics>

				mainColor = DARK_BLUE;
 800528c:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <mainPage+0x148>)
 800528e:	221f      	movs	r2, #31
 8005290:	801a      	strh	r2, [r3, #0]

				break;
 8005292:	e000      	b.n	8005296 <mainPage+0xe2>

		}

	}
 8005294:	46c0      	nop			; (mov r8, r8)

	if(updatePage == 1)
 8005296:	1dfb      	adds	r3, r7, #7
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d109      	bne.n	80052b2 <mainPage+0xfe>
	{

		elements = mainElement;
 800529e:	4b1a      	ldr	r3, [pc, #104]	; (8005308 <mainPage+0x154>)
 80052a0:	4a1a      	ldr	r2, [pc, #104]	; (800530c <mainPage+0x158>)
 80052a2:	601a      	str	r2, [r3, #0]
		elementIndexLim = MAIN_NUM_OF_ELEMENTS;
 80052a4:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <mainPage+0x15c>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	701a      	strb	r2, [r3, #0]
		background = mainColor;
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <mainPage+0x148>)
 80052ac:	881a      	ldrh	r2, [r3, #0]
 80052ae:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <mainPage+0x144>)
 80052b0:	801a      	strh	r2, [r3, #0]

	}

	char pHstring[6];

	floatToString(pH_current, pHstring);
 80052b2:	4b18      	ldr	r3, [pc, #96]	; (8005314 <mainPage+0x160>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2408      	movs	r4, #8
 80052b8:	193a      	adds	r2, r7, r4
 80052ba:	0011      	movs	r1, r2
 80052bc:	1c18      	adds	r0, r3, #0
 80052be:	f001 f82f 	bl	8006320 <floatToString>

	ST7735_SetRotation(1);
 80052c2:	2001      	movs	r0, #1
 80052c4:	f7fe fe16 	bl	8003ef4 <ST7735_SetRotation>
	ST7735_WriteString(MAIN_PH_VAL_POSX, MAIN_PH_VAL_POSY, pHstring, Font_16x26, WHITE, mainColor);
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <mainPage+0x148>)
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	4b12      	ldr	r3, [pc, #72]	; (8005318 <mainPage+0x164>)
 80052ce:	1938      	adds	r0, r7, r4
 80052d0:	9202      	str	r2, [sp, #8]
 80052d2:	4a12      	ldr	r2, [pc, #72]	; (800531c <mainPage+0x168>)
 80052d4:	9201      	str	r2, [sp, #4]
 80052d6:	466a      	mov	r2, sp
 80052d8:	6859      	ldr	r1, [r3, #4]
 80052da:	6011      	str	r1, [r2, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	0002      	movs	r2, r0
 80052e0:	2138      	movs	r1, #56	; 0x38
 80052e2:	2014      	movs	r0, #20
 80052e4:	f7fe ff7a 	bl	80041dc <ST7735_WriteString>

}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b005      	add	sp, #20
 80052ee:	bd90      	pop	{r4, r7, pc}
 80052f0:	20000021 	.word	0x20000021
 80052f4:	20000224 	.word	0x20000224
 80052f8:	20000204 	.word	0x20000204
 80052fc:	20000034 	.word	0x20000034
 8005300:	fffff800 	.word	0xfffff800
 8005304:	0000ffe0 	.word	0x0000ffe0
 8005308:	20000144 	.word	0x20000144
 800530c:	200001d8 	.word	0x200001d8
 8005310:	200001fd 	.word	0x200001fd
 8005314:	2000001c 	.word	0x2000001c
 8005318:	20000010 	.word	0x20000010
 800531c:	0000ffff 	.word	0x0000ffff

08005320 <circuitCalibPage>:
 *  @ Function; circuitCalibPage
 *  @ Description; When user push left button, this page
 *  @ indicates the OPAMP calibration
 */
void circuitCalibPage(uint8_t updatePage)
{
 8005320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005322:	b08b      	sub	sp, #44	; 0x2c
 8005324:	af02      	add	r7, sp, #8
 8005326:	0002      	movs	r2, r0
 8005328:	1dfb      	adds	r3, r7, #7
 800532a:	701a      	strb	r2, [r3, #0]

	static float hLineBuff[6] = {0};
	static uint32_t hLineCount = 0;
	static uint32_t hLine_old = 128;

	uint16_t indicatorsColor = RED;
 800532c:	231e      	movs	r3, #30
 800532e:	18fb      	adds	r3, r7, r3
 8005330:	4a6d      	ldr	r2, [pc, #436]	; (80054e8 <circuitCalibPage+0x1c8>)
 8005332:	801a      	strh	r2, [r3, #0]

	uint16_t rawAdcData = 128;
 8005334:	2312      	movs	r3, #18
 8005336:	18fb      	adds	r3, r7, r3
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	801a      	strh	r2, [r3, #0]
	uint32_t hLine = 128;
 800533c:	2380      	movs	r3, #128	; 0x80
 800533e:	61bb      	str	r3, [r7, #24]
	float rawAdcmV = 0.0;
 8005340:	2300      	movs	r3, #0
 8005342:	60fb      	str	r3, [r7, #12]


	if(updatePage == 1)
 8005344:	1dfb      	adds	r3, r7, #7
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10c      	bne.n	8005366 <circuitCalibPage+0x46>
	{

		fillScreen(BLACK);
 800534c:	2000      	movs	r0, #0
 800534e:	f7fe fc5d 	bl	8003c0c <fillScreen>
		circuitCalibPage_graphics();
 8005352:	f000 fcc1 	bl	8005cd8 <circuitCalibPage_graphics>
		background = BLACK;
 8005356:	4b65      	ldr	r3, [pc, #404]	; (80054ec <circuitCalibPage+0x1cc>)
 8005358:	2200      	movs	r2, #0
 800535a:	801a      	strh	r2, [r3, #0]

		HAL_ADC_Start(&hadc);
 800535c:	4b64      	ldr	r3, [pc, #400]	; (80054f0 <circuitCalibPage+0x1d0>)
 800535e:	0018      	movs	r0, r3
 8005360:	f001 fc88 	bl	8006c74 <HAL_ADC_Start>

		return;
 8005364:	e0bc      	b.n	80054e0 <circuitCalibPage+0x1c0>

	}

	rawAdcData = HAL_ADC_GetValue(&hadc);
 8005366:	4b62      	ldr	r3, [pc, #392]	; (80054f0 <circuitCalibPage+0x1d0>)
 8005368:	0018      	movs	r0, r3
 800536a:	f001 fcd7 	bl	8006d1c <HAL_ADC_GetValue>
 800536e:	0002      	movs	r2, r0
 8005370:	2112      	movs	r1, #18
 8005372:	187b      	adds	r3, r7, r1
 8005374:	801a      	strh	r2, [r3, #0]
	rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 8005376:	187b      	adds	r3, r7, r1
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	0018      	movs	r0, r3
 800537c:	f7fd f9b8 	bl	80026f0 <__aeabi_i2d>
 8005380:	4a5c      	ldr	r2, [pc, #368]	; (80054f4 <circuitCalibPage+0x1d4>)
 8005382:	4b5d      	ldr	r3, [pc, #372]	; (80054f8 <circuitCalibPage+0x1d8>)
 8005384:	f7fc fb80 	bl	8001a88 <__aeabi_dmul>
 8005388:	0002      	movs	r2, r0
 800538a:	000b      	movs	r3, r1
 800538c:	0010      	movs	r0, r2
 800538e:	0019      	movs	r1, r3
 8005390:	f7fd fa4c 	bl	800282c <__aeabi_d2f>
 8005394:	1c03      	adds	r3, r0, #0
 8005396:	60fb      	str	r3, [r7, #12]
	hLineBuff[hLineCount%6] = 128.0 - ( rawAdcmV * 32.72); // ( 128 pixels / 3.3 V ) = 38.79
 8005398:	68f8      	ldr	r0, [r7, #12]
 800539a:	f7fd f9ff 	bl	800279c <__aeabi_f2d>
 800539e:	4a57      	ldr	r2, [pc, #348]	; (80054fc <circuitCalibPage+0x1dc>)
 80053a0:	4b57      	ldr	r3, [pc, #348]	; (8005500 <circuitCalibPage+0x1e0>)
 80053a2:	f7fc fb71 	bl	8001a88 <__aeabi_dmul>
 80053a6:	0002      	movs	r2, r0
 80053a8:	000b      	movs	r3, r1
 80053aa:	2000      	movs	r0, #0
 80053ac:	4955      	ldr	r1, [pc, #340]	; (8005504 <circuitCalibPage+0x1e4>)
 80053ae:	f7fc fdd7 	bl	8001f60 <__aeabi_dsub>
 80053b2:	0002      	movs	r2, r0
 80053b4:	000b      	movs	r3, r1
 80053b6:	0014      	movs	r4, r2
 80053b8:	001d      	movs	r5, r3
 80053ba:	4b53      	ldr	r3, [pc, #332]	; (8005508 <circuitCalibPage+0x1e8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2106      	movs	r1, #6
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7fa ff25 	bl	8000210 <__aeabi_uidivmod>
 80053c6:	000b      	movs	r3, r1
 80053c8:	001e      	movs	r6, r3
 80053ca:	0020      	movs	r0, r4
 80053cc:	0029      	movs	r1, r5
 80053ce:	f7fd fa2d 	bl	800282c <__aeabi_d2f>
 80053d2:	1c01      	adds	r1, r0, #0
 80053d4:	4b4d      	ldr	r3, [pc, #308]	; (800550c <circuitCalibPage+0x1ec>)
 80053d6:	00b2      	lsls	r2, r6, #2
 80053d8:	50d1      	str	r1, [r2, r3]

	hLine = hLineBuff[hLineCount%6];
 80053da:	4b4b      	ldr	r3, [pc, #300]	; (8005508 <circuitCalibPage+0x1e8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2106      	movs	r1, #6
 80053e0:	0018      	movs	r0, r3
 80053e2:	f7fa ff15 	bl	8000210 <__aeabi_uidivmod>
 80053e6:	000b      	movs	r3, r1
 80053e8:	001a      	movs	r2, r3
 80053ea:	4b48      	ldr	r3, [pc, #288]	; (800550c <circuitCalibPage+0x1ec>)
 80053ec:	0092      	lsls	r2, r2, #2
 80053ee:	58d3      	ldr	r3, [r2, r3]
 80053f0:	1c18      	adds	r0, r3, #0
 80053f2:	f7fb f875 	bl	80004e0 <__aeabi_f2uiz>
 80053f6:	0003      	movs	r3, r0
 80053f8:	61bb      	str	r3, [r7, #24]

	hLineCount++;
 80053fa:	4b43      	ldr	r3, [pc, #268]	; (8005508 <circuitCalibPage+0x1e8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	1c5a      	adds	r2, r3, #1
 8005400:	4b41      	ldr	r3, [pc, #260]	; (8005508 <circuitCalibPage+0x1e8>)
 8005402:	601a      	str	r2, [r3, #0]

	if(hLineCount >= 6)
 8005404:	4b40      	ldr	r3, [pc, #256]	; (8005508 <circuitCalibPage+0x1e8>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2b05      	cmp	r3, #5
 800540a:	d929      	bls.n	8005460 <circuitCalibPage+0x140>
	{

		hLine = 0.0;
 800540c:	2300      	movs	r3, #0
 800540e:	61bb      	str	r3, [r7, #24]
		for(int i = 0 ; i < 6 ; i++)
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e012      	b.n	800543c <circuitCalibPage+0x11c>
			hLine += hLineBuff[i];
 8005416:	69b8      	ldr	r0, [r7, #24]
 8005418:	f7fb fef2 	bl	8001200 <__aeabi_ui2f>
 800541c:	4b3b      	ldr	r3, [pc, #236]	; (800550c <circuitCalibPage+0x1ec>)
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	0092      	lsls	r2, r2, #2
 8005422:	58d3      	ldr	r3, [r2, r3]
 8005424:	1c19      	adds	r1, r3, #0
 8005426:	f7fb f891 	bl	800054c <__aeabi_fadd>
 800542a:	1c03      	adds	r3, r0, #0
 800542c:	1c18      	adds	r0, r3, #0
 800542e:	f7fb f857 	bl	80004e0 <__aeabi_f2uiz>
 8005432:	0003      	movs	r3, r0
 8005434:	61bb      	str	r3, [r7, #24]
		for(int i = 0 ; i < 6 ; i++)
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	3301      	adds	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b05      	cmp	r3, #5
 8005440:	dde9      	ble.n	8005416 <circuitCalibPage+0xf6>

		hLine = ( hLine / 6.0 );
 8005442:	69b8      	ldr	r0, [r7, #24]
 8005444:	f7fd f984 	bl	8002750 <__aeabi_ui2d>
 8005448:	2200      	movs	r2, #0
 800544a:	4b31      	ldr	r3, [pc, #196]	; (8005510 <circuitCalibPage+0x1f0>)
 800544c:	f7fb ff1a 	bl	8001284 <__aeabi_ddiv>
 8005450:	0002      	movs	r2, r0
 8005452:	000b      	movs	r3, r1
 8005454:	0010      	movs	r0, r2
 8005456:	0019      	movs	r1, r3
 8005458:	f7fb f85a 	bl	8000510 <__aeabi_d2uiz>
 800545c:	0003      	movs	r3, r0
 800545e:	61bb      	str	r3, [r7, #24]

	}

	HAL_ADC_Start(&hadc);
 8005460:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <circuitCalibPage+0x1d0>)
 8005462:	0018      	movs	r0, r3
 8005464:	f001 fc06 	bl	8006c74 <HAL_ADC_Start>

	// Draw a line indicator

	if( (uint8_t)(hLine_old*100) != (uint8_t)(hLine*100) )
 8005468:	4b2a      	ldr	r3, [pc, #168]	; (8005514 <circuitCalibPage+0x1f4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	2264      	movs	r2, #100	; 0x64
 8005470:	4353      	muls	r3, r2
 8005472:	b2da      	uxtb	r2, r3
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2164      	movs	r1, #100	; 0x64
 800547a:	434b      	muls	r3, r1
 800547c:	b2db      	uxtb	r3, r3
 800547e:	429a      	cmp	r2, r3
 8005480:	d00b      	beq.n	800549a <circuitCalibPage+0x17a>
		drawLine(0, hLine_old, 160, hLine_old, BLACK);
 8005482:	4b24      	ldr	r3, [pc, #144]	; (8005514 <circuitCalibPage+0x1f4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	b219      	sxth	r1, r3
 8005488:	4b22      	ldr	r3, [pc, #136]	; (8005514 <circuitCalibPage+0x1f4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	b21b      	sxth	r3, r3
 800548e:	2200      	movs	r2, #0
 8005490:	9200      	str	r2, [sp, #0]
 8005492:	22a0      	movs	r2, #160	; 0xa0
 8005494:	2000      	movs	r0, #0
 8005496:	f7fd fc26 	bl	8002ce6 <drawLine>

	drawLine(0, hLine, 160, hLine, WHITE);
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	b219      	sxth	r1, r3
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	b21b      	sxth	r3, r3
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <circuitCalibPage+0x1f8>)
 80054a4:	9200      	str	r2, [sp, #0]
 80054a6:	22a0      	movs	r2, #160	; 0xa0
 80054a8:	2000      	movs	r0, #0
 80054aa:	f7fd fc1c 	bl	8002ce6 <drawLine>

	hLine_old = hLine;
 80054ae:	4b19      	ldr	r3, [pc, #100]	; (8005514 <circuitCalibPage+0x1f4>)
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	601a      	str	r2, [r3, #0]

	if(( hLine >= ( 128 - 54 - 1 ) ) && ( hLine <= ( 128 - 54 + 1 ) ))
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	2b48      	cmp	r3, #72	; 0x48
 80054b8:	d908      	bls.n	80054cc <circuitCalibPage+0x1ac>
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b4b      	cmp	r3, #75	; 0x4b
 80054be:	d805      	bhi.n	80054cc <circuitCalibPage+0x1ac>
		indicatorsColor = GREEN;
 80054c0:	231e      	movs	r3, #30
 80054c2:	18fb      	adds	r3, r7, r3
 80054c4:	22fc      	movs	r2, #252	; 0xfc
 80054c6:	00d2      	lsls	r2, r2, #3
 80054c8:	801a      	strh	r2, [r3, #0]
 80054ca:	e003      	b.n	80054d4 <circuitCalibPage+0x1b4>
	else
		indicatorsColor = RED;
 80054cc:	231e      	movs	r3, #30
 80054ce:	18fb      	adds	r3, r7, r3
 80054d0:	4a05      	ldr	r2, [pc, #20]	; (80054e8 <circuitCalibPage+0x1c8>)
 80054d2:	801a      	strh	r2, [r3, #0]

	orizzIndicators_graphics(indicatorsColor);
 80054d4:	231e      	movs	r3, #30
 80054d6:	18fb      	adds	r3, r7, r3
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	0018      	movs	r0, r3
 80054dc:	f000 fe00 	bl	80060e0 <orizzIndicators_graphics>

}
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b009      	add	sp, #36	; 0x24
 80054e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	fffff800 	.word	0xfffff800
 80054ec:	20000204 	.word	0x20000204
 80054f0:	2000009c 	.word	0x2000009c
 80054f4:	66666666 	.word	0x66666666
 80054f8:	3f4a6666 	.word	0x3f4a6666
 80054fc:	f5c28f5c 	.word	0xf5c28f5c
 8005500:	40405c28 	.word	0x40405c28
 8005504:	40600000 	.word	0x40600000
 8005508:	20000228 	.word	0x20000228
 800550c:	2000022c 	.word	0x2000022c
 8005510:	40180000 	.word	0x40180000
 8005514:	20000038 	.word	0x20000038
 8005518:	0000ffff 	.word	0x0000ffff

0800551c <softwareCalibPage>:
 *  @ Description; user reach this page from
 *  @ the main page. Here it is performed the
 *  @ two points probe calibration
 */
void softwareCalibPage(uint8_t updatePage)
{
 800551c:	b590      	push	{r4, r7, lr}
 800551e:	b08b      	sub	sp, #44	; 0x2c
 8005520:	af04      	add	r7, sp, #16
 8005522:	0002      	movs	r2, r0
 8005524:	1dfb      	adds	r3, r7, #7
 8005526:	701a      	strb	r2, [r3, #0]

	static uint8_t swCalibTimer = 9;
	static uint32_t swCalibTimeStamp = 0;
	static uint8_t pointIndex = 0;

	char sTimer[2] = {0};
 8005528:	230c      	movs	r3, #12
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	2200      	movs	r2, #0
 800552e:	801a      	strh	r2, [r3, #0]
	uint16_t rawAdcData;

	static uint8_t count = 0;


	if(updatePage == 1)
 8005530:	1dfb      	adds	r3, r7, #7
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d112      	bne.n	800555e <softwareCalibPage+0x42>
	{

		fillScreen(BLACK);
 8005538:	2000      	movs	r0, #0
 800553a:	f7fe fb67 	bl	8003c0c <fillScreen>
		softwareCalibPage_graphics();
 800553e:	f000 fbdd 	bl	8005cfc <softwareCalibPage_graphics>
		elements = swCalibElement;
 8005542:	4b89      	ldr	r3, [pc, #548]	; (8005768 <softwareCalibPage+0x24c>)
 8005544:	4a89      	ldr	r2, [pc, #548]	; (800576c <softwareCalibPage+0x250>)
 8005546:	601a      	str	r2, [r3, #0]
		elementIndexLim = SWCALIB_NUM_OF_ELEMENTS;
 8005548:	4b89      	ldr	r3, [pc, #548]	; (8005770 <softwareCalibPage+0x254>)
 800554a:	2204      	movs	r2, #4
 800554c:	701a      	strb	r2, [r3, #0]
		background = BLACK;
 800554e:	4b89      	ldr	r3, [pc, #548]	; (8005774 <softwareCalibPage+0x258>)
 8005550:	2200      	movs	r2, #0
 8005552:	801a      	strh	r2, [r3, #0]

		HAL_ADC_Start(&hadc);
 8005554:	4b88      	ldr	r3, [pc, #544]	; (8005778 <softwareCalibPage+0x25c>)
 8005556:	0018      	movs	r0, r3
 8005558:	f001 fb8c 	bl	8006c74 <HAL_ADC_Start>
 800555c:	e101      	b.n	8005762 <softwareCalibPage+0x246>

		return;

	}

	if(timerOn)
 800555e:	4b87      	ldr	r3, [pc, #540]	; (800577c <softwareCalibPage+0x260>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d100      	bne.n	8005568 <softwareCalibPage+0x4c>
 8005566:	e0d8      	b.n	800571a <softwareCalibPage+0x1fe>
	{

		if(getDelayMs(swCalibTimeStamp) >= 1000)
 8005568:	4b85      	ldr	r3, [pc, #532]	; (8005780 <softwareCalibPage+0x264>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	0018      	movs	r0, r3
 800556e:	f000 feb9 	bl	80062e4 <getDelayMs>
 8005572:	0002      	movs	r2, r0
 8005574:	23fa      	movs	r3, #250	; 0xfa
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	429a      	cmp	r2, r3
 800557a:	d200      	bcs.n	800557e <softwareCalibPage+0x62>
 800557c:	e0f1      	b.n	8005762 <softwareCalibPage+0x246>
		{

			rawAdcData = HAL_ADC_GetValue(&hadc);
 800557e:	4b7e      	ldr	r3, [pc, #504]	; (8005778 <softwareCalibPage+0x25c>)
 8005580:	0018      	movs	r0, r3
 8005582:	f001 fbcb 	bl	8006d1c <HAL_ADC_GetValue>
 8005586:	0002      	movs	r2, r0
 8005588:	210e      	movs	r1, #14
 800558a:	187b      	adds	r3, r7, r1
 800558c:	801a      	strh	r2, [r3, #0]
			rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 800558e:	187b      	adds	r3, r7, r1
 8005590:	881b      	ldrh	r3, [r3, #0]
 8005592:	0018      	movs	r0, r3
 8005594:	f7fd f8ac 	bl	80026f0 <__aeabi_i2d>
 8005598:	4a7a      	ldr	r2, [pc, #488]	; (8005784 <softwareCalibPage+0x268>)
 800559a:	4b7b      	ldr	r3, [pc, #492]	; (8005788 <softwareCalibPage+0x26c>)
 800559c:	f7fc fa74 	bl	8001a88 <__aeabi_dmul>
 80055a0:	0002      	movs	r2, r0
 80055a2:	000b      	movs	r3, r1
 80055a4:	0010      	movs	r0, r2
 80055a6:	0019      	movs	r1, r3
 80055a8:	f7fd f940 	bl	800282c <__aeabi_d2f>
 80055ac:	1c03      	adds	r3, r0, #0
 80055ae:	617b      	str	r3, [r7, #20]
			mVBuffCalib[count%6] = rawAdcmV;
 80055b0:	4b76      	ldr	r3, [pc, #472]	; (800578c <softwareCalibPage+0x270>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2106      	movs	r1, #6
 80055b6:	0018      	movs	r0, r3
 80055b8:	f7fa fe2a 	bl	8000210 <__aeabi_uidivmod>
 80055bc:	000b      	movs	r3, r1
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	001a      	movs	r2, r3
 80055c2:	4b73      	ldr	r3, [pc, #460]	; (8005790 <softwareCalibPage+0x274>)
 80055c4:	0092      	lsls	r2, r2, #2
 80055c6:	6979      	ldr	r1, [r7, #20]
 80055c8:	50d1      	str	r1, [r2, r3]

			count++;
 80055ca:	4b70      	ldr	r3, [pc, #448]	; (800578c <softwareCalibPage+0x270>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	3301      	adds	r3, #1
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	4b6e      	ldr	r3, [pc, #440]	; (800578c <softwareCalibPage+0x270>)
 80055d4:	701a      	strb	r2, [r3, #0]

			if(count >= 6)
 80055d6:	4b6d      	ldr	r3, [pc, #436]	; (800578c <softwareCalibPage+0x270>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	2b05      	cmp	r3, #5
 80055dc:	d91a      	bls.n	8005614 <softwareCalibPage+0xf8>
			{

				rawAdcmV = 0.0;
 80055de:	2300      	movs	r3, #0
 80055e0:	617b      	str	r3, [r7, #20]
				for(int i = 0 ; i < 6 ; i++)
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	e00c      	b.n	8005602 <softwareCalibPage+0xe6>
					rawAdcmV += mVBuffCalib[i];
 80055e8:	4b69      	ldr	r3, [pc, #420]	; (8005790 <softwareCalibPage+0x274>)
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	0092      	lsls	r2, r2, #2
 80055ee:	58d3      	ldr	r3, [r2, r3]
 80055f0:	1c19      	adds	r1, r3, #0
 80055f2:	6978      	ldr	r0, [r7, #20]
 80055f4:	f7fa ffaa 	bl	800054c <__aeabi_fadd>
 80055f8:	1c03      	adds	r3, r0, #0
 80055fa:	617b      	str	r3, [r7, #20]
				for(int i = 0 ; i < 6 ; i++)
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	3301      	adds	r3, #1
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b05      	cmp	r3, #5
 8005606:	ddef      	ble.n	80055e8 <softwareCalibPage+0xcc>

				rawAdcmV = ( rawAdcmV / 6.0 );
 8005608:	4962      	ldr	r1, [pc, #392]	; (8005794 <softwareCalibPage+0x278>)
 800560a:	6978      	ldr	r0, [r7, #20]
 800560c:	f7fb f93c 	bl	8000888 <__aeabi_fdiv>
 8005610:	1c03      	adds	r3, r0, #0
 8005612:	617b      	str	r3, [r7, #20]

			}

			HAL_ADC_Start(&hadc);
 8005614:	4b58      	ldr	r3, [pc, #352]	; (8005778 <softwareCalibPage+0x25c>)
 8005616:	0018      	movs	r0, r3
 8005618:	f001 fb2c 	bl	8006c74 <HAL_ADC_Start>

			swCalibTimer--;
 800561c:	4b5e      	ldr	r3, [pc, #376]	; (8005798 <softwareCalibPage+0x27c>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	3b01      	subs	r3, #1
 8005622:	b2da      	uxtb	r2, r3
 8005624:	4b5c      	ldr	r3, [pc, #368]	; (8005798 <softwareCalibPage+0x27c>)
 8005626:	701a      	strb	r2, [r3, #0]

			if(swCalibTimer <= 0)
 8005628:	4b5b      	ldr	r3, [pc, #364]	; (8005798 <softwareCalibPage+0x27c>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d154      	bne.n	80056da <softwareCalibPage+0x1be>
			{

				swCalibTimer = 9;
 8005630:	4b59      	ldr	r3, [pc, #356]	; (8005798 <softwareCalibPage+0x27c>)
 8005632:	2209      	movs	r2, #9
 8005634:	701a      	strb	r2, [r3, #0]
				timerOn = 0;
 8005636:	4b51      	ldr	r3, [pc, #324]	; (800577c <softwareCalibPage+0x260>)
 8005638:	2200      	movs	r2, #0
 800563a:	701a      	strb	r2, [r3, #0]

				count = 0;
 800563c:	4b53      	ldr	r3, [pc, #332]	; (800578c <softwareCalibPage+0x270>)
 800563e:	2200      	movs	r2, #0
 8005640:	701a      	strb	r2, [r3, #0]

				ST7735_WriteString(SWCALIB_PT_NUM_POSX, SWCALIB_PT_NUM_POSY, "PT.2", Font_11x18, WHITE, background);
 8005642:	4b4c      	ldr	r3, [pc, #304]	; (8005774 <softwareCalibPage+0x258>)
 8005644:	881a      	ldrh	r2, [r3, #0]
 8005646:	4b55      	ldr	r3, [pc, #340]	; (800579c <softwareCalibPage+0x280>)
 8005648:	4855      	ldr	r0, [pc, #340]	; (80057a0 <softwareCalibPage+0x284>)
 800564a:	9202      	str	r2, [sp, #8]
 800564c:	4a55      	ldr	r2, [pc, #340]	; (80057a4 <softwareCalibPage+0x288>)
 800564e:	9201      	str	r2, [sp, #4]
 8005650:	466a      	mov	r2, sp
 8005652:	6859      	ldr	r1, [r3, #4]
 8005654:	6011      	str	r1, [r2, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	0002      	movs	r2, r0
 800565a:	2168      	movs	r1, #104	; 0x68
 800565c:	203c      	movs	r0, #60	; 0x3c
 800565e:	f7fe fdbd 	bl	80041dc <ST7735_WriteString>

				buttonChangeColour(&swCalibElement[3].btn);
 8005662:	4b51      	ldr	r3, [pc, #324]	; (80057a8 <softwareCalibPage+0x28c>)
 8005664:	0018      	movs	r0, r3
 8005666:	f7ff f901 	bl	800486c <buttonChangeColour>

				twoPointsCalib_mV[pointIndex] = rawAdcmV;
 800566a:	4b50      	ldr	r3, [pc, #320]	; (80057ac <softwareCalibPage+0x290>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	001a      	movs	r2, r3
 8005670:	4b4f      	ldr	r3, [pc, #316]	; (80057b0 <softwareCalibPage+0x294>)
 8005672:	0092      	lsls	r2, r2, #2
 8005674:	6979      	ldr	r1, [r7, #20]
 8005676:	50d1      	str	r1, [r2, r3]
				twoPointsCalib_pH[pointIndex] = swCalibElement[2].nBox.boxNum;
 8005678:	4b3c      	ldr	r3, [pc, #240]	; (800576c <softwareCalibPage+0x250>)
 800567a:	2268      	movs	r2, #104	; 0x68
 800567c:	5c9a      	ldrb	r2, [r3, r2]
 800567e:	4b4b      	ldr	r3, [pc, #300]	; (80057ac <softwareCalibPage+0x290>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	001c      	movs	r4, r3
 8005684:	0010      	movs	r0, r2
 8005686:	f7fb fdbb 	bl	8001200 <__aeabi_ui2f>
 800568a:	1c01      	adds	r1, r0, #0
 800568c:	4b49      	ldr	r3, [pc, #292]	; (80057b4 <softwareCalibPage+0x298>)
 800568e:	00a2      	lsls	r2, r4, #2
 8005690:	50d1      	str	r1, [r2, r3]

				pointIndex++;
 8005692:	4b46      	ldr	r3, [pc, #280]	; (80057ac <softwareCalibPage+0x290>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	3301      	adds	r3, #1
 8005698:	b2da      	uxtb	r2, r3
 800569a:	4b44      	ldr	r3, [pc, #272]	; (80057ac <softwareCalibPage+0x290>)
 800569c:	701a      	strb	r2, [r3, #0]

				if(pointIndex >= 2)
 800569e:	4b43      	ldr	r3, [pc, #268]	; (80057ac <softwareCalibPage+0x290>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d919      	bls.n	80056da <softwareCalibPage+0x1be>
				{

					writeFloatToEE(EE_SWCALIB_PH_PT1, &twoPointsCalib_pH[0]);
 80056a6:	4b43      	ldr	r3, [pc, #268]	; (80057b4 <softwareCalibPage+0x298>)
 80056a8:	0019      	movs	r1, r3
 80056aa:	2000      	movs	r0, #0
 80056ac:	f000 fff5 	bl	800669a <writeFloatToEE>
					writeFloatToEE(EE_SWCALIB_MV_PT1, &twoPointsCalib_mV[0]);
 80056b0:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <softwareCalibPage+0x294>)
 80056b2:	0019      	movs	r1, r3
 80056b4:	2004      	movs	r0, #4
 80056b6:	f000 fff0 	bl	800669a <writeFloatToEE>
					writeFloatToEE(EE_SWCALIB_PH_PT2, &twoPointsCalib_pH[1]);
 80056ba:	4b3f      	ldr	r3, [pc, #252]	; (80057b8 <softwareCalibPage+0x29c>)
 80056bc:	0019      	movs	r1, r3
 80056be:	2008      	movs	r0, #8
 80056c0:	f000 ffeb 	bl	800669a <writeFloatToEE>
					writeFloatToEE(EE_SWCALIB_MV_PT2, &twoPointsCalib_mV[1]);
 80056c4:	4b3d      	ldr	r3, [pc, #244]	; (80057bc <softwareCalibPage+0x2a0>)
 80056c6:	0019      	movs	r1, r3
 80056c8:	200c      	movs	r0, #12
 80056ca:	f000 ffe6 	bl	800669a <writeFloatToEE>

					pointIndex = 0;
 80056ce:	4b37      	ldr	r3, [pc, #220]	; (80057ac <softwareCalibPage+0x290>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
					newPageFlags = MAIN_PROCESS;
 80056d4:	4b3a      	ldr	r3, [pc, #232]	; (80057c0 <softwareCalibPage+0x2a4>)
 80056d6:	2202      	movs	r2, #2
 80056d8:	801a      	strh	r2, [r3, #0]

				}

			}

			sTimer[0] = ( swCalibTimer + 0x30 );
 80056da:	4b2f      	ldr	r3, [pc, #188]	; (8005798 <softwareCalibPage+0x27c>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	3330      	adds	r3, #48	; 0x30
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	210c      	movs	r1, #12
 80056e4:	187b      	adds	r3, r7, r1
 80056e6:	701a      	strb	r2, [r3, #0]
			sTimer[1] = 0;
 80056e8:	187b      	adds	r3, r7, r1
 80056ea:	2200      	movs	r2, #0
 80056ec:	705a      	strb	r2, [r3, #1]
			ST7735_WriteString(SWCALIB_TIMER_POSX, SWCALIB_TIMER_POSY,sTimer ,Font_11x18, WHITE, background);
 80056ee:	4b21      	ldr	r3, [pc, #132]	; (8005774 <softwareCalibPage+0x258>)
 80056f0:	881a      	ldrh	r2, [r3, #0]
 80056f2:	4b2a      	ldr	r3, [pc, #168]	; (800579c <softwareCalibPage+0x280>)
 80056f4:	1878      	adds	r0, r7, r1
 80056f6:	9202      	str	r2, [sp, #8]
 80056f8:	4a2a      	ldr	r2, [pc, #168]	; (80057a4 <softwareCalibPage+0x288>)
 80056fa:	9201      	str	r2, [sp, #4]
 80056fc:	466a      	mov	r2, sp
 80056fe:	6859      	ldr	r1, [r3, #4]
 8005700:	6011      	str	r1, [r2, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	0002      	movs	r2, r0
 8005706:	2137      	movs	r1, #55	; 0x37
 8005708:	2014      	movs	r0, #20
 800570a:	f7fe fd67 	bl	80041dc <ST7735_WriteString>

			swCalibTimeStamp = getTimeMs();
 800570e:	f000 fddd 	bl	80062cc <getTimeMs>
 8005712:	0002      	movs	r2, r0
 8005714:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <softwareCalibPage+0x264>)
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e023      	b.n	8005762 <softwareCalibPage+0x246>

		}

	}
	else if(swCalibTimer != 9)
 800571a:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <softwareCalibPage+0x27c>)
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b09      	cmp	r3, #9
 8005720:	d01f      	beq.n	8005762 <softwareCalibPage+0x246>
	{

		swCalibTimer = 9;
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <softwareCalibPage+0x27c>)
 8005724:	2209      	movs	r2, #9
 8005726:	701a      	strb	r2, [r3, #0]
		swCalibTimeStamp = 0;
 8005728:	4b15      	ldr	r3, [pc, #84]	; (8005780 <softwareCalibPage+0x264>)
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
		sTimer[0] = ( swCalibTimer + 0x30 );
 800572e:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <softwareCalibPage+0x27c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	3330      	adds	r3, #48	; 0x30
 8005734:	b2da      	uxtb	r2, r3
 8005736:	210c      	movs	r1, #12
 8005738:	187b      	adds	r3, r7, r1
 800573a:	701a      	strb	r2, [r3, #0]
		sTimer[1] = 0;
 800573c:	187b      	adds	r3, r7, r1
 800573e:	2200      	movs	r2, #0
 8005740:	705a      	strb	r2, [r3, #1]
		ST7735_WriteString(SWCALIB_TIMER_POSX, SWCALIB_TIMER_POSY,sTimer ,Font_11x18, WHITE, background);
 8005742:	4b0c      	ldr	r3, [pc, #48]	; (8005774 <softwareCalibPage+0x258>)
 8005744:	881a      	ldrh	r2, [r3, #0]
 8005746:	4b15      	ldr	r3, [pc, #84]	; (800579c <softwareCalibPage+0x280>)
 8005748:	1878      	adds	r0, r7, r1
 800574a:	9202      	str	r2, [sp, #8]
 800574c:	4a15      	ldr	r2, [pc, #84]	; (80057a4 <softwareCalibPage+0x288>)
 800574e:	9201      	str	r2, [sp, #4]
 8005750:	466a      	mov	r2, sp
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	6011      	str	r1, [r2, #0]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	0002      	movs	r2, r0
 800575a:	2137      	movs	r1, #55	; 0x37
 800575c:	2014      	movs	r0, #20
 800575e:	f7fe fd3d 	bl	80041dc <ST7735_WriteString>

	}

}
 8005762:	46bd      	mov	sp, r7
 8005764:	b007      	add	sp, #28
 8005766:	bd90      	pop	{r4, r7, pc}
 8005768:	20000144 	.word	0x20000144
 800576c:	20000148 	.word	0x20000148
 8005770:	200001fd 	.word	0x200001fd
 8005774:	20000204 	.word	0x20000204
 8005778:	2000009c 	.word	0x2000009c
 800577c:	20000206 	.word	0x20000206
 8005780:	20000244 	.word	0x20000244
 8005784:	66666666 	.word	0x66666666
 8005788:	3f4a6666 	.word	0x3f4a6666
 800578c:	20000248 	.word	0x20000248
 8005790:	2000024c 	.word	0x2000024c
 8005794:	40c00000 	.word	0x40c00000
 8005798:	2000003c 	.word	0x2000003c
 800579c:	20000008 	.word	0x20000008
 80057a0:	08008944 	.word	0x08008944
 80057a4:	0000ffff 	.word	0x0000ffff
 80057a8:	200001b8 	.word	0x200001b8
 80057ac:	20000264 	.word	0x20000264
 80057b0:	2000002c 	.word	0x2000002c
 80057b4:	20000024 	.word	0x20000024
 80057b8:	20000028 	.word	0x20000028
 80057bc:	20000030 	.word	0x20000030
 80057c0:	20000022 	.word	0x20000022

080057c4 <btnSwitchPage>:


void btnSwitchPage(BTN *btn)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

	buttonChangeColour(btn);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	0018      	movs	r0, r3
 80057d0:	f7ff f84c 	bl	800486c <buttonChangeColour>
	newPageFlags = btn->btnArg;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8a1a      	ldrh	r2, [r3, #16]
 80057d8:	4b02      	ldr	r3, [pc, #8]	; (80057e4 <btnSwitchPage+0x20>)
 80057da:	801a      	strh	r2, [r3, #0]

}
 80057dc:	46c0      	nop			; (mov r8, r8)
 80057de:	46bd      	mov	sp, r7
 80057e0:	b002      	add	sp, #8
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	20000022 	.word	0x20000022

080057e8 <btnStartTimer>:


void btnStartTimer(BTN *btn)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]

	buttonChangeColour(btn);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7ff f83a 	bl	800486c <buttonChangeColour>
	timerOn = !timerOn;
 80057f8:	4b05      	ldr	r3, [pc, #20]	; (8005810 <btnStartTimer+0x28>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	425a      	negs	r2, r3
 80057fe:	4153      	adcs	r3, r2
 8005800:	b2db      	uxtb	r3, r3
 8005802:	001a      	movs	r2, r3
 8005804:	4b02      	ldr	r3, [pc, #8]	; (8005810 <btnStartTimer+0x28>)
 8005806:	701a      	strb	r2, [r3, #0]

}
 8005808:	46c0      	nop			; (mov r8, r8)
 800580a:	46bd      	mov	sp, r7
 800580c:	b002      	add	sp, #8
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000206 	.word	0x20000206

08005814 <joysticHandler>:


/**************** PRIVATE FUNCTIONS ******************/

static void joysticHandler(ELEMENT *element)
{
 8005814:	b5b0      	push	{r4, r5, r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af06      	add	r7, sp, #24
 800581a:	6078      	str	r0, [r7, #4]

	/*
	if(!HAL_GPIO_ReadPin(UP_GPIO_Port, UP_Pin))
	{
	*/
	if(!HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin))
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	011a      	lsls	r2, r3, #4
 8005820:	2390      	movs	r3, #144	; 0x90
 8005822:	05db      	lsls	r3, r3, #23
 8005824:	0011      	movs	r1, r2
 8005826:	0018      	movs	r0, r3
 8005828:	f002 f824 	bl	8007874 <HAL_GPIO_ReadPin>
 800582c:	1e03      	subs	r3, r0, #0
 800582e:	d16c      	bne.n	800590a <joysticHandler+0xf6>
	{

		joystick = UP;
 8005830:	4bd2      	ldr	r3, [pc, #840]	; (8005b7c <joysticHandler+0x368>)
 8005832:	2201      	movs	r2, #1
 8005834:	701a      	strb	r2, [r3, #0]

		if(joystick_old == REST)
 8005836:	4bd2      	ldr	r3, [pc, #840]	; (8005b80 <joysticHandler+0x36c>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d161      	bne.n	8005902 <joysticHandler+0xee>
		{

			if(( element[elementIndex].elemtentType == EDITNUMBOX ) && ( element[elementIndex].nBox.boxNum < 14 ))
 800583e:	4bd1      	ldr	r3, [pc, #836]	; (8005b84 <joysticHandler+0x370>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	001a      	movs	r2, r3
 8005844:	0013      	movs	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	189b      	adds	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	001a      	movs	r2, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	189b      	adds	r3, r3, r2
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b02      	cmp	r3, #2
 8005856:	d12d      	bne.n	80058b4 <joysticHandler+0xa0>
 8005858:	4bca      	ldr	r3, [pc, #808]	; (8005b84 <joysticHandler+0x370>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	001a      	movs	r2, r3
 800585e:	0013      	movs	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	189b      	adds	r3, r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	001a      	movs	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	189b      	adds	r3, r3, r2
 800586c:	2220      	movs	r2, #32
 800586e:	5c9b      	ldrb	r3, [r3, r2]
 8005870:	2b0d      	cmp	r3, #13
 8005872:	d81f      	bhi.n	80058b4 <joysticHandler+0xa0>
			{

				element[elementIndex].nBox.boxNum++;
 8005874:	4bc3      	ldr	r3, [pc, #780]	; (8005b84 <joysticHandler+0x370>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	001a      	movs	r2, r3
 800587a:	0013      	movs	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	189b      	adds	r3, r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	001a      	movs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	189b      	adds	r3, r3, r2
 8005888:	2220      	movs	r2, #32
 800588a:	5c9a      	ldrb	r2, [r3, r2]
 800588c:	3201      	adds	r2, #1
 800588e:	b2d1      	uxtb	r1, r2
 8005890:	2220      	movs	r2, #32
 8005892:	5499      	strb	r1, [r3, r2]
				modifyNumBox(element[elementIndex].nBox);
 8005894:	4bbb      	ldr	r3, [pc, #748]	; (8005b84 <joysticHandler+0x370>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	001a      	movs	r2, r3
 800589a:	0013      	movs	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	189b      	adds	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	001a      	movs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	189b      	adds	r3, r3, r2
 80058a8:	6998      	ldr	r0, [r3, #24]
 80058aa:	69d9      	ldr	r1, [r3, #28]
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	f7fe ff4d 	bl	800474c <modifyNumBox>
 80058b2:	e026      	b.n	8005902 <joysticHandler+0xee>

			}
			else
			{

				elementIndex--;
 80058b4:	4bb3      	ldr	r3, [pc, #716]	; (8005b84 <joysticHandler+0x370>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	4bb1      	ldr	r3, [pc, #708]	; (8005b84 <joysticHandler+0x370>)
 80058be:	701a      	strb	r2, [r3, #0]

				if(( elementIndex >= elementIndexLim ) || ( elementIndex < 0 ))
 80058c0:	4bb0      	ldr	r3, [pc, #704]	; (8005b84 <joysticHandler+0x370>)
 80058c2:	781a      	ldrb	r2, [r3, #0]
 80058c4:	4bb0      	ldr	r3, [pc, #704]	; (8005b88 <joysticHandler+0x374>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d302      	bcc.n	80058d2 <joysticHandler+0xbe>
					elementIndex = 0;
 80058cc:	4bad      	ldr	r3, [pc, #692]	; (8005b84 <joysticHandler+0x370>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]

				targetElement(element[elementIndex]);
 80058d2:	4bac      	ldr	r3, [pc, #688]	; (8005b84 <joysticHandler+0x370>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	001a      	movs	r2, r3
 80058d8:	0013      	movs	r3, r2
 80058da:	00db      	lsls	r3, r3, #3
 80058dc:	189b      	adds	r3, r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	001a      	movs	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	189b      	adds	r3, r3, r2
 80058e6:	466a      	mov	r2, sp
 80058e8:	0011      	movs	r1, r2
 80058ea:	001a      	movs	r2, r3
 80058ec:	3210      	adds	r2, #16
 80058ee:	ca31      	ldmia	r2!, {r0, r4, r5}
 80058f0:	c131      	stmia	r1!, {r0, r4, r5}
 80058f2:	ca11      	ldmia	r2!, {r0, r4}
 80058f4:	c111      	stmia	r1!, {r0, r4}
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	6859      	ldr	r1, [r3, #4]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f7ff f81f 	bl	8004940 <targetElement>

			}

		}

		HAL_Delay(200);
 8005902:	20c8      	movs	r0, #200	; 0xc8
 8005904:	f001 f852 	bl	80069ac <HAL_Delay>
 8005908:	e130      	b.n	8005b6c <joysticHandler+0x358>

	}
	else if(!HAL_GPIO_ReadPin(DOWN_GPIO_Port, DOWN_Pin))
 800590a:	2380      	movs	r3, #128	; 0x80
 800590c:	01db      	lsls	r3, r3, #7
 800590e:	4a9f      	ldr	r2, [pc, #636]	; (8005b8c <joysticHandler+0x378>)
 8005910:	0019      	movs	r1, r3
 8005912:	0010      	movs	r0, r2
 8005914:	f001 ffae 	bl	8007874 <HAL_GPIO_ReadPin>
 8005918:	1e03      	subs	r3, r0, #0
 800591a:	d16f      	bne.n	80059fc <joysticHandler+0x1e8>
	{

		joystick = DOWN;
 800591c:	4b97      	ldr	r3, [pc, #604]	; (8005b7c <joysticHandler+0x368>)
 800591e:	2202      	movs	r2, #2
 8005920:	701a      	strb	r2, [r3, #0]

		if(joystick_old == REST)
 8005922:	4b97      	ldr	r3, [pc, #604]	; (8005b80 <joysticHandler+0x36c>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d164      	bne.n	80059f4 <joysticHandler+0x1e0>
		{

			if(( element[elementIndex].elemtentType == EDITNUMBOX )  && ( element[elementIndex].nBox.boxNum > 0 ))
 800592a:	4b96      	ldr	r3, [pc, #600]	; (8005b84 <joysticHandler+0x370>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	001a      	movs	r2, r3
 8005930:	0013      	movs	r3, r2
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	189b      	adds	r3, r3, r2
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	001a      	movs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	189b      	adds	r3, r3, r2
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d12d      	bne.n	80059a0 <joysticHandler+0x18c>
 8005944:	4b8f      	ldr	r3, [pc, #572]	; (8005b84 <joysticHandler+0x370>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	001a      	movs	r2, r3
 800594a:	0013      	movs	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	189b      	adds	r3, r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	001a      	movs	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	189b      	adds	r3, r3, r2
 8005958:	2220      	movs	r2, #32
 800595a:	5c9b      	ldrb	r3, [r3, r2]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d01f      	beq.n	80059a0 <joysticHandler+0x18c>
			{

				element[elementIndex].nBox.boxNum--;
 8005960:	4b88      	ldr	r3, [pc, #544]	; (8005b84 <joysticHandler+0x370>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	001a      	movs	r2, r3
 8005966:	0013      	movs	r3, r2
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	189b      	adds	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	001a      	movs	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	189b      	adds	r3, r3, r2
 8005974:	2220      	movs	r2, #32
 8005976:	5c9a      	ldrb	r2, [r3, r2]
 8005978:	3a01      	subs	r2, #1
 800597a:	b2d1      	uxtb	r1, r2
 800597c:	2220      	movs	r2, #32
 800597e:	5499      	strb	r1, [r3, r2]
				modifyNumBox(element[elementIndex].nBox);
 8005980:	4b80      	ldr	r3, [pc, #512]	; (8005b84 <joysticHandler+0x370>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	001a      	movs	r2, r3
 8005986:	0013      	movs	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	189b      	adds	r3, r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	001a      	movs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	189b      	adds	r3, r3, r2
 8005994:	6998      	ldr	r0, [r3, #24]
 8005996:	69d9      	ldr	r1, [r3, #28]
 8005998:	6a1a      	ldr	r2, [r3, #32]
 800599a:	f7fe fed7 	bl	800474c <modifyNumBox>
 800599e:	e029      	b.n	80059f4 <joysticHandler+0x1e0>

			}
			else
			{

				elementIndex++;
 80059a0:	4b78      	ldr	r3, [pc, #480]	; (8005b84 <joysticHandler+0x370>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	3301      	adds	r3, #1
 80059a6:	b2da      	uxtb	r2, r3
 80059a8:	4b76      	ldr	r3, [pc, #472]	; (8005b84 <joysticHandler+0x370>)
 80059aa:	701a      	strb	r2, [r3, #0]

				if(( elementIndex >= elementIndexLim ) || ( elementIndex < 0 ))
 80059ac:	4b75      	ldr	r3, [pc, #468]	; (8005b84 <joysticHandler+0x370>)
 80059ae:	781a      	ldrb	r2, [r3, #0]
 80059b0:	4b75      	ldr	r3, [pc, #468]	; (8005b88 <joysticHandler+0x374>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d305      	bcc.n	80059c4 <joysticHandler+0x1b0>
					elementIndex = ( elementIndexLim - 1 );
 80059b8:	4b73      	ldr	r3, [pc, #460]	; (8005b88 <joysticHandler+0x374>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	3b01      	subs	r3, #1
 80059be:	b2da      	uxtb	r2, r3
 80059c0:	4b70      	ldr	r3, [pc, #448]	; (8005b84 <joysticHandler+0x370>)
 80059c2:	701a      	strb	r2, [r3, #0]

				targetElement(element[elementIndex]);
 80059c4:	4b6f      	ldr	r3, [pc, #444]	; (8005b84 <joysticHandler+0x370>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	001a      	movs	r2, r3
 80059ca:	0013      	movs	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	189b      	adds	r3, r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	001a      	movs	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	189b      	adds	r3, r3, r2
 80059d8:	466a      	mov	r2, sp
 80059da:	0011      	movs	r1, r2
 80059dc:	001a      	movs	r2, r3
 80059de:	3210      	adds	r2, #16
 80059e0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80059e2:	c131      	stmia	r1!, {r0, r4, r5}
 80059e4:	ca11      	ldmia	r2!, {r0, r4}
 80059e6:	c111      	stmia	r1!, {r0, r4}
 80059e8:	6818      	ldr	r0, [r3, #0]
 80059ea:	6859      	ldr	r1, [r3, #4]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	f7fe ffa6 	bl	8004940 <targetElement>

			}

		}

		HAL_Delay(200);
 80059f4:	20c8      	movs	r0, #200	; 0xc8
 80059f6:	f000 ffd9 	bl	80069ac <HAL_Delay>
 80059fa:	e0b7      	b.n	8005b6c <joysticHandler+0x358>

	}
	else if(!HAL_GPIO_ReadPin(LEFT_GPIO_Port, LEFT_Pin))
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	011a      	lsls	r2, r3, #4
 8005a00:	2390      	movs	r3, #144	; 0x90
 8005a02:	05db      	lsls	r3, r3, #23
 8005a04:	0011      	movs	r1, r2
 8005a06:	0018      	movs	r0, r3
 8005a08:	f001 ff34 	bl	8007874 <HAL_GPIO_ReadPin>
 8005a0c:	1e03      	subs	r3, r0, #0
 8005a0e:	d134      	bne.n	8005a7a <joysticHandler+0x266>
	{

		joystick = LEFT;
 8005a10:	4b5a      	ldr	r3, [pc, #360]	; (8005b7c <joysticHandler+0x368>)
 8005a12:	2203      	movs	r2, #3
 8005a14:	701a      	strb	r2, [r3, #0]

		if(joystick_old == REST)
 8005a16:	4b5a      	ldr	r3, [pc, #360]	; (8005b80 <joysticHandler+0x36c>)
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d129      	bne.n	8005a72 <joysticHandler+0x25e>
		{

			elementIndex--;
 8005a1e:	4b59      	ldr	r3, [pc, #356]	; (8005b84 <joysticHandler+0x370>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	4b57      	ldr	r3, [pc, #348]	; (8005b84 <joysticHandler+0x370>)
 8005a28:	701a      	strb	r2, [r3, #0]

			if(( elementIndex >= elementIndexLim ) || ( elementIndex < 0 ))
 8005a2a:	4b56      	ldr	r3, [pc, #344]	; (8005b84 <joysticHandler+0x370>)
 8005a2c:	781a      	ldrb	r2, [r3, #0]
 8005a2e:	4b56      	ldr	r3, [pc, #344]	; (8005b88 <joysticHandler+0x374>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d305      	bcc.n	8005a42 <joysticHandler+0x22e>
				elementIndex = ( elementIndexLim - 1 );
 8005a36:	4b54      	ldr	r3, [pc, #336]	; (8005b88 <joysticHandler+0x374>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	4b51      	ldr	r3, [pc, #324]	; (8005b84 <joysticHandler+0x370>)
 8005a40:	701a      	strb	r2, [r3, #0]

			targetElement(element[elementIndex]);
 8005a42:	4b50      	ldr	r3, [pc, #320]	; (8005b84 <joysticHandler+0x370>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	001a      	movs	r2, r3
 8005a48:	0013      	movs	r3, r2
 8005a4a:	00db      	lsls	r3, r3, #3
 8005a4c:	189b      	adds	r3, r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	001a      	movs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	189b      	adds	r3, r3, r2
 8005a56:	466a      	mov	r2, sp
 8005a58:	0011      	movs	r1, r2
 8005a5a:	001a      	movs	r2, r3
 8005a5c:	3210      	adds	r2, #16
 8005a5e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005a60:	c131      	stmia	r1!, {r0, r4, r5}
 8005a62:	ca11      	ldmia	r2!, {r0, r4}
 8005a64:	c111      	stmia	r1!, {r0, r4}
 8005a66:	6818      	ldr	r0, [r3, #0]
 8005a68:	6859      	ldr	r1, [r3, #4]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	f7fe ff67 	bl	8004940 <targetElement>

		}

		HAL_Delay(200);
 8005a72:	20c8      	movs	r0, #200	; 0xc8
 8005a74:	f000 ff9a 	bl	80069ac <HAL_Delay>
 8005a78:	e078      	b.n	8005b6c <joysticHandler+0x358>

	}
	else if(!HAL_GPIO_ReadPin(RIGHT_GPIO_Port, RIGHT_Pin))
 8005a7a:	2380      	movs	r3, #128	; 0x80
 8005a7c:	00da      	lsls	r2, r3, #3
 8005a7e:	2390      	movs	r3, #144	; 0x90
 8005a80:	05db      	lsls	r3, r3, #23
 8005a82:	0011      	movs	r1, r2
 8005a84:	0018      	movs	r0, r3
 8005a86:	f001 fef5 	bl	8007874 <HAL_GPIO_ReadPin>
 8005a8a:	1e03      	subs	r3, r0, #0
 8005a8c:	d131      	bne.n	8005af2 <joysticHandler+0x2de>
	{

		joystick = RIGHT;
 8005a8e:	4b3b      	ldr	r3, [pc, #236]	; (8005b7c <joysticHandler+0x368>)
 8005a90:	2204      	movs	r2, #4
 8005a92:	701a      	strb	r2, [r3, #0]

		if(joystick_old == REST)
 8005a94:	4b3a      	ldr	r3, [pc, #232]	; (8005b80 <joysticHandler+0x36c>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d126      	bne.n	8005aea <joysticHandler+0x2d6>
		{

			elementIndex++;
 8005a9c:	4b39      	ldr	r3, [pc, #228]	; (8005b84 <joysticHandler+0x370>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	b2da      	uxtb	r2, r3
 8005aa4:	4b37      	ldr	r3, [pc, #220]	; (8005b84 <joysticHandler+0x370>)
 8005aa6:	701a      	strb	r2, [r3, #0]

			if(( elementIndex >= elementIndexLim ) || ( elementIndex < 0 ))
 8005aa8:	4b36      	ldr	r3, [pc, #216]	; (8005b84 <joysticHandler+0x370>)
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <joysticHandler+0x374>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d302      	bcc.n	8005aba <joysticHandler+0x2a6>
				elementIndex = 0;
 8005ab4:	4b33      	ldr	r3, [pc, #204]	; (8005b84 <joysticHandler+0x370>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	701a      	strb	r2, [r3, #0]

			targetElement(element[elementIndex]);
 8005aba:	4b32      	ldr	r3, [pc, #200]	; (8005b84 <joysticHandler+0x370>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	001a      	movs	r2, r3
 8005ac0:	0013      	movs	r3, r2
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	189b      	adds	r3, r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	001a      	movs	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	189b      	adds	r3, r3, r2
 8005ace:	466a      	mov	r2, sp
 8005ad0:	0011      	movs	r1, r2
 8005ad2:	001a      	movs	r2, r3
 8005ad4:	3210      	adds	r2, #16
 8005ad6:	ca31      	ldmia	r2!, {r0, r4, r5}
 8005ad8:	c131      	stmia	r1!, {r0, r4, r5}
 8005ada:	ca11      	ldmia	r2!, {r0, r4}
 8005adc:	c111      	stmia	r1!, {r0, r4}
 8005ade:	6818      	ldr	r0, [r3, #0]
 8005ae0:	6859      	ldr	r1, [r3, #4]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f7fe ff2b 	bl	8004940 <targetElement>

		}

		HAL_Delay(200);
 8005aea:	20c8      	movs	r0, #200	; 0xc8
 8005aec:	f000 ff5e 	bl	80069ac <HAL_Delay>
 8005af0:	e03c      	b.n	8005b6c <joysticHandler+0x358>

	}
	else if(!HAL_GPIO_ReadPin(SEL_GPIO_Port, SEL_Pin))
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	2390      	movs	r3, #144	; 0x90
 8005af8:	05db      	lsls	r3, r3, #23
 8005afa:	0011      	movs	r1, r2
 8005afc:	0018      	movs	r0, r3
 8005afe:	f001 feb9 	bl	8007874 <HAL_GPIO_ReadPin>
 8005b02:	1e03      	subs	r3, r0, #0
 8005b04:	d12f      	bne.n	8005b66 <joysticHandler+0x352>
	{

		joystick = CENTER;
 8005b06:	4b1d      	ldr	r3, [pc, #116]	; (8005b7c <joysticHandler+0x368>)
 8005b08:	2205      	movs	r2, #5
 8005b0a:	701a      	strb	r2, [r3, #0]

		if(joystick_old == REST)
 8005b0c:	4b1c      	ldr	r3, [pc, #112]	; (8005b80 <joysticHandler+0x36c>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d124      	bne.n	8005b5e <joysticHandler+0x34a>
		{

			if(element[elementIndex].elemtentType == BUTTON)
 8005b14:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <joysticHandler+0x370>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	001a      	movs	r2, r3
 8005b1a:	0013      	movs	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	189b      	adds	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	001a      	movs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	189b      	adds	r3, r3, r2
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d117      	bne.n	8005b5e <joysticHandler+0x34a>
				element[elementIndex].btn.btnAction(&element[elementIndex].btn);
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <joysticHandler+0x370>)
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	001a      	movs	r2, r3
 8005b34:	0013      	movs	r3, r2
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	189b      	adds	r3, r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	001a      	movs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	189b      	adds	r3, r3, r2
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <joysticHandler+0x370>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	0019      	movs	r1, r3
 8005b4a:	000b      	movs	r3, r1
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	185b      	adds	r3, r3, r1
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	0019      	movs	r1, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	185b      	adds	r3, r3, r1
 8005b58:	3304      	adds	r3, #4
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	4790      	blx	r2

		}

		HAL_Delay(200);
 8005b5e:	20c8      	movs	r0, #200	; 0xc8
 8005b60:	f000 ff24 	bl	80069ac <HAL_Delay>
 8005b64:	e002      	b.n	8005b6c <joysticHandler+0x358>

	}
	else
	{

		joystick = REST;
 8005b66:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <joysticHandler+0x368>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	701a      	strb	r2, [r3, #0]

	}

	joystick_old = joystick;
 8005b6c:	4b03      	ldr	r3, [pc, #12]	; (8005b7c <joysticHandler+0x368>)
 8005b6e:	781a      	ldrb	r2, [r3, #0]
 8005b70:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <joysticHandler+0x36c>)
 8005b72:	701a      	strb	r2, [r3, #0]

}
 8005b74:	46c0      	nop			; (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	b002      	add	sp, #8
 8005b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b7c:	20000140 	.word	0x20000140
 8005b80:	20000265 	.word	0x20000265
 8005b84:	200001fc 	.word	0x200001fc
 8005b88:	200001fd 	.word	0x200001fd
 8005b8c:	48000800 	.word	0x48000800

08005b90 <processStatus_update>:


static uint8_t processStatus_update(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0

	static PROCESS_STATUS local_process_status = IDLE_PROCESS;


	if(HAL_GPIO_ReadPin(OPAMP_CALIB_GPIO_Port, OPAMP_CALIB_Pin) == 0)
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	015b      	lsls	r3, r3, #5
 8005b98:	4a14      	ldr	r2, [pc, #80]	; (8005bec <processStatus_update+0x5c>)
 8005b9a:	0019      	movs	r1, r3
 8005b9c:	0010      	movs	r0, r2
 8005b9e:	f001 fe69 	bl	8007874 <HAL_GPIO_ReadPin>
 8005ba2:	1e03      	subs	r3, r0, #0
 8005ba4:	d103      	bne.n	8005bae <processStatus_update+0x1e>
		process_status = HW_PROCESS;
 8005ba6:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <processStatus_update+0x60>)
 8005ba8:	2208      	movs	r2, #8
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	e004      	b.n	8005bb8 <processStatus_update+0x28>
	else
		process_status = newPageFlags;
 8005bae:	4b11      	ldr	r3, [pc, #68]	; (8005bf4 <processStatus_update+0x64>)
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b2da      	uxtb	r2, r3
 8005bb4:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <processStatus_update+0x60>)
 8005bb6:	701a      	strb	r2, [r3, #0]

	if(local_process_status != process_status)
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <processStatus_update+0x68>)
 8005bba:	781a      	ldrb	r2, [r3, #0]
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <processStatus_update+0x60>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d00b      	beq.n	8005bdc <processStatus_update+0x4c>
	{

		local_process_status = process_status;
 8005bc4:	4b0a      	ldr	r3, [pc, #40]	; (8005bf0 <processStatus_update+0x60>)
 8005bc6:	781a      	ldrb	r2, [r3, #0]
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <processStatus_update+0x68>)
 8005bca:	701a      	strb	r2, [r3, #0]
		elementIndex = 0;
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	; (8005bfc <processStatus_update+0x6c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
		timerOn = 0;
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <processStatus_update+0x70>)
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]

		return 1;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e004      	b.n	8005be6 <processStatus_update+0x56>

	}
	else
	{

		local_process_status = process_status;
 8005bdc:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <processStatus_update+0x60>)
 8005bde:	781a      	ldrb	r2, [r3, #0]
 8005be0:	4b05      	ldr	r3, [pc, #20]	; (8005bf8 <processStatus_update+0x68>)
 8005be2:	701a      	strb	r2, [r3, #0]
		return 0;
 8005be4:	2300      	movs	r3, #0

	}

}
 8005be6:	0018      	movs	r0, r3
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	48000400 	.word	0x48000400
 8005bf0:	20000020 	.word	0x20000020
 8005bf4:	20000022 	.word	0x20000022
 8005bf8:	2000003d 	.word	0x2000003d
 8005bfc:	200001fc 	.word	0x200001fc
 8005c00:	20000206 	.word	0x20000206

08005c04 <pHStatus_update>:


static void pHStatus_update(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0

	if(pH_current >= STRONG_BASE_THR)
 8005c08:	4b23      	ldr	r3, [pc, #140]	; (8005c98 <pHStatus_update+0x94>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4923      	ldr	r1, [pc, #140]	; (8005c9c <pHStatus_update+0x98>)
 8005c0e:	1c18      	adds	r0, r3, #0
 8005c10:	f7fa fc5c 	bl	80004cc <__aeabi_fcmpge>
 8005c14:	1e03      	subs	r3, r0, #0
 8005c16:	d003      	beq.n	8005c20 <pHStatus_update+0x1c>
		pH_status = STRONG_BASE;
 8005c18:	4b21      	ldr	r3, [pc, #132]	; (8005ca0 <pHStatus_update+0x9c>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	701a      	strb	r2, [r3, #0]
	else if(pH_current <= STRONG_ACID_THR)
		pH_status = STRONG_ACID;
	else
		pH_status = NEUTRAL;

}
 8005c1e:	e037      	b.n	8005c90 <pHStatus_update+0x8c>
	else if(( pH_current > BASE_THR ) && ( pH_current < STRONG_BASE_THR ))
 8005c20:	4b1d      	ldr	r3, [pc, #116]	; (8005c98 <pHStatus_update+0x94>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	491f      	ldr	r1, [pc, #124]	; (8005ca4 <pHStatus_update+0xa0>)
 8005c26:	1c18      	adds	r0, r3, #0
 8005c28:	f7fa fc46 	bl	80004b8 <__aeabi_fcmpgt>
 8005c2c:	1e03      	subs	r3, r0, #0
 8005c2e:	d00b      	beq.n	8005c48 <pHStatus_update+0x44>
 8005c30:	4b19      	ldr	r3, [pc, #100]	; (8005c98 <pHStatus_update+0x94>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4919      	ldr	r1, [pc, #100]	; (8005c9c <pHStatus_update+0x98>)
 8005c36:	1c18      	adds	r0, r3, #0
 8005c38:	f7fa fc2a 	bl	8000490 <__aeabi_fcmplt>
 8005c3c:	1e03      	subs	r3, r0, #0
 8005c3e:	d003      	beq.n	8005c48 <pHStatus_update+0x44>
		pH_status = BASE;
 8005c40:	4b17      	ldr	r3, [pc, #92]	; (8005ca0 <pHStatus_update+0x9c>)
 8005c42:	2202      	movs	r2, #2
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	e023      	b.n	8005c90 <pHStatus_update+0x8c>
	else if(( pH_current > STRONG_ACID_THR ) && ( pH_current < ACID_THR ))
 8005c48:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <pHStatus_update+0x94>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4916      	ldr	r1, [pc, #88]	; (8005ca8 <pHStatus_update+0xa4>)
 8005c4e:	1c18      	adds	r0, r3, #0
 8005c50:	f7fa fc32 	bl	80004b8 <__aeabi_fcmpgt>
 8005c54:	1e03      	subs	r3, r0, #0
 8005c56:	d00b      	beq.n	8005c70 <pHStatus_update+0x6c>
 8005c58:	4b0f      	ldr	r3, [pc, #60]	; (8005c98 <pHStatus_update+0x94>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4913      	ldr	r1, [pc, #76]	; (8005cac <pHStatus_update+0xa8>)
 8005c5e:	1c18      	adds	r0, r3, #0
 8005c60:	f7fa fc16 	bl	8000490 <__aeabi_fcmplt>
 8005c64:	1e03      	subs	r3, r0, #0
 8005c66:	d003      	beq.n	8005c70 <pHStatus_update+0x6c>
		pH_status = ACID;
 8005c68:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <pHStatus_update+0x9c>)
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	701a      	strb	r2, [r3, #0]
 8005c6e:	e00f      	b.n	8005c90 <pHStatus_update+0x8c>
	else if(pH_current <= STRONG_ACID_THR)
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <pHStatus_update+0x94>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	490c      	ldr	r1, [pc, #48]	; (8005ca8 <pHStatus_update+0xa4>)
 8005c76:	1c18      	adds	r0, r3, #0
 8005c78:	f7fa fc14 	bl	80004a4 <__aeabi_fcmple>
 8005c7c:	1e03      	subs	r3, r0, #0
 8005c7e:	d003      	beq.n	8005c88 <pHStatus_update+0x84>
		pH_status = STRONG_ACID;
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <pHStatus_update+0x9c>)
 8005c82:	2205      	movs	r2, #5
 8005c84:	701a      	strb	r2, [r3, #0]
}
 8005c86:	e003      	b.n	8005c90 <pHStatus_update+0x8c>
		pH_status = NEUTRAL;
 8005c88:	4b05      	ldr	r3, [pc, #20]	; (8005ca0 <pHStatus_update+0x9c>)
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	701a      	strb	r2, [r3, #0]
}
 8005c8e:	e7ff      	b.n	8005c90 <pHStatus_update+0x8c>
 8005c90:	46c0      	nop			; (mov r8, r8)
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	46c0      	nop			; (mov r8, r8)
 8005c98:	2000001c 	.word	0x2000001c
 8005c9c:	41280000 	.word	0x41280000
 8005ca0:	20000021 	.word	0x20000021
 8005ca4:	41080000 	.word	0x41080000
 8005ca8:	40600000 	.word	0x40600000
 8005cac:	40b00000 	.word	0x40b00000

08005cb0 <mainPage_graphics>:


static void mainPage_graphics(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0

	// 1. Title
	pageTitle_graphics("Current pH", MAIN_PAGE);
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <mainPage_graphics+0x20>)
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f000 f8c1 	bl	8005e40 <pageTitle_graphics>

	// 2. Color scale
	colorBar_graphics();
 8005cbe:	f000 f95b 	bl	8005f78 <colorBar_graphics>

	// 3. Buttons
	mainElement[0].elemtentType = NONE;
 8005cc2:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <mainPage_graphics+0x24>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
	//mainElement[1] = createButton(MAIN_TO_SWCALIB_BTN_POSX, MAIN_TO_SWCALIB_BTN_POSY, "CAL", GRAY, BLACK, btnSwitchPage, SW_PROCESS);

}
 8005cc8:	46c0      	nop			; (mov r8, r8)
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	0800894c 	.word	0x0800894c
 8005cd4:	200001d8 	.word	0x200001d8

08005cd8 <circuitCalibPage_graphics>:


static void circuitCalibPage_graphics(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	af00      	add	r7, sp, #0

	// 1. Title
	pageTitle_graphics("HW calibration", CIRCUIT_CALIBRATION_PAGE);
 8005cdc:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <circuitCalibPage_graphics+0x20>)
 8005cde:	2108      	movs	r1, #8
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f000 f8ad 	bl	8005e40 <pageTitle_graphics>

	// 2. Offset indicators
	orizzIndicators_graphics(RED);
 8005ce6:	23f8      	movs	r3, #248	; 0xf8
 8005ce8:	021b      	lsls	r3, r3, #8
 8005cea:	0018      	movs	r0, r3
 8005cec:	f000 f9f8 	bl	80060e0 <orizzIndicators_graphics>

}
 8005cf0:	46c0      	nop			; (mov r8, r8)
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	08008958 	.word	0x08008958

08005cfc <softwareCalibPage_graphics>:


static void softwareCalibPage_graphics(void)
{
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b091      	sub	sp, #68	; 0x44
 8005d00:	af04      	add	r7, sp, #16

	// 1. Title
	pageTitle_graphics("SW calibration", SOFTWARE_CALIBRATION_PAGE);
 8005d02:	4b43      	ldr	r3, [pc, #268]	; (8005e10 <softwareCalibPage_graphics+0x114>)
 8005d04:	2104      	movs	r1, #4
 8005d06:	0018      	movs	r0, r3
 8005d08:	f000 f89a 	bl	8005e40 <pageTitle_graphics>

	// 2. Timer
	char sTimer[] = {'9', 0};
 8005d0c:	242c      	movs	r4, #44	; 0x2c
 8005d0e:	193b      	adds	r3, r7, r4
 8005d10:	2239      	movs	r2, #57	; 0x39
 8005d12:	801a      	strh	r2, [r3, #0]
	ST7735_WriteString(5, 35, "TIMER", Font_11x18, WHITE, BLACK);
 8005d14:	4b3f      	ldr	r3, [pc, #252]	; (8005e14 <softwareCalibPage_graphics+0x118>)
 8005d16:	4840      	ldr	r0, [pc, #256]	; (8005e18 <softwareCalibPage_graphics+0x11c>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	9202      	str	r2, [sp, #8]
 8005d1c:	4a3f      	ldr	r2, [pc, #252]	; (8005e1c <softwareCalibPage_graphics+0x120>)
 8005d1e:	9201      	str	r2, [sp, #4]
 8005d20:	466a      	mov	r2, sp
 8005d22:	6859      	ldr	r1, [r3, #4]
 8005d24:	6011      	str	r1, [r2, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	0002      	movs	r2, r0
 8005d2a:	2123      	movs	r1, #35	; 0x23
 8005d2c:	2005      	movs	r0, #5
 8005d2e:	f7fe fa55 	bl	80041dc <ST7735_WriteString>
	ST7735_WriteString(SWCALIB_TIMER_POSX, SWCALIB_TIMER_POSY, sTimer, Font_11x18, WHITE, BLACK);
 8005d32:	4b38      	ldr	r3, [pc, #224]	; (8005e14 <softwareCalibPage_graphics+0x118>)
 8005d34:	1938      	adds	r0, r7, r4
 8005d36:	2200      	movs	r2, #0
 8005d38:	9202      	str	r2, [sp, #8]
 8005d3a:	4a38      	ldr	r2, [pc, #224]	; (8005e1c <softwareCalibPage_graphics+0x120>)
 8005d3c:	9201      	str	r2, [sp, #4]
 8005d3e:	466a      	mov	r2, sp
 8005d40:	6859      	ldr	r1, [r3, #4]
 8005d42:	6011      	str	r1, [r2, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	0002      	movs	r2, r0
 8005d48:	2137      	movs	r1, #55	; 0x37
 8005d4a:	2014      	movs	r0, #20
 8005d4c:	f7fe fa46 	bl	80041dc <ST7735_WriteString>

	// 3. Point number
	ST7735_WriteString(SWCALIB_PT_NUM_POSX, SWCALIB_PT_NUM_POSY, "PT.1", Font_11x18, WHITE, BLACK);
 8005d50:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <softwareCalibPage_graphics+0x118>)
 8005d52:	4833      	ldr	r0, [pc, #204]	; (8005e20 <softwareCalibPage_graphics+0x124>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	9202      	str	r2, [sp, #8]
 8005d58:	4a30      	ldr	r2, [pc, #192]	; (8005e1c <softwareCalibPage_graphics+0x120>)
 8005d5a:	9201      	str	r2, [sp, #4]
 8005d5c:	466a      	mov	r2, sp
 8005d5e:	6859      	ldr	r1, [r3, #4]
 8005d60:	6011      	str	r1, [r2, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	0002      	movs	r2, r0
 8005d66:	2168      	movs	r1, #104	; 0x68
 8005d68:	203c      	movs	r0, #60	; 0x3c
 8005d6a:	f7fe fa37 	bl	80041dc <ST7735_WriteString>

	// 4. First element always NULL
	swCalibElement[0].elemtentType = NONE;
 8005d6e:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <softwareCalibPage_graphics+0x128>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]

	// 5. Home button
	swCalibElement[1] = createButton(HOME_BTN_POSX, HOME_BTN_POSY, "<-", GRAY, GRAY, btnSwitchPage, 2);
 8005d74:	4c2b      	ldr	r4, [pc, #172]	; (8005e24 <softwareCalibPage_graphics+0x128>)
 8005d76:	0038      	movs	r0, r7
 8005d78:	4a2b      	ldr	r2, [pc, #172]	; (8005e28 <softwareCalibPage_graphics+0x12c>)
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	9303      	str	r3, [sp, #12]
 8005d7e:	4b2b      	ldr	r3, [pc, #172]	; (8005e2c <softwareCalibPage_graphics+0x130>)
 8005d80:	9302      	str	r3, [sp, #8]
 8005d82:	4b2b      	ldr	r3, [pc, #172]	; (8005e30 <softwareCalibPage_graphics+0x134>)
 8005d84:	9301      	str	r3, [sp, #4]
 8005d86:	4b2a      	ldr	r3, [pc, #168]	; (8005e30 <softwareCalibPage_graphics+0x134>)
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	0013      	movs	r3, r2
 8005d8c:	2268      	movs	r2, #104	; 0x68
 8005d8e:	210c      	movs	r1, #12
 8005d90:	f7fe fb66 	bl	8004460 <createButton>
 8005d94:	003a      	movs	r2, r7
 8005d96:	0023      	movs	r3, r4
 8005d98:	3324      	adds	r3, #36	; 0x24
 8005d9a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005d9c:	c313      	stmia	r3!, {r0, r1, r4}
 8005d9e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005da0:	c313      	stmia	r3!, {r0, r1, r4}
 8005da2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005da4:	c313      	stmia	r3!, {r0, r1, r4}

	// 6. pH buffer
	swCalibElement[2] = createEditNumBox(PH_BUFFER_TEXT_POSX, PH_BUFFER_TEXT_POSY, "pH BUFF", BLACK, 0, BLACK);
 8005da6:	4c1f      	ldr	r4, [pc, #124]	; (8005e24 <softwareCalibPage_graphics+0x128>)
 8005da8:	0038      	movs	r0, r7
 8005daa:	4b22      	ldr	r3, [pc, #136]	; (8005e34 <softwareCalibPage_graphics+0x138>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	9202      	str	r2, [sp, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	9201      	str	r2, [sp, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	9200      	str	r2, [sp, #0]
 8005db8:	2223      	movs	r2, #35	; 0x23
 8005dba:	2150      	movs	r1, #80	; 0x50
 8005dbc:	f7fe fbf6 	bl	80045ac <createEditNumBox>
 8005dc0:	003a      	movs	r2, r7
 8005dc2:	0023      	movs	r3, r4
 8005dc4:	3348      	adds	r3, #72	; 0x48
 8005dc6:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005dc8:	c313      	stmia	r3!, {r0, r1, r4}
 8005dca:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005dcc:	c313      	stmia	r3!, {r0, r1, r4}
 8005dce:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005dd0:	c313      	stmia	r3!, {r0, r1, r4}

	// 7. Buttons
	swCalibElement[3] = createButton(PH_BUFFER_START_BTN_POSX, PH_BUFFER_START_BTN_POSY, "START/STOP", RED, GREEN, btnStartTimer, 0);
 8005dd2:	4c14      	ldr	r4, [pc, #80]	; (8005e24 <softwareCalibPage_graphics+0x128>)
 8005dd4:	0038      	movs	r0, r7
 8005dd6:	4a18      	ldr	r2, [pc, #96]	; (8005e38 <softwareCalibPage_graphics+0x13c>)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9303      	str	r3, [sp, #12]
 8005ddc:	4b17      	ldr	r3, [pc, #92]	; (8005e3c <softwareCalibPage_graphics+0x140>)
 8005dde:	9302      	str	r3, [sp, #8]
 8005de0:	23fc      	movs	r3, #252	; 0xfc
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	9301      	str	r3, [sp, #4]
 8005de6:	23f8      	movs	r3, #248	; 0xf8
 8005de8:	021b      	lsls	r3, r3, #8
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	0013      	movs	r3, r2
 8005dee:	2250      	movs	r2, #80	; 0x50
 8005df0:	2150      	movs	r1, #80	; 0x50
 8005df2:	f7fe fb35 	bl	8004460 <createButton>
 8005df6:	003a      	movs	r2, r7
 8005df8:	0023      	movs	r3, r4
 8005dfa:	336c      	adds	r3, #108	; 0x6c
 8005dfc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005dfe:	c313      	stmia	r3!, {r0, r1, r4}
 8005e00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005e02:	c313      	stmia	r3!, {r0, r1, r4}
 8005e04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005e06:	c313      	stmia	r3!, {r0, r1, r4}

}
 8005e08:	46c0      	nop			; (mov r8, r8)
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	b00d      	add	sp, #52	; 0x34
 8005e0e:	bd90      	pop	{r4, r7, pc}
 8005e10:	08008968 	.word	0x08008968
 8005e14:	20000008 	.word	0x20000008
 8005e18:	08008978 	.word	0x08008978
 8005e1c:	0000ffff 	.word	0x0000ffff
 8005e20:	08008980 	.word	0x08008980
 8005e24:	20000148 	.word	0x20000148
 8005e28:	08008988 	.word	0x08008988
 8005e2c:	080057c5 	.word	0x080057c5
 8005e30:	00009cd3 	.word	0x00009cd3
 8005e34:	0800898c 	.word	0x0800898c
 8005e38:	08008994 	.word	0x08008994
 8005e3c:	080057e9 	.word	0x080057e9

08005e40 <pageTitle_graphics>:

static void pageTitle_graphics(const char *title, uint8_t page)
{
 8005e40:	b590      	push	{r4, r7, lr}
 8005e42:	b089      	sub	sp, #36	; 0x24
 8005e44:	af04      	add	r7, sp, #16
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	000a      	movs	r2, r1
 8005e4a:	1cfb      	adds	r3, r7, #3
 8005e4c:	701a      	strb	r2, [r3, #0]
	 *   \						   /
	 *	  \-----------------------/
	 */


	uint8_t offset = 0;
 8005e4e:	210f      	movs	r1, #15
 8005e50:	187b      	adds	r3, r7, r1
 8005e52:	2200      	movs	r2, #0
 8005e54:	701a      	strb	r2, [r3, #0]


	if(page == MAIN_PAGE)
 8005e56:	1cfb      	adds	r3, r7, #3
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d103      	bne.n	8005e66 <pageTitle_graphics+0x26>
		offset = 0;
 8005e5e:	187b      	adds	r3, r7, r1
 8005e60:	2200      	movs	r2, #0
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e015      	b.n	8005e92 <pageTitle_graphics+0x52>
	else if(page == CIRCUIT_CALIBRATION_PAGE)
 8005e66:	1cfb      	adds	r3, r7, #3
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d104      	bne.n	8005e78 <pageTitle_graphics+0x38>
		offset = 13;
 8005e6e:	230f      	movs	r3, #15
 8005e70:	18fb      	adds	r3, r7, r3
 8005e72:	220d      	movs	r2, #13
 8005e74:	701a      	strb	r2, [r3, #0]
 8005e76:	e00c      	b.n	8005e92 <pageTitle_graphics+0x52>
	else if(page == SOFTWARE_CALIBRATION_PAGE)
 8005e78:	1cfb      	adds	r3, r7, #3
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d104      	bne.n	8005e8a <pageTitle_graphics+0x4a>
		offset = 13;
 8005e80:	230f      	movs	r3, #15
 8005e82:	18fb      	adds	r3, r7, r3
 8005e84:	220d      	movs	r2, #13
 8005e86:	701a      	strb	r2, [r3, #0]
 8005e88:	e003      	b.n	8005e92 <pageTitle_graphics+0x52>
	else
		offset = 0;
 8005e8a:	230f      	movs	r3, #15
 8005e8c:	18fb      	adds	r3, r7, r3
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]

	ST7735_SetRotation(1);
 8005e92:	2001      	movs	r0, #1
 8005e94:	f7fe f82e 	bl	8003ef4 <ST7735_SetRotation>

	fillTriangle(30-offset, 0, 50-offset, 0, 50-offset, 20, MAIN_COLOR);
 8005e98:	240f      	movs	r4, #15
 8005e9a:	193b      	adds	r3, r7, r4
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	221e      	movs	r2, #30
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b218      	sxth	r0, r3
 8005ea8:	193b      	adds	r3, r7, r4
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2232      	movs	r2, #50	; 0x32
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	b219      	sxth	r1, r3
 8005eb6:	193b      	adds	r3, r7, r4
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2232      	movs	r2, #50	; 0x32
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	b21b      	sxth	r3, r3
 8005ec4:	22c3      	movs	r2, #195	; 0xc3
 8005ec6:	0112      	lsls	r2, r2, #4
 8005ec8:	9202      	str	r2, [sp, #8]
 8005eca:	2214      	movs	r2, #20
 8005ecc:	9201      	str	r2, [sp, #4]
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	000a      	movs	r2, r1
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	f7fd fc67 	bl	80037a8 <fillTriangle>
	fillTriangle(110+offset, 0, 130+offset, 0, 110+offset, 20, MAIN_COLOR);
 8005eda:	193b      	adds	r3, r7, r4
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	336e      	adds	r3, #110	; 0x6e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	b218      	sxth	r0, r3
 8005ee6:	193b      	adds	r3, r7, r4
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	3382      	adds	r3, #130	; 0x82
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	b219      	sxth	r1, r3
 8005ef2:	193b      	adds	r3, r7, r4
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	336e      	adds	r3, #110	; 0x6e
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	b21b      	sxth	r3, r3
 8005efe:	22c3      	movs	r2, #195	; 0xc3
 8005f00:	0112      	lsls	r2, r2, #4
 8005f02:	9202      	str	r2, [sp, #8]
 8005f04:	2214      	movs	r2, #20
 8005f06:	9201      	str	r2, [sp, #4]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	000a      	movs	r2, r1
 8005f0e:	2100      	movs	r1, #0
 8005f10:	f7fd fc4a 	bl	80037a8 <fillTriangle>
    fillRect(50-offset, 0, 60+(2*offset), 21, MAIN_COLOR);
 8005f14:	193b      	adds	r3, r7, r4
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2232      	movs	r2, #50	; 0x32
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	b218      	sxth	r0, r3
 8005f22:	193b      	adds	r3, r7, r4
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	331e      	adds	r3, #30
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	18db      	adds	r3, r3, r3
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	b21a      	sxth	r2, r3
 8005f30:	23c3      	movs	r3, #195	; 0xc3
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	2315      	movs	r3, #21
 8005f38:	2100      	movs	r1, #0
 8005f3a:	f7fc fd39 	bl	80029b0 <fillRect>

    ST7735_WriteString(45-offset, 3, title, Font_7x10, WHITE, MAIN_COLOR);
 8005f3e:	193b      	adds	r3, r7, r4
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	222d      	movs	r2, #45	; 0x2d
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	b298      	uxth	r0, r3
 8005f4a:	4b09      	ldr	r3, [pc, #36]	; (8005f70 <pageTitle_graphics+0x130>)
 8005f4c:	687c      	ldr	r4, [r7, #4]
 8005f4e:	22c3      	movs	r2, #195	; 0xc3
 8005f50:	0112      	lsls	r2, r2, #4
 8005f52:	9202      	str	r2, [sp, #8]
 8005f54:	4a07      	ldr	r2, [pc, #28]	; (8005f74 <pageTitle_graphics+0x134>)
 8005f56:	9201      	str	r2, [sp, #4]
 8005f58:	466a      	mov	r2, sp
 8005f5a:	6859      	ldr	r1, [r3, #4]
 8005f5c:	6011      	str	r1, [r2, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	0022      	movs	r2, r4
 8005f62:	2103      	movs	r1, #3
 8005f64:	f7fe f93a 	bl	80041dc <ST7735_WriteString>

}
 8005f68:	46c0      	nop			; (mov r8, r8)
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b005      	add	sp, #20
 8005f6e:	bd90      	pop	{r4, r7, pc}
 8005f70:	20000000 	.word	0x20000000
 8005f74:	0000ffff 	.word	0x0000ffff

08005f78 <colorBar_graphics>:

static void colorBar_graphics(void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af02      	add	r7, sp, #8
	 * |________|	0
	 *
	 */


	ST7735_SetRotation(1);
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f7fd ffb8 	bl	8003ef4 <ST7735_SetRotation>

	uint8_t x = 120;
 8005f84:	1dfb      	adds	r3, r7, #7
 8005f86:	2278      	movs	r2, #120	; 0x78
 8005f88:	701a      	strb	r2, [r3, #0]
	uint8_t y = 100;
 8005f8a:	1dbb      	adds	r3, r7, #6
 8005f8c:	2264      	movs	r2, #100	; 0x64
 8005f8e:	701a      	strb	r2, [r3, #0]

	drawRect(x, y-80, 40, 20, BLACK);
 8005f90:	1dfb      	adds	r3, r7, #7
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	b218      	sxth	r0, r3
 8005f96:	1dbb      	adds	r3, r7, #6
 8005f98:	781b      	ldrb	r3, [r3, #0]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b50      	subs	r3, #80	; 0x50
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	b219      	sxth	r1, r3
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	2314      	movs	r3, #20
 8005fa8:	2228      	movs	r2, #40	; 0x28
 8005faa:	f7fd f9a7 	bl	80032fc <drawRect>
	drawRect(x, y-60, 40, 20, BLACK);
 8005fae:	1dfb      	adds	r3, r7, #7
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	b218      	sxth	r0, r3
 8005fb4:	1dbb      	adds	r3, r7, #6
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b3c      	subs	r3, #60	; 0x3c
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	b219      	sxth	r1, r3
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	2314      	movs	r3, #20
 8005fc6:	2228      	movs	r2, #40	; 0x28
 8005fc8:	f7fd f998 	bl	80032fc <drawRect>
	drawRect(x, y-40, 40, 20, BLACK);
 8005fcc:	1dfb      	adds	r3, r7, #7
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	b218      	sxth	r0, r3
 8005fd2:	1dbb      	adds	r3, r7, #6
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b28      	subs	r3, #40	; 0x28
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	b219      	sxth	r1, r3
 8005fde:	2300      	movs	r3, #0
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	2314      	movs	r3, #20
 8005fe4:	2228      	movs	r2, #40	; 0x28
 8005fe6:	f7fd f989 	bl	80032fc <drawRect>
	drawRect(x, y-20, 40, 20, BLACK);
 8005fea:	1dfb      	adds	r3, r7, #7
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	b218      	sxth	r0, r3
 8005ff0:	1dbb      	adds	r3, r7, #6
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b14      	subs	r3, #20
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	b219      	sxth	r1, r3
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2314      	movs	r3, #20
 8006002:	2228      	movs	r2, #40	; 0x28
 8006004:	f7fd f97a 	bl	80032fc <drawRect>
	drawRect(x, y, 40, 20, BLACK);
 8006008:	1dfb      	adds	r3, r7, #7
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	b218      	sxth	r0, r3
 800600e:	1dbb      	adds	r3, r7, #6
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	b219      	sxth	r1, r3
 8006014:	2300      	movs	r3, #0
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	2314      	movs	r3, #20
 800601a:	2228      	movs	r2, #40	; 0x28
 800601c:	f7fd f96e 	bl	80032fc <drawRect>

	fillRect(x+1, y-80, 39, 19, DARK_BLUE);
 8006020:	1dfb      	adds	r3, r7, #7
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	b29b      	uxth	r3, r3
 8006026:	3301      	adds	r3, #1
 8006028:	b29b      	uxth	r3, r3
 800602a:	b218      	sxth	r0, r3
 800602c:	1dbb      	adds	r3, r7, #6
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b50      	subs	r3, #80	; 0x50
 8006034:	b29b      	uxth	r3, r3
 8006036:	b219      	sxth	r1, r3
 8006038:	231f      	movs	r3, #31
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	2313      	movs	r3, #19
 800603e:	2227      	movs	r2, #39	; 0x27
 8006040:	f7fc fcb6 	bl	80029b0 <fillRect>
	fillRect(x+1, y-60, 39, 19, BLUE);
 8006044:	1dfb      	adds	r3, r7, #7
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	b29b      	uxth	r3, r3
 800604a:	3301      	adds	r3, #1
 800604c:	b29b      	uxth	r3, r3
 800604e:	b218      	sxth	r0, r3
 8006050:	1dbb      	adds	r3, r7, #6
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b3c      	subs	r3, #60	; 0x3c
 8006058:	b29b      	uxth	r3, r3
 800605a:	b219      	sxth	r1, r3
 800605c:	23ff      	movs	r3, #255	; 0xff
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2313      	movs	r3, #19
 8006062:	2227      	movs	r2, #39	; 0x27
 8006064:	f7fc fca4 	bl	80029b0 <fillRect>
	fillRect(x+1, y-40, 39, 19, GREEN);
 8006068:	1dfb      	adds	r3, r7, #7
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	3301      	adds	r3, #1
 8006070:	b29b      	uxth	r3, r3
 8006072:	b218      	sxth	r0, r3
 8006074:	1dbb      	adds	r3, r7, #6
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	b29b      	uxth	r3, r3
 800607a:	3b28      	subs	r3, #40	; 0x28
 800607c:	b29b      	uxth	r3, r3
 800607e:	b219      	sxth	r1, r3
 8006080:	23fc      	movs	r3, #252	; 0xfc
 8006082:	00db      	lsls	r3, r3, #3
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	2313      	movs	r3, #19
 8006088:	2227      	movs	r2, #39	; 0x27
 800608a:	f7fc fc91 	bl	80029b0 <fillRect>
	fillRect(x+1, y-20, 39, 19, YELLOW);
 800608e:	1dfb      	adds	r3, r7, #7
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	3301      	adds	r3, #1
 8006096:	b29b      	uxth	r3, r3
 8006098:	b218      	sxth	r0, r3
 800609a:	1dbb      	adds	r3, r7, #6
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	3b14      	subs	r3, #20
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	b219      	sxth	r1, r3
 80060a6:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <colorBar_graphics+0x164>)
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	2313      	movs	r3, #19
 80060ac:	2227      	movs	r2, #39	; 0x27
 80060ae:	f7fc fc7f 	bl	80029b0 <fillRect>
	fillRect(x+1, y, 39, 19, RED);
 80060b2:	1dfb      	adds	r3, r7, #7
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3301      	adds	r3, #1
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	b218      	sxth	r0, r3
 80060be:	1dbb      	adds	r3, r7, #6
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	b219      	sxth	r1, r3
 80060c4:	23f8      	movs	r3, #248	; 0xf8
 80060c6:	021b      	lsls	r3, r3, #8
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	2313      	movs	r3, #19
 80060cc:	2227      	movs	r2, #39	; 0x27
 80060ce:	f7fc fc6f 	bl	80029b0 <fillRect>

}
 80060d2:	46c0      	nop			; (mov r8, r8)
 80060d4:	46bd      	mov	sp, r7
 80060d6:	b002      	add	sp, #8
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	0000ffe0 	.word	0x0000ffe0

080060e0 <orizzIndicators_graphics>:


static void orizzIndicators_graphics(uint16_t color)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af04      	add	r7, sp, #16
 80060e6:	0002      	movs	r2, r0
 80060e8:	1dbb      	adds	r3, r7, #6
 80060ea:	801a      	strh	r2, [r3, #0]
	 * |/                              \|
	 *
	 */


	fillTriangle(0, 128-34, 20, 128-54, 0, 128-74, color);
 80060ec:	1dbb      	adds	r3, r7, #6
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	9302      	str	r3, [sp, #8]
 80060f2:	2336      	movs	r3, #54	; 0x36
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	2300      	movs	r3, #0
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	234a      	movs	r3, #74	; 0x4a
 80060fc:	2214      	movs	r2, #20
 80060fe:	215e      	movs	r1, #94	; 0x5e
 8006100:	2000      	movs	r0, #0
 8006102:	f7fd fb51 	bl	80037a8 <fillTriangle>
	fillTriangle(160, 128-34, 140, 128-54, 160, 128-74, color);
 8006106:	1dbb      	adds	r3, r7, #6
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	9302      	str	r3, [sp, #8]
 800610c:	2336      	movs	r3, #54	; 0x36
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	23a0      	movs	r3, #160	; 0xa0
 8006112:	9300      	str	r3, [sp, #0]
 8006114:	234a      	movs	r3, #74	; 0x4a
 8006116:	228c      	movs	r2, #140	; 0x8c
 8006118:	215e      	movs	r1, #94	; 0x5e
 800611a:	20a0      	movs	r0, #160	; 0xa0
 800611c:	f7fd fb44 	bl	80037a8 <fillTriangle>

}
 8006120:	46c0      	nop			; (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b002      	add	sp, #8
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <HAL_MspInit+0x44>)
 8006130:	699a      	ldr	r2, [r3, #24]
 8006132:	4b0e      	ldr	r3, [pc, #56]	; (800616c <HAL_MspInit+0x44>)
 8006134:	2101      	movs	r1, #1
 8006136:	430a      	orrs	r2, r1
 8006138:	619a      	str	r2, [r3, #24]
 800613a:	4b0c      	ldr	r3, [pc, #48]	; (800616c <HAL_MspInit+0x44>)
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	2201      	movs	r2, #1
 8006140:	4013      	ands	r3, r2
 8006142:	607b      	str	r3, [r7, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006146:	4b09      	ldr	r3, [pc, #36]	; (800616c <HAL_MspInit+0x44>)
 8006148:	69da      	ldr	r2, [r3, #28]
 800614a:	4b08      	ldr	r3, [pc, #32]	; (800616c <HAL_MspInit+0x44>)
 800614c:	2180      	movs	r1, #128	; 0x80
 800614e:	0549      	lsls	r1, r1, #21
 8006150:	430a      	orrs	r2, r1
 8006152:	61da      	str	r2, [r3, #28]
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <HAL_MspInit+0x44>)
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	055b      	lsls	r3, r3, #21
 800615c:	4013      	ands	r3, r2
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006162:	46c0      	nop			; (mov r8, r8)
 8006164:	46bd      	mov	sp, r7
 8006166:	b002      	add	sp, #8
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	40021000 	.word	0x40021000

08006170 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b08b      	sub	sp, #44	; 0x2c
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006178:	2414      	movs	r4, #20
 800617a:	193b      	adds	r3, r7, r4
 800617c:	0018      	movs	r0, r3
 800617e:	2314      	movs	r3, #20
 8006180:	001a      	movs	r2, r3
 8006182:	2100      	movs	r1, #0
 8006184:	f002 fba6 	bl	80088d4 <memset>
  if(hadc->Instance==ADC1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a18      	ldr	r2, [pc, #96]	; (80061f0 <HAL_ADC_MspInit+0x80>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d12a      	bne.n	80061e8 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006192:	4b18      	ldr	r3, [pc, #96]	; (80061f4 <HAL_ADC_MspInit+0x84>)
 8006194:	699a      	ldr	r2, [r3, #24]
 8006196:	4b17      	ldr	r3, [pc, #92]	; (80061f4 <HAL_ADC_MspInit+0x84>)
 8006198:	2180      	movs	r1, #128	; 0x80
 800619a:	0089      	lsls	r1, r1, #2
 800619c:	430a      	orrs	r2, r1
 800619e:	619a      	str	r2, [r3, #24]
 80061a0:	4b14      	ldr	r3, [pc, #80]	; (80061f4 <HAL_ADC_MspInit+0x84>)
 80061a2:	699a      	ldr	r2, [r3, #24]
 80061a4:	2380      	movs	r3, #128	; 0x80
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4013      	ands	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ae:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <HAL_ADC_MspInit+0x84>)
 80061b0:	695a      	ldr	r2, [r3, #20]
 80061b2:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <HAL_ADC_MspInit+0x84>)
 80061b4:	2180      	movs	r1, #128	; 0x80
 80061b6:	02c9      	lsls	r1, r1, #11
 80061b8:	430a      	orrs	r2, r1
 80061ba:	615a      	str	r2, [r3, #20]
 80061bc:	4b0d      	ldr	r3, [pc, #52]	; (80061f4 <HAL_ADC_MspInit+0x84>)
 80061be:	695a      	ldr	r2, [r3, #20]
 80061c0:	2380      	movs	r3, #128	; 0x80
 80061c2:	02db      	lsls	r3, r3, #11
 80061c4:	4013      	ands	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 80061ca:	193b      	adds	r3, r7, r4
 80061cc:	2201      	movs	r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061d0:	193b      	adds	r3, r7, r4
 80061d2:	2203      	movs	r2, #3
 80061d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061d6:	193b      	adds	r3, r7, r4
 80061d8:	2200      	movs	r2, #0
 80061da:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 80061dc:	193b      	adds	r3, r7, r4
 80061de:	4a06      	ldr	r2, [pc, #24]	; (80061f8 <HAL_ADC_MspInit+0x88>)
 80061e0:	0019      	movs	r1, r3
 80061e2:	0010      	movs	r0, r2
 80061e4:	f001 f9d6 	bl	8007594 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80061e8:	46c0      	nop			; (mov r8, r8)
 80061ea:	46bd      	mov	sp, r7
 80061ec:	b00b      	add	sp, #44	; 0x2c
 80061ee:	bd90      	pop	{r4, r7, pc}
 80061f0:	40012400 	.word	0x40012400
 80061f4:	40021000 	.word	0x40021000
 80061f8:	48000400 	.word	0x48000400

080061fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80061fc:	b590      	push	{r4, r7, lr}
 80061fe:	b08b      	sub	sp, #44	; 0x2c
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006204:	2414      	movs	r4, #20
 8006206:	193b      	adds	r3, r7, r4
 8006208:	0018      	movs	r0, r3
 800620a:	2314      	movs	r3, #20
 800620c:	001a      	movs	r2, r3
 800620e:	2100      	movs	r1, #0
 8006210:	f002 fb60 	bl	80088d4 <memset>
  if(hspi->Instance==SPI1)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1c      	ldr	r2, [pc, #112]	; (800628c <HAL_SPI_MspInit+0x90>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d132      	bne.n	8006284 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800621e:	4b1c      	ldr	r3, [pc, #112]	; (8006290 <HAL_SPI_MspInit+0x94>)
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	4b1b      	ldr	r3, [pc, #108]	; (8006290 <HAL_SPI_MspInit+0x94>)
 8006224:	2180      	movs	r1, #128	; 0x80
 8006226:	0149      	lsls	r1, r1, #5
 8006228:	430a      	orrs	r2, r1
 800622a:	619a      	str	r2, [r3, #24]
 800622c:	4b18      	ldr	r3, [pc, #96]	; (8006290 <HAL_SPI_MspInit+0x94>)
 800622e:	699a      	ldr	r2, [r3, #24]
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	015b      	lsls	r3, r3, #5
 8006234:	4013      	ands	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800623a:	4b15      	ldr	r3, [pc, #84]	; (8006290 <HAL_SPI_MspInit+0x94>)
 800623c:	695a      	ldr	r2, [r3, #20]
 800623e:	4b14      	ldr	r3, [pc, #80]	; (8006290 <HAL_SPI_MspInit+0x94>)
 8006240:	2180      	movs	r1, #128	; 0x80
 8006242:	0289      	lsls	r1, r1, #10
 8006244:	430a      	orrs	r2, r1
 8006246:	615a      	str	r2, [r3, #20]
 8006248:	4b11      	ldr	r3, [pc, #68]	; (8006290 <HAL_SPI_MspInit+0x94>)
 800624a:	695a      	ldr	r2, [r3, #20]
 800624c:	2380      	movs	r3, #128	; 0x80
 800624e:	029b      	lsls	r3, r3, #10
 8006250:	4013      	ands	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006256:	0021      	movs	r1, r4
 8006258:	187b      	adds	r3, r7, r1
 800625a:	22e0      	movs	r2, #224	; 0xe0
 800625c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800625e:	187b      	adds	r3, r7, r1
 8006260:	2202      	movs	r2, #2
 8006262:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006264:	187b      	adds	r3, r7, r1
 8006266:	2200      	movs	r2, #0
 8006268:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800626a:	187b      	adds	r3, r7, r1
 800626c:	2203      	movs	r2, #3
 800626e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8006270:	187b      	adds	r3, r7, r1
 8006272:	2200      	movs	r2, #0
 8006274:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006276:	187a      	adds	r2, r7, r1
 8006278:	2390      	movs	r3, #144	; 0x90
 800627a:	05db      	lsls	r3, r3, #23
 800627c:	0011      	movs	r1, r2
 800627e:	0018      	movs	r0, r3
 8006280:	f001 f988 	bl	8007594 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006284:	46c0      	nop			; (mov r8, r8)
 8006286:	46bd      	mov	sp, r7
 8006288:	b00b      	add	sp, #44	; 0x2c
 800628a:	bd90      	pop	{r4, r7, pc}
 800628c:	40013000 	.word	0x40013000
 8006290:	40021000 	.word	0x40021000

08006294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006298:	e7fe      	b.n	8006298 <NMI_Handler+0x4>

0800629a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800629e:	e7fe      	b.n	800629e <HardFault_Handler+0x4>

080062a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80062a4:	46c0      	nop			; (mov r8, r8)
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062ae:	46c0      	nop			; (mov r8, r8)
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062b8:	f000 fb52 	bl	8006960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062bc:	46c0      	nop			; (mov r8, r8)
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <getTimeMs>:
/*
 *	@ Function; getDelayms
 *  @ Return; uint32_t -> current time in ms
 */
uint32_t getTimeMs(void)
{
 80062cc:	b5b0      	push	{r4, r5, r7, lr}
 80062ce:	af00      	add	r7, sp, #0

	// Tick frequency is by default 1kHz (1ms period)
	return ( HAL_GetTick() * HAL_GetTickFreq() );
 80062d0:	f000 fb58 	bl	8006984 <HAL_GetTick>
 80062d4:	0004      	movs	r4, r0
 80062d6:	f000 fb5f 	bl	8006998 <HAL_GetTickFreq>
 80062da:	0003      	movs	r3, r0
 80062dc:	4363      	muls	r3, r4

}
 80062de:	0018      	movs	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bdb0      	pop	{r4, r5, r7, pc}

080062e4 <getDelayMs>:
 *	@ Function; getDelayms
 * 	@ Par1; uint32_t timeStamp -> captured time
 *  @ Return; uint32_t tDiff -> time elapsed since timeStamp in ms
 */
uint32_t getDelayMs(uint32_t timeStamp)
{
 80062e4:	b590      	push	{r4, r7, lr}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

	uint32_t tDiff;
	uint32_t currentTime;

	currentTime = ( getTimeMs() * HAL_GetTickFreq() );
 80062ec:	f7ff ffee 	bl	80062cc <getTimeMs>
 80062f0:	0004      	movs	r4, r0
 80062f2:	f000 fb51 	bl	8006998 <HAL_GetTickFreq>
 80062f6:	0003      	movs	r3, r0
 80062f8:	4363      	muls	r3, r4
 80062fa:	60bb      	str	r3, [r7, #8]

	if(currentTime >= timeStamp)
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d304      	bcc.n	800630e <getDelayMs+0x2a>
		tDiff = currentTime - timeStamp;
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	e003      	b.n	8006316 <getDelayMs+0x32>
	else
		tDiff = timeStamp - currentTime;
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	60fb      	str	r3, [r7, #12]

	return tDiff;
 8006316:	68fb      	ldr	r3, [r7, #12]

}
 8006318:	0018      	movs	r0, r3
 800631a:	46bd      	mov	sp, r7
 800631c:	b005      	add	sp, #20
 800631e:	bd90      	pop	{r4, r7, pc}

08006320 <floatToString>:
 *	@ Description; converts a float number into a string
 * 	@ Par1; float f -> float number
 * 	@ Par2; char *s -> string
 */
void floatToString(float f, char *s)
{
 8006320:	b5b0      	push	{r4, r5, r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]

	uint16_t ui16Temp = (uint16_t)( f * 100 );
 800632a:	496a      	ldr	r1, [pc, #424]	; (80064d4 <floatToString+0x1b4>)
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7fa fc73 	bl	8000c18 <__aeabi_fmul>
 8006332:	1c03      	adds	r3, r0, #0
 8006334:	250e      	movs	r5, #14
 8006336:	197c      	adds	r4, r7, r5
 8006338:	1c18      	adds	r0, r3, #0
 800633a:	f7fa f8d1 	bl	80004e0 <__aeabi_f2uiz>
 800633e:	0003      	movs	r3, r0
 8006340:	8023      	strh	r3, [r4, #0]

	if(ui16Temp >= 1000)
 8006342:	197b      	adds	r3, r7, r5
 8006344:	881a      	ldrh	r2, [r3, #0]
 8006346:	23fa      	movs	r3, #250	; 0xfa
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	429a      	cmp	r2, r3
 800634c:	d36d      	bcc.n	800642a <floatToString+0x10a>
	{

		s[5] = 0;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	3305      	adds	r3, #5
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]

		s[0] = (uint8_t)( ui16Temp / 1000 ) + 0x30;
 8006356:	197b      	adds	r3, r7, r5
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	22fa      	movs	r2, #250	; 0xfa
 800635c:	0091      	lsls	r1, r2, #2
 800635e:	0018      	movs	r0, r3
 8006360:	f7f9 fed0 	bl	8000104 <__udivsi3>
 8006364:	0003      	movs	r3, r0
 8006366:	b29b      	uxth	r3, r3
 8006368:	b2db      	uxtb	r3, r3
 800636a:	3330      	adds	r3, #48	; 0x30
 800636c:	b2da      	uxtb	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	701a      	strb	r2, [r3, #0]
		s[1] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 1000 ) * 1000 ) ) / 100 ) + 0x30;
 8006372:	197b      	adds	r3, r7, r5
 8006374:	881c      	ldrh	r4, [r3, #0]
 8006376:	197b      	adds	r3, r7, r5
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	22fa      	movs	r2, #250	; 0xfa
 800637c:	0091      	lsls	r1, r2, #2
 800637e:	0018      	movs	r0, r3
 8006380:	f7f9 fec0 	bl	8000104 <__udivsi3>
 8006384:	0003      	movs	r3, r0
 8006386:	b29b      	uxth	r3, r3
 8006388:	001a      	movs	r2, r3
 800638a:	0013      	movs	r3, r2
 800638c:	059b      	lsls	r3, r3, #22
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	019b      	lsls	r3, r3, #6
 8006392:	189b      	adds	r3, r3, r2
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	189b      	adds	r3, r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	18e3      	adds	r3, r4, r3
 800639c:	2164      	movs	r1, #100	; 0x64
 800639e:	0018      	movs	r0, r3
 80063a0:	f7f9 ff3a 	bl	8000218 <__divsi3>
 80063a4:	0003      	movs	r3, r0
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	3301      	adds	r3, #1
 80063ac:	3230      	adds	r2, #48	; 0x30
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
		s[2] = '.';
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	3302      	adds	r3, #2
 80063b6:	222e      	movs	r2, #46	; 0x2e
 80063b8:	701a      	strb	r2, [r3, #0]
		s[3] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
 80063ba:	197b      	adds	r3, r7, r5
 80063bc:	881c      	ldrh	r4, [r3, #0]
 80063be:	197b      	adds	r3, r7, r5
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	2164      	movs	r1, #100	; 0x64
 80063c4:	0018      	movs	r0, r3
 80063c6:	f7f9 fe9d 	bl	8000104 <__udivsi3>
 80063ca:	0003      	movs	r3, r0
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	001a      	movs	r2, r3
 80063d0:	0013      	movs	r3, r2
 80063d2:	065b      	lsls	r3, r3, #25
 80063d4:	1a9b      	subs	r3, r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	189b      	adds	r3, r3, r2
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	1a9b      	subs	r3, r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	18e3      	adds	r3, r4, r3
 80063e2:	210a      	movs	r1, #10
 80063e4:	0018      	movs	r0, r3
 80063e6:	f7f9 ff17 	bl	8000218 <__divsi3>
 80063ea:	0003      	movs	r3, r0
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	3303      	adds	r3, #3
 80063f2:	3230      	adds	r2, #48	; 0x30
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]
		s[4] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;
 80063f8:	197b      	adds	r3, r7, r5
 80063fa:	881b      	ldrh	r3, [r3, #0]
 80063fc:	b2dc      	uxtb	r4, r3
 80063fe:	197b      	adds	r3, r7, r5
 8006400:	881b      	ldrh	r3, [r3, #0]
 8006402:	210a      	movs	r1, #10
 8006404:	0018      	movs	r0, r3
 8006406:	f7f9 fe7d 	bl	8000104 <__udivsi3>
 800640a:	0003      	movs	r3, r0
 800640c:	b29b      	uxth	r3, r3
 800640e:	b2db      	uxtb	r3, r3
 8006410:	1c1a      	adds	r2, r3, #0
 8006412:	0092      	lsls	r2, r2, #2
 8006414:	18d3      	adds	r3, r2, r3
 8006416:	18db      	adds	r3, r3, r3
 8006418:	b2db      	uxtb	r3, r3
 800641a:	1ae3      	subs	r3, r4, r3
 800641c:	b2da      	uxtb	r2, r3
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	3304      	adds	r3, #4
 8006422:	3230      	adds	r2, #48	; 0x30
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
		s[2] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
		s[3] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;

	}

}
 8006428:	e050      	b.n	80064cc <floatToString+0x1ac>
		s[5] = 0;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	3305      	adds	r3, #5
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
		s[4] = 0;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	3304      	adds	r3, #4
 8006436:	2200      	movs	r2, #0
 8006438:	701a      	strb	r2, [r3, #0]
		s[0] = (uint8_t)( ui16Temp / 100 ) + 0x30;
 800643a:	250e      	movs	r5, #14
 800643c:	197b      	adds	r3, r7, r5
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	2164      	movs	r1, #100	; 0x64
 8006442:	0018      	movs	r0, r3
 8006444:	f7f9 fe5e 	bl	8000104 <__udivsi3>
 8006448:	0003      	movs	r3, r0
 800644a:	b29b      	uxth	r3, r3
 800644c:	b2db      	uxtb	r3, r3
 800644e:	3330      	adds	r3, #48	; 0x30
 8006450:	b2da      	uxtb	r2, r3
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	701a      	strb	r2, [r3, #0]
		s[1] = '.';
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	222e      	movs	r2, #46	; 0x2e
 800645c:	701a      	strb	r2, [r3, #0]
		s[2] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
 800645e:	197b      	adds	r3, r7, r5
 8006460:	881c      	ldrh	r4, [r3, #0]
 8006462:	197b      	adds	r3, r7, r5
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	2164      	movs	r1, #100	; 0x64
 8006468:	0018      	movs	r0, r3
 800646a:	f7f9 fe4b 	bl	8000104 <__udivsi3>
 800646e:	0003      	movs	r3, r0
 8006470:	b29b      	uxth	r3, r3
 8006472:	001a      	movs	r2, r3
 8006474:	0013      	movs	r3, r2
 8006476:	065b      	lsls	r3, r3, #25
 8006478:	1a9b      	subs	r3, r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	189b      	adds	r3, r3, r2
 800647e:	00db      	lsls	r3, r3, #3
 8006480:	1a9b      	subs	r3, r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	18e3      	adds	r3, r4, r3
 8006486:	210a      	movs	r1, #10
 8006488:	0018      	movs	r0, r3
 800648a:	f7f9 fec5 	bl	8000218 <__divsi3>
 800648e:	0003      	movs	r3, r0
 8006490:	b2da      	uxtb	r2, r3
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	3302      	adds	r3, #2
 8006496:	3230      	adds	r2, #48	; 0x30
 8006498:	b2d2      	uxtb	r2, r2
 800649a:	701a      	strb	r2, [r3, #0]
		s[3] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;
 800649c:	197b      	adds	r3, r7, r5
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b2dc      	uxtb	r4, r3
 80064a2:	197b      	adds	r3, r7, r5
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	210a      	movs	r1, #10
 80064a8:	0018      	movs	r0, r3
 80064aa:	f7f9 fe2b 	bl	8000104 <__udivsi3>
 80064ae:	0003      	movs	r3, r0
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	1c1a      	adds	r2, r3, #0
 80064b6:	0092      	lsls	r2, r2, #2
 80064b8:	18d3      	adds	r3, r2, r3
 80064ba:	18db      	adds	r3, r3, r3
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	1ae3      	subs	r3, r4, r3
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	3303      	adds	r3, #3
 80064c6:	3230      	adds	r2, #48	; 0x30
 80064c8:	b2d2      	uxtb	r2, r2
 80064ca:	701a      	strb	r2, [r3, #0]
}
 80064cc:	46c0      	nop			; (mov r8, r8)
 80064ce:	46bd      	mov	sp, r7
 80064d0:	b004      	add	sp, #16
 80064d2:	bdb0      	pop	{r4, r5, r7, pc}
 80064d4:	42c80000 	.word	0x42c80000

080064d8 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE]; // RAM buffer
#endif


bool ee_init(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	af00      	add	r7, sp, #0

	  readAppDataFromEE();
 80064dc:	f000 f810 	bl	8006500 <readAppDataFromEE>

	  // Erase FLASH memory page
	  if(ee_format(0) == false)
 80064e0:	2000      	movs	r0, #0
 80064e2:	f000 f927 	bl	8006734 <ee_format>
 80064e6:	0003      	movs	r3, r0
 80064e8:	001a      	movs	r2, r3
 80064ea:	2301      	movs	r3, #1
 80064ec:	4053      	eors	r3, r2
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <ee_init+0x20>
		  return false;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <ee_init+0x22>

	  return true;
 80064f8:	2301      	movs	r3, #1

}
 80064fa:	0018      	movs	r0, r3
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <readAppDataFromEE>:


void readAppDataFromEE(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0

	float pH_pt1 = readFloatFromEE(EE_SWCALIB_PH_PT1);
 8006506:	2000      	movs	r0, #0
 8006508:	f000 f88c 	bl	8006624 <readFloatFromEE>
 800650c:	1c03      	adds	r3, r0, #0
 800650e:	60fb      	str	r3, [r7, #12]
	float mV_pt1 = readFloatFromEE(EE_SWCALIB_MV_PT1);
 8006510:	2004      	movs	r0, #4
 8006512:	f000 f887 	bl	8006624 <readFloatFromEE>
 8006516:	1c03      	adds	r3, r0, #0
 8006518:	60bb      	str	r3, [r7, #8]
	float pH_pt2 = readFloatFromEE(EE_SWCALIB_PH_PT2);
 800651a:	2008      	movs	r0, #8
 800651c:	f000 f882 	bl	8006624 <readFloatFromEE>
 8006520:	1c03      	adds	r3, r0, #0
 8006522:	607b      	str	r3, [r7, #4]
	float mV_pt2 = readFloatFromEE(EE_SWCALIB_MV_PT2);
 8006524:	200c      	movs	r0, #12
 8006526:	f000 f87d 	bl	8006624 <readFloatFromEE>
 800652a:	1c03      	adds	r3, r0, #0
 800652c:	603b      	str	r3, [r7, #0]


	if(( pH_pt1  > 14 ) || ( pH_pt2 > 14 ) || ( pH_pt1 == pH_pt2 ))
 800652e:	4925      	ldr	r1, [pc, #148]	; (80065c4 <readAppDataFromEE+0xc4>)
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7f9 ffc1 	bl	80004b8 <__aeabi_fcmpgt>
 8006536:	1e03      	subs	r3, r0, #0
 8006538:	d10b      	bne.n	8006552 <readAppDataFromEE+0x52>
 800653a:	4922      	ldr	r1, [pc, #136]	; (80065c4 <readAppDataFromEE+0xc4>)
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f7f9 ffbb 	bl	80004b8 <__aeabi_fcmpgt>
 8006542:	1e03      	subs	r3, r0, #0
 8006544:	d105      	bne.n	8006552 <readAppDataFromEE+0x52>
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f7f9 ff9b 	bl	8000484 <__aeabi_fcmpeq>
 800654e:	1e03      	subs	r3, r0, #0
 8006550:	d007      	beq.n	8006562 <readAppDataFromEE+0x62>
	{

		twoPointsCalib_pH[0] = 7.0;
 8006552:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <readAppDataFromEE+0xc8>)
 8006554:	4a1d      	ldr	r2, [pc, #116]	; (80065cc <readAppDataFromEE+0xcc>)
 8006556:	601a      	str	r2, [r3, #0]
		twoPointsCalib_pH[1] = 4.0;
 8006558:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <readAppDataFromEE+0xc8>)
 800655a:	2281      	movs	r2, #129	; 0x81
 800655c:	05d2      	lsls	r2, r2, #23
 800655e:	605a      	str	r2, [r3, #4]
 8006560:	e005      	b.n	800656e <readAppDataFromEE+0x6e>

	}
	else
	{

		twoPointsCalib_pH[0] = pH_pt1;
 8006562:	4b19      	ldr	r3, [pc, #100]	; (80065c8 <readAppDataFromEE+0xc8>)
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	601a      	str	r2, [r3, #0]
		twoPointsCalib_pH[1] = pH_pt2;
 8006568:	4b17      	ldr	r3, [pc, #92]	; (80065c8 <readAppDataFromEE+0xc8>)
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	605a      	str	r2, [r3, #4]

	}

	if(( mV_pt1  > 3.6 ) || ( mV_pt2 > 3.6 ) || ( mV_pt1 == mV_pt2 ))
 800656e:	68b8      	ldr	r0, [r7, #8]
 8006570:	f7fc f914 	bl	800279c <__aeabi_f2d>
 8006574:	4a16      	ldr	r2, [pc, #88]	; (80065d0 <readAppDataFromEE+0xd0>)
 8006576:	4b17      	ldr	r3, [pc, #92]	; (80065d4 <readAppDataFromEE+0xd4>)
 8006578:	f7f9 ff64 	bl	8000444 <__aeabi_dcmpgt>
 800657c:	1e03      	subs	r3, r0, #0
 800657e:	d10e      	bne.n	800659e <readAppDataFromEE+0x9e>
 8006580:	6838      	ldr	r0, [r7, #0]
 8006582:	f7fc f90b 	bl	800279c <__aeabi_f2d>
 8006586:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <readAppDataFromEE+0xd0>)
 8006588:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <readAppDataFromEE+0xd4>)
 800658a:	f7f9 ff5b 	bl	8000444 <__aeabi_dcmpgt>
 800658e:	1e03      	subs	r3, r0, #0
 8006590:	d105      	bne.n	800659e <readAppDataFromEE+0x9e>
 8006592:	6839      	ldr	r1, [r7, #0]
 8006594:	68b8      	ldr	r0, [r7, #8]
 8006596:	f7f9 ff75 	bl	8000484 <__aeabi_fcmpeq>
 800659a:	1e03      	subs	r3, r0, #0
 800659c:	d007      	beq.n	80065ae <readAppDataFromEE+0xae>
	{

		twoPointsCalib_mV[0] = 2.0;
 800659e:	4b0e      	ldr	r3, [pc, #56]	; (80065d8 <readAppDataFromEE+0xd8>)
 80065a0:	2280      	movs	r2, #128	; 0x80
 80065a2:	05d2      	lsls	r2, r2, #23
 80065a4:	601a      	str	r2, [r3, #0]
		twoPointsCalib_mV[1] = 2.6;
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <readAppDataFromEE+0xd8>)
 80065a8:	4a0c      	ldr	r2, [pc, #48]	; (80065dc <readAppDataFromEE+0xdc>)
 80065aa:	605a      	str	r2, [r3, #4]
 80065ac:	e006      	b.n	80065bc <readAppDataFromEE+0xbc>

	}
	else
	{

		twoPointsCalib_mV[0] = mV_pt1;
 80065ae:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <readAppDataFromEE+0xd8>)
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	601a      	str	r2, [r3, #0]
		twoPointsCalib_mV[1] = mV_pt2;
 80065b4:	4b08      	ldr	r3, [pc, #32]	; (80065d8 <readAppDataFromEE+0xd8>)
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	605a      	str	r2, [r3, #4]

	}


}
 80065ba:	46c0      	nop			; (mov r8, r8)
 80065bc:	46c0      	nop			; (mov r8, r8)
 80065be:	46bd      	mov	sp, r7
 80065c0:	b004      	add	sp, #16
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	41600000 	.word	0x41600000
 80065c8:	20000024 	.word	0x20000024
 80065cc:	40e00000 	.word	0x40e00000
 80065d0:	cccccccd 	.word	0xcccccccd
 80065d4:	400ccccc 	.word	0x400ccccc
 80065d8:	2000002c 	.word	0x2000002c
 80065dc:	40266666 	.word	0x40266666

080065e0 <writeAppDataToEE>:


void writeAppDataToEE(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0

	writeFloatToEE(EE_SWCALIB_PH_PT1, &twoPointsCalib_pH[0]);
 80065e4:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <writeAppDataToEE+0x34>)
 80065e6:	0019      	movs	r1, r3
 80065e8:	2000      	movs	r0, #0
 80065ea:	f000 f856 	bl	800669a <writeFloatToEE>
	writeFloatToEE(EE_SWCALIB_MV_PT1, &twoPointsCalib_mV[0]);
 80065ee:	4b0a      	ldr	r3, [pc, #40]	; (8006618 <writeAppDataToEE+0x38>)
 80065f0:	0019      	movs	r1, r3
 80065f2:	2004      	movs	r0, #4
 80065f4:	f000 f851 	bl	800669a <writeFloatToEE>
	writeFloatToEE(EE_SWCALIB_PH_PT2, &twoPointsCalib_pH[1]);
 80065f8:	4b08      	ldr	r3, [pc, #32]	; (800661c <writeAppDataToEE+0x3c>)
 80065fa:	0019      	movs	r1, r3
 80065fc:	2008      	movs	r0, #8
 80065fe:	f000 f84c 	bl	800669a <writeFloatToEE>
	writeFloatToEE(EE_SWCALIB_MV_PT2, &twoPointsCalib_mV[1]);
 8006602:	4b07      	ldr	r3, [pc, #28]	; (8006620 <writeAppDataToEE+0x40>)
 8006604:	0019      	movs	r1, r3
 8006606:	200c      	movs	r0, #12
 8006608:	f000 f847 	bl	800669a <writeFloatToEE>

}
 800660c:	46c0      	nop			; (mov r8, r8)
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	46c0      	nop			; (mov r8, r8)
 8006614:	20000024 	.word	0x20000024
 8006618:	2000002c 	.word	0x2000002c
 800661c:	20000028 	.word	0x20000028
 8006620:	20000030 	.word	0x20000030

08006624 <readFloatFromEE>:


float readFloatFromEE(uint32_t eeadr)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]

	UNION4_CONVERSION uconv;


	if(getByteEe(eeadr+0, &uconv.un4_uchar[0]) == EE_INVALID)
 800662c:	230c      	movs	r3, #12
 800662e:	18fa      	adds	r2, r7, r3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	0011      	movs	r1, r2
 8006634:	0018      	movs	r0, r3
 8006636:	f000 f84b 	bl	80066d0 <getByteEe>
 800663a:	1e03      	subs	r3, r0, #0
 800663c:	d101      	bne.n	8006642 <readFloatFromEE+0x1e>
		return 0.0;
 800663e:	2300      	movs	r3, #0
 8006640:	e027      	b.n	8006692 <readFloatFromEE+0x6e>
	if(getByteEe(eeadr+1, &uconv.un4_uchar[1]) == EE_INVALID)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	230c      	movs	r3, #12
 8006648:	18fb      	adds	r3, r7, r3
 800664a:	3301      	adds	r3, #1
 800664c:	0019      	movs	r1, r3
 800664e:	0010      	movs	r0, r2
 8006650:	f000 f83e 	bl	80066d0 <getByteEe>
 8006654:	1e03      	subs	r3, r0, #0
 8006656:	d101      	bne.n	800665c <readFloatFromEE+0x38>
		return 0.0;
 8006658:	2300      	movs	r3, #0
 800665a:	e01a      	b.n	8006692 <readFloatFromEE+0x6e>
	if(getByteEe(eeadr+2, &uconv.un4_uchar[2]) == EE_INVALID)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	1c9a      	adds	r2, r3, #2
 8006660:	230c      	movs	r3, #12
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	3302      	adds	r3, #2
 8006666:	0019      	movs	r1, r3
 8006668:	0010      	movs	r0, r2
 800666a:	f000 f831 	bl	80066d0 <getByteEe>
 800666e:	1e03      	subs	r3, r0, #0
 8006670:	d101      	bne.n	8006676 <readFloatFromEE+0x52>
		return 0.0;
 8006672:	2300      	movs	r3, #0
 8006674:	e00d      	b.n	8006692 <readFloatFromEE+0x6e>
	if(getByteEe(eeadr+3, &uconv.un4_uchar[3]) == EE_INVALID)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	1cda      	adds	r2, r3, #3
 800667a:	230c      	movs	r3, #12
 800667c:	18fb      	adds	r3, r7, r3
 800667e:	3303      	adds	r3, #3
 8006680:	0019      	movs	r1, r3
 8006682:	0010      	movs	r0, r2
 8006684:	f000 f824 	bl	80066d0 <getByteEe>
 8006688:	1e03      	subs	r3, r0, #0
 800668a:	d101      	bne.n	8006690 <readFloatFromEE+0x6c>
		return 0.0;
 800668c:	2300      	movs	r3, #0
 800668e:	e000      	b.n	8006692 <readFloatFromEE+0x6e>

	return uconv.un4_float;
 8006690:	68fb      	ldr	r3, [r7, #12]

}
 8006692:	1c18      	adds	r0, r3, #0
 8006694:	46bd      	mov	sp, r7
 8006696:	b004      	add	sp, #16
 8006698:	bd80      	pop	{r7, pc}

0800669a <writeFloatToEE>:

/*
 * @ NOTE; you can only write HALF-WORLD AT TIME
 */
void writeFloatToEE(uint32_t eeadr, float *fvalue)
{
 800669a:	b590      	push	{r4, r7, lr}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]

	UNION4_CONVERSION uconv;
	uconv.un4_float = *fvalue;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	60fb      	str	r3, [r7, #12]


	setHalfWorldEe(eeadr+0, &uconv.un4_uchar[0]);
 80066aa:	240c      	movs	r4, #12
 80066ac:	193a      	adds	r2, r7, r4
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	0011      	movs	r1, r2
 80066b2:	0018      	movs	r0, r3
 80066b4:	f000 f825 	bl	8006702 <setHalfWorldEe>
	setHalfWorldEe(eeadr+2, &uconv.un4_uchar[2]);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	1c9a      	adds	r2, r3, #2
 80066bc:	193b      	adds	r3, r7, r4
 80066be:	3302      	adds	r3, #2
 80066c0:	0019      	movs	r1, r3
 80066c2:	0010      	movs	r0, r2
 80066c4:	f000 f81d 	bl	8006702 <setHalfWorldEe>

}
 80066c8:	46c0      	nop			; (mov r8, r8)
 80066ca:	46bd      	mov	sp, r7
 80066cc:	b005      	add	sp, #20
 80066ce:	bd90      	pop	{r4, r7, pc}

080066d0 <getByteEe>:

/******************* PRIVARE FUNCTIONS ************************/


static EEPROM_STATUS getByteEe(uint32_t eeadr, uint8_t *byte)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]

	if(ee_read(eeadr, 1, byte) == false)
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2101      	movs	r1, #1
 80066e0:	0018      	movs	r0, r3
 80066e2:	f000 f853 	bl	800678c <ee_read>
 80066e6:	0003      	movs	r3, r0
 80066e8:	001a      	movs	r2, r3
 80066ea:	2301      	movs	r3, #1
 80066ec:	4053      	eors	r3, r2
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <getByteEe+0x28>
		return EE_INVALID;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <getByteEe+0x2a>

	return EE_VALID;
 80066f8:	2301      	movs	r3, #1

}
 80066fa:	0018      	movs	r0, r3
 80066fc:	46bd      	mov	sp, r7
 80066fe:	b002      	add	sp, #8
 8006700:	bd80      	pop	{r7, pc}

08006702 <setHalfWorldEe>:


static EEPROM_STATUS setHalfWorldEe(uint32_t eeadr, uint8_t *halfW)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b082      	sub	sp, #8
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	6039      	str	r1, [r7, #0]

	if(ee_write(eeadr, 2, halfW) == false)
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2102      	movs	r1, #2
 8006712:	0018      	movs	r0, r3
 8006714:	f000 f86a 	bl	80067ec <ee_write>
 8006718:	0003      	movs	r3, r0
 800671a:	001a      	movs	r2, r3
 800671c:	2301      	movs	r3, #1
 800671e:	4053      	eors	r3, r2
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <setHalfWorldEe+0x28>
		return EE_INVALID;
 8006726:	2300      	movs	r3, #0
 8006728:	e000      	b.n	800672c <setHalfWorldEe+0x2a>

	return EE_VALID;
 800672a:	2301      	movs	r3, #1

}
 800672c:	0018      	movs	r0, r3
 800672e:	46bd      	mov	sp, r7
 8006730:	b002      	add	sp, #8
 8006732:	bd80      	pop	{r7, pc}

08006734 <ee_format>:



static bool ee_format(bool keepRamData)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	0002      	movs	r2, r0
 800673c:	1dfb      	adds	r3, r7, #7
 800673e:	701a      	strb	r2, [r3, #0]

  uint32_t error;
  FLASH_EraseInitTypeDef flashErase;


  HAL_FLASH_Unlock();
 8006740:	f000 fdbc 	bl	80072bc <HAL_FLASH_Unlock>

  // Erase page 32
  flashErase.NbPages = 1;
 8006744:	2108      	movs	r1, #8
 8006746:	187b      	adds	r3, r7, r1
 8006748:	2201      	movs	r2, #1
 800674a:	609a      	str	r2, [r3, #8]
  flashErase.PageAddress = _EE_ADDR_INUSE;
 800674c:	187b      	adds	r3, r7, r1
 800674e:	4a0e      	ldr	r2, [pc, #56]	; (8006788 <ee_format+0x54>)
 8006750:	605a      	str	r2, [r3, #4]
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8006752:	187b      	adds	r3, r7, r1
 8006754:	2200      	movs	r2, #0
 8006756:	601a      	str	r2, [r3, #0]

  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8006758:	2314      	movs	r3, #20
 800675a:	18fa      	adds	r2, r7, r3
 800675c:	187b      	adds	r3, r7, r1
 800675e:	0011      	movs	r1, r2
 8006760:	0018      	movs	r0, r3
 8006762:	f000 fe6b 	bl	800743c <HAL_FLASHEx_Erase>
 8006766:	1e03      	subs	r3, r0, #0
 8006768:	d108      	bne.n	800677c <ee_format+0x48>
  {

    HAL_FLASH_Lock();
 800676a:	f000 fdcd 	bl	8007308 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	3301      	adds	r3, #1
 8006772:	d001      	beq.n	8006778 <ee_format+0x44>
    {

    	return false;
 8006774:	2300      	movs	r3, #0
 8006776:	e002      	b.n	800677e <ee_format+0x4a>
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
#endif

      return true;
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <ee_format+0x4a>

    }

  }

  return false;
 800677c:	2300      	movs	r3, #0

}
 800677e:	0018      	movs	r0, r3
 8006780:	46bd      	mov	sp, r7
 8006782:	b006      	add	sp, #24
 8006784:	bd80      	pop	{r7, pc}
 8006786:	46c0      	nop			; (mov r8, r8)
 8006788:	0800f800 	.word	0x0800f800

0800678c <ee_read>:


static bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]

  if(( startVirtualAddress + len ) > _EE_SIZE)
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	18d2      	adds	r2, r2, r3
 800679e:	2380      	movs	r3, #128	; 0x80
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d901      	bls.n	80067aa <ee_read+0x1e>
	  // Max size is one page ( 2kB )
	  return false;
 80067a6:	2300      	movs	r3, #0
 80067a8:	e01a      	b.n	80067e0 <ee_read+0x54>

  for(uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	617b      	str	r3, [r7, #20]
 80067ae:	e010      	b.n	80067d2 <ee_read+0x46>
  {

    if(data != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d00a      	beq.n	80067cc <ee_read+0x40>
    {

      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE)); // __IO is volatile type, which allows to read and write memory
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	4a0b      	ldr	r2, [pc, #44]	; (80067e8 <ee_read+0x5c>)
 80067ba:	4694      	mov	ip, r2
 80067bc:	4463      	add	r3, ip
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	701a      	strb	r2, [r3, #0]
      data++;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3301      	adds	r3, #1
 80067ca:	607b      	str	r3, [r7, #4]
  for(uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3301      	adds	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	68ba      	ldr	r2, [r7, #8]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	18d3      	adds	r3, r2, r3
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d3e8      	bcc.n	80067b0 <ee_read+0x24>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
#endif

  }

  return true;
 80067de:	2301      	movs	r3, #1

}
 80067e0:	0018      	movs	r0, r3
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b006      	add	sp, #24
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	0800f800 	.word	0x0800f800

080067ec <ee_write>:


static bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 80067ec:	b5b0      	push	{r4, r5, r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]

  if(( startVirtualAddress + len ) > _EE_SIZE)
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	18d2      	adds	r2, r2, r3
 80067fe:	2380      	movs	r3, #128	; 0x80
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	429a      	cmp	r2, r3
 8006804:	d901      	bls.n	800680a <ee_write+0x1e>
    return false;
 8006806:	2300      	movs	r3, #0
 8006808:	e032      	b.n	8006870 <ee_write+0x84>

  if(data == NULL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <ee_write+0x28>
    return false;
 8006810:	2300      	movs	r3, #0
 8006812:	e02d      	b.n	8006870 <ee_write+0x84>

  HAL_FLASH_Unlock();
 8006814:	f000 fd52 	bl	80072bc <HAL_FLASH_Unlock>

  // Write half-worlds
  for(uint32_t i = 0; i < len ; i+=2)
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	e021      	b.n	8006862 <ee_write+0x76>
  {

    if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, (uint64_t)(data[i] | (data[i+1] << 8))) != HAL_OK)
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	18d3      	adds	r3, r2, r3
 8006824:	4a14      	ldr	r2, [pc, #80]	; (8006878 <ee_write+0x8c>)
 8006826:	1899      	adds	r1, r3, r2
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	18d3      	adds	r3, r2, r3
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	0018      	movs	r0, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	3301      	adds	r3, #1
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	18d3      	adds	r3, r2, r3
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	021b      	lsls	r3, r3, #8
 800683e:	4303      	orrs	r3, r0
 8006840:	001c      	movs	r4, r3
 8006842:	17db      	asrs	r3, r3, #31
 8006844:	001d      	movs	r5, r3
 8006846:	0022      	movs	r2, r4
 8006848:	002b      	movs	r3, r5
 800684a:	2001      	movs	r0, #1
 800684c:	f000 fca0 	bl	8007190 <HAL_FLASH_Program>
 8006850:	1e03      	subs	r3, r0, #0
 8006852:	d003      	beq.n	800685c <ee_write+0x70>
    {

      HAL_FLASH_Lock();
 8006854:	f000 fd58 	bl	8007308 <HAL_FLASH_Lock>

      return false;
 8006858:	2300      	movs	r3, #0
 800685a:	e009      	b.n	8006870 <ee_write+0x84>
  for(uint32_t i = 0; i < len ; i+=2)
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	3302      	adds	r3, #2
 8006860:	617b      	str	r3, [r7, #20]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	429a      	cmp	r2, r3
 8006868:	d3d9      	bcc.n	800681e <ee_write+0x32>

    }

  }

  HAL_FLASH_Lock();
 800686a:	f000 fd4d 	bl	8007308 <HAL_FLASH_Lock>

  return true;
 800686e:	2301      	movs	r3, #1

}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b006      	add	sp, #24
 8006876:	bdb0      	pop	{r4, r5, r7, pc}
 8006878:	0800f800 	.word	0x0800f800

0800687c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800687c:	480d      	ldr	r0, [pc, #52]	; (80068b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800687e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006880:	f7ff fd1f 	bl	80062c2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006884:	480c      	ldr	r0, [pc, #48]	; (80068b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006886:	490d      	ldr	r1, [pc, #52]	; (80068bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8006888:	4a0d      	ldr	r2, [pc, #52]	; (80068c0 <LoopForever+0xe>)
  movs r3, #0
 800688a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800688c:	e002      	b.n	8006894 <LoopCopyDataInit>

0800688e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800688e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006892:	3304      	adds	r3, #4

08006894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006898:	d3f9      	bcc.n	800688e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800689a:	4a0a      	ldr	r2, [pc, #40]	; (80068c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800689c:	4c0a      	ldr	r4, [pc, #40]	; (80068c8 <LoopForever+0x16>)
  movs r3, #0
 800689e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068a0:	e001      	b.n	80068a6 <LoopFillZerobss>

080068a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068a4:	3204      	adds	r2, #4

080068a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068a8:	d3fb      	bcc.n	80068a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80068aa:	f001 ffef 	bl	800888c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80068ae:	f7fe f941 	bl	8004b34 <main>

080068b2 <LoopForever>:

LoopForever:
    b LoopForever
 80068b2:	e7fe      	b.n	80068b2 <LoopForever>
  ldr   r0, =_estack
 80068b4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80068b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068bc:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 80068c0:	0800b3a0 	.word	0x0800b3a0
  ldr r2, =_sbss
 80068c4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80068c8:	20000290 	.word	0x20000290

080068cc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80068cc:	e7fe      	b.n	80068cc <ADC1_IRQHandler>
	...

080068d0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068d4:	4b07      	ldr	r3, [pc, #28]	; (80068f4 <HAL_Init+0x24>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	4b06      	ldr	r3, [pc, #24]	; (80068f4 <HAL_Init+0x24>)
 80068da:	2110      	movs	r1, #16
 80068dc:	430a      	orrs	r2, r1
 80068de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80068e0:	2003      	movs	r0, #3
 80068e2:	f000 f809 	bl	80068f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80068e6:	f7ff fc1f 	bl	8006128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	0018      	movs	r0, r3
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	46c0      	nop			; (mov r8, r8)
 80068f4:	40022000 	.word	0x40022000

080068f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80068f8:	b590      	push	{r4, r7, lr}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006900:	4b14      	ldr	r3, [pc, #80]	; (8006954 <HAL_InitTick+0x5c>)
 8006902:	681c      	ldr	r4, [r3, #0]
 8006904:	4b14      	ldr	r3, [pc, #80]	; (8006958 <HAL_InitTick+0x60>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	0019      	movs	r1, r3
 800690a:	23fa      	movs	r3, #250	; 0xfa
 800690c:	0098      	lsls	r0, r3, #2
 800690e:	f7f9 fbf9 	bl	8000104 <__udivsi3>
 8006912:	0003      	movs	r3, r0
 8006914:	0019      	movs	r1, r3
 8006916:	0020      	movs	r0, r4
 8006918:	f7f9 fbf4 	bl	8000104 <__udivsi3>
 800691c:	0003      	movs	r3, r0
 800691e:	0018      	movs	r0, r3
 8006920:	f000 fc29 	bl	8007176 <HAL_SYSTICK_Config>
 8006924:	1e03      	subs	r3, r0, #0
 8006926:	d001      	beq.n	800692c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e00f      	b.n	800694c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b03      	cmp	r3, #3
 8006930:	d80b      	bhi.n	800694a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	2301      	movs	r3, #1
 8006936:	425b      	negs	r3, r3
 8006938:	2200      	movs	r2, #0
 800693a:	0018      	movs	r0, r3
 800693c:	f000 fc06 	bl	800714c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006940:	4b06      	ldr	r3, [pc, #24]	; (800695c <HAL_InitTick+0x64>)
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	e000      	b.n	800694c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
}
 800694c:	0018      	movs	r0, r3
 800694e:	46bd      	mov	sp, r7
 8006950:	b003      	add	sp, #12
 8006952:	bd90      	pop	{r4, r7, pc}
 8006954:	20000040 	.word	0x20000040
 8006958:	20000048 	.word	0x20000048
 800695c:	20000044 	.word	0x20000044

08006960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <HAL_IncTick+0x1c>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	001a      	movs	r2, r3
 800696a:	4b05      	ldr	r3, [pc, #20]	; (8006980 <HAL_IncTick+0x20>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	18d2      	adds	r2, r2, r3
 8006970:	4b03      	ldr	r3, [pc, #12]	; (8006980 <HAL_IncTick+0x20>)
 8006972:	601a      	str	r2, [r3, #0]
}
 8006974:	46c0      	nop			; (mov r8, r8)
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	20000048 	.word	0x20000048
 8006980:	20000268 	.word	0x20000268

08006984 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  return uwTick;
 8006988:	4b02      	ldr	r3, [pc, #8]	; (8006994 <HAL_GetTick+0x10>)
 800698a:	681b      	ldr	r3, [r3, #0]
}
 800698c:	0018      	movs	r0, r3
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	20000268 	.word	0x20000268

08006998 <HAL_GetTickFreq>:
  * @brief return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800699c:	4b02      	ldr	r3, [pc, #8]	; (80069a8 <HAL_GetTickFreq+0x10>)
 800699e:	781b      	ldrb	r3, [r3, #0]
}
 80069a0:	0018      	movs	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	20000048 	.word	0x20000048

080069ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069b4:	f7ff ffe6 	bl	8006984 <HAL_GetTick>
 80069b8:	0003      	movs	r3, r0
 80069ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3301      	adds	r3, #1
 80069c4:	d005      	beq.n	80069d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <HAL_Delay+0x44>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	001a      	movs	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	189b      	adds	r3, r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	f7ff ffd6 	bl	8006984 <HAL_GetTick>
 80069d8:	0002      	movs	r2, r0
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d8f7      	bhi.n	80069d4 <HAL_Delay+0x28>
  {
  }
}
 80069e4:	46c0      	nop			; (mov r8, r8)
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	46bd      	mov	sp, r7
 80069ea:	b004      	add	sp, #16
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	46c0      	nop			; (mov r8, r8)
 80069f0:	20000048 	.word	0x20000048

080069f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069fc:	230f      	movs	r3, #15
 80069fe:	18fb      	adds	r3, r7, r3
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e125      	b.n	8006c5e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2234      	movs	r2, #52	; 0x34
 8006a24:	2100      	movs	r1, #0
 8006a26:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f7ff fba0 	bl	8006170 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a34:	2210      	movs	r2, #16
 8006a36:	4013      	ands	r3, r2
 8006a38:	d000      	beq.n	8006a3c <HAL_ADC_Init+0x48>
 8006a3a:	e103      	b.n	8006c44 <HAL_ADC_Init+0x250>
 8006a3c:	230f      	movs	r3, #15
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d000      	beq.n	8006a48 <HAL_ADC_Init+0x54>
 8006a46:	e0fd      	b.n	8006c44 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8006a52:	d000      	beq.n	8006a56 <HAL_ADC_Init+0x62>
 8006a54:	e0f6      	b.n	8006c44 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	4a83      	ldr	r2, [pc, #524]	; (8006c68 <HAL_ADC_Init+0x274>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	2202      	movs	r2, #2
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	4013      	ands	r3, r2
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d112      	bne.n	8006a9a <HAL_ADC_Init+0xa6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d009      	beq.n	8006a96 <HAL_ADC_Init+0xa2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68da      	ldr	r2, [r3, #12]
 8006a88:	2380      	movs	r3, #128	; 0x80
 8006a8a:	021b      	lsls	r3, r3, #8
 8006a8c:	401a      	ands	r2, r3
 8006a8e:	2380      	movs	r3, #128	; 0x80
 8006a90:	021b      	lsls	r3, r3, #8
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d101      	bne.n	8006a9a <HAL_ADC_Init+0xa6>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <HAL_ADC_Init+0xa8>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d116      	bne.n	8006ace <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	2218      	movs	r2, #24
 8006aa8:	4393      	bics	r3, r2
 8006aaa:	0019      	movs	r1, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689a      	ldr	r2, [r3, #8]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	0899      	lsrs	r1, r3, #2
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4964      	ldr	r1, [pc, #400]	; (8006c6c <HAL_ADC_Init+0x278>)
 8006ada:	400a      	ands	r2, r1
 8006adc:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	7e1b      	ldrb	r3, [r3, #24]
 8006ae2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7e5b      	ldrb	r3, [r3, #25]
 8006ae8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006aea:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	7e9b      	ldrb	r3, [r3, #26]
 8006af0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8006af2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d002      	beq.n	8006b02 <HAL_ADC_Init+0x10e>
 8006afc:	2380      	movs	r3, #128	; 0x80
 8006afe:	015b      	lsls	r3, r3, #5
 8006b00:	e000      	b.n	8006b04 <HAL_ADC_Init+0x110>
 8006b02:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8006b04:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8006b0a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	691b      	ldr	r3, [r3, #16]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d101      	bne.n	8006b18 <HAL_ADC_Init+0x124>
 8006b14:	2304      	movs	r3, #4
 8006b16:	e000      	b.n	8006b1a <HAL_ADC_Init+0x126>
 8006b18:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8006b1a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2124      	movs	r1, #36	; 0x24
 8006b20:	5c5b      	ldrb	r3, [r3, r1]
 8006b22:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8006b24:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	7edb      	ldrb	r3, [r3, #27]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d115      	bne.n	8006b60 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7e9b      	ldrb	r3, [r3, #26]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d105      	bne.n	8006b48 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2280      	movs	r2, #128	; 0x80
 8006b40:	0252      	lsls	r2, r2, #9
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60bb      	str	r3, [r7, #8]
 8006b46:	e00b      	b.n	8006b60 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	2201      	movs	r2, #1
 8006b5a:	431a      	orrs	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	69da      	ldr	r2, [r3, #28]
 8006b64:	23c2      	movs	r3, #194	; 0xc2
 8006b66:	33ff      	adds	r3, #255	; 0xff
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d007      	beq.n	8006b7c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8006b74:	4313      	orrs	r3, r2
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68d9      	ldr	r1, [r3, #12]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b90:	2380      	movs	r3, #128	; 0x80
 8006b92:	055b      	lsls	r3, r3, #21
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d01b      	beq.n	8006bd0 <HAL_ADC_Init+0x1dc>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d017      	beq.n	8006bd0 <HAL_ADC_Init+0x1dc>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d013      	beq.n	8006bd0 <HAL_ADC_Init+0x1dc>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d00f      	beq.n	8006bd0 <HAL_ADC_Init+0x1dc>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d00b      	beq.n	8006bd0 <HAL_ADC_Init+0x1dc>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	2b05      	cmp	r3, #5
 8006bbe:	d007      	beq.n	8006bd0 <HAL_ADC_Init+0x1dc>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	2b06      	cmp	r3, #6
 8006bc6:	d003      	beq.n	8006bd0 <HAL_ADC_Init+0x1dc>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bcc:	2b07      	cmp	r3, #7
 8006bce:	d112      	bne.n	8006bf6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695a      	ldr	r2, [r3, #20]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2107      	movs	r1, #7
 8006bdc:	438a      	bics	r2, r1
 8006bde:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6959      	ldr	r1, [r3, #20]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bea:	2207      	movs	r2, #7
 8006bec:	401a      	ands	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	430a      	orrs	r2, r1
 8006bf4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	4a1c      	ldr	r2, [pc, #112]	; (8006c70 <HAL_ADC_Init+0x27c>)
 8006bfe:	4013      	ands	r3, r2
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d10b      	bne.n	8006c1e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	2203      	movs	r2, #3
 8006c12:	4393      	bics	r3, r2
 8006c14:	2201      	movs	r2, #1
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006c1c:	e01c      	b.n	8006c58 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	2212      	movs	r2, #18
 8006c24:	4393      	bics	r3, r2
 8006c26:	2210      	movs	r2, #16
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c32:	2201      	movs	r2, #1
 8006c34:	431a      	orrs	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8006c3a:	230f      	movs	r3, #15
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	2201      	movs	r2, #1
 8006c40:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8006c42:	e009      	b.n	8006c58 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	2210      	movs	r2, #16
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8006c50:	230f      	movs	r3, #15
 8006c52:	18fb      	adds	r3, r7, r3
 8006c54:	2201      	movs	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006c58:	230f      	movs	r3, #15
 8006c5a:	18fb      	adds	r3, r7, r3
 8006c5c:	781b      	ldrb	r3, [r3, #0]
}
 8006c5e:	0018      	movs	r0, r3
 8006c60:	46bd      	mov	sp, r7
 8006c62:	b004      	add	sp, #16
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	46c0      	nop			; (mov r8, r8)
 8006c68:	fffffefd 	.word	0xfffffefd
 8006c6c:	fffe0219 	.word	0xfffe0219
 8006c70:	833fffe7 	.word	0x833fffe7

08006c74 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c7c:	230f      	movs	r3, #15
 8006c7e:	18fb      	adds	r3, r7, r3
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d138      	bne.n	8006d02 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2234      	movs	r2, #52	; 0x34
 8006c94:	5c9b      	ldrb	r3, [r3, r2]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_ADC_Start+0x2a>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e038      	b.n	8006d10 <HAL_ADC_Start+0x9c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2234      	movs	r2, #52	; 0x34
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	7e5b      	ldrb	r3, [r3, #25]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d007      	beq.n	8006cbe <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8006cae:	230f      	movs	r3, #15
 8006cb0:	18fc      	adds	r4, r7, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f000 f933 	bl	8006f20 <ADC_Enable>
 8006cba:	0003      	movs	r3, r0
 8006cbc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006cbe:	230f      	movs	r3, #15
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d120      	bne.n	8006d0a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ccc:	4a12      	ldr	r2, [pc, #72]	; (8006d18 <HAL_ADC_Start+0xa4>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2280      	movs	r2, #128	; 0x80
 8006cd2:	0052      	lsls	r2, r2, #1
 8006cd4:	431a      	orrs	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2234      	movs	r2, #52	; 0x34
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	221c      	movs	r2, #28
 8006cee:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2104      	movs	r1, #4
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	e003      	b.n	8006d0a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006d02:	230f      	movs	r3, #15
 8006d04:	18fb      	adds	r3, r7, r3
 8006d06:	2202      	movs	r2, #2
 8006d08:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006d0a:	230f      	movs	r3, #15
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	781b      	ldrb	r3, [r3, #0]
}
 8006d10:	0018      	movs	r0, r3
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b005      	add	sp, #20
 8006d16:	bd90      	pop	{r4, r7, pc}
 8006d18:	fffff0fe 	.word	0xfffff0fe

08006d1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d3e:	230f      	movs	r3, #15
 8006d40:	18fb      	adds	r3, r7, r3
 8006d42:	2200      	movs	r2, #0
 8006d44:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d4e:	2380      	movs	r3, #128	; 0x80
 8006d50:	055b      	lsls	r3, r3, #21
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d011      	beq.n	8006d7a <HAL_ADC_ConfigChannel+0x46>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d00d      	beq.n	8006d7a <HAL_ADC_ConfigChannel+0x46>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d009      	beq.n	8006d7a <HAL_ADC_ConfigChannel+0x46>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d005      	beq.n	8006d7a <HAL_ADC_ConfigChannel+0x46>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d001      	beq.n	8006d7a <HAL_ADC_ConfigChannel+0x46>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2234      	movs	r2, #52	; 0x34
 8006d7e:	5c9b      	ldrb	r3, [r3, r2]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_ADC_ConfigChannel+0x54>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e0bb      	b.n	8006f00 <HAL_ADC_ConfigChannel+0x1cc>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2234      	movs	r2, #52	; 0x34
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2204      	movs	r2, #4
 8006d98:	4013      	ands	r3, r2
 8006d9a:	d000      	beq.n	8006d9e <HAL_ADC_ConfigChannel+0x6a>
 8006d9c:	e09f      	b.n	8006ede <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	4a59      	ldr	r2, [pc, #356]	; (8006f08 <HAL_ADC_ConfigChannel+0x1d4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d100      	bne.n	8006daa <HAL_ADC_ConfigChannel+0x76>
 8006da8:	e077      	b.n	8006e9a <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2201      	movs	r2, #1
 8006db6:	409a      	lsls	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	430a      	orrs	r2, r1
 8006dbe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc4:	2380      	movs	r3, #128	; 0x80
 8006dc6:	055b      	lsls	r3, r3, #21
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d037      	beq.n	8006e3c <HAL_ADC_ConfigChannel+0x108>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d033      	beq.n	8006e3c <HAL_ADC_ConfigChannel+0x108>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d02f      	beq.n	8006e3c <HAL_ADC_ConfigChannel+0x108>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d02b      	beq.n	8006e3c <HAL_ADC_ConfigChannel+0x108>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d027      	beq.n	8006e3c <HAL_ADC_ConfigChannel+0x108>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	d023      	beq.n	8006e3c <HAL_ADC_ConfigChannel+0x108>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df8:	2b06      	cmp	r3, #6
 8006dfa:	d01f      	beq.n	8006e3c <HAL_ADC_ConfigChannel+0x108>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e00:	2b07      	cmp	r3, #7
 8006e02:	d01b      	beq.n	8006e3c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	2107      	movs	r1, #7
 8006e10:	400b      	ands	r3, r1
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d012      	beq.n	8006e3c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2107      	movs	r1, #7
 8006e22:	438a      	bics	r2, r1
 8006e24:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6959      	ldr	r1, [r3, #20]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	2207      	movs	r2, #7
 8006e32:	401a      	ands	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b10      	cmp	r3, #16
 8006e42:	d003      	beq.n	8006e4c <HAL_ADC_ConfigChannel+0x118>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b11      	cmp	r3, #17
 8006e4a:	d152      	bne.n	8006ef2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006e4c:	4b2f      	ldr	r3, [pc, #188]	; (8006f0c <HAL_ADC_ConfigChannel+0x1d8>)
 8006e4e:	6819      	ldr	r1, [r3, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b10      	cmp	r3, #16
 8006e56:	d102      	bne.n	8006e5e <HAL_ADC_ConfigChannel+0x12a>
 8006e58:	2380      	movs	r3, #128	; 0x80
 8006e5a:	041b      	lsls	r3, r3, #16
 8006e5c:	e001      	b.n	8006e62 <HAL_ADC_ConfigChannel+0x12e>
 8006e5e:	2380      	movs	r3, #128	; 0x80
 8006e60:	03db      	lsls	r3, r3, #15
 8006e62:	4a2a      	ldr	r2, [pc, #168]	; (8006f0c <HAL_ADC_ConfigChannel+0x1d8>)
 8006e64:	430b      	orrs	r3, r1
 8006e66:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b10      	cmp	r3, #16
 8006e6e:	d140      	bne.n	8006ef2 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006e70:	4b27      	ldr	r3, [pc, #156]	; (8006f10 <HAL_ADC_ConfigChannel+0x1dc>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4927      	ldr	r1, [pc, #156]	; (8006f14 <HAL_ADC_ConfigChannel+0x1e0>)
 8006e76:	0018      	movs	r0, r3
 8006e78:	f7f9 f944 	bl	8000104 <__udivsi3>
 8006e7c:	0003      	movs	r3, r0
 8006e7e:	001a      	movs	r2, r3
 8006e80:	0013      	movs	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	189b      	adds	r3, r3, r2
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006e8a:	e002      	b.n	8006e92 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1f9      	bne.n	8006e8c <HAL_ADC_ConfigChannel+0x158>
 8006e98:	e02b      	b.n	8006ef2 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2101      	movs	r1, #1
 8006ea6:	4099      	lsls	r1, r3
 8006ea8:	000b      	movs	r3, r1
 8006eaa:	43d9      	mvns	r1, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	400a      	ands	r2, r1
 8006eb2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2b10      	cmp	r3, #16
 8006eba:	d003      	beq.n	8006ec4 <HAL_ADC_ConfigChannel+0x190>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b11      	cmp	r3, #17
 8006ec2:	d116      	bne.n	8006ef2 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006ec4:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <HAL_ADC_ConfigChannel+0x1d8>)
 8006ec6:	6819      	ldr	r1, [r3, #0]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b10      	cmp	r3, #16
 8006ece:	d101      	bne.n	8006ed4 <HAL_ADC_ConfigChannel+0x1a0>
 8006ed0:	4a11      	ldr	r2, [pc, #68]	; (8006f18 <HAL_ADC_ConfigChannel+0x1e4>)
 8006ed2:	e000      	b.n	8006ed6 <HAL_ADC_ConfigChannel+0x1a2>
 8006ed4:	4a11      	ldr	r2, [pc, #68]	; (8006f1c <HAL_ADC_ConfigChannel+0x1e8>)
 8006ed6:	4b0d      	ldr	r3, [pc, #52]	; (8006f0c <HAL_ADC_ConfigChannel+0x1d8>)
 8006ed8:	400a      	ands	r2, r1
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	e009      	b.n	8006ef2 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006eea:	230f      	movs	r3, #15
 8006eec:	18fb      	adds	r3, r7, r3
 8006eee:	2201      	movs	r2, #1
 8006ef0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2234      	movs	r2, #52	; 0x34
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8006efa:	230f      	movs	r3, #15
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	781b      	ldrb	r3, [r3, #0]
}
 8006f00:	0018      	movs	r0, r3
 8006f02:	46bd      	mov	sp, r7
 8006f04:	b004      	add	sp, #16
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	00001001 	.word	0x00001001
 8006f0c:	40012708 	.word	0x40012708
 8006f10:	20000040 	.word	0x20000040
 8006f14:	000f4240 	.word	0x000f4240
 8006f18:	ff7fffff 	.word	0xff7fffff
 8006f1c:	ffbfffff 	.word	0xffbfffff

08006f20 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	2203      	movs	r2, #3
 8006f38:	4013      	ands	r3, r2
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d112      	bne.n	8006f64 <ADC_Enable+0x44>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2201      	movs	r2, #1
 8006f46:	4013      	ands	r3, r2
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d009      	beq.n	8006f60 <ADC_Enable+0x40>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	2380      	movs	r3, #128	; 0x80
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	401a      	ands	r2, r3
 8006f58:	2380      	movs	r3, #128	; 0x80
 8006f5a:	021b      	lsls	r3, r3, #8
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d101      	bne.n	8006f64 <ADC_Enable+0x44>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <ADC_Enable+0x46>
 8006f64:	2300      	movs	r3, #0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d152      	bne.n	8007010 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	4a2a      	ldr	r2, [pc, #168]	; (800701c <ADC_Enable+0xfc>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	d00d      	beq.n	8006f92 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7a:	2210      	movs	r2, #16
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f86:	2201      	movs	r2, #1
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e03f      	b.n	8007012 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2101      	movs	r1, #1
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006fa2:	4b1f      	ldr	r3, [pc, #124]	; (8007020 <ADC_Enable+0x100>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	491f      	ldr	r1, [pc, #124]	; (8007024 <ADC_Enable+0x104>)
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f7f9 f8ab 	bl	8000104 <__udivsi3>
 8006fae:	0003      	movs	r3, r0
 8006fb0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006fb2:	e002      	b.n	8006fba <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f9      	bne.n	8006fb4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006fc0:	f7ff fce0 	bl	8006984 <HAL_GetTick>
 8006fc4:	0003      	movs	r3, r0
 8006fc6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006fc8:	e01b      	b.n	8007002 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006fca:	f7ff fcdb 	bl	8006984 <HAL_GetTick>
 8006fce:	0002      	movs	r2, r0
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	1ad3      	subs	r3, r2, r3
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d914      	bls.n	8007002 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d00d      	beq.n	8007002 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fea:	2210      	movs	r2, #16
 8006fec:	431a      	orrs	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e007      	b.n	8007012 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2201      	movs	r2, #1
 800700a:	4013      	ands	r3, r2
 800700c:	2b01      	cmp	r3, #1
 800700e:	d1dc      	bne.n	8006fca <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	0018      	movs	r0, r3
 8007014:	46bd      	mov	sp, r7
 8007016:	b004      	add	sp, #16
 8007018:	bd80      	pop	{r7, pc}
 800701a:	46c0      	nop			; (mov r8, r8)
 800701c:	80000017 	.word	0x80000017
 8007020:	20000040 	.word	0x20000040
 8007024:	000f4240 	.word	0x000f4240

08007028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007028:	b590      	push	{r4, r7, lr}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
 800702e:	0002      	movs	r2, r0
 8007030:	6039      	str	r1, [r7, #0]
 8007032:	1dfb      	adds	r3, r7, #7
 8007034:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007036:	1dfb      	adds	r3, r7, #7
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b7f      	cmp	r3, #127	; 0x7f
 800703c:	d828      	bhi.n	8007090 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800703e:	4a2f      	ldr	r2, [pc, #188]	; (80070fc <__NVIC_SetPriority+0xd4>)
 8007040:	1dfb      	adds	r3, r7, #7
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	b25b      	sxtb	r3, r3
 8007046:	089b      	lsrs	r3, r3, #2
 8007048:	33c0      	adds	r3, #192	; 0xc0
 800704a:	009b      	lsls	r3, r3, #2
 800704c:	589b      	ldr	r3, [r3, r2]
 800704e:	1dfa      	adds	r2, r7, #7
 8007050:	7812      	ldrb	r2, [r2, #0]
 8007052:	0011      	movs	r1, r2
 8007054:	2203      	movs	r2, #3
 8007056:	400a      	ands	r2, r1
 8007058:	00d2      	lsls	r2, r2, #3
 800705a:	21ff      	movs	r1, #255	; 0xff
 800705c:	4091      	lsls	r1, r2
 800705e:	000a      	movs	r2, r1
 8007060:	43d2      	mvns	r2, r2
 8007062:	401a      	ands	r2, r3
 8007064:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	019b      	lsls	r3, r3, #6
 800706a:	22ff      	movs	r2, #255	; 0xff
 800706c:	401a      	ands	r2, r3
 800706e:	1dfb      	adds	r3, r7, #7
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	0018      	movs	r0, r3
 8007074:	2303      	movs	r3, #3
 8007076:	4003      	ands	r3, r0
 8007078:	00db      	lsls	r3, r3, #3
 800707a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800707c:	481f      	ldr	r0, [pc, #124]	; (80070fc <__NVIC_SetPriority+0xd4>)
 800707e:	1dfb      	adds	r3, r7, #7
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	b25b      	sxtb	r3, r3
 8007084:	089b      	lsrs	r3, r3, #2
 8007086:	430a      	orrs	r2, r1
 8007088:	33c0      	adds	r3, #192	; 0xc0
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800708e:	e031      	b.n	80070f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007090:	4a1b      	ldr	r2, [pc, #108]	; (8007100 <__NVIC_SetPriority+0xd8>)
 8007092:	1dfb      	adds	r3, r7, #7
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	0019      	movs	r1, r3
 8007098:	230f      	movs	r3, #15
 800709a:	400b      	ands	r3, r1
 800709c:	3b08      	subs	r3, #8
 800709e:	089b      	lsrs	r3, r3, #2
 80070a0:	3306      	adds	r3, #6
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	18d3      	adds	r3, r2, r3
 80070a6:	3304      	adds	r3, #4
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	1dfa      	adds	r2, r7, #7
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	0011      	movs	r1, r2
 80070b0:	2203      	movs	r2, #3
 80070b2:	400a      	ands	r2, r1
 80070b4:	00d2      	lsls	r2, r2, #3
 80070b6:	21ff      	movs	r1, #255	; 0xff
 80070b8:	4091      	lsls	r1, r2
 80070ba:	000a      	movs	r2, r1
 80070bc:	43d2      	mvns	r2, r2
 80070be:	401a      	ands	r2, r3
 80070c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	019b      	lsls	r3, r3, #6
 80070c6:	22ff      	movs	r2, #255	; 0xff
 80070c8:	401a      	ands	r2, r3
 80070ca:	1dfb      	adds	r3, r7, #7
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	0018      	movs	r0, r3
 80070d0:	2303      	movs	r3, #3
 80070d2:	4003      	ands	r3, r0
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80070d8:	4809      	ldr	r0, [pc, #36]	; (8007100 <__NVIC_SetPriority+0xd8>)
 80070da:	1dfb      	adds	r3, r7, #7
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	001c      	movs	r4, r3
 80070e0:	230f      	movs	r3, #15
 80070e2:	4023      	ands	r3, r4
 80070e4:	3b08      	subs	r3, #8
 80070e6:	089b      	lsrs	r3, r3, #2
 80070e8:	430a      	orrs	r2, r1
 80070ea:	3306      	adds	r3, #6
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	18c3      	adds	r3, r0, r3
 80070f0:	3304      	adds	r3, #4
 80070f2:	601a      	str	r2, [r3, #0]
}
 80070f4:	46c0      	nop			; (mov r8, r8)
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b003      	add	sp, #12
 80070fa:	bd90      	pop	{r4, r7, pc}
 80070fc:	e000e100 	.word	0xe000e100
 8007100:	e000ed00 	.word	0xe000ed00

08007104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1e5a      	subs	r2, r3, #1
 8007110:	2380      	movs	r3, #128	; 0x80
 8007112:	045b      	lsls	r3, r3, #17
 8007114:	429a      	cmp	r2, r3
 8007116:	d301      	bcc.n	800711c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007118:	2301      	movs	r3, #1
 800711a:	e010      	b.n	800713e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800711c:	4b0a      	ldr	r3, [pc, #40]	; (8007148 <SysTick_Config+0x44>)
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	3a01      	subs	r2, #1
 8007122:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007124:	2301      	movs	r3, #1
 8007126:	425b      	negs	r3, r3
 8007128:	2103      	movs	r1, #3
 800712a:	0018      	movs	r0, r3
 800712c:	f7ff ff7c 	bl	8007028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007130:	4b05      	ldr	r3, [pc, #20]	; (8007148 <SysTick_Config+0x44>)
 8007132:	2200      	movs	r2, #0
 8007134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007136:	4b04      	ldr	r3, [pc, #16]	; (8007148 <SysTick_Config+0x44>)
 8007138:	2207      	movs	r2, #7
 800713a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800713c:	2300      	movs	r3, #0
}
 800713e:	0018      	movs	r0, r3
 8007140:	46bd      	mov	sp, r7
 8007142:	b002      	add	sp, #8
 8007144:	bd80      	pop	{r7, pc}
 8007146:	46c0      	nop			; (mov r8, r8)
 8007148:	e000e010 	.word	0xe000e010

0800714c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
 8007156:	210f      	movs	r1, #15
 8007158:	187b      	adds	r3, r7, r1
 800715a:	1c02      	adds	r2, r0, #0
 800715c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	187b      	adds	r3, r7, r1
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	b25b      	sxtb	r3, r3
 8007166:	0011      	movs	r1, r2
 8007168:	0018      	movs	r0, r3
 800716a:	f7ff ff5d 	bl	8007028 <__NVIC_SetPriority>
}
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	46bd      	mov	sp, r7
 8007172:	b004      	add	sp, #16
 8007174:	bd80      	pop	{r7, pc}

08007176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007176:	b580      	push	{r7, lr}
 8007178:	b082      	sub	sp, #8
 800717a:	af00      	add	r7, sp, #0
 800717c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	0018      	movs	r0, r3
 8007182:	f7ff ffbf 	bl	8007104 <SysTick_Config>
 8007186:	0003      	movs	r3, r0
}
 8007188:	0018      	movs	r0, r3
 800718a:	46bd      	mov	sp, r7
 800718c:	b002      	add	sp, #8
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	603a      	str	r2, [r7, #0]
 800719c:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800719e:	2317      	movs	r3, #23
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 80071a6:	2316      	movs	r3, #22
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 80071ae:	2315      	movs	r3, #21
 80071b0:	18fb      	adds	r3, r7, r3
 80071b2:	2200      	movs	r2, #0
 80071b4:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80071b6:	4b3e      	ldr	r3, [pc, #248]	; (80072b0 <HAL_FLASH_Program+0x120>)
 80071b8:	7e1b      	ldrb	r3, [r3, #24]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d101      	bne.n	80071c2 <HAL_FLASH_Program+0x32>
 80071be:	2302      	movs	r3, #2
 80071c0:	e072      	b.n	80072a8 <HAL_FLASH_Program+0x118>
 80071c2:	4b3b      	ldr	r3, [pc, #236]	; (80072b0 <HAL_FLASH_Program+0x120>)
 80071c4:	2201      	movs	r2, #1
 80071c6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80071c8:	2317      	movs	r3, #23
 80071ca:	18fe      	adds	r6, r7, r3
 80071cc:	4b39      	ldr	r3, [pc, #228]	; (80072b4 <HAL_FLASH_Program+0x124>)
 80071ce:	0018      	movs	r0, r3
 80071d0:	f000 f8c4 	bl	800735c <FLASH_WaitForLastOperation>
 80071d4:	0003      	movs	r3, r0
 80071d6:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80071d8:	2317      	movs	r3, #23
 80071da:	18fb      	adds	r3, r7, r3
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d15c      	bne.n	800729c <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d104      	bne.n	80071f2 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80071e8:	2315      	movs	r3, #21
 80071ea:	18fb      	adds	r3, r7, r3
 80071ec:	2201      	movs	r2, #1
 80071ee:	701a      	strb	r2, [r3, #0]
 80071f0:	e00b      	b.n	800720a <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d104      	bne.n	8007202 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80071f8:	2315      	movs	r3, #21
 80071fa:	18fb      	adds	r3, r7, r3
 80071fc:	2202      	movs	r2, #2
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	e003      	b.n	800720a <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8007202:	2315      	movs	r3, #21
 8007204:	18fb      	adds	r3, r7, r3
 8007206:	2204      	movs	r2, #4
 8007208:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 800720a:	2316      	movs	r3, #22
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	2200      	movs	r2, #0
 8007210:	701a      	strb	r2, [r3, #0]
 8007212:	e039      	b.n	8007288 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8007214:	2116      	movs	r1, #22
 8007216:	187b      	adds	r3, r7, r1
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	005a      	lsls	r2, r3, #1
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	18d0      	adds	r0, r2, r3
 8007220:	187b      	adds	r3, r7, r1
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	011b      	lsls	r3, r3, #4
 8007226:	001a      	movs	r2, r3
 8007228:	3a20      	subs	r2, #32
 800722a:	2a00      	cmp	r2, #0
 800722c:	db03      	blt.n	8007236 <HAL_FLASH_Program+0xa6>
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	40d1      	lsrs	r1, r2
 8007232:	000c      	movs	r4, r1
 8007234:	e008      	b.n	8007248 <HAL_FLASH_Program+0xb8>
 8007236:	2220      	movs	r2, #32
 8007238:	1ad2      	subs	r2, r2, r3
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	4091      	lsls	r1, r2
 800723e:	000a      	movs	r2, r1
 8007240:	6839      	ldr	r1, [r7, #0]
 8007242:	40d9      	lsrs	r1, r3
 8007244:	000c      	movs	r4, r1
 8007246:	4314      	orrs	r4, r2
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	40da      	lsrs	r2, r3
 800724c:	0015      	movs	r5, r2
 800724e:	b2a3      	uxth	r3, r4
 8007250:	0019      	movs	r1, r3
 8007252:	f000 f867 	bl	8007324 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8007256:	2317      	movs	r3, #23
 8007258:	18fe      	adds	r6, r7, r3
 800725a:	4b16      	ldr	r3, [pc, #88]	; (80072b4 <HAL_FLASH_Program+0x124>)
 800725c:	0018      	movs	r0, r3
 800725e:	f000 f87d 	bl	800735c <FLASH_WaitForLastOperation>
 8007262:	0003      	movs	r3, r0
 8007264:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <HAL_FLASH_Program+0x128>)
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <HAL_FLASH_Program+0x128>)
 800726c:	2101      	movs	r1, #1
 800726e:	438a      	bics	r2, r1
 8007270:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8007272:	2317      	movs	r3, #23
 8007274:	18fb      	adds	r3, r7, r3
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10e      	bne.n	800729a <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 800727c:	2116      	movs	r1, #22
 800727e:	187b      	adds	r3, r7, r1
 8007280:	781a      	ldrb	r2, [r3, #0]
 8007282:	187b      	adds	r3, r7, r1
 8007284:	3201      	adds	r2, #1
 8007286:	701a      	strb	r2, [r3, #0]
 8007288:	2316      	movs	r3, #22
 800728a:	18fa      	adds	r2, r7, r3
 800728c:	2315      	movs	r3, #21
 800728e:	18fb      	adds	r3, r7, r3
 8007290:	7812      	ldrb	r2, [r2, #0]
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d3bd      	bcc.n	8007214 <HAL_FLASH_Program+0x84>
 8007298:	e000      	b.n	800729c <HAL_FLASH_Program+0x10c>
      {
        break;
 800729a:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800729c:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <HAL_FLASH_Program+0x120>)
 800729e:	2200      	movs	r2, #0
 80072a0:	761a      	strb	r2, [r3, #24]

  return status;
 80072a2:	2317      	movs	r3, #23
 80072a4:	18fb      	adds	r3, r7, r3
 80072a6:	781b      	ldrb	r3, [r3, #0]
}
 80072a8:	0018      	movs	r0, r3
 80072aa:	46bd      	mov	sp, r7
 80072ac:	b007      	add	sp, #28
 80072ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072b0:	20000270 	.word	0x20000270
 80072b4:	0000c350 	.word	0x0000c350
 80072b8:	40022000 	.word	0x40022000

080072bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80072c2:	1dfb      	adds	r3, r7, #7
 80072c4:	2200      	movs	r2, #0
 80072c6:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80072c8:	4b0c      	ldr	r3, [pc, #48]	; (80072fc <HAL_FLASH_Unlock+0x40>)
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	2280      	movs	r2, #128	; 0x80
 80072ce:	4013      	ands	r3, r2
 80072d0:	d00d      	beq.n	80072ee <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80072d2:	4b0a      	ldr	r3, [pc, #40]	; (80072fc <HAL_FLASH_Unlock+0x40>)
 80072d4:	4a0a      	ldr	r2, [pc, #40]	; (8007300 <HAL_FLASH_Unlock+0x44>)
 80072d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80072d8:	4b08      	ldr	r3, [pc, #32]	; (80072fc <HAL_FLASH_Unlock+0x40>)
 80072da:	4a0a      	ldr	r2, [pc, #40]	; (8007304 <HAL_FLASH_Unlock+0x48>)
 80072dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80072de:	4b07      	ldr	r3, [pc, #28]	; (80072fc <HAL_FLASH_Unlock+0x40>)
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	2280      	movs	r2, #128	; 0x80
 80072e4:	4013      	ands	r3, r2
 80072e6:	d002      	beq.n	80072ee <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80072e8:	1dfb      	adds	r3, r7, #7
 80072ea:	2201      	movs	r2, #1
 80072ec:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80072ee:	1dfb      	adds	r3, r7, #7
 80072f0:	781b      	ldrb	r3, [r3, #0]
}
 80072f2:	0018      	movs	r0, r3
 80072f4:	46bd      	mov	sp, r7
 80072f6:	b002      	add	sp, #8
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	40022000 	.word	0x40022000
 8007300:	45670123 	.word	0x45670123
 8007304:	cdef89ab 	.word	0xcdef89ab

08007308 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800730c:	4b04      	ldr	r3, [pc, #16]	; (8007320 <HAL_FLASH_Lock+0x18>)
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	4b03      	ldr	r3, [pc, #12]	; (8007320 <HAL_FLASH_Lock+0x18>)
 8007312:	2180      	movs	r1, #128	; 0x80
 8007314:	430a      	orrs	r2, r1
 8007316:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8007318:	2300      	movs	r3, #0
}
 800731a:	0018      	movs	r0, r3
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40022000 	.word	0x40022000

08007324 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	000a      	movs	r2, r1
 800732e:	1cbb      	adds	r3, r7, #2
 8007330:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007332:	4b08      	ldr	r3, [pc, #32]	; (8007354 <FLASH_Program_HalfWord+0x30>)
 8007334:	2200      	movs	r2, #0
 8007336:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007338:	4b07      	ldr	r3, [pc, #28]	; (8007358 <FLASH_Program_HalfWord+0x34>)
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <FLASH_Program_HalfWord+0x34>)
 800733e:	2101      	movs	r1, #1
 8007340:	430a      	orrs	r2, r1
 8007342:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	1cba      	adds	r2, r7, #2
 8007348:	8812      	ldrh	r2, [r2, #0]
 800734a:	801a      	strh	r2, [r3, #0]
}
 800734c:	46c0      	nop			; (mov r8, r8)
 800734e:	46bd      	mov	sp, r7
 8007350:	b002      	add	sp, #8
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20000270 	.word	0x20000270
 8007358:	40022000 	.word	0x40022000

0800735c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8007364:	f7ff fb0e 	bl	8006984 <HAL_GetTick>
 8007368:	0003      	movs	r3, r0
 800736a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800736c:	e00f      	b.n	800738e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	3301      	adds	r3, #1
 8007372:	d00c      	beq.n	800738e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <FLASH_WaitForLastOperation+0x2e>
 800737a:	f7ff fb03 	bl	8006984 <HAL_GetTick>
 800737e:	0002      	movs	r2, r0
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	429a      	cmp	r2, r3
 8007388:	d201      	bcs.n	800738e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e01f      	b.n	80073ce <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800738e:	4b12      	ldr	r3, [pc, #72]	; (80073d8 <FLASH_WaitForLastOperation+0x7c>)
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	2201      	movs	r2, #1
 8007394:	4013      	ands	r3, r2
 8007396:	2b01      	cmp	r3, #1
 8007398:	d0e9      	beq.n	800736e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800739a:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <FLASH_WaitForLastOperation+0x7c>)
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	2220      	movs	r2, #32
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b20      	cmp	r3, #32
 80073a4:	d102      	bne.n	80073ac <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80073a6:	4b0c      	ldr	r3, [pc, #48]	; (80073d8 <FLASH_WaitForLastOperation+0x7c>)
 80073a8:	2220      	movs	r2, #32
 80073aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80073ac:	4b0a      	ldr	r3, [pc, #40]	; (80073d8 <FLASH_WaitForLastOperation+0x7c>)
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	2210      	movs	r2, #16
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d005      	beq.n	80073c4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80073b8:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <FLASH_WaitForLastOperation+0x7c>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	2204      	movs	r2, #4
 80073be:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d103      	bne.n	80073cc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80073c4:	f000 f80a 	bl	80073dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	0018      	movs	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b004      	add	sp, #16
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	40022000 	.word	0x40022000

080073dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80073e6:	4b13      	ldr	r3, [pc, #76]	; (8007434 <FLASH_SetErrorCode+0x58>)
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	2210      	movs	r2, #16
 80073ec:	4013      	ands	r3, r2
 80073ee:	2b10      	cmp	r3, #16
 80073f0:	d109      	bne.n	8007406 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80073f2:	4b11      	ldr	r3, [pc, #68]	; (8007438 <FLASH_SetErrorCode+0x5c>)
 80073f4:	69db      	ldr	r3, [r3, #28]
 80073f6:	2202      	movs	r2, #2
 80073f8:	431a      	orrs	r2, r3
 80073fa:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <FLASH_SetErrorCode+0x5c>)
 80073fc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2210      	movs	r2, #16
 8007402:	4313      	orrs	r3, r2
 8007404:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007406:	4b0b      	ldr	r3, [pc, #44]	; (8007434 <FLASH_SetErrorCode+0x58>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2204      	movs	r2, #4
 800740c:	4013      	ands	r3, r2
 800740e:	2b04      	cmp	r3, #4
 8007410:	d109      	bne.n	8007426 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007412:	4b09      	ldr	r3, [pc, #36]	; (8007438 <FLASH_SetErrorCode+0x5c>)
 8007414:	69db      	ldr	r3, [r3, #28]
 8007416:	2201      	movs	r2, #1
 8007418:	431a      	orrs	r2, r3
 800741a:	4b07      	ldr	r3, [pc, #28]	; (8007438 <FLASH_SetErrorCode+0x5c>)
 800741c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2204      	movs	r2, #4
 8007422:	4313      	orrs	r3, r2
 8007424:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007426:	4b03      	ldr	r3, [pc, #12]	; (8007434 <FLASH_SetErrorCode+0x58>)
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	60da      	str	r2, [r3, #12]
}  
 800742c:	46c0      	nop			; (mov r8, r8)
 800742e:	46bd      	mov	sp, r7
 8007430:	b002      	add	sp, #8
 8007432:	bd80      	pop	{r7, pc}
 8007434:	40022000 	.word	0x40022000
 8007438:	20000270 	.word	0x20000270

0800743c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800743c:	b5b0      	push	{r4, r5, r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007446:	230f      	movs	r3, #15
 8007448:	18fb      	adds	r3, r7, r3
 800744a:	2201      	movs	r2, #1
 800744c:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007452:	4b32      	ldr	r3, [pc, #200]	; (800751c <HAL_FLASHEx_Erase+0xe0>)
 8007454:	7e1b      	ldrb	r3, [r3, #24]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d101      	bne.n	800745e <HAL_FLASHEx_Erase+0x22>
 800745a:	2302      	movs	r3, #2
 800745c:	e05a      	b.n	8007514 <HAL_FLASHEx_Erase+0xd8>
 800745e:	4b2f      	ldr	r3, [pc, #188]	; (800751c <HAL_FLASHEx_Erase+0xe0>)
 8007460:	2201      	movs	r2, #1
 8007462:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d116      	bne.n	800749a <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800746c:	4b2c      	ldr	r3, [pc, #176]	; (8007520 <HAL_FLASHEx_Erase+0xe4>)
 800746e:	0018      	movs	r0, r3
 8007470:	f7ff ff74 	bl	800735c <FLASH_WaitForLastOperation>
 8007474:	1e03      	subs	r3, r0, #0
 8007476:	d147      	bne.n	8007508 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8007478:	f000 f856 	bl	8007528 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800747c:	230f      	movs	r3, #15
 800747e:	18fc      	adds	r4, r7, r3
 8007480:	4b27      	ldr	r3, [pc, #156]	; (8007520 <HAL_FLASHEx_Erase+0xe4>)
 8007482:	0018      	movs	r0, r3
 8007484:	f7ff ff6a 	bl	800735c <FLASH_WaitForLastOperation>
 8007488:	0003      	movs	r3, r0
 800748a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800748c:	4b25      	ldr	r3, [pc, #148]	; (8007524 <HAL_FLASHEx_Erase+0xe8>)
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	4b24      	ldr	r3, [pc, #144]	; (8007524 <HAL_FLASHEx_Erase+0xe8>)
 8007492:	2104      	movs	r1, #4
 8007494:	438a      	bics	r2, r1
 8007496:	611a      	str	r2, [r3, #16]
 8007498:	e036      	b.n	8007508 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800749a:	4b21      	ldr	r3, [pc, #132]	; (8007520 <HAL_FLASHEx_Erase+0xe4>)
 800749c:	0018      	movs	r0, r3
 800749e:	f7ff ff5d 	bl	800735c <FLASH_WaitForLastOperation>
 80074a2:	1e03      	subs	r3, r0, #0
 80074a4:	d130      	bne.n	8007508 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2201      	movs	r2, #1
 80074aa:	4252      	negs	r2, r2
 80074ac:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	60bb      	str	r3, [r7, #8]
 80074b4:	e01f      	b.n	80074f6 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	0018      	movs	r0, r3
 80074ba:	f000 f84d 	bl	8007558 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80074be:	250f      	movs	r5, #15
 80074c0:	197c      	adds	r4, r7, r5
 80074c2:	4b17      	ldr	r3, [pc, #92]	; (8007520 <HAL_FLASHEx_Erase+0xe4>)
 80074c4:	0018      	movs	r0, r3
 80074c6:	f7ff ff49 	bl	800735c <FLASH_WaitForLastOperation>
 80074ca:	0003      	movs	r3, r0
 80074cc:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80074ce:	4b15      	ldr	r3, [pc, #84]	; (8007524 <HAL_FLASHEx_Erase+0xe8>)
 80074d0:	691a      	ldr	r2, [r3, #16]
 80074d2:	4b14      	ldr	r3, [pc, #80]	; (8007524 <HAL_FLASHEx_Erase+0xe8>)
 80074d4:	2102      	movs	r1, #2
 80074d6:	438a      	bics	r2, r1
 80074d8:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80074da:	197b      	adds	r3, r7, r5
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	68ba      	ldr	r2, [r7, #8]
 80074e6:	601a      	str	r2, [r3, #0]
            break;
 80074e8:	e00e      	b.n	8007508 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2280      	movs	r2, #128	; 0x80
 80074ee:	0112      	lsls	r2, r2, #4
 80074f0:	4694      	mov	ip, r2
 80074f2:	4463      	add	r3, ip
 80074f4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	02da      	lsls	r2, r3, #11
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	429a      	cmp	r2, r3
 8007506:	d3d6      	bcc.n	80074b6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007508:	4b04      	ldr	r3, [pc, #16]	; (800751c <HAL_FLASHEx_Erase+0xe0>)
 800750a:	2200      	movs	r2, #0
 800750c:	761a      	strb	r2, [r3, #24]

  return status;
 800750e:	230f      	movs	r3, #15
 8007510:	18fb      	adds	r3, r7, r3
 8007512:	781b      	ldrb	r3, [r3, #0]
}
 8007514:	0018      	movs	r0, r3
 8007516:	46bd      	mov	sp, r7
 8007518:	b004      	add	sp, #16
 800751a:	bdb0      	pop	{r4, r5, r7, pc}
 800751c:	20000270 	.word	0x20000270
 8007520:	0000c350 	.word	0x0000c350
 8007524:	40022000 	.word	0x40022000

08007528 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800752c:	4b08      	ldr	r3, [pc, #32]	; (8007550 <FLASH_MassErase+0x28>)
 800752e:	2200      	movs	r2, #0
 8007530:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8007532:	4b08      	ldr	r3, [pc, #32]	; (8007554 <FLASH_MassErase+0x2c>)
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	4b07      	ldr	r3, [pc, #28]	; (8007554 <FLASH_MassErase+0x2c>)
 8007538:	2104      	movs	r1, #4
 800753a:	430a      	orrs	r2, r1
 800753c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800753e:	4b05      	ldr	r3, [pc, #20]	; (8007554 <FLASH_MassErase+0x2c>)
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	4b04      	ldr	r3, [pc, #16]	; (8007554 <FLASH_MassErase+0x2c>)
 8007544:	2140      	movs	r1, #64	; 0x40
 8007546:	430a      	orrs	r2, r1
 8007548:	611a      	str	r2, [r3, #16]
}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000270 	.word	0x20000270
 8007554:	40022000 	.word	0x40022000

08007558 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <FLASH_PageErase+0x34>)
 8007562:	2200      	movs	r2, #0
 8007564:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <FLASH_PageErase+0x38>)
 8007568:	691a      	ldr	r2, [r3, #16]
 800756a:	4b09      	ldr	r3, [pc, #36]	; (8007590 <FLASH_PageErase+0x38>)
 800756c:	2102      	movs	r1, #2
 800756e:	430a      	orrs	r2, r1
 8007570:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007572:	4b07      	ldr	r3, [pc, #28]	; (8007590 <FLASH_PageErase+0x38>)
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007578:	4b05      	ldr	r3, [pc, #20]	; (8007590 <FLASH_PageErase+0x38>)
 800757a:	691a      	ldr	r2, [r3, #16]
 800757c:	4b04      	ldr	r3, [pc, #16]	; (8007590 <FLASH_PageErase+0x38>)
 800757e:	2140      	movs	r1, #64	; 0x40
 8007580:	430a      	orrs	r2, r1
 8007582:	611a      	str	r2, [r3, #16]
}
 8007584:	46c0      	nop			; (mov r8, r8)
 8007586:	46bd      	mov	sp, r7
 8007588:	b002      	add	sp, #8
 800758a:	bd80      	pop	{r7, pc}
 800758c:	20000270 	.word	0x20000270
 8007590:	40022000 	.word	0x40022000

08007594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80075a2:	e14f      	b.n	8007844 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2101      	movs	r1, #1
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4091      	lsls	r1, r2
 80075ae:	000a      	movs	r2, r1
 80075b0:	4013      	ands	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d100      	bne.n	80075bc <HAL_GPIO_Init+0x28>
 80075ba:	e140      	b.n	800783e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	2203      	movs	r2, #3
 80075c2:	4013      	ands	r3, r2
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d005      	beq.n	80075d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	2203      	movs	r2, #3
 80075ce:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d130      	bne.n	8007636 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	005b      	lsls	r3, r3, #1
 80075de:	2203      	movs	r2, #3
 80075e0:	409a      	lsls	r2, r3
 80075e2:	0013      	movs	r3, r2
 80075e4:	43da      	mvns	r2, r3
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	4013      	ands	r3, r2
 80075ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	409a      	lsls	r2, r3
 80075f6:	0013      	movs	r3, r2
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800760a:	2201      	movs	r2, #1
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	409a      	lsls	r2, r3
 8007610:	0013      	movs	r3, r2
 8007612:	43da      	mvns	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	4013      	ands	r3, r2
 8007618:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	091b      	lsrs	r3, r3, #4
 8007620:	2201      	movs	r2, #1
 8007622:	401a      	ands	r2, r3
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	409a      	lsls	r2, r3
 8007628:	0013      	movs	r3, r2
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	4313      	orrs	r3, r2
 800762e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2203      	movs	r2, #3
 800763c:	4013      	ands	r3, r2
 800763e:	2b03      	cmp	r3, #3
 8007640:	d017      	beq.n	8007672 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	2203      	movs	r2, #3
 800764e:	409a      	lsls	r2, r3
 8007650:	0013      	movs	r3, r2
 8007652:	43da      	mvns	r2, r3
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4013      	ands	r3, r2
 8007658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	005b      	lsls	r3, r3, #1
 8007662:	409a      	lsls	r2, r3
 8007664:	0013      	movs	r3, r2
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	4313      	orrs	r3, r2
 800766a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2203      	movs	r2, #3
 8007678:	4013      	ands	r3, r2
 800767a:	2b02      	cmp	r3, #2
 800767c:	d123      	bne.n	80076c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	08da      	lsrs	r2, r3, #3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	3208      	adds	r2, #8
 8007686:	0092      	lsls	r2, r2, #2
 8007688:	58d3      	ldr	r3, [r2, r3]
 800768a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2207      	movs	r2, #7
 8007690:	4013      	ands	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	220f      	movs	r2, #15
 8007696:	409a      	lsls	r2, r3
 8007698:	0013      	movs	r3, r2
 800769a:	43da      	mvns	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	4013      	ands	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	691a      	ldr	r2, [r3, #16]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	2107      	movs	r1, #7
 80076aa:	400b      	ands	r3, r1
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	409a      	lsls	r2, r3
 80076b0:	0013      	movs	r3, r2
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	08da      	lsrs	r2, r3, #3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3208      	adds	r2, #8
 80076c0:	0092      	lsls	r2, r2, #2
 80076c2:	6939      	ldr	r1, [r7, #16]
 80076c4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	2203      	movs	r2, #3
 80076d2:	409a      	lsls	r2, r3
 80076d4:	0013      	movs	r3, r2
 80076d6:	43da      	mvns	r2, r3
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	4013      	ands	r3, r2
 80076dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	2203      	movs	r2, #3
 80076e4:	401a      	ands	r2, r3
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	005b      	lsls	r3, r3, #1
 80076ea:	409a      	lsls	r2, r3
 80076ec:	0013      	movs	r3, r2
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	693a      	ldr	r2, [r7, #16]
 80076f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	23c0      	movs	r3, #192	; 0xc0
 8007700:	029b      	lsls	r3, r3, #10
 8007702:	4013      	ands	r3, r2
 8007704:	d100      	bne.n	8007708 <HAL_GPIO_Init+0x174>
 8007706:	e09a      	b.n	800783e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007708:	4b54      	ldr	r3, [pc, #336]	; (800785c <HAL_GPIO_Init+0x2c8>)
 800770a:	699a      	ldr	r2, [r3, #24]
 800770c:	4b53      	ldr	r3, [pc, #332]	; (800785c <HAL_GPIO_Init+0x2c8>)
 800770e:	2101      	movs	r1, #1
 8007710:	430a      	orrs	r2, r1
 8007712:	619a      	str	r2, [r3, #24]
 8007714:	4b51      	ldr	r3, [pc, #324]	; (800785c <HAL_GPIO_Init+0x2c8>)
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	2201      	movs	r2, #1
 800771a:	4013      	ands	r3, r2
 800771c:	60bb      	str	r3, [r7, #8]
 800771e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007720:	4a4f      	ldr	r2, [pc, #316]	; (8007860 <HAL_GPIO_Init+0x2cc>)
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	089b      	lsrs	r3, r3, #2
 8007726:	3302      	adds	r3, #2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	589b      	ldr	r3, [r3, r2]
 800772c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2203      	movs	r2, #3
 8007732:	4013      	ands	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	220f      	movs	r2, #15
 8007738:	409a      	lsls	r2, r3
 800773a:	0013      	movs	r3, r2
 800773c:	43da      	mvns	r2, r3
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	4013      	ands	r3, r2
 8007742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	2390      	movs	r3, #144	; 0x90
 8007748:	05db      	lsls	r3, r3, #23
 800774a:	429a      	cmp	r2, r3
 800774c:	d013      	beq.n	8007776 <HAL_GPIO_Init+0x1e2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a44      	ldr	r2, [pc, #272]	; (8007864 <HAL_GPIO_Init+0x2d0>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00d      	beq.n	8007772 <HAL_GPIO_Init+0x1de>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a43      	ldr	r2, [pc, #268]	; (8007868 <HAL_GPIO_Init+0x2d4>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d007      	beq.n	800776e <HAL_GPIO_Init+0x1da>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a42      	ldr	r2, [pc, #264]	; (800786c <HAL_GPIO_Init+0x2d8>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d101      	bne.n	800776a <HAL_GPIO_Init+0x1d6>
 8007766:	2303      	movs	r3, #3
 8007768:	e006      	b.n	8007778 <HAL_GPIO_Init+0x1e4>
 800776a:	2305      	movs	r3, #5
 800776c:	e004      	b.n	8007778 <HAL_GPIO_Init+0x1e4>
 800776e:	2302      	movs	r3, #2
 8007770:	e002      	b.n	8007778 <HAL_GPIO_Init+0x1e4>
 8007772:	2301      	movs	r3, #1
 8007774:	e000      	b.n	8007778 <HAL_GPIO_Init+0x1e4>
 8007776:	2300      	movs	r3, #0
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	2103      	movs	r1, #3
 800777c:	400a      	ands	r2, r1
 800777e:	0092      	lsls	r2, r2, #2
 8007780:	4093      	lsls	r3, r2
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007788:	4935      	ldr	r1, [pc, #212]	; (8007860 <HAL_GPIO_Init+0x2cc>)
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	089b      	lsrs	r3, r3, #2
 800778e:	3302      	adds	r3, #2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	693a      	ldr	r2, [r7, #16]
 8007794:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007796:	4b36      	ldr	r3, [pc, #216]	; (8007870 <HAL_GPIO_Init+0x2dc>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	43da      	mvns	r2, r3
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4013      	ands	r3, r2
 80077a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	2380      	movs	r3, #128	; 0x80
 80077ac:	035b      	lsls	r3, r3, #13
 80077ae:	4013      	ands	r3, r2
 80077b0:	d003      	beq.n	80077ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80077ba:	4b2d      	ldr	r3, [pc, #180]	; (8007870 <HAL_GPIO_Init+0x2dc>)
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80077c0:	4b2b      	ldr	r3, [pc, #172]	; (8007870 <HAL_GPIO_Init+0x2dc>)
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	43da      	mvns	r2, r3
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	4013      	ands	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	2380      	movs	r3, #128	; 0x80
 80077d6:	039b      	lsls	r3, r3, #14
 80077d8:	4013      	ands	r3, r2
 80077da:	d003      	beq.n	80077e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80077e4:	4b22      	ldr	r3, [pc, #136]	; (8007870 <HAL_GPIO_Init+0x2dc>)
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80077ea:	4b21      	ldr	r3, [pc, #132]	; (8007870 <HAL_GPIO_Init+0x2dc>)
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	43da      	mvns	r2, r3
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	4013      	ands	r3, r2
 80077f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	2380      	movs	r3, #128	; 0x80
 8007800:	029b      	lsls	r3, r3, #10
 8007802:	4013      	ands	r3, r2
 8007804:	d003      	beq.n	800780e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4313      	orrs	r3, r2
 800780c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800780e:	4b18      	ldr	r3, [pc, #96]	; (8007870 <HAL_GPIO_Init+0x2dc>)
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8007814:	4b16      	ldr	r3, [pc, #88]	; (8007870 <HAL_GPIO_Init+0x2dc>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	43da      	mvns	r2, r3
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	4013      	ands	r3, r2
 8007822:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	2380      	movs	r3, #128	; 0x80
 800782a:	025b      	lsls	r3, r3, #9
 800782c:	4013      	ands	r3, r2
 800782e:	d003      	beq.n	8007838 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	4313      	orrs	r3, r2
 8007836:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007838:	4b0d      	ldr	r3, [pc, #52]	; (8007870 <HAL_GPIO_Init+0x2dc>)
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	3301      	adds	r3, #1
 8007842:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681a      	ldr	r2, [r3, #0]
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	40da      	lsrs	r2, r3
 800784c:	1e13      	subs	r3, r2, #0
 800784e:	d000      	beq.n	8007852 <HAL_GPIO_Init+0x2be>
 8007850:	e6a8      	b.n	80075a4 <HAL_GPIO_Init+0x10>
  } 
}
 8007852:	46c0      	nop			; (mov r8, r8)
 8007854:	46c0      	nop			; (mov r8, r8)
 8007856:	46bd      	mov	sp, r7
 8007858:	b006      	add	sp, #24
 800785a:	bd80      	pop	{r7, pc}
 800785c:	40021000 	.word	0x40021000
 8007860:	40010000 	.word	0x40010000
 8007864:	48000400 	.word	0x48000400
 8007868:	48000800 	.word	0x48000800
 800786c:	48000c00 	.word	0x48000c00
 8007870:	40010400 	.word	0x40010400

08007874 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	000a      	movs	r2, r1
 800787e:	1cbb      	adds	r3, r7, #2
 8007880:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	1cba      	adds	r2, r7, #2
 8007888:	8812      	ldrh	r2, [r2, #0]
 800788a:	4013      	ands	r3, r2
 800788c:	d004      	beq.n	8007898 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800788e:	230f      	movs	r3, #15
 8007890:	18fb      	adds	r3, r7, r3
 8007892:	2201      	movs	r2, #1
 8007894:	701a      	strb	r2, [r3, #0]
 8007896:	e003      	b.n	80078a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007898:	230f      	movs	r3, #15
 800789a:	18fb      	adds	r3, r7, r3
 800789c:	2200      	movs	r2, #0
 800789e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80078a0:	230f      	movs	r3, #15
 80078a2:	18fb      	adds	r3, r7, r3
 80078a4:	781b      	ldrb	r3, [r3, #0]
  }
 80078a6:	0018      	movs	r0, r3
 80078a8:	46bd      	mov	sp, r7
 80078aa:	b004      	add	sp, #16
 80078ac:	bd80      	pop	{r7, pc}

080078ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b082      	sub	sp, #8
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	0008      	movs	r0, r1
 80078b8:	0011      	movs	r1, r2
 80078ba:	1cbb      	adds	r3, r7, #2
 80078bc:	1c02      	adds	r2, r0, #0
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	1c7b      	adds	r3, r7, #1
 80078c2:	1c0a      	adds	r2, r1, #0
 80078c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80078c6:	1c7b      	adds	r3, r7, #1
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80078ce:	1cbb      	adds	r3, r7, #2
 80078d0:	881a      	ldrh	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80078d6:	e003      	b.n	80078e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80078d8:	1cbb      	adds	r3, r7, #2
 80078da:	881a      	ldrh	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80078e0:	46c0      	nop			; (mov r8, r8)
 80078e2:	46bd      	mov	sp, r7
 80078e4:	b002      	add	sp, #8
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e305      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2201      	movs	r2, #1
 8007900:	4013      	ands	r3, r2
 8007902:	d100      	bne.n	8007906 <HAL_RCC_OscConfig+0x1e>
 8007904:	e08d      	b.n	8007a22 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007906:	4bc5      	ldr	r3, [pc, #788]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	220c      	movs	r2, #12
 800790c:	4013      	ands	r3, r2
 800790e:	2b04      	cmp	r3, #4
 8007910:	d00e      	beq.n	8007930 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007912:	4bc2      	ldr	r3, [pc, #776]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	220c      	movs	r2, #12
 8007918:	4013      	ands	r3, r2
 800791a:	2b08      	cmp	r3, #8
 800791c:	d116      	bne.n	800794c <HAL_RCC_OscConfig+0x64>
 800791e:	4bbf      	ldr	r3, [pc, #764]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	23c0      	movs	r3, #192	; 0xc0
 8007924:	025b      	lsls	r3, r3, #9
 8007926:	401a      	ands	r2, r3
 8007928:	2380      	movs	r3, #128	; 0x80
 800792a:	025b      	lsls	r3, r3, #9
 800792c:	429a      	cmp	r2, r3
 800792e:	d10d      	bne.n	800794c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007930:	4bba      	ldr	r3, [pc, #744]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	2380      	movs	r3, #128	; 0x80
 8007936:	029b      	lsls	r3, r3, #10
 8007938:	4013      	ands	r3, r2
 800793a:	d100      	bne.n	800793e <HAL_RCC_OscConfig+0x56>
 800793c:	e070      	b.n	8007a20 <HAL_RCC_OscConfig+0x138>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d000      	beq.n	8007948 <HAL_RCC_OscConfig+0x60>
 8007946:	e06b      	b.n	8007a20 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e2dc      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d107      	bne.n	8007964 <HAL_RCC_OscConfig+0x7c>
 8007954:	4bb1      	ldr	r3, [pc, #708]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	4bb0      	ldr	r3, [pc, #704]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 800795a:	2180      	movs	r1, #128	; 0x80
 800795c:	0249      	lsls	r1, r1, #9
 800795e:	430a      	orrs	r2, r1
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	e02f      	b.n	80079c4 <HAL_RCC_OscConfig+0xdc>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10c      	bne.n	8007986 <HAL_RCC_OscConfig+0x9e>
 800796c:	4bab      	ldr	r3, [pc, #684]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	4baa      	ldr	r3, [pc, #680]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007972:	49ab      	ldr	r1, [pc, #684]	; (8007c20 <HAL_RCC_OscConfig+0x338>)
 8007974:	400a      	ands	r2, r1
 8007976:	601a      	str	r2, [r3, #0]
 8007978:	4ba8      	ldr	r3, [pc, #672]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	4ba7      	ldr	r3, [pc, #668]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 800797e:	49a9      	ldr	r1, [pc, #676]	; (8007c24 <HAL_RCC_OscConfig+0x33c>)
 8007980:	400a      	ands	r2, r1
 8007982:	601a      	str	r2, [r3, #0]
 8007984:	e01e      	b.n	80079c4 <HAL_RCC_OscConfig+0xdc>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2b05      	cmp	r3, #5
 800798c:	d10e      	bne.n	80079ac <HAL_RCC_OscConfig+0xc4>
 800798e:	4ba3      	ldr	r3, [pc, #652]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4ba2      	ldr	r3, [pc, #648]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007994:	2180      	movs	r1, #128	; 0x80
 8007996:	02c9      	lsls	r1, r1, #11
 8007998:	430a      	orrs	r2, r1
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	4b9f      	ldr	r3, [pc, #636]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	4b9e      	ldr	r3, [pc, #632]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 80079a2:	2180      	movs	r1, #128	; 0x80
 80079a4:	0249      	lsls	r1, r1, #9
 80079a6:	430a      	orrs	r2, r1
 80079a8:	601a      	str	r2, [r3, #0]
 80079aa:	e00b      	b.n	80079c4 <HAL_RCC_OscConfig+0xdc>
 80079ac:	4b9b      	ldr	r3, [pc, #620]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	4b9a      	ldr	r3, [pc, #616]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 80079b2:	499b      	ldr	r1, [pc, #620]	; (8007c20 <HAL_RCC_OscConfig+0x338>)
 80079b4:	400a      	ands	r2, r1
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	4b98      	ldr	r3, [pc, #608]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	4b97      	ldr	r3, [pc, #604]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 80079be:	4999      	ldr	r1, [pc, #612]	; (8007c24 <HAL_RCC_OscConfig+0x33c>)
 80079c0:	400a      	ands	r2, r1
 80079c2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d014      	beq.n	80079f6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079cc:	f7fe ffda 	bl	8006984 <HAL_GetTick>
 80079d0:	0003      	movs	r3, r0
 80079d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d4:	e008      	b.n	80079e8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079d6:	f7fe ffd5 	bl	8006984 <HAL_GetTick>
 80079da:	0002      	movs	r2, r0
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	2b64      	cmp	r3, #100	; 0x64
 80079e2:	d901      	bls.n	80079e8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e28e      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079e8:	4b8c      	ldr	r3, [pc, #560]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	2380      	movs	r3, #128	; 0x80
 80079ee:	029b      	lsls	r3, r3, #10
 80079f0:	4013      	ands	r3, r2
 80079f2:	d0f0      	beq.n	80079d6 <HAL_RCC_OscConfig+0xee>
 80079f4:	e015      	b.n	8007a22 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f6:	f7fe ffc5 	bl	8006984 <HAL_GetTick>
 80079fa:	0003      	movs	r3, r0
 80079fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079fe:	e008      	b.n	8007a12 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a00:	f7fe ffc0 	bl	8006984 <HAL_GetTick>
 8007a04:	0002      	movs	r2, r0
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	2b64      	cmp	r3, #100	; 0x64
 8007a0c:	d901      	bls.n	8007a12 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	e279      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a12:	4b82      	ldr	r3, [pc, #520]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	2380      	movs	r3, #128	; 0x80
 8007a18:	029b      	lsls	r3, r3, #10
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	d1f0      	bne.n	8007a00 <HAL_RCC_OscConfig+0x118>
 8007a1e:	e000      	b.n	8007a22 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a20:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2202      	movs	r2, #2
 8007a28:	4013      	ands	r3, r2
 8007a2a:	d100      	bne.n	8007a2e <HAL_RCC_OscConfig+0x146>
 8007a2c:	e06c      	b.n	8007b08 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007a2e:	4b7b      	ldr	r3, [pc, #492]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	220c      	movs	r2, #12
 8007a34:	4013      	ands	r3, r2
 8007a36:	d00e      	beq.n	8007a56 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007a38:	4b78      	ldr	r3, [pc, #480]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	220c      	movs	r2, #12
 8007a3e:	4013      	ands	r3, r2
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	d11f      	bne.n	8007a84 <HAL_RCC_OscConfig+0x19c>
 8007a44:	4b75      	ldr	r3, [pc, #468]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	23c0      	movs	r3, #192	; 0xc0
 8007a4a:	025b      	lsls	r3, r3, #9
 8007a4c:	401a      	ands	r2, r3
 8007a4e:	2380      	movs	r3, #128	; 0x80
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d116      	bne.n	8007a84 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a56:	4b71      	ldr	r3, [pc, #452]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_OscConfig+0x184>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d001      	beq.n	8007a6c <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e24c      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a6c:	4b6b      	ldr	r3, [pc, #428]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	22f8      	movs	r2, #248	; 0xf8
 8007a72:	4393      	bics	r3, r2
 8007a74:	0019      	movs	r1, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	00da      	lsls	r2, r3, #3
 8007a7c:	4b67      	ldr	r3, [pc, #412]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a82:	e041      	b.n	8007b08 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d024      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a8c:	4b63      	ldr	r3, [pc, #396]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	4b62      	ldr	r3, [pc, #392]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007a92:	2101      	movs	r1, #1
 8007a94:	430a      	orrs	r2, r1
 8007a96:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a98:	f7fe ff74 	bl	8006984 <HAL_GetTick>
 8007a9c:	0003      	movs	r3, r0
 8007a9e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aa0:	e008      	b.n	8007ab4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007aa2:	f7fe ff6f 	bl	8006984 <HAL_GetTick>
 8007aa6:	0002      	movs	r2, r0
 8007aa8:	69bb      	ldr	r3, [r7, #24]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d901      	bls.n	8007ab4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007ab0:	2303      	movs	r3, #3
 8007ab2:	e228      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ab4:	4b59      	ldr	r3, [pc, #356]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2202      	movs	r2, #2
 8007aba:	4013      	ands	r3, r2
 8007abc:	d0f1      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007abe:	4b57      	ldr	r3, [pc, #348]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	22f8      	movs	r2, #248	; 0xf8
 8007ac4:	4393      	bics	r3, r2
 8007ac6:	0019      	movs	r1, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	00da      	lsls	r2, r3, #3
 8007ace:	4b53      	ldr	r3, [pc, #332]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007ad0:	430a      	orrs	r2, r1
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e018      	b.n	8007b08 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ad6:	4b51      	ldr	r3, [pc, #324]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	4b50      	ldr	r3, [pc, #320]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007adc:	2101      	movs	r1, #1
 8007ade:	438a      	bics	r2, r1
 8007ae0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ae2:	f7fe ff4f 	bl	8006984 <HAL_GetTick>
 8007ae6:	0003      	movs	r3, r0
 8007ae8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007aec:	f7fe ff4a 	bl	8006984 <HAL_GetTick>
 8007af0:	0002      	movs	r2, r0
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e203      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007afe:	4b47      	ldr	r3, [pc, #284]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2202      	movs	r2, #2
 8007b04:	4013      	ands	r3, r2
 8007b06:	d1f1      	bne.n	8007aec <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	4013      	ands	r3, r2
 8007b10:	d036      	beq.n	8007b80 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d019      	beq.n	8007b4e <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b1a:	4b40      	ldr	r3, [pc, #256]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b1e:	4b3f      	ldr	r3, [pc, #252]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007b20:	2101      	movs	r1, #1
 8007b22:	430a      	orrs	r2, r1
 8007b24:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b26:	f7fe ff2d 	bl	8006984 <HAL_GetTick>
 8007b2a:	0003      	movs	r3, r0
 8007b2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b2e:	e008      	b.n	8007b42 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b30:	f7fe ff28 	bl	8006984 <HAL_GetTick>
 8007b34:	0002      	movs	r2, r0
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d901      	bls.n	8007b42 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e1e1      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b42:	4b36      	ldr	r3, [pc, #216]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	2202      	movs	r2, #2
 8007b48:	4013      	ands	r3, r2
 8007b4a:	d0f1      	beq.n	8007b30 <HAL_RCC_OscConfig+0x248>
 8007b4c:	e018      	b.n	8007b80 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b4e:	4b33      	ldr	r3, [pc, #204]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b52:	4b32      	ldr	r3, [pc, #200]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007b54:	2101      	movs	r1, #1
 8007b56:	438a      	bics	r2, r1
 8007b58:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b5a:	f7fe ff13 	bl	8006984 <HAL_GetTick>
 8007b5e:	0003      	movs	r3, r0
 8007b60:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b62:	e008      	b.n	8007b76 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b64:	f7fe ff0e 	bl	8006984 <HAL_GetTick>
 8007b68:	0002      	movs	r2, r0
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e1c7      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b76:	4b29      	ldr	r3, [pc, #164]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	d1f1      	bne.n	8007b64 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2204      	movs	r2, #4
 8007b86:	4013      	ands	r3, r2
 8007b88:	d100      	bne.n	8007b8c <HAL_RCC_OscConfig+0x2a4>
 8007b8a:	e0b5      	b.n	8007cf8 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b8c:	201f      	movs	r0, #31
 8007b8e:	183b      	adds	r3, r7, r0
 8007b90:	2200      	movs	r2, #0
 8007b92:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b94:	4b21      	ldr	r3, [pc, #132]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007b96:	69da      	ldr	r2, [r3, #28]
 8007b98:	2380      	movs	r3, #128	; 0x80
 8007b9a:	055b      	lsls	r3, r3, #21
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	d110      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ba0:	4b1e      	ldr	r3, [pc, #120]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007ba2:	69da      	ldr	r2, [r3, #28]
 8007ba4:	4b1d      	ldr	r3, [pc, #116]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007ba6:	2180      	movs	r1, #128	; 0x80
 8007ba8:	0549      	lsls	r1, r1, #21
 8007baa:	430a      	orrs	r2, r1
 8007bac:	61da      	str	r2, [r3, #28]
 8007bae:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007bb0:	69da      	ldr	r2, [r3, #28]
 8007bb2:	2380      	movs	r3, #128	; 0x80
 8007bb4:	055b      	lsls	r3, r3, #21
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
 8007bba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007bbc:	183b      	adds	r3, r7, r0
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bc2:	4b19      	ldr	r3, [pc, #100]	; (8007c28 <HAL_RCC_OscConfig+0x340>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	2380      	movs	r3, #128	; 0x80
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	4013      	ands	r3, r2
 8007bcc:	d11a      	bne.n	8007c04 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bce:	4b16      	ldr	r3, [pc, #88]	; (8007c28 <HAL_RCC_OscConfig+0x340>)
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <HAL_RCC_OscConfig+0x340>)
 8007bd4:	2180      	movs	r1, #128	; 0x80
 8007bd6:	0049      	lsls	r1, r1, #1
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bdc:	f7fe fed2 	bl	8006984 <HAL_GetTick>
 8007be0:	0003      	movs	r3, r0
 8007be2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007be4:	e008      	b.n	8007bf8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007be6:	f7fe fecd 	bl	8006984 <HAL_GetTick>
 8007bea:	0002      	movs	r2, r0
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b64      	cmp	r3, #100	; 0x64
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e186      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bf8:	4b0b      	ldr	r3, [pc, #44]	; (8007c28 <HAL_RCC_OscConfig+0x340>)
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	005b      	lsls	r3, r3, #1
 8007c00:	4013      	ands	r3, r2
 8007c02:	d0f0      	beq.n	8007be6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d10f      	bne.n	8007c2c <HAL_RCC_OscConfig+0x344>
 8007c0c:	4b03      	ldr	r3, [pc, #12]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	4b02      	ldr	r3, [pc, #8]	; (8007c1c <HAL_RCC_OscConfig+0x334>)
 8007c12:	2101      	movs	r1, #1
 8007c14:	430a      	orrs	r2, r1
 8007c16:	621a      	str	r2, [r3, #32]
 8007c18:	e036      	b.n	8007c88 <HAL_RCC_OscConfig+0x3a0>
 8007c1a:	46c0      	nop			; (mov r8, r8)
 8007c1c:	40021000 	.word	0x40021000
 8007c20:	fffeffff 	.word	0xfffeffff
 8007c24:	fffbffff 	.word	0xfffbffff
 8007c28:	40007000 	.word	0x40007000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d10c      	bne.n	8007c4e <HAL_RCC_OscConfig+0x366>
 8007c34:	4bb6      	ldr	r3, [pc, #728]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c36:	6a1a      	ldr	r2, [r3, #32]
 8007c38:	4bb5      	ldr	r3, [pc, #724]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	438a      	bics	r2, r1
 8007c3e:	621a      	str	r2, [r3, #32]
 8007c40:	4bb3      	ldr	r3, [pc, #716]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c42:	6a1a      	ldr	r2, [r3, #32]
 8007c44:	4bb2      	ldr	r3, [pc, #712]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c46:	2104      	movs	r1, #4
 8007c48:	438a      	bics	r2, r1
 8007c4a:	621a      	str	r2, [r3, #32]
 8007c4c:	e01c      	b.n	8007c88 <HAL_RCC_OscConfig+0x3a0>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	2b05      	cmp	r3, #5
 8007c54:	d10c      	bne.n	8007c70 <HAL_RCC_OscConfig+0x388>
 8007c56:	4bae      	ldr	r3, [pc, #696]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c58:	6a1a      	ldr	r2, [r3, #32]
 8007c5a:	4bad      	ldr	r3, [pc, #692]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c5c:	2104      	movs	r1, #4
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	621a      	str	r2, [r3, #32]
 8007c62:	4bab      	ldr	r3, [pc, #684]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c64:	6a1a      	ldr	r2, [r3, #32]
 8007c66:	4baa      	ldr	r3, [pc, #680]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c68:	2101      	movs	r1, #1
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	621a      	str	r2, [r3, #32]
 8007c6e:	e00b      	b.n	8007c88 <HAL_RCC_OscConfig+0x3a0>
 8007c70:	4ba7      	ldr	r3, [pc, #668]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c72:	6a1a      	ldr	r2, [r3, #32]
 8007c74:	4ba6      	ldr	r3, [pc, #664]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c76:	2101      	movs	r1, #1
 8007c78:	438a      	bics	r2, r1
 8007c7a:	621a      	str	r2, [r3, #32]
 8007c7c:	4ba4      	ldr	r3, [pc, #656]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c7e:	6a1a      	ldr	r2, [r3, #32]
 8007c80:	4ba3      	ldr	r3, [pc, #652]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007c82:	2104      	movs	r1, #4
 8007c84:	438a      	bics	r2, r1
 8007c86:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d014      	beq.n	8007cba <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c90:	f7fe fe78 	bl	8006984 <HAL_GetTick>
 8007c94:	0003      	movs	r3, r0
 8007c96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c98:	e009      	b.n	8007cae <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c9a:	f7fe fe73 	bl	8006984 <HAL_GetTick>
 8007c9e:	0002      	movs	r2, r0
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	4a9b      	ldr	r2, [pc, #620]	; (8007f14 <HAL_RCC_OscConfig+0x62c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e12b      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cae:	4b98      	ldr	r3, [pc, #608]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	d0f0      	beq.n	8007c9a <HAL_RCC_OscConfig+0x3b2>
 8007cb8:	e013      	b.n	8007ce2 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cba:	f7fe fe63 	bl	8006984 <HAL_GetTick>
 8007cbe:	0003      	movs	r3, r0
 8007cc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cc2:	e009      	b.n	8007cd8 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cc4:	f7fe fe5e 	bl	8006984 <HAL_GetTick>
 8007cc8:	0002      	movs	r2, r0
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	4a91      	ldr	r2, [pc, #580]	; (8007f14 <HAL_RCC_OscConfig+0x62c>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d901      	bls.n	8007cd8 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e116      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cd8:	4b8d      	ldr	r3, [pc, #564]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007cda:	6a1b      	ldr	r3, [r3, #32]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	4013      	ands	r3, r2
 8007ce0:	d1f0      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007ce2:	231f      	movs	r3, #31
 8007ce4:	18fb      	adds	r3, r7, r3
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d105      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cec:	4b88      	ldr	r3, [pc, #544]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007cee:	69da      	ldr	r2, [r3, #28]
 8007cf0:	4b87      	ldr	r3, [pc, #540]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007cf2:	4989      	ldr	r1, [pc, #548]	; (8007f18 <HAL_RCC_OscConfig+0x630>)
 8007cf4:	400a      	ands	r2, r1
 8007cf6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2210      	movs	r2, #16
 8007cfe:	4013      	ands	r3, r2
 8007d00:	d063      	beq.n	8007dca <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	695b      	ldr	r3, [r3, #20]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d12a      	bne.n	8007d60 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007d0a:	4b81      	ldr	r3, [pc, #516]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d0e:	4b80      	ldr	r3, [pc, #512]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d10:	2104      	movs	r1, #4
 8007d12:	430a      	orrs	r2, r1
 8007d14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8007d16:	4b7e      	ldr	r3, [pc, #504]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d1a:	4b7d      	ldr	r3, [pc, #500]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d22:	f7fe fe2f 	bl	8006984 <HAL_GetTick>
 8007d26:	0003      	movs	r3, r0
 8007d28:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007d2a:	e008      	b.n	8007d3e <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007d2c:	f7fe fe2a 	bl	8006984 <HAL_GetTick>
 8007d30:	0002      	movs	r2, r0
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d901      	bls.n	8007d3e <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e0e3      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8007d3e:	4b74      	ldr	r3, [pc, #464]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d42:	2202      	movs	r2, #2
 8007d44:	4013      	ands	r3, r2
 8007d46:	d0f1      	beq.n	8007d2c <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007d48:	4b71      	ldr	r3, [pc, #452]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4c:	22f8      	movs	r2, #248	; 0xf8
 8007d4e:	4393      	bics	r3, r2
 8007d50:	0019      	movs	r1, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	699b      	ldr	r3, [r3, #24]
 8007d56:	00da      	lsls	r2, r3, #3
 8007d58:	4b6d      	ldr	r3, [pc, #436]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	635a      	str	r2, [r3, #52]	; 0x34
 8007d5e:	e034      	b.n	8007dca <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	3305      	adds	r3, #5
 8007d66:	d111      	bne.n	8007d8c <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8007d68:	4b69      	ldr	r3, [pc, #420]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d6c:	4b68      	ldr	r3, [pc, #416]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d6e:	2104      	movs	r1, #4
 8007d70:	438a      	bics	r2, r1
 8007d72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8007d74:	4b66      	ldr	r3, [pc, #408]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d78:	22f8      	movs	r2, #248	; 0xf8
 8007d7a:	4393      	bics	r3, r2
 8007d7c:	0019      	movs	r1, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	699b      	ldr	r3, [r3, #24]
 8007d82:	00da      	lsls	r2, r3, #3
 8007d84:	4b62      	ldr	r3, [pc, #392]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d86:	430a      	orrs	r2, r1
 8007d88:	635a      	str	r2, [r3, #52]	; 0x34
 8007d8a:	e01e      	b.n	8007dca <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8007d8c:	4b60      	ldr	r3, [pc, #384]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d90:	4b5f      	ldr	r3, [pc, #380]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d92:	2104      	movs	r1, #4
 8007d94:	430a      	orrs	r2, r1
 8007d96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8007d98:	4b5d      	ldr	r3, [pc, #372]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d9c:	4b5c      	ldr	r3, [pc, #368]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007d9e:	2101      	movs	r1, #1
 8007da0:	438a      	bics	r2, r1
 8007da2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007da4:	f7fe fdee 	bl	8006984 <HAL_GetTick>
 8007da8:	0003      	movs	r3, r0
 8007daa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007dac:	e008      	b.n	8007dc0 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8007dae:	f7fe fde9 	bl	8006984 <HAL_GetTick>
 8007db2:	0002      	movs	r2, r0
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	1ad3      	subs	r3, r2, r3
 8007db8:	2b02      	cmp	r3, #2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e0a2      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8007dc0:	4b53      	ldr	r3, [pc, #332]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc4:	2202      	movs	r2, #2
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	d1f1      	bne.n	8007dae <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d100      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x4ec>
 8007dd2:	e097      	b.n	8007f04 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007dd4:	4b4e      	ldr	r3, [pc, #312]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	220c      	movs	r2, #12
 8007dda:	4013      	ands	r3, r2
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d100      	bne.n	8007de2 <HAL_RCC_OscConfig+0x4fa>
 8007de0:	e06b      	b.n	8007eba <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a1b      	ldr	r3, [r3, #32]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d14c      	bne.n	8007e84 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dea:	4b49      	ldr	r3, [pc, #292]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b48      	ldr	r3, [pc, #288]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007df0:	494a      	ldr	r1, [pc, #296]	; (8007f1c <HAL_RCC_OscConfig+0x634>)
 8007df2:	400a      	ands	r2, r1
 8007df4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df6:	f7fe fdc5 	bl	8006984 <HAL_GetTick>
 8007dfa:	0003      	movs	r3, r0
 8007dfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007dfe:	e008      	b.n	8007e12 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e00:	f7fe fdc0 	bl	8006984 <HAL_GetTick>
 8007e04:	0002      	movs	r2, r0
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d901      	bls.n	8007e12 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e079      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e12:	4b3f      	ldr	r3, [pc, #252]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	2380      	movs	r3, #128	; 0x80
 8007e18:	049b      	lsls	r3, r3, #18
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	d1f0      	bne.n	8007e00 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e1e:	4b3c      	ldr	r3, [pc, #240]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e22:	220f      	movs	r2, #15
 8007e24:	4393      	bics	r3, r2
 8007e26:	0019      	movs	r1, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2c:	4b38      	ldr	r3, [pc, #224]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8007e32:	4b37      	ldr	r3, [pc, #220]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	4a3a      	ldr	r2, [pc, #232]	; (8007f20 <HAL_RCC_OscConfig+0x638>)
 8007e38:	4013      	ands	r3, r2
 8007e3a:	0019      	movs	r1, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e44:	431a      	orrs	r2, r3
 8007e46:	4b32      	ldr	r3, [pc, #200]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e4c:	4b30      	ldr	r3, [pc, #192]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	4b2f      	ldr	r3, [pc, #188]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007e52:	2180      	movs	r1, #128	; 0x80
 8007e54:	0449      	lsls	r1, r1, #17
 8007e56:	430a      	orrs	r2, r1
 8007e58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e5a:	f7fe fd93 	bl	8006984 <HAL_GetTick>
 8007e5e:	0003      	movs	r3, r0
 8007e60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e62:	e008      	b.n	8007e76 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e64:	f7fe fd8e 	bl	8006984 <HAL_GetTick>
 8007e68:	0002      	movs	r2, r0
 8007e6a:	69bb      	ldr	r3, [r7, #24]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e047      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007e76:	4b26      	ldr	r3, [pc, #152]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	2380      	movs	r3, #128	; 0x80
 8007e7c:	049b      	lsls	r3, r3, #18
 8007e7e:	4013      	ands	r3, r2
 8007e80:	d0f0      	beq.n	8007e64 <HAL_RCC_OscConfig+0x57c>
 8007e82:	e03f      	b.n	8007f04 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e84:	4b22      	ldr	r3, [pc, #136]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	4b21      	ldr	r3, [pc, #132]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007e8a:	4924      	ldr	r1, [pc, #144]	; (8007f1c <HAL_RCC_OscConfig+0x634>)
 8007e8c:	400a      	ands	r2, r1
 8007e8e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e90:	f7fe fd78 	bl	8006984 <HAL_GetTick>
 8007e94:	0003      	movs	r3, r0
 8007e96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007e98:	e008      	b.n	8007eac <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e9a:	f7fe fd73 	bl	8006984 <HAL_GetTick>
 8007e9e:	0002      	movs	r2, r0
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e02c      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007eac:	4b18      	ldr	r3, [pc, #96]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007eae:	681a      	ldr	r2, [r3, #0]
 8007eb0:	2380      	movs	r3, #128	; 0x80
 8007eb2:	049b      	lsls	r3, r3, #18
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	d1f0      	bne.n	8007e9a <HAL_RCC_OscConfig+0x5b2>
 8007eb8:	e024      	b.n	8007f04 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e01f      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8007ec6:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8007ecc:	4b10      	ldr	r3, [pc, #64]	; (8007f10 <HAL_RCC_OscConfig+0x628>)
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ed2:	697a      	ldr	r2, [r7, #20]
 8007ed4:	23c0      	movs	r3, #192	; 0xc0
 8007ed6:	025b      	lsls	r3, r3, #9
 8007ed8:	401a      	ands	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d10e      	bne.n	8007f00 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	220f      	movs	r2, #15
 8007ee6:	401a      	ands	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d107      	bne.n	8007f00 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	23f0      	movs	r3, #240	; 0xf0
 8007ef4:	039b      	lsls	r3, r3, #14
 8007ef6:	401a      	ands	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d001      	beq.n	8007f04 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e000      	b.n	8007f06 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	0018      	movs	r0, r3
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	b008      	add	sp, #32
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	46c0      	nop			; (mov r8, r8)
 8007f10:	40021000 	.word	0x40021000
 8007f14:	00001388 	.word	0x00001388
 8007f18:	efffffff 	.word	0xefffffff
 8007f1c:	feffffff 	.word	0xfeffffff
 8007f20:	ffc27fff 	.word	0xffc27fff

08007f24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b084      	sub	sp, #16
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f34:	2301      	movs	r3, #1
 8007f36:	e0b3      	b.n	80080a0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f38:	4b5b      	ldr	r3, [pc, #364]	; (80080a8 <HAL_RCC_ClockConfig+0x184>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	4013      	ands	r3, r2
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d911      	bls.n	8007f6a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f46:	4b58      	ldr	r3, [pc, #352]	; (80080a8 <HAL_RCC_ClockConfig+0x184>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4393      	bics	r3, r2
 8007f4e:	0019      	movs	r1, r3
 8007f50:	4b55      	ldr	r3, [pc, #340]	; (80080a8 <HAL_RCC_ClockConfig+0x184>)
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f58:	4b53      	ldr	r3, [pc, #332]	; (80080a8 <HAL_RCC_ClockConfig+0x184>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	4013      	ands	r3, r2
 8007f60:	683a      	ldr	r2, [r7, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d001      	beq.n	8007f6a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e09a      	b.n	80080a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2202      	movs	r2, #2
 8007f70:	4013      	ands	r3, r2
 8007f72:	d015      	beq.n	8007fa0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2204      	movs	r2, #4
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	d006      	beq.n	8007f8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8007f7e:	4b4b      	ldr	r3, [pc, #300]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8007f80:	685a      	ldr	r2, [r3, #4]
 8007f82:	4b4a      	ldr	r3, [pc, #296]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8007f84:	21e0      	movs	r1, #224	; 0xe0
 8007f86:	00c9      	lsls	r1, r1, #3
 8007f88:	430a      	orrs	r2, r1
 8007f8a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f8c:	4b47      	ldr	r3, [pc, #284]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	22f0      	movs	r2, #240	; 0xf0
 8007f92:	4393      	bics	r3, r2
 8007f94:	0019      	movs	r1, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	689a      	ldr	r2, [r3, #8]
 8007f9a:	4b44      	ldr	r3, [pc, #272]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	d040      	beq.n	800802c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d107      	bne.n	8007fc2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fb2:	4b3e      	ldr	r3, [pc, #248]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	2380      	movs	r3, #128	; 0x80
 8007fb8:	029b      	lsls	r3, r3, #10
 8007fba:	4013      	ands	r3, r2
 8007fbc:	d114      	bne.n	8007fe8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e06e      	b.n	80080a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d107      	bne.n	8007fda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fca:	4b38      	ldr	r3, [pc, #224]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	2380      	movs	r3, #128	; 0x80
 8007fd0:	049b      	lsls	r3, r3, #18
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	d108      	bne.n	8007fe8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e062      	b.n	80080a0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fda:	4b34      	ldr	r3, [pc, #208]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	4013      	ands	r3, r2
 8007fe2:	d101      	bne.n	8007fe8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e05b      	b.n	80080a0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fe8:	4b30      	ldr	r3, [pc, #192]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	2203      	movs	r2, #3
 8007fee:	4393      	bics	r3, r2
 8007ff0:	0019      	movs	r1, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	4b2d      	ldr	r3, [pc, #180]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ffc:	f7fe fcc2 	bl	8006984 <HAL_GetTick>
 8008000:	0003      	movs	r3, r0
 8008002:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008004:	e009      	b.n	800801a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008006:	f7fe fcbd 	bl	8006984 <HAL_GetTick>
 800800a:	0002      	movs	r2, r0
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	4a27      	ldr	r2, [pc, #156]	; (80080b0 <HAL_RCC_ClockConfig+0x18c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d901      	bls.n	800801a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e042      	b.n	80080a0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800801a:	4b24      	ldr	r3, [pc, #144]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	220c      	movs	r2, #12
 8008020:	401a      	ands	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	429a      	cmp	r2, r3
 800802a:	d1ec      	bne.n	8008006 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800802c:	4b1e      	ldr	r3, [pc, #120]	; (80080a8 <HAL_RCC_ClockConfig+0x184>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2201      	movs	r2, #1
 8008032:	4013      	ands	r3, r2
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d211      	bcs.n	800805e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800803a:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <HAL_RCC_ClockConfig+0x184>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2201      	movs	r2, #1
 8008040:	4393      	bics	r3, r2
 8008042:	0019      	movs	r1, r3
 8008044:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <HAL_RCC_ClockConfig+0x184>)
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800804c:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <HAL_RCC_ClockConfig+0x184>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2201      	movs	r2, #1
 8008052:	4013      	ands	r3, r2
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d001      	beq.n	800805e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e020      	b.n	80080a0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2204      	movs	r2, #4
 8008064:	4013      	ands	r3, r2
 8008066:	d009      	beq.n	800807c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008068:	4b10      	ldr	r3, [pc, #64]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	4a11      	ldr	r2, [pc, #68]	; (80080b4 <HAL_RCC_ClockConfig+0x190>)
 800806e:	4013      	ands	r3, r2
 8008070:	0019      	movs	r1, r3
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8008078:	430a      	orrs	r2, r1
 800807a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800807c:	f000 f820 	bl	80080c0 <HAL_RCC_GetSysClockFreq>
 8008080:	0001      	movs	r1, r0
 8008082:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <HAL_RCC_ClockConfig+0x188>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	091b      	lsrs	r3, r3, #4
 8008088:	220f      	movs	r2, #15
 800808a:	4013      	ands	r3, r2
 800808c:	4a0a      	ldr	r2, [pc, #40]	; (80080b8 <HAL_RCC_ClockConfig+0x194>)
 800808e:	5cd3      	ldrb	r3, [r2, r3]
 8008090:	000a      	movs	r2, r1
 8008092:	40da      	lsrs	r2, r3
 8008094:	4b09      	ldr	r3, [pc, #36]	; (80080bc <HAL_RCC_ClockConfig+0x198>)
 8008096:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008098:	2003      	movs	r0, #3
 800809a:	f7fe fc2d 	bl	80068f8 <HAL_InitTick>
  
  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	0018      	movs	r0, r3
 80080a2:	46bd      	mov	sp, r7
 80080a4:	b004      	add	sp, #16
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	40022000 	.word	0x40022000
 80080ac:	40021000 	.word	0x40021000
 80080b0:	00001388 	.word	0x00001388
 80080b4:	fffff8ff 	.word	0xfffff8ff
 80080b8:	0800b368 	.word	0x0800b368
 80080bc:	20000040 	.word	0x20000040

080080c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	2300      	movs	r3, #0
 80080cc:	60bb      	str	r3, [r7, #8]
 80080ce:	2300      	movs	r3, #0
 80080d0:	617b      	str	r3, [r7, #20]
 80080d2:	2300      	movs	r3, #0
 80080d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80080da:	4b21      	ldr	r3, [pc, #132]	; (8008160 <HAL_RCC_GetSysClockFreq+0xa0>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	220c      	movs	r2, #12
 80080e4:	4013      	ands	r3, r2
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d002      	beq.n	80080f0 <HAL_RCC_GetSysClockFreq+0x30>
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	d003      	beq.n	80080f6 <HAL_RCC_GetSysClockFreq+0x36>
 80080ee:	e02e      	b.n	800814e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80080f0:	4b1c      	ldr	r3, [pc, #112]	; (8008164 <HAL_RCC_GetSysClockFreq+0xa4>)
 80080f2:	613b      	str	r3, [r7, #16]
      break;
 80080f4:	e02e      	b.n	8008154 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	0c9b      	lsrs	r3, r3, #18
 80080fa:	220f      	movs	r2, #15
 80080fc:	4013      	ands	r3, r2
 80080fe:	4a1a      	ldr	r2, [pc, #104]	; (8008168 <HAL_RCC_GetSysClockFreq+0xa8>)
 8008100:	5cd3      	ldrb	r3, [r2, r3]
 8008102:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8008104:	4b16      	ldr	r3, [pc, #88]	; (8008160 <HAL_RCC_GetSysClockFreq+0xa0>)
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	220f      	movs	r2, #15
 800810a:	4013      	ands	r3, r2
 800810c:	4a17      	ldr	r2, [pc, #92]	; (800816c <HAL_RCC_GetSysClockFreq+0xac>)
 800810e:	5cd3      	ldrb	r3, [r2, r3]
 8008110:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	23c0      	movs	r3, #192	; 0xc0
 8008116:	025b      	lsls	r3, r3, #9
 8008118:	401a      	ands	r2, r3
 800811a:	2380      	movs	r3, #128	; 0x80
 800811c:	025b      	lsls	r3, r3, #9
 800811e:	429a      	cmp	r2, r3
 8008120:	d109      	bne.n	8008136 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008122:	68b9      	ldr	r1, [r7, #8]
 8008124:	480f      	ldr	r0, [pc, #60]	; (8008164 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008126:	f7f7 ffed 	bl	8000104 <__udivsi3>
 800812a:	0003      	movs	r3, r0
 800812c:	001a      	movs	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4353      	muls	r3, r2
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e008      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008136:	68b9      	ldr	r1, [r7, #8]
 8008138:	480a      	ldr	r0, [pc, #40]	; (8008164 <HAL_RCC_GetSysClockFreq+0xa4>)
 800813a:	f7f7 ffe3 	bl	8000104 <__udivsi3>
 800813e:	0003      	movs	r3, r0
 8008140:	001a      	movs	r2, r3
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4353      	muls	r3, r2
 8008146:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	613b      	str	r3, [r7, #16]
      break;
 800814c:	e002      	b.n	8008154 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <HAL_RCC_GetSysClockFreq+0xa4>)
 8008150:	613b      	str	r3, [r7, #16]
      break;
 8008152:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008154:	693b      	ldr	r3, [r7, #16]
}
 8008156:	0018      	movs	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	b006      	add	sp, #24
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			; (mov r8, r8)
 8008160:	40021000 	.word	0x40021000
 8008164:	007a1200 	.word	0x007a1200
 8008168:	0800b378 	.word	0x0800b378
 800816c:	0800b388 	.word	0x0800b388

08008170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e0a8      	b.n	80082d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	2b00      	cmp	r3, #0
 8008188:	d109      	bne.n	800819e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	2382      	movs	r3, #130	; 0x82
 8008190:	005b      	lsls	r3, r3, #1
 8008192:	429a      	cmp	r2, r3
 8008194:	d009      	beq.n	80081aa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	61da      	str	r2, [r3, #28]
 800819c:	e005      	b.n	80081aa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	225d      	movs	r2, #93	; 0x5d
 80081b4:	5c9b      	ldrb	r3, [r3, r2]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d107      	bne.n	80081cc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	225c      	movs	r2, #92	; 0x5c
 80081c0:	2100      	movs	r1, #0
 80081c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	0018      	movs	r0, r3
 80081c8:	f7fe f818 	bl	80061fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	225d      	movs	r2, #93	; 0x5d
 80081d0:	2102      	movs	r1, #2
 80081d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2140      	movs	r1, #64	; 0x40
 80081e0:	438a      	bics	r2, r1
 80081e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	23e0      	movs	r3, #224	; 0xe0
 80081ea:	00db      	lsls	r3, r3, #3
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d902      	bls.n	80081f6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80081f0:	2300      	movs	r3, #0
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	e002      	b.n	80081fc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80081f6:	2380      	movs	r3, #128	; 0x80
 80081f8:	015b      	lsls	r3, r3, #5
 80081fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	68da      	ldr	r2, [r3, #12]
 8008200:	23f0      	movs	r3, #240	; 0xf0
 8008202:	011b      	lsls	r3, r3, #4
 8008204:	429a      	cmp	r2, r3
 8008206:	d008      	beq.n	800821a <HAL_SPI_Init+0xaa>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68da      	ldr	r2, [r3, #12]
 800820c:	23e0      	movs	r3, #224	; 0xe0
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	429a      	cmp	r2, r3
 8008212:	d002      	beq.n	800821a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	685a      	ldr	r2, [r3, #4]
 800821e:	2382      	movs	r3, #130	; 0x82
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	401a      	ands	r2, r3
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6899      	ldr	r1, [r3, #8]
 8008228:	2384      	movs	r3, #132	; 0x84
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	400b      	ands	r3, r1
 800822e:	431a      	orrs	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2102      	movs	r1, #2
 8008236:	400b      	ands	r3, r1
 8008238:	431a      	orrs	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	2101      	movs	r1, #1
 8008240:	400b      	ands	r3, r1
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6999      	ldr	r1, [r3, #24]
 8008248:	2380      	movs	r3, #128	; 0x80
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	400b      	ands	r3, r1
 800824e:	431a      	orrs	r2, r3
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	2138      	movs	r1, #56	; 0x38
 8008256:	400b      	ands	r3, r1
 8008258:	431a      	orrs	r2, r3
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6a1b      	ldr	r3, [r3, #32]
 800825e:	2180      	movs	r1, #128	; 0x80
 8008260:	400b      	ands	r3, r1
 8008262:	431a      	orrs	r2, r3
 8008264:	0011      	movs	r1, r2
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800826a:	2380      	movs	r3, #128	; 0x80
 800826c:	019b      	lsls	r3, r3, #6
 800826e:	401a      	ands	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	430a      	orrs	r2, r1
 8008276:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	0c1b      	lsrs	r3, r3, #16
 800827e:	2204      	movs	r2, #4
 8008280:	401a      	ands	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008286:	2110      	movs	r1, #16
 8008288:	400b      	ands	r3, r1
 800828a:	431a      	orrs	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008290:	2108      	movs	r1, #8
 8008292:	400b      	ands	r3, r1
 8008294:	431a      	orrs	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68d9      	ldr	r1, [r3, #12]
 800829a:	23f0      	movs	r3, #240	; 0xf0
 800829c:	011b      	lsls	r3, r3, #4
 800829e:	400b      	ands	r3, r1
 80082a0:	431a      	orrs	r2, r3
 80082a2:	0011      	movs	r1, r2
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	2380      	movs	r3, #128	; 0x80
 80082a8:	015b      	lsls	r3, r3, #5
 80082aa:	401a      	ands	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	69da      	ldr	r2, [r3, #28]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4907      	ldr	r1, [pc, #28]	; (80082dc <HAL_SPI_Init+0x16c>)
 80082c0:	400a      	ands	r2, r1
 80082c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	225d      	movs	r2, #93	; 0x5d
 80082ce:	2101      	movs	r1, #1
 80082d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	0018      	movs	r0, r3
 80082d6:	46bd      	mov	sp, r7
 80082d8:	b004      	add	sp, #16
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	fffff7ff 	.word	0xfffff7ff

080082e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	603b      	str	r3, [r7, #0]
 80082ec:	1dbb      	adds	r3, r7, #6
 80082ee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80082f0:	231f      	movs	r3, #31
 80082f2:	18fb      	adds	r3, r7, r3
 80082f4:	2200      	movs	r2, #0
 80082f6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	225c      	movs	r2, #92	; 0x5c
 80082fc:	5c9b      	ldrb	r3, [r3, r2]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d101      	bne.n	8008306 <HAL_SPI_Transmit+0x26>
 8008302:	2302      	movs	r3, #2
 8008304:	e147      	b.n	8008596 <HAL_SPI_Transmit+0x2b6>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	225c      	movs	r2, #92	; 0x5c
 800830a:	2101      	movs	r1, #1
 800830c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800830e:	f7fe fb39 	bl	8006984 <HAL_GetTick>
 8008312:	0003      	movs	r3, r0
 8008314:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008316:	2316      	movs	r3, #22
 8008318:	18fb      	adds	r3, r7, r3
 800831a:	1dba      	adds	r2, r7, #6
 800831c:	8812      	ldrh	r2, [r2, #0]
 800831e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	225d      	movs	r2, #93	; 0x5d
 8008324:	5c9b      	ldrb	r3, [r3, r2]
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b01      	cmp	r3, #1
 800832a:	d004      	beq.n	8008336 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800832c:	231f      	movs	r3, #31
 800832e:	18fb      	adds	r3, r7, r3
 8008330:	2202      	movs	r2, #2
 8008332:	701a      	strb	r2, [r3, #0]
    goto error;
 8008334:	e128      	b.n	8008588 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <HAL_SPI_Transmit+0x64>
 800833c:	1dbb      	adds	r3, r7, #6
 800833e:	881b      	ldrh	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8008344:	231f      	movs	r3, #31
 8008346:	18fb      	adds	r3, r7, r3
 8008348:	2201      	movs	r2, #1
 800834a:	701a      	strb	r2, [r3, #0]
    goto error;
 800834c:	e11c      	b.n	8008588 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	225d      	movs	r2, #93	; 0x5d
 8008352:	2103      	movs	r1, #3
 8008354:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	1dba      	adds	r2, r7, #6
 8008366:	8812      	ldrh	r2, [r2, #0]
 8008368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	1dba      	adds	r2, r7, #6
 800836e:	8812      	ldrh	r2, [r2, #0]
 8008370:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2244      	movs	r2, #68	; 0x44
 800837c:	2100      	movs	r1, #0
 800837e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2246      	movs	r2, #70	; 0x46
 8008384:	2100      	movs	r1, #0
 8008386:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2200      	movs	r2, #0
 8008392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	2380      	movs	r3, #128	; 0x80
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	429a      	cmp	r2, r3
 800839e:	d110      	bne.n	80083c2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2140      	movs	r1, #64	; 0x40
 80083ac:	438a      	bics	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	2180      	movs	r1, #128	; 0x80
 80083bc:	01c9      	lsls	r1, r1, #7
 80083be:	430a      	orrs	r2, r1
 80083c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2240      	movs	r2, #64	; 0x40
 80083ca:	4013      	ands	r3, r2
 80083cc:	2b40      	cmp	r3, #64	; 0x40
 80083ce:	d007      	beq.n	80083e0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2140      	movs	r1, #64	; 0x40
 80083dc:	430a      	orrs	r2, r1
 80083de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	68da      	ldr	r2, [r3, #12]
 80083e4:	23e0      	movs	r3, #224	; 0xe0
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d952      	bls.n	8008492 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d004      	beq.n	80083fe <HAL_SPI_Transmit+0x11e>
 80083f4:	2316      	movs	r3, #22
 80083f6:	18fb      	adds	r3, r7, r3
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d143      	bne.n	8008486 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008402:	881a      	ldrh	r2, [r3, #0]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840e:	1c9a      	adds	r2, r3, #2
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008418:	b29b      	uxth	r3, r3
 800841a:	3b01      	subs	r3, #1
 800841c:	b29a      	uxth	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008422:	e030      	b.n	8008486 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	2202      	movs	r2, #2
 800842c:	4013      	ands	r3, r2
 800842e:	2b02      	cmp	r3, #2
 8008430:	d112      	bne.n	8008458 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008436:	881a      	ldrh	r2, [r3, #0]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008442:	1c9a      	adds	r2, r3, #2
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800844c:	b29b      	uxth	r3, r3
 800844e:	3b01      	subs	r3, #1
 8008450:	b29a      	uxth	r2, r3
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008456:	e016      	b.n	8008486 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008458:	f7fe fa94 	bl	8006984 <HAL_GetTick>
 800845c:	0002      	movs	r2, r0
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	429a      	cmp	r2, r3
 8008466:	d802      	bhi.n	800846e <HAL_SPI_Transmit+0x18e>
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	3301      	adds	r3, #1
 800846c:	d102      	bne.n	8008474 <HAL_SPI_Transmit+0x194>
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d108      	bne.n	8008486 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8008474:	231f      	movs	r3, #31
 8008476:	18fb      	adds	r3, r7, r3
 8008478:	2203      	movs	r2, #3
 800847a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	225d      	movs	r2, #93	; 0x5d
 8008480:	2101      	movs	r1, #1
 8008482:	5499      	strb	r1, [r3, r2]
          goto error;
 8008484:	e080      	b.n	8008588 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800848a:	b29b      	uxth	r3, r3
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1c9      	bne.n	8008424 <HAL_SPI_Transmit+0x144>
 8008490:	e053      	b.n	800853a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d004      	beq.n	80084a4 <HAL_SPI_Transmit+0x1c4>
 800849a:	2316      	movs	r3, #22
 800849c:	18fb      	adds	r3, r7, r3
 800849e:	881b      	ldrh	r3, [r3, #0]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d145      	bne.n	8008530 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	7812      	ldrb	r2, [r2, #0]
 80084b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80084ca:	e031      	b.n	8008530 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	2202      	movs	r2, #2
 80084d4:	4013      	ands	r3, r2
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d113      	bne.n	8008502 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	330c      	adds	r3, #12
 80084e4:	7812      	ldrb	r2, [r2, #0]
 80084e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008500:	e016      	b.n	8008530 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008502:	f7fe fa3f 	bl	8006984 <HAL_GetTick>
 8008506:	0002      	movs	r2, r0
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d802      	bhi.n	8008518 <HAL_SPI_Transmit+0x238>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	3301      	adds	r3, #1
 8008516:	d102      	bne.n	800851e <HAL_SPI_Transmit+0x23e>
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d108      	bne.n	8008530 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 800851e:	231f      	movs	r3, #31
 8008520:	18fb      	adds	r3, r7, r3
 8008522:	2203      	movs	r2, #3
 8008524:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	225d      	movs	r2, #93	; 0x5d
 800852a:	2101      	movs	r1, #1
 800852c:	5499      	strb	r1, [r3, r2]
          goto error;
 800852e:	e02b      	b.n	8008588 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008534:	b29b      	uxth	r3, r3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1c8      	bne.n	80084cc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	0018      	movs	r0, r3
 8008542:	f000 f95d 	bl	8008800 <SPI_EndRxTxTransaction>
 8008546:	1e03      	subs	r3, r0, #0
 8008548:	d002      	beq.n	8008550 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2220      	movs	r2, #32
 800854e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10a      	bne.n	800856e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008558:	2300      	movs	r3, #0
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008572:	2b00      	cmp	r3, #0
 8008574:	d004      	beq.n	8008580 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8008576:	231f      	movs	r3, #31
 8008578:	18fb      	adds	r3, r7, r3
 800857a:	2201      	movs	r2, #1
 800857c:	701a      	strb	r2, [r3, #0]
 800857e:	e003      	b.n	8008588 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	225d      	movs	r2, #93	; 0x5d
 8008584:	2101      	movs	r1, #1
 8008586:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	225c      	movs	r2, #92	; 0x5c
 800858c:	2100      	movs	r1, #0
 800858e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8008590:	231f      	movs	r3, #31
 8008592:	18fb      	adds	r3, r7, r3
 8008594:	781b      	ldrb	r3, [r3, #0]
}
 8008596:	0018      	movs	r0, r3
 8008598:	46bd      	mov	sp, r7
 800859a:	b008      	add	sp, #32
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	603b      	str	r3, [r7, #0]
 80085ac:	1dfb      	adds	r3, r7, #7
 80085ae:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80085b0:	f7fe f9e8 	bl	8006984 <HAL_GetTick>
 80085b4:	0002      	movs	r2, r0
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	1a9b      	subs	r3, r3, r2
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	18d3      	adds	r3, r2, r3
 80085be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80085c0:	f7fe f9e0 	bl	8006984 <HAL_GetTick>
 80085c4:	0003      	movs	r3, r0
 80085c6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80085c8:	4b3a      	ldr	r3, [pc, #232]	; (80086b4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	015b      	lsls	r3, r3, #5
 80085ce:	0d1b      	lsrs	r3, r3, #20
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	4353      	muls	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085d6:	e058      	b.n	800868a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	3301      	adds	r3, #1
 80085dc:	d055      	beq.n	800868a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80085de:	f7fe f9d1 	bl	8006984 <HAL_GetTick>
 80085e2:	0002      	movs	r2, r0
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	1ad3      	subs	r3, r2, r3
 80085e8:	69fa      	ldr	r2, [r7, #28]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d902      	bls.n	80085f4 <SPI_WaitFlagStateUntilTimeout+0x54>
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d142      	bne.n	800867a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	21e0      	movs	r1, #224	; 0xe0
 8008600:	438a      	bics	r2, r1
 8008602:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	2382      	movs	r3, #130	; 0x82
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	429a      	cmp	r2, r3
 800860e:	d113      	bne.n	8008638 <SPI_WaitFlagStateUntilTimeout+0x98>
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	2380      	movs	r3, #128	; 0x80
 8008616:	021b      	lsls	r3, r3, #8
 8008618:	429a      	cmp	r2, r3
 800861a:	d005      	beq.n	8008628 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	689a      	ldr	r2, [r3, #8]
 8008620:	2380      	movs	r3, #128	; 0x80
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	429a      	cmp	r2, r3
 8008626:	d107      	bne.n	8008638 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2140      	movs	r1, #64	; 0x40
 8008634:	438a      	bics	r2, r1
 8008636:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800863c:	2380      	movs	r3, #128	; 0x80
 800863e:	019b      	lsls	r3, r3, #6
 8008640:	429a      	cmp	r2, r3
 8008642:	d110      	bne.n	8008666 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	491a      	ldr	r1, [pc, #104]	; (80086b8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8008650:	400a      	ands	r2, r1
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2180      	movs	r1, #128	; 0x80
 8008660:	0189      	lsls	r1, r1, #6
 8008662:	430a      	orrs	r2, r1
 8008664:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	225d      	movs	r2, #93	; 0x5d
 800866a:	2101      	movs	r1, #1
 800866c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	225c      	movs	r2, #92	; 0x5c
 8008672:	2100      	movs	r1, #0
 8008674:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e017      	b.n	80086aa <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8008680:	2300      	movs	r3, #0
 8008682:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	3b01      	subs	r3, #1
 8008688:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	4013      	ands	r3, r2
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	425a      	negs	r2, r3
 800869a:	4153      	adcs	r3, r2
 800869c:	b2db      	uxtb	r3, r3
 800869e:	001a      	movs	r2, r3
 80086a0:	1dfb      	adds	r3, r7, #7
 80086a2:	781b      	ldrb	r3, [r3, #0]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d197      	bne.n	80085d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	0018      	movs	r0, r3
 80086ac:	46bd      	mov	sp, r7
 80086ae:	b008      	add	sp, #32
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	20000040 	.word	0x20000040
 80086b8:	ffffdfff 	.word	0xffffdfff

080086bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b08a      	sub	sp, #40	; 0x28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80086ca:	2317      	movs	r3, #23
 80086cc:	18fb      	adds	r3, r7, r3
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80086d2:	f7fe f957 	bl	8006984 <HAL_GetTick>
 80086d6:	0002      	movs	r2, r0
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	1a9b      	subs	r3, r3, r2
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	18d3      	adds	r3, r2, r3
 80086e0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80086e2:	f7fe f94f 	bl	8006984 <HAL_GetTick>
 80086e6:	0003      	movs	r3, r0
 80086e8:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	330c      	adds	r3, #12
 80086f0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80086f2:	4b41      	ldr	r3, [pc, #260]	; (80087f8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80086f4:	681a      	ldr	r2, [r3, #0]
 80086f6:	0013      	movs	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	189b      	adds	r3, r3, r2
 80086fc:	00da      	lsls	r2, r3, #3
 80086fe:	1ad3      	subs	r3, r2, r3
 8008700:	0d1b      	lsrs	r3, r3, #20
 8008702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008704:	4353      	muls	r3, r2
 8008706:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008708:	e068      	b.n	80087dc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	23c0      	movs	r3, #192	; 0xc0
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	429a      	cmp	r2, r3
 8008712:	d10a      	bne.n	800872a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d107      	bne.n	800872a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	b2da      	uxtb	r2, r3
 8008720:	2117      	movs	r1, #23
 8008722:	187b      	adds	r3, r7, r1
 8008724:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008726:	187b      	adds	r3, r7, r1
 8008728:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	3301      	adds	r3, #1
 800872e:	d055      	beq.n	80087dc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008730:	f7fe f928 	bl	8006984 <HAL_GetTick>
 8008734:	0002      	movs	r2, r0
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800873c:	429a      	cmp	r2, r3
 800873e:	d902      	bls.n	8008746 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	2b00      	cmp	r3, #0
 8008744:	d142      	bne.n	80087cc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	21e0      	movs	r1, #224	; 0xe0
 8008752:	438a      	bics	r2, r1
 8008754:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	685a      	ldr	r2, [r3, #4]
 800875a:	2382      	movs	r3, #130	; 0x82
 800875c:	005b      	lsls	r3, r3, #1
 800875e:	429a      	cmp	r2, r3
 8008760:	d113      	bne.n	800878a <SPI_WaitFifoStateUntilTimeout+0xce>
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	689a      	ldr	r2, [r3, #8]
 8008766:	2380      	movs	r3, #128	; 0x80
 8008768:	021b      	lsls	r3, r3, #8
 800876a:	429a      	cmp	r2, r3
 800876c:	d005      	beq.n	800877a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	2380      	movs	r3, #128	; 0x80
 8008774:	00db      	lsls	r3, r3, #3
 8008776:	429a      	cmp	r2, r3
 8008778:	d107      	bne.n	800878a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2140      	movs	r1, #64	; 0x40
 8008786:	438a      	bics	r2, r1
 8008788:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800878e:	2380      	movs	r3, #128	; 0x80
 8008790:	019b      	lsls	r3, r3, #6
 8008792:	429a      	cmp	r2, r3
 8008794:	d110      	bne.n	80087b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4916      	ldr	r1, [pc, #88]	; (80087fc <SPI_WaitFifoStateUntilTimeout+0x140>)
 80087a2:	400a      	ands	r2, r1
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2180      	movs	r1, #128	; 0x80
 80087b2:	0189      	lsls	r1, r1, #6
 80087b4:	430a      	orrs	r2, r1
 80087b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	225d      	movs	r2, #93	; 0x5d
 80087bc:	2101      	movs	r1, #1
 80087be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	225c      	movs	r2, #92	; 0x5c
 80087c4:	2100      	movs	r1, #0
 80087c6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e010      	b.n	80087ee <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d101      	bne.n	80087d6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80087d2:	2300      	movs	r3, #0
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	3b01      	subs	r3, #1
 80087da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	4013      	ands	r3, r2
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d18e      	bne.n	800870a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80087ec:	2300      	movs	r3, #0
}
 80087ee:	0018      	movs	r0, r3
 80087f0:	46bd      	mov	sp, r7
 80087f2:	b00a      	add	sp, #40	; 0x28
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	46c0      	nop			; (mov r8, r8)
 80087f8:	20000040 	.word	0x20000040
 80087fc:	ffffdfff 	.word	0xffffdfff

08008800 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af02      	add	r7, sp, #8
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	23c0      	movs	r3, #192	; 0xc0
 8008810:	0159      	lsls	r1, r3, #5
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	9300      	str	r3, [sp, #0]
 8008818:	0013      	movs	r3, r2
 800881a:	2200      	movs	r2, #0
 800881c:	f7ff ff4e 	bl	80086bc <SPI_WaitFifoStateUntilTimeout>
 8008820:	1e03      	subs	r3, r0, #0
 8008822:	d007      	beq.n	8008834 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008828:	2220      	movs	r2, #32
 800882a:	431a      	orrs	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e027      	b.n	8008884 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	0013      	movs	r3, r2
 800883e:	2200      	movs	r2, #0
 8008840:	2180      	movs	r1, #128	; 0x80
 8008842:	f7ff fead 	bl	80085a0 <SPI_WaitFlagStateUntilTimeout>
 8008846:	1e03      	subs	r3, r0, #0
 8008848:	d007      	beq.n	800885a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884e:	2220      	movs	r2, #32
 8008850:	431a      	orrs	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e014      	b.n	8008884 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	23c0      	movs	r3, #192	; 0xc0
 800885e:	00d9      	lsls	r1, r3, #3
 8008860:	68f8      	ldr	r0, [r7, #12]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	0013      	movs	r3, r2
 8008868:	2200      	movs	r2, #0
 800886a:	f7ff ff27 	bl	80086bc <SPI_WaitFifoStateUntilTimeout>
 800886e:	1e03      	subs	r3, r0, #0
 8008870:	d007      	beq.n	8008882 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008876:	2220      	movs	r2, #32
 8008878:	431a      	orrs	r2, r3
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e000      	b.n	8008884 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	0018      	movs	r0, r3
 8008886:	46bd      	mov	sp, r7
 8008888:	b004      	add	sp, #16
 800888a:	bd80      	pop	{r7, pc}

0800888c <__libc_init_array>:
 800888c:	b570      	push	{r4, r5, r6, lr}
 800888e:	2600      	movs	r6, #0
 8008890:	4d0c      	ldr	r5, [pc, #48]	; (80088c4 <__libc_init_array+0x38>)
 8008892:	4c0d      	ldr	r4, [pc, #52]	; (80088c8 <__libc_init_array+0x3c>)
 8008894:	1b64      	subs	r4, r4, r5
 8008896:	10a4      	asrs	r4, r4, #2
 8008898:	42a6      	cmp	r6, r4
 800889a:	d109      	bne.n	80088b0 <__libc_init_array+0x24>
 800889c:	2600      	movs	r6, #0
 800889e:	f000 f821 	bl	80088e4 <_init>
 80088a2:	4d0a      	ldr	r5, [pc, #40]	; (80088cc <__libc_init_array+0x40>)
 80088a4:	4c0a      	ldr	r4, [pc, #40]	; (80088d0 <__libc_init_array+0x44>)
 80088a6:	1b64      	subs	r4, r4, r5
 80088a8:	10a4      	asrs	r4, r4, #2
 80088aa:	42a6      	cmp	r6, r4
 80088ac:	d105      	bne.n	80088ba <__libc_init_array+0x2e>
 80088ae:	bd70      	pop	{r4, r5, r6, pc}
 80088b0:	00b3      	lsls	r3, r6, #2
 80088b2:	58eb      	ldr	r3, [r5, r3]
 80088b4:	4798      	blx	r3
 80088b6:	3601      	adds	r6, #1
 80088b8:	e7ee      	b.n	8008898 <__libc_init_array+0xc>
 80088ba:	00b3      	lsls	r3, r6, #2
 80088bc:	58eb      	ldr	r3, [r5, r3]
 80088be:	4798      	blx	r3
 80088c0:	3601      	adds	r6, #1
 80088c2:	e7f2      	b.n	80088aa <__libc_init_array+0x1e>
 80088c4:	0800b398 	.word	0x0800b398
 80088c8:	0800b398 	.word	0x0800b398
 80088cc:	0800b398 	.word	0x0800b398
 80088d0:	0800b39c 	.word	0x0800b39c

080088d4 <memset>:
 80088d4:	0003      	movs	r3, r0
 80088d6:	1882      	adds	r2, r0, r2
 80088d8:	4293      	cmp	r3, r2
 80088da:	d100      	bne.n	80088de <memset+0xa>
 80088dc:	4770      	bx	lr
 80088de:	7019      	strb	r1, [r3, #0]
 80088e0:	3301      	adds	r3, #1
 80088e2:	e7f9      	b.n	80088d8 <memset+0x4>

080088e4 <_init>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	46c0      	nop			; (mov r8, r8)
 80088e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ea:	bc08      	pop	{r3}
 80088ec:	469e      	mov	lr, r3
 80088ee:	4770      	bx	lr

080088f0 <_fini>:
 80088f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088f2:	46c0      	nop			; (mov r8, r8)
 80088f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088f6:	bc08      	pop	{r3}
 80088f8:	469e      	mov	lr, r3
 80088fa:	4770      	bx	lr
