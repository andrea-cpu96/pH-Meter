
test-st7735.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e88  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a5c  08006f44  08006f44  00016f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099a0  080099a0  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  080099a0  080099a0  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099a0  080099a0  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099a0  080099a0  000199a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099a4  080099a4  000199a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  080099a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000034  080099dc  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  080099dc  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008aae  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b72  00000000  00000000  00028b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002a680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007a0  00000000  00000000  0002af20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001141f  00000000  00000000  0002b6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b16d  00000000  00000000  0003cadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00064f83  00000000  00000000  00047c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000acbcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e4  00000000  00000000  000acc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000034 	.word	0x20000034
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006f2c 	.word	0x08006f2c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000038 	.word	0x20000038
 8000100:	08006f2c 	.word	0x08006f2c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_cfrcmple>:
 80003f0:	4684      	mov	ip, r0
 80003f2:	0008      	movs	r0, r1
 80003f4:	4661      	mov	r1, ip
 80003f6:	e7ff      	b.n	80003f8 <__aeabi_cfcmpeq>

080003f8 <__aeabi_cfcmpeq>:
 80003f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fa:	f000 fb8b 	bl	8000b14 <__lesf2>
 80003fe:	2800      	cmp	r0, #0
 8000400:	d401      	bmi.n	8000406 <__aeabi_cfcmpeq+0xe>
 8000402:	2100      	movs	r1, #0
 8000404:	42c8      	cmn	r0, r1
 8000406:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000408 <__aeabi_fcmpeq>:
 8000408:	b510      	push	{r4, lr}
 800040a:	f000 fb17 	bl	8000a3c <__eqsf2>
 800040e:	4240      	negs	r0, r0
 8000410:	3001      	adds	r0, #1
 8000412:	bd10      	pop	{r4, pc}

08000414 <__aeabi_fcmplt>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fb7d 	bl	8000b14 <__lesf2>
 800041a:	2800      	cmp	r0, #0
 800041c:	db01      	blt.n	8000422 <__aeabi_fcmplt+0xe>
 800041e:	2000      	movs	r0, #0
 8000420:	bd10      	pop	{r4, pc}
 8000422:	2001      	movs	r0, #1
 8000424:	bd10      	pop	{r4, pc}
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_fcmple>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 fb73 	bl	8000b14 <__lesf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	dd01      	ble.n	8000436 <__aeabi_fcmple+0xe>
 8000432:	2000      	movs	r0, #0
 8000434:	bd10      	pop	{r4, pc}
 8000436:	2001      	movs	r0, #1
 8000438:	bd10      	pop	{r4, pc}
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_fcmpgt>:
 800043c:	b510      	push	{r4, lr}
 800043e:	f000 fb23 	bl	8000a88 <__gesf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	dc01      	bgt.n	800044a <__aeabi_fcmpgt+0xe>
 8000446:	2000      	movs	r0, #0
 8000448:	bd10      	pop	{r4, pc}
 800044a:	2001      	movs	r0, #1
 800044c:	bd10      	pop	{r4, pc}
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_fcmpge>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f000 fb19 	bl	8000a88 <__gesf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	da01      	bge.n	800045e <__aeabi_fcmpge+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_f2uiz>:
 8000464:	219e      	movs	r1, #158	; 0x9e
 8000466:	b510      	push	{r4, lr}
 8000468:	05c9      	lsls	r1, r1, #23
 800046a:	1c04      	adds	r4, r0, #0
 800046c:	f7ff fff0 	bl	8000450 <__aeabi_fcmpge>
 8000470:	2800      	cmp	r0, #0
 8000472:	d103      	bne.n	800047c <__aeabi_f2uiz+0x18>
 8000474:	1c20      	adds	r0, r4, #0
 8000476:	f000 fe65 	bl	8001144 <__aeabi_f2iz>
 800047a:	bd10      	pop	{r4, pc}
 800047c:	219e      	movs	r1, #158	; 0x9e
 800047e:	1c20      	adds	r0, r4, #0
 8000480:	05c9      	lsls	r1, r1, #23
 8000482:	f000 fcb1 	bl	8000de8 <__aeabi_fsub>
 8000486:	f000 fe5d 	bl	8001144 <__aeabi_f2iz>
 800048a:	2380      	movs	r3, #128	; 0x80
 800048c:	061b      	lsls	r3, r3, #24
 800048e:	469c      	mov	ip, r3
 8000490:	4460      	add	r0, ip
 8000492:	e7f2      	b.n	800047a <__aeabi_f2uiz+0x16>

08000494 <__aeabi_d2uiz>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	2200      	movs	r2, #0
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <__aeabi_d2uiz+0x38>)
 800049a:	0004      	movs	r4, r0
 800049c:	000d      	movs	r5, r1
 800049e:	f002 fc73 	bl	8002d88 <__aeabi_dcmpge>
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d104      	bne.n	80004b0 <__aeabi_d2uiz+0x1c>
 80004a6:	0020      	movs	r0, r4
 80004a8:	0029      	movs	r1, r5
 80004aa:	f002 fadd 	bl	8002a68 <__aeabi_d2iz>
 80004ae:	bd70      	pop	{r4, r5, r6, pc}
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <__aeabi_d2uiz+0x38>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	0020      	movs	r0, r4
 80004b6:	0029      	movs	r1, r5
 80004b8:	f001 ff44 	bl	8002344 <__aeabi_dsub>
 80004bc:	f002 fad4 	bl	8002a68 <__aeabi_d2iz>
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	061b      	lsls	r3, r3, #24
 80004c4:	469c      	mov	ip, r3
 80004c6:	4460      	add	r0, ip
 80004c8:	e7f1      	b.n	80004ae <__aeabi_d2uiz+0x1a>
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	41e00000 	.word	0x41e00000

080004d0 <__aeabi_fadd>:
 80004d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004d2:	46c6      	mov	lr, r8
 80004d4:	0243      	lsls	r3, r0, #9
 80004d6:	0a5b      	lsrs	r3, r3, #9
 80004d8:	024e      	lsls	r6, r1, #9
 80004da:	0045      	lsls	r5, r0, #1
 80004dc:	004f      	lsls	r7, r1, #1
 80004de:	00da      	lsls	r2, r3, #3
 80004e0:	0fc4      	lsrs	r4, r0, #31
 80004e2:	469c      	mov	ip, r3
 80004e4:	0a70      	lsrs	r0, r6, #9
 80004e6:	4690      	mov	r8, r2
 80004e8:	b500      	push	{lr}
 80004ea:	0e2d      	lsrs	r5, r5, #24
 80004ec:	0e3f      	lsrs	r7, r7, #24
 80004ee:	0fc9      	lsrs	r1, r1, #31
 80004f0:	09b6      	lsrs	r6, r6, #6
 80004f2:	428c      	cmp	r4, r1
 80004f4:	d04b      	beq.n	800058e <__aeabi_fadd+0xbe>
 80004f6:	1bea      	subs	r2, r5, r7
 80004f8:	2a00      	cmp	r2, #0
 80004fa:	dd36      	ble.n	800056a <__aeabi_fadd+0x9a>
 80004fc:	2f00      	cmp	r7, #0
 80004fe:	d061      	beq.n	80005c4 <__aeabi_fadd+0xf4>
 8000500:	2dff      	cmp	r5, #255	; 0xff
 8000502:	d100      	bne.n	8000506 <__aeabi_fadd+0x36>
 8000504:	e0ad      	b.n	8000662 <__aeabi_fadd+0x192>
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	04db      	lsls	r3, r3, #19
 800050a:	431e      	orrs	r6, r3
 800050c:	2a1b      	cmp	r2, #27
 800050e:	dc00      	bgt.n	8000512 <__aeabi_fadd+0x42>
 8000510:	e0d3      	b.n	80006ba <__aeabi_fadd+0x1ea>
 8000512:	2001      	movs	r0, #1
 8000514:	4643      	mov	r3, r8
 8000516:	1a18      	subs	r0, r3, r0
 8000518:	0143      	lsls	r3, r0, #5
 800051a:	d400      	bmi.n	800051e <__aeabi_fadd+0x4e>
 800051c:	e08c      	b.n	8000638 <__aeabi_fadd+0x168>
 800051e:	0180      	lsls	r0, r0, #6
 8000520:	0987      	lsrs	r7, r0, #6
 8000522:	0038      	movs	r0, r7
 8000524:	f002 fc3a 	bl	8002d9c <__clzsi2>
 8000528:	3805      	subs	r0, #5
 800052a:	4087      	lsls	r7, r0
 800052c:	4285      	cmp	r5, r0
 800052e:	dc00      	bgt.n	8000532 <__aeabi_fadd+0x62>
 8000530:	e0b6      	b.n	80006a0 <__aeabi_fadd+0x1d0>
 8000532:	1a2d      	subs	r5, r5, r0
 8000534:	48b3      	ldr	r0, [pc, #716]	; (8000804 <__aeabi_fadd+0x334>)
 8000536:	4038      	ands	r0, r7
 8000538:	0743      	lsls	r3, r0, #29
 800053a:	d004      	beq.n	8000546 <__aeabi_fadd+0x76>
 800053c:	230f      	movs	r3, #15
 800053e:	4003      	ands	r3, r0
 8000540:	2b04      	cmp	r3, #4
 8000542:	d000      	beq.n	8000546 <__aeabi_fadd+0x76>
 8000544:	3004      	adds	r0, #4
 8000546:	0143      	lsls	r3, r0, #5
 8000548:	d400      	bmi.n	800054c <__aeabi_fadd+0x7c>
 800054a:	e078      	b.n	800063e <__aeabi_fadd+0x16e>
 800054c:	1c6a      	adds	r2, r5, #1
 800054e:	2dfe      	cmp	r5, #254	; 0xfe
 8000550:	d065      	beq.n	800061e <__aeabi_fadd+0x14e>
 8000552:	0180      	lsls	r0, r0, #6
 8000554:	0a43      	lsrs	r3, r0, #9
 8000556:	469c      	mov	ip, r3
 8000558:	b2d2      	uxtb	r2, r2
 800055a:	4663      	mov	r3, ip
 800055c:	05d0      	lsls	r0, r2, #23
 800055e:	4318      	orrs	r0, r3
 8000560:	07e4      	lsls	r4, r4, #31
 8000562:	4320      	orrs	r0, r4
 8000564:	bc80      	pop	{r7}
 8000566:	46b8      	mov	r8, r7
 8000568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056a:	2a00      	cmp	r2, #0
 800056c:	d035      	beq.n	80005da <__aeabi_fadd+0x10a>
 800056e:	1b7a      	subs	r2, r7, r5
 8000570:	2d00      	cmp	r5, #0
 8000572:	d000      	beq.n	8000576 <__aeabi_fadd+0xa6>
 8000574:	e0af      	b.n	80006d6 <__aeabi_fadd+0x206>
 8000576:	4643      	mov	r3, r8
 8000578:	2b00      	cmp	r3, #0
 800057a:	d100      	bne.n	800057e <__aeabi_fadd+0xae>
 800057c:	e0a7      	b.n	80006ce <__aeabi_fadd+0x1fe>
 800057e:	1e53      	subs	r3, r2, #1
 8000580:	2a01      	cmp	r2, #1
 8000582:	d100      	bne.n	8000586 <__aeabi_fadd+0xb6>
 8000584:	e12f      	b.n	80007e6 <__aeabi_fadd+0x316>
 8000586:	2aff      	cmp	r2, #255	; 0xff
 8000588:	d069      	beq.n	800065e <__aeabi_fadd+0x18e>
 800058a:	001a      	movs	r2, r3
 800058c:	e0aa      	b.n	80006e4 <__aeabi_fadd+0x214>
 800058e:	1be9      	subs	r1, r5, r7
 8000590:	2900      	cmp	r1, #0
 8000592:	dd70      	ble.n	8000676 <__aeabi_fadd+0x1a6>
 8000594:	2f00      	cmp	r7, #0
 8000596:	d037      	beq.n	8000608 <__aeabi_fadd+0x138>
 8000598:	2dff      	cmp	r5, #255	; 0xff
 800059a:	d062      	beq.n	8000662 <__aeabi_fadd+0x192>
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	04db      	lsls	r3, r3, #19
 80005a0:	431e      	orrs	r6, r3
 80005a2:	291b      	cmp	r1, #27
 80005a4:	dc00      	bgt.n	80005a8 <__aeabi_fadd+0xd8>
 80005a6:	e0b0      	b.n	800070a <__aeabi_fadd+0x23a>
 80005a8:	2001      	movs	r0, #1
 80005aa:	4440      	add	r0, r8
 80005ac:	0143      	lsls	r3, r0, #5
 80005ae:	d543      	bpl.n	8000638 <__aeabi_fadd+0x168>
 80005b0:	3501      	adds	r5, #1
 80005b2:	2dff      	cmp	r5, #255	; 0xff
 80005b4:	d033      	beq.n	800061e <__aeabi_fadd+0x14e>
 80005b6:	2301      	movs	r3, #1
 80005b8:	4a93      	ldr	r2, [pc, #588]	; (8000808 <__aeabi_fadd+0x338>)
 80005ba:	4003      	ands	r3, r0
 80005bc:	0840      	lsrs	r0, r0, #1
 80005be:	4010      	ands	r0, r2
 80005c0:	4318      	orrs	r0, r3
 80005c2:	e7b9      	b.n	8000538 <__aeabi_fadd+0x68>
 80005c4:	2e00      	cmp	r6, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0xfa>
 80005c8:	e083      	b.n	80006d2 <__aeabi_fadd+0x202>
 80005ca:	1e51      	subs	r1, r2, #1
 80005cc:	2a01      	cmp	r2, #1
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0x102>
 80005d0:	e0d8      	b.n	8000784 <__aeabi_fadd+0x2b4>
 80005d2:	2aff      	cmp	r2, #255	; 0xff
 80005d4:	d045      	beq.n	8000662 <__aeabi_fadd+0x192>
 80005d6:	000a      	movs	r2, r1
 80005d8:	e798      	b.n	800050c <__aeabi_fadd+0x3c>
 80005da:	27fe      	movs	r7, #254	; 0xfe
 80005dc:	1c6a      	adds	r2, r5, #1
 80005de:	4217      	tst	r7, r2
 80005e0:	d000      	beq.n	80005e4 <__aeabi_fadd+0x114>
 80005e2:	e086      	b.n	80006f2 <__aeabi_fadd+0x222>
 80005e4:	2d00      	cmp	r5, #0
 80005e6:	d000      	beq.n	80005ea <__aeabi_fadd+0x11a>
 80005e8:	e0b7      	b.n	800075a <__aeabi_fadd+0x28a>
 80005ea:	4643      	mov	r3, r8
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d100      	bne.n	80005f2 <__aeabi_fadd+0x122>
 80005f0:	e0f3      	b.n	80007da <__aeabi_fadd+0x30a>
 80005f2:	2200      	movs	r2, #0
 80005f4:	2e00      	cmp	r6, #0
 80005f6:	d0b0      	beq.n	800055a <__aeabi_fadd+0x8a>
 80005f8:	1b98      	subs	r0, r3, r6
 80005fa:	0143      	lsls	r3, r0, #5
 80005fc:	d400      	bmi.n	8000600 <__aeabi_fadd+0x130>
 80005fe:	e0fa      	b.n	80007f6 <__aeabi_fadd+0x326>
 8000600:	4643      	mov	r3, r8
 8000602:	000c      	movs	r4, r1
 8000604:	1af0      	subs	r0, r6, r3
 8000606:	e797      	b.n	8000538 <__aeabi_fadd+0x68>
 8000608:	2e00      	cmp	r6, #0
 800060a:	d100      	bne.n	800060e <__aeabi_fadd+0x13e>
 800060c:	e0c8      	b.n	80007a0 <__aeabi_fadd+0x2d0>
 800060e:	1e4a      	subs	r2, r1, #1
 8000610:	2901      	cmp	r1, #1
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x146>
 8000614:	e0ae      	b.n	8000774 <__aeabi_fadd+0x2a4>
 8000616:	29ff      	cmp	r1, #255	; 0xff
 8000618:	d023      	beq.n	8000662 <__aeabi_fadd+0x192>
 800061a:	0011      	movs	r1, r2
 800061c:	e7c1      	b.n	80005a2 <__aeabi_fadd+0xd2>
 800061e:	2300      	movs	r3, #0
 8000620:	22ff      	movs	r2, #255	; 0xff
 8000622:	469c      	mov	ip, r3
 8000624:	e799      	b.n	800055a <__aeabi_fadd+0x8a>
 8000626:	21fe      	movs	r1, #254	; 0xfe
 8000628:	1c6a      	adds	r2, r5, #1
 800062a:	4211      	tst	r1, r2
 800062c:	d077      	beq.n	800071e <__aeabi_fadd+0x24e>
 800062e:	2aff      	cmp	r2, #255	; 0xff
 8000630:	d0f5      	beq.n	800061e <__aeabi_fadd+0x14e>
 8000632:	0015      	movs	r5, r2
 8000634:	4446      	add	r6, r8
 8000636:	0870      	lsrs	r0, r6, #1
 8000638:	0743      	lsls	r3, r0, #29
 800063a:	d000      	beq.n	800063e <__aeabi_fadd+0x16e>
 800063c:	e77e      	b.n	800053c <__aeabi_fadd+0x6c>
 800063e:	08c3      	lsrs	r3, r0, #3
 8000640:	2dff      	cmp	r5, #255	; 0xff
 8000642:	d00e      	beq.n	8000662 <__aeabi_fadd+0x192>
 8000644:	025b      	lsls	r3, r3, #9
 8000646:	0a5b      	lsrs	r3, r3, #9
 8000648:	469c      	mov	ip, r3
 800064a:	b2ea      	uxtb	r2, r5
 800064c:	e785      	b.n	800055a <__aeabi_fadd+0x8a>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d007      	beq.n	8000662 <__aeabi_fadd+0x192>
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	03d2      	lsls	r2, r2, #15
 8000656:	4213      	tst	r3, r2
 8000658:	d003      	beq.n	8000662 <__aeabi_fadd+0x192>
 800065a:	4210      	tst	r0, r2
 800065c:	d101      	bne.n	8000662 <__aeabi_fadd+0x192>
 800065e:	000c      	movs	r4, r1
 8000660:	0003      	movs	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0db      	beq.n	800061e <__aeabi_fadd+0x14e>
 8000666:	2080      	movs	r0, #128	; 0x80
 8000668:	03c0      	lsls	r0, r0, #15
 800066a:	4318      	orrs	r0, r3
 800066c:	0240      	lsls	r0, r0, #9
 800066e:	0a43      	lsrs	r3, r0, #9
 8000670:	469c      	mov	ip, r3
 8000672:	22ff      	movs	r2, #255	; 0xff
 8000674:	e771      	b.n	800055a <__aeabi_fadd+0x8a>
 8000676:	2900      	cmp	r1, #0
 8000678:	d0d5      	beq.n	8000626 <__aeabi_fadd+0x156>
 800067a:	1b7a      	subs	r2, r7, r5
 800067c:	2d00      	cmp	r5, #0
 800067e:	d160      	bne.n	8000742 <__aeabi_fadd+0x272>
 8000680:	4643      	mov	r3, r8
 8000682:	2b00      	cmp	r3, #0
 8000684:	d024      	beq.n	80006d0 <__aeabi_fadd+0x200>
 8000686:	1e53      	subs	r3, r2, #1
 8000688:	2a01      	cmp	r2, #1
 800068a:	d073      	beq.n	8000774 <__aeabi_fadd+0x2a4>
 800068c:	2aff      	cmp	r2, #255	; 0xff
 800068e:	d0e7      	beq.n	8000660 <__aeabi_fadd+0x190>
 8000690:	001a      	movs	r2, r3
 8000692:	2a1b      	cmp	r2, #27
 8000694:	dc00      	bgt.n	8000698 <__aeabi_fadd+0x1c8>
 8000696:	e085      	b.n	80007a4 <__aeabi_fadd+0x2d4>
 8000698:	2001      	movs	r0, #1
 800069a:	003d      	movs	r5, r7
 800069c:	1980      	adds	r0, r0, r6
 800069e:	e785      	b.n	80005ac <__aeabi_fadd+0xdc>
 80006a0:	2320      	movs	r3, #32
 80006a2:	003a      	movs	r2, r7
 80006a4:	1b45      	subs	r5, r0, r5
 80006a6:	0038      	movs	r0, r7
 80006a8:	3501      	adds	r5, #1
 80006aa:	40ea      	lsrs	r2, r5
 80006ac:	1b5d      	subs	r5, r3, r5
 80006ae:	40a8      	lsls	r0, r5
 80006b0:	1e43      	subs	r3, r0, #1
 80006b2:	4198      	sbcs	r0, r3
 80006b4:	2500      	movs	r5, #0
 80006b6:	4310      	orrs	r0, r2
 80006b8:	e73e      	b.n	8000538 <__aeabi_fadd+0x68>
 80006ba:	2320      	movs	r3, #32
 80006bc:	0030      	movs	r0, r6
 80006be:	1a9b      	subs	r3, r3, r2
 80006c0:	0031      	movs	r1, r6
 80006c2:	4098      	lsls	r0, r3
 80006c4:	40d1      	lsrs	r1, r2
 80006c6:	1e43      	subs	r3, r0, #1
 80006c8:	4198      	sbcs	r0, r3
 80006ca:	4308      	orrs	r0, r1
 80006cc:	e722      	b.n	8000514 <__aeabi_fadd+0x44>
 80006ce:	000c      	movs	r4, r1
 80006d0:	0003      	movs	r3, r0
 80006d2:	0015      	movs	r5, r2
 80006d4:	e7b4      	b.n	8000640 <__aeabi_fadd+0x170>
 80006d6:	2fff      	cmp	r7, #255	; 0xff
 80006d8:	d0c1      	beq.n	800065e <__aeabi_fadd+0x18e>
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	4640      	mov	r0, r8
 80006de:	04db      	lsls	r3, r3, #19
 80006e0:	4318      	orrs	r0, r3
 80006e2:	4680      	mov	r8, r0
 80006e4:	2a1b      	cmp	r2, #27
 80006e6:	dd51      	ble.n	800078c <__aeabi_fadd+0x2bc>
 80006e8:	2001      	movs	r0, #1
 80006ea:	000c      	movs	r4, r1
 80006ec:	003d      	movs	r5, r7
 80006ee:	1a30      	subs	r0, r6, r0
 80006f0:	e712      	b.n	8000518 <__aeabi_fadd+0x48>
 80006f2:	4643      	mov	r3, r8
 80006f4:	1b9f      	subs	r7, r3, r6
 80006f6:	017b      	lsls	r3, r7, #5
 80006f8:	d42b      	bmi.n	8000752 <__aeabi_fadd+0x282>
 80006fa:	2f00      	cmp	r7, #0
 80006fc:	d000      	beq.n	8000700 <__aeabi_fadd+0x230>
 80006fe:	e710      	b.n	8000522 <__aeabi_fadd+0x52>
 8000700:	2300      	movs	r3, #0
 8000702:	2400      	movs	r4, #0
 8000704:	2200      	movs	r2, #0
 8000706:	469c      	mov	ip, r3
 8000708:	e727      	b.n	800055a <__aeabi_fadd+0x8a>
 800070a:	2320      	movs	r3, #32
 800070c:	0032      	movs	r2, r6
 800070e:	0030      	movs	r0, r6
 8000710:	40ca      	lsrs	r2, r1
 8000712:	1a59      	subs	r1, r3, r1
 8000714:	4088      	lsls	r0, r1
 8000716:	1e43      	subs	r3, r0, #1
 8000718:	4198      	sbcs	r0, r3
 800071a:	4310      	orrs	r0, r2
 800071c:	e745      	b.n	80005aa <__aeabi_fadd+0xda>
 800071e:	2d00      	cmp	r5, #0
 8000720:	d14a      	bne.n	80007b8 <__aeabi_fadd+0x2e8>
 8000722:	4643      	mov	r3, r8
 8000724:	2b00      	cmp	r3, #0
 8000726:	d063      	beq.n	80007f0 <__aeabi_fadd+0x320>
 8000728:	2200      	movs	r2, #0
 800072a:	2e00      	cmp	r6, #0
 800072c:	d100      	bne.n	8000730 <__aeabi_fadd+0x260>
 800072e:	e714      	b.n	800055a <__aeabi_fadd+0x8a>
 8000730:	0030      	movs	r0, r6
 8000732:	4440      	add	r0, r8
 8000734:	0143      	lsls	r3, r0, #5
 8000736:	d400      	bmi.n	800073a <__aeabi_fadd+0x26a>
 8000738:	e77e      	b.n	8000638 <__aeabi_fadd+0x168>
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <__aeabi_fadd+0x334>)
 800073c:	3501      	adds	r5, #1
 800073e:	4018      	ands	r0, r3
 8000740:	e77a      	b.n	8000638 <__aeabi_fadd+0x168>
 8000742:	2fff      	cmp	r7, #255	; 0xff
 8000744:	d08c      	beq.n	8000660 <__aeabi_fadd+0x190>
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	4641      	mov	r1, r8
 800074a:	04db      	lsls	r3, r3, #19
 800074c:	4319      	orrs	r1, r3
 800074e:	4688      	mov	r8, r1
 8000750:	e79f      	b.n	8000692 <__aeabi_fadd+0x1c2>
 8000752:	4643      	mov	r3, r8
 8000754:	000c      	movs	r4, r1
 8000756:	1af7      	subs	r7, r6, r3
 8000758:	e6e3      	b.n	8000522 <__aeabi_fadd+0x52>
 800075a:	4642      	mov	r2, r8
 800075c:	2a00      	cmp	r2, #0
 800075e:	d000      	beq.n	8000762 <__aeabi_fadd+0x292>
 8000760:	e775      	b.n	800064e <__aeabi_fadd+0x17e>
 8000762:	2e00      	cmp	r6, #0
 8000764:	d000      	beq.n	8000768 <__aeabi_fadd+0x298>
 8000766:	e77a      	b.n	800065e <__aeabi_fadd+0x18e>
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	03db      	lsls	r3, r3, #15
 800076c:	2400      	movs	r4, #0
 800076e:	469c      	mov	ip, r3
 8000770:	22ff      	movs	r2, #255	; 0xff
 8000772:	e6f2      	b.n	800055a <__aeabi_fadd+0x8a>
 8000774:	0030      	movs	r0, r6
 8000776:	4440      	add	r0, r8
 8000778:	2501      	movs	r5, #1
 800077a:	0143      	lsls	r3, r0, #5
 800077c:	d400      	bmi.n	8000780 <__aeabi_fadd+0x2b0>
 800077e:	e75b      	b.n	8000638 <__aeabi_fadd+0x168>
 8000780:	2502      	movs	r5, #2
 8000782:	e718      	b.n	80005b6 <__aeabi_fadd+0xe6>
 8000784:	4643      	mov	r3, r8
 8000786:	2501      	movs	r5, #1
 8000788:	1b98      	subs	r0, r3, r6
 800078a:	e6c5      	b.n	8000518 <__aeabi_fadd+0x48>
 800078c:	2320      	movs	r3, #32
 800078e:	4644      	mov	r4, r8
 8000790:	4640      	mov	r0, r8
 8000792:	40d4      	lsrs	r4, r2
 8000794:	1a9a      	subs	r2, r3, r2
 8000796:	4090      	lsls	r0, r2
 8000798:	1e43      	subs	r3, r0, #1
 800079a:	4198      	sbcs	r0, r3
 800079c:	4320      	orrs	r0, r4
 800079e:	e7a4      	b.n	80006ea <__aeabi_fadd+0x21a>
 80007a0:	000d      	movs	r5, r1
 80007a2:	e74d      	b.n	8000640 <__aeabi_fadd+0x170>
 80007a4:	2320      	movs	r3, #32
 80007a6:	4641      	mov	r1, r8
 80007a8:	4640      	mov	r0, r8
 80007aa:	40d1      	lsrs	r1, r2
 80007ac:	1a9a      	subs	r2, r3, r2
 80007ae:	4090      	lsls	r0, r2
 80007b0:	1e43      	subs	r3, r0, #1
 80007b2:	4198      	sbcs	r0, r3
 80007b4:	4308      	orrs	r0, r1
 80007b6:	e770      	b.n	800069a <__aeabi_fadd+0x1ca>
 80007b8:	4642      	mov	r2, r8
 80007ba:	2a00      	cmp	r2, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fadd+0x2f0>
 80007be:	e74f      	b.n	8000660 <__aeabi_fadd+0x190>
 80007c0:	2e00      	cmp	r6, #0
 80007c2:	d100      	bne.n	80007c6 <__aeabi_fadd+0x2f6>
 80007c4:	e74d      	b.n	8000662 <__aeabi_fadd+0x192>
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	03d2      	lsls	r2, r2, #15
 80007ca:	4213      	tst	r3, r2
 80007cc:	d100      	bne.n	80007d0 <__aeabi_fadd+0x300>
 80007ce:	e748      	b.n	8000662 <__aeabi_fadd+0x192>
 80007d0:	4210      	tst	r0, r2
 80007d2:	d000      	beq.n	80007d6 <__aeabi_fadd+0x306>
 80007d4:	e745      	b.n	8000662 <__aeabi_fadd+0x192>
 80007d6:	0003      	movs	r3, r0
 80007d8:	e743      	b.n	8000662 <__aeabi_fadd+0x192>
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d090      	beq.n	8000700 <__aeabi_fadd+0x230>
 80007de:	000c      	movs	r4, r1
 80007e0:	4684      	mov	ip, r0
 80007e2:	2200      	movs	r2, #0
 80007e4:	e6b9      	b.n	800055a <__aeabi_fadd+0x8a>
 80007e6:	4643      	mov	r3, r8
 80007e8:	000c      	movs	r4, r1
 80007ea:	1af0      	subs	r0, r6, r3
 80007ec:	3501      	adds	r5, #1
 80007ee:	e693      	b.n	8000518 <__aeabi_fadd+0x48>
 80007f0:	4684      	mov	ip, r0
 80007f2:	2200      	movs	r2, #0
 80007f4:	e6b1      	b.n	800055a <__aeabi_fadd+0x8a>
 80007f6:	2800      	cmp	r0, #0
 80007f8:	d000      	beq.n	80007fc <__aeabi_fadd+0x32c>
 80007fa:	e71d      	b.n	8000638 <__aeabi_fadd+0x168>
 80007fc:	2300      	movs	r3, #0
 80007fe:	2400      	movs	r4, #0
 8000800:	469c      	mov	ip, r3
 8000802:	e6aa      	b.n	800055a <__aeabi_fadd+0x8a>
 8000804:	fbffffff 	.word	0xfbffffff
 8000808:	7dffffff 	.word	0x7dffffff

0800080c <__aeabi_fdiv>:
 800080c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800080e:	464f      	mov	r7, r9
 8000810:	4646      	mov	r6, r8
 8000812:	46d6      	mov	lr, sl
 8000814:	0245      	lsls	r5, r0, #9
 8000816:	b5c0      	push	{r6, r7, lr}
 8000818:	0047      	lsls	r7, r0, #1
 800081a:	1c0c      	adds	r4, r1, #0
 800081c:	0a6d      	lsrs	r5, r5, #9
 800081e:	0e3f      	lsrs	r7, r7, #24
 8000820:	0fc6      	lsrs	r6, r0, #31
 8000822:	2f00      	cmp	r7, #0
 8000824:	d100      	bne.n	8000828 <__aeabi_fdiv+0x1c>
 8000826:	e070      	b.n	800090a <__aeabi_fdiv+0xfe>
 8000828:	2fff      	cmp	r7, #255	; 0xff
 800082a:	d100      	bne.n	800082e <__aeabi_fdiv+0x22>
 800082c:	e075      	b.n	800091a <__aeabi_fdiv+0x10e>
 800082e:	00eb      	lsls	r3, r5, #3
 8000830:	2580      	movs	r5, #128	; 0x80
 8000832:	04ed      	lsls	r5, r5, #19
 8000834:	431d      	orrs	r5, r3
 8000836:	2300      	movs	r3, #0
 8000838:	4699      	mov	r9, r3
 800083a:	469a      	mov	sl, r3
 800083c:	3f7f      	subs	r7, #127	; 0x7f
 800083e:	0260      	lsls	r0, r4, #9
 8000840:	0a43      	lsrs	r3, r0, #9
 8000842:	4698      	mov	r8, r3
 8000844:	0063      	lsls	r3, r4, #1
 8000846:	0e1b      	lsrs	r3, r3, #24
 8000848:	0fe4      	lsrs	r4, r4, #31
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04e      	beq.n	80008ec <__aeabi_fdiv+0xe0>
 800084e:	2bff      	cmp	r3, #255	; 0xff
 8000850:	d046      	beq.n	80008e0 <__aeabi_fdiv+0xd4>
 8000852:	4642      	mov	r2, r8
 8000854:	00d0      	lsls	r0, r2, #3
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	04d2      	lsls	r2, r2, #19
 800085a:	4302      	orrs	r2, r0
 800085c:	4690      	mov	r8, r2
 800085e:	2200      	movs	r2, #0
 8000860:	3b7f      	subs	r3, #127	; 0x7f
 8000862:	0031      	movs	r1, r6
 8000864:	1aff      	subs	r7, r7, r3
 8000866:	464b      	mov	r3, r9
 8000868:	4061      	eors	r1, r4
 800086a:	b2c9      	uxtb	r1, r1
 800086c:	4313      	orrs	r3, r2
 800086e:	2b0f      	cmp	r3, #15
 8000870:	d900      	bls.n	8000874 <__aeabi_fdiv+0x68>
 8000872:	e0b5      	b.n	80009e0 <__aeabi_fdiv+0x1d4>
 8000874:	486e      	ldr	r0, [pc, #440]	; (8000a30 <__aeabi_fdiv+0x224>)
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	58c3      	ldr	r3, [r0, r3]
 800087a:	469f      	mov	pc, r3
 800087c:	2300      	movs	r3, #0
 800087e:	4698      	mov	r8, r3
 8000880:	0026      	movs	r6, r4
 8000882:	4645      	mov	r5, r8
 8000884:	4692      	mov	sl, r2
 8000886:	4653      	mov	r3, sl
 8000888:	2b02      	cmp	r3, #2
 800088a:	d100      	bne.n	800088e <__aeabi_fdiv+0x82>
 800088c:	e089      	b.n	80009a2 <__aeabi_fdiv+0x196>
 800088e:	2b03      	cmp	r3, #3
 8000890:	d100      	bne.n	8000894 <__aeabi_fdiv+0x88>
 8000892:	e09e      	b.n	80009d2 <__aeabi_fdiv+0x1c6>
 8000894:	2b01      	cmp	r3, #1
 8000896:	d018      	beq.n	80008ca <__aeabi_fdiv+0xbe>
 8000898:	003b      	movs	r3, r7
 800089a:	337f      	adds	r3, #127	; 0x7f
 800089c:	2b00      	cmp	r3, #0
 800089e:	dd69      	ble.n	8000974 <__aeabi_fdiv+0x168>
 80008a0:	076a      	lsls	r2, r5, #29
 80008a2:	d004      	beq.n	80008ae <__aeabi_fdiv+0xa2>
 80008a4:	220f      	movs	r2, #15
 80008a6:	402a      	ands	r2, r5
 80008a8:	2a04      	cmp	r2, #4
 80008aa:	d000      	beq.n	80008ae <__aeabi_fdiv+0xa2>
 80008ac:	3504      	adds	r5, #4
 80008ae:	012a      	lsls	r2, r5, #4
 80008b0:	d503      	bpl.n	80008ba <__aeabi_fdiv+0xae>
 80008b2:	4b60      	ldr	r3, [pc, #384]	; (8000a34 <__aeabi_fdiv+0x228>)
 80008b4:	401d      	ands	r5, r3
 80008b6:	003b      	movs	r3, r7
 80008b8:	3380      	adds	r3, #128	; 0x80
 80008ba:	2bfe      	cmp	r3, #254	; 0xfe
 80008bc:	dd00      	ble.n	80008c0 <__aeabi_fdiv+0xb4>
 80008be:	e070      	b.n	80009a2 <__aeabi_fdiv+0x196>
 80008c0:	01ad      	lsls	r5, r5, #6
 80008c2:	0a6d      	lsrs	r5, r5, #9
 80008c4:	b2d8      	uxtb	r0, r3
 80008c6:	e002      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80008c8:	000e      	movs	r6, r1
 80008ca:	2000      	movs	r0, #0
 80008cc:	2500      	movs	r5, #0
 80008ce:	05c0      	lsls	r0, r0, #23
 80008d0:	4328      	orrs	r0, r5
 80008d2:	07f6      	lsls	r6, r6, #31
 80008d4:	4330      	orrs	r0, r6
 80008d6:	bce0      	pop	{r5, r6, r7}
 80008d8:	46ba      	mov	sl, r7
 80008da:	46b1      	mov	r9, r6
 80008dc:	46a8      	mov	r8, r5
 80008de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e0:	4643      	mov	r3, r8
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d13f      	bne.n	8000966 <__aeabi_fdiv+0x15a>
 80008e6:	2202      	movs	r2, #2
 80008e8:	3fff      	subs	r7, #255	; 0xff
 80008ea:	e003      	b.n	80008f4 <__aeabi_fdiv+0xe8>
 80008ec:	4643      	mov	r3, r8
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fdiv+0x142>
 80008f2:	2201      	movs	r2, #1
 80008f4:	0031      	movs	r1, r6
 80008f6:	464b      	mov	r3, r9
 80008f8:	4061      	eors	r1, r4
 80008fa:	b2c9      	uxtb	r1, r1
 80008fc:	4313      	orrs	r3, r2
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	d834      	bhi.n	800096c <__aeabi_fdiv+0x160>
 8000902:	484d      	ldr	r0, [pc, #308]	; (8000a38 <__aeabi_fdiv+0x22c>)
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	58c3      	ldr	r3, [r0, r3]
 8000908:	469f      	mov	pc, r3
 800090a:	2d00      	cmp	r5, #0
 800090c:	d113      	bne.n	8000936 <__aeabi_fdiv+0x12a>
 800090e:	2304      	movs	r3, #4
 8000910:	4699      	mov	r9, r3
 8000912:	3b03      	subs	r3, #3
 8000914:	2700      	movs	r7, #0
 8000916:	469a      	mov	sl, r3
 8000918:	e791      	b.n	800083e <__aeabi_fdiv+0x32>
 800091a:	2d00      	cmp	r5, #0
 800091c:	d105      	bne.n	800092a <__aeabi_fdiv+0x11e>
 800091e:	2308      	movs	r3, #8
 8000920:	4699      	mov	r9, r3
 8000922:	3b06      	subs	r3, #6
 8000924:	27ff      	movs	r7, #255	; 0xff
 8000926:	469a      	mov	sl, r3
 8000928:	e789      	b.n	800083e <__aeabi_fdiv+0x32>
 800092a:	230c      	movs	r3, #12
 800092c:	4699      	mov	r9, r3
 800092e:	3b09      	subs	r3, #9
 8000930:	27ff      	movs	r7, #255	; 0xff
 8000932:	469a      	mov	sl, r3
 8000934:	e783      	b.n	800083e <__aeabi_fdiv+0x32>
 8000936:	0028      	movs	r0, r5
 8000938:	f002 fa30 	bl	8002d9c <__clzsi2>
 800093c:	2776      	movs	r7, #118	; 0x76
 800093e:	1f43      	subs	r3, r0, #5
 8000940:	409d      	lsls	r5, r3
 8000942:	2300      	movs	r3, #0
 8000944:	427f      	negs	r7, r7
 8000946:	4699      	mov	r9, r3
 8000948:	469a      	mov	sl, r3
 800094a:	1a3f      	subs	r7, r7, r0
 800094c:	e777      	b.n	800083e <__aeabi_fdiv+0x32>
 800094e:	4640      	mov	r0, r8
 8000950:	f002 fa24 	bl	8002d9c <__clzsi2>
 8000954:	4642      	mov	r2, r8
 8000956:	1f43      	subs	r3, r0, #5
 8000958:	409a      	lsls	r2, r3
 800095a:	2376      	movs	r3, #118	; 0x76
 800095c:	425b      	negs	r3, r3
 800095e:	4690      	mov	r8, r2
 8000960:	1a1b      	subs	r3, r3, r0
 8000962:	2200      	movs	r2, #0
 8000964:	e77d      	b.n	8000862 <__aeabi_fdiv+0x56>
 8000966:	23ff      	movs	r3, #255	; 0xff
 8000968:	2203      	movs	r2, #3
 800096a:	e77a      	b.n	8000862 <__aeabi_fdiv+0x56>
 800096c:	000e      	movs	r6, r1
 800096e:	20ff      	movs	r0, #255	; 0xff
 8000970:	2500      	movs	r5, #0
 8000972:	e7ac      	b.n	80008ce <__aeabi_fdiv+0xc2>
 8000974:	2001      	movs	r0, #1
 8000976:	1ac0      	subs	r0, r0, r3
 8000978:	281b      	cmp	r0, #27
 800097a:	dca6      	bgt.n	80008ca <__aeabi_fdiv+0xbe>
 800097c:	379e      	adds	r7, #158	; 0x9e
 800097e:	002a      	movs	r2, r5
 8000980:	40bd      	lsls	r5, r7
 8000982:	40c2      	lsrs	r2, r0
 8000984:	1e6b      	subs	r3, r5, #1
 8000986:	419d      	sbcs	r5, r3
 8000988:	4315      	orrs	r5, r2
 800098a:	076b      	lsls	r3, r5, #29
 800098c:	d004      	beq.n	8000998 <__aeabi_fdiv+0x18c>
 800098e:	230f      	movs	r3, #15
 8000990:	402b      	ands	r3, r5
 8000992:	2b04      	cmp	r3, #4
 8000994:	d000      	beq.n	8000998 <__aeabi_fdiv+0x18c>
 8000996:	3504      	adds	r5, #4
 8000998:	016b      	lsls	r3, r5, #5
 800099a:	d544      	bpl.n	8000a26 <__aeabi_fdiv+0x21a>
 800099c:	2001      	movs	r0, #1
 800099e:	2500      	movs	r5, #0
 80009a0:	e795      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80009a2:	20ff      	movs	r0, #255	; 0xff
 80009a4:	2500      	movs	r5, #0
 80009a6:	e792      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80009a8:	2580      	movs	r5, #128	; 0x80
 80009aa:	2600      	movs	r6, #0
 80009ac:	20ff      	movs	r0, #255	; 0xff
 80009ae:	03ed      	lsls	r5, r5, #15
 80009b0:	e78d      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80009b2:	2300      	movs	r3, #0
 80009b4:	4698      	mov	r8, r3
 80009b6:	2080      	movs	r0, #128	; 0x80
 80009b8:	03c0      	lsls	r0, r0, #15
 80009ba:	4205      	tst	r5, r0
 80009bc:	d009      	beq.n	80009d2 <__aeabi_fdiv+0x1c6>
 80009be:	4643      	mov	r3, r8
 80009c0:	4203      	tst	r3, r0
 80009c2:	d106      	bne.n	80009d2 <__aeabi_fdiv+0x1c6>
 80009c4:	4645      	mov	r5, r8
 80009c6:	4305      	orrs	r5, r0
 80009c8:	026d      	lsls	r5, r5, #9
 80009ca:	0026      	movs	r6, r4
 80009cc:	20ff      	movs	r0, #255	; 0xff
 80009ce:	0a6d      	lsrs	r5, r5, #9
 80009d0:	e77d      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80009d2:	2080      	movs	r0, #128	; 0x80
 80009d4:	03c0      	lsls	r0, r0, #15
 80009d6:	4305      	orrs	r5, r0
 80009d8:	026d      	lsls	r5, r5, #9
 80009da:	20ff      	movs	r0, #255	; 0xff
 80009dc:	0a6d      	lsrs	r5, r5, #9
 80009de:	e776      	b.n	80008ce <__aeabi_fdiv+0xc2>
 80009e0:	4642      	mov	r2, r8
 80009e2:	016b      	lsls	r3, r5, #5
 80009e4:	0150      	lsls	r0, r2, #5
 80009e6:	4283      	cmp	r3, r0
 80009e8:	d219      	bcs.n	8000a1e <__aeabi_fdiv+0x212>
 80009ea:	221b      	movs	r2, #27
 80009ec:	2500      	movs	r5, #0
 80009ee:	3f01      	subs	r7, #1
 80009f0:	2601      	movs	r6, #1
 80009f2:	001c      	movs	r4, r3
 80009f4:	006d      	lsls	r5, r5, #1
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2c00      	cmp	r4, #0
 80009fa:	db01      	blt.n	8000a00 <__aeabi_fdiv+0x1f4>
 80009fc:	4298      	cmp	r0, r3
 80009fe:	d801      	bhi.n	8000a04 <__aeabi_fdiv+0x1f8>
 8000a00:	1a1b      	subs	r3, r3, r0
 8000a02:	4335      	orrs	r5, r6
 8000a04:	3a01      	subs	r2, #1
 8000a06:	2a00      	cmp	r2, #0
 8000a08:	d1f3      	bne.n	80009f2 <__aeabi_fdiv+0x1e6>
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4193      	sbcs	r3, r2
 8000a0e:	431d      	orrs	r5, r3
 8000a10:	003b      	movs	r3, r7
 8000a12:	337f      	adds	r3, #127	; 0x7f
 8000a14:	000e      	movs	r6, r1
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	dd00      	ble.n	8000a1c <__aeabi_fdiv+0x210>
 8000a1a:	e741      	b.n	80008a0 <__aeabi_fdiv+0x94>
 8000a1c:	e7aa      	b.n	8000974 <__aeabi_fdiv+0x168>
 8000a1e:	221a      	movs	r2, #26
 8000a20:	2501      	movs	r5, #1
 8000a22:	1a1b      	subs	r3, r3, r0
 8000a24:	e7e4      	b.n	80009f0 <__aeabi_fdiv+0x1e4>
 8000a26:	01ad      	lsls	r5, r5, #6
 8000a28:	2000      	movs	r0, #0
 8000a2a:	0a6d      	lsrs	r5, r5, #9
 8000a2c:	e74f      	b.n	80008ce <__aeabi_fdiv+0xc2>
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	08006fa8 	.word	0x08006fa8
 8000a34:	f7ffffff 	.word	0xf7ffffff
 8000a38:	08006fe8 	.word	0x08006fe8

08000a3c <__eqsf2>:
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	0042      	lsls	r2, r0, #1
 8000a40:	0245      	lsls	r5, r0, #9
 8000a42:	024e      	lsls	r6, r1, #9
 8000a44:	004c      	lsls	r4, r1, #1
 8000a46:	0fc3      	lsrs	r3, r0, #31
 8000a48:	0a6d      	lsrs	r5, r5, #9
 8000a4a:	2001      	movs	r0, #1
 8000a4c:	0e12      	lsrs	r2, r2, #24
 8000a4e:	0a76      	lsrs	r6, r6, #9
 8000a50:	0e24      	lsrs	r4, r4, #24
 8000a52:	0fc9      	lsrs	r1, r1, #31
 8000a54:	2aff      	cmp	r2, #255	; 0xff
 8000a56:	d006      	beq.n	8000a66 <__eqsf2+0x2a>
 8000a58:	2cff      	cmp	r4, #255	; 0xff
 8000a5a:	d003      	beq.n	8000a64 <__eqsf2+0x28>
 8000a5c:	42a2      	cmp	r2, r4
 8000a5e:	d101      	bne.n	8000a64 <__eqsf2+0x28>
 8000a60:	42b5      	cmp	r5, r6
 8000a62:	d006      	beq.n	8000a72 <__eqsf2+0x36>
 8000a64:	bd70      	pop	{r4, r5, r6, pc}
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d1fc      	bne.n	8000a64 <__eqsf2+0x28>
 8000a6a:	2cff      	cmp	r4, #255	; 0xff
 8000a6c:	d1fa      	bne.n	8000a64 <__eqsf2+0x28>
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d1f8      	bne.n	8000a64 <__eqsf2+0x28>
 8000a72:	428b      	cmp	r3, r1
 8000a74:	d006      	beq.n	8000a84 <__eqsf2+0x48>
 8000a76:	2001      	movs	r0, #1
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d1f3      	bne.n	8000a64 <__eqsf2+0x28>
 8000a7c:	0028      	movs	r0, r5
 8000a7e:	1e43      	subs	r3, r0, #1
 8000a80:	4198      	sbcs	r0, r3
 8000a82:	e7ef      	b.n	8000a64 <__eqsf2+0x28>
 8000a84:	2000      	movs	r0, #0
 8000a86:	e7ed      	b.n	8000a64 <__eqsf2+0x28>

08000a88 <__gesf2>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	0245      	lsls	r5, r0, #9
 8000a8e:	024e      	lsls	r6, r1, #9
 8000a90:	004c      	lsls	r4, r1, #1
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a6d      	lsrs	r5, r5, #9
 8000a96:	0e12      	lsrs	r2, r2, #24
 8000a98:	0a76      	lsrs	r6, r6, #9
 8000a9a:	0e24      	lsrs	r4, r4, #24
 8000a9c:	0fc8      	lsrs	r0, r1, #31
 8000a9e:	2aff      	cmp	r2, #255	; 0xff
 8000aa0:	d01b      	beq.n	8000ada <__gesf2+0x52>
 8000aa2:	2cff      	cmp	r4, #255	; 0xff
 8000aa4:	d00e      	beq.n	8000ac4 <__gesf2+0x3c>
 8000aa6:	2a00      	cmp	r2, #0
 8000aa8:	d11b      	bne.n	8000ae2 <__gesf2+0x5a>
 8000aaa:	2c00      	cmp	r4, #0
 8000aac:	d101      	bne.n	8000ab2 <__gesf2+0x2a>
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d01c      	beq.n	8000aec <__gesf2+0x64>
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d00c      	beq.n	8000ad0 <__gesf2+0x48>
 8000ab6:	4283      	cmp	r3, r0
 8000ab8:	d01c      	beq.n	8000af4 <__gesf2+0x6c>
 8000aba:	2102      	movs	r1, #2
 8000abc:	1e58      	subs	r0, r3, #1
 8000abe:	4008      	ands	r0, r1
 8000ac0:	3801      	subs	r0, #1
 8000ac2:	bd70      	pop	{r4, r5, r6, pc}
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d122      	bne.n	8000b0e <__gesf2+0x86>
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d1f4      	bne.n	8000ab6 <__gesf2+0x2e>
 8000acc:	2d00      	cmp	r5, #0
 8000ace:	d1f2      	bne.n	8000ab6 <__gesf2+0x2e>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d1f6      	bne.n	8000ac2 <__gesf2+0x3a>
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	4240      	negs	r0, r0
 8000ad8:	e7f3      	b.n	8000ac2 <__gesf2+0x3a>
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	d117      	bne.n	8000b0e <__gesf2+0x86>
 8000ade:	2cff      	cmp	r4, #255	; 0xff
 8000ae0:	d0f0      	beq.n	8000ac4 <__gesf2+0x3c>
 8000ae2:	2c00      	cmp	r4, #0
 8000ae4:	d1e7      	bne.n	8000ab6 <__gesf2+0x2e>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d1e5      	bne.n	8000ab6 <__gesf2+0x2e>
 8000aea:	e7e6      	b.n	8000aba <__gesf2+0x32>
 8000aec:	2000      	movs	r0, #0
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	d0e7      	beq.n	8000ac2 <__gesf2+0x3a>
 8000af2:	e7e2      	b.n	8000aba <__gesf2+0x32>
 8000af4:	42a2      	cmp	r2, r4
 8000af6:	dc05      	bgt.n	8000b04 <__gesf2+0x7c>
 8000af8:	dbea      	blt.n	8000ad0 <__gesf2+0x48>
 8000afa:	42b5      	cmp	r5, r6
 8000afc:	d802      	bhi.n	8000b04 <__gesf2+0x7c>
 8000afe:	d3e7      	bcc.n	8000ad0 <__gesf2+0x48>
 8000b00:	2000      	movs	r0, #0
 8000b02:	e7de      	b.n	8000ac2 <__gesf2+0x3a>
 8000b04:	4243      	negs	r3, r0
 8000b06:	4158      	adcs	r0, r3
 8000b08:	0040      	lsls	r0, r0, #1
 8000b0a:	3801      	subs	r0, #1
 8000b0c:	e7d9      	b.n	8000ac2 <__gesf2+0x3a>
 8000b0e:	2002      	movs	r0, #2
 8000b10:	4240      	negs	r0, r0
 8000b12:	e7d6      	b.n	8000ac2 <__gesf2+0x3a>

08000b14 <__lesf2>:
 8000b14:	b570      	push	{r4, r5, r6, lr}
 8000b16:	0042      	lsls	r2, r0, #1
 8000b18:	0245      	lsls	r5, r0, #9
 8000b1a:	024e      	lsls	r6, r1, #9
 8000b1c:	004c      	lsls	r4, r1, #1
 8000b1e:	0fc3      	lsrs	r3, r0, #31
 8000b20:	0a6d      	lsrs	r5, r5, #9
 8000b22:	0e12      	lsrs	r2, r2, #24
 8000b24:	0a76      	lsrs	r6, r6, #9
 8000b26:	0e24      	lsrs	r4, r4, #24
 8000b28:	0fc8      	lsrs	r0, r1, #31
 8000b2a:	2aff      	cmp	r2, #255	; 0xff
 8000b2c:	d00b      	beq.n	8000b46 <__lesf2+0x32>
 8000b2e:	2cff      	cmp	r4, #255	; 0xff
 8000b30:	d00d      	beq.n	8000b4e <__lesf2+0x3a>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d11f      	bne.n	8000b76 <__lesf2+0x62>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d116      	bne.n	8000b68 <__lesf2+0x54>
 8000b3a:	2e00      	cmp	r6, #0
 8000b3c:	d114      	bne.n	8000b68 <__lesf2+0x54>
 8000b3e:	2000      	movs	r0, #0
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d010      	beq.n	8000b66 <__lesf2+0x52>
 8000b44:	e009      	b.n	8000b5a <__lesf2+0x46>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d10c      	bne.n	8000b64 <__lesf2+0x50>
 8000b4a:	2cff      	cmp	r4, #255	; 0xff
 8000b4c:	d113      	bne.n	8000b76 <__lesf2+0x62>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	d108      	bne.n	8000b64 <__lesf2+0x50>
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	d008      	beq.n	8000b68 <__lesf2+0x54>
 8000b56:	4283      	cmp	r3, r0
 8000b58:	d012      	beq.n	8000b80 <__lesf2+0x6c>
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	1e58      	subs	r0, r3, #1
 8000b5e:	4008      	ands	r0, r1
 8000b60:	3801      	subs	r0, #1
 8000b62:	e000      	b.n	8000b66 <__lesf2+0x52>
 8000b64:	2002      	movs	r0, #2
 8000b66:	bd70      	pop	{r4, r5, r6, pc}
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d1f4      	bne.n	8000b56 <__lesf2+0x42>
 8000b6c:	2800      	cmp	r0, #0
 8000b6e:	d1fa      	bne.n	8000b66 <__lesf2+0x52>
 8000b70:	2001      	movs	r0, #1
 8000b72:	4240      	negs	r0, r0
 8000b74:	e7f7      	b.n	8000b66 <__lesf2+0x52>
 8000b76:	2c00      	cmp	r4, #0
 8000b78:	d1ed      	bne.n	8000b56 <__lesf2+0x42>
 8000b7a:	2e00      	cmp	r6, #0
 8000b7c:	d1eb      	bne.n	8000b56 <__lesf2+0x42>
 8000b7e:	e7ec      	b.n	8000b5a <__lesf2+0x46>
 8000b80:	42a2      	cmp	r2, r4
 8000b82:	dc05      	bgt.n	8000b90 <__lesf2+0x7c>
 8000b84:	dbf2      	blt.n	8000b6c <__lesf2+0x58>
 8000b86:	42b5      	cmp	r5, r6
 8000b88:	d802      	bhi.n	8000b90 <__lesf2+0x7c>
 8000b8a:	d3ef      	bcc.n	8000b6c <__lesf2+0x58>
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	e7ea      	b.n	8000b66 <__lesf2+0x52>
 8000b90:	4243      	negs	r3, r0
 8000b92:	4158      	adcs	r0, r3
 8000b94:	0040      	lsls	r0, r0, #1
 8000b96:	3801      	subs	r0, #1
 8000b98:	e7e5      	b.n	8000b66 <__lesf2+0x52>
 8000b9a:	46c0      	nop			; (mov r8, r8)

08000b9c <__aeabi_fmul>:
 8000b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b9e:	464f      	mov	r7, r9
 8000ba0:	4646      	mov	r6, r8
 8000ba2:	46d6      	mov	lr, sl
 8000ba4:	0244      	lsls	r4, r0, #9
 8000ba6:	0045      	lsls	r5, r0, #1
 8000ba8:	b5c0      	push	{r6, r7, lr}
 8000baa:	0a64      	lsrs	r4, r4, #9
 8000bac:	1c0f      	adds	r7, r1, #0
 8000bae:	0e2d      	lsrs	r5, r5, #24
 8000bb0:	0fc6      	lsrs	r6, r0, #31
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_fmul+0x1c>
 8000bb6:	e08d      	b.n	8000cd4 <__aeabi_fmul+0x138>
 8000bb8:	2dff      	cmp	r5, #255	; 0xff
 8000bba:	d100      	bne.n	8000bbe <__aeabi_fmul+0x22>
 8000bbc:	e092      	b.n	8000ce4 <__aeabi_fmul+0x148>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2080      	movs	r0, #128	; 0x80
 8000bc2:	4699      	mov	r9, r3
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	00e4      	lsls	r4, r4, #3
 8000bc8:	04c0      	lsls	r0, r0, #19
 8000bca:	4304      	orrs	r4, r0
 8000bcc:	3d7f      	subs	r5, #127	; 0x7f
 8000bce:	0278      	lsls	r0, r7, #9
 8000bd0:	0a43      	lsrs	r3, r0, #9
 8000bd2:	4698      	mov	r8, r3
 8000bd4:	007b      	lsls	r3, r7, #1
 8000bd6:	0e1b      	lsrs	r3, r3, #24
 8000bd8:	0fff      	lsrs	r7, r7, #31
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d100      	bne.n	8000be0 <__aeabi_fmul+0x44>
 8000bde:	e070      	b.n	8000cc2 <__aeabi_fmul+0x126>
 8000be0:	2bff      	cmp	r3, #255	; 0xff
 8000be2:	d100      	bne.n	8000be6 <__aeabi_fmul+0x4a>
 8000be4:	e086      	b.n	8000cf4 <__aeabi_fmul+0x158>
 8000be6:	4642      	mov	r2, r8
 8000be8:	00d0      	lsls	r0, r2, #3
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	3b7f      	subs	r3, #127	; 0x7f
 8000bee:	18ed      	adds	r5, r5, r3
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	04d2      	lsls	r2, r2, #19
 8000bf4:	4302      	orrs	r2, r0
 8000bf6:	4690      	mov	r8, r2
 8000bf8:	469c      	mov	ip, r3
 8000bfa:	0031      	movs	r1, r6
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	4079      	eors	r1, r7
 8000c00:	1c68      	adds	r0, r5, #1
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d81c      	bhi.n	8000c40 <__aeabi_fmul+0xa4>
 8000c06:	4a76      	ldr	r2, [pc, #472]	; (8000de0 <__aeabi_fmul+0x244>)
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	58d3      	ldr	r3, [r2, r3]
 8000c0c:	469f      	mov	pc, r3
 8000c0e:	0039      	movs	r1, r7
 8000c10:	4644      	mov	r4, r8
 8000c12:	46e2      	mov	sl, ip
 8000c14:	4653      	mov	r3, sl
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d00f      	beq.n	8000c3a <__aeabi_fmul+0x9e>
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_fmul+0x84>
 8000c1e:	e0d7      	b.n	8000dd0 <__aeabi_fmul+0x234>
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d137      	bne.n	8000c94 <__aeabi_fmul+0xf8>
 8000c24:	2000      	movs	r0, #0
 8000c26:	2400      	movs	r4, #0
 8000c28:	05c0      	lsls	r0, r0, #23
 8000c2a:	4320      	orrs	r0, r4
 8000c2c:	07c9      	lsls	r1, r1, #31
 8000c2e:	4308      	orrs	r0, r1
 8000c30:	bce0      	pop	{r5, r6, r7}
 8000c32:	46ba      	mov	sl, r7
 8000c34:	46b1      	mov	r9, r6
 8000c36:	46a8      	mov	r8, r5
 8000c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3a:	20ff      	movs	r0, #255	; 0xff
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	e7f3      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000c40:	0c26      	lsrs	r6, r4, #16
 8000c42:	0424      	lsls	r4, r4, #16
 8000c44:	0c22      	lsrs	r2, r4, #16
 8000c46:	4644      	mov	r4, r8
 8000c48:	0424      	lsls	r4, r4, #16
 8000c4a:	0c24      	lsrs	r4, r4, #16
 8000c4c:	4643      	mov	r3, r8
 8000c4e:	0027      	movs	r7, r4
 8000c50:	0c1b      	lsrs	r3, r3, #16
 8000c52:	4357      	muls	r7, r2
 8000c54:	4374      	muls	r4, r6
 8000c56:	435a      	muls	r2, r3
 8000c58:	435e      	muls	r6, r3
 8000c5a:	1912      	adds	r2, r2, r4
 8000c5c:	0c3b      	lsrs	r3, r7, #16
 8000c5e:	189b      	adds	r3, r3, r2
 8000c60:	429c      	cmp	r4, r3
 8000c62:	d903      	bls.n	8000c6c <__aeabi_fmul+0xd0>
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	4694      	mov	ip, r2
 8000c6a:	4466      	add	r6, ip
 8000c6c:	043f      	lsls	r7, r7, #16
 8000c6e:	041a      	lsls	r2, r3, #16
 8000c70:	0c3f      	lsrs	r7, r7, #16
 8000c72:	19d2      	adds	r2, r2, r7
 8000c74:	0194      	lsls	r4, r2, #6
 8000c76:	1e67      	subs	r7, r4, #1
 8000c78:	41bc      	sbcs	r4, r7
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	0e92      	lsrs	r2, r2, #26
 8000c7e:	199b      	adds	r3, r3, r6
 8000c80:	4314      	orrs	r4, r2
 8000c82:	019b      	lsls	r3, r3, #6
 8000c84:	431c      	orrs	r4, r3
 8000c86:	011b      	lsls	r3, r3, #4
 8000c88:	d400      	bmi.n	8000c8c <__aeabi_fmul+0xf0>
 8000c8a:	e09b      	b.n	8000dc4 <__aeabi_fmul+0x228>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	0862      	lsrs	r2, r4, #1
 8000c90:	401c      	ands	r4, r3
 8000c92:	4314      	orrs	r4, r2
 8000c94:	0002      	movs	r2, r0
 8000c96:	327f      	adds	r2, #127	; 0x7f
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	dd64      	ble.n	8000d66 <__aeabi_fmul+0x1ca>
 8000c9c:	0763      	lsls	r3, r4, #29
 8000c9e:	d004      	beq.n	8000caa <__aeabi_fmul+0x10e>
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	4023      	ands	r3, r4
 8000ca4:	2b04      	cmp	r3, #4
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fmul+0x10e>
 8000ca8:	3404      	adds	r4, #4
 8000caa:	0123      	lsls	r3, r4, #4
 8000cac:	d503      	bpl.n	8000cb6 <__aeabi_fmul+0x11a>
 8000cae:	0002      	movs	r2, r0
 8000cb0:	4b4c      	ldr	r3, [pc, #304]	; (8000de4 <__aeabi_fmul+0x248>)
 8000cb2:	3280      	adds	r2, #128	; 0x80
 8000cb4:	401c      	ands	r4, r3
 8000cb6:	2afe      	cmp	r2, #254	; 0xfe
 8000cb8:	dcbf      	bgt.n	8000c3a <__aeabi_fmul+0x9e>
 8000cba:	01a4      	lsls	r4, r4, #6
 8000cbc:	0a64      	lsrs	r4, r4, #9
 8000cbe:	b2d0      	uxtb	r0, r2
 8000cc0:	e7b2      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000cc2:	4643      	mov	r3, r8
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d13d      	bne.n	8000d44 <__aeabi_fmul+0x1a8>
 8000cc8:	464a      	mov	r2, r9
 8000cca:	3301      	adds	r3, #1
 8000ccc:	431a      	orrs	r2, r3
 8000cce:	4691      	mov	r9, r2
 8000cd0:	469c      	mov	ip, r3
 8000cd2:	e792      	b.n	8000bfa <__aeabi_fmul+0x5e>
 8000cd4:	2c00      	cmp	r4, #0
 8000cd6:	d129      	bne.n	8000d2c <__aeabi_fmul+0x190>
 8000cd8:	2304      	movs	r3, #4
 8000cda:	4699      	mov	r9, r3
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	2500      	movs	r5, #0
 8000ce0:	469a      	mov	sl, r3
 8000ce2:	e774      	b.n	8000bce <__aeabi_fmul+0x32>
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	d11b      	bne.n	8000d20 <__aeabi_fmul+0x184>
 8000ce8:	2308      	movs	r3, #8
 8000cea:	4699      	mov	r9, r3
 8000cec:	3b06      	subs	r3, #6
 8000cee:	25ff      	movs	r5, #255	; 0xff
 8000cf0:	469a      	mov	sl, r3
 8000cf2:	e76c      	b.n	8000bce <__aeabi_fmul+0x32>
 8000cf4:	4643      	mov	r3, r8
 8000cf6:	35ff      	adds	r5, #255	; 0xff
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d10b      	bne.n	8000d14 <__aeabi_fmul+0x178>
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	464a      	mov	r2, r9
 8000d00:	431a      	orrs	r2, r3
 8000d02:	4691      	mov	r9, r2
 8000d04:	469c      	mov	ip, r3
 8000d06:	e778      	b.n	8000bfa <__aeabi_fmul+0x5e>
 8000d08:	4653      	mov	r3, sl
 8000d0a:	0031      	movs	r1, r6
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d000      	beq.n	8000d12 <__aeabi_fmul+0x176>
 8000d10:	e783      	b.n	8000c1a <__aeabi_fmul+0x7e>
 8000d12:	e792      	b.n	8000c3a <__aeabi_fmul+0x9e>
 8000d14:	2303      	movs	r3, #3
 8000d16:	464a      	mov	r2, r9
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	4691      	mov	r9, r2
 8000d1c:	469c      	mov	ip, r3
 8000d1e:	e76c      	b.n	8000bfa <__aeabi_fmul+0x5e>
 8000d20:	230c      	movs	r3, #12
 8000d22:	4699      	mov	r9, r3
 8000d24:	3b09      	subs	r3, #9
 8000d26:	25ff      	movs	r5, #255	; 0xff
 8000d28:	469a      	mov	sl, r3
 8000d2a:	e750      	b.n	8000bce <__aeabi_fmul+0x32>
 8000d2c:	0020      	movs	r0, r4
 8000d2e:	f002 f835 	bl	8002d9c <__clzsi2>
 8000d32:	2576      	movs	r5, #118	; 0x76
 8000d34:	1f43      	subs	r3, r0, #5
 8000d36:	409c      	lsls	r4, r3
 8000d38:	2300      	movs	r3, #0
 8000d3a:	426d      	negs	r5, r5
 8000d3c:	4699      	mov	r9, r3
 8000d3e:	469a      	mov	sl, r3
 8000d40:	1a2d      	subs	r5, r5, r0
 8000d42:	e744      	b.n	8000bce <__aeabi_fmul+0x32>
 8000d44:	4640      	mov	r0, r8
 8000d46:	f002 f829 	bl	8002d9c <__clzsi2>
 8000d4a:	4642      	mov	r2, r8
 8000d4c:	1f43      	subs	r3, r0, #5
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	2300      	movs	r3, #0
 8000d52:	1a2d      	subs	r5, r5, r0
 8000d54:	4690      	mov	r8, r2
 8000d56:	469c      	mov	ip, r3
 8000d58:	3d76      	subs	r5, #118	; 0x76
 8000d5a:	e74e      	b.n	8000bfa <__aeabi_fmul+0x5e>
 8000d5c:	2480      	movs	r4, #128	; 0x80
 8000d5e:	2100      	movs	r1, #0
 8000d60:	20ff      	movs	r0, #255	; 0xff
 8000d62:	03e4      	lsls	r4, r4, #15
 8000d64:	e760      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000d66:	2301      	movs	r3, #1
 8000d68:	1a9b      	subs	r3, r3, r2
 8000d6a:	2b1b      	cmp	r3, #27
 8000d6c:	dd00      	ble.n	8000d70 <__aeabi_fmul+0x1d4>
 8000d6e:	e759      	b.n	8000c24 <__aeabi_fmul+0x88>
 8000d70:	0022      	movs	r2, r4
 8000d72:	309e      	adds	r0, #158	; 0x9e
 8000d74:	40da      	lsrs	r2, r3
 8000d76:	4084      	lsls	r4, r0
 8000d78:	0013      	movs	r3, r2
 8000d7a:	1e62      	subs	r2, r4, #1
 8000d7c:	4194      	sbcs	r4, r2
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	0763      	lsls	r3, r4, #29
 8000d82:	d004      	beq.n	8000d8e <__aeabi_fmul+0x1f2>
 8000d84:	230f      	movs	r3, #15
 8000d86:	4023      	ands	r3, r4
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_fmul+0x1f2>
 8000d8c:	3404      	adds	r4, #4
 8000d8e:	0163      	lsls	r3, r4, #5
 8000d90:	d51a      	bpl.n	8000dc8 <__aeabi_fmul+0x22c>
 8000d92:	2001      	movs	r0, #1
 8000d94:	2400      	movs	r4, #0
 8000d96:	e747      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000d98:	2080      	movs	r0, #128	; 0x80
 8000d9a:	03c0      	lsls	r0, r0, #15
 8000d9c:	4204      	tst	r4, r0
 8000d9e:	d009      	beq.n	8000db4 <__aeabi_fmul+0x218>
 8000da0:	4643      	mov	r3, r8
 8000da2:	4203      	tst	r3, r0
 8000da4:	d106      	bne.n	8000db4 <__aeabi_fmul+0x218>
 8000da6:	4644      	mov	r4, r8
 8000da8:	4304      	orrs	r4, r0
 8000daa:	0264      	lsls	r4, r4, #9
 8000dac:	0039      	movs	r1, r7
 8000dae:	20ff      	movs	r0, #255	; 0xff
 8000db0:	0a64      	lsrs	r4, r4, #9
 8000db2:	e739      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000db4:	2080      	movs	r0, #128	; 0x80
 8000db6:	03c0      	lsls	r0, r0, #15
 8000db8:	4304      	orrs	r4, r0
 8000dba:	0264      	lsls	r4, r4, #9
 8000dbc:	0031      	movs	r1, r6
 8000dbe:	20ff      	movs	r0, #255	; 0xff
 8000dc0:	0a64      	lsrs	r4, r4, #9
 8000dc2:	e731      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000dc4:	0028      	movs	r0, r5
 8000dc6:	e765      	b.n	8000c94 <__aeabi_fmul+0xf8>
 8000dc8:	01a4      	lsls	r4, r4, #6
 8000dca:	2000      	movs	r0, #0
 8000dcc:	0a64      	lsrs	r4, r4, #9
 8000dce:	e72b      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000dd0:	2080      	movs	r0, #128	; 0x80
 8000dd2:	03c0      	lsls	r0, r0, #15
 8000dd4:	4304      	orrs	r4, r0
 8000dd6:	0264      	lsls	r4, r4, #9
 8000dd8:	20ff      	movs	r0, #255	; 0xff
 8000dda:	0a64      	lsrs	r4, r4, #9
 8000ddc:	e724      	b.n	8000c28 <__aeabi_fmul+0x8c>
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	08007028 	.word	0x08007028
 8000de4:	f7ffffff 	.word	0xf7ffffff

08000de8 <__aeabi_fsub>:
 8000de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dea:	46ce      	mov	lr, r9
 8000dec:	4647      	mov	r7, r8
 8000dee:	0243      	lsls	r3, r0, #9
 8000df0:	0a5b      	lsrs	r3, r3, #9
 8000df2:	024e      	lsls	r6, r1, #9
 8000df4:	00da      	lsls	r2, r3, #3
 8000df6:	4694      	mov	ip, r2
 8000df8:	0a72      	lsrs	r2, r6, #9
 8000dfa:	4691      	mov	r9, r2
 8000dfc:	0045      	lsls	r5, r0, #1
 8000dfe:	004a      	lsls	r2, r1, #1
 8000e00:	b580      	push	{r7, lr}
 8000e02:	0e2d      	lsrs	r5, r5, #24
 8000e04:	001f      	movs	r7, r3
 8000e06:	0fc4      	lsrs	r4, r0, #31
 8000e08:	0e12      	lsrs	r2, r2, #24
 8000e0a:	0fc9      	lsrs	r1, r1, #31
 8000e0c:	09b6      	lsrs	r6, r6, #6
 8000e0e:	2aff      	cmp	r2, #255	; 0xff
 8000e10:	d05b      	beq.n	8000eca <__aeabi_fsub+0xe2>
 8000e12:	2001      	movs	r0, #1
 8000e14:	4041      	eors	r1, r0
 8000e16:	428c      	cmp	r4, r1
 8000e18:	d039      	beq.n	8000e8e <__aeabi_fsub+0xa6>
 8000e1a:	1aa8      	subs	r0, r5, r2
 8000e1c:	2800      	cmp	r0, #0
 8000e1e:	dd5a      	ble.n	8000ed6 <__aeabi_fsub+0xee>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	d06a      	beq.n	8000efa <__aeabi_fsub+0x112>
 8000e24:	2dff      	cmp	r5, #255	; 0xff
 8000e26:	d100      	bne.n	8000e2a <__aeabi_fsub+0x42>
 8000e28:	e0d9      	b.n	8000fde <__aeabi_fsub+0x1f6>
 8000e2a:	2280      	movs	r2, #128	; 0x80
 8000e2c:	04d2      	lsls	r2, r2, #19
 8000e2e:	4316      	orrs	r6, r2
 8000e30:	281b      	cmp	r0, #27
 8000e32:	dc00      	bgt.n	8000e36 <__aeabi_fsub+0x4e>
 8000e34:	e0e9      	b.n	800100a <__aeabi_fsub+0x222>
 8000e36:	2001      	movs	r0, #1
 8000e38:	4663      	mov	r3, ip
 8000e3a:	1a18      	subs	r0, r3, r0
 8000e3c:	0143      	lsls	r3, r0, #5
 8000e3e:	d400      	bmi.n	8000e42 <__aeabi_fsub+0x5a>
 8000e40:	e0b4      	b.n	8000fac <__aeabi_fsub+0x1c4>
 8000e42:	0180      	lsls	r0, r0, #6
 8000e44:	0987      	lsrs	r7, r0, #6
 8000e46:	0038      	movs	r0, r7
 8000e48:	f001 ffa8 	bl	8002d9c <__clzsi2>
 8000e4c:	3805      	subs	r0, #5
 8000e4e:	4087      	lsls	r7, r0
 8000e50:	4285      	cmp	r5, r0
 8000e52:	dc00      	bgt.n	8000e56 <__aeabi_fsub+0x6e>
 8000e54:	e0cc      	b.n	8000ff0 <__aeabi_fsub+0x208>
 8000e56:	1a2d      	subs	r5, r5, r0
 8000e58:	48b5      	ldr	r0, [pc, #724]	; (8001130 <__aeabi_fsub+0x348>)
 8000e5a:	4038      	ands	r0, r7
 8000e5c:	0743      	lsls	r3, r0, #29
 8000e5e:	d004      	beq.n	8000e6a <__aeabi_fsub+0x82>
 8000e60:	230f      	movs	r3, #15
 8000e62:	4003      	ands	r3, r0
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d000      	beq.n	8000e6a <__aeabi_fsub+0x82>
 8000e68:	3004      	adds	r0, #4
 8000e6a:	0143      	lsls	r3, r0, #5
 8000e6c:	d400      	bmi.n	8000e70 <__aeabi_fsub+0x88>
 8000e6e:	e0a0      	b.n	8000fb2 <__aeabi_fsub+0x1ca>
 8000e70:	1c6a      	adds	r2, r5, #1
 8000e72:	2dfe      	cmp	r5, #254	; 0xfe
 8000e74:	d100      	bne.n	8000e78 <__aeabi_fsub+0x90>
 8000e76:	e08d      	b.n	8000f94 <__aeabi_fsub+0x1ac>
 8000e78:	0180      	lsls	r0, r0, #6
 8000e7a:	0a47      	lsrs	r7, r0, #9
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	05d0      	lsls	r0, r2, #23
 8000e80:	4338      	orrs	r0, r7
 8000e82:	07e4      	lsls	r4, r4, #31
 8000e84:	4320      	orrs	r0, r4
 8000e86:	bcc0      	pop	{r6, r7}
 8000e88:	46b9      	mov	r9, r7
 8000e8a:	46b0      	mov	r8, r6
 8000e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e8e:	1aa8      	subs	r0, r5, r2
 8000e90:	4680      	mov	r8, r0
 8000e92:	2800      	cmp	r0, #0
 8000e94:	dd45      	ble.n	8000f22 <__aeabi_fsub+0x13a>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d070      	beq.n	8000f7c <__aeabi_fsub+0x194>
 8000e9a:	2dff      	cmp	r5, #255	; 0xff
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_fsub+0xb8>
 8000e9e:	e09e      	b.n	8000fde <__aeabi_fsub+0x1f6>
 8000ea0:	2380      	movs	r3, #128	; 0x80
 8000ea2:	04db      	lsls	r3, r3, #19
 8000ea4:	431e      	orrs	r6, r3
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	2b1b      	cmp	r3, #27
 8000eaa:	dc00      	bgt.n	8000eae <__aeabi_fsub+0xc6>
 8000eac:	e0d2      	b.n	8001054 <__aeabi_fsub+0x26c>
 8000eae:	2001      	movs	r0, #1
 8000eb0:	4460      	add	r0, ip
 8000eb2:	0143      	lsls	r3, r0, #5
 8000eb4:	d57a      	bpl.n	8000fac <__aeabi_fsub+0x1c4>
 8000eb6:	3501      	adds	r5, #1
 8000eb8:	2dff      	cmp	r5, #255	; 0xff
 8000eba:	d06b      	beq.n	8000f94 <__aeabi_fsub+0x1ac>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	4a9d      	ldr	r2, [pc, #628]	; (8001134 <__aeabi_fsub+0x34c>)
 8000ec0:	4003      	ands	r3, r0
 8000ec2:	0840      	lsrs	r0, r0, #1
 8000ec4:	4010      	ands	r0, r2
 8000ec6:	4318      	orrs	r0, r3
 8000ec8:	e7c8      	b.n	8000e5c <__aeabi_fsub+0x74>
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d020      	beq.n	8000f10 <__aeabi_fsub+0x128>
 8000ece:	428c      	cmp	r4, r1
 8000ed0:	d023      	beq.n	8000f1a <__aeabi_fsub+0x132>
 8000ed2:	0028      	movs	r0, r5
 8000ed4:	38ff      	subs	r0, #255	; 0xff
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d039      	beq.n	8000f4e <__aeabi_fsub+0x166>
 8000eda:	1b57      	subs	r7, r2, r5
 8000edc:	2d00      	cmp	r5, #0
 8000ede:	d000      	beq.n	8000ee2 <__aeabi_fsub+0xfa>
 8000ee0:	e09d      	b.n	800101e <__aeabi_fsub+0x236>
 8000ee2:	4663      	mov	r3, ip
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d100      	bne.n	8000eea <__aeabi_fsub+0x102>
 8000ee8:	e0db      	b.n	80010a2 <__aeabi_fsub+0x2ba>
 8000eea:	1e7b      	subs	r3, r7, #1
 8000eec:	2f01      	cmp	r7, #1
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x10a>
 8000ef0:	e10d      	b.n	800110e <__aeabi_fsub+0x326>
 8000ef2:	2fff      	cmp	r7, #255	; 0xff
 8000ef4:	d071      	beq.n	8000fda <__aeabi_fsub+0x1f2>
 8000ef6:	001f      	movs	r7, r3
 8000ef8:	e098      	b.n	800102c <__aeabi_fsub+0x244>
 8000efa:	2e00      	cmp	r6, #0
 8000efc:	d100      	bne.n	8000f00 <__aeabi_fsub+0x118>
 8000efe:	e0a7      	b.n	8001050 <__aeabi_fsub+0x268>
 8000f00:	1e42      	subs	r2, r0, #1
 8000f02:	2801      	cmp	r0, #1
 8000f04:	d100      	bne.n	8000f08 <__aeabi_fsub+0x120>
 8000f06:	e0e6      	b.n	80010d6 <__aeabi_fsub+0x2ee>
 8000f08:	28ff      	cmp	r0, #255	; 0xff
 8000f0a:	d068      	beq.n	8000fde <__aeabi_fsub+0x1f6>
 8000f0c:	0010      	movs	r0, r2
 8000f0e:	e78f      	b.n	8000e30 <__aeabi_fsub+0x48>
 8000f10:	2001      	movs	r0, #1
 8000f12:	4041      	eors	r1, r0
 8000f14:	42a1      	cmp	r1, r4
 8000f16:	d000      	beq.n	8000f1a <__aeabi_fsub+0x132>
 8000f18:	e77f      	b.n	8000e1a <__aeabi_fsub+0x32>
 8000f1a:	20ff      	movs	r0, #255	; 0xff
 8000f1c:	4240      	negs	r0, r0
 8000f1e:	4680      	mov	r8, r0
 8000f20:	44a8      	add	r8, r5
 8000f22:	4640      	mov	r0, r8
 8000f24:	2800      	cmp	r0, #0
 8000f26:	d038      	beq.n	8000f9a <__aeabi_fsub+0x1b2>
 8000f28:	1b51      	subs	r1, r2, r5
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x148>
 8000f2e:	e0ae      	b.n	800108e <__aeabi_fsub+0x2a6>
 8000f30:	2aff      	cmp	r2, #255	; 0xff
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x14e>
 8000f34:	e0df      	b.n	80010f6 <__aeabi_fsub+0x30e>
 8000f36:	2380      	movs	r3, #128	; 0x80
 8000f38:	4660      	mov	r0, ip
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	4318      	orrs	r0, r3
 8000f3e:	4684      	mov	ip, r0
 8000f40:	291b      	cmp	r1, #27
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_fsub+0x15e>
 8000f44:	e0d9      	b.n	80010fa <__aeabi_fsub+0x312>
 8000f46:	2001      	movs	r0, #1
 8000f48:	0015      	movs	r5, r2
 8000f4a:	1980      	adds	r0, r0, r6
 8000f4c:	e7b1      	b.n	8000eb2 <__aeabi_fsub+0xca>
 8000f4e:	20fe      	movs	r0, #254	; 0xfe
 8000f50:	1c6a      	adds	r2, r5, #1
 8000f52:	4210      	tst	r0, r2
 8000f54:	d171      	bne.n	800103a <__aeabi_fsub+0x252>
 8000f56:	2d00      	cmp	r5, #0
 8000f58:	d000      	beq.n	8000f5c <__aeabi_fsub+0x174>
 8000f5a:	e0a6      	b.n	80010aa <__aeabi_fsub+0x2c2>
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x17c>
 8000f62:	e0d9      	b.n	8001118 <__aeabi_fsub+0x330>
 8000f64:	2200      	movs	r2, #0
 8000f66:	2e00      	cmp	r6, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x184>
 8000f6a:	e788      	b.n	8000e7e <__aeabi_fsub+0x96>
 8000f6c:	1b98      	subs	r0, r3, r6
 8000f6e:	0143      	lsls	r3, r0, #5
 8000f70:	d400      	bmi.n	8000f74 <__aeabi_fsub+0x18c>
 8000f72:	e0e1      	b.n	8001138 <__aeabi_fsub+0x350>
 8000f74:	4663      	mov	r3, ip
 8000f76:	000c      	movs	r4, r1
 8000f78:	1af0      	subs	r0, r6, r3
 8000f7a:	e76f      	b.n	8000e5c <__aeabi_fsub+0x74>
 8000f7c:	2e00      	cmp	r6, #0
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_fsub+0x19a>
 8000f80:	e0b7      	b.n	80010f2 <__aeabi_fsub+0x30a>
 8000f82:	0002      	movs	r2, r0
 8000f84:	3a01      	subs	r2, #1
 8000f86:	2801      	cmp	r0, #1
 8000f88:	d100      	bne.n	8000f8c <__aeabi_fsub+0x1a4>
 8000f8a:	e09c      	b.n	80010c6 <__aeabi_fsub+0x2de>
 8000f8c:	28ff      	cmp	r0, #255	; 0xff
 8000f8e:	d026      	beq.n	8000fde <__aeabi_fsub+0x1f6>
 8000f90:	4690      	mov	r8, r2
 8000f92:	e788      	b.n	8000ea6 <__aeabi_fsub+0xbe>
 8000f94:	22ff      	movs	r2, #255	; 0xff
 8000f96:	2700      	movs	r7, #0
 8000f98:	e771      	b.n	8000e7e <__aeabi_fsub+0x96>
 8000f9a:	20fe      	movs	r0, #254	; 0xfe
 8000f9c:	1c6a      	adds	r2, r5, #1
 8000f9e:	4210      	tst	r0, r2
 8000fa0:	d064      	beq.n	800106c <__aeabi_fsub+0x284>
 8000fa2:	2aff      	cmp	r2, #255	; 0xff
 8000fa4:	d0f6      	beq.n	8000f94 <__aeabi_fsub+0x1ac>
 8000fa6:	0015      	movs	r5, r2
 8000fa8:	4466      	add	r6, ip
 8000faa:	0870      	lsrs	r0, r6, #1
 8000fac:	0743      	lsls	r3, r0, #29
 8000fae:	d000      	beq.n	8000fb2 <__aeabi_fsub+0x1ca>
 8000fb0:	e756      	b.n	8000e60 <__aeabi_fsub+0x78>
 8000fb2:	08c3      	lsrs	r3, r0, #3
 8000fb4:	2dff      	cmp	r5, #255	; 0xff
 8000fb6:	d012      	beq.n	8000fde <__aeabi_fsub+0x1f6>
 8000fb8:	025b      	lsls	r3, r3, #9
 8000fba:	0a5f      	lsrs	r7, r3, #9
 8000fbc:	b2ea      	uxtb	r2, r5
 8000fbe:	e75e      	b.n	8000e7e <__aeabi_fsub+0x96>
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_fsub+0x1e0>
 8000fc6:	e096      	b.n	80010f6 <__aeabi_fsub+0x30e>
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d008      	beq.n	8000fde <__aeabi_fsub+0x1f6>
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	03d2      	lsls	r2, r2, #15
 8000fd0:	4213      	tst	r3, r2
 8000fd2:	d004      	beq.n	8000fde <__aeabi_fsub+0x1f6>
 8000fd4:	4648      	mov	r0, r9
 8000fd6:	4210      	tst	r0, r2
 8000fd8:	d101      	bne.n	8000fde <__aeabi_fsub+0x1f6>
 8000fda:	000c      	movs	r4, r1
 8000fdc:	464b      	mov	r3, r9
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d0d8      	beq.n	8000f94 <__aeabi_fsub+0x1ac>
 8000fe2:	2780      	movs	r7, #128	; 0x80
 8000fe4:	03ff      	lsls	r7, r7, #15
 8000fe6:	431f      	orrs	r7, r3
 8000fe8:	027f      	lsls	r7, r7, #9
 8000fea:	22ff      	movs	r2, #255	; 0xff
 8000fec:	0a7f      	lsrs	r7, r7, #9
 8000fee:	e746      	b.n	8000e7e <__aeabi_fsub+0x96>
 8000ff0:	2320      	movs	r3, #32
 8000ff2:	003a      	movs	r2, r7
 8000ff4:	1b45      	subs	r5, r0, r5
 8000ff6:	0038      	movs	r0, r7
 8000ff8:	3501      	adds	r5, #1
 8000ffa:	40ea      	lsrs	r2, r5
 8000ffc:	1b5d      	subs	r5, r3, r5
 8000ffe:	40a8      	lsls	r0, r5
 8001000:	1e43      	subs	r3, r0, #1
 8001002:	4198      	sbcs	r0, r3
 8001004:	2500      	movs	r5, #0
 8001006:	4310      	orrs	r0, r2
 8001008:	e728      	b.n	8000e5c <__aeabi_fsub+0x74>
 800100a:	2320      	movs	r3, #32
 800100c:	1a1b      	subs	r3, r3, r0
 800100e:	0032      	movs	r2, r6
 8001010:	409e      	lsls	r6, r3
 8001012:	40c2      	lsrs	r2, r0
 8001014:	0030      	movs	r0, r6
 8001016:	1e43      	subs	r3, r0, #1
 8001018:	4198      	sbcs	r0, r3
 800101a:	4310      	orrs	r0, r2
 800101c:	e70c      	b.n	8000e38 <__aeabi_fsub+0x50>
 800101e:	2aff      	cmp	r2, #255	; 0xff
 8001020:	d0db      	beq.n	8000fda <__aeabi_fsub+0x1f2>
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	4660      	mov	r0, ip
 8001026:	04db      	lsls	r3, r3, #19
 8001028:	4318      	orrs	r0, r3
 800102a:	4684      	mov	ip, r0
 800102c:	2f1b      	cmp	r7, #27
 800102e:	dd56      	ble.n	80010de <__aeabi_fsub+0x2f6>
 8001030:	2001      	movs	r0, #1
 8001032:	000c      	movs	r4, r1
 8001034:	0015      	movs	r5, r2
 8001036:	1a30      	subs	r0, r6, r0
 8001038:	e700      	b.n	8000e3c <__aeabi_fsub+0x54>
 800103a:	4663      	mov	r3, ip
 800103c:	1b9f      	subs	r7, r3, r6
 800103e:	017b      	lsls	r3, r7, #5
 8001040:	d43d      	bmi.n	80010be <__aeabi_fsub+0x2d6>
 8001042:	2f00      	cmp	r7, #0
 8001044:	d000      	beq.n	8001048 <__aeabi_fsub+0x260>
 8001046:	e6fe      	b.n	8000e46 <__aeabi_fsub+0x5e>
 8001048:	2400      	movs	r4, #0
 800104a:	2200      	movs	r2, #0
 800104c:	2700      	movs	r7, #0
 800104e:	e716      	b.n	8000e7e <__aeabi_fsub+0x96>
 8001050:	0005      	movs	r5, r0
 8001052:	e7af      	b.n	8000fb4 <__aeabi_fsub+0x1cc>
 8001054:	0032      	movs	r2, r6
 8001056:	4643      	mov	r3, r8
 8001058:	4641      	mov	r1, r8
 800105a:	40da      	lsrs	r2, r3
 800105c:	2320      	movs	r3, #32
 800105e:	1a5b      	subs	r3, r3, r1
 8001060:	409e      	lsls	r6, r3
 8001062:	0030      	movs	r0, r6
 8001064:	1e43      	subs	r3, r0, #1
 8001066:	4198      	sbcs	r0, r3
 8001068:	4310      	orrs	r0, r2
 800106a:	e721      	b.n	8000eb0 <__aeabi_fsub+0xc8>
 800106c:	2d00      	cmp	r5, #0
 800106e:	d1a7      	bne.n	8000fc0 <__aeabi_fsub+0x1d8>
 8001070:	4663      	mov	r3, ip
 8001072:	2b00      	cmp	r3, #0
 8001074:	d059      	beq.n	800112a <__aeabi_fsub+0x342>
 8001076:	2200      	movs	r2, #0
 8001078:	2e00      	cmp	r6, #0
 800107a:	d100      	bne.n	800107e <__aeabi_fsub+0x296>
 800107c:	e6ff      	b.n	8000e7e <__aeabi_fsub+0x96>
 800107e:	0030      	movs	r0, r6
 8001080:	4460      	add	r0, ip
 8001082:	0143      	lsls	r3, r0, #5
 8001084:	d592      	bpl.n	8000fac <__aeabi_fsub+0x1c4>
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <__aeabi_fsub+0x348>)
 8001088:	3501      	adds	r5, #1
 800108a:	4018      	ands	r0, r3
 800108c:	e78e      	b.n	8000fac <__aeabi_fsub+0x1c4>
 800108e:	4663      	mov	r3, ip
 8001090:	2b00      	cmp	r3, #0
 8001092:	d047      	beq.n	8001124 <__aeabi_fsub+0x33c>
 8001094:	1e4b      	subs	r3, r1, #1
 8001096:	2901      	cmp	r1, #1
 8001098:	d015      	beq.n	80010c6 <__aeabi_fsub+0x2de>
 800109a:	29ff      	cmp	r1, #255	; 0xff
 800109c:	d02b      	beq.n	80010f6 <__aeabi_fsub+0x30e>
 800109e:	0019      	movs	r1, r3
 80010a0:	e74e      	b.n	8000f40 <__aeabi_fsub+0x158>
 80010a2:	000c      	movs	r4, r1
 80010a4:	464b      	mov	r3, r9
 80010a6:	003d      	movs	r5, r7
 80010a8:	e784      	b.n	8000fb4 <__aeabi_fsub+0x1cc>
 80010aa:	4662      	mov	r2, ip
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	d18b      	bne.n	8000fc8 <__aeabi_fsub+0x1e0>
 80010b0:	2e00      	cmp	r6, #0
 80010b2:	d192      	bne.n	8000fda <__aeabi_fsub+0x1f2>
 80010b4:	2780      	movs	r7, #128	; 0x80
 80010b6:	2400      	movs	r4, #0
 80010b8:	22ff      	movs	r2, #255	; 0xff
 80010ba:	03ff      	lsls	r7, r7, #15
 80010bc:	e6df      	b.n	8000e7e <__aeabi_fsub+0x96>
 80010be:	4663      	mov	r3, ip
 80010c0:	000c      	movs	r4, r1
 80010c2:	1af7      	subs	r7, r6, r3
 80010c4:	e6bf      	b.n	8000e46 <__aeabi_fsub+0x5e>
 80010c6:	0030      	movs	r0, r6
 80010c8:	4460      	add	r0, ip
 80010ca:	2501      	movs	r5, #1
 80010cc:	0143      	lsls	r3, r0, #5
 80010ce:	d400      	bmi.n	80010d2 <__aeabi_fsub+0x2ea>
 80010d0:	e76c      	b.n	8000fac <__aeabi_fsub+0x1c4>
 80010d2:	2502      	movs	r5, #2
 80010d4:	e6f2      	b.n	8000ebc <__aeabi_fsub+0xd4>
 80010d6:	4663      	mov	r3, ip
 80010d8:	2501      	movs	r5, #1
 80010da:	1b98      	subs	r0, r3, r6
 80010dc:	e6ae      	b.n	8000e3c <__aeabi_fsub+0x54>
 80010de:	2320      	movs	r3, #32
 80010e0:	4664      	mov	r4, ip
 80010e2:	4660      	mov	r0, ip
 80010e4:	40fc      	lsrs	r4, r7
 80010e6:	1bdf      	subs	r7, r3, r7
 80010e8:	40b8      	lsls	r0, r7
 80010ea:	1e43      	subs	r3, r0, #1
 80010ec:	4198      	sbcs	r0, r3
 80010ee:	4320      	orrs	r0, r4
 80010f0:	e79f      	b.n	8001032 <__aeabi_fsub+0x24a>
 80010f2:	0005      	movs	r5, r0
 80010f4:	e75e      	b.n	8000fb4 <__aeabi_fsub+0x1cc>
 80010f6:	464b      	mov	r3, r9
 80010f8:	e771      	b.n	8000fde <__aeabi_fsub+0x1f6>
 80010fa:	2320      	movs	r3, #32
 80010fc:	4665      	mov	r5, ip
 80010fe:	4660      	mov	r0, ip
 8001100:	40cd      	lsrs	r5, r1
 8001102:	1a59      	subs	r1, r3, r1
 8001104:	4088      	lsls	r0, r1
 8001106:	1e43      	subs	r3, r0, #1
 8001108:	4198      	sbcs	r0, r3
 800110a:	4328      	orrs	r0, r5
 800110c:	e71c      	b.n	8000f48 <__aeabi_fsub+0x160>
 800110e:	4663      	mov	r3, ip
 8001110:	000c      	movs	r4, r1
 8001112:	2501      	movs	r5, #1
 8001114:	1af0      	subs	r0, r6, r3
 8001116:	e691      	b.n	8000e3c <__aeabi_fsub+0x54>
 8001118:	2e00      	cmp	r6, #0
 800111a:	d095      	beq.n	8001048 <__aeabi_fsub+0x260>
 800111c:	000c      	movs	r4, r1
 800111e:	464f      	mov	r7, r9
 8001120:	2200      	movs	r2, #0
 8001122:	e6ac      	b.n	8000e7e <__aeabi_fsub+0x96>
 8001124:	464b      	mov	r3, r9
 8001126:	000d      	movs	r5, r1
 8001128:	e744      	b.n	8000fb4 <__aeabi_fsub+0x1cc>
 800112a:	464f      	mov	r7, r9
 800112c:	2200      	movs	r2, #0
 800112e:	e6a6      	b.n	8000e7e <__aeabi_fsub+0x96>
 8001130:	fbffffff 	.word	0xfbffffff
 8001134:	7dffffff 	.word	0x7dffffff
 8001138:	2800      	cmp	r0, #0
 800113a:	d000      	beq.n	800113e <__aeabi_fsub+0x356>
 800113c:	e736      	b.n	8000fac <__aeabi_fsub+0x1c4>
 800113e:	2400      	movs	r4, #0
 8001140:	2700      	movs	r7, #0
 8001142:	e69c      	b.n	8000e7e <__aeabi_fsub+0x96>

08001144 <__aeabi_f2iz>:
 8001144:	0241      	lsls	r1, r0, #9
 8001146:	0042      	lsls	r2, r0, #1
 8001148:	0fc3      	lsrs	r3, r0, #31
 800114a:	0a49      	lsrs	r1, r1, #9
 800114c:	2000      	movs	r0, #0
 800114e:	0e12      	lsrs	r2, r2, #24
 8001150:	2a7e      	cmp	r2, #126	; 0x7e
 8001152:	dd03      	ble.n	800115c <__aeabi_f2iz+0x18>
 8001154:	2a9d      	cmp	r2, #157	; 0x9d
 8001156:	dd02      	ble.n	800115e <__aeabi_f2iz+0x1a>
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <__aeabi_f2iz+0x3c>)
 800115a:	1898      	adds	r0, r3, r2
 800115c:	4770      	bx	lr
 800115e:	2080      	movs	r0, #128	; 0x80
 8001160:	0400      	lsls	r0, r0, #16
 8001162:	4301      	orrs	r1, r0
 8001164:	2a95      	cmp	r2, #149	; 0x95
 8001166:	dc07      	bgt.n	8001178 <__aeabi_f2iz+0x34>
 8001168:	2096      	movs	r0, #150	; 0x96
 800116a:	1a82      	subs	r2, r0, r2
 800116c:	40d1      	lsrs	r1, r2
 800116e:	4248      	negs	r0, r1
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1f3      	bne.n	800115c <__aeabi_f2iz+0x18>
 8001174:	0008      	movs	r0, r1
 8001176:	e7f1      	b.n	800115c <__aeabi_f2iz+0x18>
 8001178:	3a96      	subs	r2, #150	; 0x96
 800117a:	4091      	lsls	r1, r2
 800117c:	e7f7      	b.n	800116e <__aeabi_f2iz+0x2a>
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	7fffffff 	.word	0x7fffffff

08001184 <__aeabi_ui2f>:
 8001184:	b570      	push	{r4, r5, r6, lr}
 8001186:	1e05      	subs	r5, r0, #0
 8001188:	d00e      	beq.n	80011a8 <__aeabi_ui2f+0x24>
 800118a:	f001 fe07 	bl	8002d9c <__clzsi2>
 800118e:	239e      	movs	r3, #158	; 0x9e
 8001190:	0004      	movs	r4, r0
 8001192:	1a1b      	subs	r3, r3, r0
 8001194:	2b96      	cmp	r3, #150	; 0x96
 8001196:	dc0c      	bgt.n	80011b2 <__aeabi_ui2f+0x2e>
 8001198:	2808      	cmp	r0, #8
 800119a:	dd01      	ble.n	80011a0 <__aeabi_ui2f+0x1c>
 800119c:	3c08      	subs	r4, #8
 800119e:	40a5      	lsls	r5, r4
 80011a0:	026d      	lsls	r5, r5, #9
 80011a2:	0a6d      	lsrs	r5, r5, #9
 80011a4:	b2d8      	uxtb	r0, r3
 80011a6:	e001      	b.n	80011ac <__aeabi_ui2f+0x28>
 80011a8:	2000      	movs	r0, #0
 80011aa:	2500      	movs	r5, #0
 80011ac:	05c0      	lsls	r0, r0, #23
 80011ae:	4328      	orrs	r0, r5
 80011b0:	bd70      	pop	{r4, r5, r6, pc}
 80011b2:	2b99      	cmp	r3, #153	; 0x99
 80011b4:	dd09      	ble.n	80011ca <__aeabi_ui2f+0x46>
 80011b6:	0002      	movs	r2, r0
 80011b8:	0029      	movs	r1, r5
 80011ba:	321b      	adds	r2, #27
 80011bc:	4091      	lsls	r1, r2
 80011be:	1e4a      	subs	r2, r1, #1
 80011c0:	4191      	sbcs	r1, r2
 80011c2:	2205      	movs	r2, #5
 80011c4:	1a12      	subs	r2, r2, r0
 80011c6:	40d5      	lsrs	r5, r2
 80011c8:	430d      	orrs	r5, r1
 80011ca:	2c05      	cmp	r4, #5
 80011cc:	dc12      	bgt.n	80011f4 <__aeabi_ui2f+0x70>
 80011ce:	0029      	movs	r1, r5
 80011d0:	4e0c      	ldr	r6, [pc, #48]	; (8001204 <__aeabi_ui2f+0x80>)
 80011d2:	4031      	ands	r1, r6
 80011d4:	076a      	lsls	r2, r5, #29
 80011d6:	d009      	beq.n	80011ec <__aeabi_ui2f+0x68>
 80011d8:	200f      	movs	r0, #15
 80011da:	4028      	ands	r0, r5
 80011dc:	2804      	cmp	r0, #4
 80011de:	d005      	beq.n	80011ec <__aeabi_ui2f+0x68>
 80011e0:	3104      	adds	r1, #4
 80011e2:	014a      	lsls	r2, r1, #5
 80011e4:	d502      	bpl.n	80011ec <__aeabi_ui2f+0x68>
 80011e6:	239f      	movs	r3, #159	; 0x9f
 80011e8:	4031      	ands	r1, r6
 80011ea:	1b1b      	subs	r3, r3, r4
 80011ec:	0189      	lsls	r1, r1, #6
 80011ee:	0a4d      	lsrs	r5, r1, #9
 80011f0:	b2d8      	uxtb	r0, r3
 80011f2:	e7db      	b.n	80011ac <__aeabi_ui2f+0x28>
 80011f4:	1f62      	subs	r2, r4, #5
 80011f6:	4095      	lsls	r5, r2
 80011f8:	0029      	movs	r1, r5
 80011fa:	4e02      	ldr	r6, [pc, #8]	; (8001204 <__aeabi_ui2f+0x80>)
 80011fc:	4031      	ands	r1, r6
 80011fe:	076a      	lsls	r2, r5, #29
 8001200:	d0f4      	beq.n	80011ec <__aeabi_ui2f+0x68>
 8001202:	e7e9      	b.n	80011d8 <__aeabi_ui2f+0x54>
 8001204:	fbffffff 	.word	0xfbffffff

08001208 <__aeabi_dadd>:
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
 800120a:	464f      	mov	r7, r9
 800120c:	4646      	mov	r6, r8
 800120e:	46d6      	mov	lr, sl
 8001210:	000d      	movs	r5, r1
 8001212:	0004      	movs	r4, r0
 8001214:	b5c0      	push	{r6, r7, lr}
 8001216:	001f      	movs	r7, r3
 8001218:	0011      	movs	r1, r2
 800121a:	0328      	lsls	r0, r5, #12
 800121c:	0f62      	lsrs	r2, r4, #29
 800121e:	0a40      	lsrs	r0, r0, #9
 8001220:	4310      	orrs	r0, r2
 8001222:	007a      	lsls	r2, r7, #1
 8001224:	0d52      	lsrs	r2, r2, #21
 8001226:	00e3      	lsls	r3, r4, #3
 8001228:	033c      	lsls	r4, r7, #12
 800122a:	4691      	mov	r9, r2
 800122c:	0a64      	lsrs	r4, r4, #9
 800122e:	0ffa      	lsrs	r2, r7, #31
 8001230:	0f4f      	lsrs	r7, r1, #29
 8001232:	006e      	lsls	r6, r5, #1
 8001234:	4327      	orrs	r7, r4
 8001236:	4692      	mov	sl, r2
 8001238:	46b8      	mov	r8, r7
 800123a:	0d76      	lsrs	r6, r6, #21
 800123c:	0fed      	lsrs	r5, r5, #31
 800123e:	00c9      	lsls	r1, r1, #3
 8001240:	4295      	cmp	r5, r2
 8001242:	d100      	bne.n	8001246 <__aeabi_dadd+0x3e>
 8001244:	e099      	b.n	800137a <__aeabi_dadd+0x172>
 8001246:	464c      	mov	r4, r9
 8001248:	1b34      	subs	r4, r6, r4
 800124a:	46a4      	mov	ip, r4
 800124c:	2c00      	cmp	r4, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_dadd+0x4a>
 8001250:	e07c      	b.n	800134c <__aeabi_dadd+0x144>
 8001252:	464a      	mov	r2, r9
 8001254:	2a00      	cmp	r2, #0
 8001256:	d100      	bne.n	800125a <__aeabi_dadd+0x52>
 8001258:	e0b8      	b.n	80013cc <__aeabi_dadd+0x1c4>
 800125a:	4ac5      	ldr	r2, [pc, #788]	; (8001570 <__aeabi_dadd+0x368>)
 800125c:	4296      	cmp	r6, r2
 800125e:	d100      	bne.n	8001262 <__aeabi_dadd+0x5a>
 8001260:	e11c      	b.n	800149c <__aeabi_dadd+0x294>
 8001262:	2280      	movs	r2, #128	; 0x80
 8001264:	003c      	movs	r4, r7
 8001266:	0412      	lsls	r2, r2, #16
 8001268:	4314      	orrs	r4, r2
 800126a:	46a0      	mov	r8, r4
 800126c:	4662      	mov	r2, ip
 800126e:	2a38      	cmp	r2, #56	; 0x38
 8001270:	dd00      	ble.n	8001274 <__aeabi_dadd+0x6c>
 8001272:	e161      	b.n	8001538 <__aeabi_dadd+0x330>
 8001274:	2a1f      	cmp	r2, #31
 8001276:	dd00      	ble.n	800127a <__aeabi_dadd+0x72>
 8001278:	e1cc      	b.n	8001614 <__aeabi_dadd+0x40c>
 800127a:	4664      	mov	r4, ip
 800127c:	2220      	movs	r2, #32
 800127e:	1b12      	subs	r2, r2, r4
 8001280:	4644      	mov	r4, r8
 8001282:	4094      	lsls	r4, r2
 8001284:	000f      	movs	r7, r1
 8001286:	46a1      	mov	r9, r4
 8001288:	4664      	mov	r4, ip
 800128a:	4091      	lsls	r1, r2
 800128c:	40e7      	lsrs	r7, r4
 800128e:	464c      	mov	r4, r9
 8001290:	1e4a      	subs	r2, r1, #1
 8001292:	4191      	sbcs	r1, r2
 8001294:	433c      	orrs	r4, r7
 8001296:	4642      	mov	r2, r8
 8001298:	4321      	orrs	r1, r4
 800129a:	4664      	mov	r4, ip
 800129c:	40e2      	lsrs	r2, r4
 800129e:	1a80      	subs	r0, r0, r2
 80012a0:	1a5c      	subs	r4, r3, r1
 80012a2:	42a3      	cmp	r3, r4
 80012a4:	419b      	sbcs	r3, r3
 80012a6:	425f      	negs	r7, r3
 80012a8:	1bc7      	subs	r7, r0, r7
 80012aa:	023b      	lsls	r3, r7, #8
 80012ac:	d400      	bmi.n	80012b0 <__aeabi_dadd+0xa8>
 80012ae:	e0d0      	b.n	8001452 <__aeabi_dadd+0x24a>
 80012b0:	027f      	lsls	r7, r7, #9
 80012b2:	0a7f      	lsrs	r7, r7, #9
 80012b4:	2f00      	cmp	r7, #0
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0xb2>
 80012b8:	e0ff      	b.n	80014ba <__aeabi_dadd+0x2b2>
 80012ba:	0038      	movs	r0, r7
 80012bc:	f001 fd6e 	bl	8002d9c <__clzsi2>
 80012c0:	0001      	movs	r1, r0
 80012c2:	3908      	subs	r1, #8
 80012c4:	2320      	movs	r3, #32
 80012c6:	0022      	movs	r2, r4
 80012c8:	1a5b      	subs	r3, r3, r1
 80012ca:	408f      	lsls	r7, r1
 80012cc:	40da      	lsrs	r2, r3
 80012ce:	408c      	lsls	r4, r1
 80012d0:	4317      	orrs	r7, r2
 80012d2:	42b1      	cmp	r1, r6
 80012d4:	da00      	bge.n	80012d8 <__aeabi_dadd+0xd0>
 80012d6:	e0ff      	b.n	80014d8 <__aeabi_dadd+0x2d0>
 80012d8:	1b89      	subs	r1, r1, r6
 80012da:	1c4b      	adds	r3, r1, #1
 80012dc:	2b1f      	cmp	r3, #31
 80012de:	dd00      	ble.n	80012e2 <__aeabi_dadd+0xda>
 80012e0:	e0a8      	b.n	8001434 <__aeabi_dadd+0x22c>
 80012e2:	2220      	movs	r2, #32
 80012e4:	0039      	movs	r1, r7
 80012e6:	1ad2      	subs	r2, r2, r3
 80012e8:	0020      	movs	r0, r4
 80012ea:	4094      	lsls	r4, r2
 80012ec:	4091      	lsls	r1, r2
 80012ee:	40d8      	lsrs	r0, r3
 80012f0:	1e62      	subs	r2, r4, #1
 80012f2:	4194      	sbcs	r4, r2
 80012f4:	40df      	lsrs	r7, r3
 80012f6:	2600      	movs	r6, #0
 80012f8:	4301      	orrs	r1, r0
 80012fa:	430c      	orrs	r4, r1
 80012fc:	0763      	lsls	r3, r4, #29
 80012fe:	d009      	beq.n	8001314 <__aeabi_dadd+0x10c>
 8001300:	230f      	movs	r3, #15
 8001302:	4023      	ands	r3, r4
 8001304:	2b04      	cmp	r3, #4
 8001306:	d005      	beq.n	8001314 <__aeabi_dadd+0x10c>
 8001308:	1d23      	adds	r3, r4, #4
 800130a:	42a3      	cmp	r3, r4
 800130c:	41a4      	sbcs	r4, r4
 800130e:	4264      	negs	r4, r4
 8001310:	193f      	adds	r7, r7, r4
 8001312:	001c      	movs	r4, r3
 8001314:	023b      	lsls	r3, r7, #8
 8001316:	d400      	bmi.n	800131a <__aeabi_dadd+0x112>
 8001318:	e09e      	b.n	8001458 <__aeabi_dadd+0x250>
 800131a:	4b95      	ldr	r3, [pc, #596]	; (8001570 <__aeabi_dadd+0x368>)
 800131c:	3601      	adds	r6, #1
 800131e:	429e      	cmp	r6, r3
 8001320:	d100      	bne.n	8001324 <__aeabi_dadd+0x11c>
 8001322:	e0b7      	b.n	8001494 <__aeabi_dadd+0x28c>
 8001324:	4a93      	ldr	r2, [pc, #588]	; (8001574 <__aeabi_dadd+0x36c>)
 8001326:	08e4      	lsrs	r4, r4, #3
 8001328:	4017      	ands	r7, r2
 800132a:	077b      	lsls	r3, r7, #29
 800132c:	0571      	lsls	r1, r6, #21
 800132e:	027f      	lsls	r7, r7, #9
 8001330:	4323      	orrs	r3, r4
 8001332:	0b3f      	lsrs	r7, r7, #12
 8001334:	0d4a      	lsrs	r2, r1, #21
 8001336:	0512      	lsls	r2, r2, #20
 8001338:	433a      	orrs	r2, r7
 800133a:	07ed      	lsls	r5, r5, #31
 800133c:	432a      	orrs	r2, r5
 800133e:	0018      	movs	r0, r3
 8001340:	0011      	movs	r1, r2
 8001342:	bce0      	pop	{r5, r6, r7}
 8001344:	46ba      	mov	sl, r7
 8001346:	46b1      	mov	r9, r6
 8001348:	46a8      	mov	r8, r5
 800134a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800134c:	2c00      	cmp	r4, #0
 800134e:	d04b      	beq.n	80013e8 <__aeabi_dadd+0x1e0>
 8001350:	464c      	mov	r4, r9
 8001352:	1ba4      	subs	r4, r4, r6
 8001354:	46a4      	mov	ip, r4
 8001356:	2e00      	cmp	r6, #0
 8001358:	d000      	beq.n	800135c <__aeabi_dadd+0x154>
 800135a:	e123      	b.n	80015a4 <__aeabi_dadd+0x39c>
 800135c:	0004      	movs	r4, r0
 800135e:	431c      	orrs	r4, r3
 8001360:	d100      	bne.n	8001364 <__aeabi_dadd+0x15c>
 8001362:	e1af      	b.n	80016c4 <__aeabi_dadd+0x4bc>
 8001364:	4662      	mov	r2, ip
 8001366:	1e54      	subs	r4, r2, #1
 8001368:	2a01      	cmp	r2, #1
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x166>
 800136c:	e215      	b.n	800179a <__aeabi_dadd+0x592>
 800136e:	4d80      	ldr	r5, [pc, #512]	; (8001570 <__aeabi_dadd+0x368>)
 8001370:	45ac      	cmp	ip, r5
 8001372:	d100      	bne.n	8001376 <__aeabi_dadd+0x16e>
 8001374:	e1c8      	b.n	8001708 <__aeabi_dadd+0x500>
 8001376:	46a4      	mov	ip, r4
 8001378:	e11b      	b.n	80015b2 <__aeabi_dadd+0x3aa>
 800137a:	464a      	mov	r2, r9
 800137c:	1ab2      	subs	r2, r6, r2
 800137e:	4694      	mov	ip, r2
 8001380:	2a00      	cmp	r2, #0
 8001382:	dc00      	bgt.n	8001386 <__aeabi_dadd+0x17e>
 8001384:	e0ac      	b.n	80014e0 <__aeabi_dadd+0x2d8>
 8001386:	464a      	mov	r2, r9
 8001388:	2a00      	cmp	r2, #0
 800138a:	d043      	beq.n	8001414 <__aeabi_dadd+0x20c>
 800138c:	4a78      	ldr	r2, [pc, #480]	; (8001570 <__aeabi_dadd+0x368>)
 800138e:	4296      	cmp	r6, r2
 8001390:	d100      	bne.n	8001394 <__aeabi_dadd+0x18c>
 8001392:	e1af      	b.n	80016f4 <__aeabi_dadd+0x4ec>
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	003c      	movs	r4, r7
 8001398:	0412      	lsls	r2, r2, #16
 800139a:	4314      	orrs	r4, r2
 800139c:	46a0      	mov	r8, r4
 800139e:	4662      	mov	r2, ip
 80013a0:	2a38      	cmp	r2, #56	; 0x38
 80013a2:	dc67      	bgt.n	8001474 <__aeabi_dadd+0x26c>
 80013a4:	2a1f      	cmp	r2, #31
 80013a6:	dc00      	bgt.n	80013aa <__aeabi_dadd+0x1a2>
 80013a8:	e15f      	b.n	800166a <__aeabi_dadd+0x462>
 80013aa:	4647      	mov	r7, r8
 80013ac:	3a20      	subs	r2, #32
 80013ae:	40d7      	lsrs	r7, r2
 80013b0:	4662      	mov	r2, ip
 80013b2:	2a20      	cmp	r2, #32
 80013b4:	d005      	beq.n	80013c2 <__aeabi_dadd+0x1ba>
 80013b6:	4664      	mov	r4, ip
 80013b8:	2240      	movs	r2, #64	; 0x40
 80013ba:	1b12      	subs	r2, r2, r4
 80013bc:	4644      	mov	r4, r8
 80013be:	4094      	lsls	r4, r2
 80013c0:	4321      	orrs	r1, r4
 80013c2:	1e4a      	subs	r2, r1, #1
 80013c4:	4191      	sbcs	r1, r2
 80013c6:	000c      	movs	r4, r1
 80013c8:	433c      	orrs	r4, r7
 80013ca:	e057      	b.n	800147c <__aeabi_dadd+0x274>
 80013cc:	003a      	movs	r2, r7
 80013ce:	430a      	orrs	r2, r1
 80013d0:	d100      	bne.n	80013d4 <__aeabi_dadd+0x1cc>
 80013d2:	e105      	b.n	80015e0 <__aeabi_dadd+0x3d8>
 80013d4:	0022      	movs	r2, r4
 80013d6:	3a01      	subs	r2, #1
 80013d8:	2c01      	cmp	r4, #1
 80013da:	d100      	bne.n	80013de <__aeabi_dadd+0x1d6>
 80013dc:	e182      	b.n	80016e4 <__aeabi_dadd+0x4dc>
 80013de:	4c64      	ldr	r4, [pc, #400]	; (8001570 <__aeabi_dadd+0x368>)
 80013e0:	45a4      	cmp	ip, r4
 80013e2:	d05b      	beq.n	800149c <__aeabi_dadd+0x294>
 80013e4:	4694      	mov	ip, r2
 80013e6:	e741      	b.n	800126c <__aeabi_dadd+0x64>
 80013e8:	4c63      	ldr	r4, [pc, #396]	; (8001578 <__aeabi_dadd+0x370>)
 80013ea:	1c77      	adds	r7, r6, #1
 80013ec:	4227      	tst	r7, r4
 80013ee:	d000      	beq.n	80013f2 <__aeabi_dadd+0x1ea>
 80013f0:	e0c4      	b.n	800157c <__aeabi_dadd+0x374>
 80013f2:	0004      	movs	r4, r0
 80013f4:	431c      	orrs	r4, r3
 80013f6:	2e00      	cmp	r6, #0
 80013f8:	d000      	beq.n	80013fc <__aeabi_dadd+0x1f4>
 80013fa:	e169      	b.n	80016d0 <__aeabi_dadd+0x4c8>
 80013fc:	2c00      	cmp	r4, #0
 80013fe:	d100      	bne.n	8001402 <__aeabi_dadd+0x1fa>
 8001400:	e1bf      	b.n	8001782 <__aeabi_dadd+0x57a>
 8001402:	4644      	mov	r4, r8
 8001404:	430c      	orrs	r4, r1
 8001406:	d000      	beq.n	800140a <__aeabi_dadd+0x202>
 8001408:	e1d0      	b.n	80017ac <__aeabi_dadd+0x5a4>
 800140a:	0742      	lsls	r2, r0, #29
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	4313      	orrs	r3, r2
 8001410:	08c0      	lsrs	r0, r0, #3
 8001412:	e029      	b.n	8001468 <__aeabi_dadd+0x260>
 8001414:	003a      	movs	r2, r7
 8001416:	430a      	orrs	r2, r1
 8001418:	d100      	bne.n	800141c <__aeabi_dadd+0x214>
 800141a:	e170      	b.n	80016fe <__aeabi_dadd+0x4f6>
 800141c:	4662      	mov	r2, ip
 800141e:	4664      	mov	r4, ip
 8001420:	3a01      	subs	r2, #1
 8001422:	2c01      	cmp	r4, #1
 8001424:	d100      	bne.n	8001428 <__aeabi_dadd+0x220>
 8001426:	e0e0      	b.n	80015ea <__aeabi_dadd+0x3e2>
 8001428:	4c51      	ldr	r4, [pc, #324]	; (8001570 <__aeabi_dadd+0x368>)
 800142a:	45a4      	cmp	ip, r4
 800142c:	d100      	bne.n	8001430 <__aeabi_dadd+0x228>
 800142e:	e161      	b.n	80016f4 <__aeabi_dadd+0x4ec>
 8001430:	4694      	mov	ip, r2
 8001432:	e7b4      	b.n	800139e <__aeabi_dadd+0x196>
 8001434:	003a      	movs	r2, r7
 8001436:	391f      	subs	r1, #31
 8001438:	40ca      	lsrs	r2, r1
 800143a:	0011      	movs	r1, r2
 800143c:	2b20      	cmp	r3, #32
 800143e:	d003      	beq.n	8001448 <__aeabi_dadd+0x240>
 8001440:	2240      	movs	r2, #64	; 0x40
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	409f      	lsls	r7, r3
 8001446:	433c      	orrs	r4, r7
 8001448:	1e63      	subs	r3, r4, #1
 800144a:	419c      	sbcs	r4, r3
 800144c:	2700      	movs	r7, #0
 800144e:	2600      	movs	r6, #0
 8001450:	430c      	orrs	r4, r1
 8001452:	0763      	lsls	r3, r4, #29
 8001454:	d000      	beq.n	8001458 <__aeabi_dadd+0x250>
 8001456:	e753      	b.n	8001300 <__aeabi_dadd+0xf8>
 8001458:	46b4      	mov	ip, r6
 800145a:	08e4      	lsrs	r4, r4, #3
 800145c:	077b      	lsls	r3, r7, #29
 800145e:	4323      	orrs	r3, r4
 8001460:	08f8      	lsrs	r0, r7, #3
 8001462:	4a43      	ldr	r2, [pc, #268]	; (8001570 <__aeabi_dadd+0x368>)
 8001464:	4594      	cmp	ip, r2
 8001466:	d01d      	beq.n	80014a4 <__aeabi_dadd+0x29c>
 8001468:	4662      	mov	r2, ip
 800146a:	0307      	lsls	r7, r0, #12
 800146c:	0552      	lsls	r2, r2, #21
 800146e:	0b3f      	lsrs	r7, r7, #12
 8001470:	0d52      	lsrs	r2, r2, #21
 8001472:	e760      	b.n	8001336 <__aeabi_dadd+0x12e>
 8001474:	4644      	mov	r4, r8
 8001476:	430c      	orrs	r4, r1
 8001478:	1e62      	subs	r2, r4, #1
 800147a:	4194      	sbcs	r4, r2
 800147c:	18e4      	adds	r4, r4, r3
 800147e:	429c      	cmp	r4, r3
 8001480:	419b      	sbcs	r3, r3
 8001482:	425f      	negs	r7, r3
 8001484:	183f      	adds	r7, r7, r0
 8001486:	023b      	lsls	r3, r7, #8
 8001488:	d5e3      	bpl.n	8001452 <__aeabi_dadd+0x24a>
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <__aeabi_dadd+0x368>)
 800148c:	3601      	adds	r6, #1
 800148e:	429e      	cmp	r6, r3
 8001490:	d000      	beq.n	8001494 <__aeabi_dadd+0x28c>
 8001492:	e0b5      	b.n	8001600 <__aeabi_dadd+0x3f8>
 8001494:	0032      	movs	r2, r6
 8001496:	2700      	movs	r7, #0
 8001498:	2300      	movs	r3, #0
 800149a:	e74c      	b.n	8001336 <__aeabi_dadd+0x12e>
 800149c:	0742      	lsls	r2, r0, #29
 800149e:	08db      	lsrs	r3, r3, #3
 80014a0:	4313      	orrs	r3, r2
 80014a2:	08c0      	lsrs	r0, r0, #3
 80014a4:	001a      	movs	r2, r3
 80014a6:	4302      	orrs	r2, r0
 80014a8:	d100      	bne.n	80014ac <__aeabi_dadd+0x2a4>
 80014aa:	e1e1      	b.n	8001870 <__aeabi_dadd+0x668>
 80014ac:	2780      	movs	r7, #128	; 0x80
 80014ae:	033f      	lsls	r7, r7, #12
 80014b0:	4307      	orrs	r7, r0
 80014b2:	033f      	lsls	r7, r7, #12
 80014b4:	4a2e      	ldr	r2, [pc, #184]	; (8001570 <__aeabi_dadd+0x368>)
 80014b6:	0b3f      	lsrs	r7, r7, #12
 80014b8:	e73d      	b.n	8001336 <__aeabi_dadd+0x12e>
 80014ba:	0020      	movs	r0, r4
 80014bc:	f001 fc6e 	bl	8002d9c <__clzsi2>
 80014c0:	0001      	movs	r1, r0
 80014c2:	3118      	adds	r1, #24
 80014c4:	291f      	cmp	r1, #31
 80014c6:	dc00      	bgt.n	80014ca <__aeabi_dadd+0x2c2>
 80014c8:	e6fc      	b.n	80012c4 <__aeabi_dadd+0xbc>
 80014ca:	3808      	subs	r0, #8
 80014cc:	4084      	lsls	r4, r0
 80014ce:	0027      	movs	r7, r4
 80014d0:	2400      	movs	r4, #0
 80014d2:	42b1      	cmp	r1, r6
 80014d4:	db00      	blt.n	80014d8 <__aeabi_dadd+0x2d0>
 80014d6:	e6ff      	b.n	80012d8 <__aeabi_dadd+0xd0>
 80014d8:	4a26      	ldr	r2, [pc, #152]	; (8001574 <__aeabi_dadd+0x36c>)
 80014da:	1a76      	subs	r6, r6, r1
 80014dc:	4017      	ands	r7, r2
 80014de:	e70d      	b.n	80012fc <__aeabi_dadd+0xf4>
 80014e0:	2a00      	cmp	r2, #0
 80014e2:	d02f      	beq.n	8001544 <__aeabi_dadd+0x33c>
 80014e4:	464a      	mov	r2, r9
 80014e6:	1b92      	subs	r2, r2, r6
 80014e8:	4694      	mov	ip, r2
 80014ea:	2e00      	cmp	r6, #0
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dadd+0x2e8>
 80014ee:	e0ad      	b.n	800164c <__aeabi_dadd+0x444>
 80014f0:	4a1f      	ldr	r2, [pc, #124]	; (8001570 <__aeabi_dadd+0x368>)
 80014f2:	4591      	cmp	r9, r2
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dadd+0x2f0>
 80014f6:	e10f      	b.n	8001718 <__aeabi_dadd+0x510>
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	0412      	lsls	r2, r2, #16
 80014fc:	4310      	orrs	r0, r2
 80014fe:	4662      	mov	r2, ip
 8001500:	2a38      	cmp	r2, #56	; 0x38
 8001502:	dd00      	ble.n	8001506 <__aeabi_dadd+0x2fe>
 8001504:	e10f      	b.n	8001726 <__aeabi_dadd+0x51e>
 8001506:	2a1f      	cmp	r2, #31
 8001508:	dd00      	ble.n	800150c <__aeabi_dadd+0x304>
 800150a:	e180      	b.n	800180e <__aeabi_dadd+0x606>
 800150c:	4664      	mov	r4, ip
 800150e:	2220      	movs	r2, #32
 8001510:	001e      	movs	r6, r3
 8001512:	1b12      	subs	r2, r2, r4
 8001514:	4667      	mov	r7, ip
 8001516:	0004      	movs	r4, r0
 8001518:	4093      	lsls	r3, r2
 800151a:	4094      	lsls	r4, r2
 800151c:	40fe      	lsrs	r6, r7
 800151e:	1e5a      	subs	r2, r3, #1
 8001520:	4193      	sbcs	r3, r2
 8001522:	40f8      	lsrs	r0, r7
 8001524:	4334      	orrs	r4, r6
 8001526:	431c      	orrs	r4, r3
 8001528:	4480      	add	r8, r0
 800152a:	1864      	adds	r4, r4, r1
 800152c:	428c      	cmp	r4, r1
 800152e:	41bf      	sbcs	r7, r7
 8001530:	427f      	negs	r7, r7
 8001532:	464e      	mov	r6, r9
 8001534:	4447      	add	r7, r8
 8001536:	e7a6      	b.n	8001486 <__aeabi_dadd+0x27e>
 8001538:	4642      	mov	r2, r8
 800153a:	430a      	orrs	r2, r1
 800153c:	0011      	movs	r1, r2
 800153e:	1e4a      	subs	r2, r1, #1
 8001540:	4191      	sbcs	r1, r2
 8001542:	e6ad      	b.n	80012a0 <__aeabi_dadd+0x98>
 8001544:	4c0c      	ldr	r4, [pc, #48]	; (8001578 <__aeabi_dadd+0x370>)
 8001546:	1c72      	adds	r2, r6, #1
 8001548:	4222      	tst	r2, r4
 800154a:	d000      	beq.n	800154e <__aeabi_dadd+0x346>
 800154c:	e0a1      	b.n	8001692 <__aeabi_dadd+0x48a>
 800154e:	0002      	movs	r2, r0
 8001550:	431a      	orrs	r2, r3
 8001552:	2e00      	cmp	r6, #0
 8001554:	d000      	beq.n	8001558 <__aeabi_dadd+0x350>
 8001556:	e0fa      	b.n	800174e <__aeabi_dadd+0x546>
 8001558:	2a00      	cmp	r2, #0
 800155a:	d100      	bne.n	800155e <__aeabi_dadd+0x356>
 800155c:	e145      	b.n	80017ea <__aeabi_dadd+0x5e2>
 800155e:	003a      	movs	r2, r7
 8001560:	430a      	orrs	r2, r1
 8001562:	d000      	beq.n	8001566 <__aeabi_dadd+0x35e>
 8001564:	e146      	b.n	80017f4 <__aeabi_dadd+0x5ec>
 8001566:	0742      	lsls	r2, r0, #29
 8001568:	08db      	lsrs	r3, r3, #3
 800156a:	4313      	orrs	r3, r2
 800156c:	08c0      	lsrs	r0, r0, #3
 800156e:	e77b      	b.n	8001468 <__aeabi_dadd+0x260>
 8001570:	000007ff 	.word	0x000007ff
 8001574:	ff7fffff 	.word	0xff7fffff
 8001578:	000007fe 	.word	0x000007fe
 800157c:	4647      	mov	r7, r8
 800157e:	1a5c      	subs	r4, r3, r1
 8001580:	1bc2      	subs	r2, r0, r7
 8001582:	42a3      	cmp	r3, r4
 8001584:	41bf      	sbcs	r7, r7
 8001586:	427f      	negs	r7, r7
 8001588:	46b9      	mov	r9, r7
 800158a:	0017      	movs	r7, r2
 800158c:	464a      	mov	r2, r9
 800158e:	1abf      	subs	r7, r7, r2
 8001590:	023a      	lsls	r2, r7, #8
 8001592:	d500      	bpl.n	8001596 <__aeabi_dadd+0x38e>
 8001594:	e08d      	b.n	80016b2 <__aeabi_dadd+0x4aa>
 8001596:	0023      	movs	r3, r4
 8001598:	433b      	orrs	r3, r7
 800159a:	d000      	beq.n	800159e <__aeabi_dadd+0x396>
 800159c:	e68a      	b.n	80012b4 <__aeabi_dadd+0xac>
 800159e:	2000      	movs	r0, #0
 80015a0:	2500      	movs	r5, #0
 80015a2:	e761      	b.n	8001468 <__aeabi_dadd+0x260>
 80015a4:	4cb4      	ldr	r4, [pc, #720]	; (8001878 <__aeabi_dadd+0x670>)
 80015a6:	45a1      	cmp	r9, r4
 80015a8:	d100      	bne.n	80015ac <__aeabi_dadd+0x3a4>
 80015aa:	e0ad      	b.n	8001708 <__aeabi_dadd+0x500>
 80015ac:	2480      	movs	r4, #128	; 0x80
 80015ae:	0424      	lsls	r4, r4, #16
 80015b0:	4320      	orrs	r0, r4
 80015b2:	4664      	mov	r4, ip
 80015b4:	2c38      	cmp	r4, #56	; 0x38
 80015b6:	dc3d      	bgt.n	8001634 <__aeabi_dadd+0x42c>
 80015b8:	4662      	mov	r2, ip
 80015ba:	2c1f      	cmp	r4, #31
 80015bc:	dd00      	ble.n	80015c0 <__aeabi_dadd+0x3b8>
 80015be:	e0b7      	b.n	8001730 <__aeabi_dadd+0x528>
 80015c0:	2520      	movs	r5, #32
 80015c2:	001e      	movs	r6, r3
 80015c4:	1b2d      	subs	r5, r5, r4
 80015c6:	0004      	movs	r4, r0
 80015c8:	40ab      	lsls	r3, r5
 80015ca:	40ac      	lsls	r4, r5
 80015cc:	40d6      	lsrs	r6, r2
 80015ce:	40d0      	lsrs	r0, r2
 80015d0:	4642      	mov	r2, r8
 80015d2:	1e5d      	subs	r5, r3, #1
 80015d4:	41ab      	sbcs	r3, r5
 80015d6:	4334      	orrs	r4, r6
 80015d8:	1a12      	subs	r2, r2, r0
 80015da:	4690      	mov	r8, r2
 80015dc:	4323      	orrs	r3, r4
 80015de:	e02c      	b.n	800163a <__aeabi_dadd+0x432>
 80015e0:	0742      	lsls	r2, r0, #29
 80015e2:	08db      	lsrs	r3, r3, #3
 80015e4:	4313      	orrs	r3, r2
 80015e6:	08c0      	lsrs	r0, r0, #3
 80015e8:	e73b      	b.n	8001462 <__aeabi_dadd+0x25a>
 80015ea:	185c      	adds	r4, r3, r1
 80015ec:	429c      	cmp	r4, r3
 80015ee:	419b      	sbcs	r3, r3
 80015f0:	4440      	add	r0, r8
 80015f2:	425b      	negs	r3, r3
 80015f4:	18c7      	adds	r7, r0, r3
 80015f6:	2601      	movs	r6, #1
 80015f8:	023b      	lsls	r3, r7, #8
 80015fa:	d400      	bmi.n	80015fe <__aeabi_dadd+0x3f6>
 80015fc:	e729      	b.n	8001452 <__aeabi_dadd+0x24a>
 80015fe:	2602      	movs	r6, #2
 8001600:	4a9e      	ldr	r2, [pc, #632]	; (800187c <__aeabi_dadd+0x674>)
 8001602:	0863      	lsrs	r3, r4, #1
 8001604:	4017      	ands	r7, r2
 8001606:	2201      	movs	r2, #1
 8001608:	4014      	ands	r4, r2
 800160a:	431c      	orrs	r4, r3
 800160c:	07fb      	lsls	r3, r7, #31
 800160e:	431c      	orrs	r4, r3
 8001610:	087f      	lsrs	r7, r7, #1
 8001612:	e673      	b.n	80012fc <__aeabi_dadd+0xf4>
 8001614:	4644      	mov	r4, r8
 8001616:	3a20      	subs	r2, #32
 8001618:	40d4      	lsrs	r4, r2
 800161a:	4662      	mov	r2, ip
 800161c:	2a20      	cmp	r2, #32
 800161e:	d005      	beq.n	800162c <__aeabi_dadd+0x424>
 8001620:	4667      	mov	r7, ip
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	1bd2      	subs	r2, r2, r7
 8001626:	4647      	mov	r7, r8
 8001628:	4097      	lsls	r7, r2
 800162a:	4339      	orrs	r1, r7
 800162c:	1e4a      	subs	r2, r1, #1
 800162e:	4191      	sbcs	r1, r2
 8001630:	4321      	orrs	r1, r4
 8001632:	e635      	b.n	80012a0 <__aeabi_dadd+0x98>
 8001634:	4303      	orrs	r3, r0
 8001636:	1e58      	subs	r0, r3, #1
 8001638:	4183      	sbcs	r3, r0
 800163a:	1acc      	subs	r4, r1, r3
 800163c:	42a1      	cmp	r1, r4
 800163e:	41bf      	sbcs	r7, r7
 8001640:	4643      	mov	r3, r8
 8001642:	427f      	negs	r7, r7
 8001644:	4655      	mov	r5, sl
 8001646:	464e      	mov	r6, r9
 8001648:	1bdf      	subs	r7, r3, r7
 800164a:	e62e      	b.n	80012aa <__aeabi_dadd+0xa2>
 800164c:	0002      	movs	r2, r0
 800164e:	431a      	orrs	r2, r3
 8001650:	d100      	bne.n	8001654 <__aeabi_dadd+0x44c>
 8001652:	e0bd      	b.n	80017d0 <__aeabi_dadd+0x5c8>
 8001654:	4662      	mov	r2, ip
 8001656:	4664      	mov	r4, ip
 8001658:	3a01      	subs	r2, #1
 800165a:	2c01      	cmp	r4, #1
 800165c:	d100      	bne.n	8001660 <__aeabi_dadd+0x458>
 800165e:	e0e5      	b.n	800182c <__aeabi_dadd+0x624>
 8001660:	4c85      	ldr	r4, [pc, #532]	; (8001878 <__aeabi_dadd+0x670>)
 8001662:	45a4      	cmp	ip, r4
 8001664:	d058      	beq.n	8001718 <__aeabi_dadd+0x510>
 8001666:	4694      	mov	ip, r2
 8001668:	e749      	b.n	80014fe <__aeabi_dadd+0x2f6>
 800166a:	4664      	mov	r4, ip
 800166c:	2220      	movs	r2, #32
 800166e:	1b12      	subs	r2, r2, r4
 8001670:	4644      	mov	r4, r8
 8001672:	4094      	lsls	r4, r2
 8001674:	000f      	movs	r7, r1
 8001676:	46a1      	mov	r9, r4
 8001678:	4664      	mov	r4, ip
 800167a:	4091      	lsls	r1, r2
 800167c:	40e7      	lsrs	r7, r4
 800167e:	464c      	mov	r4, r9
 8001680:	1e4a      	subs	r2, r1, #1
 8001682:	4191      	sbcs	r1, r2
 8001684:	433c      	orrs	r4, r7
 8001686:	4642      	mov	r2, r8
 8001688:	430c      	orrs	r4, r1
 800168a:	4661      	mov	r1, ip
 800168c:	40ca      	lsrs	r2, r1
 800168e:	1880      	adds	r0, r0, r2
 8001690:	e6f4      	b.n	800147c <__aeabi_dadd+0x274>
 8001692:	4c79      	ldr	r4, [pc, #484]	; (8001878 <__aeabi_dadd+0x670>)
 8001694:	42a2      	cmp	r2, r4
 8001696:	d100      	bne.n	800169a <__aeabi_dadd+0x492>
 8001698:	e6fd      	b.n	8001496 <__aeabi_dadd+0x28e>
 800169a:	1859      	adds	r1, r3, r1
 800169c:	4299      	cmp	r1, r3
 800169e:	419b      	sbcs	r3, r3
 80016a0:	4440      	add	r0, r8
 80016a2:	425f      	negs	r7, r3
 80016a4:	19c7      	adds	r7, r0, r7
 80016a6:	07fc      	lsls	r4, r7, #31
 80016a8:	0849      	lsrs	r1, r1, #1
 80016aa:	0016      	movs	r6, r2
 80016ac:	430c      	orrs	r4, r1
 80016ae:	087f      	lsrs	r7, r7, #1
 80016b0:	e6cf      	b.n	8001452 <__aeabi_dadd+0x24a>
 80016b2:	1acc      	subs	r4, r1, r3
 80016b4:	42a1      	cmp	r1, r4
 80016b6:	41bf      	sbcs	r7, r7
 80016b8:	4643      	mov	r3, r8
 80016ba:	427f      	negs	r7, r7
 80016bc:	1a18      	subs	r0, r3, r0
 80016be:	4655      	mov	r5, sl
 80016c0:	1bc7      	subs	r7, r0, r7
 80016c2:	e5f7      	b.n	80012b4 <__aeabi_dadd+0xac>
 80016c4:	08c9      	lsrs	r1, r1, #3
 80016c6:	077b      	lsls	r3, r7, #29
 80016c8:	4655      	mov	r5, sl
 80016ca:	430b      	orrs	r3, r1
 80016cc:	08f8      	lsrs	r0, r7, #3
 80016ce:	e6c8      	b.n	8001462 <__aeabi_dadd+0x25a>
 80016d0:	2c00      	cmp	r4, #0
 80016d2:	d000      	beq.n	80016d6 <__aeabi_dadd+0x4ce>
 80016d4:	e081      	b.n	80017da <__aeabi_dadd+0x5d2>
 80016d6:	4643      	mov	r3, r8
 80016d8:	430b      	orrs	r3, r1
 80016da:	d115      	bne.n	8001708 <__aeabi_dadd+0x500>
 80016dc:	2080      	movs	r0, #128	; 0x80
 80016de:	2500      	movs	r5, #0
 80016e0:	0300      	lsls	r0, r0, #12
 80016e2:	e6e3      	b.n	80014ac <__aeabi_dadd+0x2a4>
 80016e4:	1a5c      	subs	r4, r3, r1
 80016e6:	42a3      	cmp	r3, r4
 80016e8:	419b      	sbcs	r3, r3
 80016ea:	1bc7      	subs	r7, r0, r7
 80016ec:	425b      	negs	r3, r3
 80016ee:	2601      	movs	r6, #1
 80016f0:	1aff      	subs	r7, r7, r3
 80016f2:	e5da      	b.n	80012aa <__aeabi_dadd+0xa2>
 80016f4:	0742      	lsls	r2, r0, #29
 80016f6:	08db      	lsrs	r3, r3, #3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	08c0      	lsrs	r0, r0, #3
 80016fc:	e6d2      	b.n	80014a4 <__aeabi_dadd+0x29c>
 80016fe:	0742      	lsls	r2, r0, #29
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	4313      	orrs	r3, r2
 8001704:	08c0      	lsrs	r0, r0, #3
 8001706:	e6ac      	b.n	8001462 <__aeabi_dadd+0x25a>
 8001708:	4643      	mov	r3, r8
 800170a:	4642      	mov	r2, r8
 800170c:	08c9      	lsrs	r1, r1, #3
 800170e:	075b      	lsls	r3, r3, #29
 8001710:	4655      	mov	r5, sl
 8001712:	430b      	orrs	r3, r1
 8001714:	08d0      	lsrs	r0, r2, #3
 8001716:	e6c5      	b.n	80014a4 <__aeabi_dadd+0x29c>
 8001718:	4643      	mov	r3, r8
 800171a:	4642      	mov	r2, r8
 800171c:	075b      	lsls	r3, r3, #29
 800171e:	08c9      	lsrs	r1, r1, #3
 8001720:	430b      	orrs	r3, r1
 8001722:	08d0      	lsrs	r0, r2, #3
 8001724:	e6be      	b.n	80014a4 <__aeabi_dadd+0x29c>
 8001726:	4303      	orrs	r3, r0
 8001728:	001c      	movs	r4, r3
 800172a:	1e63      	subs	r3, r4, #1
 800172c:	419c      	sbcs	r4, r3
 800172e:	e6fc      	b.n	800152a <__aeabi_dadd+0x322>
 8001730:	0002      	movs	r2, r0
 8001732:	3c20      	subs	r4, #32
 8001734:	40e2      	lsrs	r2, r4
 8001736:	0014      	movs	r4, r2
 8001738:	4662      	mov	r2, ip
 800173a:	2a20      	cmp	r2, #32
 800173c:	d003      	beq.n	8001746 <__aeabi_dadd+0x53e>
 800173e:	2540      	movs	r5, #64	; 0x40
 8001740:	1aad      	subs	r5, r5, r2
 8001742:	40a8      	lsls	r0, r5
 8001744:	4303      	orrs	r3, r0
 8001746:	1e58      	subs	r0, r3, #1
 8001748:	4183      	sbcs	r3, r0
 800174a:	4323      	orrs	r3, r4
 800174c:	e775      	b.n	800163a <__aeabi_dadd+0x432>
 800174e:	2a00      	cmp	r2, #0
 8001750:	d0e2      	beq.n	8001718 <__aeabi_dadd+0x510>
 8001752:	003a      	movs	r2, r7
 8001754:	430a      	orrs	r2, r1
 8001756:	d0cd      	beq.n	80016f4 <__aeabi_dadd+0x4ec>
 8001758:	0742      	lsls	r2, r0, #29
 800175a:	08db      	lsrs	r3, r3, #3
 800175c:	4313      	orrs	r3, r2
 800175e:	2280      	movs	r2, #128	; 0x80
 8001760:	08c0      	lsrs	r0, r0, #3
 8001762:	0312      	lsls	r2, r2, #12
 8001764:	4210      	tst	r0, r2
 8001766:	d006      	beq.n	8001776 <__aeabi_dadd+0x56e>
 8001768:	08fc      	lsrs	r4, r7, #3
 800176a:	4214      	tst	r4, r2
 800176c:	d103      	bne.n	8001776 <__aeabi_dadd+0x56e>
 800176e:	0020      	movs	r0, r4
 8001770:	08cb      	lsrs	r3, r1, #3
 8001772:	077a      	lsls	r2, r7, #29
 8001774:	4313      	orrs	r3, r2
 8001776:	0f5a      	lsrs	r2, r3, #29
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	0752      	lsls	r2, r2, #29
 800177c:	08db      	lsrs	r3, r3, #3
 800177e:	4313      	orrs	r3, r2
 8001780:	e690      	b.n	80014a4 <__aeabi_dadd+0x29c>
 8001782:	4643      	mov	r3, r8
 8001784:	430b      	orrs	r3, r1
 8001786:	d100      	bne.n	800178a <__aeabi_dadd+0x582>
 8001788:	e709      	b.n	800159e <__aeabi_dadd+0x396>
 800178a:	4643      	mov	r3, r8
 800178c:	4642      	mov	r2, r8
 800178e:	08c9      	lsrs	r1, r1, #3
 8001790:	075b      	lsls	r3, r3, #29
 8001792:	4655      	mov	r5, sl
 8001794:	430b      	orrs	r3, r1
 8001796:	08d0      	lsrs	r0, r2, #3
 8001798:	e666      	b.n	8001468 <__aeabi_dadd+0x260>
 800179a:	1acc      	subs	r4, r1, r3
 800179c:	42a1      	cmp	r1, r4
 800179e:	4189      	sbcs	r1, r1
 80017a0:	1a3f      	subs	r7, r7, r0
 80017a2:	4249      	negs	r1, r1
 80017a4:	4655      	mov	r5, sl
 80017a6:	2601      	movs	r6, #1
 80017a8:	1a7f      	subs	r7, r7, r1
 80017aa:	e57e      	b.n	80012aa <__aeabi_dadd+0xa2>
 80017ac:	4642      	mov	r2, r8
 80017ae:	1a5c      	subs	r4, r3, r1
 80017b0:	1a87      	subs	r7, r0, r2
 80017b2:	42a3      	cmp	r3, r4
 80017b4:	4192      	sbcs	r2, r2
 80017b6:	4252      	negs	r2, r2
 80017b8:	1abf      	subs	r7, r7, r2
 80017ba:	023a      	lsls	r2, r7, #8
 80017bc:	d53d      	bpl.n	800183a <__aeabi_dadd+0x632>
 80017be:	1acc      	subs	r4, r1, r3
 80017c0:	42a1      	cmp	r1, r4
 80017c2:	4189      	sbcs	r1, r1
 80017c4:	4643      	mov	r3, r8
 80017c6:	4249      	negs	r1, r1
 80017c8:	1a1f      	subs	r7, r3, r0
 80017ca:	4655      	mov	r5, sl
 80017cc:	1a7f      	subs	r7, r7, r1
 80017ce:	e595      	b.n	80012fc <__aeabi_dadd+0xf4>
 80017d0:	077b      	lsls	r3, r7, #29
 80017d2:	08c9      	lsrs	r1, r1, #3
 80017d4:	430b      	orrs	r3, r1
 80017d6:	08f8      	lsrs	r0, r7, #3
 80017d8:	e643      	b.n	8001462 <__aeabi_dadd+0x25a>
 80017da:	4644      	mov	r4, r8
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	430c      	orrs	r4, r1
 80017e0:	d130      	bne.n	8001844 <__aeabi_dadd+0x63c>
 80017e2:	0742      	lsls	r2, r0, #29
 80017e4:	4313      	orrs	r3, r2
 80017e6:	08c0      	lsrs	r0, r0, #3
 80017e8:	e65c      	b.n	80014a4 <__aeabi_dadd+0x29c>
 80017ea:	077b      	lsls	r3, r7, #29
 80017ec:	08c9      	lsrs	r1, r1, #3
 80017ee:	430b      	orrs	r3, r1
 80017f0:	08f8      	lsrs	r0, r7, #3
 80017f2:	e639      	b.n	8001468 <__aeabi_dadd+0x260>
 80017f4:	185c      	adds	r4, r3, r1
 80017f6:	429c      	cmp	r4, r3
 80017f8:	419b      	sbcs	r3, r3
 80017fa:	4440      	add	r0, r8
 80017fc:	425b      	negs	r3, r3
 80017fe:	18c7      	adds	r7, r0, r3
 8001800:	023b      	lsls	r3, r7, #8
 8001802:	d400      	bmi.n	8001806 <__aeabi_dadd+0x5fe>
 8001804:	e625      	b.n	8001452 <__aeabi_dadd+0x24a>
 8001806:	4b1d      	ldr	r3, [pc, #116]	; (800187c <__aeabi_dadd+0x674>)
 8001808:	2601      	movs	r6, #1
 800180a:	401f      	ands	r7, r3
 800180c:	e621      	b.n	8001452 <__aeabi_dadd+0x24a>
 800180e:	0004      	movs	r4, r0
 8001810:	3a20      	subs	r2, #32
 8001812:	40d4      	lsrs	r4, r2
 8001814:	4662      	mov	r2, ip
 8001816:	2a20      	cmp	r2, #32
 8001818:	d004      	beq.n	8001824 <__aeabi_dadd+0x61c>
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	4666      	mov	r6, ip
 800181e:	1b92      	subs	r2, r2, r6
 8001820:	4090      	lsls	r0, r2
 8001822:	4303      	orrs	r3, r0
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	4193      	sbcs	r3, r2
 8001828:	431c      	orrs	r4, r3
 800182a:	e67e      	b.n	800152a <__aeabi_dadd+0x322>
 800182c:	185c      	adds	r4, r3, r1
 800182e:	428c      	cmp	r4, r1
 8001830:	4189      	sbcs	r1, r1
 8001832:	4440      	add	r0, r8
 8001834:	4249      	negs	r1, r1
 8001836:	1847      	adds	r7, r0, r1
 8001838:	e6dd      	b.n	80015f6 <__aeabi_dadd+0x3ee>
 800183a:	0023      	movs	r3, r4
 800183c:	433b      	orrs	r3, r7
 800183e:	d100      	bne.n	8001842 <__aeabi_dadd+0x63a>
 8001840:	e6ad      	b.n	800159e <__aeabi_dadd+0x396>
 8001842:	e606      	b.n	8001452 <__aeabi_dadd+0x24a>
 8001844:	0744      	lsls	r4, r0, #29
 8001846:	4323      	orrs	r3, r4
 8001848:	2480      	movs	r4, #128	; 0x80
 800184a:	08c0      	lsrs	r0, r0, #3
 800184c:	0324      	lsls	r4, r4, #12
 800184e:	4220      	tst	r0, r4
 8001850:	d008      	beq.n	8001864 <__aeabi_dadd+0x65c>
 8001852:	4642      	mov	r2, r8
 8001854:	08d6      	lsrs	r6, r2, #3
 8001856:	4226      	tst	r6, r4
 8001858:	d104      	bne.n	8001864 <__aeabi_dadd+0x65c>
 800185a:	4655      	mov	r5, sl
 800185c:	0030      	movs	r0, r6
 800185e:	08cb      	lsrs	r3, r1, #3
 8001860:	0751      	lsls	r1, r2, #29
 8001862:	430b      	orrs	r3, r1
 8001864:	0f5a      	lsrs	r2, r3, #29
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	0752      	lsls	r2, r2, #29
 800186c:	4313      	orrs	r3, r2
 800186e:	e619      	b.n	80014a4 <__aeabi_dadd+0x29c>
 8001870:	2300      	movs	r3, #0
 8001872:	4a01      	ldr	r2, [pc, #4]	; (8001878 <__aeabi_dadd+0x670>)
 8001874:	001f      	movs	r7, r3
 8001876:	e55e      	b.n	8001336 <__aeabi_dadd+0x12e>
 8001878:	000007ff 	.word	0x000007ff
 800187c:	ff7fffff 	.word	0xff7fffff

08001880 <__aeabi_ddiv>:
 8001880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001882:	4657      	mov	r7, sl
 8001884:	464e      	mov	r6, r9
 8001886:	4645      	mov	r5, r8
 8001888:	46de      	mov	lr, fp
 800188a:	b5e0      	push	{r5, r6, r7, lr}
 800188c:	4681      	mov	r9, r0
 800188e:	0005      	movs	r5, r0
 8001890:	030c      	lsls	r4, r1, #12
 8001892:	0048      	lsls	r0, r1, #1
 8001894:	4692      	mov	sl, r2
 8001896:	001f      	movs	r7, r3
 8001898:	b085      	sub	sp, #20
 800189a:	0b24      	lsrs	r4, r4, #12
 800189c:	0d40      	lsrs	r0, r0, #21
 800189e:	0fce      	lsrs	r6, r1, #31
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d100      	bne.n	80018a6 <__aeabi_ddiv+0x26>
 80018a4:	e156      	b.n	8001b54 <__aeabi_ddiv+0x2d4>
 80018a6:	4bd4      	ldr	r3, [pc, #848]	; (8001bf8 <__aeabi_ddiv+0x378>)
 80018a8:	4298      	cmp	r0, r3
 80018aa:	d100      	bne.n	80018ae <__aeabi_ddiv+0x2e>
 80018ac:	e172      	b.n	8001b94 <__aeabi_ddiv+0x314>
 80018ae:	0f6b      	lsrs	r3, r5, #29
 80018b0:	00e4      	lsls	r4, r4, #3
 80018b2:	431c      	orrs	r4, r3
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	041b      	lsls	r3, r3, #16
 80018b8:	4323      	orrs	r3, r4
 80018ba:	4698      	mov	r8, r3
 80018bc:	4bcf      	ldr	r3, [pc, #828]	; (8001bfc <__aeabi_ddiv+0x37c>)
 80018be:	00ed      	lsls	r5, r5, #3
 80018c0:	469b      	mov	fp, r3
 80018c2:	2300      	movs	r3, #0
 80018c4:	4699      	mov	r9, r3
 80018c6:	4483      	add	fp, r0
 80018c8:	9300      	str	r3, [sp, #0]
 80018ca:	033c      	lsls	r4, r7, #12
 80018cc:	007b      	lsls	r3, r7, #1
 80018ce:	4650      	mov	r0, sl
 80018d0:	0b24      	lsrs	r4, r4, #12
 80018d2:	0d5b      	lsrs	r3, r3, #21
 80018d4:	0fff      	lsrs	r7, r7, #31
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d100      	bne.n	80018dc <__aeabi_ddiv+0x5c>
 80018da:	e11f      	b.n	8001b1c <__aeabi_ddiv+0x29c>
 80018dc:	4ac6      	ldr	r2, [pc, #792]	; (8001bf8 <__aeabi_ddiv+0x378>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d100      	bne.n	80018e4 <__aeabi_ddiv+0x64>
 80018e2:	e162      	b.n	8001baa <__aeabi_ddiv+0x32a>
 80018e4:	49c5      	ldr	r1, [pc, #788]	; (8001bfc <__aeabi_ddiv+0x37c>)
 80018e6:	0f42      	lsrs	r2, r0, #29
 80018e8:	468c      	mov	ip, r1
 80018ea:	00e4      	lsls	r4, r4, #3
 80018ec:	4659      	mov	r1, fp
 80018ee:	4314      	orrs	r4, r2
 80018f0:	2280      	movs	r2, #128	; 0x80
 80018f2:	4463      	add	r3, ip
 80018f4:	0412      	lsls	r2, r2, #16
 80018f6:	1acb      	subs	r3, r1, r3
 80018f8:	4314      	orrs	r4, r2
 80018fa:	469b      	mov	fp, r3
 80018fc:	00c2      	lsls	r2, r0, #3
 80018fe:	2000      	movs	r0, #0
 8001900:	0033      	movs	r3, r6
 8001902:	407b      	eors	r3, r7
 8001904:	469a      	mov	sl, r3
 8001906:	464b      	mov	r3, r9
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d827      	bhi.n	800195c <__aeabi_ddiv+0xdc>
 800190c:	49bc      	ldr	r1, [pc, #752]	; (8001c00 <__aeabi_ddiv+0x380>)
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	58cb      	ldr	r3, [r1, r3]
 8001912:	469f      	mov	pc, r3
 8001914:	46b2      	mov	sl, r6
 8001916:	9b00      	ldr	r3, [sp, #0]
 8001918:	2b02      	cmp	r3, #2
 800191a:	d016      	beq.n	800194a <__aeabi_ddiv+0xca>
 800191c:	2b03      	cmp	r3, #3
 800191e:	d100      	bne.n	8001922 <__aeabi_ddiv+0xa2>
 8001920:	e28e      	b.n	8001e40 <__aeabi_ddiv+0x5c0>
 8001922:	2b01      	cmp	r3, #1
 8001924:	d000      	beq.n	8001928 <__aeabi_ddiv+0xa8>
 8001926:	e0d9      	b.n	8001adc <__aeabi_ddiv+0x25c>
 8001928:	2300      	movs	r3, #0
 800192a:	2400      	movs	r4, #0
 800192c:	2500      	movs	r5, #0
 800192e:	4652      	mov	r2, sl
 8001930:	051b      	lsls	r3, r3, #20
 8001932:	4323      	orrs	r3, r4
 8001934:	07d2      	lsls	r2, r2, #31
 8001936:	4313      	orrs	r3, r2
 8001938:	0028      	movs	r0, r5
 800193a:	0019      	movs	r1, r3
 800193c:	b005      	add	sp, #20
 800193e:	bcf0      	pop	{r4, r5, r6, r7}
 8001940:	46bb      	mov	fp, r7
 8001942:	46b2      	mov	sl, r6
 8001944:	46a9      	mov	r9, r5
 8001946:	46a0      	mov	r8, r4
 8001948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800194a:	2400      	movs	r4, #0
 800194c:	2500      	movs	r5, #0
 800194e:	4baa      	ldr	r3, [pc, #680]	; (8001bf8 <__aeabi_ddiv+0x378>)
 8001950:	e7ed      	b.n	800192e <__aeabi_ddiv+0xae>
 8001952:	46ba      	mov	sl, r7
 8001954:	46a0      	mov	r8, r4
 8001956:	0015      	movs	r5, r2
 8001958:	9000      	str	r0, [sp, #0]
 800195a:	e7dc      	b.n	8001916 <__aeabi_ddiv+0x96>
 800195c:	4544      	cmp	r4, r8
 800195e:	d200      	bcs.n	8001962 <__aeabi_ddiv+0xe2>
 8001960:	e1c7      	b.n	8001cf2 <__aeabi_ddiv+0x472>
 8001962:	d100      	bne.n	8001966 <__aeabi_ddiv+0xe6>
 8001964:	e1c2      	b.n	8001cec <__aeabi_ddiv+0x46c>
 8001966:	2301      	movs	r3, #1
 8001968:	425b      	negs	r3, r3
 800196a:	469c      	mov	ip, r3
 800196c:	002e      	movs	r6, r5
 800196e:	4640      	mov	r0, r8
 8001970:	2500      	movs	r5, #0
 8001972:	44e3      	add	fp, ip
 8001974:	0223      	lsls	r3, r4, #8
 8001976:	0e14      	lsrs	r4, r2, #24
 8001978:	431c      	orrs	r4, r3
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	4699      	mov	r9, r3
 800197e:	0423      	lsls	r3, r4, #16
 8001980:	0c1f      	lsrs	r7, r3, #16
 8001982:	0212      	lsls	r2, r2, #8
 8001984:	4649      	mov	r1, r9
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	9701      	str	r7, [sp, #4]
 800198a:	f7fe fc41 	bl	8000210 <__aeabi_uidivmod>
 800198e:	0002      	movs	r2, r0
 8001990:	437a      	muls	r2, r7
 8001992:	040b      	lsls	r3, r1, #16
 8001994:	0c31      	lsrs	r1, r6, #16
 8001996:	4680      	mov	r8, r0
 8001998:	4319      	orrs	r1, r3
 800199a:	428a      	cmp	r2, r1
 800199c:	d907      	bls.n	80019ae <__aeabi_ddiv+0x12e>
 800199e:	2301      	movs	r3, #1
 80019a0:	425b      	negs	r3, r3
 80019a2:	469c      	mov	ip, r3
 80019a4:	1909      	adds	r1, r1, r4
 80019a6:	44e0      	add	r8, ip
 80019a8:	428c      	cmp	r4, r1
 80019aa:	d800      	bhi.n	80019ae <__aeabi_ddiv+0x12e>
 80019ac:	e207      	b.n	8001dbe <__aeabi_ddiv+0x53e>
 80019ae:	1a88      	subs	r0, r1, r2
 80019b0:	4649      	mov	r1, r9
 80019b2:	f7fe fc2d 	bl	8000210 <__aeabi_uidivmod>
 80019b6:	0409      	lsls	r1, r1, #16
 80019b8:	468c      	mov	ip, r1
 80019ba:	0431      	lsls	r1, r6, #16
 80019bc:	4666      	mov	r6, ip
 80019be:	9a01      	ldr	r2, [sp, #4]
 80019c0:	0c09      	lsrs	r1, r1, #16
 80019c2:	4342      	muls	r2, r0
 80019c4:	0003      	movs	r3, r0
 80019c6:	4331      	orrs	r1, r6
 80019c8:	428a      	cmp	r2, r1
 80019ca:	d904      	bls.n	80019d6 <__aeabi_ddiv+0x156>
 80019cc:	1909      	adds	r1, r1, r4
 80019ce:	3b01      	subs	r3, #1
 80019d0:	428c      	cmp	r4, r1
 80019d2:	d800      	bhi.n	80019d6 <__aeabi_ddiv+0x156>
 80019d4:	e1ed      	b.n	8001db2 <__aeabi_ddiv+0x532>
 80019d6:	1a88      	subs	r0, r1, r2
 80019d8:	4642      	mov	r2, r8
 80019da:	0412      	lsls	r2, r2, #16
 80019dc:	431a      	orrs	r2, r3
 80019de:	4690      	mov	r8, r2
 80019e0:	4641      	mov	r1, r8
 80019e2:	9b00      	ldr	r3, [sp, #0]
 80019e4:	040e      	lsls	r6, r1, #16
 80019e6:	0c1b      	lsrs	r3, r3, #16
 80019e8:	001f      	movs	r7, r3
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	9b00      	ldr	r3, [sp, #0]
 80019ee:	0c36      	lsrs	r6, r6, #16
 80019f0:	041b      	lsls	r3, r3, #16
 80019f2:	0c19      	lsrs	r1, r3, #16
 80019f4:	000b      	movs	r3, r1
 80019f6:	4373      	muls	r3, r6
 80019f8:	0c12      	lsrs	r2, r2, #16
 80019fa:	437e      	muls	r6, r7
 80019fc:	9103      	str	r1, [sp, #12]
 80019fe:	4351      	muls	r1, r2
 8001a00:	437a      	muls	r2, r7
 8001a02:	0c1f      	lsrs	r7, r3, #16
 8001a04:	46bc      	mov	ip, r7
 8001a06:	1876      	adds	r6, r6, r1
 8001a08:	4466      	add	r6, ip
 8001a0a:	42b1      	cmp	r1, r6
 8001a0c:	d903      	bls.n	8001a16 <__aeabi_ddiv+0x196>
 8001a0e:	2180      	movs	r1, #128	; 0x80
 8001a10:	0249      	lsls	r1, r1, #9
 8001a12:	468c      	mov	ip, r1
 8001a14:	4462      	add	r2, ip
 8001a16:	0c31      	lsrs	r1, r6, #16
 8001a18:	188a      	adds	r2, r1, r2
 8001a1a:	0431      	lsls	r1, r6, #16
 8001a1c:	041e      	lsls	r6, r3, #16
 8001a1e:	0c36      	lsrs	r6, r6, #16
 8001a20:	198e      	adds	r6, r1, r6
 8001a22:	4290      	cmp	r0, r2
 8001a24:	d302      	bcc.n	8001a2c <__aeabi_ddiv+0x1ac>
 8001a26:	d112      	bne.n	8001a4e <__aeabi_ddiv+0x1ce>
 8001a28:	42b5      	cmp	r5, r6
 8001a2a:	d210      	bcs.n	8001a4e <__aeabi_ddiv+0x1ce>
 8001a2c:	4643      	mov	r3, r8
 8001a2e:	1e59      	subs	r1, r3, #1
 8001a30:	9b00      	ldr	r3, [sp, #0]
 8001a32:	469c      	mov	ip, r3
 8001a34:	4465      	add	r5, ip
 8001a36:	001f      	movs	r7, r3
 8001a38:	429d      	cmp	r5, r3
 8001a3a:	419b      	sbcs	r3, r3
 8001a3c:	425b      	negs	r3, r3
 8001a3e:	191b      	adds	r3, r3, r4
 8001a40:	18c0      	adds	r0, r0, r3
 8001a42:	4284      	cmp	r4, r0
 8001a44:	d200      	bcs.n	8001a48 <__aeabi_ddiv+0x1c8>
 8001a46:	e1a0      	b.n	8001d8a <__aeabi_ddiv+0x50a>
 8001a48:	d100      	bne.n	8001a4c <__aeabi_ddiv+0x1cc>
 8001a4a:	e19b      	b.n	8001d84 <__aeabi_ddiv+0x504>
 8001a4c:	4688      	mov	r8, r1
 8001a4e:	1bae      	subs	r6, r5, r6
 8001a50:	42b5      	cmp	r5, r6
 8001a52:	41ad      	sbcs	r5, r5
 8001a54:	1a80      	subs	r0, r0, r2
 8001a56:	426d      	negs	r5, r5
 8001a58:	1b40      	subs	r0, r0, r5
 8001a5a:	4284      	cmp	r4, r0
 8001a5c:	d100      	bne.n	8001a60 <__aeabi_ddiv+0x1e0>
 8001a5e:	e1d5      	b.n	8001e0c <__aeabi_ddiv+0x58c>
 8001a60:	4649      	mov	r1, r9
 8001a62:	f7fe fbd5 	bl	8000210 <__aeabi_uidivmod>
 8001a66:	9a01      	ldr	r2, [sp, #4]
 8001a68:	040b      	lsls	r3, r1, #16
 8001a6a:	4342      	muls	r2, r0
 8001a6c:	0c31      	lsrs	r1, r6, #16
 8001a6e:	0005      	movs	r5, r0
 8001a70:	4319      	orrs	r1, r3
 8001a72:	428a      	cmp	r2, r1
 8001a74:	d900      	bls.n	8001a78 <__aeabi_ddiv+0x1f8>
 8001a76:	e16c      	b.n	8001d52 <__aeabi_ddiv+0x4d2>
 8001a78:	1a88      	subs	r0, r1, r2
 8001a7a:	4649      	mov	r1, r9
 8001a7c:	f7fe fbc8 	bl	8000210 <__aeabi_uidivmod>
 8001a80:	9a01      	ldr	r2, [sp, #4]
 8001a82:	0436      	lsls	r6, r6, #16
 8001a84:	4342      	muls	r2, r0
 8001a86:	0409      	lsls	r1, r1, #16
 8001a88:	0c36      	lsrs	r6, r6, #16
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	430e      	orrs	r6, r1
 8001a8e:	42b2      	cmp	r2, r6
 8001a90:	d900      	bls.n	8001a94 <__aeabi_ddiv+0x214>
 8001a92:	e153      	b.n	8001d3c <__aeabi_ddiv+0x4bc>
 8001a94:	9803      	ldr	r0, [sp, #12]
 8001a96:	1ab6      	subs	r6, r6, r2
 8001a98:	0002      	movs	r2, r0
 8001a9a:	042d      	lsls	r5, r5, #16
 8001a9c:	431d      	orrs	r5, r3
 8001a9e:	9f02      	ldr	r7, [sp, #8]
 8001aa0:	042b      	lsls	r3, r5, #16
 8001aa2:	0c1b      	lsrs	r3, r3, #16
 8001aa4:	435a      	muls	r2, r3
 8001aa6:	437b      	muls	r3, r7
 8001aa8:	469c      	mov	ip, r3
 8001aaa:	0c29      	lsrs	r1, r5, #16
 8001aac:	4348      	muls	r0, r1
 8001aae:	0c13      	lsrs	r3, r2, #16
 8001ab0:	4484      	add	ip, r0
 8001ab2:	4463      	add	r3, ip
 8001ab4:	4379      	muls	r1, r7
 8001ab6:	4298      	cmp	r0, r3
 8001ab8:	d903      	bls.n	8001ac2 <__aeabi_ddiv+0x242>
 8001aba:	2080      	movs	r0, #128	; 0x80
 8001abc:	0240      	lsls	r0, r0, #9
 8001abe:	4684      	mov	ip, r0
 8001ac0:	4461      	add	r1, ip
 8001ac2:	0c18      	lsrs	r0, r3, #16
 8001ac4:	0412      	lsls	r2, r2, #16
 8001ac6:	041b      	lsls	r3, r3, #16
 8001ac8:	0c12      	lsrs	r2, r2, #16
 8001aca:	1841      	adds	r1, r0, r1
 8001acc:	189b      	adds	r3, r3, r2
 8001ace:	428e      	cmp	r6, r1
 8001ad0:	d200      	bcs.n	8001ad4 <__aeabi_ddiv+0x254>
 8001ad2:	e0ff      	b.n	8001cd4 <__aeabi_ddiv+0x454>
 8001ad4:	d100      	bne.n	8001ad8 <__aeabi_ddiv+0x258>
 8001ad6:	e0fa      	b.n	8001cce <__aeabi_ddiv+0x44e>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	431d      	orrs	r5, r3
 8001adc:	4a49      	ldr	r2, [pc, #292]	; (8001c04 <__aeabi_ddiv+0x384>)
 8001ade:	445a      	add	r2, fp
 8001ae0:	2a00      	cmp	r2, #0
 8001ae2:	dc00      	bgt.n	8001ae6 <__aeabi_ddiv+0x266>
 8001ae4:	e0aa      	b.n	8001c3c <__aeabi_ddiv+0x3bc>
 8001ae6:	076b      	lsls	r3, r5, #29
 8001ae8:	d000      	beq.n	8001aec <__aeabi_ddiv+0x26c>
 8001aea:	e13d      	b.n	8001d68 <__aeabi_ddiv+0x4e8>
 8001aec:	08ed      	lsrs	r5, r5, #3
 8001aee:	4643      	mov	r3, r8
 8001af0:	01db      	lsls	r3, r3, #7
 8001af2:	d506      	bpl.n	8001b02 <__aeabi_ddiv+0x282>
 8001af4:	4642      	mov	r2, r8
 8001af6:	4b44      	ldr	r3, [pc, #272]	; (8001c08 <__aeabi_ddiv+0x388>)
 8001af8:	401a      	ands	r2, r3
 8001afa:	4690      	mov	r8, r2
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	00d2      	lsls	r2, r2, #3
 8001b00:	445a      	add	r2, fp
 8001b02:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <__aeabi_ddiv+0x38c>)
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dd00      	ble.n	8001b0a <__aeabi_ddiv+0x28a>
 8001b08:	e71f      	b.n	800194a <__aeabi_ddiv+0xca>
 8001b0a:	4643      	mov	r3, r8
 8001b0c:	075b      	lsls	r3, r3, #29
 8001b0e:	431d      	orrs	r5, r3
 8001b10:	4643      	mov	r3, r8
 8001b12:	0552      	lsls	r2, r2, #21
 8001b14:	025c      	lsls	r4, r3, #9
 8001b16:	0b24      	lsrs	r4, r4, #12
 8001b18:	0d53      	lsrs	r3, r2, #21
 8001b1a:	e708      	b.n	800192e <__aeabi_ddiv+0xae>
 8001b1c:	4652      	mov	r2, sl
 8001b1e:	4322      	orrs	r2, r4
 8001b20:	d100      	bne.n	8001b24 <__aeabi_ddiv+0x2a4>
 8001b22:	e07b      	b.n	8001c1c <__aeabi_ddiv+0x39c>
 8001b24:	2c00      	cmp	r4, #0
 8001b26:	d100      	bne.n	8001b2a <__aeabi_ddiv+0x2aa>
 8001b28:	e0fa      	b.n	8001d20 <__aeabi_ddiv+0x4a0>
 8001b2a:	0020      	movs	r0, r4
 8001b2c:	f001 f936 	bl	8002d9c <__clzsi2>
 8001b30:	0002      	movs	r2, r0
 8001b32:	3a0b      	subs	r2, #11
 8001b34:	231d      	movs	r3, #29
 8001b36:	0001      	movs	r1, r0
 8001b38:	1a9b      	subs	r3, r3, r2
 8001b3a:	4652      	mov	r2, sl
 8001b3c:	3908      	subs	r1, #8
 8001b3e:	40da      	lsrs	r2, r3
 8001b40:	408c      	lsls	r4, r1
 8001b42:	4314      	orrs	r4, r2
 8001b44:	4652      	mov	r2, sl
 8001b46:	408a      	lsls	r2, r1
 8001b48:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <__aeabi_ddiv+0x390>)
 8001b4a:	4458      	add	r0, fp
 8001b4c:	469b      	mov	fp, r3
 8001b4e:	4483      	add	fp, r0
 8001b50:	2000      	movs	r0, #0
 8001b52:	e6d5      	b.n	8001900 <__aeabi_ddiv+0x80>
 8001b54:	464b      	mov	r3, r9
 8001b56:	4323      	orrs	r3, r4
 8001b58:	4698      	mov	r8, r3
 8001b5a:	d044      	beq.n	8001be6 <__aeabi_ddiv+0x366>
 8001b5c:	2c00      	cmp	r4, #0
 8001b5e:	d100      	bne.n	8001b62 <__aeabi_ddiv+0x2e2>
 8001b60:	e0ce      	b.n	8001d00 <__aeabi_ddiv+0x480>
 8001b62:	0020      	movs	r0, r4
 8001b64:	f001 f91a 	bl	8002d9c <__clzsi2>
 8001b68:	0001      	movs	r1, r0
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	390b      	subs	r1, #11
 8001b6e:	231d      	movs	r3, #29
 8001b70:	1a5b      	subs	r3, r3, r1
 8001b72:	4649      	mov	r1, r9
 8001b74:	0010      	movs	r0, r2
 8001b76:	40d9      	lsrs	r1, r3
 8001b78:	3808      	subs	r0, #8
 8001b7a:	4084      	lsls	r4, r0
 8001b7c:	000b      	movs	r3, r1
 8001b7e:	464d      	mov	r5, r9
 8001b80:	4323      	orrs	r3, r4
 8001b82:	4698      	mov	r8, r3
 8001b84:	4085      	lsls	r5, r0
 8001b86:	4823      	ldr	r0, [pc, #140]	; (8001c14 <__aeabi_ddiv+0x394>)
 8001b88:	1a83      	subs	r3, r0, r2
 8001b8a:	469b      	mov	fp, r3
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	4699      	mov	r9, r3
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	e69a      	b.n	80018ca <__aeabi_ddiv+0x4a>
 8001b94:	464b      	mov	r3, r9
 8001b96:	4323      	orrs	r3, r4
 8001b98:	4698      	mov	r8, r3
 8001b9a:	d11d      	bne.n	8001bd8 <__aeabi_ddiv+0x358>
 8001b9c:	2308      	movs	r3, #8
 8001b9e:	4699      	mov	r9, r3
 8001ba0:	3b06      	subs	r3, #6
 8001ba2:	2500      	movs	r5, #0
 8001ba4:	4683      	mov	fp, r0
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	e68f      	b.n	80018ca <__aeabi_ddiv+0x4a>
 8001baa:	4652      	mov	r2, sl
 8001bac:	4322      	orrs	r2, r4
 8001bae:	d109      	bne.n	8001bc4 <__aeabi_ddiv+0x344>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	4649      	mov	r1, r9
 8001bb4:	4319      	orrs	r1, r3
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <__aeabi_ddiv+0x398>)
 8001bb8:	4689      	mov	r9, r1
 8001bba:	469c      	mov	ip, r3
 8001bbc:	2400      	movs	r4, #0
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	44e3      	add	fp, ip
 8001bc2:	e69d      	b.n	8001900 <__aeabi_ddiv+0x80>
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	464a      	mov	r2, r9
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <__aeabi_ddiv+0x398>)
 8001bcc:	4691      	mov	r9, r2
 8001bce:	469c      	mov	ip, r3
 8001bd0:	4652      	mov	r2, sl
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	44e3      	add	fp, ip
 8001bd6:	e693      	b.n	8001900 <__aeabi_ddiv+0x80>
 8001bd8:	230c      	movs	r3, #12
 8001bda:	4699      	mov	r9, r3
 8001bdc:	3b09      	subs	r3, #9
 8001bde:	46a0      	mov	r8, r4
 8001be0:	4683      	mov	fp, r0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	e671      	b.n	80018ca <__aeabi_ddiv+0x4a>
 8001be6:	2304      	movs	r3, #4
 8001be8:	4699      	mov	r9, r3
 8001bea:	2300      	movs	r3, #0
 8001bec:	469b      	mov	fp, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	e669      	b.n	80018ca <__aeabi_ddiv+0x4a>
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	000007ff 	.word	0x000007ff
 8001bfc:	fffffc01 	.word	0xfffffc01
 8001c00:	08007068 	.word	0x08007068
 8001c04:	000003ff 	.word	0x000003ff
 8001c08:	feffffff 	.word	0xfeffffff
 8001c0c:	000007fe 	.word	0x000007fe
 8001c10:	000003f3 	.word	0x000003f3
 8001c14:	fffffc0d 	.word	0xfffffc0d
 8001c18:	fffff801 	.word	0xfffff801
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	2301      	movs	r3, #1
 8001c20:	4319      	orrs	r1, r3
 8001c22:	4689      	mov	r9, r1
 8001c24:	2400      	movs	r4, #0
 8001c26:	2001      	movs	r0, #1
 8001c28:	e66a      	b.n	8001900 <__aeabi_ddiv+0x80>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	2480      	movs	r4, #128	; 0x80
 8001c2e:	469a      	mov	sl, r3
 8001c30:	2500      	movs	r5, #0
 8001c32:	4b8a      	ldr	r3, [pc, #552]	; (8001e5c <__aeabi_ddiv+0x5dc>)
 8001c34:	0324      	lsls	r4, r4, #12
 8001c36:	e67a      	b.n	800192e <__aeabi_ddiv+0xae>
 8001c38:	2501      	movs	r5, #1
 8001c3a:	426d      	negs	r5, r5
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	2b38      	cmp	r3, #56	; 0x38
 8001c42:	dd00      	ble.n	8001c46 <__aeabi_ddiv+0x3c6>
 8001c44:	e670      	b.n	8001928 <__aeabi_ddiv+0xa8>
 8001c46:	2b1f      	cmp	r3, #31
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_ddiv+0x3cc>
 8001c4a:	e0bf      	b.n	8001dcc <__aeabi_ddiv+0x54c>
 8001c4c:	211f      	movs	r1, #31
 8001c4e:	4249      	negs	r1, r1
 8001c50:	1a8a      	subs	r2, r1, r2
 8001c52:	4641      	mov	r1, r8
 8001c54:	40d1      	lsrs	r1, r2
 8001c56:	000a      	movs	r2, r1
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d004      	beq.n	8001c66 <__aeabi_ddiv+0x3e6>
 8001c5c:	4641      	mov	r1, r8
 8001c5e:	4b80      	ldr	r3, [pc, #512]	; (8001e60 <__aeabi_ddiv+0x5e0>)
 8001c60:	445b      	add	r3, fp
 8001c62:	4099      	lsls	r1, r3
 8001c64:	430d      	orrs	r5, r1
 8001c66:	1e6b      	subs	r3, r5, #1
 8001c68:	419d      	sbcs	r5, r3
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	432a      	orrs	r2, r5
 8001c6e:	001d      	movs	r5, r3
 8001c70:	2400      	movs	r4, #0
 8001c72:	4015      	ands	r5, r2
 8001c74:	4213      	tst	r3, r2
 8001c76:	d100      	bne.n	8001c7a <__aeabi_ddiv+0x3fa>
 8001c78:	e0d4      	b.n	8001e24 <__aeabi_ddiv+0x5a4>
 8001c7a:	210f      	movs	r1, #15
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	4011      	ands	r1, r2
 8001c80:	2904      	cmp	r1, #4
 8001c82:	d100      	bne.n	8001c86 <__aeabi_ddiv+0x406>
 8001c84:	e0cb      	b.n	8001e1e <__aeabi_ddiv+0x59e>
 8001c86:	1d11      	adds	r1, r2, #4
 8001c88:	4291      	cmp	r1, r2
 8001c8a:	4192      	sbcs	r2, r2
 8001c8c:	4252      	negs	r2, r2
 8001c8e:	189b      	adds	r3, r3, r2
 8001c90:	000a      	movs	r2, r1
 8001c92:	0219      	lsls	r1, r3, #8
 8001c94:	d400      	bmi.n	8001c98 <__aeabi_ddiv+0x418>
 8001c96:	e0c2      	b.n	8001e1e <__aeabi_ddiv+0x59e>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	2400      	movs	r4, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	e646      	b.n	800192e <__aeabi_ddiv+0xae>
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	4641      	mov	r1, r8
 8001ca4:	031b      	lsls	r3, r3, #12
 8001ca6:	4219      	tst	r1, r3
 8001ca8:	d008      	beq.n	8001cbc <__aeabi_ddiv+0x43c>
 8001caa:	421c      	tst	r4, r3
 8001cac:	d106      	bne.n	8001cbc <__aeabi_ddiv+0x43c>
 8001cae:	431c      	orrs	r4, r3
 8001cb0:	0324      	lsls	r4, r4, #12
 8001cb2:	46ba      	mov	sl, r7
 8001cb4:	0015      	movs	r5, r2
 8001cb6:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <__aeabi_ddiv+0x5dc>)
 8001cb8:	0b24      	lsrs	r4, r4, #12
 8001cba:	e638      	b.n	800192e <__aeabi_ddiv+0xae>
 8001cbc:	2480      	movs	r4, #128	; 0x80
 8001cbe:	4643      	mov	r3, r8
 8001cc0:	0324      	lsls	r4, r4, #12
 8001cc2:	431c      	orrs	r4, r3
 8001cc4:	0324      	lsls	r4, r4, #12
 8001cc6:	46b2      	mov	sl, r6
 8001cc8:	4b64      	ldr	r3, [pc, #400]	; (8001e5c <__aeabi_ddiv+0x5dc>)
 8001cca:	0b24      	lsrs	r4, r4, #12
 8001ccc:	e62f      	b.n	800192e <__aeabi_ddiv+0xae>
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d100      	bne.n	8001cd4 <__aeabi_ddiv+0x454>
 8001cd2:	e703      	b.n	8001adc <__aeabi_ddiv+0x25c>
 8001cd4:	19a6      	adds	r6, r4, r6
 8001cd6:	1e68      	subs	r0, r5, #1
 8001cd8:	42a6      	cmp	r6, r4
 8001cda:	d200      	bcs.n	8001cde <__aeabi_ddiv+0x45e>
 8001cdc:	e08d      	b.n	8001dfa <__aeabi_ddiv+0x57a>
 8001cde:	428e      	cmp	r6, r1
 8001ce0:	d200      	bcs.n	8001ce4 <__aeabi_ddiv+0x464>
 8001ce2:	e0a3      	b.n	8001e2c <__aeabi_ddiv+0x5ac>
 8001ce4:	d100      	bne.n	8001ce8 <__aeabi_ddiv+0x468>
 8001ce6:	e0b3      	b.n	8001e50 <__aeabi_ddiv+0x5d0>
 8001ce8:	0005      	movs	r5, r0
 8001cea:	e6f5      	b.n	8001ad8 <__aeabi_ddiv+0x258>
 8001cec:	42aa      	cmp	r2, r5
 8001cee:	d900      	bls.n	8001cf2 <__aeabi_ddiv+0x472>
 8001cf0:	e639      	b.n	8001966 <__aeabi_ddiv+0xe6>
 8001cf2:	4643      	mov	r3, r8
 8001cf4:	07de      	lsls	r6, r3, #31
 8001cf6:	0858      	lsrs	r0, r3, #1
 8001cf8:	086b      	lsrs	r3, r5, #1
 8001cfa:	431e      	orrs	r6, r3
 8001cfc:	07ed      	lsls	r5, r5, #31
 8001cfe:	e639      	b.n	8001974 <__aeabi_ddiv+0xf4>
 8001d00:	4648      	mov	r0, r9
 8001d02:	f001 f84b 	bl	8002d9c <__clzsi2>
 8001d06:	0001      	movs	r1, r0
 8001d08:	0002      	movs	r2, r0
 8001d0a:	3115      	adds	r1, #21
 8001d0c:	3220      	adds	r2, #32
 8001d0e:	291c      	cmp	r1, #28
 8001d10:	dc00      	bgt.n	8001d14 <__aeabi_ddiv+0x494>
 8001d12:	e72c      	b.n	8001b6e <__aeabi_ddiv+0x2ee>
 8001d14:	464b      	mov	r3, r9
 8001d16:	3808      	subs	r0, #8
 8001d18:	4083      	lsls	r3, r0
 8001d1a:	2500      	movs	r5, #0
 8001d1c:	4698      	mov	r8, r3
 8001d1e:	e732      	b.n	8001b86 <__aeabi_ddiv+0x306>
 8001d20:	f001 f83c 	bl	8002d9c <__clzsi2>
 8001d24:	0003      	movs	r3, r0
 8001d26:	001a      	movs	r2, r3
 8001d28:	3215      	adds	r2, #21
 8001d2a:	3020      	adds	r0, #32
 8001d2c:	2a1c      	cmp	r2, #28
 8001d2e:	dc00      	bgt.n	8001d32 <__aeabi_ddiv+0x4b2>
 8001d30:	e700      	b.n	8001b34 <__aeabi_ddiv+0x2b4>
 8001d32:	4654      	mov	r4, sl
 8001d34:	3b08      	subs	r3, #8
 8001d36:	2200      	movs	r2, #0
 8001d38:	409c      	lsls	r4, r3
 8001d3a:	e705      	b.n	8001b48 <__aeabi_ddiv+0x2c8>
 8001d3c:	1936      	adds	r6, r6, r4
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	42b4      	cmp	r4, r6
 8001d42:	d900      	bls.n	8001d46 <__aeabi_ddiv+0x4c6>
 8001d44:	e6a6      	b.n	8001a94 <__aeabi_ddiv+0x214>
 8001d46:	42b2      	cmp	r2, r6
 8001d48:	d800      	bhi.n	8001d4c <__aeabi_ddiv+0x4cc>
 8001d4a:	e6a3      	b.n	8001a94 <__aeabi_ddiv+0x214>
 8001d4c:	1e83      	subs	r3, r0, #2
 8001d4e:	1936      	adds	r6, r6, r4
 8001d50:	e6a0      	b.n	8001a94 <__aeabi_ddiv+0x214>
 8001d52:	1909      	adds	r1, r1, r4
 8001d54:	3d01      	subs	r5, #1
 8001d56:	428c      	cmp	r4, r1
 8001d58:	d900      	bls.n	8001d5c <__aeabi_ddiv+0x4dc>
 8001d5a:	e68d      	b.n	8001a78 <__aeabi_ddiv+0x1f8>
 8001d5c:	428a      	cmp	r2, r1
 8001d5e:	d800      	bhi.n	8001d62 <__aeabi_ddiv+0x4e2>
 8001d60:	e68a      	b.n	8001a78 <__aeabi_ddiv+0x1f8>
 8001d62:	1e85      	subs	r5, r0, #2
 8001d64:	1909      	adds	r1, r1, r4
 8001d66:	e687      	b.n	8001a78 <__aeabi_ddiv+0x1f8>
 8001d68:	230f      	movs	r3, #15
 8001d6a:	402b      	ands	r3, r5
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_ddiv+0x4f2>
 8001d70:	e6bc      	b.n	8001aec <__aeabi_ddiv+0x26c>
 8001d72:	2305      	movs	r3, #5
 8001d74:	425b      	negs	r3, r3
 8001d76:	42ab      	cmp	r3, r5
 8001d78:	419b      	sbcs	r3, r3
 8001d7a:	3504      	adds	r5, #4
 8001d7c:	425b      	negs	r3, r3
 8001d7e:	08ed      	lsrs	r5, r5, #3
 8001d80:	4498      	add	r8, r3
 8001d82:	e6b4      	b.n	8001aee <__aeabi_ddiv+0x26e>
 8001d84:	42af      	cmp	r7, r5
 8001d86:	d900      	bls.n	8001d8a <__aeabi_ddiv+0x50a>
 8001d88:	e660      	b.n	8001a4c <__aeabi_ddiv+0x1cc>
 8001d8a:	4282      	cmp	r2, r0
 8001d8c:	d804      	bhi.n	8001d98 <__aeabi_ddiv+0x518>
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_ddiv+0x512>
 8001d90:	e65c      	b.n	8001a4c <__aeabi_ddiv+0x1cc>
 8001d92:	42ae      	cmp	r6, r5
 8001d94:	d800      	bhi.n	8001d98 <__aeabi_ddiv+0x518>
 8001d96:	e659      	b.n	8001a4c <__aeabi_ddiv+0x1cc>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	425b      	negs	r3, r3
 8001d9c:	469c      	mov	ip, r3
 8001d9e:	9b00      	ldr	r3, [sp, #0]
 8001da0:	44e0      	add	r8, ip
 8001da2:	469c      	mov	ip, r3
 8001da4:	4465      	add	r5, ip
 8001da6:	429d      	cmp	r5, r3
 8001da8:	419b      	sbcs	r3, r3
 8001daa:	425b      	negs	r3, r3
 8001dac:	191b      	adds	r3, r3, r4
 8001dae:	18c0      	adds	r0, r0, r3
 8001db0:	e64d      	b.n	8001a4e <__aeabi_ddiv+0x1ce>
 8001db2:	428a      	cmp	r2, r1
 8001db4:	d800      	bhi.n	8001db8 <__aeabi_ddiv+0x538>
 8001db6:	e60e      	b.n	80019d6 <__aeabi_ddiv+0x156>
 8001db8:	1e83      	subs	r3, r0, #2
 8001dba:	1909      	adds	r1, r1, r4
 8001dbc:	e60b      	b.n	80019d6 <__aeabi_ddiv+0x156>
 8001dbe:	428a      	cmp	r2, r1
 8001dc0:	d800      	bhi.n	8001dc4 <__aeabi_ddiv+0x544>
 8001dc2:	e5f4      	b.n	80019ae <__aeabi_ddiv+0x12e>
 8001dc4:	1e83      	subs	r3, r0, #2
 8001dc6:	4698      	mov	r8, r3
 8001dc8:	1909      	adds	r1, r1, r4
 8001dca:	e5f0      	b.n	80019ae <__aeabi_ddiv+0x12e>
 8001dcc:	4925      	ldr	r1, [pc, #148]	; (8001e64 <__aeabi_ddiv+0x5e4>)
 8001dce:	0028      	movs	r0, r5
 8001dd0:	4459      	add	r1, fp
 8001dd2:	408d      	lsls	r5, r1
 8001dd4:	4642      	mov	r2, r8
 8001dd6:	408a      	lsls	r2, r1
 8001dd8:	1e69      	subs	r1, r5, #1
 8001dda:	418d      	sbcs	r5, r1
 8001ddc:	4641      	mov	r1, r8
 8001dde:	40d8      	lsrs	r0, r3
 8001de0:	40d9      	lsrs	r1, r3
 8001de2:	4302      	orrs	r2, r0
 8001de4:	432a      	orrs	r2, r5
 8001de6:	000b      	movs	r3, r1
 8001de8:	0751      	lsls	r1, r2, #29
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0x56e>
 8001dec:	e751      	b.n	8001c92 <__aeabi_ddiv+0x412>
 8001dee:	210f      	movs	r1, #15
 8001df0:	4011      	ands	r1, r2
 8001df2:	2904      	cmp	r1, #4
 8001df4:	d000      	beq.n	8001df8 <__aeabi_ddiv+0x578>
 8001df6:	e746      	b.n	8001c86 <__aeabi_ddiv+0x406>
 8001df8:	e74b      	b.n	8001c92 <__aeabi_ddiv+0x412>
 8001dfa:	0005      	movs	r5, r0
 8001dfc:	428e      	cmp	r6, r1
 8001dfe:	d000      	beq.n	8001e02 <__aeabi_ddiv+0x582>
 8001e00:	e66a      	b.n	8001ad8 <__aeabi_ddiv+0x258>
 8001e02:	9a00      	ldr	r2, [sp, #0]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d000      	beq.n	8001e0a <__aeabi_ddiv+0x58a>
 8001e08:	e666      	b.n	8001ad8 <__aeabi_ddiv+0x258>
 8001e0a:	e667      	b.n	8001adc <__aeabi_ddiv+0x25c>
 8001e0c:	4a16      	ldr	r2, [pc, #88]	; (8001e68 <__aeabi_ddiv+0x5e8>)
 8001e0e:	445a      	add	r2, fp
 8001e10:	2a00      	cmp	r2, #0
 8001e12:	dc00      	bgt.n	8001e16 <__aeabi_ddiv+0x596>
 8001e14:	e710      	b.n	8001c38 <__aeabi_ddiv+0x3b8>
 8001e16:	2301      	movs	r3, #1
 8001e18:	2500      	movs	r5, #0
 8001e1a:	4498      	add	r8, r3
 8001e1c:	e667      	b.n	8001aee <__aeabi_ddiv+0x26e>
 8001e1e:	075d      	lsls	r5, r3, #29
 8001e20:	025b      	lsls	r3, r3, #9
 8001e22:	0b1c      	lsrs	r4, r3, #12
 8001e24:	08d2      	lsrs	r2, r2, #3
 8001e26:	2300      	movs	r3, #0
 8001e28:	4315      	orrs	r5, r2
 8001e2a:	e580      	b.n	800192e <__aeabi_ddiv+0xae>
 8001e2c:	9800      	ldr	r0, [sp, #0]
 8001e2e:	3d02      	subs	r5, #2
 8001e30:	0042      	lsls	r2, r0, #1
 8001e32:	4282      	cmp	r2, r0
 8001e34:	41bf      	sbcs	r7, r7
 8001e36:	427f      	negs	r7, r7
 8001e38:	193c      	adds	r4, r7, r4
 8001e3a:	1936      	adds	r6, r6, r4
 8001e3c:	9200      	str	r2, [sp, #0]
 8001e3e:	e7dd      	b.n	8001dfc <__aeabi_ddiv+0x57c>
 8001e40:	2480      	movs	r4, #128	; 0x80
 8001e42:	4643      	mov	r3, r8
 8001e44:	0324      	lsls	r4, r4, #12
 8001e46:	431c      	orrs	r4, r3
 8001e48:	0324      	lsls	r4, r4, #12
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__aeabi_ddiv+0x5dc>)
 8001e4c:	0b24      	lsrs	r4, r4, #12
 8001e4e:	e56e      	b.n	800192e <__aeabi_ddiv+0xae>
 8001e50:	9a00      	ldr	r2, [sp, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d3ea      	bcc.n	8001e2c <__aeabi_ddiv+0x5ac>
 8001e56:	0005      	movs	r5, r0
 8001e58:	e7d3      	b.n	8001e02 <__aeabi_ddiv+0x582>
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	000007ff 	.word	0x000007ff
 8001e60:	0000043e 	.word	0x0000043e
 8001e64:	0000041e 	.word	0x0000041e
 8001e68:	000003ff 	.word	0x000003ff

08001e6c <__aeabi_dmul>:
 8001e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6e:	4657      	mov	r7, sl
 8001e70:	464e      	mov	r6, r9
 8001e72:	4645      	mov	r5, r8
 8001e74:	46de      	mov	lr, fp
 8001e76:	b5e0      	push	{r5, r6, r7, lr}
 8001e78:	4698      	mov	r8, r3
 8001e7a:	030c      	lsls	r4, r1, #12
 8001e7c:	004b      	lsls	r3, r1, #1
 8001e7e:	0006      	movs	r6, r0
 8001e80:	4692      	mov	sl, r2
 8001e82:	b087      	sub	sp, #28
 8001e84:	0b24      	lsrs	r4, r4, #12
 8001e86:	0d5b      	lsrs	r3, r3, #21
 8001e88:	0fcf      	lsrs	r7, r1, #31
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dmul+0x24>
 8001e8e:	e15c      	b.n	800214a <__aeabi_dmul+0x2de>
 8001e90:	4ad9      	ldr	r2, [pc, #868]	; (80021f8 <__aeabi_dmul+0x38c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d100      	bne.n	8001e98 <__aeabi_dmul+0x2c>
 8001e96:	e175      	b.n	8002184 <__aeabi_dmul+0x318>
 8001e98:	0f42      	lsrs	r2, r0, #29
 8001e9a:	00e4      	lsls	r4, r4, #3
 8001e9c:	4314      	orrs	r4, r2
 8001e9e:	2280      	movs	r2, #128	; 0x80
 8001ea0:	0412      	lsls	r2, r2, #16
 8001ea2:	4314      	orrs	r4, r2
 8001ea4:	4ad5      	ldr	r2, [pc, #852]	; (80021fc <__aeabi_dmul+0x390>)
 8001ea6:	00c5      	lsls	r5, r0, #3
 8001ea8:	4694      	mov	ip, r2
 8001eaa:	4463      	add	r3, ip
 8001eac:	9300      	str	r3, [sp, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	4699      	mov	r9, r3
 8001eb2:	469b      	mov	fp, r3
 8001eb4:	4643      	mov	r3, r8
 8001eb6:	4642      	mov	r2, r8
 8001eb8:	031e      	lsls	r6, r3, #12
 8001eba:	0fd2      	lsrs	r2, r2, #31
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4650      	mov	r0, sl
 8001ec0:	4690      	mov	r8, r2
 8001ec2:	0b36      	lsrs	r6, r6, #12
 8001ec4:	0d5b      	lsrs	r3, r3, #21
 8001ec6:	d100      	bne.n	8001eca <__aeabi_dmul+0x5e>
 8001ec8:	e120      	b.n	800210c <__aeabi_dmul+0x2a0>
 8001eca:	4acb      	ldr	r2, [pc, #812]	; (80021f8 <__aeabi_dmul+0x38c>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dmul+0x66>
 8001ed0:	e162      	b.n	8002198 <__aeabi_dmul+0x32c>
 8001ed2:	49ca      	ldr	r1, [pc, #808]	; (80021fc <__aeabi_dmul+0x390>)
 8001ed4:	0f42      	lsrs	r2, r0, #29
 8001ed6:	468c      	mov	ip, r1
 8001ed8:	9900      	ldr	r1, [sp, #0]
 8001eda:	4463      	add	r3, ip
 8001edc:	00f6      	lsls	r6, r6, #3
 8001ede:	468c      	mov	ip, r1
 8001ee0:	4316      	orrs	r6, r2
 8001ee2:	2280      	movs	r2, #128	; 0x80
 8001ee4:	449c      	add	ip, r3
 8001ee6:	0412      	lsls	r2, r2, #16
 8001ee8:	4663      	mov	r3, ip
 8001eea:	4316      	orrs	r6, r2
 8001eec:	00c2      	lsls	r2, r0, #3
 8001eee:	2000      	movs	r0, #0
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	9900      	ldr	r1, [sp, #0]
 8001ef4:	4643      	mov	r3, r8
 8001ef6:	3101      	adds	r1, #1
 8001ef8:	468c      	mov	ip, r1
 8001efa:	4649      	mov	r1, r9
 8001efc:	407b      	eors	r3, r7
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	290f      	cmp	r1, #15
 8001f02:	d826      	bhi.n	8001f52 <__aeabi_dmul+0xe6>
 8001f04:	4bbe      	ldr	r3, [pc, #760]	; (8002200 <__aeabi_dmul+0x394>)
 8001f06:	0089      	lsls	r1, r1, #2
 8001f08:	5859      	ldr	r1, [r3, r1]
 8001f0a:	468f      	mov	pc, r1
 8001f0c:	4643      	mov	r3, r8
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	0034      	movs	r4, r6
 8001f12:	0015      	movs	r5, r2
 8001f14:	4683      	mov	fp, r0
 8001f16:	465b      	mov	r3, fp
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d016      	beq.n	8001f4a <__aeabi_dmul+0xde>
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d100      	bne.n	8001f22 <__aeabi_dmul+0xb6>
 8001f20:	e203      	b.n	800232a <__aeabi_dmul+0x4be>
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d000      	beq.n	8001f28 <__aeabi_dmul+0xbc>
 8001f26:	e0cd      	b.n	80020c4 <__aeabi_dmul+0x258>
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2400      	movs	r4, #0
 8001f2c:	2500      	movs	r5, #0
 8001f2e:	9b01      	ldr	r3, [sp, #4]
 8001f30:	0512      	lsls	r2, r2, #20
 8001f32:	4322      	orrs	r2, r4
 8001f34:	07db      	lsls	r3, r3, #31
 8001f36:	431a      	orrs	r2, r3
 8001f38:	0028      	movs	r0, r5
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	b007      	add	sp, #28
 8001f3e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f40:	46bb      	mov	fp, r7
 8001f42:	46b2      	mov	sl, r6
 8001f44:	46a9      	mov	r9, r5
 8001f46:	46a0      	mov	r8, r4
 8001f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4a:	2400      	movs	r4, #0
 8001f4c:	2500      	movs	r5, #0
 8001f4e:	4aaa      	ldr	r2, [pc, #680]	; (80021f8 <__aeabi_dmul+0x38c>)
 8001f50:	e7ed      	b.n	8001f2e <__aeabi_dmul+0xc2>
 8001f52:	0c28      	lsrs	r0, r5, #16
 8001f54:	042d      	lsls	r5, r5, #16
 8001f56:	0c2d      	lsrs	r5, r5, #16
 8001f58:	002b      	movs	r3, r5
 8001f5a:	0c11      	lsrs	r1, r2, #16
 8001f5c:	0412      	lsls	r2, r2, #16
 8001f5e:	0c12      	lsrs	r2, r2, #16
 8001f60:	4353      	muls	r3, r2
 8001f62:	4698      	mov	r8, r3
 8001f64:	0013      	movs	r3, r2
 8001f66:	002f      	movs	r7, r5
 8001f68:	4343      	muls	r3, r0
 8001f6a:	4699      	mov	r9, r3
 8001f6c:	434f      	muls	r7, r1
 8001f6e:	444f      	add	r7, r9
 8001f70:	46bb      	mov	fp, r7
 8001f72:	4647      	mov	r7, r8
 8001f74:	000b      	movs	r3, r1
 8001f76:	0c3f      	lsrs	r7, r7, #16
 8001f78:	46ba      	mov	sl, r7
 8001f7a:	4343      	muls	r3, r0
 8001f7c:	44da      	add	sl, fp
 8001f7e:	9302      	str	r3, [sp, #8]
 8001f80:	45d1      	cmp	r9, sl
 8001f82:	d904      	bls.n	8001f8e <__aeabi_dmul+0x122>
 8001f84:	2780      	movs	r7, #128	; 0x80
 8001f86:	027f      	lsls	r7, r7, #9
 8001f88:	46b9      	mov	r9, r7
 8001f8a:	444b      	add	r3, r9
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	4653      	mov	r3, sl
 8001f90:	0c1b      	lsrs	r3, r3, #16
 8001f92:	469b      	mov	fp, r3
 8001f94:	4653      	mov	r3, sl
 8001f96:	041f      	lsls	r7, r3, #16
 8001f98:	4643      	mov	r3, r8
 8001f9a:	041b      	lsls	r3, r3, #16
 8001f9c:	0c1b      	lsrs	r3, r3, #16
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	003b      	movs	r3, r7
 8001fa2:	4443      	add	r3, r8
 8001fa4:	9304      	str	r3, [sp, #16]
 8001fa6:	0c33      	lsrs	r3, r6, #16
 8001fa8:	0436      	lsls	r6, r6, #16
 8001faa:	0c36      	lsrs	r6, r6, #16
 8001fac:	4698      	mov	r8, r3
 8001fae:	0033      	movs	r3, r6
 8001fb0:	4343      	muls	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	4643      	mov	r3, r8
 8001fb6:	4343      	muls	r3, r0
 8001fb8:	002f      	movs	r7, r5
 8001fba:	469a      	mov	sl, r3
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	4377      	muls	r7, r6
 8001fc0:	435d      	muls	r5, r3
 8001fc2:	0c38      	lsrs	r0, r7, #16
 8001fc4:	444d      	add	r5, r9
 8001fc6:	1945      	adds	r5, r0, r5
 8001fc8:	45a9      	cmp	r9, r5
 8001fca:	d903      	bls.n	8001fd4 <__aeabi_dmul+0x168>
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	025b      	lsls	r3, r3, #9
 8001fd0:	4699      	mov	r9, r3
 8001fd2:	44ca      	add	sl, r9
 8001fd4:	043f      	lsls	r7, r7, #16
 8001fd6:	0c28      	lsrs	r0, r5, #16
 8001fd8:	0c3f      	lsrs	r7, r7, #16
 8001fda:	042d      	lsls	r5, r5, #16
 8001fdc:	19ed      	adds	r5, r5, r7
 8001fde:	0c27      	lsrs	r7, r4, #16
 8001fe0:	0424      	lsls	r4, r4, #16
 8001fe2:	0c24      	lsrs	r4, r4, #16
 8001fe4:	0003      	movs	r3, r0
 8001fe6:	0020      	movs	r0, r4
 8001fe8:	4350      	muls	r0, r2
 8001fea:	437a      	muls	r2, r7
 8001fec:	4691      	mov	r9, r2
 8001fee:	003a      	movs	r2, r7
 8001ff0:	4453      	add	r3, sl
 8001ff2:	9305      	str	r3, [sp, #20]
 8001ff4:	0c03      	lsrs	r3, r0, #16
 8001ff6:	469a      	mov	sl, r3
 8001ff8:	434a      	muls	r2, r1
 8001ffa:	4361      	muls	r1, r4
 8001ffc:	4449      	add	r1, r9
 8001ffe:	4451      	add	r1, sl
 8002000:	44ab      	add	fp, r5
 8002002:	4589      	cmp	r9, r1
 8002004:	d903      	bls.n	800200e <__aeabi_dmul+0x1a2>
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	025b      	lsls	r3, r3, #9
 800200a:	4699      	mov	r9, r3
 800200c:	444a      	add	r2, r9
 800200e:	0400      	lsls	r0, r0, #16
 8002010:	0c0b      	lsrs	r3, r1, #16
 8002012:	0c00      	lsrs	r0, r0, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	1809      	adds	r1, r1, r0
 8002018:	0020      	movs	r0, r4
 800201a:	4699      	mov	r9, r3
 800201c:	4643      	mov	r3, r8
 800201e:	4370      	muls	r0, r6
 8002020:	435c      	muls	r4, r3
 8002022:	437e      	muls	r6, r7
 8002024:	435f      	muls	r7, r3
 8002026:	0c03      	lsrs	r3, r0, #16
 8002028:	4698      	mov	r8, r3
 800202a:	19a4      	adds	r4, r4, r6
 800202c:	4444      	add	r4, r8
 800202e:	444a      	add	r2, r9
 8002030:	9703      	str	r7, [sp, #12]
 8002032:	42a6      	cmp	r6, r4
 8002034:	d904      	bls.n	8002040 <__aeabi_dmul+0x1d4>
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	025b      	lsls	r3, r3, #9
 800203a:	4698      	mov	r8, r3
 800203c:	4447      	add	r7, r8
 800203e:	9703      	str	r7, [sp, #12]
 8002040:	0423      	lsls	r3, r4, #16
 8002042:	9e02      	ldr	r6, [sp, #8]
 8002044:	469a      	mov	sl, r3
 8002046:	9b05      	ldr	r3, [sp, #20]
 8002048:	445e      	add	r6, fp
 800204a:	4698      	mov	r8, r3
 800204c:	42ae      	cmp	r6, r5
 800204e:	41ad      	sbcs	r5, r5
 8002050:	1876      	adds	r6, r6, r1
 8002052:	428e      	cmp	r6, r1
 8002054:	4189      	sbcs	r1, r1
 8002056:	0400      	lsls	r0, r0, #16
 8002058:	0c00      	lsrs	r0, r0, #16
 800205a:	4450      	add	r0, sl
 800205c:	4440      	add	r0, r8
 800205e:	426d      	negs	r5, r5
 8002060:	1947      	adds	r7, r0, r5
 8002062:	46b8      	mov	r8, r7
 8002064:	4693      	mov	fp, r2
 8002066:	4249      	negs	r1, r1
 8002068:	4689      	mov	r9, r1
 800206a:	44c3      	add	fp, r8
 800206c:	44d9      	add	r9, fp
 800206e:	4298      	cmp	r0, r3
 8002070:	4180      	sbcs	r0, r0
 8002072:	45a8      	cmp	r8, r5
 8002074:	41ad      	sbcs	r5, r5
 8002076:	4593      	cmp	fp, r2
 8002078:	4192      	sbcs	r2, r2
 800207a:	4589      	cmp	r9, r1
 800207c:	4189      	sbcs	r1, r1
 800207e:	426d      	negs	r5, r5
 8002080:	4240      	negs	r0, r0
 8002082:	4328      	orrs	r0, r5
 8002084:	0c24      	lsrs	r4, r4, #16
 8002086:	4252      	negs	r2, r2
 8002088:	4249      	negs	r1, r1
 800208a:	430a      	orrs	r2, r1
 800208c:	9b03      	ldr	r3, [sp, #12]
 800208e:	1900      	adds	r0, r0, r4
 8002090:	1880      	adds	r0, r0, r2
 8002092:	18c7      	adds	r7, r0, r3
 8002094:	464b      	mov	r3, r9
 8002096:	0ddc      	lsrs	r4, r3, #23
 8002098:	9b04      	ldr	r3, [sp, #16]
 800209a:	0275      	lsls	r5, r6, #9
 800209c:	431d      	orrs	r5, r3
 800209e:	1e6a      	subs	r2, r5, #1
 80020a0:	4195      	sbcs	r5, r2
 80020a2:	464b      	mov	r3, r9
 80020a4:	0df6      	lsrs	r6, r6, #23
 80020a6:	027f      	lsls	r7, r7, #9
 80020a8:	4335      	orrs	r5, r6
 80020aa:	025a      	lsls	r2, r3, #9
 80020ac:	433c      	orrs	r4, r7
 80020ae:	4315      	orrs	r5, r2
 80020b0:	01fb      	lsls	r3, r7, #7
 80020b2:	d400      	bmi.n	80020b6 <__aeabi_dmul+0x24a>
 80020b4:	e11c      	b.n	80022f0 <__aeabi_dmul+0x484>
 80020b6:	2101      	movs	r1, #1
 80020b8:	086a      	lsrs	r2, r5, #1
 80020ba:	400d      	ands	r5, r1
 80020bc:	4315      	orrs	r5, r2
 80020be:	07e2      	lsls	r2, r4, #31
 80020c0:	4315      	orrs	r5, r2
 80020c2:	0864      	lsrs	r4, r4, #1
 80020c4:	494f      	ldr	r1, [pc, #316]	; (8002204 <__aeabi_dmul+0x398>)
 80020c6:	4461      	add	r1, ip
 80020c8:	2900      	cmp	r1, #0
 80020ca:	dc00      	bgt.n	80020ce <__aeabi_dmul+0x262>
 80020cc:	e0b0      	b.n	8002230 <__aeabi_dmul+0x3c4>
 80020ce:	076b      	lsls	r3, r5, #29
 80020d0:	d009      	beq.n	80020e6 <__aeabi_dmul+0x27a>
 80020d2:	220f      	movs	r2, #15
 80020d4:	402a      	ands	r2, r5
 80020d6:	2a04      	cmp	r2, #4
 80020d8:	d005      	beq.n	80020e6 <__aeabi_dmul+0x27a>
 80020da:	1d2a      	adds	r2, r5, #4
 80020dc:	42aa      	cmp	r2, r5
 80020de:	41ad      	sbcs	r5, r5
 80020e0:	426d      	negs	r5, r5
 80020e2:	1964      	adds	r4, r4, r5
 80020e4:	0015      	movs	r5, r2
 80020e6:	01e3      	lsls	r3, r4, #7
 80020e8:	d504      	bpl.n	80020f4 <__aeabi_dmul+0x288>
 80020ea:	2180      	movs	r1, #128	; 0x80
 80020ec:	4a46      	ldr	r2, [pc, #280]	; (8002208 <__aeabi_dmul+0x39c>)
 80020ee:	00c9      	lsls	r1, r1, #3
 80020f0:	4014      	ands	r4, r2
 80020f2:	4461      	add	r1, ip
 80020f4:	4a45      	ldr	r2, [pc, #276]	; (800220c <__aeabi_dmul+0x3a0>)
 80020f6:	4291      	cmp	r1, r2
 80020f8:	dd00      	ble.n	80020fc <__aeabi_dmul+0x290>
 80020fa:	e726      	b.n	8001f4a <__aeabi_dmul+0xde>
 80020fc:	0762      	lsls	r2, r4, #29
 80020fe:	08ed      	lsrs	r5, r5, #3
 8002100:	0264      	lsls	r4, r4, #9
 8002102:	0549      	lsls	r1, r1, #21
 8002104:	4315      	orrs	r5, r2
 8002106:	0b24      	lsrs	r4, r4, #12
 8002108:	0d4a      	lsrs	r2, r1, #21
 800210a:	e710      	b.n	8001f2e <__aeabi_dmul+0xc2>
 800210c:	4652      	mov	r2, sl
 800210e:	4332      	orrs	r2, r6
 8002110:	d100      	bne.n	8002114 <__aeabi_dmul+0x2a8>
 8002112:	e07f      	b.n	8002214 <__aeabi_dmul+0x3a8>
 8002114:	2e00      	cmp	r6, #0
 8002116:	d100      	bne.n	800211a <__aeabi_dmul+0x2ae>
 8002118:	e0dc      	b.n	80022d4 <__aeabi_dmul+0x468>
 800211a:	0030      	movs	r0, r6
 800211c:	f000 fe3e 	bl	8002d9c <__clzsi2>
 8002120:	0002      	movs	r2, r0
 8002122:	3a0b      	subs	r2, #11
 8002124:	231d      	movs	r3, #29
 8002126:	0001      	movs	r1, r0
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	4652      	mov	r2, sl
 800212c:	3908      	subs	r1, #8
 800212e:	40da      	lsrs	r2, r3
 8002130:	408e      	lsls	r6, r1
 8002132:	4316      	orrs	r6, r2
 8002134:	4652      	mov	r2, sl
 8002136:	408a      	lsls	r2, r1
 8002138:	9b00      	ldr	r3, [sp, #0]
 800213a:	4935      	ldr	r1, [pc, #212]	; (8002210 <__aeabi_dmul+0x3a4>)
 800213c:	1a18      	subs	r0, r3, r0
 800213e:	0003      	movs	r3, r0
 8002140:	468c      	mov	ip, r1
 8002142:	4463      	add	r3, ip
 8002144:	2000      	movs	r0, #0
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	e6d3      	b.n	8001ef2 <__aeabi_dmul+0x86>
 800214a:	0025      	movs	r5, r4
 800214c:	4305      	orrs	r5, r0
 800214e:	d04a      	beq.n	80021e6 <__aeabi_dmul+0x37a>
 8002150:	2c00      	cmp	r4, #0
 8002152:	d100      	bne.n	8002156 <__aeabi_dmul+0x2ea>
 8002154:	e0b0      	b.n	80022b8 <__aeabi_dmul+0x44c>
 8002156:	0020      	movs	r0, r4
 8002158:	f000 fe20 	bl	8002d9c <__clzsi2>
 800215c:	0001      	movs	r1, r0
 800215e:	0002      	movs	r2, r0
 8002160:	390b      	subs	r1, #11
 8002162:	231d      	movs	r3, #29
 8002164:	0010      	movs	r0, r2
 8002166:	1a5b      	subs	r3, r3, r1
 8002168:	0031      	movs	r1, r6
 800216a:	0035      	movs	r5, r6
 800216c:	3808      	subs	r0, #8
 800216e:	4084      	lsls	r4, r0
 8002170:	40d9      	lsrs	r1, r3
 8002172:	4085      	lsls	r5, r0
 8002174:	430c      	orrs	r4, r1
 8002176:	4826      	ldr	r0, [pc, #152]	; (8002210 <__aeabi_dmul+0x3a4>)
 8002178:	1a83      	subs	r3, r0, r2
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	4699      	mov	r9, r3
 8002180:	469b      	mov	fp, r3
 8002182:	e697      	b.n	8001eb4 <__aeabi_dmul+0x48>
 8002184:	0005      	movs	r5, r0
 8002186:	4325      	orrs	r5, r4
 8002188:	d126      	bne.n	80021d8 <__aeabi_dmul+0x36c>
 800218a:	2208      	movs	r2, #8
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2302      	movs	r3, #2
 8002190:	2400      	movs	r4, #0
 8002192:	4691      	mov	r9, r2
 8002194:	469b      	mov	fp, r3
 8002196:	e68d      	b.n	8001eb4 <__aeabi_dmul+0x48>
 8002198:	4652      	mov	r2, sl
 800219a:	9b00      	ldr	r3, [sp, #0]
 800219c:	4332      	orrs	r2, r6
 800219e:	d110      	bne.n	80021c2 <__aeabi_dmul+0x356>
 80021a0:	4915      	ldr	r1, [pc, #84]	; (80021f8 <__aeabi_dmul+0x38c>)
 80021a2:	2600      	movs	r6, #0
 80021a4:	468c      	mov	ip, r1
 80021a6:	4463      	add	r3, ip
 80021a8:	4649      	mov	r1, r9
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2302      	movs	r3, #2
 80021ae:	4319      	orrs	r1, r3
 80021b0:	4689      	mov	r9, r1
 80021b2:	2002      	movs	r0, #2
 80021b4:	e69d      	b.n	8001ef2 <__aeabi_dmul+0x86>
 80021b6:	465b      	mov	r3, fp
 80021b8:	9701      	str	r7, [sp, #4]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d000      	beq.n	80021c0 <__aeabi_dmul+0x354>
 80021be:	e6ad      	b.n	8001f1c <__aeabi_dmul+0xb0>
 80021c0:	e6c3      	b.n	8001f4a <__aeabi_dmul+0xde>
 80021c2:	4a0d      	ldr	r2, [pc, #52]	; (80021f8 <__aeabi_dmul+0x38c>)
 80021c4:	2003      	movs	r0, #3
 80021c6:	4694      	mov	ip, r2
 80021c8:	4463      	add	r3, ip
 80021ca:	464a      	mov	r2, r9
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2303      	movs	r3, #3
 80021d0:	431a      	orrs	r2, r3
 80021d2:	4691      	mov	r9, r2
 80021d4:	4652      	mov	r2, sl
 80021d6:	e68c      	b.n	8001ef2 <__aeabi_dmul+0x86>
 80021d8:	220c      	movs	r2, #12
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2303      	movs	r3, #3
 80021de:	0005      	movs	r5, r0
 80021e0:	4691      	mov	r9, r2
 80021e2:	469b      	mov	fp, r3
 80021e4:	e666      	b.n	8001eb4 <__aeabi_dmul+0x48>
 80021e6:	2304      	movs	r3, #4
 80021e8:	4699      	mov	r9, r3
 80021ea:	2300      	movs	r3, #0
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	2400      	movs	r4, #0
 80021f2:	469b      	mov	fp, r3
 80021f4:	e65e      	b.n	8001eb4 <__aeabi_dmul+0x48>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	000007ff 	.word	0x000007ff
 80021fc:	fffffc01 	.word	0xfffffc01
 8002200:	080070a8 	.word	0x080070a8
 8002204:	000003ff 	.word	0x000003ff
 8002208:	feffffff 	.word	0xfeffffff
 800220c:	000007fe 	.word	0x000007fe
 8002210:	fffffc0d 	.word	0xfffffc0d
 8002214:	4649      	mov	r1, r9
 8002216:	2301      	movs	r3, #1
 8002218:	4319      	orrs	r1, r3
 800221a:	4689      	mov	r9, r1
 800221c:	2600      	movs	r6, #0
 800221e:	2001      	movs	r0, #1
 8002220:	e667      	b.n	8001ef2 <__aeabi_dmul+0x86>
 8002222:	2300      	movs	r3, #0
 8002224:	2480      	movs	r4, #128	; 0x80
 8002226:	2500      	movs	r5, #0
 8002228:	4a43      	ldr	r2, [pc, #268]	; (8002338 <__aeabi_dmul+0x4cc>)
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	0324      	lsls	r4, r4, #12
 800222e:	e67e      	b.n	8001f2e <__aeabi_dmul+0xc2>
 8002230:	2001      	movs	r0, #1
 8002232:	1a40      	subs	r0, r0, r1
 8002234:	2838      	cmp	r0, #56	; 0x38
 8002236:	dd00      	ble.n	800223a <__aeabi_dmul+0x3ce>
 8002238:	e676      	b.n	8001f28 <__aeabi_dmul+0xbc>
 800223a:	281f      	cmp	r0, #31
 800223c:	dd5b      	ble.n	80022f6 <__aeabi_dmul+0x48a>
 800223e:	221f      	movs	r2, #31
 8002240:	0023      	movs	r3, r4
 8002242:	4252      	negs	r2, r2
 8002244:	1a51      	subs	r1, r2, r1
 8002246:	40cb      	lsrs	r3, r1
 8002248:	0019      	movs	r1, r3
 800224a:	2820      	cmp	r0, #32
 800224c:	d003      	beq.n	8002256 <__aeabi_dmul+0x3ea>
 800224e:	4a3b      	ldr	r2, [pc, #236]	; (800233c <__aeabi_dmul+0x4d0>)
 8002250:	4462      	add	r2, ip
 8002252:	4094      	lsls	r4, r2
 8002254:	4325      	orrs	r5, r4
 8002256:	1e6a      	subs	r2, r5, #1
 8002258:	4195      	sbcs	r5, r2
 800225a:	002a      	movs	r2, r5
 800225c:	430a      	orrs	r2, r1
 800225e:	2107      	movs	r1, #7
 8002260:	000d      	movs	r5, r1
 8002262:	2400      	movs	r4, #0
 8002264:	4015      	ands	r5, r2
 8002266:	4211      	tst	r1, r2
 8002268:	d05b      	beq.n	8002322 <__aeabi_dmul+0x4b6>
 800226a:	210f      	movs	r1, #15
 800226c:	2400      	movs	r4, #0
 800226e:	4011      	ands	r1, r2
 8002270:	2904      	cmp	r1, #4
 8002272:	d053      	beq.n	800231c <__aeabi_dmul+0x4b0>
 8002274:	1d11      	adds	r1, r2, #4
 8002276:	4291      	cmp	r1, r2
 8002278:	4192      	sbcs	r2, r2
 800227a:	4252      	negs	r2, r2
 800227c:	18a4      	adds	r4, r4, r2
 800227e:	000a      	movs	r2, r1
 8002280:	0223      	lsls	r3, r4, #8
 8002282:	d54b      	bpl.n	800231c <__aeabi_dmul+0x4b0>
 8002284:	2201      	movs	r2, #1
 8002286:	2400      	movs	r4, #0
 8002288:	2500      	movs	r5, #0
 800228a:	e650      	b.n	8001f2e <__aeabi_dmul+0xc2>
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	031b      	lsls	r3, r3, #12
 8002290:	421c      	tst	r4, r3
 8002292:	d009      	beq.n	80022a8 <__aeabi_dmul+0x43c>
 8002294:	421e      	tst	r6, r3
 8002296:	d107      	bne.n	80022a8 <__aeabi_dmul+0x43c>
 8002298:	4333      	orrs	r3, r6
 800229a:	031c      	lsls	r4, r3, #12
 800229c:	4643      	mov	r3, r8
 800229e:	0015      	movs	r5, r2
 80022a0:	0b24      	lsrs	r4, r4, #12
 80022a2:	4a25      	ldr	r2, [pc, #148]	; (8002338 <__aeabi_dmul+0x4cc>)
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	e642      	b.n	8001f2e <__aeabi_dmul+0xc2>
 80022a8:	2280      	movs	r2, #128	; 0x80
 80022aa:	0312      	lsls	r2, r2, #12
 80022ac:	4314      	orrs	r4, r2
 80022ae:	0324      	lsls	r4, r4, #12
 80022b0:	4a21      	ldr	r2, [pc, #132]	; (8002338 <__aeabi_dmul+0x4cc>)
 80022b2:	0b24      	lsrs	r4, r4, #12
 80022b4:	9701      	str	r7, [sp, #4]
 80022b6:	e63a      	b.n	8001f2e <__aeabi_dmul+0xc2>
 80022b8:	f000 fd70 	bl	8002d9c <__clzsi2>
 80022bc:	0001      	movs	r1, r0
 80022be:	0002      	movs	r2, r0
 80022c0:	3115      	adds	r1, #21
 80022c2:	3220      	adds	r2, #32
 80022c4:	291c      	cmp	r1, #28
 80022c6:	dc00      	bgt.n	80022ca <__aeabi_dmul+0x45e>
 80022c8:	e74b      	b.n	8002162 <__aeabi_dmul+0x2f6>
 80022ca:	0034      	movs	r4, r6
 80022cc:	3808      	subs	r0, #8
 80022ce:	2500      	movs	r5, #0
 80022d0:	4084      	lsls	r4, r0
 80022d2:	e750      	b.n	8002176 <__aeabi_dmul+0x30a>
 80022d4:	f000 fd62 	bl	8002d9c <__clzsi2>
 80022d8:	0003      	movs	r3, r0
 80022da:	001a      	movs	r2, r3
 80022dc:	3215      	adds	r2, #21
 80022de:	3020      	adds	r0, #32
 80022e0:	2a1c      	cmp	r2, #28
 80022e2:	dc00      	bgt.n	80022e6 <__aeabi_dmul+0x47a>
 80022e4:	e71e      	b.n	8002124 <__aeabi_dmul+0x2b8>
 80022e6:	4656      	mov	r6, sl
 80022e8:	3b08      	subs	r3, #8
 80022ea:	2200      	movs	r2, #0
 80022ec:	409e      	lsls	r6, r3
 80022ee:	e723      	b.n	8002138 <__aeabi_dmul+0x2cc>
 80022f0:	9b00      	ldr	r3, [sp, #0]
 80022f2:	469c      	mov	ip, r3
 80022f4:	e6e6      	b.n	80020c4 <__aeabi_dmul+0x258>
 80022f6:	4912      	ldr	r1, [pc, #72]	; (8002340 <__aeabi_dmul+0x4d4>)
 80022f8:	0022      	movs	r2, r4
 80022fa:	4461      	add	r1, ip
 80022fc:	002e      	movs	r6, r5
 80022fe:	408d      	lsls	r5, r1
 8002300:	408a      	lsls	r2, r1
 8002302:	40c6      	lsrs	r6, r0
 8002304:	1e69      	subs	r1, r5, #1
 8002306:	418d      	sbcs	r5, r1
 8002308:	4332      	orrs	r2, r6
 800230a:	432a      	orrs	r2, r5
 800230c:	40c4      	lsrs	r4, r0
 800230e:	0753      	lsls	r3, r2, #29
 8002310:	d0b6      	beq.n	8002280 <__aeabi_dmul+0x414>
 8002312:	210f      	movs	r1, #15
 8002314:	4011      	ands	r1, r2
 8002316:	2904      	cmp	r1, #4
 8002318:	d1ac      	bne.n	8002274 <__aeabi_dmul+0x408>
 800231a:	e7b1      	b.n	8002280 <__aeabi_dmul+0x414>
 800231c:	0765      	lsls	r5, r4, #29
 800231e:	0264      	lsls	r4, r4, #9
 8002320:	0b24      	lsrs	r4, r4, #12
 8002322:	08d2      	lsrs	r2, r2, #3
 8002324:	4315      	orrs	r5, r2
 8002326:	2200      	movs	r2, #0
 8002328:	e601      	b.n	8001f2e <__aeabi_dmul+0xc2>
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	0312      	lsls	r2, r2, #12
 800232e:	4314      	orrs	r4, r2
 8002330:	0324      	lsls	r4, r4, #12
 8002332:	4a01      	ldr	r2, [pc, #4]	; (8002338 <__aeabi_dmul+0x4cc>)
 8002334:	0b24      	lsrs	r4, r4, #12
 8002336:	e5fa      	b.n	8001f2e <__aeabi_dmul+0xc2>
 8002338:	000007ff 	.word	0x000007ff
 800233c:	0000043e 	.word	0x0000043e
 8002340:	0000041e 	.word	0x0000041e

08002344 <__aeabi_dsub>:
 8002344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002346:	4657      	mov	r7, sl
 8002348:	464e      	mov	r6, r9
 800234a:	4645      	mov	r5, r8
 800234c:	46de      	mov	lr, fp
 800234e:	b5e0      	push	{r5, r6, r7, lr}
 8002350:	001e      	movs	r6, r3
 8002352:	0017      	movs	r7, r2
 8002354:	004a      	lsls	r2, r1, #1
 8002356:	030b      	lsls	r3, r1, #12
 8002358:	0d52      	lsrs	r2, r2, #21
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	4690      	mov	r8, r2
 800235e:	0f42      	lsrs	r2, r0, #29
 8002360:	431a      	orrs	r2, r3
 8002362:	0fcd      	lsrs	r5, r1, #31
 8002364:	4ccd      	ldr	r4, [pc, #820]	; (800269c <__aeabi_dsub+0x358>)
 8002366:	0331      	lsls	r1, r6, #12
 8002368:	00c3      	lsls	r3, r0, #3
 800236a:	4694      	mov	ip, r2
 800236c:	0070      	lsls	r0, r6, #1
 800236e:	0f7a      	lsrs	r2, r7, #29
 8002370:	0a49      	lsrs	r1, r1, #9
 8002372:	00ff      	lsls	r7, r7, #3
 8002374:	469a      	mov	sl, r3
 8002376:	46b9      	mov	r9, r7
 8002378:	0d40      	lsrs	r0, r0, #21
 800237a:	0ff6      	lsrs	r6, r6, #31
 800237c:	4311      	orrs	r1, r2
 800237e:	42a0      	cmp	r0, r4
 8002380:	d100      	bne.n	8002384 <__aeabi_dsub+0x40>
 8002382:	e0b1      	b.n	80024e8 <__aeabi_dsub+0x1a4>
 8002384:	2201      	movs	r2, #1
 8002386:	4056      	eors	r6, r2
 8002388:	46b3      	mov	fp, r6
 800238a:	42b5      	cmp	r5, r6
 800238c:	d100      	bne.n	8002390 <__aeabi_dsub+0x4c>
 800238e:	e088      	b.n	80024a2 <__aeabi_dsub+0x15e>
 8002390:	4642      	mov	r2, r8
 8002392:	1a12      	subs	r2, r2, r0
 8002394:	2a00      	cmp	r2, #0
 8002396:	dc00      	bgt.n	800239a <__aeabi_dsub+0x56>
 8002398:	e0ae      	b.n	80024f8 <__aeabi_dsub+0x1b4>
 800239a:	2800      	cmp	r0, #0
 800239c:	d100      	bne.n	80023a0 <__aeabi_dsub+0x5c>
 800239e:	e0c1      	b.n	8002524 <__aeabi_dsub+0x1e0>
 80023a0:	48be      	ldr	r0, [pc, #760]	; (800269c <__aeabi_dsub+0x358>)
 80023a2:	4580      	cmp	r8, r0
 80023a4:	d100      	bne.n	80023a8 <__aeabi_dsub+0x64>
 80023a6:	e151      	b.n	800264c <__aeabi_dsub+0x308>
 80023a8:	2080      	movs	r0, #128	; 0x80
 80023aa:	0400      	lsls	r0, r0, #16
 80023ac:	4301      	orrs	r1, r0
 80023ae:	2a38      	cmp	r2, #56	; 0x38
 80023b0:	dd00      	ble.n	80023b4 <__aeabi_dsub+0x70>
 80023b2:	e17b      	b.n	80026ac <__aeabi_dsub+0x368>
 80023b4:	2a1f      	cmp	r2, #31
 80023b6:	dd00      	ble.n	80023ba <__aeabi_dsub+0x76>
 80023b8:	e1ee      	b.n	8002798 <__aeabi_dsub+0x454>
 80023ba:	2020      	movs	r0, #32
 80023bc:	003e      	movs	r6, r7
 80023be:	1a80      	subs	r0, r0, r2
 80023c0:	000c      	movs	r4, r1
 80023c2:	40d6      	lsrs	r6, r2
 80023c4:	40d1      	lsrs	r1, r2
 80023c6:	4087      	lsls	r7, r0
 80023c8:	4662      	mov	r2, ip
 80023ca:	4084      	lsls	r4, r0
 80023cc:	1a52      	subs	r2, r2, r1
 80023ce:	1e78      	subs	r0, r7, #1
 80023d0:	4187      	sbcs	r7, r0
 80023d2:	4694      	mov	ip, r2
 80023d4:	4334      	orrs	r4, r6
 80023d6:	4327      	orrs	r7, r4
 80023d8:	1bdc      	subs	r4, r3, r7
 80023da:	42a3      	cmp	r3, r4
 80023dc:	419b      	sbcs	r3, r3
 80023de:	4662      	mov	r2, ip
 80023e0:	425b      	negs	r3, r3
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	4699      	mov	r9, r3
 80023e6:	464b      	mov	r3, r9
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	d400      	bmi.n	80023ee <__aeabi_dsub+0xaa>
 80023ec:	e118      	b.n	8002620 <__aeabi_dsub+0x2dc>
 80023ee:	464b      	mov	r3, r9
 80023f0:	0258      	lsls	r0, r3, #9
 80023f2:	0a43      	lsrs	r3, r0, #9
 80023f4:	4699      	mov	r9, r3
 80023f6:	464b      	mov	r3, r9
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0xba>
 80023fc:	e137      	b.n	800266e <__aeabi_dsub+0x32a>
 80023fe:	4648      	mov	r0, r9
 8002400:	f000 fccc 	bl	8002d9c <__clzsi2>
 8002404:	0001      	movs	r1, r0
 8002406:	3908      	subs	r1, #8
 8002408:	2320      	movs	r3, #32
 800240a:	0022      	movs	r2, r4
 800240c:	4648      	mov	r0, r9
 800240e:	1a5b      	subs	r3, r3, r1
 8002410:	40da      	lsrs	r2, r3
 8002412:	4088      	lsls	r0, r1
 8002414:	408c      	lsls	r4, r1
 8002416:	4643      	mov	r3, r8
 8002418:	4310      	orrs	r0, r2
 800241a:	4588      	cmp	r8, r1
 800241c:	dd00      	ble.n	8002420 <__aeabi_dsub+0xdc>
 800241e:	e136      	b.n	800268e <__aeabi_dsub+0x34a>
 8002420:	1ac9      	subs	r1, r1, r3
 8002422:	1c4b      	adds	r3, r1, #1
 8002424:	2b1f      	cmp	r3, #31
 8002426:	dd00      	ble.n	800242a <__aeabi_dsub+0xe6>
 8002428:	e0ea      	b.n	8002600 <__aeabi_dsub+0x2bc>
 800242a:	2220      	movs	r2, #32
 800242c:	0026      	movs	r6, r4
 800242e:	1ad2      	subs	r2, r2, r3
 8002430:	0001      	movs	r1, r0
 8002432:	4094      	lsls	r4, r2
 8002434:	40de      	lsrs	r6, r3
 8002436:	40d8      	lsrs	r0, r3
 8002438:	2300      	movs	r3, #0
 800243a:	4091      	lsls	r1, r2
 800243c:	1e62      	subs	r2, r4, #1
 800243e:	4194      	sbcs	r4, r2
 8002440:	4681      	mov	r9, r0
 8002442:	4698      	mov	r8, r3
 8002444:	4331      	orrs	r1, r6
 8002446:	430c      	orrs	r4, r1
 8002448:	0763      	lsls	r3, r4, #29
 800244a:	d009      	beq.n	8002460 <__aeabi_dsub+0x11c>
 800244c:	230f      	movs	r3, #15
 800244e:	4023      	ands	r3, r4
 8002450:	2b04      	cmp	r3, #4
 8002452:	d005      	beq.n	8002460 <__aeabi_dsub+0x11c>
 8002454:	1d23      	adds	r3, r4, #4
 8002456:	42a3      	cmp	r3, r4
 8002458:	41a4      	sbcs	r4, r4
 800245a:	4264      	negs	r4, r4
 800245c:	44a1      	add	r9, r4
 800245e:	001c      	movs	r4, r3
 8002460:	464b      	mov	r3, r9
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	d400      	bmi.n	8002468 <__aeabi_dsub+0x124>
 8002466:	e0de      	b.n	8002626 <__aeabi_dsub+0x2e2>
 8002468:	4641      	mov	r1, r8
 800246a:	4b8c      	ldr	r3, [pc, #560]	; (800269c <__aeabi_dsub+0x358>)
 800246c:	3101      	adds	r1, #1
 800246e:	4299      	cmp	r1, r3
 8002470:	d100      	bne.n	8002474 <__aeabi_dsub+0x130>
 8002472:	e0e7      	b.n	8002644 <__aeabi_dsub+0x300>
 8002474:	464b      	mov	r3, r9
 8002476:	488a      	ldr	r0, [pc, #552]	; (80026a0 <__aeabi_dsub+0x35c>)
 8002478:	08e4      	lsrs	r4, r4, #3
 800247a:	4003      	ands	r3, r0
 800247c:	0018      	movs	r0, r3
 800247e:	0549      	lsls	r1, r1, #21
 8002480:	075b      	lsls	r3, r3, #29
 8002482:	0240      	lsls	r0, r0, #9
 8002484:	4323      	orrs	r3, r4
 8002486:	0d4a      	lsrs	r2, r1, #21
 8002488:	0b04      	lsrs	r4, r0, #12
 800248a:	0512      	lsls	r2, r2, #20
 800248c:	07ed      	lsls	r5, r5, #31
 800248e:	4322      	orrs	r2, r4
 8002490:	432a      	orrs	r2, r5
 8002492:	0018      	movs	r0, r3
 8002494:	0011      	movs	r1, r2
 8002496:	bcf0      	pop	{r4, r5, r6, r7}
 8002498:	46bb      	mov	fp, r7
 800249a:	46b2      	mov	sl, r6
 800249c:	46a9      	mov	r9, r5
 800249e:	46a0      	mov	r8, r4
 80024a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024a2:	4642      	mov	r2, r8
 80024a4:	1a12      	subs	r2, r2, r0
 80024a6:	2a00      	cmp	r2, #0
 80024a8:	dd52      	ble.n	8002550 <__aeabi_dsub+0x20c>
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d100      	bne.n	80024b0 <__aeabi_dsub+0x16c>
 80024ae:	e09c      	b.n	80025ea <__aeabi_dsub+0x2a6>
 80024b0:	45a0      	cmp	r8, r4
 80024b2:	d100      	bne.n	80024b6 <__aeabi_dsub+0x172>
 80024b4:	e0ca      	b.n	800264c <__aeabi_dsub+0x308>
 80024b6:	2080      	movs	r0, #128	; 0x80
 80024b8:	0400      	lsls	r0, r0, #16
 80024ba:	4301      	orrs	r1, r0
 80024bc:	2a38      	cmp	r2, #56	; 0x38
 80024be:	dd00      	ble.n	80024c2 <__aeabi_dsub+0x17e>
 80024c0:	e149      	b.n	8002756 <__aeabi_dsub+0x412>
 80024c2:	2a1f      	cmp	r2, #31
 80024c4:	dc00      	bgt.n	80024c8 <__aeabi_dsub+0x184>
 80024c6:	e197      	b.n	80027f8 <__aeabi_dsub+0x4b4>
 80024c8:	0010      	movs	r0, r2
 80024ca:	000e      	movs	r6, r1
 80024cc:	3820      	subs	r0, #32
 80024ce:	40c6      	lsrs	r6, r0
 80024d0:	2a20      	cmp	r2, #32
 80024d2:	d004      	beq.n	80024de <__aeabi_dsub+0x19a>
 80024d4:	2040      	movs	r0, #64	; 0x40
 80024d6:	1a82      	subs	r2, r0, r2
 80024d8:	4091      	lsls	r1, r2
 80024da:	430f      	orrs	r7, r1
 80024dc:	46b9      	mov	r9, r7
 80024de:	464c      	mov	r4, r9
 80024e0:	1e62      	subs	r2, r4, #1
 80024e2:	4194      	sbcs	r4, r2
 80024e4:	4334      	orrs	r4, r6
 80024e6:	e13a      	b.n	800275e <__aeabi_dsub+0x41a>
 80024e8:	000a      	movs	r2, r1
 80024ea:	433a      	orrs	r2, r7
 80024ec:	d028      	beq.n	8002540 <__aeabi_dsub+0x1fc>
 80024ee:	46b3      	mov	fp, r6
 80024f0:	42b5      	cmp	r5, r6
 80024f2:	d02b      	beq.n	800254c <__aeabi_dsub+0x208>
 80024f4:	4a6b      	ldr	r2, [pc, #428]	; (80026a4 <__aeabi_dsub+0x360>)
 80024f6:	4442      	add	r2, r8
 80024f8:	2a00      	cmp	r2, #0
 80024fa:	d05d      	beq.n	80025b8 <__aeabi_dsub+0x274>
 80024fc:	4642      	mov	r2, r8
 80024fe:	4644      	mov	r4, r8
 8002500:	1a82      	subs	r2, r0, r2
 8002502:	2c00      	cmp	r4, #0
 8002504:	d000      	beq.n	8002508 <__aeabi_dsub+0x1c4>
 8002506:	e0f5      	b.n	80026f4 <__aeabi_dsub+0x3b0>
 8002508:	4665      	mov	r5, ip
 800250a:	431d      	orrs	r5, r3
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x1cc>
 800250e:	e19c      	b.n	800284a <__aeabi_dsub+0x506>
 8002510:	1e55      	subs	r5, r2, #1
 8002512:	2a01      	cmp	r2, #1
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x1d4>
 8002516:	e1fb      	b.n	8002910 <__aeabi_dsub+0x5cc>
 8002518:	4c60      	ldr	r4, [pc, #384]	; (800269c <__aeabi_dsub+0x358>)
 800251a:	42a2      	cmp	r2, r4
 800251c:	d100      	bne.n	8002520 <__aeabi_dsub+0x1dc>
 800251e:	e1bd      	b.n	800289c <__aeabi_dsub+0x558>
 8002520:	002a      	movs	r2, r5
 8002522:	e0f0      	b.n	8002706 <__aeabi_dsub+0x3c2>
 8002524:	0008      	movs	r0, r1
 8002526:	4338      	orrs	r0, r7
 8002528:	d100      	bne.n	800252c <__aeabi_dsub+0x1e8>
 800252a:	e0c3      	b.n	80026b4 <__aeabi_dsub+0x370>
 800252c:	1e50      	subs	r0, r2, #1
 800252e:	2a01      	cmp	r2, #1
 8002530:	d100      	bne.n	8002534 <__aeabi_dsub+0x1f0>
 8002532:	e1a8      	b.n	8002886 <__aeabi_dsub+0x542>
 8002534:	4c59      	ldr	r4, [pc, #356]	; (800269c <__aeabi_dsub+0x358>)
 8002536:	42a2      	cmp	r2, r4
 8002538:	d100      	bne.n	800253c <__aeabi_dsub+0x1f8>
 800253a:	e087      	b.n	800264c <__aeabi_dsub+0x308>
 800253c:	0002      	movs	r2, r0
 800253e:	e736      	b.n	80023ae <__aeabi_dsub+0x6a>
 8002540:	2201      	movs	r2, #1
 8002542:	4056      	eors	r6, r2
 8002544:	46b3      	mov	fp, r6
 8002546:	42b5      	cmp	r5, r6
 8002548:	d000      	beq.n	800254c <__aeabi_dsub+0x208>
 800254a:	e721      	b.n	8002390 <__aeabi_dsub+0x4c>
 800254c:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <__aeabi_dsub+0x360>)
 800254e:	4442      	add	r2, r8
 8002550:	2a00      	cmp	r2, #0
 8002552:	d100      	bne.n	8002556 <__aeabi_dsub+0x212>
 8002554:	e0b5      	b.n	80026c2 <__aeabi_dsub+0x37e>
 8002556:	4642      	mov	r2, r8
 8002558:	4644      	mov	r4, r8
 800255a:	1a82      	subs	r2, r0, r2
 800255c:	2c00      	cmp	r4, #0
 800255e:	d100      	bne.n	8002562 <__aeabi_dsub+0x21e>
 8002560:	e138      	b.n	80027d4 <__aeabi_dsub+0x490>
 8002562:	4e4e      	ldr	r6, [pc, #312]	; (800269c <__aeabi_dsub+0x358>)
 8002564:	42b0      	cmp	r0, r6
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x226>
 8002568:	e1de      	b.n	8002928 <__aeabi_dsub+0x5e4>
 800256a:	2680      	movs	r6, #128	; 0x80
 800256c:	4664      	mov	r4, ip
 800256e:	0436      	lsls	r6, r6, #16
 8002570:	4334      	orrs	r4, r6
 8002572:	46a4      	mov	ip, r4
 8002574:	2a38      	cmp	r2, #56	; 0x38
 8002576:	dd00      	ble.n	800257a <__aeabi_dsub+0x236>
 8002578:	e196      	b.n	80028a8 <__aeabi_dsub+0x564>
 800257a:	2a1f      	cmp	r2, #31
 800257c:	dd00      	ble.n	8002580 <__aeabi_dsub+0x23c>
 800257e:	e224      	b.n	80029ca <__aeabi_dsub+0x686>
 8002580:	2620      	movs	r6, #32
 8002582:	1ab4      	subs	r4, r6, r2
 8002584:	46a2      	mov	sl, r4
 8002586:	4664      	mov	r4, ip
 8002588:	4656      	mov	r6, sl
 800258a:	40b4      	lsls	r4, r6
 800258c:	46a1      	mov	r9, r4
 800258e:	001c      	movs	r4, r3
 8002590:	464e      	mov	r6, r9
 8002592:	40d4      	lsrs	r4, r2
 8002594:	4326      	orrs	r6, r4
 8002596:	0034      	movs	r4, r6
 8002598:	4656      	mov	r6, sl
 800259a:	40b3      	lsls	r3, r6
 800259c:	1e5e      	subs	r6, r3, #1
 800259e:	41b3      	sbcs	r3, r6
 80025a0:	431c      	orrs	r4, r3
 80025a2:	4663      	mov	r3, ip
 80025a4:	40d3      	lsrs	r3, r2
 80025a6:	18c9      	adds	r1, r1, r3
 80025a8:	19e4      	adds	r4, r4, r7
 80025aa:	42bc      	cmp	r4, r7
 80025ac:	41bf      	sbcs	r7, r7
 80025ae:	427f      	negs	r7, r7
 80025b0:	46b9      	mov	r9, r7
 80025b2:	4680      	mov	r8, r0
 80025b4:	4489      	add	r9, r1
 80025b6:	e0d8      	b.n	800276a <__aeabi_dsub+0x426>
 80025b8:	4640      	mov	r0, r8
 80025ba:	4c3b      	ldr	r4, [pc, #236]	; (80026a8 <__aeabi_dsub+0x364>)
 80025bc:	3001      	adds	r0, #1
 80025be:	4220      	tst	r0, r4
 80025c0:	d000      	beq.n	80025c4 <__aeabi_dsub+0x280>
 80025c2:	e0b4      	b.n	800272e <__aeabi_dsub+0x3ea>
 80025c4:	4640      	mov	r0, r8
 80025c6:	2800      	cmp	r0, #0
 80025c8:	d000      	beq.n	80025cc <__aeabi_dsub+0x288>
 80025ca:	e144      	b.n	8002856 <__aeabi_dsub+0x512>
 80025cc:	4660      	mov	r0, ip
 80025ce:	4318      	orrs	r0, r3
 80025d0:	d100      	bne.n	80025d4 <__aeabi_dsub+0x290>
 80025d2:	e190      	b.n	80028f6 <__aeabi_dsub+0x5b2>
 80025d4:	0008      	movs	r0, r1
 80025d6:	4338      	orrs	r0, r7
 80025d8:	d000      	beq.n	80025dc <__aeabi_dsub+0x298>
 80025da:	e1aa      	b.n	8002932 <__aeabi_dsub+0x5ee>
 80025dc:	4661      	mov	r1, ip
 80025de:	08db      	lsrs	r3, r3, #3
 80025e0:	0749      	lsls	r1, r1, #29
 80025e2:	430b      	orrs	r3, r1
 80025e4:	4661      	mov	r1, ip
 80025e6:	08cc      	lsrs	r4, r1, #3
 80025e8:	e027      	b.n	800263a <__aeabi_dsub+0x2f6>
 80025ea:	0008      	movs	r0, r1
 80025ec:	4338      	orrs	r0, r7
 80025ee:	d061      	beq.n	80026b4 <__aeabi_dsub+0x370>
 80025f0:	1e50      	subs	r0, r2, #1
 80025f2:	2a01      	cmp	r2, #1
 80025f4:	d100      	bne.n	80025f8 <__aeabi_dsub+0x2b4>
 80025f6:	e139      	b.n	800286c <__aeabi_dsub+0x528>
 80025f8:	42a2      	cmp	r2, r4
 80025fa:	d027      	beq.n	800264c <__aeabi_dsub+0x308>
 80025fc:	0002      	movs	r2, r0
 80025fe:	e75d      	b.n	80024bc <__aeabi_dsub+0x178>
 8002600:	0002      	movs	r2, r0
 8002602:	391f      	subs	r1, #31
 8002604:	40ca      	lsrs	r2, r1
 8002606:	0011      	movs	r1, r2
 8002608:	2b20      	cmp	r3, #32
 800260a:	d003      	beq.n	8002614 <__aeabi_dsub+0x2d0>
 800260c:	2240      	movs	r2, #64	; 0x40
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	4098      	lsls	r0, r3
 8002612:	4304      	orrs	r4, r0
 8002614:	1e63      	subs	r3, r4, #1
 8002616:	419c      	sbcs	r4, r3
 8002618:	2300      	movs	r3, #0
 800261a:	4699      	mov	r9, r3
 800261c:	4698      	mov	r8, r3
 800261e:	430c      	orrs	r4, r1
 8002620:	0763      	lsls	r3, r4, #29
 8002622:	d000      	beq.n	8002626 <__aeabi_dsub+0x2e2>
 8002624:	e712      	b.n	800244c <__aeabi_dsub+0x108>
 8002626:	464b      	mov	r3, r9
 8002628:	464a      	mov	r2, r9
 800262a:	08e4      	lsrs	r4, r4, #3
 800262c:	075b      	lsls	r3, r3, #29
 800262e:	4323      	orrs	r3, r4
 8002630:	08d4      	lsrs	r4, r2, #3
 8002632:	4642      	mov	r2, r8
 8002634:	4919      	ldr	r1, [pc, #100]	; (800269c <__aeabi_dsub+0x358>)
 8002636:	428a      	cmp	r2, r1
 8002638:	d00e      	beq.n	8002658 <__aeabi_dsub+0x314>
 800263a:	0324      	lsls	r4, r4, #12
 800263c:	0552      	lsls	r2, r2, #21
 800263e:	0b24      	lsrs	r4, r4, #12
 8002640:	0d52      	lsrs	r2, r2, #21
 8002642:	e722      	b.n	800248a <__aeabi_dsub+0x146>
 8002644:	000a      	movs	r2, r1
 8002646:	2400      	movs	r4, #0
 8002648:	2300      	movs	r3, #0
 800264a:	e71e      	b.n	800248a <__aeabi_dsub+0x146>
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	4662      	mov	r2, ip
 8002650:	0752      	lsls	r2, r2, #29
 8002652:	4313      	orrs	r3, r2
 8002654:	4662      	mov	r2, ip
 8002656:	08d4      	lsrs	r4, r2, #3
 8002658:	001a      	movs	r2, r3
 800265a:	4322      	orrs	r2, r4
 800265c:	d100      	bne.n	8002660 <__aeabi_dsub+0x31c>
 800265e:	e1fc      	b.n	8002a5a <__aeabi_dsub+0x716>
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	0312      	lsls	r2, r2, #12
 8002664:	4314      	orrs	r4, r2
 8002666:	0324      	lsls	r4, r4, #12
 8002668:	4a0c      	ldr	r2, [pc, #48]	; (800269c <__aeabi_dsub+0x358>)
 800266a:	0b24      	lsrs	r4, r4, #12
 800266c:	e70d      	b.n	800248a <__aeabi_dsub+0x146>
 800266e:	0020      	movs	r0, r4
 8002670:	f000 fb94 	bl	8002d9c <__clzsi2>
 8002674:	0001      	movs	r1, r0
 8002676:	3118      	adds	r1, #24
 8002678:	291f      	cmp	r1, #31
 800267a:	dc00      	bgt.n	800267e <__aeabi_dsub+0x33a>
 800267c:	e6c4      	b.n	8002408 <__aeabi_dsub+0xc4>
 800267e:	3808      	subs	r0, #8
 8002680:	4084      	lsls	r4, r0
 8002682:	4643      	mov	r3, r8
 8002684:	0020      	movs	r0, r4
 8002686:	2400      	movs	r4, #0
 8002688:	4588      	cmp	r8, r1
 800268a:	dc00      	bgt.n	800268e <__aeabi_dsub+0x34a>
 800268c:	e6c8      	b.n	8002420 <__aeabi_dsub+0xdc>
 800268e:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <__aeabi_dsub+0x35c>)
 8002690:	1a5b      	subs	r3, r3, r1
 8002692:	4010      	ands	r0, r2
 8002694:	4698      	mov	r8, r3
 8002696:	4681      	mov	r9, r0
 8002698:	e6d6      	b.n	8002448 <__aeabi_dsub+0x104>
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	000007ff 	.word	0x000007ff
 80026a0:	ff7fffff 	.word	0xff7fffff
 80026a4:	fffff801 	.word	0xfffff801
 80026a8:	000007fe 	.word	0x000007fe
 80026ac:	430f      	orrs	r7, r1
 80026ae:	1e7a      	subs	r2, r7, #1
 80026b0:	4197      	sbcs	r7, r2
 80026b2:	e691      	b.n	80023d8 <__aeabi_dsub+0x94>
 80026b4:	4661      	mov	r1, ip
 80026b6:	08db      	lsrs	r3, r3, #3
 80026b8:	0749      	lsls	r1, r1, #29
 80026ba:	430b      	orrs	r3, r1
 80026bc:	4661      	mov	r1, ip
 80026be:	08cc      	lsrs	r4, r1, #3
 80026c0:	e7b8      	b.n	8002634 <__aeabi_dsub+0x2f0>
 80026c2:	4640      	mov	r0, r8
 80026c4:	4cd3      	ldr	r4, [pc, #844]	; (8002a14 <__aeabi_dsub+0x6d0>)
 80026c6:	3001      	adds	r0, #1
 80026c8:	4220      	tst	r0, r4
 80026ca:	d000      	beq.n	80026ce <__aeabi_dsub+0x38a>
 80026cc:	e0a2      	b.n	8002814 <__aeabi_dsub+0x4d0>
 80026ce:	4640      	mov	r0, r8
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d000      	beq.n	80026d6 <__aeabi_dsub+0x392>
 80026d4:	e101      	b.n	80028da <__aeabi_dsub+0x596>
 80026d6:	4660      	mov	r0, ip
 80026d8:	4318      	orrs	r0, r3
 80026da:	d100      	bne.n	80026de <__aeabi_dsub+0x39a>
 80026dc:	e15e      	b.n	800299c <__aeabi_dsub+0x658>
 80026de:	0008      	movs	r0, r1
 80026e0:	4338      	orrs	r0, r7
 80026e2:	d000      	beq.n	80026e6 <__aeabi_dsub+0x3a2>
 80026e4:	e15f      	b.n	80029a6 <__aeabi_dsub+0x662>
 80026e6:	4661      	mov	r1, ip
 80026e8:	08db      	lsrs	r3, r3, #3
 80026ea:	0749      	lsls	r1, r1, #29
 80026ec:	430b      	orrs	r3, r1
 80026ee:	4661      	mov	r1, ip
 80026f0:	08cc      	lsrs	r4, r1, #3
 80026f2:	e7a2      	b.n	800263a <__aeabi_dsub+0x2f6>
 80026f4:	4dc8      	ldr	r5, [pc, #800]	; (8002a18 <__aeabi_dsub+0x6d4>)
 80026f6:	42a8      	cmp	r0, r5
 80026f8:	d100      	bne.n	80026fc <__aeabi_dsub+0x3b8>
 80026fa:	e0cf      	b.n	800289c <__aeabi_dsub+0x558>
 80026fc:	2580      	movs	r5, #128	; 0x80
 80026fe:	4664      	mov	r4, ip
 8002700:	042d      	lsls	r5, r5, #16
 8002702:	432c      	orrs	r4, r5
 8002704:	46a4      	mov	ip, r4
 8002706:	2a38      	cmp	r2, #56	; 0x38
 8002708:	dc56      	bgt.n	80027b8 <__aeabi_dsub+0x474>
 800270a:	2a1f      	cmp	r2, #31
 800270c:	dd00      	ble.n	8002710 <__aeabi_dsub+0x3cc>
 800270e:	e0d1      	b.n	80028b4 <__aeabi_dsub+0x570>
 8002710:	2520      	movs	r5, #32
 8002712:	001e      	movs	r6, r3
 8002714:	1aad      	subs	r5, r5, r2
 8002716:	4664      	mov	r4, ip
 8002718:	40ab      	lsls	r3, r5
 800271a:	40ac      	lsls	r4, r5
 800271c:	40d6      	lsrs	r6, r2
 800271e:	1e5d      	subs	r5, r3, #1
 8002720:	41ab      	sbcs	r3, r5
 8002722:	4334      	orrs	r4, r6
 8002724:	4323      	orrs	r3, r4
 8002726:	4664      	mov	r4, ip
 8002728:	40d4      	lsrs	r4, r2
 800272a:	1b09      	subs	r1, r1, r4
 800272c:	e049      	b.n	80027c2 <__aeabi_dsub+0x47e>
 800272e:	4660      	mov	r0, ip
 8002730:	1bdc      	subs	r4, r3, r7
 8002732:	1a46      	subs	r6, r0, r1
 8002734:	42a3      	cmp	r3, r4
 8002736:	4180      	sbcs	r0, r0
 8002738:	4240      	negs	r0, r0
 800273a:	4681      	mov	r9, r0
 800273c:	0030      	movs	r0, r6
 800273e:	464e      	mov	r6, r9
 8002740:	1b80      	subs	r0, r0, r6
 8002742:	4681      	mov	r9, r0
 8002744:	0200      	lsls	r0, r0, #8
 8002746:	d476      	bmi.n	8002836 <__aeabi_dsub+0x4f2>
 8002748:	464b      	mov	r3, r9
 800274a:	4323      	orrs	r3, r4
 800274c:	d000      	beq.n	8002750 <__aeabi_dsub+0x40c>
 800274e:	e652      	b.n	80023f6 <__aeabi_dsub+0xb2>
 8002750:	2400      	movs	r4, #0
 8002752:	2500      	movs	r5, #0
 8002754:	e771      	b.n	800263a <__aeabi_dsub+0x2f6>
 8002756:	4339      	orrs	r1, r7
 8002758:	000c      	movs	r4, r1
 800275a:	1e62      	subs	r2, r4, #1
 800275c:	4194      	sbcs	r4, r2
 800275e:	18e4      	adds	r4, r4, r3
 8002760:	429c      	cmp	r4, r3
 8002762:	419b      	sbcs	r3, r3
 8002764:	425b      	negs	r3, r3
 8002766:	4463      	add	r3, ip
 8002768:	4699      	mov	r9, r3
 800276a:	464b      	mov	r3, r9
 800276c:	021b      	lsls	r3, r3, #8
 800276e:	d400      	bmi.n	8002772 <__aeabi_dsub+0x42e>
 8002770:	e756      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002772:	2301      	movs	r3, #1
 8002774:	469c      	mov	ip, r3
 8002776:	4ba8      	ldr	r3, [pc, #672]	; (8002a18 <__aeabi_dsub+0x6d4>)
 8002778:	44e0      	add	r8, ip
 800277a:	4598      	cmp	r8, r3
 800277c:	d038      	beq.n	80027f0 <__aeabi_dsub+0x4ac>
 800277e:	464b      	mov	r3, r9
 8002780:	48a6      	ldr	r0, [pc, #664]	; (8002a1c <__aeabi_dsub+0x6d8>)
 8002782:	2201      	movs	r2, #1
 8002784:	4003      	ands	r3, r0
 8002786:	0018      	movs	r0, r3
 8002788:	0863      	lsrs	r3, r4, #1
 800278a:	4014      	ands	r4, r2
 800278c:	431c      	orrs	r4, r3
 800278e:	07c3      	lsls	r3, r0, #31
 8002790:	431c      	orrs	r4, r3
 8002792:	0843      	lsrs	r3, r0, #1
 8002794:	4699      	mov	r9, r3
 8002796:	e657      	b.n	8002448 <__aeabi_dsub+0x104>
 8002798:	0010      	movs	r0, r2
 800279a:	000e      	movs	r6, r1
 800279c:	3820      	subs	r0, #32
 800279e:	40c6      	lsrs	r6, r0
 80027a0:	2a20      	cmp	r2, #32
 80027a2:	d004      	beq.n	80027ae <__aeabi_dsub+0x46a>
 80027a4:	2040      	movs	r0, #64	; 0x40
 80027a6:	1a82      	subs	r2, r0, r2
 80027a8:	4091      	lsls	r1, r2
 80027aa:	430f      	orrs	r7, r1
 80027ac:	46b9      	mov	r9, r7
 80027ae:	464f      	mov	r7, r9
 80027b0:	1e7a      	subs	r2, r7, #1
 80027b2:	4197      	sbcs	r7, r2
 80027b4:	4337      	orrs	r7, r6
 80027b6:	e60f      	b.n	80023d8 <__aeabi_dsub+0x94>
 80027b8:	4662      	mov	r2, ip
 80027ba:	431a      	orrs	r2, r3
 80027bc:	0013      	movs	r3, r2
 80027be:	1e5a      	subs	r2, r3, #1
 80027c0:	4193      	sbcs	r3, r2
 80027c2:	1afc      	subs	r4, r7, r3
 80027c4:	42a7      	cmp	r7, r4
 80027c6:	41bf      	sbcs	r7, r7
 80027c8:	427f      	negs	r7, r7
 80027ca:	1bcb      	subs	r3, r1, r7
 80027cc:	4699      	mov	r9, r3
 80027ce:	465d      	mov	r5, fp
 80027d0:	4680      	mov	r8, r0
 80027d2:	e608      	b.n	80023e6 <__aeabi_dsub+0xa2>
 80027d4:	4666      	mov	r6, ip
 80027d6:	431e      	orrs	r6, r3
 80027d8:	d100      	bne.n	80027dc <__aeabi_dsub+0x498>
 80027da:	e0be      	b.n	800295a <__aeabi_dsub+0x616>
 80027dc:	1e56      	subs	r6, r2, #1
 80027de:	2a01      	cmp	r2, #1
 80027e0:	d100      	bne.n	80027e4 <__aeabi_dsub+0x4a0>
 80027e2:	e109      	b.n	80029f8 <__aeabi_dsub+0x6b4>
 80027e4:	4c8c      	ldr	r4, [pc, #560]	; (8002a18 <__aeabi_dsub+0x6d4>)
 80027e6:	42a2      	cmp	r2, r4
 80027e8:	d100      	bne.n	80027ec <__aeabi_dsub+0x4a8>
 80027ea:	e119      	b.n	8002a20 <__aeabi_dsub+0x6dc>
 80027ec:	0032      	movs	r2, r6
 80027ee:	e6c1      	b.n	8002574 <__aeabi_dsub+0x230>
 80027f0:	4642      	mov	r2, r8
 80027f2:	2400      	movs	r4, #0
 80027f4:	2300      	movs	r3, #0
 80027f6:	e648      	b.n	800248a <__aeabi_dsub+0x146>
 80027f8:	2020      	movs	r0, #32
 80027fa:	000c      	movs	r4, r1
 80027fc:	1a80      	subs	r0, r0, r2
 80027fe:	003e      	movs	r6, r7
 8002800:	4087      	lsls	r7, r0
 8002802:	4084      	lsls	r4, r0
 8002804:	40d6      	lsrs	r6, r2
 8002806:	1e78      	subs	r0, r7, #1
 8002808:	4187      	sbcs	r7, r0
 800280a:	40d1      	lsrs	r1, r2
 800280c:	4334      	orrs	r4, r6
 800280e:	433c      	orrs	r4, r7
 8002810:	448c      	add	ip, r1
 8002812:	e7a4      	b.n	800275e <__aeabi_dsub+0x41a>
 8002814:	4a80      	ldr	r2, [pc, #512]	; (8002a18 <__aeabi_dsub+0x6d4>)
 8002816:	4290      	cmp	r0, r2
 8002818:	d100      	bne.n	800281c <__aeabi_dsub+0x4d8>
 800281a:	e0e9      	b.n	80029f0 <__aeabi_dsub+0x6ac>
 800281c:	19df      	adds	r7, r3, r7
 800281e:	429f      	cmp	r7, r3
 8002820:	419b      	sbcs	r3, r3
 8002822:	4461      	add	r1, ip
 8002824:	425b      	negs	r3, r3
 8002826:	18c9      	adds	r1, r1, r3
 8002828:	07cc      	lsls	r4, r1, #31
 800282a:	087f      	lsrs	r7, r7, #1
 800282c:	084b      	lsrs	r3, r1, #1
 800282e:	4699      	mov	r9, r3
 8002830:	4680      	mov	r8, r0
 8002832:	433c      	orrs	r4, r7
 8002834:	e6f4      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002836:	1afc      	subs	r4, r7, r3
 8002838:	42a7      	cmp	r7, r4
 800283a:	41bf      	sbcs	r7, r7
 800283c:	4663      	mov	r3, ip
 800283e:	427f      	negs	r7, r7
 8002840:	1ac9      	subs	r1, r1, r3
 8002842:	1bcb      	subs	r3, r1, r7
 8002844:	4699      	mov	r9, r3
 8002846:	465d      	mov	r5, fp
 8002848:	e5d5      	b.n	80023f6 <__aeabi_dsub+0xb2>
 800284a:	08ff      	lsrs	r7, r7, #3
 800284c:	074b      	lsls	r3, r1, #29
 800284e:	465d      	mov	r5, fp
 8002850:	433b      	orrs	r3, r7
 8002852:	08cc      	lsrs	r4, r1, #3
 8002854:	e6ee      	b.n	8002634 <__aeabi_dsub+0x2f0>
 8002856:	4662      	mov	r2, ip
 8002858:	431a      	orrs	r2, r3
 800285a:	d000      	beq.n	800285e <__aeabi_dsub+0x51a>
 800285c:	e082      	b.n	8002964 <__aeabi_dsub+0x620>
 800285e:	000b      	movs	r3, r1
 8002860:	433b      	orrs	r3, r7
 8002862:	d11b      	bne.n	800289c <__aeabi_dsub+0x558>
 8002864:	2480      	movs	r4, #128	; 0x80
 8002866:	2500      	movs	r5, #0
 8002868:	0324      	lsls	r4, r4, #12
 800286a:	e6f9      	b.n	8002660 <__aeabi_dsub+0x31c>
 800286c:	19dc      	adds	r4, r3, r7
 800286e:	429c      	cmp	r4, r3
 8002870:	419b      	sbcs	r3, r3
 8002872:	4461      	add	r1, ip
 8002874:	4689      	mov	r9, r1
 8002876:	425b      	negs	r3, r3
 8002878:	4499      	add	r9, r3
 800287a:	464b      	mov	r3, r9
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	d444      	bmi.n	800290a <__aeabi_dsub+0x5c6>
 8002880:	2301      	movs	r3, #1
 8002882:	4698      	mov	r8, r3
 8002884:	e6cc      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002886:	1bdc      	subs	r4, r3, r7
 8002888:	4662      	mov	r2, ip
 800288a:	42a3      	cmp	r3, r4
 800288c:	419b      	sbcs	r3, r3
 800288e:	1a51      	subs	r1, r2, r1
 8002890:	425b      	negs	r3, r3
 8002892:	1acb      	subs	r3, r1, r3
 8002894:	4699      	mov	r9, r3
 8002896:	2301      	movs	r3, #1
 8002898:	4698      	mov	r8, r3
 800289a:	e5a4      	b.n	80023e6 <__aeabi_dsub+0xa2>
 800289c:	08ff      	lsrs	r7, r7, #3
 800289e:	074b      	lsls	r3, r1, #29
 80028a0:	465d      	mov	r5, fp
 80028a2:	433b      	orrs	r3, r7
 80028a4:	08cc      	lsrs	r4, r1, #3
 80028a6:	e6d7      	b.n	8002658 <__aeabi_dsub+0x314>
 80028a8:	4662      	mov	r2, ip
 80028aa:	431a      	orrs	r2, r3
 80028ac:	0014      	movs	r4, r2
 80028ae:	1e63      	subs	r3, r4, #1
 80028b0:	419c      	sbcs	r4, r3
 80028b2:	e679      	b.n	80025a8 <__aeabi_dsub+0x264>
 80028b4:	0015      	movs	r5, r2
 80028b6:	4664      	mov	r4, ip
 80028b8:	3d20      	subs	r5, #32
 80028ba:	40ec      	lsrs	r4, r5
 80028bc:	46a0      	mov	r8, r4
 80028be:	2a20      	cmp	r2, #32
 80028c0:	d005      	beq.n	80028ce <__aeabi_dsub+0x58a>
 80028c2:	2540      	movs	r5, #64	; 0x40
 80028c4:	4664      	mov	r4, ip
 80028c6:	1aaa      	subs	r2, r5, r2
 80028c8:	4094      	lsls	r4, r2
 80028ca:	4323      	orrs	r3, r4
 80028cc:	469a      	mov	sl, r3
 80028ce:	4654      	mov	r4, sl
 80028d0:	1e63      	subs	r3, r4, #1
 80028d2:	419c      	sbcs	r4, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	4323      	orrs	r3, r4
 80028d8:	e773      	b.n	80027c2 <__aeabi_dsub+0x47e>
 80028da:	4662      	mov	r2, ip
 80028dc:	431a      	orrs	r2, r3
 80028de:	d023      	beq.n	8002928 <__aeabi_dsub+0x5e4>
 80028e0:	000a      	movs	r2, r1
 80028e2:	433a      	orrs	r2, r7
 80028e4:	d000      	beq.n	80028e8 <__aeabi_dsub+0x5a4>
 80028e6:	e0a0      	b.n	8002a2a <__aeabi_dsub+0x6e6>
 80028e8:	4662      	mov	r2, ip
 80028ea:	08db      	lsrs	r3, r3, #3
 80028ec:	0752      	lsls	r2, r2, #29
 80028ee:	4313      	orrs	r3, r2
 80028f0:	4662      	mov	r2, ip
 80028f2:	08d4      	lsrs	r4, r2, #3
 80028f4:	e6b0      	b.n	8002658 <__aeabi_dsub+0x314>
 80028f6:	000b      	movs	r3, r1
 80028f8:	433b      	orrs	r3, r7
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x5ba>
 80028fc:	e728      	b.n	8002750 <__aeabi_dsub+0x40c>
 80028fe:	08ff      	lsrs	r7, r7, #3
 8002900:	074b      	lsls	r3, r1, #29
 8002902:	465d      	mov	r5, fp
 8002904:	433b      	orrs	r3, r7
 8002906:	08cc      	lsrs	r4, r1, #3
 8002908:	e697      	b.n	800263a <__aeabi_dsub+0x2f6>
 800290a:	2302      	movs	r3, #2
 800290c:	4698      	mov	r8, r3
 800290e:	e736      	b.n	800277e <__aeabi_dsub+0x43a>
 8002910:	1afc      	subs	r4, r7, r3
 8002912:	42a7      	cmp	r7, r4
 8002914:	41bf      	sbcs	r7, r7
 8002916:	4663      	mov	r3, ip
 8002918:	427f      	negs	r7, r7
 800291a:	1ac9      	subs	r1, r1, r3
 800291c:	1bcb      	subs	r3, r1, r7
 800291e:	4699      	mov	r9, r3
 8002920:	2301      	movs	r3, #1
 8002922:	465d      	mov	r5, fp
 8002924:	4698      	mov	r8, r3
 8002926:	e55e      	b.n	80023e6 <__aeabi_dsub+0xa2>
 8002928:	074b      	lsls	r3, r1, #29
 800292a:	08ff      	lsrs	r7, r7, #3
 800292c:	433b      	orrs	r3, r7
 800292e:	08cc      	lsrs	r4, r1, #3
 8002930:	e692      	b.n	8002658 <__aeabi_dsub+0x314>
 8002932:	1bdc      	subs	r4, r3, r7
 8002934:	4660      	mov	r0, ip
 8002936:	42a3      	cmp	r3, r4
 8002938:	41b6      	sbcs	r6, r6
 800293a:	1a40      	subs	r0, r0, r1
 800293c:	4276      	negs	r6, r6
 800293e:	1b80      	subs	r0, r0, r6
 8002940:	4681      	mov	r9, r0
 8002942:	0200      	lsls	r0, r0, #8
 8002944:	d560      	bpl.n	8002a08 <__aeabi_dsub+0x6c4>
 8002946:	1afc      	subs	r4, r7, r3
 8002948:	42a7      	cmp	r7, r4
 800294a:	41bf      	sbcs	r7, r7
 800294c:	4663      	mov	r3, ip
 800294e:	427f      	negs	r7, r7
 8002950:	1ac9      	subs	r1, r1, r3
 8002952:	1bcb      	subs	r3, r1, r7
 8002954:	4699      	mov	r9, r3
 8002956:	465d      	mov	r5, fp
 8002958:	e576      	b.n	8002448 <__aeabi_dsub+0x104>
 800295a:	08ff      	lsrs	r7, r7, #3
 800295c:	074b      	lsls	r3, r1, #29
 800295e:	433b      	orrs	r3, r7
 8002960:	08cc      	lsrs	r4, r1, #3
 8002962:	e667      	b.n	8002634 <__aeabi_dsub+0x2f0>
 8002964:	000a      	movs	r2, r1
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	433a      	orrs	r2, r7
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x62a>
 800296c:	e66f      	b.n	800264e <__aeabi_dsub+0x30a>
 800296e:	4662      	mov	r2, ip
 8002970:	0752      	lsls	r2, r2, #29
 8002972:	4313      	orrs	r3, r2
 8002974:	4662      	mov	r2, ip
 8002976:	08d4      	lsrs	r4, r2, #3
 8002978:	2280      	movs	r2, #128	; 0x80
 800297a:	0312      	lsls	r2, r2, #12
 800297c:	4214      	tst	r4, r2
 800297e:	d007      	beq.n	8002990 <__aeabi_dsub+0x64c>
 8002980:	08c8      	lsrs	r0, r1, #3
 8002982:	4210      	tst	r0, r2
 8002984:	d104      	bne.n	8002990 <__aeabi_dsub+0x64c>
 8002986:	465d      	mov	r5, fp
 8002988:	0004      	movs	r4, r0
 800298a:	08fb      	lsrs	r3, r7, #3
 800298c:	0749      	lsls	r1, r1, #29
 800298e:	430b      	orrs	r3, r1
 8002990:	0f5a      	lsrs	r2, r3, #29
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	08db      	lsrs	r3, r3, #3
 8002996:	0752      	lsls	r2, r2, #29
 8002998:	4313      	orrs	r3, r2
 800299a:	e65d      	b.n	8002658 <__aeabi_dsub+0x314>
 800299c:	074b      	lsls	r3, r1, #29
 800299e:	08ff      	lsrs	r7, r7, #3
 80029a0:	433b      	orrs	r3, r7
 80029a2:	08cc      	lsrs	r4, r1, #3
 80029a4:	e649      	b.n	800263a <__aeabi_dsub+0x2f6>
 80029a6:	19dc      	adds	r4, r3, r7
 80029a8:	429c      	cmp	r4, r3
 80029aa:	419b      	sbcs	r3, r3
 80029ac:	4461      	add	r1, ip
 80029ae:	4689      	mov	r9, r1
 80029b0:	425b      	negs	r3, r3
 80029b2:	4499      	add	r9, r3
 80029b4:	464b      	mov	r3, r9
 80029b6:	021b      	lsls	r3, r3, #8
 80029b8:	d400      	bmi.n	80029bc <__aeabi_dsub+0x678>
 80029ba:	e631      	b.n	8002620 <__aeabi_dsub+0x2dc>
 80029bc:	464a      	mov	r2, r9
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <__aeabi_dsub+0x6d8>)
 80029c0:	401a      	ands	r2, r3
 80029c2:	2301      	movs	r3, #1
 80029c4:	4691      	mov	r9, r2
 80029c6:	4698      	mov	r8, r3
 80029c8:	e62a      	b.n	8002620 <__aeabi_dsub+0x2dc>
 80029ca:	0016      	movs	r6, r2
 80029cc:	4664      	mov	r4, ip
 80029ce:	3e20      	subs	r6, #32
 80029d0:	40f4      	lsrs	r4, r6
 80029d2:	46a0      	mov	r8, r4
 80029d4:	2a20      	cmp	r2, #32
 80029d6:	d005      	beq.n	80029e4 <__aeabi_dsub+0x6a0>
 80029d8:	2640      	movs	r6, #64	; 0x40
 80029da:	4664      	mov	r4, ip
 80029dc:	1ab2      	subs	r2, r6, r2
 80029de:	4094      	lsls	r4, r2
 80029e0:	4323      	orrs	r3, r4
 80029e2:	469a      	mov	sl, r3
 80029e4:	4654      	mov	r4, sl
 80029e6:	1e63      	subs	r3, r4, #1
 80029e8:	419c      	sbcs	r4, r3
 80029ea:	4643      	mov	r3, r8
 80029ec:	431c      	orrs	r4, r3
 80029ee:	e5db      	b.n	80025a8 <__aeabi_dsub+0x264>
 80029f0:	0002      	movs	r2, r0
 80029f2:	2400      	movs	r4, #0
 80029f4:	2300      	movs	r3, #0
 80029f6:	e548      	b.n	800248a <__aeabi_dsub+0x146>
 80029f8:	19dc      	adds	r4, r3, r7
 80029fa:	42bc      	cmp	r4, r7
 80029fc:	41bf      	sbcs	r7, r7
 80029fe:	4461      	add	r1, ip
 8002a00:	4689      	mov	r9, r1
 8002a02:	427f      	negs	r7, r7
 8002a04:	44b9      	add	r9, r7
 8002a06:	e738      	b.n	800287a <__aeabi_dsub+0x536>
 8002a08:	464b      	mov	r3, r9
 8002a0a:	4323      	orrs	r3, r4
 8002a0c:	d100      	bne.n	8002a10 <__aeabi_dsub+0x6cc>
 8002a0e:	e69f      	b.n	8002750 <__aeabi_dsub+0x40c>
 8002a10:	e606      	b.n	8002620 <__aeabi_dsub+0x2dc>
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	000007fe 	.word	0x000007fe
 8002a18:	000007ff 	.word	0x000007ff
 8002a1c:	ff7fffff 	.word	0xff7fffff
 8002a20:	08ff      	lsrs	r7, r7, #3
 8002a22:	074b      	lsls	r3, r1, #29
 8002a24:	433b      	orrs	r3, r7
 8002a26:	08cc      	lsrs	r4, r1, #3
 8002a28:	e616      	b.n	8002658 <__aeabi_dsub+0x314>
 8002a2a:	4662      	mov	r2, ip
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	0752      	lsls	r2, r2, #29
 8002a30:	4313      	orrs	r3, r2
 8002a32:	4662      	mov	r2, ip
 8002a34:	08d4      	lsrs	r4, r2, #3
 8002a36:	2280      	movs	r2, #128	; 0x80
 8002a38:	0312      	lsls	r2, r2, #12
 8002a3a:	4214      	tst	r4, r2
 8002a3c:	d007      	beq.n	8002a4e <__aeabi_dsub+0x70a>
 8002a3e:	08c8      	lsrs	r0, r1, #3
 8002a40:	4210      	tst	r0, r2
 8002a42:	d104      	bne.n	8002a4e <__aeabi_dsub+0x70a>
 8002a44:	465d      	mov	r5, fp
 8002a46:	0004      	movs	r4, r0
 8002a48:	08fb      	lsrs	r3, r7, #3
 8002a4a:	0749      	lsls	r1, r1, #29
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	0f5a      	lsrs	r2, r3, #29
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	0752      	lsls	r2, r2, #29
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	4313      	orrs	r3, r2
 8002a58:	e5fe      	b.n	8002658 <__aeabi_dsub+0x314>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	4a01      	ldr	r2, [pc, #4]	; (8002a64 <__aeabi_dsub+0x720>)
 8002a5e:	001c      	movs	r4, r3
 8002a60:	e513      	b.n	800248a <__aeabi_dsub+0x146>
 8002a62:	46c0      	nop			; (mov r8, r8)
 8002a64:	000007ff 	.word	0x000007ff

08002a68 <__aeabi_d2iz>:
 8002a68:	000a      	movs	r2, r1
 8002a6a:	b530      	push	{r4, r5, lr}
 8002a6c:	4c13      	ldr	r4, [pc, #76]	; (8002abc <__aeabi_d2iz+0x54>)
 8002a6e:	0053      	lsls	r3, r2, #1
 8002a70:	0309      	lsls	r1, r1, #12
 8002a72:	0005      	movs	r5, r0
 8002a74:	0b09      	lsrs	r1, r1, #12
 8002a76:	2000      	movs	r0, #0
 8002a78:	0d5b      	lsrs	r3, r3, #21
 8002a7a:	0fd2      	lsrs	r2, r2, #31
 8002a7c:	42a3      	cmp	r3, r4
 8002a7e:	dd04      	ble.n	8002a8a <__aeabi_d2iz+0x22>
 8002a80:	480f      	ldr	r0, [pc, #60]	; (8002ac0 <__aeabi_d2iz+0x58>)
 8002a82:	4283      	cmp	r3, r0
 8002a84:	dd02      	ble.n	8002a8c <__aeabi_d2iz+0x24>
 8002a86:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <__aeabi_d2iz+0x5c>)
 8002a88:	18d0      	adds	r0, r2, r3
 8002a8a:	bd30      	pop	{r4, r5, pc}
 8002a8c:	2080      	movs	r0, #128	; 0x80
 8002a8e:	0340      	lsls	r0, r0, #13
 8002a90:	4301      	orrs	r1, r0
 8002a92:	480d      	ldr	r0, [pc, #52]	; (8002ac8 <__aeabi_d2iz+0x60>)
 8002a94:	1ac0      	subs	r0, r0, r3
 8002a96:	281f      	cmp	r0, #31
 8002a98:	dd08      	ble.n	8002aac <__aeabi_d2iz+0x44>
 8002a9a:	480c      	ldr	r0, [pc, #48]	; (8002acc <__aeabi_d2iz+0x64>)
 8002a9c:	1ac3      	subs	r3, r0, r3
 8002a9e:	40d9      	lsrs	r1, r3
 8002aa0:	000b      	movs	r3, r1
 8002aa2:	4258      	negs	r0, r3
 8002aa4:	2a00      	cmp	r2, #0
 8002aa6:	d1f0      	bne.n	8002a8a <__aeabi_d2iz+0x22>
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	e7ee      	b.n	8002a8a <__aeabi_d2iz+0x22>
 8002aac:	4c08      	ldr	r4, [pc, #32]	; (8002ad0 <__aeabi_d2iz+0x68>)
 8002aae:	40c5      	lsrs	r5, r0
 8002ab0:	46a4      	mov	ip, r4
 8002ab2:	4463      	add	r3, ip
 8002ab4:	4099      	lsls	r1, r3
 8002ab6:	000b      	movs	r3, r1
 8002ab8:	432b      	orrs	r3, r5
 8002aba:	e7f2      	b.n	8002aa2 <__aeabi_d2iz+0x3a>
 8002abc:	000003fe 	.word	0x000003fe
 8002ac0:	0000041d 	.word	0x0000041d
 8002ac4:	7fffffff 	.word	0x7fffffff
 8002ac8:	00000433 	.word	0x00000433
 8002acc:	00000413 	.word	0x00000413
 8002ad0:	fffffbed 	.word	0xfffffbed

08002ad4 <__aeabi_i2d>:
 8002ad4:	b570      	push	{r4, r5, r6, lr}
 8002ad6:	2800      	cmp	r0, #0
 8002ad8:	d016      	beq.n	8002b08 <__aeabi_i2d+0x34>
 8002ada:	17c3      	asrs	r3, r0, #31
 8002adc:	18c5      	adds	r5, r0, r3
 8002ade:	405d      	eors	r5, r3
 8002ae0:	0fc4      	lsrs	r4, r0, #31
 8002ae2:	0028      	movs	r0, r5
 8002ae4:	f000 f95a 	bl	8002d9c <__clzsi2>
 8002ae8:	4a11      	ldr	r2, [pc, #68]	; (8002b30 <__aeabi_i2d+0x5c>)
 8002aea:	1a12      	subs	r2, r2, r0
 8002aec:	280a      	cmp	r0, #10
 8002aee:	dc16      	bgt.n	8002b1e <__aeabi_i2d+0x4a>
 8002af0:	0003      	movs	r3, r0
 8002af2:	002e      	movs	r6, r5
 8002af4:	3315      	adds	r3, #21
 8002af6:	409e      	lsls	r6, r3
 8002af8:	230b      	movs	r3, #11
 8002afa:	1a18      	subs	r0, r3, r0
 8002afc:	40c5      	lsrs	r5, r0
 8002afe:	0552      	lsls	r2, r2, #21
 8002b00:	032d      	lsls	r5, r5, #12
 8002b02:	0b2d      	lsrs	r5, r5, #12
 8002b04:	0d53      	lsrs	r3, r2, #21
 8002b06:	e003      	b.n	8002b10 <__aeabi_i2d+0x3c>
 8002b08:	2400      	movs	r4, #0
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2500      	movs	r5, #0
 8002b0e:	2600      	movs	r6, #0
 8002b10:	051b      	lsls	r3, r3, #20
 8002b12:	432b      	orrs	r3, r5
 8002b14:	07e4      	lsls	r4, r4, #31
 8002b16:	4323      	orrs	r3, r4
 8002b18:	0030      	movs	r0, r6
 8002b1a:	0019      	movs	r1, r3
 8002b1c:	bd70      	pop	{r4, r5, r6, pc}
 8002b1e:	380b      	subs	r0, #11
 8002b20:	4085      	lsls	r5, r0
 8002b22:	0552      	lsls	r2, r2, #21
 8002b24:	032d      	lsls	r5, r5, #12
 8002b26:	2600      	movs	r6, #0
 8002b28:	0b2d      	lsrs	r5, r5, #12
 8002b2a:	0d53      	lsrs	r3, r2, #21
 8002b2c:	e7f0      	b.n	8002b10 <__aeabi_i2d+0x3c>
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	0000041e 	.word	0x0000041e

08002b34 <__aeabi_ui2d>:
 8002b34:	b510      	push	{r4, lr}
 8002b36:	1e04      	subs	r4, r0, #0
 8002b38:	d010      	beq.n	8002b5c <__aeabi_ui2d+0x28>
 8002b3a:	f000 f92f 	bl	8002d9c <__clzsi2>
 8002b3e:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <__aeabi_ui2d+0x48>)
 8002b40:	1a1b      	subs	r3, r3, r0
 8002b42:	280a      	cmp	r0, #10
 8002b44:	dc11      	bgt.n	8002b6a <__aeabi_ui2d+0x36>
 8002b46:	220b      	movs	r2, #11
 8002b48:	0021      	movs	r1, r4
 8002b4a:	1a12      	subs	r2, r2, r0
 8002b4c:	40d1      	lsrs	r1, r2
 8002b4e:	3015      	adds	r0, #21
 8002b50:	030a      	lsls	r2, r1, #12
 8002b52:	055b      	lsls	r3, r3, #21
 8002b54:	4084      	lsls	r4, r0
 8002b56:	0b12      	lsrs	r2, r2, #12
 8002b58:	0d5b      	lsrs	r3, r3, #21
 8002b5a:	e001      	b.n	8002b60 <__aeabi_ui2d+0x2c>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	2200      	movs	r2, #0
 8002b60:	051b      	lsls	r3, r3, #20
 8002b62:	4313      	orrs	r3, r2
 8002b64:	0020      	movs	r0, r4
 8002b66:	0019      	movs	r1, r3
 8002b68:	bd10      	pop	{r4, pc}
 8002b6a:	0022      	movs	r2, r4
 8002b6c:	380b      	subs	r0, #11
 8002b6e:	4082      	lsls	r2, r0
 8002b70:	055b      	lsls	r3, r3, #21
 8002b72:	0312      	lsls	r2, r2, #12
 8002b74:	2400      	movs	r4, #0
 8002b76:	0b12      	lsrs	r2, r2, #12
 8002b78:	0d5b      	lsrs	r3, r3, #21
 8002b7a:	e7f1      	b.n	8002b60 <__aeabi_ui2d+0x2c>
 8002b7c:	0000041e 	.word	0x0000041e

08002b80 <__aeabi_f2d>:
 8002b80:	b570      	push	{r4, r5, r6, lr}
 8002b82:	0043      	lsls	r3, r0, #1
 8002b84:	0246      	lsls	r6, r0, #9
 8002b86:	0fc4      	lsrs	r4, r0, #31
 8002b88:	20fe      	movs	r0, #254	; 0xfe
 8002b8a:	0e1b      	lsrs	r3, r3, #24
 8002b8c:	1c59      	adds	r1, r3, #1
 8002b8e:	0a75      	lsrs	r5, r6, #9
 8002b90:	4208      	tst	r0, r1
 8002b92:	d00c      	beq.n	8002bae <__aeabi_f2d+0x2e>
 8002b94:	22e0      	movs	r2, #224	; 0xe0
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	4694      	mov	ip, r2
 8002b9a:	076d      	lsls	r5, r5, #29
 8002b9c:	0b36      	lsrs	r6, r6, #12
 8002b9e:	4463      	add	r3, ip
 8002ba0:	051b      	lsls	r3, r3, #20
 8002ba2:	4333      	orrs	r3, r6
 8002ba4:	07e4      	lsls	r4, r4, #31
 8002ba6:	4323      	orrs	r3, r4
 8002ba8:	0028      	movs	r0, r5
 8002baa:	0019      	movs	r1, r3
 8002bac:	bd70      	pop	{r4, r5, r6, pc}
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d114      	bne.n	8002bdc <__aeabi_f2d+0x5c>
 8002bb2:	2d00      	cmp	r5, #0
 8002bb4:	d01b      	beq.n	8002bee <__aeabi_f2d+0x6e>
 8002bb6:	0028      	movs	r0, r5
 8002bb8:	f000 f8f0 	bl	8002d9c <__clzsi2>
 8002bbc:	280a      	cmp	r0, #10
 8002bbe:	dc1c      	bgt.n	8002bfa <__aeabi_f2d+0x7a>
 8002bc0:	230b      	movs	r3, #11
 8002bc2:	002e      	movs	r6, r5
 8002bc4:	1a1b      	subs	r3, r3, r0
 8002bc6:	40de      	lsrs	r6, r3
 8002bc8:	0003      	movs	r3, r0
 8002bca:	3315      	adds	r3, #21
 8002bcc:	409d      	lsls	r5, r3
 8002bce:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <__aeabi_f2d+0x88>)
 8002bd0:	0336      	lsls	r6, r6, #12
 8002bd2:	1a12      	subs	r2, r2, r0
 8002bd4:	0552      	lsls	r2, r2, #21
 8002bd6:	0b36      	lsrs	r6, r6, #12
 8002bd8:	0d53      	lsrs	r3, r2, #21
 8002bda:	e7e1      	b.n	8002ba0 <__aeabi_f2d+0x20>
 8002bdc:	2d00      	cmp	r5, #0
 8002bde:	d009      	beq.n	8002bf4 <__aeabi_f2d+0x74>
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	0b36      	lsrs	r6, r6, #12
 8002be4:	0312      	lsls	r2, r2, #12
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <__aeabi_f2d+0x8c>)
 8002be8:	076d      	lsls	r5, r5, #29
 8002bea:	4316      	orrs	r6, r2
 8002bec:	e7d8      	b.n	8002ba0 <__aeabi_f2d+0x20>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2600      	movs	r6, #0
 8002bf2:	e7d5      	b.n	8002ba0 <__aeabi_f2d+0x20>
 8002bf4:	2600      	movs	r6, #0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <__aeabi_f2d+0x8c>)
 8002bf8:	e7d2      	b.n	8002ba0 <__aeabi_f2d+0x20>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	3b0b      	subs	r3, #11
 8002bfe:	409d      	lsls	r5, r3
 8002c00:	002e      	movs	r6, r5
 8002c02:	2500      	movs	r5, #0
 8002c04:	e7e3      	b.n	8002bce <__aeabi_f2d+0x4e>
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	00000389 	.word	0x00000389
 8002c0c:	000007ff 	.word	0x000007ff

08002c10 <__aeabi_d2f>:
 8002c10:	0002      	movs	r2, r0
 8002c12:	004b      	lsls	r3, r1, #1
 8002c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c16:	0d5b      	lsrs	r3, r3, #21
 8002c18:	030c      	lsls	r4, r1, #12
 8002c1a:	4e3d      	ldr	r6, [pc, #244]	; (8002d10 <__aeabi_d2f+0x100>)
 8002c1c:	0a64      	lsrs	r4, r4, #9
 8002c1e:	0f40      	lsrs	r0, r0, #29
 8002c20:	1c5f      	adds	r7, r3, #1
 8002c22:	0fc9      	lsrs	r1, r1, #31
 8002c24:	4304      	orrs	r4, r0
 8002c26:	00d5      	lsls	r5, r2, #3
 8002c28:	4237      	tst	r7, r6
 8002c2a:	d00a      	beq.n	8002c42 <__aeabi_d2f+0x32>
 8002c2c:	4839      	ldr	r0, [pc, #228]	; (8002d14 <__aeabi_d2f+0x104>)
 8002c2e:	181e      	adds	r6, r3, r0
 8002c30:	2efe      	cmp	r6, #254	; 0xfe
 8002c32:	dd16      	ble.n	8002c62 <__aeabi_d2f+0x52>
 8002c34:	20ff      	movs	r0, #255	; 0xff
 8002c36:	2400      	movs	r4, #0
 8002c38:	05c0      	lsls	r0, r0, #23
 8002c3a:	4320      	orrs	r0, r4
 8002c3c:	07c9      	lsls	r1, r1, #31
 8002c3e:	4308      	orrs	r0, r1
 8002c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <__aeabi_d2f+0x44>
 8002c46:	432c      	orrs	r4, r5
 8002c48:	d026      	beq.n	8002c98 <__aeabi_d2f+0x88>
 8002c4a:	2205      	movs	r2, #5
 8002c4c:	0192      	lsls	r2, r2, #6
 8002c4e:	0a54      	lsrs	r4, r2, #9
 8002c50:	b2d8      	uxtb	r0, r3
 8002c52:	e7f1      	b.n	8002c38 <__aeabi_d2f+0x28>
 8002c54:	4325      	orrs	r5, r4
 8002c56:	d0ed      	beq.n	8002c34 <__aeabi_d2f+0x24>
 8002c58:	2080      	movs	r0, #128	; 0x80
 8002c5a:	03c0      	lsls	r0, r0, #15
 8002c5c:	4304      	orrs	r4, r0
 8002c5e:	20ff      	movs	r0, #255	; 0xff
 8002c60:	e7ea      	b.n	8002c38 <__aeabi_d2f+0x28>
 8002c62:	2e00      	cmp	r6, #0
 8002c64:	dd1b      	ble.n	8002c9e <__aeabi_d2f+0x8e>
 8002c66:	0192      	lsls	r2, r2, #6
 8002c68:	1e53      	subs	r3, r2, #1
 8002c6a:	419a      	sbcs	r2, r3
 8002c6c:	00e4      	lsls	r4, r4, #3
 8002c6e:	0f6d      	lsrs	r5, r5, #29
 8002c70:	4322      	orrs	r2, r4
 8002c72:	432a      	orrs	r2, r5
 8002c74:	0753      	lsls	r3, r2, #29
 8002c76:	d048      	beq.n	8002d0a <__aeabi_d2f+0xfa>
 8002c78:	230f      	movs	r3, #15
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d000      	beq.n	8002c82 <__aeabi_d2f+0x72>
 8002c80:	3204      	adds	r2, #4
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	04db      	lsls	r3, r3, #19
 8002c86:	4013      	ands	r3, r2
 8002c88:	d03f      	beq.n	8002d0a <__aeabi_d2f+0xfa>
 8002c8a:	1c70      	adds	r0, r6, #1
 8002c8c:	2efe      	cmp	r6, #254	; 0xfe
 8002c8e:	d0d1      	beq.n	8002c34 <__aeabi_d2f+0x24>
 8002c90:	0192      	lsls	r2, r2, #6
 8002c92:	0a54      	lsrs	r4, r2, #9
 8002c94:	b2c0      	uxtb	r0, r0
 8002c96:	e7cf      	b.n	8002c38 <__aeabi_d2f+0x28>
 8002c98:	2000      	movs	r0, #0
 8002c9a:	2400      	movs	r4, #0
 8002c9c:	e7cc      	b.n	8002c38 <__aeabi_d2f+0x28>
 8002c9e:	0032      	movs	r2, r6
 8002ca0:	3217      	adds	r2, #23
 8002ca2:	db22      	blt.n	8002cea <__aeabi_d2f+0xda>
 8002ca4:	2080      	movs	r0, #128	; 0x80
 8002ca6:	0400      	lsls	r0, r0, #16
 8002ca8:	4320      	orrs	r0, r4
 8002caa:	241e      	movs	r4, #30
 8002cac:	1ba4      	subs	r4, r4, r6
 8002cae:	2c1f      	cmp	r4, #31
 8002cb0:	dd1d      	ble.n	8002cee <__aeabi_d2f+0xde>
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	4252      	negs	r2, r2
 8002cb6:	1b96      	subs	r6, r2, r6
 8002cb8:	0002      	movs	r2, r0
 8002cba:	40f2      	lsrs	r2, r6
 8002cbc:	0016      	movs	r6, r2
 8002cbe:	2c20      	cmp	r4, #32
 8002cc0:	d004      	beq.n	8002ccc <__aeabi_d2f+0xbc>
 8002cc2:	4a15      	ldr	r2, [pc, #84]	; (8002d18 <__aeabi_d2f+0x108>)
 8002cc4:	4694      	mov	ip, r2
 8002cc6:	4463      	add	r3, ip
 8002cc8:	4098      	lsls	r0, r3
 8002cca:	4305      	orrs	r5, r0
 8002ccc:	002a      	movs	r2, r5
 8002cce:	1e53      	subs	r3, r2, #1
 8002cd0:	419a      	sbcs	r2, r3
 8002cd2:	4332      	orrs	r2, r6
 8002cd4:	2600      	movs	r6, #0
 8002cd6:	0753      	lsls	r3, r2, #29
 8002cd8:	d1ce      	bne.n	8002c78 <__aeabi_d2f+0x68>
 8002cda:	2480      	movs	r4, #128	; 0x80
 8002cdc:	0013      	movs	r3, r2
 8002cde:	04e4      	lsls	r4, r4, #19
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	4023      	ands	r3, r4
 8002ce4:	4222      	tst	r2, r4
 8002ce6:	d1d3      	bne.n	8002c90 <__aeabi_d2f+0x80>
 8002ce8:	e7b0      	b.n	8002c4c <__aeabi_d2f+0x3c>
 8002cea:	2300      	movs	r3, #0
 8002cec:	e7ad      	b.n	8002c4a <__aeabi_d2f+0x3a>
 8002cee:	4a0b      	ldr	r2, [pc, #44]	; (8002d1c <__aeabi_d2f+0x10c>)
 8002cf0:	4694      	mov	ip, r2
 8002cf2:	002a      	movs	r2, r5
 8002cf4:	40e2      	lsrs	r2, r4
 8002cf6:	0014      	movs	r4, r2
 8002cf8:	002a      	movs	r2, r5
 8002cfa:	4463      	add	r3, ip
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	4098      	lsls	r0, r3
 8002d00:	1e55      	subs	r5, r2, #1
 8002d02:	41aa      	sbcs	r2, r5
 8002d04:	4302      	orrs	r2, r0
 8002d06:	4322      	orrs	r2, r4
 8002d08:	e7e4      	b.n	8002cd4 <__aeabi_d2f+0xc4>
 8002d0a:	0033      	movs	r3, r6
 8002d0c:	e79e      	b.n	8002c4c <__aeabi_d2f+0x3c>
 8002d0e:	46c0      	nop			; (mov r8, r8)
 8002d10:	000007fe 	.word	0x000007fe
 8002d14:	fffffc80 	.word	0xfffffc80
 8002d18:	fffffca2 	.word	0xfffffca2
 8002d1c:	fffffc82 	.word	0xfffffc82

08002d20 <__aeabi_cdrcmple>:
 8002d20:	4684      	mov	ip, r0
 8002d22:	0010      	movs	r0, r2
 8002d24:	4662      	mov	r2, ip
 8002d26:	468c      	mov	ip, r1
 8002d28:	0019      	movs	r1, r3
 8002d2a:	4663      	mov	r3, ip
 8002d2c:	e000      	b.n	8002d30 <__aeabi_cdcmpeq>
 8002d2e:	46c0      	nop			; (mov r8, r8)

08002d30 <__aeabi_cdcmpeq>:
 8002d30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002d32:	f000 f8f9 	bl	8002f28 <__ledf2>
 8002d36:	2800      	cmp	r0, #0
 8002d38:	d401      	bmi.n	8002d3e <__aeabi_cdcmpeq+0xe>
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	42c8      	cmn	r0, r1
 8002d3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08002d40 <__aeabi_dcmpeq>:
 8002d40:	b510      	push	{r4, lr}
 8002d42:	f000 f849 	bl	8002dd8 <__eqdf2>
 8002d46:	4240      	negs	r0, r0
 8002d48:	3001      	adds	r0, #1
 8002d4a:	bd10      	pop	{r4, pc}

08002d4c <__aeabi_dcmplt>:
 8002d4c:	b510      	push	{r4, lr}
 8002d4e:	f000 f8eb 	bl	8002f28 <__ledf2>
 8002d52:	2800      	cmp	r0, #0
 8002d54:	db01      	blt.n	8002d5a <__aeabi_dcmplt+0xe>
 8002d56:	2000      	movs	r0, #0
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	46c0      	nop			; (mov r8, r8)

08002d60 <__aeabi_dcmple>:
 8002d60:	b510      	push	{r4, lr}
 8002d62:	f000 f8e1 	bl	8002f28 <__ledf2>
 8002d66:	2800      	cmp	r0, #0
 8002d68:	dd01      	ble.n	8002d6e <__aeabi_dcmple+0xe>
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	bd10      	pop	{r4, pc}
 8002d6e:	2001      	movs	r0, #1
 8002d70:	bd10      	pop	{r4, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)

08002d74 <__aeabi_dcmpgt>:
 8002d74:	b510      	push	{r4, lr}
 8002d76:	f000 f871 	bl	8002e5c <__gedf2>
 8002d7a:	2800      	cmp	r0, #0
 8002d7c:	dc01      	bgt.n	8002d82 <__aeabi_dcmpgt+0xe>
 8002d7e:	2000      	movs	r0, #0
 8002d80:	bd10      	pop	{r4, pc}
 8002d82:	2001      	movs	r0, #1
 8002d84:	bd10      	pop	{r4, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)

08002d88 <__aeabi_dcmpge>:
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	f000 f867 	bl	8002e5c <__gedf2>
 8002d8e:	2800      	cmp	r0, #0
 8002d90:	da01      	bge.n	8002d96 <__aeabi_dcmpge+0xe>
 8002d92:	2000      	movs	r0, #0
 8002d94:	bd10      	pop	{r4, pc}
 8002d96:	2001      	movs	r0, #1
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	46c0      	nop			; (mov r8, r8)

08002d9c <__clzsi2>:
 8002d9c:	211c      	movs	r1, #28
 8002d9e:	2301      	movs	r3, #1
 8002da0:	041b      	lsls	r3, r3, #16
 8002da2:	4298      	cmp	r0, r3
 8002da4:	d301      	bcc.n	8002daa <__clzsi2+0xe>
 8002da6:	0c00      	lsrs	r0, r0, #16
 8002da8:	3910      	subs	r1, #16
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	4298      	cmp	r0, r3
 8002dae:	d301      	bcc.n	8002db4 <__clzsi2+0x18>
 8002db0:	0a00      	lsrs	r0, r0, #8
 8002db2:	3908      	subs	r1, #8
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	4298      	cmp	r0, r3
 8002db8:	d301      	bcc.n	8002dbe <__clzsi2+0x22>
 8002dba:	0900      	lsrs	r0, r0, #4
 8002dbc:	3904      	subs	r1, #4
 8002dbe:	a202      	add	r2, pc, #8	; (adr r2, 8002dc8 <__clzsi2+0x2c>)
 8002dc0:	5c10      	ldrb	r0, [r2, r0]
 8002dc2:	1840      	adds	r0, r0, r1
 8002dc4:	4770      	bx	lr
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	02020304 	.word	0x02020304
 8002dcc:	01010101 	.word	0x01010101
	...

08002dd8 <__eqdf2>:
 8002dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dda:	464e      	mov	r6, r9
 8002ddc:	4645      	mov	r5, r8
 8002dde:	46de      	mov	lr, fp
 8002de0:	4657      	mov	r7, sl
 8002de2:	4690      	mov	r8, r2
 8002de4:	b5e0      	push	{r5, r6, r7, lr}
 8002de6:	0017      	movs	r7, r2
 8002de8:	031a      	lsls	r2, r3, #12
 8002dea:	0b12      	lsrs	r2, r2, #12
 8002dec:	0005      	movs	r5, r0
 8002dee:	4684      	mov	ip, r0
 8002df0:	4819      	ldr	r0, [pc, #100]	; (8002e58 <__eqdf2+0x80>)
 8002df2:	030e      	lsls	r6, r1, #12
 8002df4:	004c      	lsls	r4, r1, #1
 8002df6:	4691      	mov	r9, r2
 8002df8:	005a      	lsls	r2, r3, #1
 8002dfa:	0fdb      	lsrs	r3, r3, #31
 8002dfc:	469b      	mov	fp, r3
 8002dfe:	0b36      	lsrs	r6, r6, #12
 8002e00:	0d64      	lsrs	r4, r4, #21
 8002e02:	0fc9      	lsrs	r1, r1, #31
 8002e04:	0d52      	lsrs	r2, r2, #21
 8002e06:	4284      	cmp	r4, r0
 8002e08:	d019      	beq.n	8002e3e <__eqdf2+0x66>
 8002e0a:	4282      	cmp	r2, r0
 8002e0c:	d010      	beq.n	8002e30 <__eqdf2+0x58>
 8002e0e:	2001      	movs	r0, #1
 8002e10:	4294      	cmp	r4, r2
 8002e12:	d10e      	bne.n	8002e32 <__eqdf2+0x5a>
 8002e14:	454e      	cmp	r6, r9
 8002e16:	d10c      	bne.n	8002e32 <__eqdf2+0x5a>
 8002e18:	2001      	movs	r0, #1
 8002e1a:	45c4      	cmp	ip, r8
 8002e1c:	d109      	bne.n	8002e32 <__eqdf2+0x5a>
 8002e1e:	4559      	cmp	r1, fp
 8002e20:	d017      	beq.n	8002e52 <__eqdf2+0x7a>
 8002e22:	2c00      	cmp	r4, #0
 8002e24:	d105      	bne.n	8002e32 <__eqdf2+0x5a>
 8002e26:	0030      	movs	r0, r6
 8002e28:	4328      	orrs	r0, r5
 8002e2a:	1e43      	subs	r3, r0, #1
 8002e2c:	4198      	sbcs	r0, r3
 8002e2e:	e000      	b.n	8002e32 <__eqdf2+0x5a>
 8002e30:	2001      	movs	r0, #1
 8002e32:	bcf0      	pop	{r4, r5, r6, r7}
 8002e34:	46bb      	mov	fp, r7
 8002e36:	46b2      	mov	sl, r6
 8002e38:	46a9      	mov	r9, r5
 8002e3a:	46a0      	mov	r8, r4
 8002e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e3e:	0033      	movs	r3, r6
 8002e40:	2001      	movs	r0, #1
 8002e42:	432b      	orrs	r3, r5
 8002e44:	d1f5      	bne.n	8002e32 <__eqdf2+0x5a>
 8002e46:	42a2      	cmp	r2, r4
 8002e48:	d1f3      	bne.n	8002e32 <__eqdf2+0x5a>
 8002e4a:	464b      	mov	r3, r9
 8002e4c:	433b      	orrs	r3, r7
 8002e4e:	d1f0      	bne.n	8002e32 <__eqdf2+0x5a>
 8002e50:	e7e2      	b.n	8002e18 <__eqdf2+0x40>
 8002e52:	2000      	movs	r0, #0
 8002e54:	e7ed      	b.n	8002e32 <__eqdf2+0x5a>
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	000007ff 	.word	0x000007ff

08002e5c <__gedf2>:
 8002e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e5e:	4647      	mov	r7, r8
 8002e60:	46ce      	mov	lr, r9
 8002e62:	0004      	movs	r4, r0
 8002e64:	0018      	movs	r0, r3
 8002e66:	0016      	movs	r6, r2
 8002e68:	031b      	lsls	r3, r3, #12
 8002e6a:	0b1b      	lsrs	r3, r3, #12
 8002e6c:	4d2d      	ldr	r5, [pc, #180]	; (8002f24 <__gedf2+0xc8>)
 8002e6e:	004a      	lsls	r2, r1, #1
 8002e70:	4699      	mov	r9, r3
 8002e72:	b580      	push	{r7, lr}
 8002e74:	0043      	lsls	r3, r0, #1
 8002e76:	030f      	lsls	r7, r1, #12
 8002e78:	46a4      	mov	ip, r4
 8002e7a:	46b0      	mov	r8, r6
 8002e7c:	0b3f      	lsrs	r7, r7, #12
 8002e7e:	0d52      	lsrs	r2, r2, #21
 8002e80:	0fc9      	lsrs	r1, r1, #31
 8002e82:	0d5b      	lsrs	r3, r3, #21
 8002e84:	0fc0      	lsrs	r0, r0, #31
 8002e86:	42aa      	cmp	r2, r5
 8002e88:	d021      	beq.n	8002ece <__gedf2+0x72>
 8002e8a:	42ab      	cmp	r3, r5
 8002e8c:	d013      	beq.n	8002eb6 <__gedf2+0x5a>
 8002e8e:	2a00      	cmp	r2, #0
 8002e90:	d122      	bne.n	8002ed8 <__gedf2+0x7c>
 8002e92:	433c      	orrs	r4, r7
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d102      	bne.n	8002e9e <__gedf2+0x42>
 8002e98:	464d      	mov	r5, r9
 8002e9a:	432e      	orrs	r6, r5
 8002e9c:	d022      	beq.n	8002ee4 <__gedf2+0x88>
 8002e9e:	2c00      	cmp	r4, #0
 8002ea0:	d010      	beq.n	8002ec4 <__gedf2+0x68>
 8002ea2:	4281      	cmp	r1, r0
 8002ea4:	d022      	beq.n	8002eec <__gedf2+0x90>
 8002ea6:	2002      	movs	r0, #2
 8002ea8:	3901      	subs	r1, #1
 8002eaa:	4008      	ands	r0, r1
 8002eac:	3801      	subs	r0, #1
 8002eae:	bcc0      	pop	{r6, r7}
 8002eb0:	46b9      	mov	r9, r7
 8002eb2:	46b0      	mov	r8, r6
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb6:	464d      	mov	r5, r9
 8002eb8:	432e      	orrs	r6, r5
 8002eba:	d129      	bne.n	8002f10 <__gedf2+0xb4>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d1f0      	bne.n	8002ea2 <__gedf2+0x46>
 8002ec0:	433c      	orrs	r4, r7
 8002ec2:	d1ee      	bne.n	8002ea2 <__gedf2+0x46>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	d1f2      	bne.n	8002eae <__gedf2+0x52>
 8002ec8:	2001      	movs	r0, #1
 8002eca:	4240      	negs	r0, r0
 8002ecc:	e7ef      	b.n	8002eae <__gedf2+0x52>
 8002ece:	003d      	movs	r5, r7
 8002ed0:	4325      	orrs	r5, r4
 8002ed2:	d11d      	bne.n	8002f10 <__gedf2+0xb4>
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d0ee      	beq.n	8002eb6 <__gedf2+0x5a>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1e2      	bne.n	8002ea2 <__gedf2+0x46>
 8002edc:	464c      	mov	r4, r9
 8002ede:	4326      	orrs	r6, r4
 8002ee0:	d1df      	bne.n	8002ea2 <__gedf2+0x46>
 8002ee2:	e7e0      	b.n	8002ea6 <__gedf2+0x4a>
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	2c00      	cmp	r4, #0
 8002ee8:	d0e1      	beq.n	8002eae <__gedf2+0x52>
 8002eea:	e7dc      	b.n	8002ea6 <__gedf2+0x4a>
 8002eec:	429a      	cmp	r2, r3
 8002eee:	dc0a      	bgt.n	8002f06 <__gedf2+0xaa>
 8002ef0:	dbe8      	blt.n	8002ec4 <__gedf2+0x68>
 8002ef2:	454f      	cmp	r7, r9
 8002ef4:	d8d7      	bhi.n	8002ea6 <__gedf2+0x4a>
 8002ef6:	d00e      	beq.n	8002f16 <__gedf2+0xba>
 8002ef8:	2000      	movs	r0, #0
 8002efa:	454f      	cmp	r7, r9
 8002efc:	d2d7      	bcs.n	8002eae <__gedf2+0x52>
 8002efe:	2900      	cmp	r1, #0
 8002f00:	d0e2      	beq.n	8002ec8 <__gedf2+0x6c>
 8002f02:	0008      	movs	r0, r1
 8002f04:	e7d3      	b.n	8002eae <__gedf2+0x52>
 8002f06:	4243      	negs	r3, r0
 8002f08:	4158      	adcs	r0, r3
 8002f0a:	0040      	lsls	r0, r0, #1
 8002f0c:	3801      	subs	r0, #1
 8002f0e:	e7ce      	b.n	8002eae <__gedf2+0x52>
 8002f10:	2002      	movs	r0, #2
 8002f12:	4240      	negs	r0, r0
 8002f14:	e7cb      	b.n	8002eae <__gedf2+0x52>
 8002f16:	45c4      	cmp	ip, r8
 8002f18:	d8c5      	bhi.n	8002ea6 <__gedf2+0x4a>
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	45c4      	cmp	ip, r8
 8002f1e:	d2c6      	bcs.n	8002eae <__gedf2+0x52>
 8002f20:	e7ed      	b.n	8002efe <__gedf2+0xa2>
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	000007ff 	.word	0x000007ff

08002f28 <__ledf2>:
 8002f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2a:	4647      	mov	r7, r8
 8002f2c:	46ce      	mov	lr, r9
 8002f2e:	0004      	movs	r4, r0
 8002f30:	0018      	movs	r0, r3
 8002f32:	0016      	movs	r6, r2
 8002f34:	031b      	lsls	r3, r3, #12
 8002f36:	0b1b      	lsrs	r3, r3, #12
 8002f38:	4d2c      	ldr	r5, [pc, #176]	; (8002fec <__ledf2+0xc4>)
 8002f3a:	004a      	lsls	r2, r1, #1
 8002f3c:	4699      	mov	r9, r3
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	0043      	lsls	r3, r0, #1
 8002f42:	030f      	lsls	r7, r1, #12
 8002f44:	46a4      	mov	ip, r4
 8002f46:	46b0      	mov	r8, r6
 8002f48:	0b3f      	lsrs	r7, r7, #12
 8002f4a:	0d52      	lsrs	r2, r2, #21
 8002f4c:	0fc9      	lsrs	r1, r1, #31
 8002f4e:	0d5b      	lsrs	r3, r3, #21
 8002f50:	0fc0      	lsrs	r0, r0, #31
 8002f52:	42aa      	cmp	r2, r5
 8002f54:	d00d      	beq.n	8002f72 <__ledf2+0x4a>
 8002f56:	42ab      	cmp	r3, r5
 8002f58:	d010      	beq.n	8002f7c <__ledf2+0x54>
 8002f5a:	2a00      	cmp	r2, #0
 8002f5c:	d127      	bne.n	8002fae <__ledf2+0x86>
 8002f5e:	433c      	orrs	r4, r7
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d111      	bne.n	8002f88 <__ledf2+0x60>
 8002f64:	464d      	mov	r5, r9
 8002f66:	432e      	orrs	r6, r5
 8002f68:	d10e      	bne.n	8002f88 <__ledf2+0x60>
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	2c00      	cmp	r4, #0
 8002f6e:	d015      	beq.n	8002f9c <__ledf2+0x74>
 8002f70:	e00e      	b.n	8002f90 <__ledf2+0x68>
 8002f72:	003d      	movs	r5, r7
 8002f74:	4325      	orrs	r5, r4
 8002f76:	d110      	bne.n	8002f9a <__ledf2+0x72>
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d118      	bne.n	8002fae <__ledf2+0x86>
 8002f7c:	464d      	mov	r5, r9
 8002f7e:	432e      	orrs	r6, r5
 8002f80:	d10b      	bne.n	8002f9a <__ledf2+0x72>
 8002f82:	2a00      	cmp	r2, #0
 8002f84:	d102      	bne.n	8002f8c <__ledf2+0x64>
 8002f86:	433c      	orrs	r4, r7
 8002f88:	2c00      	cmp	r4, #0
 8002f8a:	d00b      	beq.n	8002fa4 <__ledf2+0x7c>
 8002f8c:	4281      	cmp	r1, r0
 8002f8e:	d014      	beq.n	8002fba <__ledf2+0x92>
 8002f90:	2002      	movs	r0, #2
 8002f92:	3901      	subs	r1, #1
 8002f94:	4008      	ands	r0, r1
 8002f96:	3801      	subs	r0, #1
 8002f98:	e000      	b.n	8002f9c <__ledf2+0x74>
 8002f9a:	2002      	movs	r0, #2
 8002f9c:	bcc0      	pop	{r6, r7}
 8002f9e:	46b9      	mov	r9, r7
 8002fa0:	46b0      	mov	r8, r6
 8002fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d1f9      	bne.n	8002f9c <__ledf2+0x74>
 8002fa8:	2001      	movs	r0, #1
 8002faa:	4240      	negs	r0, r0
 8002fac:	e7f6      	b.n	8002f9c <__ledf2+0x74>
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1ec      	bne.n	8002f8c <__ledf2+0x64>
 8002fb2:	464c      	mov	r4, r9
 8002fb4:	4326      	orrs	r6, r4
 8002fb6:	d1e9      	bne.n	8002f8c <__ledf2+0x64>
 8002fb8:	e7ea      	b.n	8002f90 <__ledf2+0x68>
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	dd04      	ble.n	8002fc8 <__ledf2+0xa0>
 8002fbe:	4243      	negs	r3, r0
 8002fc0:	4158      	adcs	r0, r3
 8002fc2:	0040      	lsls	r0, r0, #1
 8002fc4:	3801      	subs	r0, #1
 8002fc6:	e7e9      	b.n	8002f9c <__ledf2+0x74>
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	dbeb      	blt.n	8002fa4 <__ledf2+0x7c>
 8002fcc:	454f      	cmp	r7, r9
 8002fce:	d8df      	bhi.n	8002f90 <__ledf2+0x68>
 8002fd0:	d006      	beq.n	8002fe0 <__ledf2+0xb8>
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	454f      	cmp	r7, r9
 8002fd6:	d2e1      	bcs.n	8002f9c <__ledf2+0x74>
 8002fd8:	2900      	cmp	r1, #0
 8002fda:	d0e5      	beq.n	8002fa8 <__ledf2+0x80>
 8002fdc:	0008      	movs	r0, r1
 8002fde:	e7dd      	b.n	8002f9c <__ledf2+0x74>
 8002fe0:	45c4      	cmp	ip, r8
 8002fe2:	d8d5      	bhi.n	8002f90 <__ledf2+0x68>
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	45c4      	cmp	ip, r8
 8002fe8:	d2d8      	bcs.n	8002f9c <__ledf2+0x74>
 8002fea:	e7f5      	b.n	8002fd8 <__ledf2+0xb0>
 8002fec:	000007ff 	.word	0x000007ff

08002ff0 <drawPixel>:
extern uint8_t _rowstart;       ///< Some displays need this changed to offset
extern uint8_t _xstart;
extern uint8_t _ystart;

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	0004      	movs	r4, r0
 8002ff8:	0008      	movs	r0, r1
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	1dbb      	adds	r3, r7, #6
 8002ffe:	1c22      	adds	r2, r4, #0
 8003000:	801a      	strh	r2, [r3, #0]
 8003002:	1d3b      	adds	r3, r7, #4
 8003004:	1c02      	adds	r2, r0, #0
 8003006:	801a      	strh	r2, [r3, #0]
 8003008:	1cbb      	adds	r3, r7, #2
 800300a:	1c0a      	adds	r2, r1, #0
 800300c:	801a      	strh	r2, [r3, #0]
	ST7735_DrawPixel(x, y, color);
 800300e:	1dbb      	adds	r3, r7, #6
 8003010:	8818      	ldrh	r0, [r3, #0]
 8003012:	1d3b      	adds	r3, r7, #4
 8003014:	8819      	ldrh	r1, [r3, #0]
 8003016:	1cbb      	adds	r3, r7, #2
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	001a      	movs	r2, r3
 800301c:	f000 febc 	bl	8003d98 <ST7735_DrawPixel>
}
 8003020:	46c0      	nop			; (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b003      	add	sp, #12
 8003026:	bd90      	pop	{r4, r7, pc}

08003028 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af02      	add	r7, sp, #8
 800302e:	0005      	movs	r5, r0
 8003030:	000c      	movs	r4, r1
 8003032:	0010      	movs	r0, r2
 8003034:	0019      	movs	r1, r3
 8003036:	1dbb      	adds	r3, r7, #6
 8003038:	1c2a      	adds	r2, r5, #0
 800303a:	801a      	strh	r2, [r3, #0]
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	1c22      	adds	r2, r4, #0
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	1cbb      	adds	r3, r7, #2
 8003044:	1c02      	adds	r2, r0, #0
 8003046:	801a      	strh	r2, [r3, #0]
 8003048:	003b      	movs	r3, r7
 800304a:	1c0a      	adds	r2, r1, #0
 800304c:	801a      	strh	r2, [r3, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 800304e:	1dbb      	adds	r3, r7, #6
 8003050:	8818      	ldrh	r0, [r3, #0]
 8003052:	1d3b      	adds	r3, r7, #4
 8003054:	8819      	ldrh	r1, [r3, #0]
 8003056:	1cbb      	adds	r3, r7, #2
 8003058:	881a      	ldrh	r2, [r3, #0]
 800305a:	003b      	movs	r3, r7
 800305c:	881c      	ldrh	r4, [r3, #0]
 800305e:	2318      	movs	r3, #24
 8003060:	18fb      	adds	r3, r7, r3
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	0023      	movs	r3, r4
 8003068:	f001 f812 	bl	8004090 <ST7735_FillRectangle>
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	b002      	add	sp, #8
 8003072:	bdb0      	pop	{r4, r5, r7, pc}

08003074 <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	0004      	movs	r4, r0
 800307c:	0008      	movs	r0, r1
 800307e:	0011      	movs	r1, r2
 8003080:	1dbb      	adds	r3, r7, #6
 8003082:	1c22      	adds	r2, r4, #0
 8003084:	801a      	strh	r2, [r3, #0]
 8003086:	1d3b      	adds	r3, r7, #4
 8003088:	1c02      	adds	r2, r0, #0
 800308a:	801a      	strh	r2, [r3, #0]
 800308c:	1cbb      	adds	r3, r7, #2
 800308e:	1c0a      	adds	r2, r1, #0
 8003090:	801a      	strh	r2, [r3, #0]
    drawPixel(x, y, color);
 8003092:	1cbb      	adds	r3, r7, #2
 8003094:	881a      	ldrh	r2, [r3, #0]
 8003096:	1d3b      	adds	r3, r7, #4
 8003098:	2100      	movs	r1, #0
 800309a:	5e59      	ldrsh	r1, [r3, r1]
 800309c:	1dbb      	adds	r3, r7, #6
 800309e:	2000      	movs	r0, #0
 80030a0:	5e1b      	ldrsh	r3, [r3, r0]
 80030a2:	0018      	movs	r0, r3
 80030a4:	f7ff ffa4 	bl	8002ff0 <drawPixel>
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b003      	add	sp, #12
 80030ae:	bd90      	pop	{r4, r7, pc}

080030b0 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80030b0:	b5b0      	push	{r4, r5, r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	0005      	movs	r5, r0
 80030b8:	000c      	movs	r4, r1
 80030ba:	0010      	movs	r0, r2
 80030bc:	0019      	movs	r1, r3
 80030be:	1dbb      	adds	r3, r7, #6
 80030c0:	1c2a      	adds	r2, r5, #0
 80030c2:	801a      	strh	r2, [r3, #0]
 80030c4:	1d3b      	adds	r3, r7, #4
 80030c6:	1c22      	adds	r2, r4, #0
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	1cbb      	adds	r3, r7, #2
 80030cc:	1c02      	adds	r2, r0, #0
 80030ce:	801a      	strh	r2, [r3, #0]
 80030d0:	003b      	movs	r3, r7
 80030d2:	1c0a      	adds	r2, r1, #0
 80030d4:	801a      	strh	r2, [r3, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80030d6:	003b      	movs	r3, r7
 80030d8:	2200      	movs	r2, #0
 80030da:	5e9a      	ldrsh	r2, [r3, r2]
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	2100      	movs	r1, #0
 80030e0:	5e5b      	ldrsh	r3, [r3, r1]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	17d9      	asrs	r1, r3, #31
 80030e6:	185a      	adds	r2, r3, r1
 80030e8:	404a      	eors	r2, r1
 80030ea:	1cbb      	adds	r3, r7, #2
 80030ec:	2100      	movs	r1, #0
 80030ee:	5e59      	ldrsh	r1, [r3, r1]
 80030f0:	1dbb      	adds	r3, r7, #6
 80030f2:	2000      	movs	r0, #0
 80030f4:	5e1b      	ldrsh	r3, [r3, r0]
 80030f6:	1acb      	subs	r3, r1, r3
 80030f8:	17d9      	asrs	r1, r3, #31
 80030fa:	185b      	adds	r3, r3, r1
 80030fc:	404b      	eors	r3, r1
 80030fe:	2101      	movs	r1, #1
 8003100:	429a      	cmp	r2, r3
 8003102:	dc01      	bgt.n	8003108 <writeLine+0x58>
 8003104:	2300      	movs	r3, #0
 8003106:	1c19      	adds	r1, r3, #0
 8003108:	b2ca      	uxtb	r2, r1
 800310a:	211a      	movs	r1, #26
 800310c:	187b      	adds	r3, r7, r1
 800310e:	801a      	strh	r2, [r3, #0]
    if (steep) {
 8003110:	187b      	adds	r3, r7, r1
 8003112:	2200      	movs	r2, #0
 8003114:	5e9b      	ldrsh	r3, [r3, r2]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d019      	beq.n	800314e <writeLine+0x9e>
        _swap_int16_t(x0, y0);
 800311a:	2118      	movs	r1, #24
 800311c:	187b      	adds	r3, r7, r1
 800311e:	1dba      	adds	r2, r7, #6
 8003120:	8812      	ldrh	r2, [r2, #0]
 8003122:	801a      	strh	r2, [r3, #0]
 8003124:	1dbb      	adds	r3, r7, #6
 8003126:	1d3a      	adds	r2, r7, #4
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	801a      	strh	r2, [r3, #0]
 800312c:	1d3b      	adds	r3, r7, #4
 800312e:	187a      	adds	r2, r7, r1
 8003130:	8812      	ldrh	r2, [r2, #0]
 8003132:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(x1, y1);
 8003134:	2116      	movs	r1, #22
 8003136:	187b      	adds	r3, r7, r1
 8003138:	1cba      	adds	r2, r7, #2
 800313a:	8812      	ldrh	r2, [r2, #0]
 800313c:	801a      	strh	r2, [r3, #0]
 800313e:	1cbb      	adds	r3, r7, #2
 8003140:	003a      	movs	r2, r7
 8003142:	8812      	ldrh	r2, [r2, #0]
 8003144:	801a      	strh	r2, [r3, #0]
 8003146:	003b      	movs	r3, r7
 8003148:	187a      	adds	r2, r7, r1
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	801a      	strh	r2, [r3, #0]
    }

    if (x0 > x1) {
 800314e:	1dba      	adds	r2, r7, #6
 8003150:	1cbb      	adds	r3, r7, #2
 8003152:	2100      	movs	r1, #0
 8003154:	5e52      	ldrsh	r2, [r2, r1]
 8003156:	2100      	movs	r1, #0
 8003158:	5e5b      	ldrsh	r3, [r3, r1]
 800315a:	429a      	cmp	r2, r3
 800315c:	dd19      	ble.n	8003192 <writeLine+0xe2>
        _swap_int16_t(x0, x1);
 800315e:	2114      	movs	r1, #20
 8003160:	187b      	adds	r3, r7, r1
 8003162:	1dba      	adds	r2, r7, #6
 8003164:	8812      	ldrh	r2, [r2, #0]
 8003166:	801a      	strh	r2, [r3, #0]
 8003168:	1dbb      	adds	r3, r7, #6
 800316a:	1cba      	adds	r2, r7, #2
 800316c:	8812      	ldrh	r2, [r2, #0]
 800316e:	801a      	strh	r2, [r3, #0]
 8003170:	1cbb      	adds	r3, r7, #2
 8003172:	187a      	adds	r2, r7, r1
 8003174:	8812      	ldrh	r2, [r2, #0]
 8003176:	801a      	strh	r2, [r3, #0]
        _swap_int16_t(y0, y1);
 8003178:	2112      	movs	r1, #18
 800317a:	187b      	adds	r3, r7, r1
 800317c:	1d3a      	adds	r2, r7, #4
 800317e:	8812      	ldrh	r2, [r2, #0]
 8003180:	801a      	strh	r2, [r3, #0]
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	003a      	movs	r2, r7
 8003186:	8812      	ldrh	r2, [r2, #0]
 8003188:	801a      	strh	r2, [r3, #0]
 800318a:	003b      	movs	r3, r7
 800318c:	187a      	adds	r2, r7, r1
 800318e:	8812      	ldrh	r2, [r2, #0]
 8003190:	801a      	strh	r2, [r3, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8003192:	1cbb      	adds	r3, r7, #2
 8003194:	881a      	ldrh	r2, [r3, #0]
 8003196:	1dbb      	adds	r3, r7, #6
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	b29a      	uxth	r2, r3
 800319e:	2110      	movs	r1, #16
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	801a      	strh	r2, [r3, #0]
    dy = abs(y1 - y0);
 80031a4:	003b      	movs	r3, r7
 80031a6:	2200      	movs	r2, #0
 80031a8:	5e9a      	ldrsh	r2, [r3, r2]
 80031aa:	1d3b      	adds	r3, r7, #4
 80031ac:	2000      	movs	r0, #0
 80031ae:	5e1b      	ldrsh	r3, [r3, r0]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	17d8      	asrs	r0, r3, #31
 80031b4:	181a      	adds	r2, r3, r0
 80031b6:	4042      	eors	r2, r0
 80031b8:	230e      	movs	r3, #14
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	801a      	strh	r2, [r3, #0]

    int16_t err = dx / 2;
 80031be:	231e      	movs	r3, #30
 80031c0:	18fa      	adds	r2, r7, r3
 80031c2:	187b      	adds	r3, r7, r1
 80031c4:	2100      	movs	r1, #0
 80031c6:	5e5b      	ldrsh	r3, [r3, r1]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	da00      	bge.n	80031ce <writeLine+0x11e>
 80031cc:	3301      	adds	r3, #1
 80031ce:	105b      	asrs	r3, r3, #1
 80031d0:	8013      	strh	r3, [r2, #0]
    int16_t ystep;

    if (y0 < y1) {
 80031d2:	1d3a      	adds	r2, r7, #4
 80031d4:	003b      	movs	r3, r7
 80031d6:	2100      	movs	r1, #0
 80031d8:	5e52      	ldrsh	r2, [r2, r1]
 80031da:	2100      	movs	r1, #0
 80031dc:	5e5b      	ldrsh	r3, [r3, r1]
 80031de:	429a      	cmp	r2, r3
 80031e0:	da04      	bge.n	80031ec <writeLine+0x13c>
        ystep = 1;
 80031e2:	231c      	movs	r3, #28
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	2201      	movs	r2, #1
 80031e8:	801a      	strh	r2, [r3, #0]
 80031ea:	e04d      	b.n	8003288 <writeLine+0x1d8>
    } else {
        ystep = -1;
 80031ec:	231c      	movs	r3, #28
 80031ee:	18fb      	adds	r3, r7, r3
 80031f0:	2201      	movs	r2, #1
 80031f2:	4252      	negs	r2, r2
 80031f4:	801a      	strh	r2, [r3, #0]
    }

    for (; x0<=x1; x0++) {
 80031f6:	e047      	b.n	8003288 <writeLine+0x1d8>
        if (steep) {
 80031f8:	231a      	movs	r3, #26
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2200      	movs	r2, #0
 80031fe:	5e9b      	ldrsh	r3, [r3, r2]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00c      	beq.n	800321e <writeLine+0x16e>
            writePixel(y0, x0, color);
 8003204:	2330      	movs	r3, #48	; 0x30
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	881a      	ldrh	r2, [r3, #0]
 800320a:	1dbb      	adds	r3, r7, #6
 800320c:	2100      	movs	r1, #0
 800320e:	5e59      	ldrsh	r1, [r3, r1]
 8003210:	1d3b      	adds	r3, r7, #4
 8003212:	2000      	movs	r0, #0
 8003214:	5e1b      	ldrsh	r3, [r3, r0]
 8003216:	0018      	movs	r0, r3
 8003218:	f7ff ff2c 	bl	8003074 <writePixel>
 800321c:	e00b      	b.n	8003236 <writeLine+0x186>
        } else {
            writePixel(x0, y0, color);
 800321e:	2330      	movs	r3, #48	; 0x30
 8003220:	18fb      	adds	r3, r7, r3
 8003222:	881a      	ldrh	r2, [r3, #0]
 8003224:	1d3b      	adds	r3, r7, #4
 8003226:	2100      	movs	r1, #0
 8003228:	5e59      	ldrsh	r1, [r3, r1]
 800322a:	1dbb      	adds	r3, r7, #6
 800322c:	2000      	movs	r0, #0
 800322e:	5e1b      	ldrsh	r3, [r3, r0]
 8003230:	0018      	movs	r0, r3
 8003232:	f7ff ff1f 	bl	8003074 <writePixel>
        }
        err -= dy;
 8003236:	211e      	movs	r1, #30
 8003238:	187b      	adds	r3, r7, r1
 800323a:	881a      	ldrh	r2, [r3, #0]
 800323c:	230e      	movs	r3, #14
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	b29a      	uxth	r2, r3
 8003246:	187b      	adds	r3, r7, r1
 8003248:	801a      	strh	r2, [r3, #0]
        if (err < 0) {
 800324a:	187b      	adds	r3, r7, r1
 800324c:	2200      	movs	r2, #0
 800324e:	5e9b      	ldrsh	r3, [r3, r2]
 8003250:	2b00      	cmp	r3, #0
 8003252:	da11      	bge.n	8003278 <writeLine+0x1c8>
            y0 += ystep;
 8003254:	1d3b      	adds	r3, r7, #4
 8003256:	881a      	ldrh	r2, [r3, #0]
 8003258:	231c      	movs	r3, #28
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	18d3      	adds	r3, r2, r3
 8003260:	b29a      	uxth	r2, r3
 8003262:	1d3b      	adds	r3, r7, #4
 8003264:	801a      	strh	r2, [r3, #0]
            err += dx;
 8003266:	187b      	adds	r3, r7, r1
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	2310      	movs	r3, #16
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	18d3      	adds	r3, r2, r3
 8003272:	b29a      	uxth	r2, r3
 8003274:	187b      	adds	r3, r7, r1
 8003276:	801a      	strh	r2, [r3, #0]
    for (; x0<=x1; x0++) {
 8003278:	1dbb      	adds	r3, r7, #6
 800327a:	2200      	movs	r2, #0
 800327c:	5e9b      	ldrsh	r3, [r3, r2]
 800327e:	b29b      	uxth	r3, r3
 8003280:	3301      	adds	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	1dbb      	adds	r3, r7, #6
 8003286:	801a      	strh	r2, [r3, #0]
 8003288:	1dba      	adds	r2, r7, #6
 800328a:	1cbb      	adds	r3, r7, #2
 800328c:	2100      	movs	r1, #0
 800328e:	5e52      	ldrsh	r2, [r2, r1]
 8003290:	2100      	movs	r1, #0
 8003292:	5e5b      	ldrsh	r3, [r3, r1]
 8003294:	429a      	cmp	r2, r3
 8003296:	ddaf      	ble.n	80031f8 <writeLine+0x148>
        }
    }
}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	46bd      	mov	sp, r7
 800329e:	b008      	add	sp, #32
 80032a0:	bdb0      	pop	{r4, r5, r7, pc}

080032a2 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80032a2:	b5b0      	push	{r4, r5, r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af02      	add	r7, sp, #8
 80032a8:	0005      	movs	r5, r0
 80032aa:	000c      	movs	r4, r1
 80032ac:	0010      	movs	r0, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	1dbb      	adds	r3, r7, #6
 80032b2:	1c2a      	adds	r2, r5, #0
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	1d3b      	adds	r3, r7, #4
 80032b8:	1c22      	adds	r2, r4, #0
 80032ba:	801a      	strh	r2, [r3, #0]
 80032bc:	1cbb      	adds	r3, r7, #2
 80032be:	1c02      	adds	r2, r0, #0
 80032c0:	801a      	strh	r2, [r3, #0]
 80032c2:	003b      	movs	r3, r7
 80032c4:	1c0a      	adds	r2, r1, #0
 80032c6:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x, y + h - 1, color);
 80032c8:	1d3b      	adds	r3, r7, #4
 80032ca:	881a      	ldrh	r2, [r3, #0]
 80032cc:	1cbb      	adds	r3, r7, #2
 80032ce:	881b      	ldrh	r3, [r3, #0]
 80032d0:	18d3      	adds	r3, r2, r3
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	3b01      	subs	r3, #1
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	b21c      	sxth	r4, r3
 80032da:	1dbb      	adds	r3, r7, #6
 80032dc:	2200      	movs	r2, #0
 80032de:	5e9a      	ldrsh	r2, [r3, r2]
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	2100      	movs	r1, #0
 80032e4:	5e59      	ldrsh	r1, [r3, r1]
 80032e6:	1dbb      	adds	r3, r7, #6
 80032e8:	2000      	movs	r0, #0
 80032ea:	5e18      	ldrsh	r0, [r3, r0]
 80032ec:	003b      	movs	r3, r7
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	0023      	movs	r3, r4
 80032f4:	f7ff fedc 	bl	80030b0 <writeLine>
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b002      	add	sp, #8
 80032fe:	bdb0      	pop	{r4, r5, r7, pc}

08003300 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8003300:	b5b0      	push	{r4, r5, r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af02      	add	r7, sp, #8
 8003306:	0005      	movs	r5, r0
 8003308:	000c      	movs	r4, r1
 800330a:	0010      	movs	r0, r2
 800330c:	0019      	movs	r1, r3
 800330e:	1dbb      	adds	r3, r7, #6
 8003310:	1c2a      	adds	r2, r5, #0
 8003312:	801a      	strh	r2, [r3, #0]
 8003314:	1d3b      	adds	r3, r7, #4
 8003316:	1c22      	adds	r2, r4, #0
 8003318:	801a      	strh	r2, [r3, #0]
 800331a:	1cbb      	adds	r3, r7, #2
 800331c:	1c02      	adds	r2, r0, #0
 800331e:	801a      	strh	r2, [r3, #0]
 8003320:	003b      	movs	r3, r7
 8003322:	1c0a      	adds	r2, r1, #0
 8003324:	801a      	strh	r2, [r3, #0]
	writeLine(x, y, x + w - 1, y, color);
 8003326:	1dbb      	adds	r3, r7, #6
 8003328:	881a      	ldrh	r2, [r3, #0]
 800332a:	1cbb      	adds	r3, r7, #2
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	18d3      	adds	r3, r2, r3
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29b      	uxth	r3, r3
 8003336:	b21a      	sxth	r2, r3
 8003338:	1d3b      	adds	r3, r7, #4
 800333a:	2400      	movs	r4, #0
 800333c:	5f1c      	ldrsh	r4, [r3, r4]
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	2100      	movs	r1, #0
 8003342:	5e59      	ldrsh	r1, [r3, r1]
 8003344:	1dbb      	adds	r3, r7, #6
 8003346:	2000      	movs	r0, #0
 8003348:	5e18      	ldrsh	r0, [r3, r0]
 800334a:	003b      	movs	r3, r7
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	0023      	movs	r3, r4
 8003352:	f7ff fead 	bl	80030b0 <writeLine>
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b002      	add	sp, #8
 800335c:	bdb0      	pop	{r4, r5, r7, pc}

0800335e <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 800335e:	b5b0      	push	{r4, r5, r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af02      	add	r7, sp, #8
 8003364:	0005      	movs	r5, r0
 8003366:	000c      	movs	r4, r1
 8003368:	0010      	movs	r0, r2
 800336a:	0019      	movs	r1, r3
 800336c:	1dbb      	adds	r3, r7, #6
 800336e:	1c2a      	adds	r2, r5, #0
 8003370:	801a      	strh	r2, [r3, #0]
 8003372:	1d3b      	adds	r3, r7, #4
 8003374:	1c22      	adds	r2, r4, #0
 8003376:	801a      	strh	r2, [r3, #0]
 8003378:	1cbb      	adds	r3, r7, #2
 800337a:	1c02      	adds	r2, r0, #0
 800337c:	801a      	strh	r2, [r3, #0]
 800337e:	003b      	movs	r3, r7
 8003380:	1c0a      	adds	r2, r1, #0
 8003382:	801a      	strh	r2, [r3, #0]
    if(x0 == x1){
 8003384:	1dba      	adds	r2, r7, #6
 8003386:	1cbb      	adds	r3, r7, #2
 8003388:	2100      	movs	r1, #0
 800338a:	5e52      	ldrsh	r2, [r2, r1]
 800338c:	2100      	movs	r1, #0
 800338e:	5e5b      	ldrsh	r3, [r3, r1]
 8003390:	429a      	cmp	r2, r3
 8003392:	d12a      	bne.n	80033ea <drawLine+0x8c>
        if(y0 > y1) _swap_int16_t(y0, y1);
 8003394:	1d3a      	adds	r2, r7, #4
 8003396:	003b      	movs	r3, r7
 8003398:	2100      	movs	r1, #0
 800339a:	5e52      	ldrsh	r2, [r2, r1]
 800339c:	2100      	movs	r1, #0
 800339e:	5e5b      	ldrsh	r3, [r3, r1]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	dd0c      	ble.n	80033be <drawLine+0x60>
 80033a4:	210c      	movs	r1, #12
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	1d3a      	adds	r2, r7, #4
 80033aa:	8812      	ldrh	r2, [r2, #0]
 80033ac:	801a      	strh	r2, [r3, #0]
 80033ae:	1d3b      	adds	r3, r7, #4
 80033b0:	003a      	movs	r2, r7
 80033b2:	8812      	ldrh	r2, [r2, #0]
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	003b      	movs	r3, r7
 80033b8:	187a      	adds	r2, r7, r1
 80033ba:	8812      	ldrh	r2, [r2, #0]
 80033bc:	801a      	strh	r2, [r3, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80033be:	003b      	movs	r3, r7
 80033c0:	881a      	ldrh	r2, [r3, #0]
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	b21a      	sxth	r2, r3
 80033d0:	2320      	movs	r3, #32
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	881c      	ldrh	r4, [r3, #0]
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	2100      	movs	r1, #0
 80033da:	5e59      	ldrsh	r1, [r3, r1]
 80033dc:	1dbb      	adds	r3, r7, #6
 80033de:	2000      	movs	r0, #0
 80033e0:	5e18      	ldrsh	r0, [r3, r0]
 80033e2:	0023      	movs	r3, r4
 80033e4:	f7ff ff5d 	bl	80032a2 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 80033e8:	e045      	b.n	8003476 <drawLine+0x118>
    } else if(y0 == y1){
 80033ea:	1d3a      	adds	r2, r7, #4
 80033ec:	003b      	movs	r3, r7
 80033ee:	2100      	movs	r1, #0
 80033f0:	5e52      	ldrsh	r2, [r2, r1]
 80033f2:	2100      	movs	r1, #0
 80033f4:	5e5b      	ldrsh	r3, [r3, r1]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d12a      	bne.n	8003450 <drawLine+0xf2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 80033fa:	1dba      	adds	r2, r7, #6
 80033fc:	1cbb      	adds	r3, r7, #2
 80033fe:	2100      	movs	r1, #0
 8003400:	5e52      	ldrsh	r2, [r2, r1]
 8003402:	2100      	movs	r1, #0
 8003404:	5e5b      	ldrsh	r3, [r3, r1]
 8003406:	429a      	cmp	r2, r3
 8003408:	dd0c      	ble.n	8003424 <drawLine+0xc6>
 800340a:	210e      	movs	r1, #14
 800340c:	187b      	adds	r3, r7, r1
 800340e:	1dba      	adds	r2, r7, #6
 8003410:	8812      	ldrh	r2, [r2, #0]
 8003412:	801a      	strh	r2, [r3, #0]
 8003414:	1dbb      	adds	r3, r7, #6
 8003416:	1cba      	adds	r2, r7, #2
 8003418:	8812      	ldrh	r2, [r2, #0]
 800341a:	801a      	strh	r2, [r3, #0]
 800341c:	1cbb      	adds	r3, r7, #2
 800341e:	187a      	adds	r2, r7, r1
 8003420:	8812      	ldrh	r2, [r2, #0]
 8003422:	801a      	strh	r2, [r3, #0]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8003424:	1cbb      	adds	r3, r7, #2
 8003426:	881a      	ldrh	r2, [r3, #0]
 8003428:	1dbb      	adds	r3, r7, #6
 800342a:	881b      	ldrh	r3, [r3, #0]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	b29b      	uxth	r3, r3
 8003430:	3301      	adds	r3, #1
 8003432:	b29b      	uxth	r3, r3
 8003434:	b21a      	sxth	r2, r3
 8003436:	2320      	movs	r3, #32
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	881c      	ldrh	r4, [r3, #0]
 800343c:	1d3b      	adds	r3, r7, #4
 800343e:	2100      	movs	r1, #0
 8003440:	5e59      	ldrsh	r1, [r3, r1]
 8003442:	1dbb      	adds	r3, r7, #6
 8003444:	2000      	movs	r0, #0
 8003446:	5e18      	ldrsh	r0, [r3, r0]
 8003448:	0023      	movs	r3, r4
 800344a:	f7ff ff59 	bl	8003300 <drawFastHLine>
}
 800344e:	e012      	b.n	8003476 <drawLine+0x118>
        writeLine(x0, y0, x1, y1, color);
 8003450:	003b      	movs	r3, r7
 8003452:	2400      	movs	r4, #0
 8003454:	5f1c      	ldrsh	r4, [r3, r4]
 8003456:	1cbb      	adds	r3, r7, #2
 8003458:	2200      	movs	r2, #0
 800345a:	5e9a      	ldrsh	r2, [r3, r2]
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	2100      	movs	r1, #0
 8003460:	5e59      	ldrsh	r1, [r3, r1]
 8003462:	1dbb      	adds	r3, r7, #6
 8003464:	2000      	movs	r0, #0
 8003466:	5e18      	ldrsh	r0, [r3, r0]
 8003468:	2320      	movs	r3, #32
 800346a:	18fb      	adds	r3, r7, r3
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	0023      	movs	r3, r4
 8003472:	f7ff fe1d 	bl	80030b0 <writeLine>
}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	46bd      	mov	sp, r7
 800347a:	b004      	add	sp, #16
 800347c:	bdb0      	pop	{r4, r5, r7, pc}

0800347e <drawRect>:
}



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800347e:	b5b0      	push	{r4, r5, r7, lr}
 8003480:	b082      	sub	sp, #8
 8003482:	af00      	add	r7, sp, #0
 8003484:	0005      	movs	r5, r0
 8003486:	000c      	movs	r4, r1
 8003488:	0010      	movs	r0, r2
 800348a:	0019      	movs	r1, r3
 800348c:	1dbb      	adds	r3, r7, #6
 800348e:	1c2a      	adds	r2, r5, #0
 8003490:	801a      	strh	r2, [r3, #0]
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	1c22      	adds	r2, r4, #0
 8003496:	801a      	strh	r2, [r3, #0]
 8003498:	1cbb      	adds	r3, r7, #2
 800349a:	1c02      	adds	r2, r0, #0
 800349c:	801a      	strh	r2, [r3, #0]
 800349e:	003b      	movs	r3, r7
 80034a0:	1c0a      	adds	r2, r1, #0
 80034a2:	801a      	strh	r2, [r3, #0]
    drawFastHLine(x, y, w, color);
 80034a4:	2518      	movs	r5, #24
 80034a6:	197b      	adds	r3, r7, r5
 80034a8:	881c      	ldrh	r4, [r3, #0]
 80034aa:	1cbb      	adds	r3, r7, #2
 80034ac:	2200      	movs	r2, #0
 80034ae:	5e9a      	ldrsh	r2, [r3, r2]
 80034b0:	1d3b      	adds	r3, r7, #4
 80034b2:	2100      	movs	r1, #0
 80034b4:	5e59      	ldrsh	r1, [r3, r1]
 80034b6:	1dbb      	adds	r3, r7, #6
 80034b8:	2000      	movs	r0, #0
 80034ba:	5e18      	ldrsh	r0, [r3, r0]
 80034bc:	0023      	movs	r3, r4
 80034be:	f7ff ff1f 	bl	8003300 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	881a      	ldrh	r2, [r3, #0]
 80034c6:	003b      	movs	r3, r7
 80034c8:	881b      	ldrh	r3, [r3, #0]
 80034ca:	18d3      	adds	r3, r2, r3
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	b219      	sxth	r1, r3
 80034d4:	197b      	adds	r3, r7, r5
 80034d6:	881c      	ldrh	r4, [r3, #0]
 80034d8:	1cbb      	adds	r3, r7, #2
 80034da:	2200      	movs	r2, #0
 80034dc:	5e9a      	ldrsh	r2, [r3, r2]
 80034de:	1dbb      	adds	r3, r7, #6
 80034e0:	2000      	movs	r0, #0
 80034e2:	5e18      	ldrsh	r0, [r3, r0]
 80034e4:	0023      	movs	r3, r4
 80034e6:	f7ff ff0b 	bl	8003300 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 80034ea:	197b      	adds	r3, r7, r5
 80034ec:	881c      	ldrh	r4, [r3, #0]
 80034ee:	003b      	movs	r3, r7
 80034f0:	2200      	movs	r2, #0
 80034f2:	5e9a      	ldrsh	r2, [r3, r2]
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	2100      	movs	r1, #0
 80034f8:	5e59      	ldrsh	r1, [r3, r1]
 80034fa:	1dbb      	adds	r3, r7, #6
 80034fc:	2000      	movs	r0, #0
 80034fe:	5e18      	ldrsh	r0, [r3, r0]
 8003500:	0023      	movs	r3, r4
 8003502:	f7ff fece 	bl	80032a2 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 8003506:	1dbb      	adds	r3, r7, #6
 8003508:	881a      	ldrh	r2, [r3, #0]
 800350a:	1cbb      	adds	r3, r7, #2
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	18d3      	adds	r3, r2, r3
 8003510:	b29b      	uxth	r3, r3
 8003512:	3b01      	subs	r3, #1
 8003514:	b29b      	uxth	r3, r3
 8003516:	b218      	sxth	r0, r3
 8003518:	197b      	adds	r3, r7, r5
 800351a:	881c      	ldrh	r4, [r3, #0]
 800351c:	003b      	movs	r3, r7
 800351e:	2200      	movs	r2, #0
 8003520:	5e9a      	ldrsh	r2, [r3, r2]
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	2100      	movs	r1, #0
 8003526:	5e59      	ldrsh	r1, [r3, r1]
 8003528:	0023      	movs	r3, r4
 800352a:	f7ff feba 	bl	80032a2 <drawFastVLine>
}
 800352e:	46c0      	nop			; (mov r8, r8)
 8003530:	46bd      	mov	sp, r7
 8003532:	b002      	add	sp, #8
 8003534:	bdb0      	pop	{r4, r5, r7, pc}

08003536 <fillTriangle>:
    drawLine(x2, y2, x0, y0, color);
}


void fillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color)
{
 8003536:	b5b0      	push	{r4, r5, r7, lr}
 8003538:	b08e      	sub	sp, #56	; 0x38
 800353a:	af00      	add	r7, sp, #0
 800353c:	0005      	movs	r5, r0
 800353e:	000c      	movs	r4, r1
 8003540:	0010      	movs	r0, r2
 8003542:	0019      	movs	r1, r3
 8003544:	1dbb      	adds	r3, r7, #6
 8003546:	1c2a      	adds	r2, r5, #0
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	1d3b      	adds	r3, r7, #4
 800354c:	1c22      	adds	r2, r4, #0
 800354e:	801a      	strh	r2, [r3, #0]
 8003550:	1cbb      	adds	r3, r7, #2
 8003552:	1c02      	adds	r2, r0, #0
 8003554:	801a      	strh	r2, [r3, #0]
 8003556:	003b      	movs	r3, r7
 8003558:	1c0a      	adds	r2, r1, #0
 800355a:	801a      	strh	r2, [r3, #0]

    int16_t a, b, y, last;

    // Sort coordinates by Y order (y2 >= y1 >= y0)
    if (y0 > y1) {
 800355c:	1d3a      	adds	r2, r7, #4
 800355e:	003b      	movs	r3, r7
 8003560:	2100      	movs	r1, #0
 8003562:	5e52      	ldrsh	r2, [r2, r1]
 8003564:	2100      	movs	r1, #0
 8003566:	5e5b      	ldrsh	r3, [r3, r1]
 8003568:	429a      	cmp	r2, r3
 800356a:	dd19      	ble.n	80035a0 <fillTriangle+0x6a>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 800356c:	2126      	movs	r1, #38	; 0x26
 800356e:	187b      	adds	r3, r7, r1
 8003570:	1d3a      	adds	r2, r7, #4
 8003572:	8812      	ldrh	r2, [r2, #0]
 8003574:	801a      	strh	r2, [r3, #0]
 8003576:	1d3b      	adds	r3, r7, #4
 8003578:	003a      	movs	r2, r7
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	801a      	strh	r2, [r3, #0]
 800357e:	003b      	movs	r3, r7
 8003580:	187a      	adds	r2, r7, r1
 8003582:	8812      	ldrh	r2, [r2, #0]
 8003584:	801a      	strh	r2, [r3, #0]
 8003586:	2124      	movs	r1, #36	; 0x24
 8003588:	187b      	adds	r3, r7, r1
 800358a:	1dba      	adds	r2, r7, #6
 800358c:	8812      	ldrh	r2, [r2, #0]
 800358e:	801a      	strh	r2, [r3, #0]
 8003590:	1dbb      	adds	r3, r7, #6
 8003592:	1cba      	adds	r2, r7, #2
 8003594:	8812      	ldrh	r2, [r2, #0]
 8003596:	801a      	strh	r2, [r3, #0]
 8003598:	1cbb      	adds	r3, r7, #2
 800359a:	187a      	adds	r2, r7, r1
 800359c:	8812      	ldrh	r2, [r2, #0]
 800359e:	801a      	strh	r2, [r3, #0]
    }
    if (y1 > y2) {
 80035a0:	003a      	movs	r2, r7
 80035a2:	214c      	movs	r1, #76	; 0x4c
 80035a4:	187b      	adds	r3, r7, r1
 80035a6:	2000      	movs	r0, #0
 80035a8:	5e12      	ldrsh	r2, [r2, r0]
 80035aa:	2000      	movs	r0, #0
 80035ac:	5e1b      	ldrsh	r3, [r3, r0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	dd1a      	ble.n	80035e8 <fillTriangle+0xb2>
        _swap_int16_t(y2, y1); _swap_int16_t(x2, x1);
 80035b2:	2022      	movs	r0, #34	; 0x22
 80035b4:	183b      	adds	r3, r7, r0
 80035b6:	187a      	adds	r2, r7, r1
 80035b8:	8812      	ldrh	r2, [r2, #0]
 80035ba:	801a      	strh	r2, [r3, #0]
 80035bc:	187b      	adds	r3, r7, r1
 80035be:	003a      	movs	r2, r7
 80035c0:	8812      	ldrh	r2, [r2, #0]
 80035c2:	801a      	strh	r2, [r3, #0]
 80035c4:	003b      	movs	r3, r7
 80035c6:	183a      	adds	r2, r7, r0
 80035c8:	8812      	ldrh	r2, [r2, #0]
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	2120      	movs	r1, #32
 80035ce:	187a      	adds	r2, r7, r1
 80035d0:	2048      	movs	r0, #72	; 0x48
 80035d2:	183b      	adds	r3, r7, r0
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	8013      	strh	r3, [r2, #0]
 80035d8:	183b      	adds	r3, r7, r0
 80035da:	1cba      	adds	r2, r7, #2
 80035dc:	8812      	ldrh	r2, [r2, #0]
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	1cbb      	adds	r3, r7, #2
 80035e2:	187a      	adds	r2, r7, r1
 80035e4:	8812      	ldrh	r2, [r2, #0]
 80035e6:	801a      	strh	r2, [r3, #0]
    }
    if (y0 > y1) {
 80035e8:	1d3a      	adds	r2, r7, #4
 80035ea:	003b      	movs	r3, r7
 80035ec:	2100      	movs	r1, #0
 80035ee:	5e52      	ldrsh	r2, [r2, r1]
 80035f0:	2100      	movs	r1, #0
 80035f2:	5e5b      	ldrsh	r3, [r3, r1]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	dd19      	ble.n	800362c <fillTriangle+0xf6>
        _swap_int16_t(y0, y1); _swap_int16_t(x0, x1);
 80035f8:	211e      	movs	r1, #30
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	1d3a      	adds	r2, r7, #4
 80035fe:	8812      	ldrh	r2, [r2, #0]
 8003600:	801a      	strh	r2, [r3, #0]
 8003602:	1d3b      	adds	r3, r7, #4
 8003604:	003a      	movs	r2, r7
 8003606:	8812      	ldrh	r2, [r2, #0]
 8003608:	801a      	strh	r2, [r3, #0]
 800360a:	003b      	movs	r3, r7
 800360c:	187a      	adds	r2, r7, r1
 800360e:	8812      	ldrh	r2, [r2, #0]
 8003610:	801a      	strh	r2, [r3, #0]
 8003612:	211c      	movs	r1, #28
 8003614:	187b      	adds	r3, r7, r1
 8003616:	1dba      	adds	r2, r7, #6
 8003618:	8812      	ldrh	r2, [r2, #0]
 800361a:	801a      	strh	r2, [r3, #0]
 800361c:	1dbb      	adds	r3, r7, #6
 800361e:	1cba      	adds	r2, r7, #2
 8003620:	8812      	ldrh	r2, [r2, #0]
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	1cbb      	adds	r3, r7, #2
 8003626:	187a      	adds	r2, r7, r1
 8003628:	8812      	ldrh	r2, [r2, #0]
 800362a:	801a      	strh	r2, [r3, #0]
    }

    if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800362c:	1d3a      	adds	r2, r7, #4
 800362e:	234c      	movs	r3, #76	; 0x4c
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	2100      	movs	r1, #0
 8003634:	5e52      	ldrsh	r2, [r2, r1]
 8003636:	2100      	movs	r1, #0
 8003638:	5e5b      	ldrsh	r3, [r3, r1]
 800363a:	429a      	cmp	r2, r3
 800363c:	d158      	bne.n	80036f0 <fillTriangle+0x1ba>
        a = b = x0;
 800363e:	2034      	movs	r0, #52	; 0x34
 8003640:	183b      	adds	r3, r7, r0
 8003642:	1dba      	adds	r2, r7, #6
 8003644:	8812      	ldrh	r2, [r2, #0]
 8003646:	801a      	strh	r2, [r3, #0]
 8003648:	2136      	movs	r1, #54	; 0x36
 800364a:	187b      	adds	r3, r7, r1
 800364c:	183a      	adds	r2, r7, r0
 800364e:	8812      	ldrh	r2, [r2, #0]
 8003650:	801a      	strh	r2, [r3, #0]
        if(x1 < a)      a = x1;
 8003652:	1cba      	adds	r2, r7, #2
 8003654:	187b      	adds	r3, r7, r1
 8003656:	2000      	movs	r0, #0
 8003658:	5e12      	ldrsh	r2, [r2, r0]
 800365a:	2000      	movs	r0, #0
 800365c:	5e1b      	ldrsh	r3, [r3, r0]
 800365e:	429a      	cmp	r2, r3
 8003660:	da04      	bge.n	800366c <fillTriangle+0x136>
 8003662:	187b      	adds	r3, r7, r1
 8003664:	1cba      	adds	r2, r7, #2
 8003666:	8812      	ldrh	r2, [r2, #0]
 8003668:	801a      	strh	r2, [r3, #0]
 800366a:	e00c      	b.n	8003686 <fillTriangle+0x150>
        else if(x1 > b) b = x1;
 800366c:	1cba      	adds	r2, r7, #2
 800366e:	2134      	movs	r1, #52	; 0x34
 8003670:	187b      	adds	r3, r7, r1
 8003672:	2000      	movs	r0, #0
 8003674:	5e12      	ldrsh	r2, [r2, r0]
 8003676:	2000      	movs	r0, #0
 8003678:	5e1b      	ldrsh	r3, [r3, r0]
 800367a:	429a      	cmp	r2, r3
 800367c:	dd03      	ble.n	8003686 <fillTriangle+0x150>
 800367e:	187b      	adds	r3, r7, r1
 8003680:	1cba      	adds	r2, r7, #2
 8003682:	8812      	ldrh	r2, [r2, #0]
 8003684:	801a      	strh	r2, [r3, #0]
        if(x2 < a)      a = x2;
 8003686:	2048      	movs	r0, #72	; 0x48
 8003688:	183b      	adds	r3, r7, r0
 800368a:	2436      	movs	r4, #54	; 0x36
 800368c:	1939      	adds	r1, r7, r4
 800368e:	2200      	movs	r2, #0
 8003690:	5e9a      	ldrsh	r2, [r3, r2]
 8003692:	2300      	movs	r3, #0
 8003694:	5ecb      	ldrsh	r3, [r1, r3]
 8003696:	429a      	cmp	r2, r3
 8003698:	da04      	bge.n	80036a4 <fillTriangle+0x16e>
 800369a:	193a      	adds	r2, r7, r4
 800369c:	183b      	adds	r3, r7, r0
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	8013      	strh	r3, [r2, #0]
 80036a2:	e00d      	b.n	80036c0 <fillTriangle+0x18a>
        else if(x2 > b) b = x2;
 80036a4:	2048      	movs	r0, #72	; 0x48
 80036a6:	183b      	adds	r3, r7, r0
 80036a8:	2434      	movs	r4, #52	; 0x34
 80036aa:	1939      	adds	r1, r7, r4
 80036ac:	2200      	movs	r2, #0
 80036ae:	5e9a      	ldrsh	r2, [r3, r2]
 80036b0:	2300      	movs	r3, #0
 80036b2:	5ecb      	ldrsh	r3, [r1, r3]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	dd03      	ble.n	80036c0 <fillTriangle+0x18a>
 80036b8:	193a      	adds	r2, r7, r4
 80036ba:	183b      	adds	r3, r7, r0
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	8013      	strh	r3, [r2, #0]
        drawFastHLine(a, y0, b-a+1, color);
 80036c0:	2334      	movs	r3, #52	; 0x34
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	881a      	ldrh	r2, [r3, #0]
 80036c6:	2036      	movs	r0, #54	; 0x36
 80036c8:	183b      	adds	r3, r7, r0
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3301      	adds	r3, #1
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	b21a      	sxth	r2, r3
 80036d6:	2350      	movs	r3, #80	; 0x50
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	881c      	ldrh	r4, [r3, #0]
 80036dc:	1d3b      	adds	r3, r7, #4
 80036de:	2100      	movs	r1, #0
 80036e0:	5e59      	ldrsh	r1, [r3, r1]
 80036e2:	183b      	adds	r3, r7, r0
 80036e4:	2000      	movs	r0, #0
 80036e6:	5e18      	ldrsh	r0, [r3, r0]
 80036e8:	0023      	movs	r3, r4
 80036ea:	f7ff fe09 	bl	8003300 <drawFastHLine>
        return;
 80036ee:	e151      	b.n	8003994 <fillTriangle+0x45e>
    }

    int16_t
    dx01 = x1 - x0,
 80036f0:	1cbb      	adds	r3, r7, #2
 80036f2:	881a      	ldrh	r2, [r3, #0]
 80036f4:	1dbb      	adds	r3, r7, #6
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	231a      	movs	r3, #26
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	801a      	strh	r2, [r3, #0]
    dy01 = y1 - y0,
 8003702:	003b      	movs	r3, r7
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	b29a      	uxth	r2, r3
 800370e:	2318      	movs	r3, #24
 8003710:	18fb      	adds	r3, r7, r3
 8003712:	801a      	strh	r2, [r3, #0]
    dx02 = x2 - x0,
 8003714:	2048      	movs	r0, #72	; 0x48
 8003716:	183b      	adds	r3, r7, r0
 8003718:	881a      	ldrh	r2, [r3, #0]
 800371a:	1dbb      	adds	r3, r7, #6
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	b29a      	uxth	r2, r3
 8003722:	2316      	movs	r3, #22
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	801a      	strh	r2, [r3, #0]
    dy02 = y2 - y0,
 8003728:	214c      	movs	r1, #76	; 0x4c
 800372a:	187b      	adds	r3, r7, r1
 800372c:	881a      	ldrh	r2, [r3, #0]
 800372e:	1d3b      	adds	r3, r7, #4
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	b29a      	uxth	r2, r3
 8003736:	2314      	movs	r3, #20
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	801a      	strh	r2, [r3, #0]
    dx12 = x2 - x1,
 800373c:	183b      	adds	r3, r7, r0
 800373e:	881a      	ldrh	r2, [r3, #0]
 8003740:	1cbb      	adds	r3, r7, #2
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	b29a      	uxth	r2, r3
 8003748:	2312      	movs	r3, #18
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	801a      	strh	r2, [r3, #0]
    dy12 = y2 - y1;
 800374e:	187b      	adds	r3, r7, r1
 8003750:	881a      	ldrh	r2, [r3, #0]
 8003752:	003b      	movs	r3, r7
 8003754:	881b      	ldrh	r3, [r3, #0]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	b29a      	uxth	r2, r3
 800375a:	2310      	movs	r3, #16
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	801a      	strh	r2, [r3, #0]
    int32_t
    sa   = 0,
 8003760:	2300      	movs	r3, #0
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb   = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
    // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    // is included here (and second loop will be skipped, avoiding a /0
    // error there), otherwise scanline y1 is skipped here and handled
    // in the second loop...which also avoids a /0 error here if y0=y1
    // (flat-topped triangle).
    if(y1 == y2) last = y1;   // Include y1 scanline
 8003768:	003a      	movs	r2, r7
 800376a:	187b      	adds	r3, r7, r1
 800376c:	2100      	movs	r1, #0
 800376e:	5e52      	ldrsh	r2, [r2, r1]
 8003770:	2100      	movs	r1, #0
 8003772:	5e5b      	ldrsh	r3, [r3, r1]
 8003774:	429a      	cmp	r2, r3
 8003776:	d105      	bne.n	8003784 <fillTriangle+0x24e>
 8003778:	2330      	movs	r3, #48	; 0x30
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	003a      	movs	r2, r7
 800377e:	8812      	ldrh	r2, [r2, #0]
 8003780:	801a      	strh	r2, [r3, #0]
 8003782:	e006      	b.n	8003792 <fillTriangle+0x25c>
    else         last = y1-1; // Skip it
 8003784:	003b      	movs	r3, r7
 8003786:	881b      	ldrh	r3, [r3, #0]
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	2330      	movs	r3, #48	; 0x30
 800378e:	18fb      	adds	r3, r7, r3
 8003790:	801a      	strh	r2, [r3, #0]

    for(y=y0; y<=last; y++) {
 8003792:	2332      	movs	r3, #50	; 0x32
 8003794:	18fb      	adds	r3, r7, r3
 8003796:	1d3a      	adds	r2, r7, #4
 8003798:	8812      	ldrh	r2, [r2, #0]
 800379a:	801a      	strh	r2, [r3, #0]
 800379c:	e065      	b.n	800386a <fillTriangle+0x334>
        a   = x0 + sa / dy01;
 800379e:	2318      	movs	r3, #24
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	2200      	movs	r2, #0
 80037a4:	5e9b      	ldrsh	r3, [r3, r2]
 80037a6:	0019      	movs	r1, r3
 80037a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80037aa:	f7fc fd35 	bl	8000218 <__divsi3>
 80037ae:	0003      	movs	r3, r0
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	1dbb      	adds	r3, r7, #6
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	18d3      	adds	r3, r2, r3
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	2436      	movs	r4, #54	; 0x36
 80037bc:	193b      	adds	r3, r7, r4
 80037be:	801a      	strh	r2, [r3, #0]
        b   = x0 + sb / dy02;
 80037c0:	2314      	movs	r3, #20
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	2200      	movs	r2, #0
 80037c6:	5e9b      	ldrsh	r3, [r3, r2]
 80037c8:	0019      	movs	r1, r3
 80037ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037cc:	f7fc fd24 	bl	8000218 <__divsi3>
 80037d0:	0003      	movs	r3, r0
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	1dbb      	adds	r3, r7, #6
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	b29a      	uxth	r2, r3
 80037dc:	2134      	movs	r1, #52	; 0x34
 80037de:	187b      	adds	r3, r7, r1
 80037e0:	801a      	strh	r2, [r3, #0]
        sa += dx01;
 80037e2:	231a      	movs	r3, #26
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2200      	movs	r2, #0
 80037e8:	5e9b      	ldrsh	r3, [r3, r2]
 80037ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037ec:	18d3      	adds	r3, r2, r3
 80037ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 80037f0:	2316      	movs	r3, #22
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	2200      	movs	r2, #0
 80037f6:	5e9b      	ldrsh	r3, [r3, r2]
 80037f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037fa:	18d3      	adds	r3, r2, r3
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 80037fe:	193a      	adds	r2, r7, r4
 8003800:	187b      	adds	r3, r7, r1
 8003802:	2000      	movs	r0, #0
 8003804:	5e12      	ldrsh	r2, [r2, r0]
 8003806:	2000      	movs	r0, #0
 8003808:	5e1b      	ldrsh	r3, [r3, r0]
 800380a:	429a      	cmp	r2, r3
 800380c:	dd0c      	ble.n	8003828 <fillTriangle+0x2f2>
 800380e:	200c      	movs	r0, #12
 8003810:	183b      	adds	r3, r7, r0
 8003812:	193a      	adds	r2, r7, r4
 8003814:	8812      	ldrh	r2, [r2, #0]
 8003816:	801a      	strh	r2, [r3, #0]
 8003818:	193b      	adds	r3, r7, r4
 800381a:	187a      	adds	r2, r7, r1
 800381c:	8812      	ldrh	r2, [r2, #0]
 800381e:	801a      	strh	r2, [r3, #0]
 8003820:	187b      	adds	r3, r7, r1
 8003822:	183a      	adds	r2, r7, r0
 8003824:	8812      	ldrh	r2, [r2, #0]
 8003826:	801a      	strh	r2, [r3, #0]
        drawFastHLine(a, y, b-a+1, color);
 8003828:	2334      	movs	r3, #52	; 0x34
 800382a:	18fb      	adds	r3, r7, r3
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	2036      	movs	r0, #54	; 0x36
 8003830:	183b      	adds	r3, r7, r0
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	b29b      	uxth	r3, r3
 8003838:	3301      	adds	r3, #1
 800383a:	b29b      	uxth	r3, r3
 800383c:	b21a      	sxth	r2, r3
 800383e:	2350      	movs	r3, #80	; 0x50
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	881c      	ldrh	r4, [r3, #0]
 8003844:	2532      	movs	r5, #50	; 0x32
 8003846:	197b      	adds	r3, r7, r5
 8003848:	2100      	movs	r1, #0
 800384a:	5e59      	ldrsh	r1, [r3, r1]
 800384c:	183b      	adds	r3, r7, r0
 800384e:	2000      	movs	r0, #0
 8003850:	5e18      	ldrsh	r0, [r3, r0]
 8003852:	0023      	movs	r3, r4
 8003854:	f7ff fd54 	bl	8003300 <drawFastHLine>
    for(y=y0; y<=last; y++) {
 8003858:	0029      	movs	r1, r5
 800385a:	187b      	adds	r3, r7, r1
 800385c:	2200      	movs	r2, #0
 800385e:	5e9b      	ldrsh	r3, [r3, r2]
 8003860:	b29b      	uxth	r3, r3
 8003862:	3301      	adds	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	187b      	adds	r3, r7, r1
 8003868:	801a      	strh	r2, [r3, #0]
 800386a:	2032      	movs	r0, #50	; 0x32
 800386c:	183a      	adds	r2, r7, r0
 800386e:	2330      	movs	r3, #48	; 0x30
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	2100      	movs	r1, #0
 8003874:	5e52      	ldrsh	r2, [r2, r1]
 8003876:	2100      	movs	r1, #0
 8003878:	5e5b      	ldrsh	r3, [r3, r1]
 800387a:	429a      	cmp	r2, r3
 800387c:	dd8f      	ble.n	800379e <fillTriangle+0x268>
    }

    // For lower part of triangle, find scanline crossings for segments
    // 0-2 and 1-2.  This loop is skipped if y1=y2.
    sa = (int32_t)dx12 * (y - y1);
 800387e:	2312      	movs	r3, #18
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	2200      	movs	r2, #0
 8003884:	5e9b      	ldrsh	r3, [r3, r2]
 8003886:	183a      	adds	r2, r7, r0
 8003888:	2100      	movs	r1, #0
 800388a:	5e51      	ldrsh	r1, [r2, r1]
 800388c:	003a      	movs	r2, r7
 800388e:	2400      	movs	r4, #0
 8003890:	5f12      	ldrsh	r2, [r2, r4]
 8003892:	1a8a      	subs	r2, r1, r2
 8003894:	4353      	muls	r3, r2
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb = (int32_t)dx02 * (y - y0);
 8003898:	2316      	movs	r3, #22
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2200      	movs	r2, #0
 800389e:	5e9b      	ldrsh	r3, [r3, r2]
 80038a0:	183a      	adds	r2, r7, r0
 80038a2:	2100      	movs	r1, #0
 80038a4:	5e51      	ldrsh	r1, [r2, r1]
 80038a6:	1d3a      	adds	r2, r7, #4
 80038a8:	2000      	movs	r0, #0
 80038aa:	5e12      	ldrsh	r2, [r2, r0]
 80038ac:	1a8a      	subs	r2, r1, r2
 80038ae:	4353      	muls	r3, r2
 80038b0:	62bb      	str	r3, [r7, #40]	; 0x28
    for(; y<=y2; y++) {
 80038b2:	e065      	b.n	8003980 <fillTriangle+0x44a>
        a   = x1 + sa / dy12;
 80038b4:	2310      	movs	r3, #16
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	2200      	movs	r2, #0
 80038ba:	5e9b      	ldrsh	r3, [r3, r2]
 80038bc:	0019      	movs	r1, r3
 80038be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038c0:	f7fc fcaa 	bl	8000218 <__divsi3>
 80038c4:	0003      	movs	r3, r0
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	1cbb      	adds	r3, r7, #2
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	18d3      	adds	r3, r2, r3
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	2436      	movs	r4, #54	; 0x36
 80038d2:	193b      	adds	r3, r7, r4
 80038d4:	801a      	strh	r2, [r3, #0]
        b   = x0 + sb / dy02;
 80038d6:	2314      	movs	r3, #20
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	2200      	movs	r2, #0
 80038dc:	5e9b      	ldrsh	r3, [r3, r2]
 80038de:	0019      	movs	r1, r3
 80038e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e2:	f7fc fc99 	bl	8000218 <__divsi3>
 80038e6:	0003      	movs	r3, r0
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	1dbb      	adds	r3, r7, #6
 80038ec:	881b      	ldrh	r3, [r3, #0]
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	2134      	movs	r1, #52	; 0x34
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	801a      	strh	r2, [r3, #0]
        sa += dx12;
 80038f8:	2312      	movs	r3, #18
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	2200      	movs	r2, #0
 80038fe:	5e9b      	ldrsh	r3, [r3, r2]
 8003900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003902:	18d3      	adds	r3, r2, r3
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
        sb += dx02;
 8003906:	2316      	movs	r3, #22
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	2200      	movs	r2, #0
 800390c:	5e9b      	ldrsh	r3, [r3, r2]
 800390e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003910:	18d3      	adds	r3, r2, r3
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
        /* longhand:
        a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
        b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
        */
        if(a > b) _swap_int16_t(a,b);
 8003914:	193a      	adds	r2, r7, r4
 8003916:	187b      	adds	r3, r7, r1
 8003918:	2000      	movs	r0, #0
 800391a:	5e12      	ldrsh	r2, [r2, r0]
 800391c:	2000      	movs	r0, #0
 800391e:	5e1b      	ldrsh	r3, [r3, r0]
 8003920:	429a      	cmp	r2, r3
 8003922:	dd0c      	ble.n	800393e <fillTriangle+0x408>
 8003924:	200e      	movs	r0, #14
 8003926:	183b      	adds	r3, r7, r0
 8003928:	193a      	adds	r2, r7, r4
 800392a:	8812      	ldrh	r2, [r2, #0]
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	193b      	adds	r3, r7, r4
 8003930:	187a      	adds	r2, r7, r1
 8003932:	8812      	ldrh	r2, [r2, #0]
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	187b      	adds	r3, r7, r1
 8003938:	183a      	adds	r2, r7, r0
 800393a:	8812      	ldrh	r2, [r2, #0]
 800393c:	801a      	strh	r2, [r3, #0]
        drawFastHLine(a, y, b-a+1, color);
 800393e:	2334      	movs	r3, #52	; 0x34
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	881a      	ldrh	r2, [r3, #0]
 8003944:	2036      	movs	r0, #54	; 0x36
 8003946:	183b      	adds	r3, r7, r0
 8003948:	881b      	ldrh	r3, [r3, #0]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	b29b      	uxth	r3, r3
 800394e:	3301      	adds	r3, #1
 8003950:	b29b      	uxth	r3, r3
 8003952:	b21a      	sxth	r2, r3
 8003954:	2350      	movs	r3, #80	; 0x50
 8003956:	18fb      	adds	r3, r7, r3
 8003958:	881c      	ldrh	r4, [r3, #0]
 800395a:	2532      	movs	r5, #50	; 0x32
 800395c:	197b      	adds	r3, r7, r5
 800395e:	2100      	movs	r1, #0
 8003960:	5e59      	ldrsh	r1, [r3, r1]
 8003962:	183b      	adds	r3, r7, r0
 8003964:	2000      	movs	r0, #0
 8003966:	5e18      	ldrsh	r0, [r3, r0]
 8003968:	0023      	movs	r3, r4
 800396a:	f7ff fcc9 	bl	8003300 <drawFastHLine>
    for(; y<=y2; y++) {
 800396e:	0029      	movs	r1, r5
 8003970:	187b      	adds	r3, r7, r1
 8003972:	2200      	movs	r2, #0
 8003974:	5e9b      	ldrsh	r3, [r3, r2]
 8003976:	b29b      	uxth	r3, r3
 8003978:	3301      	adds	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	187b      	adds	r3, r7, r1
 800397e:	801a      	strh	r2, [r3, #0]
 8003980:	2332      	movs	r3, #50	; 0x32
 8003982:	18fa      	adds	r2, r7, r3
 8003984:	234c      	movs	r3, #76	; 0x4c
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2100      	movs	r1, #0
 800398a:	5e52      	ldrsh	r2, [r2, r1]
 800398c:	2100      	movs	r1, #0
 800398e:	5e5b      	ldrsh	r3, [r3, r1]
 8003990:	429a      	cmp	r2, r3
 8003992:	dd8f      	ble.n	80038b4 <fillTriangle+0x37e>
    }
}
 8003994:	46bd      	mov	sp, r7
 8003996:	b00e      	add	sp, #56	; 0x38
 8003998:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800399c <fillScreen>:

void fillScreen(uint16_t color) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	0002      	movs	r2, r0
 80039a4:	1dbb      	adds	r3, r7, #6
 80039a6:	801a      	strh	r2, [r3, #0]
    fillRect(0, 0, _width, _height, color);
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <fillScreen+0x30>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	5e9a      	ldrsh	r2, [r3, r2]
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <fillScreen+0x34>)
 80039b0:	2100      	movs	r1, #0
 80039b2:	5e59      	ldrsh	r1, [r3, r1]
 80039b4:	1dbb      	adds	r3, r7, #6
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	000b      	movs	r3, r1
 80039bc:	2100      	movs	r1, #0
 80039be:	2000      	movs	r0, #0
 80039c0:	f7ff fb32 	bl	8003028 <fillRect>
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	b002      	add	sp, #8
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	20000050 	.word	0x20000050
 80039d0:	20000052 	.word	0x20000052

080039d4 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4803      	ldr	r0, [pc, #12]	; (80039ec <ST7735_Select+0x18>)
 80039de:	2200      	movs	r2, #0
 80039e0:	0019      	movs	r1, r3
 80039e2:	f002 fa88 	bl	8005ef6 <HAL_GPIO_WritePin>
}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	48000400 	.word	0x48000400

080039f0 <ST7735_Unselect>:

void ST7735_Unselect()
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	4803      	ldr	r0, [pc, #12]	; (8003a08 <ST7735_Unselect+0x18>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	0019      	movs	r1, r3
 80039fe:	f002 fa7a 	bl	8005ef6 <HAL_GPIO_WritePin>
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	48000400 	.word	0x48000400

08003a0c <ST7735_Reset>:

void ST7735_Reset()
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8003a10:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <ST7735_Reset+0x28>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	2104      	movs	r1, #4
 8003a16:	0018      	movs	r0, r3
 8003a18:	f002 fa6d 	bl	8005ef6 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8003a1c:	2005      	movs	r0, #5
 8003a1e:	f001 fceb 	bl	80053f8 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8003a22:	4b04      	ldr	r3, [pc, #16]	; (8003a34 <ST7735_Reset+0x28>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	2104      	movs	r1, #4
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f002 fa64 	bl	8005ef6 <HAL_GPIO_WritePin>
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	48000400 	.word	0x48000400

08003a38 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	0002      	movs	r2, r0
 8003a40:	1dfb      	adds	r3, r7, #7
 8003a42:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_RESET);
 8003a44:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <ST7735_WriteCommand+0x30>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	2102      	movs	r1, #2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f002 fa53 	bl	8005ef6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8003a50:	2301      	movs	r3, #1
 8003a52:	425b      	negs	r3, r3
 8003a54:	1df9      	adds	r1, r7, #7
 8003a56:	4805      	ldr	r0, [pc, #20]	; (8003a6c <ST7735_WriteCommand+0x34>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f002 ff65 	bl	8006928 <HAL_SPI_Transmit>
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b002      	add	sp, #8
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	48000400 	.word	0x48000400
 8003a6c:	2000009c 	.word	0x2000009c

08003a70 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <ST7735_WriteData+0x30>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	2102      	movs	r1, #2
 8003a80:	0018      	movs	r0, r3
 8003a82:	f002 fa38 	bl	8005ef6 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	425b      	negs	r3, r3
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4804      	ldr	r0, [pc, #16]	; (8003aa4 <ST7735_WriteData+0x34>)
 8003a92:	f002 ff49 	bl	8006928 <HAL_SPI_Transmit>
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	48000400 	.word	0x48000400
 8003aa4:	2000009c 	.word	0x2000009c

08003aa8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	220f      	movs	r2, #15
 8003ab8:	18ba      	adds	r2, r7, r2
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	7013      	strb	r3, [r2, #0]
    while(numCommands--) {
 8003abe:	e04a      	b.n	8003b56 <DisplayInit+0xae>
        uint8_t cmd = *addr++;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	210b      	movs	r1, #11
 8003ac8:	187a      	adds	r2, r7, r1
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	7013      	strb	r3, [r2, #0]
        ST7735_WriteCommand(cmd);
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f7ff ffb0 	bl	8003a38 <ST7735_WriteCommand>

        numArgs = *addr++;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	200a      	movs	r0, #10
 8003ae0:	183a      	adds	r2, r7, r0
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	7013      	strb	r3, [r2, #0]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8003ae6:	183b      	adds	r3, r7, r0
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	230c      	movs	r3, #12
 8003aee:	18fb      	adds	r3, r7, r3
 8003af0:	2180      	movs	r1, #128	; 0x80
 8003af2:	400a      	ands	r2, r1
 8003af4:	801a      	strh	r2, [r3, #0]
        numArgs &= ~DELAY;
 8003af6:	183b      	adds	r3, r7, r0
 8003af8:	183a      	adds	r2, r7, r0
 8003afa:	7812      	ldrb	r2, [r2, #0]
 8003afc:	217f      	movs	r1, #127	; 0x7f
 8003afe:	400a      	ands	r2, r1
 8003b00:	701a      	strb	r2, [r3, #0]
        if(numArgs) {
 8003b02:	183b      	adds	r3, r7, r0
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00c      	beq.n	8003b24 <DisplayInit+0x7c>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8003b0a:	0004      	movs	r4, r0
 8003b0c:	183b      	adds	r3, r7, r0
 8003b0e:	781a      	ldrb	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	0011      	movs	r1, r2
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7ff ffab 	bl	8003a70 <ST7735_WriteData>
            addr += numArgs;
 8003b1a:	193b      	adds	r3, r7, r4
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	18d3      	adds	r3, r2, r3
 8003b22:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8003b24:	210c      	movs	r1, #12
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d013      	beq.n	8003b56 <DisplayInit+0xae>
            ms = *addr++;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	187b      	adds	r3, r7, r1
 8003b38:	801a      	strh	r2, [r3, #0]
            if(ms == 255) ms = 500;
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	2bff      	cmp	r3, #255	; 0xff
 8003b40:	d103      	bne.n	8003b4a <DisplayInit+0xa2>
 8003b42:	187b      	adds	r3, r7, r1
 8003b44:	22fa      	movs	r2, #250	; 0xfa
 8003b46:	0052      	lsls	r2, r2, #1
 8003b48:	801a      	strh	r2, [r3, #0]
            HAL_Delay(ms);
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	881b      	ldrh	r3, [r3, #0]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f001 fc51 	bl	80053f8 <HAL_Delay>
    while(numCommands--) {
 8003b56:	220f      	movs	r2, #15
 8003b58:	18bb      	adds	r3, r7, r2
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	18ba      	adds	r2, r7, r2
 8003b5e:	1e59      	subs	r1, r3, #1
 8003b60:	7011      	strb	r1, [r2, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1ac      	bne.n	8003ac0 <DisplayInit+0x18>
        }
    }
}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b005      	add	sp, #20
 8003b6e:	bd90      	pop	{r4, r7, pc}

08003b70 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8003b70:	b5b0      	push	{r4, r5, r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	0005      	movs	r5, r0
 8003b78:	000c      	movs	r4, r1
 8003b7a:	0010      	movs	r0, r2
 8003b7c:	0019      	movs	r1, r3
 8003b7e:	1dfb      	adds	r3, r7, #7
 8003b80:	1c2a      	adds	r2, r5, #0
 8003b82:	701a      	strb	r2, [r3, #0]
 8003b84:	1dbb      	adds	r3, r7, #6
 8003b86:	1c22      	adds	r2, r4, #0
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	1d7b      	adds	r3, r7, #5
 8003b8c:	1c02      	adds	r2, r0, #0
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	1d3b      	adds	r3, r7, #4
 8003b92:	1c0a      	adds	r2, r1, #0
 8003b94:	701a      	strb	r2, [r3, #0]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8003b96:	202a      	movs	r0, #42	; 0x2a
 8003b98:	f7ff ff4e 	bl	8003a38 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 8003b9c:	210c      	movs	r1, #12
 8003b9e:	187b      	adds	r3, r7, r1
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <ST7735_SetAddressWindow+0xa8>)
 8003ba6:	781a      	ldrb	r2, [r3, #0]
 8003ba8:	1dfb      	adds	r3, r7, #7
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	18d3      	adds	r3, r2, r3
 8003bae:	b2da      	uxtb	r2, r3
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	705a      	strb	r2, [r3, #1]
 8003bb4:	187b      	adds	r3, r7, r1
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	709a      	strb	r2, [r3, #2]
 8003bba:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <ST7735_SetAddressWindow+0xa8>)
 8003bbc:	781a      	ldrb	r2, [r3, #0]
 8003bbe:	1d7b      	adds	r3, r7, #5
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	18d3      	adds	r3, r2, r3
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	187b      	adds	r3, r7, r1
 8003bc8:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003bca:	000c      	movs	r4, r1
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	2104      	movs	r1, #4
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f7ff ff4d 	bl	8003a70 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8003bd6:	202b      	movs	r0, #43	; 0x2b
 8003bd8:	f7ff ff2e 	bl	8003a38 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 8003bdc:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <ST7735_SetAddressWindow+0xac>)
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	1dbb      	adds	r3, r7, #6
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	18d3      	adds	r3, r2, r3
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	0021      	movs	r1, r4
 8003bea:	187b      	adds	r3, r7, r1
 8003bec:	705a      	strb	r2, [r3, #1]
    data[3] = y1 + _ystart;
 8003bee:	4b0b      	ldr	r3, [pc, #44]	; (8003c1c <ST7735_SetAddressWindow+0xac>)
 8003bf0:	781a      	ldrb	r2, [r3, #0]
 8003bf2:	1d3b      	adds	r3, r7, #4
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	18d3      	adds	r3, r2, r3
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	187b      	adds	r3, r7, r1
 8003bfc:	70da      	strb	r2, [r3, #3]
    ST7735_WriteData(data, sizeof(data));
 8003bfe:	187b      	adds	r3, r7, r1
 8003c00:	2104      	movs	r1, #4
 8003c02:	0018      	movs	r0, r3
 8003c04:	f7ff ff34 	bl	8003a70 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8003c08:	202c      	movs	r0, #44	; 0x2c
 8003c0a:	f7ff ff15 	bl	8003a38 <ST7735_WriteCommand>
}
 8003c0e:	46c0      	nop			; (mov r8, r8)
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b004      	add	sp, #16
 8003c14:	bdb0      	pop	{r4, r5, r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	20000057 	.word	0x20000057
 8003c1c:	20000058 	.word	0x20000058

08003c20 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	0002      	movs	r2, r0
 8003c28:	1dfb      	adds	r3, r7, #7
 8003c2a:	701a      	strb	r2, [r3, #0]
    ST7735_Select();
 8003c2c:	f7ff fed2 	bl	80039d4 <ST7735_Select>
    ST7735_Reset();
 8003c30:	f7ff feec 	bl	8003a0c <ST7735_Reset>
    DisplayInit(init_cmds1);
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <ST7735_Init+0x50>)
 8003c36:	0018      	movs	r0, r3
 8003c38:	f7ff ff36 	bl	8003aa8 <DisplayInit>
    DisplayInit(init_cmds2);
 8003c3c:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <ST7735_Init+0x54>)
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff ff32 	bl	8003aa8 <DisplayInit>
    DisplayInit(init_cmds3);
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <ST7735_Init+0x58>)
 8003c46:	0018      	movs	r0, r3
 8003c48:	f7ff ff2e 	bl	8003aa8 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <ST7735_Init+0x5c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <ST7735_Init+0x60>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8003c58:	1dfb      	adds	r3, r7, #7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 f811 	bl	8003c84 <ST7735_SetRotation>
    ST7735_Unselect();
 8003c62:	f7ff fec5 	bl	80039f0 <ST7735_Unselect>

}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	b002      	add	sp, #8
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	080070e8 	.word	0x080070e8
 8003c74:	08007120 	.word	0x08007120
 8003c78:	08007130 	.word	0x08007130
 8003c7c:	20000055 	.word	0x20000055
 8003c80:	20000056 	.word	0x20000056

08003c84 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	1dfb      	adds	r3, r7, #7
 8003c8e:	701a      	strb	r2, [r3, #0]

  uint8_t madctl = 0;
 8003c90:	230f      	movs	r3, #15
 8003c92:	18fb      	adds	r3, r7, r3
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]

  rotation = m % 4; // can't be higher than 3
 8003c98:	1dfb      	adds	r3, r7, #7
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2203      	movs	r2, #3
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <ST7735_SetRotation+0xf8>)
 8003ca4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 8003ca6:	4b35      	ldr	r3, [pc, #212]	; (8003d7c <ST7735_SetRotation+0xf8>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d041      	beq.n	8003d32 <ST7735_SetRotation+0xae>
 8003cae:	dc53      	bgt.n	8003d58 <ST7735_SetRotation+0xd4>
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d02b      	beq.n	8003d0c <ST7735_SetRotation+0x88>
 8003cb4:	dc50      	bgt.n	8003d58 <ST7735_SetRotation+0xd4>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <ST7735_SetRotation+0x3c>
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d013      	beq.n	8003ce6 <ST7735_SetRotation+0x62>
 8003cbe:	e04b      	b.n	8003d58 <ST7735_SetRotation+0xd4>
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 8003cc0:	230f      	movs	r3, #15
 8003cc2:	18fb      	adds	r3, r7, r3
 8003cc4:	22c0      	movs	r2, #192	; 0xc0
 8003cc6:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003cc8:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <ST7735_SetRotation+0xfc>)
 8003cca:	22a0      	movs	r2, #160	; 0xa0
 8003ccc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003cce:	4b2d      	ldr	r3, [pc, #180]	; (8003d84 <ST7735_SetRotation+0x100>)
 8003cd0:	2280      	movs	r2, #128	; 0x80
 8003cd2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8003cd4:	4b2c      	ldr	r3, [pc, #176]	; (8003d88 <ST7735_SetRotation+0x104>)
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	4b2c      	ldr	r3, [pc, #176]	; (8003d8c <ST7735_SetRotation+0x108>)
 8003cda:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8003cdc:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <ST7735_SetRotation+0x10c>)
 8003cde:	781a      	ldrb	r2, [r3, #0]
 8003ce0:	4b2c      	ldr	r3, [pc, #176]	; (8003d94 <ST7735_SetRotation+0x110>)
 8003ce2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003ce4:	e038      	b.n	8003d58 <ST7735_SetRotation+0xd4>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003ce6:	230f      	movs	r3, #15
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	22a0      	movs	r2, #160	; 0xa0
 8003cec:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003cee:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <ST7735_SetRotation+0x100>)
 8003cf0:	22a0      	movs	r2, #160	; 0xa0
 8003cf2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003cf4:	4b22      	ldr	r3, [pc, #136]	; (8003d80 <ST7735_SetRotation+0xfc>)
 8003cf6:	2280      	movs	r2, #128	; 0x80
 8003cf8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003cfa:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <ST7735_SetRotation+0x104>)
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	4b25      	ldr	r3, [pc, #148]	; (8003d94 <ST7735_SetRotation+0x110>)
 8003d00:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <ST7735_SetRotation+0x10c>)
 8003d04:	781a      	ldrb	r2, [r3, #0]
 8003d06:	4b21      	ldr	r3, [pc, #132]	; (8003d8c <ST7735_SetRotation+0x108>)
 8003d08:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003d0a:	e025      	b.n	8003d58 <ST7735_SetRotation+0xd4>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8003d0c:	230f      	movs	r3, #15
 8003d0e:	18fb      	adds	r3, r7, r3
 8003d10:	2200      	movs	r2, #0
 8003d12:	701a      	strb	r2, [r3, #0]
      _height = ST7735_HEIGHT;
 8003d14:	4b1a      	ldr	r3, [pc, #104]	; (8003d80 <ST7735_SetRotation+0xfc>)
 8003d16:	22a0      	movs	r2, #160	; 0xa0
 8003d18:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <ST7735_SetRotation+0x100>)
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8003d20:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <ST7735_SetRotation+0x104>)
 8003d22:	781a      	ldrb	r2, [r3, #0]
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <ST7735_SetRotation+0x108>)
 8003d26:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8003d28:	4b19      	ldr	r3, [pc, #100]	; (8003d90 <ST7735_SetRotation+0x10c>)
 8003d2a:	781a      	ldrb	r2, [r3, #0]
 8003d2c:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <ST7735_SetRotation+0x110>)
 8003d2e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003d30:	e012      	b.n	8003d58 <ST7735_SetRotation+0xd4>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8003d32:	230f      	movs	r3, #15
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	2260      	movs	r2, #96	; 0x60
 8003d38:	701a      	strb	r2, [r3, #0]
      _width = ST7735_HEIGHT;
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <ST7735_SetRotation+0x100>)
 8003d3c:	22a0      	movs	r2, #160	; 0xa0
 8003d3e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <ST7735_SetRotation+0xfc>)
 8003d42:	2280      	movs	r2, #128	; 0x80
 8003d44:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8003d46:	4b10      	ldr	r3, [pc, #64]	; (8003d88 <ST7735_SetRotation+0x104>)
 8003d48:	781a      	ldrb	r2, [r3, #0]
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <ST7735_SetRotation+0x110>)
 8003d4c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <ST7735_SetRotation+0x10c>)
 8003d50:	781a      	ldrb	r2, [r3, #0]
 8003d52:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <ST7735_SetRotation+0x108>)
 8003d54:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8003d56:	46c0      	nop			; (mov r8, r8)
  }
  ST7735_Select();
 8003d58:	f7ff fe3c 	bl	80039d4 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8003d5c:	2036      	movs	r0, #54	; 0x36
 8003d5e:	f7ff fe6b 	bl	8003a38 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8003d62:	230f      	movs	r3, #15
 8003d64:	18fb      	adds	r3, r7, r3
 8003d66:	2101      	movs	r1, #1
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7ff fe81 	bl	8003a70 <ST7735_WriteData>
  ST7735_Unselect();
 8003d6e:	f7ff fe3f 	bl	80039f0 <ST7735_Unselect>
}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	46bd      	mov	sp, r7
 8003d76:	b004      	add	sp, #16
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	46c0      	nop			; (mov r8, r8)
 8003d7c:	20000054 	.word	0x20000054
 8003d80:	20000052 	.word	0x20000052
 8003d84:	20000050 	.word	0x20000050
 8003d88:	20000055 	.word	0x20000055
 8003d8c:	20000057 	.word	0x20000057
 8003d90:	20000056 	.word	0x20000056
 8003d94:	20000058 	.word	0x20000058

08003d98 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8003d98:	b590      	push	{r4, r7, lr}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	0004      	movs	r4, r0
 8003da0:	0008      	movs	r0, r1
 8003da2:	0011      	movs	r1, r2
 8003da4:	1dbb      	adds	r3, r7, #6
 8003da6:	1c22      	adds	r2, r4, #0
 8003da8:	801a      	strh	r2, [r3, #0]
 8003daa:	1d3b      	adds	r3, r7, #4
 8003dac:	1c02      	adds	r2, r0, #0
 8003dae:	801a      	strh	r2, [r3, #0]
 8003db0:	1cbb      	adds	r3, r7, #2
 8003db2:	1c0a      	adds	r2, r1, #0
 8003db4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height))
 8003db6:	1dbb      	adds	r3, r7, #6
 8003db8:	881b      	ldrh	r3, [r3, #0]
 8003dba:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <ST7735_DrawPixel+0x94>)
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	5e52      	ldrsh	r2, [r2, r1]
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	da2f      	bge.n	8003e24 <ST7735_DrawPixel+0x8c>
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	4a19      	ldr	r2, [pc, #100]	; (8003e30 <ST7735_DrawPixel+0x98>)
 8003dca:	2100      	movs	r1, #0
 8003dcc:	5e52      	ldrsh	r2, [r2, r1]
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	da28      	bge.n	8003e24 <ST7735_DrawPixel+0x8c>
        return;

    ST7735_Select();
 8003dd2:	f7ff fdff 	bl	80039d4 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8003dd6:	1dbb      	adds	r3, r7, #6
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b2d8      	uxtb	r0, r3
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	b2d9      	uxtb	r1, r3
 8003de2:	1dbb      	adds	r3, r7, #6
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	3301      	adds	r3, #1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	1d3b      	adds	r3, r7, #4
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f7ff febb 	bl	8003b70 <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8003dfa:	1cbb      	adds	r3, r7, #2
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	0a1b      	lsrs	r3, r3, #8
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	210c      	movs	r1, #12
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	1cbb      	adds	r3, r7, #2
 8003e0c:	881b      	ldrh	r3, [r3, #0]
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	705a      	strb	r2, [r3, #1]
    ST7735_WriteData(data, sizeof(data));
 8003e14:	187b      	adds	r3, r7, r1
 8003e16:	2102      	movs	r1, #2
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f7ff fe29 	bl	8003a70 <ST7735_WriteData>

    ST7735_Unselect();
 8003e1e:	f7ff fde7 	bl	80039f0 <ST7735_Unselect>
 8003e22:	e000      	b.n	8003e26 <ST7735_DrawPixel+0x8e>
        return;
 8003e24:	46c0      	nop			; (mov r8, r8)
}
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b005      	add	sp, #20
 8003e2a:	bd90      	pop	{r4, r7, pc}
 8003e2c:	20000050 	.word	0x20000050
 8003e30:	20000052 	.word	0x20000052

08003e34 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003e34:	b082      	sub	sp, #8
 8003e36:	b5b0      	push	{r4, r5, r7, lr}
 8003e38:	b088      	sub	sp, #32
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	0004      	movs	r4, r0
 8003e3e:	0008      	movs	r0, r1
 8003e40:	0011      	movs	r1, r2
 8003e42:	2204      	movs	r2, #4
 8003e44:	2530      	movs	r5, #48	; 0x30
 8003e46:	1952      	adds	r2, r2, r5
 8003e48:	19d2      	adds	r2, r2, r7
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	1dbb      	adds	r3, r7, #6
 8003e4e:	1c22      	adds	r2, r4, #0
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	1d3b      	adds	r3, r7, #4
 8003e54:	1c02      	adds	r2, r0, #0
 8003e56:	801a      	strh	r2, [r3, #0]
 8003e58:	1cfb      	adds	r3, r7, #3
 8003e5a:	1c0a      	adds	r2, r1, #0
 8003e5c:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8003e5e:	1dbb      	adds	r3, r7, #6
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b2d8      	uxtb	r0, r3
 8003e64:	1d3b      	adds	r3, r7, #4
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	b2d9      	uxtb	r1, r3
 8003e6a:	1dbb      	adds	r3, r7, #6
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	2304      	movs	r3, #4
 8003e72:	195b      	adds	r3, r3, r5
 8003e74:	19db      	adds	r3, r3, r7
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	18d3      	adds	r3, r2, r3
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b2dc      	uxtb	r4, r3
 8003e80:	1d3b      	adds	r3, r7, #4
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	2304      	movs	r3, #4
 8003e88:	195b      	adds	r3, r3, r5
 8003e8a:	19db      	adds	r3, r3, r7
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	18d3      	adds	r3, r2, r3
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	0022      	movs	r2, r4
 8003e98:	f7ff fe6a 	bl	8003b70 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e053      	b.n	8003f4a <ST7735_WriteChar+0x116>
        b = font.data[(ch - 32) * font.height + i];
 8003ea2:	2304      	movs	r3, #4
 8003ea4:	2030      	movs	r0, #48	; 0x30
 8003ea6:	181b      	adds	r3, r3, r0
 8003ea8:	19db      	adds	r3, r3, r7
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	1cfb      	adds	r3, r7, #3
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	3b20      	subs	r3, #32
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	1809      	adds	r1, r1, r0
 8003eb6:	19c9      	adds	r1, r1, r7
 8003eb8:	7849      	ldrb	r1, [r1, #1]
 8003eba:	434b      	muls	r3, r1
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	18cb      	adds	r3, r1, r3
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	18d3      	adds	r3, r2, r3
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	e030      	b.n	8003f32 <ST7735_WriteChar+0xfe>
            if((b << j) & 0x8000)  {
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	4013      	ands	r3, r2
 8003edc:	d013      	beq.n	8003f06 <ST7735_WriteChar+0xd2>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8003ede:	203c      	movs	r0, #60	; 0x3c
 8003ee0:	183b      	adds	r3, r7, r0
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	0a1b      	lsrs	r3, r3, #8
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	2110      	movs	r1, #16
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	183b      	adds	r3, r7, r0
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	187b      	adds	r3, r7, r1
 8003ef8:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	2102      	movs	r1, #2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff fdb6 	bl	8003a70 <ST7735_WriteData>
 8003f04:	e012      	b.n	8003f2c <ST7735_WriteChar+0xf8>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8003f06:	2040      	movs	r0, #64	; 0x40
 8003f08:	183b      	adds	r3, r7, r0
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	210c      	movs	r1, #12
 8003f14:	187b      	adds	r3, r7, r1
 8003f16:	701a      	strb	r2, [r3, #0]
 8003f18:	183b      	adds	r3, r7, r0
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	187b      	adds	r3, r7, r1
 8003f20:	705a      	strb	r2, [r3, #1]
                ST7735_WriteData(data, sizeof(data));
 8003f22:	187b      	adds	r3, r7, r1
 8003f24:	2102      	movs	r1, #2
 8003f26:	0018      	movs	r0, r3
 8003f28:	f7ff fda2 	bl	8003a70 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	2304      	movs	r3, #4
 8003f34:	2230      	movs	r2, #48	; 0x30
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	19db      	adds	r3, r3, r7
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	001a      	movs	r2, r3
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d3c5      	bcc.n	8003ed0 <ST7735_WriteChar+0x9c>
    for(i = 0; i < font.height; i++) {
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	3301      	adds	r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
 8003f4a:	2304      	movs	r3, #4
 8003f4c:	2230      	movs	r2, #48	; 0x30
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	19db      	adds	r3, r3, r7
 8003f52:	785b      	ldrb	r3, [r3, #1]
 8003f54:	001a      	movs	r2, r3
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d3a2      	bcc.n	8003ea2 <ST7735_WriteChar+0x6e>
            }
        }
    }
}
 8003f5c:	46c0      	nop			; (mov r8, r8)
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	46bd      	mov	sp, r7
 8003f62:	b008      	add	sp, #32
 8003f64:	bcb0      	pop	{r4, r5, r7}
 8003f66:	bc08      	pop	{r3}
 8003f68:	b002      	add	sp, #8
 8003f6a:	4718      	bx	r3

08003f6c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f70:	b087      	sub	sp, #28
 8003f72:	af04      	add	r7, sp, #16
 8003f74:	603a      	str	r2, [r7, #0]
 8003f76:	2204      	movs	r2, #4
 8003f78:	2418      	movs	r4, #24
 8003f7a:	1912      	adds	r2, r2, r4
 8003f7c:	2408      	movs	r4, #8
 8003f7e:	46a4      	mov	ip, r4
 8003f80:	44bc      	add	ip, r7
 8003f82:	4462      	add	r2, ip
 8003f84:	6013      	str	r3, [r2, #0]
 8003f86:	1dbb      	adds	r3, r7, #6
 8003f88:	1c02      	adds	r2, r0, #0
 8003f8a:	801a      	strh	r2, [r3, #0]
 8003f8c:	1d3b      	adds	r3, r7, #4
 8003f8e:	1c0a      	adds	r2, r1, #0
 8003f90:	801a      	strh	r2, [r3, #0]
    ST7735_Select();
 8003f92:	f7ff fd1f 	bl	80039d4 <ST7735_Select>

    while(*str) {
 8003f96:	e067      	b.n	8004068 <ST7735_WriteString+0xfc>
        if(x + font.width >= _width) {
 8003f98:	1dbb      	adds	r3, r7, #6
 8003f9a:	881b      	ldrh	r3, [r3, #0]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	2118      	movs	r1, #24
 8003fa0:	1852      	adds	r2, r2, r1
 8003fa2:	2008      	movs	r0, #8
 8003fa4:	4684      	mov	ip, r0
 8003fa6:	44bc      	add	ip, r7
 8003fa8:	4462      	add	r2, ip
 8003faa:	7812      	ldrb	r2, [r2, #0]
 8003fac:	189b      	adds	r3, r3, r2
 8003fae:	4a36      	ldr	r2, [pc, #216]	; (8004088 <ST7735_WriteString+0x11c>)
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	5e12      	ldrsh	r2, [r2, r0]
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	db27      	blt.n	8004008 <ST7735_WriteString+0x9c>
            x = 0;
 8003fb8:	1dbb      	adds	r3, r7, #6
 8003fba:	2200      	movs	r2, #0
 8003fbc:	801a      	strh	r2, [r3, #0]
            y += font.height;
 8003fbe:	2304      	movs	r3, #4
 8003fc0:	0008      	movs	r0, r1
 8003fc2:	185b      	adds	r3, r3, r1
 8003fc4:	2208      	movs	r2, #8
 8003fc6:	4694      	mov	ip, r2
 8003fc8:	44bc      	add	ip, r7
 8003fca:	4463      	add	r3, ip
 8003fcc:	785b      	ldrb	r3, [r3, #1]
 8003fce:	b299      	uxth	r1, r3
 8003fd0:	1d3b      	adds	r3, r7, #4
 8003fd2:	1d3a      	adds	r2, r7, #4
 8003fd4:	8812      	ldrh	r2, [r2, #0]
 8003fd6:	188a      	adds	r2, r1, r2
 8003fd8:	801a      	strh	r2, [r3, #0]
            if(y + font.height >= _height) {
 8003fda:	1d3b      	adds	r3, r7, #4
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	2204      	movs	r2, #4
 8003fe0:	1812      	adds	r2, r2, r0
 8003fe2:	2108      	movs	r1, #8
 8003fe4:	468c      	mov	ip, r1
 8003fe6:	44bc      	add	ip, r7
 8003fe8:	4462      	add	r2, ip
 8003fea:	7852      	ldrb	r2, [r2, #1]
 8003fec:	189b      	adds	r3, r3, r2
 8003fee:	4a27      	ldr	r2, [pc, #156]	; (800408c <ST7735_WriteString+0x120>)
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	5e52      	ldrsh	r2, [r2, r1]
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	da3c      	bge.n	8004072 <ST7735_WriteString+0x106>
                break;
            }

            if(*str == ' ') {
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b20      	cmp	r3, #32
 8003ffe:	d103      	bne.n	8004008 <ST7735_WriteString+0x9c>
                // skip spaces in the beginning of the new line
                str++;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	603b      	str	r3, [r7, #0]
                continue;
 8004006:	e02f      	b.n	8004068 <ST7735_WriteString+0xfc>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781d      	ldrb	r5, [r3, #0]
 800400c:	2304      	movs	r3, #4
 800400e:	2618      	movs	r6, #24
 8004010:	199b      	adds	r3, r3, r6
 8004012:	2208      	movs	r2, #8
 8004014:	4694      	mov	ip, r2
 8004016:	44bc      	add	ip, r7
 8004018:	4463      	add	r3, ip
 800401a:	1d3a      	adds	r2, r7, #4
 800401c:	8814      	ldrh	r4, [r2, #0]
 800401e:	1dba      	adds	r2, r7, #6
 8004020:	8810      	ldrh	r0, [r2, #0]
 8004022:	2228      	movs	r2, #40	; 0x28
 8004024:	2108      	movs	r1, #8
 8004026:	1852      	adds	r2, r2, r1
 8004028:	19d2      	adds	r2, r2, r7
 800402a:	8812      	ldrh	r2, [r2, #0]
 800402c:	9202      	str	r2, [sp, #8]
 800402e:	2224      	movs	r2, #36	; 0x24
 8004030:	1852      	adds	r2, r2, r1
 8004032:	19d2      	adds	r2, r2, r7
 8004034:	8812      	ldrh	r2, [r2, #0]
 8004036:	9201      	str	r2, [sp, #4]
 8004038:	466a      	mov	r2, sp
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	6011      	str	r1, [r2, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	002a      	movs	r2, r5
 8004042:	0021      	movs	r1, r4
 8004044:	f7ff fef6 	bl	8003e34 <ST7735_WriteChar>
        x += font.width;
 8004048:	2304      	movs	r3, #4
 800404a:	199b      	adds	r3, r3, r6
 800404c:	2208      	movs	r2, #8
 800404e:	4694      	mov	ip, r2
 8004050:	44bc      	add	ip, r7
 8004052:	4463      	add	r3, ip
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	b299      	uxth	r1, r3
 8004058:	1dbb      	adds	r3, r7, #6
 800405a:	1dba      	adds	r2, r7, #6
 800405c:	8812      	ldrh	r2, [r2, #0]
 800405e:	188a      	adds	r2, r1, r2
 8004060:	801a      	strh	r2, [r3, #0]
        str++;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	603b      	str	r3, [r7, #0]
    while(*str) {
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d193      	bne.n	8003f98 <ST7735_WriteString+0x2c>
 8004070:	e000      	b.n	8004074 <ST7735_WriteString+0x108>
                break;
 8004072:	46c0      	nop			; (mov r8, r8)
    }

    ST7735_Unselect();
 8004074:	f7ff fcbc 	bl	80039f0 <ST7735_Unselect>
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	b003      	add	sp, #12
 800407e:	bcf0      	pop	{r4, r5, r6, r7}
 8004080:	bc08      	pop	{r3}
 8004082:	b002      	add	sp, #8
 8004084:	4718      	bx	r3
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000050 	.word	0x20000050
 800408c:	20000052 	.word	0x20000052

08004090 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8004090:	b5b0      	push	{r4, r5, r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	0005      	movs	r5, r0
 8004098:	000c      	movs	r4, r1
 800409a:	0010      	movs	r0, r2
 800409c:	0019      	movs	r1, r3
 800409e:	1dbb      	adds	r3, r7, #6
 80040a0:	1c2a      	adds	r2, r5, #0
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	1d3b      	adds	r3, r7, #4
 80040a6:	1c22      	adds	r2, r4, #0
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	1cbb      	adds	r3, r7, #2
 80040ac:	1c02      	adds	r2, r0, #0
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	003b      	movs	r3, r7
 80040b2:	1c0a      	adds	r2, r1, #0
 80040b4:	801a      	strh	r2, [r3, #0]
    if((x >= _width) || (y >= _height)) return;
 80040b6:	1dbb      	adds	r3, r7, #6
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	4a49      	ldr	r2, [pc, #292]	; (80041e0 <ST7735_FillRectangle+0x150>)
 80040bc:	2100      	movs	r1, #0
 80040be:	5e52      	ldrsh	r2, [r2, r1]
 80040c0:	4293      	cmp	r3, r2
 80040c2:	db00      	blt.n	80040c6 <ST7735_FillRectangle+0x36>
 80040c4:	e087      	b.n	80041d6 <ST7735_FillRectangle+0x146>
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	881b      	ldrh	r3, [r3, #0]
 80040ca:	4a46      	ldr	r2, [pc, #280]	; (80041e4 <ST7735_FillRectangle+0x154>)
 80040cc:	2100      	movs	r1, #0
 80040ce:	5e52      	ldrsh	r2, [r2, r1]
 80040d0:	4293      	cmp	r3, r2
 80040d2:	db00      	blt.n	80040d6 <ST7735_FillRectangle+0x46>
 80040d4:	e07f      	b.n	80041d6 <ST7735_FillRectangle+0x146>
    if((x + w - 1) >= _width) w = _width - x;
 80040d6:	1dbb      	adds	r3, r7, #6
 80040d8:	881a      	ldrh	r2, [r3, #0]
 80040da:	1cbb      	adds	r3, r7, #2
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	18d3      	adds	r3, r2, r3
 80040e0:	4a3f      	ldr	r2, [pc, #252]	; (80041e0 <ST7735_FillRectangle+0x150>)
 80040e2:	2100      	movs	r1, #0
 80040e4:	5e52      	ldrsh	r2, [r2, r1]
 80040e6:	4293      	cmp	r3, r2
 80040e8:	dd08      	ble.n	80040fc <ST7735_FillRectangle+0x6c>
 80040ea:	4b3d      	ldr	r3, [pc, #244]	; (80041e0 <ST7735_FillRectangle+0x150>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	5e9b      	ldrsh	r3, [r3, r2]
 80040f0:	b299      	uxth	r1, r3
 80040f2:	1cbb      	adds	r3, r7, #2
 80040f4:	1dba      	adds	r2, r7, #6
 80040f6:	8812      	ldrh	r2, [r2, #0]
 80040f8:	1a8a      	subs	r2, r1, r2
 80040fa:	801a      	strh	r2, [r3, #0]
    if((y + h - 1) >= _height) h = _height - y;
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	003b      	movs	r3, r7
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	18d3      	adds	r3, r2, r3
 8004106:	4a37      	ldr	r2, [pc, #220]	; (80041e4 <ST7735_FillRectangle+0x154>)
 8004108:	2100      	movs	r1, #0
 800410a:	5e52      	ldrsh	r2, [r2, r1]
 800410c:	4293      	cmp	r3, r2
 800410e:	dd08      	ble.n	8004122 <ST7735_FillRectangle+0x92>
 8004110:	4b34      	ldr	r3, [pc, #208]	; (80041e4 <ST7735_FillRectangle+0x154>)
 8004112:	2200      	movs	r2, #0
 8004114:	5e9b      	ldrsh	r3, [r3, r2]
 8004116:	b299      	uxth	r1, r3
 8004118:	003b      	movs	r3, r7
 800411a:	1d3a      	adds	r2, r7, #4
 800411c:	8812      	ldrh	r2, [r2, #0]
 800411e:	1a8a      	subs	r2, r1, r2
 8004120:	801a      	strh	r2, [r3, #0]

    ST7735_Select();
 8004122:	f7ff fc57 	bl	80039d4 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8004126:	1dbb      	adds	r3, r7, #6
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	b2d8      	uxtb	r0, r3
 800412c:	1d3b      	adds	r3, r7, #4
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b2d9      	uxtb	r1, r3
 8004132:	1dbb      	adds	r3, r7, #6
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	b2da      	uxtb	r2, r3
 8004138:	1cbb      	adds	r3, r7, #2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	18d3      	adds	r3, r2, r3
 8004140:	b2db      	uxtb	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b2dc      	uxtb	r4, r3
 8004146:	1d3b      	adds	r3, r7, #4
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	b2da      	uxtb	r2, r3
 800414c:	003b      	movs	r3, r7
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	18d3      	adds	r3, r2, r3
 8004154:	b2db      	uxtb	r3, r3
 8004156:	3b01      	subs	r3, #1
 8004158:	b2db      	uxtb	r3, r3
 800415a:	0022      	movs	r2, r4
 800415c:	f7ff fd08 	bl	8003b70 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8004160:	2120      	movs	r1, #32
 8004162:	187b      	adds	r3, r7, r1
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	b29b      	uxth	r3, r3
 800416a:	b2da      	uxtb	r2, r3
 800416c:	200c      	movs	r0, #12
 800416e:	183b      	adds	r3, r7, r0
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	187b      	adds	r3, r7, r1
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b2da      	uxtb	r2, r3
 8004178:	183b      	adds	r3, r7, r0
 800417a:	705a      	strb	r2, [r3, #1]
    HAL_GPIO_WritePin(AD_PORT, AD_PIN, GPIO_PIN_SET);
 800417c:	4b1a      	ldr	r3, [pc, #104]	; (80041e8 <ST7735_FillRectangle+0x158>)
 800417e:	2201      	movs	r2, #1
 8004180:	2102      	movs	r1, #2
 8004182:	0018      	movs	r0, r3
 8004184:	f001 feb7 	bl	8005ef6 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8004188:	1d3b      	adds	r3, r7, #4
 800418a:	003a      	movs	r2, r7
 800418c:	8812      	ldrh	r2, [r2, #0]
 800418e:	801a      	strh	r2, [r3, #0]
 8004190:	e01a      	b.n	80041c8 <ST7735_FillRectangle+0x138>
        for(x = w; x > 0; x--) {
 8004192:	1dbb      	adds	r3, r7, #6
 8004194:	1cba      	adds	r2, r7, #2
 8004196:	8812      	ldrh	r2, [r2, #0]
 8004198:	801a      	strh	r2, [r3, #0]
 800419a:	e00c      	b.n	80041b6 <ST7735_FillRectangle+0x126>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800419c:	2301      	movs	r3, #1
 800419e:	425b      	negs	r3, r3
 80041a0:	220c      	movs	r2, #12
 80041a2:	18b9      	adds	r1, r7, r2
 80041a4:	4811      	ldr	r0, [pc, #68]	; (80041ec <ST7735_FillRectangle+0x15c>)
 80041a6:	2202      	movs	r2, #2
 80041a8:	f002 fbbe 	bl	8006928 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80041ac:	1dbb      	adds	r3, r7, #6
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	1dbb      	adds	r3, r7, #6
 80041b2:	3a01      	subs	r2, #1
 80041b4:	801a      	strh	r2, [r3, #0]
 80041b6:	1dbb      	adds	r3, r7, #6
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1ee      	bne.n	800419c <ST7735_FillRectangle+0x10c>
    for(y = h; y > 0; y--) {
 80041be:	1d3b      	adds	r3, r7, #4
 80041c0:	881a      	ldrh	r2, [r3, #0]
 80041c2:	1d3b      	adds	r3, r7, #4
 80041c4:	3a01      	subs	r2, #1
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	1d3b      	adds	r3, r7, #4
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e0      	bne.n	8004192 <ST7735_FillRectangle+0x102>
        }
    }

    ST7735_Unselect();
 80041d0:	f7ff fc0e 	bl	80039f0 <ST7735_Unselect>
 80041d4:	e000      	b.n	80041d8 <ST7735_FillRectangle+0x148>
    if((x >= _width) || (y >= _height)) return;
 80041d6:	46c0      	nop			; (mov r8, r8)
}
 80041d8:	46bd      	mov	sp, r7
 80041da:	b004      	add	sp, #16
 80041dc:	bdb0      	pop	{r4, r5, r7, pc}
 80041de:	46c0      	nop			; (mov r8, r8)
 80041e0:	20000050 	.word	0x20000050
 80041e4:	20000052 	.word	0x20000052
 80041e8:	48000400 	.word	0x48000400
 80041ec:	2000009c 	.word	0x2000009c

080041f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041f4:	f001 f892 	bl	800531c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041f8:	f000 f81a 	bl	8004230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041fc:	f000 f904 	bl	8004408 <MX_GPIO_Init>
  MX_ADC_Init();
 8004200:	f000 f868 	bl	80042d4 <MX_ADC_Init>
  MX_SPI1_Init();
 8004204:	f000 f8c2 	bl	800438c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc);
 8004208:	4b08      	ldr	r3, [pc, #32]	; (800422c <main+0x3c>)
 800420a:	0018      	movs	r0, r3
 800420c:	f001 fa58 	bl	80056c0 <HAL_ADC_Start>

  ST7735_Init(0);
 8004210:	2000      	movs	r0, #0
 8004212:	f7ff fd05 	bl	8003c20 <ST7735_Init>
  fillScreen(BLACK);
 8004216:	2000      	movs	r0, #0
 8004218:	f7ff fbc0 	bl	800399c <fillScreen>
  HAL_Delay(500);
 800421c:	23fa      	movs	r3, #250	; 0xfa
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	0018      	movs	r0, r3
 8004222:	f001 f8e9 	bl	80053f8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	pHMeter_process();
 8004226:	f000 f98d 	bl	8004544 <pHMeter_process>
 800422a:	e7fc      	b.n	8004226 <main+0x36>
 800422c:	2000005c 	.word	0x2000005c

08004230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004230:	b590      	push	{r4, r7, lr}
 8004232:	b091      	sub	sp, #68	; 0x44
 8004234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004236:	2410      	movs	r4, #16
 8004238:	193b      	adds	r3, r7, r4
 800423a:	0018      	movs	r0, r3
 800423c:	2330      	movs	r3, #48	; 0x30
 800423e:	001a      	movs	r2, r3
 8004240:	2100      	movs	r1, #0
 8004242:	f002 fe6b 	bl	8006f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004246:	003b      	movs	r3, r7
 8004248:	0018      	movs	r0, r3
 800424a:	2310      	movs	r3, #16
 800424c:	001a      	movs	r2, r3
 800424e:	2100      	movs	r1, #0
 8004250:	f002 fe64 	bl	8006f1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 8004254:	0021      	movs	r1, r4
 8004256:	187b      	adds	r3, r7, r1
 8004258:	2212      	movs	r2, #18
 800425a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800425c:	187b      	adds	r3, r7, r1
 800425e:	2201      	movs	r2, #1
 8004260:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004262:	187b      	adds	r3, r7, r1
 8004264:	2201      	movs	r2, #1
 8004266:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004268:	187b      	adds	r3, r7, r1
 800426a:	2210      	movs	r2, #16
 800426c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800426e:	187b      	adds	r3, r7, r1
 8004270:	2210      	movs	r2, #16
 8004272:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004274:	187b      	adds	r3, r7, r1
 8004276:	2202      	movs	r2, #2
 8004278:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800427a:	187b      	adds	r3, r7, r1
 800427c:	2280      	movs	r2, #128	; 0x80
 800427e:	0212      	lsls	r2, r2, #8
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 8004282:	187b      	adds	r3, r7, r1
 8004284:	22c0      	movs	r2, #192	; 0xc0
 8004286:	0312      	lsls	r2, r2, #12
 8004288:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800428a:	187b      	adds	r3, r7, r1
 800428c:	2200      	movs	r2, #0
 800428e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004290:	187b      	adds	r3, r7, r1
 8004292:	0018      	movs	r0, r3
 8004294:	f001 fe4c 	bl	8005f30 <HAL_RCC_OscConfig>
 8004298:	1e03      	subs	r3, r0, #0
 800429a:	d001      	beq.n	80042a0 <SystemClock_Config+0x70>
  {
    Error_Handler();
 800429c:	f000 f94c 	bl	8004538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042a0:	003b      	movs	r3, r7
 80042a2:	2207      	movs	r2, #7
 80042a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042a6:	003b      	movs	r3, r7
 80042a8:	2202      	movs	r2, #2
 80042aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80042ac:	003b      	movs	r3, r7
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80042b2:	003b      	movs	r3, r7
 80042b4:	2200      	movs	r2, #0
 80042b6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80042b8:	003b      	movs	r3, r7
 80042ba:	2101      	movs	r1, #1
 80042bc:	0018      	movs	r0, r3
 80042be:	f002 f955 	bl	800656c <HAL_RCC_ClockConfig>
 80042c2:	1e03      	subs	r3, r0, #0
 80042c4:	d001      	beq.n	80042ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80042c6:	f000 f937 	bl	8004538 <Error_Handler>
  }
}
 80042ca:	46c0      	nop			; (mov r8, r8)
 80042cc:	46bd      	mov	sp, r7
 80042ce:	b011      	add	sp, #68	; 0x44
 80042d0:	bd90      	pop	{r4, r7, pc}
	...

080042d4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	0018      	movs	r0, r3
 80042de:	230c      	movs	r3, #12
 80042e0:	001a      	movs	r2, r3
 80042e2:	2100      	movs	r1, #0
 80042e4:	f002 fe1a 	bl	8006f1c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80042e8:	4b26      	ldr	r3, [pc, #152]	; (8004384 <MX_ADC_Init+0xb0>)
 80042ea:	4a27      	ldr	r2, [pc, #156]	; (8004388 <MX_ADC_Init+0xb4>)
 80042ec:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80042ee:	4b25      	ldr	r3, [pc, #148]	; (8004384 <MX_ADC_Init+0xb0>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80042f4:	4b23      	ldr	r3, [pc, #140]	; (8004384 <MX_ADC_Init+0xb0>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <MX_ADC_Init+0xb0>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004300:	4b20      	ldr	r3, [pc, #128]	; (8004384 <MX_ADC_Init+0xb0>)
 8004302:	2201      	movs	r2, #1
 8004304:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004306:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <MX_ADC_Init+0xb0>)
 8004308:	2204      	movs	r2, #4
 800430a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800430c:	4b1d      	ldr	r3, [pc, #116]	; (8004384 <MX_ADC_Init+0xb0>)
 800430e:	2200      	movs	r2, #0
 8004310:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <MX_ADC_Init+0xb0>)
 8004314:	2200      	movs	r2, #0
 8004316:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004318:	4b1a      	ldr	r3, [pc, #104]	; (8004384 <MX_ADC_Init+0xb0>)
 800431a:	2200      	movs	r2, #0
 800431c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800431e:	4b19      	ldr	r3, [pc, #100]	; (8004384 <MX_ADC_Init+0xb0>)
 8004320:	2200      	movs	r2, #0
 8004322:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004324:	4b17      	ldr	r3, [pc, #92]	; (8004384 <MX_ADC_Init+0xb0>)
 8004326:	22c2      	movs	r2, #194	; 0xc2
 8004328:	32ff      	adds	r2, #255	; 0xff
 800432a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800432c:	4b15      	ldr	r3, [pc, #84]	; (8004384 <MX_ADC_Init+0xb0>)
 800432e:	2200      	movs	r2, #0
 8004330:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <MX_ADC_Init+0xb0>)
 8004334:	2224      	movs	r2, #36	; 0x24
 8004336:	2100      	movs	r1, #0
 8004338:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800433a:	4b12      	ldr	r3, [pc, #72]	; (8004384 <MX_ADC_Init+0xb0>)
 800433c:	2201      	movs	r2, #1
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004340:	4b10      	ldr	r3, [pc, #64]	; (8004384 <MX_ADC_Init+0xb0>)
 8004342:	0018      	movs	r0, r3
 8004344:	f001 f87c 	bl	8005440 <HAL_ADC_Init>
 8004348:	1e03      	subs	r3, r0, #0
 800434a:	d001      	beq.n	8004350 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800434c:	f000 f8f4 	bl	8004538 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004350:	1d3b      	adds	r3, r7, #4
 8004352:	2208      	movs	r2, #8
 8004354:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	2280      	movs	r2, #128	; 0x80
 800435a:	0152      	lsls	r2, r2, #5
 800435c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	2280      	movs	r2, #128	; 0x80
 8004362:	0552      	lsls	r2, r2, #21
 8004364:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004366:	1d3a      	adds	r2, r7, #4
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <MX_ADC_Init+0xb0>)
 800436a:	0011      	movs	r1, r2
 800436c:	0018      	movs	r0, r3
 800436e:	f001 fa07 	bl	8005780 <HAL_ADC_ConfigChannel>
 8004372:	1e03      	subs	r3, r0, #0
 8004374:	d001      	beq.n	800437a <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 8004376:	f000 f8df 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	46bd      	mov	sp, r7
 800437e:	b004      	add	sp, #16
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	2000005c 	.word	0x2000005c
 8004388:	40012400 	.word	0x40012400

0800438c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004390:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <MX_SPI1_Init+0x74>)
 8004392:	4a1c      	ldr	r2, [pc, #112]	; (8004404 <MX_SPI1_Init+0x78>)
 8004394:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <MX_SPI1_Init+0x74>)
 8004398:	2282      	movs	r2, #130	; 0x82
 800439a:	0052      	lsls	r2, r2, #1
 800439c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800439e:	4b18      	ldr	r3, [pc, #96]	; (8004400 <MX_SPI1_Init+0x74>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80043a4:	4b16      	ldr	r3, [pc, #88]	; (8004400 <MX_SPI1_Init+0x74>)
 80043a6:	22e0      	movs	r2, #224	; 0xe0
 80043a8:	00d2      	lsls	r2, r2, #3
 80043aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <MX_SPI1_Init+0x74>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80043b2:	4b13      	ldr	r3, [pc, #76]	; (8004400 <MX_SPI1_Init+0x74>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80043b8:	4b11      	ldr	r3, [pc, #68]	; (8004400 <MX_SPI1_Init+0x74>)
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	0092      	lsls	r2, r2, #2
 80043be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80043c0:	4b0f      	ldr	r3, [pc, #60]	; (8004400 <MX_SPI1_Init+0x74>)
 80043c2:	2208      	movs	r2, #8
 80043c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043c6:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <MX_SPI1_Init+0x74>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80043cc:	4b0c      	ldr	r3, [pc, #48]	; (8004400 <MX_SPI1_Init+0x74>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <MX_SPI1_Init+0x74>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80043d8:	4b09      	ldr	r3, [pc, #36]	; (8004400 <MX_SPI1_Init+0x74>)
 80043da:	2207      	movs	r2, #7
 80043dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <MX_SPI1_Init+0x74>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80043e4:	4b06      	ldr	r3, [pc, #24]	; (8004400 <MX_SPI1_Init+0x74>)
 80043e6:	2208      	movs	r2, #8
 80043e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043ea:	4b05      	ldr	r3, [pc, #20]	; (8004400 <MX_SPI1_Init+0x74>)
 80043ec:	0018      	movs	r0, r3
 80043ee:	f002 f9e3 	bl	80067b8 <HAL_SPI_Init>
 80043f2:	1e03      	subs	r3, r0, #0
 80043f4:	d001      	beq.n	80043fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80043f6:	f000 f89f 	bl	8004538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}
 8004400:	2000009c 	.word	0x2000009c
 8004404:	40013000 	.word	0x40013000

08004408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004408:	b590      	push	{r4, r7, lr}
 800440a:	b08b      	sub	sp, #44	; 0x2c
 800440c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800440e:	2414      	movs	r4, #20
 8004410:	193b      	adds	r3, r7, r4
 8004412:	0018      	movs	r0, r3
 8004414:	2314      	movs	r3, #20
 8004416:	001a      	movs	r2, r3
 8004418:	2100      	movs	r1, #0
 800441a:	f002 fd7f 	bl	8006f1c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800441e:	4b42      	ldr	r3, [pc, #264]	; (8004528 <MX_GPIO_Init+0x120>)
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	4b41      	ldr	r3, [pc, #260]	; (8004528 <MX_GPIO_Init+0x120>)
 8004424:	2180      	movs	r1, #128	; 0x80
 8004426:	0309      	lsls	r1, r1, #12
 8004428:	430a      	orrs	r2, r1
 800442a:	615a      	str	r2, [r3, #20]
 800442c:	4b3e      	ldr	r3, [pc, #248]	; (8004528 <MX_GPIO_Init+0x120>)
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	031b      	lsls	r3, r3, #12
 8004434:	4013      	ands	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
 8004438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800443a:	4b3b      	ldr	r3, [pc, #236]	; (8004528 <MX_GPIO_Init+0x120>)
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	4b3a      	ldr	r3, [pc, #232]	; (8004528 <MX_GPIO_Init+0x120>)
 8004440:	2180      	movs	r1, #128	; 0x80
 8004442:	03c9      	lsls	r1, r1, #15
 8004444:	430a      	orrs	r2, r1
 8004446:	615a      	str	r2, [r3, #20]
 8004448:	4b37      	ldr	r3, [pc, #220]	; (8004528 <MX_GPIO_Init+0x120>)
 800444a:	695a      	ldr	r2, [r3, #20]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	03db      	lsls	r3, r3, #15
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004456:	4b34      	ldr	r3, [pc, #208]	; (8004528 <MX_GPIO_Init+0x120>)
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	4b33      	ldr	r3, [pc, #204]	; (8004528 <MX_GPIO_Init+0x120>)
 800445c:	2180      	movs	r1, #128	; 0x80
 800445e:	0289      	lsls	r1, r1, #10
 8004460:	430a      	orrs	r2, r1
 8004462:	615a      	str	r2, [r3, #20]
 8004464:	4b30      	ldr	r3, [pc, #192]	; (8004528 <MX_GPIO_Init+0x120>)
 8004466:	695a      	ldr	r2, [r3, #20]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	029b      	lsls	r3, r3, #10
 800446c:	4013      	ands	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004472:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <MX_GPIO_Init+0x120>)
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	4b2c      	ldr	r3, [pc, #176]	; (8004528 <MX_GPIO_Init+0x120>)
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	02c9      	lsls	r1, r1, #11
 800447c:	430a      	orrs	r2, r1
 800447e:	615a      	str	r2, [r3, #20]
 8004480:	4b29      	ldr	r3, [pc, #164]	; (8004528 <MX_GPIO_Init+0x120>)
 8004482:	695a      	ldr	r2, [r3, #20]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	02db      	lsls	r3, r3, #11
 8004488:	4013      	ands	r3, r2
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_AD_Pin|ST7735_RESET_Pin|ST7735_CS_Pin, GPIO_PIN_RESET);
 800448e:	4927      	ldr	r1, [pc, #156]	; (800452c <MX_GPIO_Init+0x124>)
 8004490:	4b27      	ldr	r3, [pc, #156]	; (8004530 <MX_GPIO_Init+0x128>)
 8004492:	2200      	movs	r2, #0
 8004494:	0018      	movs	r0, r3
 8004496:	f001 fd2e 	bl	8005ef6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UP_Pin DOWN_Pin SEL_Pin */
  GPIO_InitStruct.Pin = UP_Pin|DOWN_Pin|SEL_Pin;
 800449a:	193b      	adds	r3, r7, r4
 800449c:	22e0      	movs	r2, #224	; 0xe0
 800449e:	0212      	lsls	r2, r2, #8
 80044a0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044a2:	193b      	adds	r3, r7, r4
 80044a4:	2200      	movs	r2, #0
 80044a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a8:	193b      	adds	r3, r7, r4
 80044aa:	2200      	movs	r2, #0
 80044ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ae:	193b      	adds	r3, r7, r4
 80044b0:	4a20      	ldr	r2, [pc, #128]	; (8004534 <MX_GPIO_Init+0x12c>)
 80044b2:	0019      	movs	r1, r3
 80044b4:	0010      	movs	r0, r2
 80044b6:	f001 fb91 	bl	8005bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
  GPIO_InitStruct.Pin = LEFT_Pin|RIGHT_Pin;
 80044ba:	193b      	adds	r3, r7, r4
 80044bc:	2203      	movs	r2, #3
 80044be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044c0:	193b      	adds	r3, r7, r4
 80044c2:	2200      	movs	r2, #0
 80044c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c6:	193b      	adds	r3, r7, r4
 80044c8:	2200      	movs	r2, #0
 80044ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044cc:	193a      	adds	r2, r7, r4
 80044ce:	2390      	movs	r3, #144	; 0x90
 80044d0:	05db      	lsls	r3, r3, #23
 80044d2:	0011      	movs	r1, r2
 80044d4:	0018      	movs	r0, r3
 80044d6:	f001 fb81 	bl	8005bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_AD_Pin ST7735_RESET_Pin ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_AD_Pin|ST7735_RESET_Pin|ST7735_CS_Pin;
 80044da:	193b      	adds	r3, r7, r4
 80044dc:	4a13      	ldr	r2, [pc, #76]	; (800452c <MX_GPIO_Init+0x124>)
 80044de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044e0:	193b      	adds	r3, r7, r4
 80044e2:	2201      	movs	r2, #1
 80044e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e6:	193b      	adds	r3, r7, r4
 80044e8:	2200      	movs	r2, #0
 80044ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044ec:	193b      	adds	r3, r7, r4
 80044ee:	2200      	movs	r2, #0
 80044f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044f2:	193b      	adds	r3, r7, r4
 80044f4:	4a0e      	ldr	r2, [pc, #56]	; (8004530 <MX_GPIO_Init+0x128>)
 80044f6:	0019      	movs	r1, r3
 80044f8:	0010      	movs	r0, r2
 80044fa:	f001 fb6f 	bl	8005bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OPAMP_CALIB_Pin */
  GPIO_InitStruct.Pin = OPAMP_CALIB_Pin;
 80044fe:	0021      	movs	r1, r4
 8004500:	187b      	adds	r3, r7, r1
 8004502:	2280      	movs	r2, #128	; 0x80
 8004504:	0152      	lsls	r2, r2, #5
 8004506:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004508:	187b      	adds	r3, r7, r1
 800450a:	2200      	movs	r2, #0
 800450c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800450e:	187b      	adds	r3, r7, r1
 8004510:	2201      	movs	r2, #1
 8004512:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(OPAMP_CALIB_GPIO_Port, &GPIO_InitStruct);
 8004514:	187b      	adds	r3, r7, r1
 8004516:	4a06      	ldr	r2, [pc, #24]	; (8004530 <MX_GPIO_Init+0x128>)
 8004518:	0019      	movs	r1, r3
 800451a:	0010      	movs	r0, r2
 800451c:	f001 fb5e 	bl	8005bdc <HAL_GPIO_Init>

}
 8004520:	46c0      	nop			; (mov r8, r8)
 8004522:	46bd      	mov	sp, r7
 8004524:	b00b      	add	sp, #44	; 0x2c
 8004526:	bd90      	pop	{r4, r7, pc}
 8004528:	40021000 	.word	0x40021000
 800452c:	00000406 	.word	0x00000406
 8004530:	48000400 	.word	0x48000400
 8004534:	48000800 	.word	0x48000800

08004538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800453c:	b672      	cpsid	i
}
 800453e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004540:	e7fe      	b.n	8004540 <Error_Handler+0x8>
	...

08004544 <pHMeter_process>:
/*
 *  @ Function; pHMeter_process()
 *  @ Description; handles the screen views
 */
void pHMeter_process(void)
{
 8004544:	b590      	push	{r4, r7, lr}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0

	uint8_t pageChanged = 0;
 800454a:	1dfb      	adds	r3, r7, #7
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]

	if(first)
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <pHMeter_process+0x60>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <pHMeter_process+0x18>
		idlePage();
 8004558:	f000 f8d0 	bl	80046fc <idlePage>

	// Get a new pH value
	pH_read();
 800455c:	f000 f826 	bl	80045ac <pH_read>

    // New pH status evaluation
	pHStatus_update();
 8004560:	f000 faf8 	bl	8004b54 <pHStatus_update>

	// New process status evaluation
	pageChanged = processStatus_update();
 8004564:	1dfc      	adds	r4, r7, #7
 8004566:	f000 fac9 	bl	8004afc <processStatus_update>
 800456a:	0003      	movs	r3, r0
 800456c:	7023      	strb	r3, [r4, #0]

	switch(process_status)
 800456e:	4b0e      	ldr	r3, [pc, #56]	; (80045a8 <pHMeter_process+0x64>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d005      	beq.n	8004582 <pHMeter_process+0x3e>
	{

		default:
		case MAIN_PROCESS:

			mainPage(pageChanged);
 8004576:	1dfb      	adds	r3, r7, #7
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	0018      	movs	r0, r3
 800457c:	f000 f936 	bl	80047ec <mainPage>

			break;
 8004580:	e005      	b.n	800458e <pHMeter_process+0x4a>

		case CIRCUIT_CALIBRATION:

			circuitCalibPage(pageChanged);
 8004582:	1dfb      	adds	r3, r7, #7
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	0018      	movs	r0, r3
 8004588:	f000 f9c0 	bl	800490c <circuitCalibPage>

			break;
 800458c:	46c0      	nop			; (mov r8, r8)

	}


	if(first == 1)
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <pHMeter_process+0x60>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d102      	bne.n	800459c <pHMeter_process+0x58>
		first = 0;
 8004596:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <pHMeter_process+0x60>)
 8004598:	2200      	movs	r2, #0
 800459a:	701a      	strb	r2, [r3, #0]

}
 800459c:	46c0      	nop			; (mov r8, r8)
 800459e:	46bd      	mov	sp, r7
 80045a0:	b003      	add	sp, #12
 80045a2:	bd90      	pop	{r4, r7, pc}
 80045a4:	20000018 	.word	0x20000018
 80045a8:	20000020 	.word	0x20000020

080045ac <pH_read>:
 *  @ Function; pH_read()
 *  @ Description; read a new pH value from the probe
 *  @ every PH_PROCESS_DELAY seconds
 */
void pH_read(void)
{
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0

	uint32_t rawAdcData;
	float rawAdcmV;
	float pHValue = 0.0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]

	static float buff[6] = {0};
	static uint32_t count = 0;

	if(getDelayMs(pHTimeStamp) < PH_PROCESS_DELAY)
 80045b6:	4b46      	ldr	r3, [pc, #280]	; (80046d0 <pH_read+0x124>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 fd8a 	bl	80050d4 <getDelayMs>
 80045c0:	0002      	movs	r2, r0
 80045c2:	23fa      	movs	r3, #250	; 0xfa
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d200      	bcs.n	80045cc <pH_read+0x20>
 80045ca:	e07c      	b.n	80046c6 <pH_read+0x11a>
		return;

	pHTimeStamp = getTimeMs();
 80045cc:	f000 fd76 	bl	80050bc <getTimeMs>
 80045d0:	0002      	movs	r2, r0
 80045d2:	4b3f      	ldr	r3, [pc, #252]	; (80046d0 <pH_read+0x124>)
 80045d4:	601a      	str	r2, [r3, #0]

	rawAdcData = HAL_ADC_GetValue(&hadc);
 80045d6:	4b3f      	ldr	r3, [pc, #252]	; (80046d4 <pH_read+0x128>)
 80045d8:	0018      	movs	r0, r3
 80045da:	f001 f8c5 	bl	8005768 <HAL_ADC_GetValue>
 80045de:	0003      	movs	r3, r0
 80045e0:	607b      	str	r3, [r7, #4]

	rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fe faa6 	bl	8002b34 <__aeabi_ui2d>
 80045e8:	4a3b      	ldr	r2, [pc, #236]	; (80046d8 <pH_read+0x12c>)
 80045ea:	4b3c      	ldr	r3, [pc, #240]	; (80046dc <pH_read+0x130>)
 80045ec:	f7fd fc3e 	bl	8001e6c <__aeabi_dmul>
 80045f0:	0002      	movs	r2, r0
 80045f2:	000b      	movs	r3, r1
 80045f4:	0010      	movs	r0, r2
 80045f6:	0019      	movs	r1, r3
 80045f8:	f7fe fb0a 	bl	8002c10 <__aeabi_d2f>
 80045fc:	1c03      	adds	r3, r0, #0
 80045fe:	603b      	str	r3, [r7, #0]

	buff[count%6] = ( ( PH_V_SLOPE * ( rawAdcmV - V_OFFSET ) ) + PH_OFFSET );
 8004600:	6838      	ldr	r0, [r7, #0]
 8004602:	f7fe fabd 	bl	8002b80 <__aeabi_f2d>
 8004606:	2200      	movs	r2, #0
 8004608:	4b35      	ldr	r3, [pc, #212]	; (80046e0 <pH_read+0x134>)
 800460a:	f7fd fe9b 	bl	8002344 <__aeabi_dsub>
 800460e:	0002      	movs	r2, r0
 8004610:	000b      	movs	r3, r1
 8004612:	0010      	movs	r0, r2
 8004614:	0019      	movs	r1, r3
 8004616:	2200      	movs	r2, #0
 8004618:	4b32      	ldr	r3, [pc, #200]	; (80046e4 <pH_read+0x138>)
 800461a:	f7fd fc27 	bl	8001e6c <__aeabi_dmul>
 800461e:	0002      	movs	r2, r0
 8004620:	000b      	movs	r3, r1
 8004622:	0010      	movs	r0, r2
 8004624:	0019      	movs	r1, r3
 8004626:	2200      	movs	r2, #0
 8004628:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <pH_read+0x13c>)
 800462a:	f7fc fded 	bl	8001208 <__aeabi_dadd>
 800462e:	0002      	movs	r2, r0
 8004630:	000b      	movs	r3, r1
 8004632:	0014      	movs	r4, r2
 8004634:	001d      	movs	r5, r3
 8004636:	4b2d      	ldr	r3, [pc, #180]	; (80046ec <pH_read+0x140>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2106      	movs	r1, #6
 800463c:	0018      	movs	r0, r3
 800463e:	f7fb fde7 	bl	8000210 <__aeabi_uidivmod>
 8004642:	000b      	movs	r3, r1
 8004644:	001e      	movs	r6, r3
 8004646:	0020      	movs	r0, r4
 8004648:	0029      	movs	r1, r5
 800464a:	f7fe fae1 	bl	8002c10 <__aeabi_d2f>
 800464e:	1c01      	adds	r1, r0, #0
 8004650:	4b27      	ldr	r3, [pc, #156]	; (80046f0 <pH_read+0x144>)
 8004652:	00b2      	lsls	r2, r6, #2
 8004654:	50d1      	str	r1, [r2, r3]

	pHValue = buff[count%6];
 8004656:	4b25      	ldr	r3, [pc, #148]	; (80046ec <pH_read+0x140>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2106      	movs	r1, #6
 800465c:	0018      	movs	r0, r3
 800465e:	f7fb fdd7 	bl	8000210 <__aeabi_uidivmod>
 8004662:	000b      	movs	r3, r1
 8004664:	001a      	movs	r2, r3
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <pH_read+0x144>)
 8004668:	0092      	lsls	r2, r2, #2
 800466a:	58d3      	ldr	r3, [r2, r3]
 800466c:	60fb      	str	r3, [r7, #12]

	count++;
 800466e:	4b1f      	ldr	r3, [pc, #124]	; (80046ec <pH_read+0x140>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <pH_read+0x140>)
 8004676:	601a      	str	r2, [r3, #0]

	if(count >= 6)
 8004678:	4b1c      	ldr	r3, [pc, #112]	; (80046ec <pH_read+0x140>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b05      	cmp	r3, #5
 800467e:	d91a      	bls.n	80046b6 <pH_read+0x10a>
	{

		pHValue = 0.0;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
		for(int i = 0 ; i < 6 ; i++)
 8004684:	2300      	movs	r3, #0
 8004686:	60bb      	str	r3, [r7, #8]
 8004688:	e00c      	b.n	80046a4 <pH_read+0xf8>
			pHValue += buff[i];
 800468a:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <pH_read+0x144>)
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	0092      	lsls	r2, r2, #2
 8004690:	58d3      	ldr	r3, [r2, r3]
 8004692:	1c19      	adds	r1, r3, #0
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f7fb ff1b 	bl	80004d0 <__aeabi_fadd>
 800469a:	1c03      	adds	r3, r0, #0
 800469c:	60fb      	str	r3, [r7, #12]
		for(int i = 0 ; i < 6 ; i++)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60bb      	str	r3, [r7, #8]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b05      	cmp	r3, #5
 80046a8:	ddef      	ble.n	800468a <pH_read+0xde>

		pHValue = ( pHValue / 6.0 );
 80046aa:	4912      	ldr	r1, [pc, #72]	; (80046f4 <pH_read+0x148>)
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f7fc f8ad 	bl	800080c <__aeabi_fdiv>
 80046b2:	1c03      	adds	r3, r0, #0
 80046b4:	60fb      	str	r3, [r7, #12]

	}

	pH_current = pHValue;
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <pH_read+0x14c>)
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start(&hadc);
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <pH_read+0x128>)
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 fffe 	bl	80056c0 <HAL_ADC_Start>
 80046c4:	e000      	b.n	80046c8 <pH_read+0x11c>
		return;
 80046c6:	46c0      	nop			; (mov r8, r8)

}
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b005      	add	sp, #20
 80046cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	20000100 	.word	0x20000100
 80046d4:	2000005c 	.word	0x2000005c
 80046d8:	66666666 	.word	0x66666666
 80046dc:	3f4a6666 	.word	0x3f4a6666
 80046e0:	3ff40000 	.word	0x3ff40000
 80046e4:	c02e0000 	.word	0xc02e0000
 80046e8:	401c0000 	.word	0x401c0000
 80046ec:	20000104 	.word	0x20000104
 80046f0:	20000108 	.word	0x20000108
 80046f4:	40c00000 	.word	0x40c00000
 80046f8:	2000001c 	.word	0x2000001c

080046fc <idlePage>:
/*
 * 	@ Function: st7735_hallScreen
 * 	@ Description: Presentation screen
 */
void idlePage(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af04      	add	r7, sp, #16

	  ST7735_SetRotation(1);
 8004702:	2001      	movs	r0, #1
 8004704:	f7ff fabe 	bl	8003c84 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "UnNatural presents", Font_7x10, WHITE,BLACK);
 8004708:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <idlePage+0xd4>)
 800470a:	4832      	ldr	r0, [pc, #200]	; (80047d4 <idlePage+0xd8>)
 800470c:	2200      	movs	r2, #0
 800470e:	9202      	str	r2, [sp, #8]
 8004710:	4a31      	ldr	r2, [pc, #196]	; (80047d8 <idlePage+0xdc>)
 8004712:	9201      	str	r2, [sp, #4]
 8004714:	466a      	mov	r2, sp
 8004716:	6859      	ldr	r1, [r3, #4]
 8004718:	6011      	str	r1, [r2, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	0002      	movs	r2, r0
 800471e:	2100      	movs	r1, #0
 8004720:	2000      	movs	r0, #0
 8004722:	f7ff fc23 	bl	8003f6c <ST7735_WriteString>
	  HAL_Delay(1000);
 8004726:	23fa      	movs	r3, #250	; 0xfa
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	0018      	movs	r0, r3
 800472c:	f000 fe64 	bl	80053f8 <HAL_Delay>
	  fillScreen(BLACK);
 8004730:	2000      	movs	r0, #0
 8004732:	f7ff f933 	bl	800399c <fillScreen>

	  ST7735_SetRotation(1);
 8004736:	2001      	movs	r0, #1
 8004738:	f7ff faa4 	bl	8003c84 <ST7735_SetRotation>
	  ST7735_WriteString(20, 50, "pH-METER V0", Font_11x18, GREEN,BLACK);
 800473c:	4b27      	ldr	r3, [pc, #156]	; (80047dc <idlePage+0xe0>)
 800473e:	4828      	ldr	r0, [pc, #160]	; (80047e0 <idlePage+0xe4>)
 8004740:	2200      	movs	r2, #0
 8004742:	9202      	str	r2, [sp, #8]
 8004744:	22fc      	movs	r2, #252	; 0xfc
 8004746:	00d2      	lsls	r2, r2, #3
 8004748:	9201      	str	r2, [sp, #4]
 800474a:	466a      	mov	r2, sp
 800474c:	6859      	ldr	r1, [r3, #4]
 800474e:	6011      	str	r1, [r2, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	0002      	movs	r2, r0
 8004754:	2132      	movs	r1, #50	; 0x32
 8004756:	2014      	movs	r0, #20
 8004758:	f7ff fc08 	bl	8003f6c <ST7735_WriteString>
	  HAL_Delay(1000);
 800475c:	23fa      	movs	r3, #250	; 0xfa
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	0018      	movs	r0, r3
 8004762:	f000 fe49 	bl	80053f8 <HAL_Delay>
	  fillScreen(BLACK);
 8004766:	2000      	movs	r0, #0
 8004768:	f7ff f918 	bl	800399c <fillScreen>

	  ST7735_SetRotation(1);
 800476c:	2001      	movs	r0, #1
 800476e:	f7ff fa89 	bl	8003c84 <ST7735_SetRotation>
	  ST7735_WriteString(0, 0, "A product developed by", Font_7x10, WHITE,BLACK);
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <idlePage+0xd4>)
 8004774:	481b      	ldr	r0, [pc, #108]	; (80047e4 <idlePage+0xe8>)
 8004776:	2200      	movs	r2, #0
 8004778:	9202      	str	r2, [sp, #8]
 800477a:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <idlePage+0xdc>)
 800477c:	9201      	str	r2, [sp, #4]
 800477e:	466a      	mov	r2, sp
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	6011      	str	r1, [r2, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	0002      	movs	r2, r0
 8004788:	2100      	movs	r1, #0
 800478a:	2000      	movs	r0, #0
 800478c:	f7ff fbee 	bl	8003f6c <ST7735_WriteString>
	  HAL_Delay(1000);
 8004790:	23fa      	movs	r3, #250	; 0xfa
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	0018      	movs	r0, r3
 8004796:	f000 fe2f 	bl	80053f8 <HAL_Delay>
	  ST7735_WriteString(20, 50, "Eng. Andrea", Font_11x18, GREEN,BLACK);
 800479a:	4b10      	ldr	r3, [pc, #64]	; (80047dc <idlePage+0xe0>)
 800479c:	4812      	ldr	r0, [pc, #72]	; (80047e8 <idlePage+0xec>)
 800479e:	2200      	movs	r2, #0
 80047a0:	9202      	str	r2, [sp, #8]
 80047a2:	22fc      	movs	r2, #252	; 0xfc
 80047a4:	00d2      	lsls	r2, r2, #3
 80047a6:	9201      	str	r2, [sp, #4]
 80047a8:	466a      	mov	r2, sp
 80047aa:	6859      	ldr	r1, [r3, #4]
 80047ac:	6011      	str	r1, [r2, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	0002      	movs	r2, r0
 80047b2:	2132      	movs	r1, #50	; 0x32
 80047b4:	2014      	movs	r0, #20
 80047b6:	f7ff fbd9 	bl	8003f6c <ST7735_WriteString>
	  HAL_Delay(1000);
 80047ba:	23fa      	movs	r3, #250	; 0xfa
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	0018      	movs	r0, r3
 80047c0:	f000 fe1a 	bl	80053f8 <HAL_Delay>
	  fillScreen(BLACK);
 80047c4:	2000      	movs	r0, #0
 80047c6:	f7ff f8e9 	bl	800399c <fillScreen>

}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000000 	.word	0x20000000
 80047d4:	08006f44 	.word	0x08006f44
 80047d8:	0000ffff 	.word	0x0000ffff
 80047dc:	20000008 	.word	0x20000008
 80047e0:	08006f58 	.word	0x08006f58
 80047e4:	08006f64 	.word	0x08006f64
 80047e8:	08006f7c 	.word	0x08006f7c

080047ec <mainPage>:
 *  @ Function; mainPage
 *  @ Description; This is the main page where the current
 *  @ value of pH is shown
 */
void mainPage(uint8_t updatePage)
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b089      	sub	sp, #36	; 0x24
 80047f0:	af04      	add	r7, sp, #16
 80047f2:	0002      	movs	r2, r0
 80047f4:	1dfb      	adds	r3, r7, #7
 80047f6:	701a      	strb	r2, [r3, #0]

	static PH_STATUS main_pH_status = IDLE;
	static uint16_t mainColor = GREEN;


	if( ( updatePage == 1 ) || ( pH_status != main_pH_status ) )
 80047f8:	1dfb      	adds	r3, r7, #7
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d005      	beq.n	800480c <mainPage+0x20>
 8004800:	4b3a      	ldr	r3, [pc, #232]	; (80048ec <mainPage+0x100>)
 8004802:	781a      	ldrb	r2, [r3, #0]
 8004804:	4b3a      	ldr	r3, [pc, #232]	; (80048f0 <mainPage+0x104>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d04e      	beq.n	80048aa <mainPage+0xbe>
	{

		switch(pH_status)
 800480c:	4b37      	ldr	r3, [pc, #220]	; (80048ec <mainPage+0x100>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b05      	cmp	r3, #5
 8004812:	d016      	beq.n	8004842 <mainPage+0x56>
 8004814:	dc06      	bgt.n	8004824 <mainPage+0x38>
 8004816:	2b04      	cmp	r3, #4
 8004818:	d021      	beq.n	800485e <mainPage+0x72>
 800481a:	dc03      	bgt.n	8004824 <mainPage+0x38>
 800481c:	2b01      	cmp	r3, #1
 800481e:	d038      	beq.n	8004892 <mainPage+0xa6>
 8004820:	2b02      	cmp	r3, #2
 8004822:	d02a      	beq.n	800487a <mainPage+0x8e>
		{

			default:
			case NEUTRAL:

				main_pH_status = NEUTRAL;
 8004824:	4b32      	ldr	r3, [pc, #200]	; (80048f0 <mainPage+0x104>)
 8004826:	2203      	movs	r2, #3
 8004828:	701a      	strb	r2, [r3, #0]

				fillScreen(GREEN);
 800482a:	23fc      	movs	r3, #252	; 0xfc
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	0018      	movs	r0, r3
 8004830:	f7ff f8b4 	bl	800399c <fillScreen>
				mainPage_graphics();
 8004834:	f000 f9e4 	bl	8004c00 <mainPage_graphics>

				mainColor = GREEN;
 8004838:	4b2e      	ldr	r3, [pc, #184]	; (80048f4 <mainPage+0x108>)
 800483a:	22fc      	movs	r2, #252	; 0xfc
 800483c:	00d2      	lsls	r2, r2, #3
 800483e:	801a      	strh	r2, [r3, #0]

				break;
 8004840:	e034      	b.n	80048ac <mainPage+0xc0>

			case STRONG_ACID:

				main_pH_status = STRONG_ACID;
 8004842:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <mainPage+0x104>)
 8004844:	2205      	movs	r2, #5
 8004846:	701a      	strb	r2, [r3, #0]

				fillScreen(RED);
 8004848:	23f8      	movs	r3, #248	; 0xf8
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	0018      	movs	r0, r3
 800484e:	f7ff f8a5 	bl	800399c <fillScreen>
				mainPage_graphics();
 8004852:	f000 f9d5 	bl	8004c00 <mainPage_graphics>

				mainColor = RED;
 8004856:	4b27      	ldr	r3, [pc, #156]	; (80048f4 <mainPage+0x108>)
 8004858:	4a27      	ldr	r2, [pc, #156]	; (80048f8 <mainPage+0x10c>)
 800485a:	801a      	strh	r2, [r3, #0]

				break;
 800485c:	e026      	b.n	80048ac <mainPage+0xc0>

			case ACID:

				main_pH_status = ACID;
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <mainPage+0x104>)
 8004860:	2204      	movs	r2, #4
 8004862:	701a      	strb	r2, [r3, #0]

				fillScreen(YELLOW);
 8004864:	4b25      	ldr	r3, [pc, #148]	; (80048fc <mainPage+0x110>)
 8004866:	0018      	movs	r0, r3
 8004868:	f7ff f898 	bl	800399c <fillScreen>
				mainPage_graphics();
 800486c:	f000 f9c8 	bl	8004c00 <mainPage_graphics>

				mainColor = YELLOW;
 8004870:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <mainPage+0x108>)
 8004872:	2220      	movs	r2, #32
 8004874:	4252      	negs	r2, r2
 8004876:	801a      	strh	r2, [r3, #0]

				break;
 8004878:	e018      	b.n	80048ac <mainPage+0xc0>

			case BASE:

				main_pH_status = BASE;
 800487a:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <mainPage+0x104>)
 800487c:	2202      	movs	r2, #2
 800487e:	701a      	strb	r2, [r3, #0]

				fillScreen(BLUE);
 8004880:	20ff      	movs	r0, #255	; 0xff
 8004882:	f7ff f88b 	bl	800399c <fillScreen>
				mainPage_graphics();
 8004886:	f000 f9bb 	bl	8004c00 <mainPage_graphics>

				mainColor = BLUE;
 800488a:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <mainPage+0x108>)
 800488c:	22ff      	movs	r2, #255	; 0xff
 800488e:	801a      	strh	r2, [r3, #0]

				break;
 8004890:	e00c      	b.n	80048ac <mainPage+0xc0>

			case STRONG_BASE:

				main_pH_status = STRONG_BASE;
 8004892:	4b17      	ldr	r3, [pc, #92]	; (80048f0 <mainPage+0x104>)
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]

				fillScreen(DARK_BLUE);
 8004898:	201f      	movs	r0, #31
 800489a:	f7ff f87f 	bl	800399c <fillScreen>
				mainPage_graphics();
 800489e:	f000 f9af 	bl	8004c00 <mainPage_graphics>

				mainColor = DARK_BLUE;
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <mainPage+0x108>)
 80048a4:	221f      	movs	r2, #31
 80048a6:	801a      	strh	r2, [r3, #0]

				break;
 80048a8:	e000      	b.n	80048ac <mainPage+0xc0>

		}

	}
 80048aa:	46c0      	nop			; (mov r8, r8)

	char pHstring[6];

	floatToString(pH_current, pHstring);
 80048ac:	4b14      	ldr	r3, [pc, #80]	; (8004900 <mainPage+0x114>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2408      	movs	r4, #8
 80048b2:	193a      	adds	r2, r7, r4
 80048b4:	0011      	movs	r1, r2
 80048b6:	1c18      	adds	r0, r3, #0
 80048b8:	f000 fc2a 	bl	8005110 <floatToString>

	ST7735_SetRotation(1);
 80048bc:	2001      	movs	r0, #1
 80048be:	f7ff f9e1 	bl	8003c84 <ST7735_SetRotation>
	ST7735_WriteString(40, 50, pHstring, Font_16x26, WHITE, mainColor);
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <mainPage+0x108>)
 80048c4:	881a      	ldrh	r2, [r3, #0]
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <mainPage+0x118>)
 80048c8:	1938      	adds	r0, r7, r4
 80048ca:	9202      	str	r2, [sp, #8]
 80048cc:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <mainPage+0x11c>)
 80048ce:	9201      	str	r2, [sp, #4]
 80048d0:	466a      	mov	r2, sp
 80048d2:	6859      	ldr	r1, [r3, #4]
 80048d4:	6011      	str	r1, [r2, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	0002      	movs	r2, r0
 80048da:	2132      	movs	r1, #50	; 0x32
 80048dc:	2028      	movs	r0, #40	; 0x28
 80048de:	f7ff fb45 	bl	8003f6c <ST7735_WriteString>

}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	46bd      	mov	sp, r7
 80048e6:	b005      	add	sp, #20
 80048e8:	bd90      	pop	{r4, r7, pc}
 80048ea:	46c0      	nop			; (mov r8, r8)
 80048ec:	20000021 	.word	0x20000021
 80048f0:	20000120 	.word	0x20000120
 80048f4:	20000022 	.word	0x20000022
 80048f8:	fffff800 	.word	0xfffff800
 80048fc:	0000ffe0 	.word	0x0000ffe0
 8004900:	2000001c 	.word	0x2000001c
 8004904:	20000010 	.word	0x20000010
 8004908:	0000ffff 	.word	0x0000ffff

0800490c <circuitCalibPage>:
 *  @ Function; circuitCalibPage
 *  @ Description; When user push left button, this page
 *  @ indicates the OPAMP calibration
 */
void circuitCalibPage(uint8_t updatePage)
{
 800490c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800490e:	b08b      	sub	sp, #44	; 0x2c
 8004910:	af02      	add	r7, sp, #8
 8004912:	0002      	movs	r2, r0
 8004914:	1dfb      	adds	r3, r7, #7
 8004916:	701a      	strb	r2, [r3, #0]

	static float hLineBuff[6] = {0};
	static uint32_t hLineCount = 0;
	static uint32_t hLine_old = 128;

	uint16_t indicatorsColor = RED;
 8004918:	231e      	movs	r3, #30
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	4a6b      	ldr	r2, [pc, #428]	; (8004acc <circuitCalibPage+0x1c0>)
 800491e:	801a      	strh	r2, [r3, #0]

	uint16_t rawAdcData = 128;
 8004920:	2312      	movs	r3, #18
 8004922:	18fb      	adds	r3, r7, r3
 8004924:	2280      	movs	r2, #128	; 0x80
 8004926:	801a      	strh	r2, [r3, #0]
	uint32_t hLine = 128;
 8004928:	2380      	movs	r3, #128	; 0x80
 800492a:	61bb      	str	r3, [r7, #24]
	float rawAdcmV = 0.0;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]


	if(updatePage == 1)
 8004930:	1dfb      	adds	r3, r7, #7
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d109      	bne.n	800494c <circuitCalibPage+0x40>
	{

		fillScreen(BLACK);
 8004938:	2000      	movs	r0, #0
 800493a:	f7ff f82f 	bl	800399c <fillScreen>
		circuitCalibPage_graphics();
 800493e:	f000 f96d 	bl	8004c1c <circuitCalibPage_graphics>

		HAL_ADC_Start(&hadc);
 8004942:	4b63      	ldr	r3, [pc, #396]	; (8004ad0 <circuitCalibPage+0x1c4>)
 8004944:	0018      	movs	r0, r3
 8004946:	f000 febb 	bl	80056c0 <HAL_ADC_Start>

		return;
 800494a:	e0bc      	b.n	8004ac6 <circuitCalibPage+0x1ba>

	}

	rawAdcData = HAL_ADC_GetValue(&hadc);
 800494c:	4b60      	ldr	r3, [pc, #384]	; (8004ad0 <circuitCalibPage+0x1c4>)
 800494e:	0018      	movs	r0, r3
 8004950:	f000 ff0a 	bl	8005768 <HAL_ADC_GetValue>
 8004954:	0002      	movs	r2, r0
 8004956:	2112      	movs	r1, #18
 8004958:	187b      	adds	r3, r7, r1
 800495a:	801a      	strh	r2, [r3, #0]
	rawAdcmV = ( rawAdcData * ( 3.3 / 4096.0 ) );
 800495c:	187b      	adds	r3, r7, r1
 800495e:	881b      	ldrh	r3, [r3, #0]
 8004960:	0018      	movs	r0, r3
 8004962:	f7fe f8b7 	bl	8002ad4 <__aeabi_i2d>
 8004966:	4a5b      	ldr	r2, [pc, #364]	; (8004ad4 <circuitCalibPage+0x1c8>)
 8004968:	4b5b      	ldr	r3, [pc, #364]	; (8004ad8 <circuitCalibPage+0x1cc>)
 800496a:	f7fd fa7f 	bl	8001e6c <__aeabi_dmul>
 800496e:	0002      	movs	r2, r0
 8004970:	000b      	movs	r3, r1
 8004972:	0010      	movs	r0, r2
 8004974:	0019      	movs	r1, r3
 8004976:	f7fe f94b 	bl	8002c10 <__aeabi_d2f>
 800497a:	1c03      	adds	r3, r0, #0
 800497c:	60fb      	str	r3, [r7, #12]
	hLineBuff[hLineCount%6] = 128.0 - ( rawAdcmV * 32.72); // ( 128 pixels / 3.3 V ) = 38.79
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7fe f8fe 	bl	8002b80 <__aeabi_f2d>
 8004984:	4a55      	ldr	r2, [pc, #340]	; (8004adc <circuitCalibPage+0x1d0>)
 8004986:	4b56      	ldr	r3, [pc, #344]	; (8004ae0 <circuitCalibPage+0x1d4>)
 8004988:	f7fd fa70 	bl	8001e6c <__aeabi_dmul>
 800498c:	0002      	movs	r2, r0
 800498e:	000b      	movs	r3, r1
 8004990:	2000      	movs	r0, #0
 8004992:	4954      	ldr	r1, [pc, #336]	; (8004ae4 <circuitCalibPage+0x1d8>)
 8004994:	f7fd fcd6 	bl	8002344 <__aeabi_dsub>
 8004998:	0002      	movs	r2, r0
 800499a:	000b      	movs	r3, r1
 800499c:	0014      	movs	r4, r2
 800499e:	001d      	movs	r5, r3
 80049a0:	4b51      	ldr	r3, [pc, #324]	; (8004ae8 <circuitCalibPage+0x1dc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2106      	movs	r1, #6
 80049a6:	0018      	movs	r0, r3
 80049a8:	f7fb fc32 	bl	8000210 <__aeabi_uidivmod>
 80049ac:	000b      	movs	r3, r1
 80049ae:	001e      	movs	r6, r3
 80049b0:	0020      	movs	r0, r4
 80049b2:	0029      	movs	r1, r5
 80049b4:	f7fe f92c 	bl	8002c10 <__aeabi_d2f>
 80049b8:	1c01      	adds	r1, r0, #0
 80049ba:	4b4c      	ldr	r3, [pc, #304]	; (8004aec <circuitCalibPage+0x1e0>)
 80049bc:	00b2      	lsls	r2, r6, #2
 80049be:	50d1      	str	r1, [r2, r3]

	hLine = hLineBuff[hLineCount%6];
 80049c0:	4b49      	ldr	r3, [pc, #292]	; (8004ae8 <circuitCalibPage+0x1dc>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2106      	movs	r1, #6
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7fb fc22 	bl	8000210 <__aeabi_uidivmod>
 80049cc:	000b      	movs	r3, r1
 80049ce:	001a      	movs	r2, r3
 80049d0:	4b46      	ldr	r3, [pc, #280]	; (8004aec <circuitCalibPage+0x1e0>)
 80049d2:	0092      	lsls	r2, r2, #2
 80049d4:	58d3      	ldr	r3, [r2, r3]
 80049d6:	1c18      	adds	r0, r3, #0
 80049d8:	f7fb fd44 	bl	8000464 <__aeabi_f2uiz>
 80049dc:	0003      	movs	r3, r0
 80049de:	61bb      	str	r3, [r7, #24]

	hLineCount++;
 80049e0:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <circuitCalibPage+0x1dc>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	4b40      	ldr	r3, [pc, #256]	; (8004ae8 <circuitCalibPage+0x1dc>)
 80049e8:	601a      	str	r2, [r3, #0]

	if(hLineCount >= 6)
 80049ea:	4b3f      	ldr	r3, [pc, #252]	; (8004ae8 <circuitCalibPage+0x1dc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	d929      	bls.n	8004a46 <circuitCalibPage+0x13a>
	{

		hLine = 0.0;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61bb      	str	r3, [r7, #24]
		for(int i = 0 ; i < 6 ; i++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]
 80049fa:	e012      	b.n	8004a22 <circuitCalibPage+0x116>
			hLine += hLineBuff[i];
 80049fc:	69b8      	ldr	r0, [r7, #24]
 80049fe:	f7fc fbc1 	bl	8001184 <__aeabi_ui2f>
 8004a02:	4b3a      	ldr	r3, [pc, #232]	; (8004aec <circuitCalibPage+0x1e0>)
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	0092      	lsls	r2, r2, #2
 8004a08:	58d3      	ldr	r3, [r2, r3]
 8004a0a:	1c19      	adds	r1, r3, #0
 8004a0c:	f7fb fd60 	bl	80004d0 <__aeabi_fadd>
 8004a10:	1c03      	adds	r3, r0, #0
 8004a12:	1c18      	adds	r0, r3, #0
 8004a14:	f7fb fd26 	bl	8000464 <__aeabi_f2uiz>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	61bb      	str	r3, [r7, #24]
		for(int i = 0 ; i < 6 ; i++)
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b05      	cmp	r3, #5
 8004a26:	dde9      	ble.n	80049fc <circuitCalibPage+0xf0>

		hLine = ( hLine / 6.0 );
 8004a28:	69b8      	ldr	r0, [r7, #24]
 8004a2a:	f7fe f883 	bl	8002b34 <__aeabi_ui2d>
 8004a2e:	2200      	movs	r2, #0
 8004a30:	4b2f      	ldr	r3, [pc, #188]	; (8004af0 <circuitCalibPage+0x1e4>)
 8004a32:	f7fc ff25 	bl	8001880 <__aeabi_ddiv>
 8004a36:	0002      	movs	r2, r0
 8004a38:	000b      	movs	r3, r1
 8004a3a:	0010      	movs	r0, r2
 8004a3c:	0019      	movs	r1, r3
 8004a3e:	f7fb fd29 	bl	8000494 <__aeabi_d2uiz>
 8004a42:	0003      	movs	r3, r0
 8004a44:	61bb      	str	r3, [r7, #24]

	}


	HAL_ADC_Start(&hadc);
 8004a46:	4b22      	ldr	r3, [pc, #136]	; (8004ad0 <circuitCalibPage+0x1c4>)
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f000 fe39 	bl	80056c0 <HAL_ADC_Start>

	// Draw a line indicator

	if( (uint8_t)(hLine_old*100) != (uint8_t)(hLine*100) )
 8004a4e:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <circuitCalibPage+0x1e8>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2264      	movs	r2, #100	; 0x64
 8004a56:	4353      	muls	r3, r2
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2164      	movs	r1, #100	; 0x64
 8004a60:	434b      	muls	r3, r1
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d00b      	beq.n	8004a80 <circuitCalibPage+0x174>
		drawLine(0, hLine_old, 160, hLine_old, BLACK);
 8004a68:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <circuitCalibPage+0x1e8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	b219      	sxth	r1, r3
 8004a6e:	4b21      	ldr	r3, [pc, #132]	; (8004af4 <circuitCalibPage+0x1e8>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	b21b      	sxth	r3, r3
 8004a74:	2200      	movs	r2, #0
 8004a76:	9200      	str	r2, [sp, #0]
 8004a78:	22a0      	movs	r2, #160	; 0xa0
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	f7fe fc6f 	bl	800335e <drawLine>

	drawLine(0, hLine, 160, hLine, WHITE);
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	b219      	sxth	r1, r3
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	b21b      	sxth	r3, r3
 8004a88:	4a1b      	ldr	r2, [pc, #108]	; (8004af8 <circuitCalibPage+0x1ec>)
 8004a8a:	9200      	str	r2, [sp, #0]
 8004a8c:	22a0      	movs	r2, #160	; 0xa0
 8004a8e:	2000      	movs	r0, #0
 8004a90:	f7fe fc65 	bl	800335e <drawLine>

	hLine_old = hLine;
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <circuitCalibPage+0x1e8>)
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	601a      	str	r2, [r3, #0]

	if(( hLine >= ( 128 - 54 - 1 ) ) && ( hLine <= ( 128 - 54 + 1 ) ))
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	2b48      	cmp	r3, #72	; 0x48
 8004a9e:	d908      	bls.n	8004ab2 <circuitCalibPage+0x1a6>
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	2b4b      	cmp	r3, #75	; 0x4b
 8004aa4:	d805      	bhi.n	8004ab2 <circuitCalibPage+0x1a6>
		indicatorsColor = GREEN;
 8004aa6:	231e      	movs	r3, #30
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	22fc      	movs	r2, #252	; 0xfc
 8004aac:	00d2      	lsls	r2, r2, #3
 8004aae:	801a      	strh	r2, [r3, #0]
 8004ab0:	e003      	b.n	8004aba <circuitCalibPage+0x1ae>
	else
		indicatorsColor = RED;
 8004ab2:	231e      	movs	r3, #30
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	4a05      	ldr	r2, [pc, #20]	; (8004acc <circuitCalibPage+0x1c0>)
 8004ab8:	801a      	strh	r2, [r3, #0]

	orizzIndicators_graphics(indicatorsColor);
 8004aba:	231e      	movs	r3, #30
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 fa05 	bl	8004ed0 <orizzIndicators_graphics>

}
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b009      	add	sp, #36	; 0x24
 8004aca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004acc:	fffff800 	.word	0xfffff800
 8004ad0:	2000005c 	.word	0x2000005c
 8004ad4:	66666666 	.word	0x66666666
 8004ad8:	3f4a6666 	.word	0x3f4a6666
 8004adc:	f5c28f5c 	.word	0xf5c28f5c
 8004ae0:	40405c28 	.word	0x40405c28
 8004ae4:	40600000 	.word	0x40600000
 8004ae8:	20000124 	.word	0x20000124
 8004aec:	20000128 	.word	0x20000128
 8004af0:	40180000 	.word	0x40180000
 8004af4:	20000024 	.word	0x20000024
 8004af8:	0000ffff 	.word	0x0000ffff

08004afc <processStatus_update>:


/**************** PRIVATE FUNCTIONS ******************/

static uint8_t processStatus_update(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0

	static PROCESS_STATUS local_process_status = IDLE_PROCESS;


	if(HAL_GPIO_ReadPin(OPAMP_CALIB_GPIO_Port, OPAMP_CALIB_Pin) == 0)
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	015b      	lsls	r3, r3, #5
 8004b04:	4a10      	ldr	r2, [pc, #64]	; (8004b48 <processStatus_update+0x4c>)
 8004b06:	0019      	movs	r1, r3
 8004b08:	0010      	movs	r0, r2
 8004b0a:	f001 f9d7 	bl	8005ebc <HAL_GPIO_ReadPin>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d103      	bne.n	8004b1a <processStatus_update+0x1e>
		process_status = CIRCUIT_CALIBRATION;
 8004b12:	4b0e      	ldr	r3, [pc, #56]	; (8004b4c <processStatus_update+0x50>)
 8004b14:	2202      	movs	r2, #2
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e002      	b.n	8004b20 <processStatus_update+0x24>
	else
		process_status = MAIN_PROCESS;
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <processStatus_update+0x50>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	701a      	strb	r2, [r3, #0]

	if(local_process_status != process_status)
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <processStatus_update+0x54>)
 8004b22:	781a      	ldrb	r2, [r3, #0]
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <processStatus_update+0x50>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d005      	beq.n	8004b38 <processStatus_update+0x3c>
	{

		local_process_status = process_status;
 8004b2c:	4b07      	ldr	r3, [pc, #28]	; (8004b4c <processStatus_update+0x50>)
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <processStatus_update+0x54>)
 8004b32:	701a      	strb	r2, [r3, #0]
		return 1;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e004      	b.n	8004b42 <processStatus_update+0x46>

	}
	else
	{

		local_process_status = process_status;
 8004b38:	4b04      	ldr	r3, [pc, #16]	; (8004b4c <processStatus_update+0x50>)
 8004b3a:	781a      	ldrb	r2, [r3, #0]
 8004b3c:	4b04      	ldr	r3, [pc, #16]	; (8004b50 <processStatus_update+0x54>)
 8004b3e:	701a      	strb	r2, [r3, #0]
		return 0;
 8004b40:	2300      	movs	r3, #0

	}

}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	48000400 	.word	0x48000400
 8004b4c:	20000020 	.word	0x20000020
 8004b50:	20000140 	.word	0x20000140

08004b54 <pHStatus_update>:


static void pHStatus_update(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0

	if(pH_current >= STRONG_BASE_THR)
 8004b58:	4b23      	ldr	r3, [pc, #140]	; (8004be8 <pHStatus_update+0x94>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4923      	ldr	r1, [pc, #140]	; (8004bec <pHStatus_update+0x98>)
 8004b5e:	1c18      	adds	r0, r3, #0
 8004b60:	f7fb fc76 	bl	8000450 <__aeabi_fcmpge>
 8004b64:	1e03      	subs	r3, r0, #0
 8004b66:	d003      	beq.n	8004b70 <pHStatus_update+0x1c>
		pH_status = STRONG_BASE;
 8004b68:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <pHStatus_update+0x9c>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
	else if(pH_current <= STRONG_ACID_THR)
		pH_status = STRONG_ACID;
	else
		pH_status = NEUTRAL;

}
 8004b6e:	e037      	b.n	8004be0 <pHStatus_update+0x8c>
	else if(( pH_current > BASE_THR ) && ( pH_current < STRONG_BASE_THR ))
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <pHStatus_update+0x94>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	491f      	ldr	r1, [pc, #124]	; (8004bf4 <pHStatus_update+0xa0>)
 8004b76:	1c18      	adds	r0, r3, #0
 8004b78:	f7fb fc60 	bl	800043c <__aeabi_fcmpgt>
 8004b7c:	1e03      	subs	r3, r0, #0
 8004b7e:	d00b      	beq.n	8004b98 <pHStatus_update+0x44>
 8004b80:	4b19      	ldr	r3, [pc, #100]	; (8004be8 <pHStatus_update+0x94>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4919      	ldr	r1, [pc, #100]	; (8004bec <pHStatus_update+0x98>)
 8004b86:	1c18      	adds	r0, r3, #0
 8004b88:	f7fb fc44 	bl	8000414 <__aeabi_fcmplt>
 8004b8c:	1e03      	subs	r3, r0, #0
 8004b8e:	d003      	beq.n	8004b98 <pHStatus_update+0x44>
		pH_status = BASE;
 8004b90:	4b17      	ldr	r3, [pc, #92]	; (8004bf0 <pHStatus_update+0x9c>)
 8004b92:	2202      	movs	r2, #2
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e023      	b.n	8004be0 <pHStatus_update+0x8c>
	else if(( pH_current > STRONG_ACID_THR ) && ( pH_current < ACID_THR ))
 8004b98:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <pHStatus_update+0x94>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4916      	ldr	r1, [pc, #88]	; (8004bf8 <pHStatus_update+0xa4>)
 8004b9e:	1c18      	adds	r0, r3, #0
 8004ba0:	f7fb fc4c 	bl	800043c <__aeabi_fcmpgt>
 8004ba4:	1e03      	subs	r3, r0, #0
 8004ba6:	d00b      	beq.n	8004bc0 <pHStatus_update+0x6c>
 8004ba8:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <pHStatus_update+0x94>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4913      	ldr	r1, [pc, #76]	; (8004bfc <pHStatus_update+0xa8>)
 8004bae:	1c18      	adds	r0, r3, #0
 8004bb0:	f7fb fc30 	bl	8000414 <__aeabi_fcmplt>
 8004bb4:	1e03      	subs	r3, r0, #0
 8004bb6:	d003      	beq.n	8004bc0 <pHStatus_update+0x6c>
		pH_status = ACID;
 8004bb8:	4b0d      	ldr	r3, [pc, #52]	; (8004bf0 <pHStatus_update+0x9c>)
 8004bba:	2204      	movs	r2, #4
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	e00f      	b.n	8004be0 <pHStatus_update+0x8c>
	else if(pH_current <= STRONG_ACID_THR)
 8004bc0:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <pHStatus_update+0x94>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	490c      	ldr	r1, [pc, #48]	; (8004bf8 <pHStatus_update+0xa4>)
 8004bc6:	1c18      	adds	r0, r3, #0
 8004bc8:	f7fb fc2e 	bl	8000428 <__aeabi_fcmple>
 8004bcc:	1e03      	subs	r3, r0, #0
 8004bce:	d003      	beq.n	8004bd8 <pHStatus_update+0x84>
		pH_status = STRONG_ACID;
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <pHStatus_update+0x9c>)
 8004bd2:	2205      	movs	r2, #5
 8004bd4:	701a      	strb	r2, [r3, #0]
}
 8004bd6:	e003      	b.n	8004be0 <pHStatus_update+0x8c>
		pH_status = NEUTRAL;
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <pHStatus_update+0x9c>)
 8004bda:	2203      	movs	r2, #3
 8004bdc:	701a      	strb	r2, [r3, #0]
}
 8004bde:	e7ff      	b.n	8004be0 <pHStatus_update+0x8c>
 8004be0:	46c0      	nop			; (mov r8, r8)
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	46c0      	nop			; (mov r8, r8)
 8004be8:	2000001c 	.word	0x2000001c
 8004bec:	41280000 	.word	0x41280000
 8004bf0:	20000021 	.word	0x20000021
 8004bf4:	41080000 	.word	0x41080000
 8004bf8:	40600000 	.word	0x40600000
 8004bfc:	40b00000 	.word	0x40b00000

08004c00 <mainPage_graphics>:


static void mainPage_graphics(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0

	// 1. Title
	pageTitle_graphics("Current pH", MAIN_PAGE);
 8004c04:	4b04      	ldr	r3, [pc, #16]	; (8004c18 <mainPage_graphics+0x18>)
 8004c06:	210a      	movs	r1, #10
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f000 f819 	bl	8004c40 <pageTitle_graphics>

	// 2. Color scale
	colorBar_graphics();
 8004c0e:	f000 f8ab 	bl	8004d68 <colorBar_graphics>

}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}
 8004c18:	08006f88 	.word	0x08006f88

08004c1c <circuitCalibPage_graphics>:


static void circuitCalibPage_graphics(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0

	// 1. Title
	pageTitle_graphics("Circuit calibra.", CIRCUIT_CALIBRATION_PAGE);
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <circuitCalibPage_graphics+0x20>)
 8004c22:	2114      	movs	r1, #20
 8004c24:	0018      	movs	r0, r3
 8004c26:	f000 f80b 	bl	8004c40 <pageTitle_graphics>

	// 2. Offset indicators
	orizzIndicators_graphics(RED);
 8004c2a:	23f8      	movs	r3, #248	; 0xf8
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	0018      	movs	r0, r3
 8004c30:	f000 f94e 	bl	8004ed0 <orizzIndicators_graphics>

}
 8004c34:	46c0      	nop			; (mov r8, r8)
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	08006f94 	.word	0x08006f94

08004c40 <pageTitle_graphics>:


static void pageTitle_graphics(const char *title, uint8_t page)
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b089      	sub	sp, #36	; 0x24
 8004c44:	af04      	add	r7, sp, #16
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	000a      	movs	r2, r1
 8004c4a:	1cfb      	adds	r3, r7, #3
 8004c4c:	701a      	strb	r2, [r3, #0]
	 *   \						   /
	 *	  \-----------------------/
	 */


	uint8_t offset = 0;
 8004c4e:	210f      	movs	r1, #15
 8004c50:	187b      	adds	r3, r7, r1
 8004c52:	2200      	movs	r2, #0
 8004c54:	701a      	strb	r2, [r3, #0]


	if(page == MAIN_PAGE)
 8004c56:	1cfb      	adds	r3, r7, #3
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b0a      	cmp	r3, #10
 8004c5c:	d103      	bne.n	8004c66 <pageTitle_graphics+0x26>
		offset = 0;
 8004c5e:	187b      	adds	r3, r7, r1
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
 8004c64:	e00c      	b.n	8004c80 <pageTitle_graphics+0x40>
	else if(page == CIRCUIT_CALIBRATION_PAGE)
 8004c66:	1cfb      	adds	r3, r7, #3
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b14      	cmp	r3, #20
 8004c6c:	d104      	bne.n	8004c78 <pageTitle_graphics+0x38>
		offset = 20;
 8004c6e:	230f      	movs	r3, #15
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	2214      	movs	r2, #20
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	e003      	b.n	8004c80 <pageTitle_graphics+0x40>
	else
		offset = 0;
 8004c78:	230f      	movs	r3, #15
 8004c7a:	18fb      	adds	r3, r7, r3
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]

	ST7735_SetRotation(1);
 8004c80:	2001      	movs	r0, #1
 8004c82:	f7fe ffff 	bl	8003c84 <ST7735_SetRotation>

	fillTriangle(30-offset, 0, 50-offset, 0, 50-offset, 20, MAIN_COLOR);
 8004c86:	240f      	movs	r4, #15
 8004c88:	193b      	adds	r3, r7, r4
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	221e      	movs	r2, #30
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	b218      	sxth	r0, r3
 8004c96:	193b      	adds	r3, r7, r4
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2232      	movs	r2, #50	; 0x32
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	b219      	sxth	r1, r3
 8004ca4:	193b      	adds	r3, r7, r4
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2232      	movs	r2, #50	; 0x32
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	b21b      	sxth	r3, r3
 8004cb2:	22c3      	movs	r2, #195	; 0xc3
 8004cb4:	0112      	lsls	r2, r2, #4
 8004cb6:	9202      	str	r2, [sp, #8]
 8004cb8:	2214      	movs	r2, #20
 8004cba:	9201      	str	r2, [sp, #4]
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	000a      	movs	r2, r1
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	f7fe fc37 	bl	8003536 <fillTriangle>
	fillTriangle(110+offset, 0, 130+offset, 0, 110+offset, 20, MAIN_COLOR);
 8004cc8:	193b      	adds	r3, r7, r4
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	336e      	adds	r3, #110	; 0x6e
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	b218      	sxth	r0, r3
 8004cd4:	193b      	adds	r3, r7, r4
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	3382      	adds	r3, #130	; 0x82
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	b219      	sxth	r1, r3
 8004ce0:	193b      	adds	r3, r7, r4
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	336e      	adds	r3, #110	; 0x6e
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	22c3      	movs	r2, #195	; 0xc3
 8004cee:	0112      	lsls	r2, r2, #4
 8004cf0:	9202      	str	r2, [sp, #8]
 8004cf2:	2214      	movs	r2, #20
 8004cf4:	9201      	str	r2, [sp, #4]
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	000a      	movs	r2, r1
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	f7fe fc1a 	bl	8003536 <fillTriangle>
    fillRect(50-offset, 0, 60+(2*offset), 21, MAIN_COLOR);
 8004d02:	193b      	adds	r3, r7, r4
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2232      	movs	r2, #50	; 0x32
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	b218      	sxth	r0, r3
 8004d10:	193b      	adds	r3, r7, r4
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	331e      	adds	r3, #30
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	18db      	adds	r3, r3, r3
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	b21a      	sxth	r2, r3
 8004d1e:	23c3      	movs	r3, #195	; 0xc3
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	2315      	movs	r3, #21
 8004d26:	2100      	movs	r1, #0
 8004d28:	f7fe f97e 	bl	8003028 <fillRect>

    ST7735_WriteString(45-offset, 3, title, Font_7x10, WHITE, MAIN_COLOR);
 8004d2c:	193b      	adds	r3, r7, r4
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	222d      	movs	r2, #45	; 0x2d
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	b298      	uxth	r0, r3
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <pageTitle_graphics+0x120>)
 8004d3a:	687c      	ldr	r4, [r7, #4]
 8004d3c:	22c3      	movs	r2, #195	; 0xc3
 8004d3e:	0112      	lsls	r2, r2, #4
 8004d40:	9202      	str	r2, [sp, #8]
 8004d42:	4a08      	ldr	r2, [pc, #32]	; (8004d64 <pageTitle_graphics+0x124>)
 8004d44:	9201      	str	r2, [sp, #4]
 8004d46:	466a      	mov	r2, sp
 8004d48:	6859      	ldr	r1, [r3, #4]
 8004d4a:	6011      	str	r1, [r2, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	0022      	movs	r2, r4
 8004d50:	2103      	movs	r1, #3
 8004d52:	f7ff f90b 	bl	8003f6c <ST7735_WriteString>

}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b005      	add	sp, #20
 8004d5c:	bd90      	pop	{r4, r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	20000000 	.word	0x20000000
 8004d64:	0000ffff 	.word	0x0000ffff

08004d68 <colorBar_graphics>:

static void colorBar_graphics(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af02      	add	r7, sp, #8
	 * |________|	0
	 *
	 */


	ST7735_SetRotation(1);
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f7fe ff88 	bl	8003c84 <ST7735_SetRotation>

	uint8_t x = 120;
 8004d74:	1dfb      	adds	r3, r7, #7
 8004d76:	2278      	movs	r2, #120	; 0x78
 8004d78:	701a      	strb	r2, [r3, #0]
	uint8_t y = 100;
 8004d7a:	1dbb      	adds	r3, r7, #6
 8004d7c:	2264      	movs	r2, #100	; 0x64
 8004d7e:	701a      	strb	r2, [r3, #0]

	drawRect(x, y-80, 40, 20, BLACK);
 8004d80:	1dfb      	adds	r3, r7, #7
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	b218      	sxth	r0, r3
 8004d86:	1dbb      	adds	r3, r7, #6
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	3b50      	subs	r3, #80	; 0x50
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	b219      	sxth	r1, r3
 8004d92:	2300      	movs	r3, #0
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	2314      	movs	r3, #20
 8004d98:	2228      	movs	r2, #40	; 0x28
 8004d9a:	f7fe fb70 	bl	800347e <drawRect>
	drawRect(x, y-60, 40, 20, BLACK);
 8004d9e:	1dfb      	adds	r3, r7, #7
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	b218      	sxth	r0, r3
 8004da4:	1dbb      	adds	r3, r7, #6
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	3b3c      	subs	r3, #60	; 0x3c
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	b219      	sxth	r1, r3
 8004db0:	2300      	movs	r3, #0
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	2314      	movs	r3, #20
 8004db6:	2228      	movs	r2, #40	; 0x28
 8004db8:	f7fe fb61 	bl	800347e <drawRect>
	drawRect(x, y-40, 40, 20, BLACK);
 8004dbc:	1dfb      	adds	r3, r7, #7
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	b218      	sxth	r0, r3
 8004dc2:	1dbb      	adds	r3, r7, #6
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b28      	subs	r3, #40	; 0x28
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	b219      	sxth	r1, r3
 8004dce:	2300      	movs	r3, #0
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	2314      	movs	r3, #20
 8004dd4:	2228      	movs	r2, #40	; 0x28
 8004dd6:	f7fe fb52 	bl	800347e <drawRect>
	drawRect(x, y-20, 40, 20, BLACK);
 8004dda:	1dfb      	adds	r3, r7, #7
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	b218      	sxth	r0, r3
 8004de0:	1dbb      	adds	r3, r7, #6
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b14      	subs	r3, #20
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	b219      	sxth	r1, r3
 8004dec:	2300      	movs	r3, #0
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2314      	movs	r3, #20
 8004df2:	2228      	movs	r2, #40	; 0x28
 8004df4:	f7fe fb43 	bl	800347e <drawRect>
	drawRect(x, y, 40, 20, BLACK);
 8004df8:	1dfb      	adds	r3, r7, #7
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	b218      	sxth	r0, r3
 8004dfe:	1dbb      	adds	r3, r7, #6
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	b219      	sxth	r1, r3
 8004e04:	2300      	movs	r3, #0
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	2314      	movs	r3, #20
 8004e0a:	2228      	movs	r2, #40	; 0x28
 8004e0c:	f7fe fb37 	bl	800347e <drawRect>

	fillRect(x+1, y-80, 39, 19, DARK_BLUE);
 8004e10:	1dfb      	adds	r3, r7, #7
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	3301      	adds	r3, #1
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	b218      	sxth	r0, r3
 8004e1c:	1dbb      	adds	r3, r7, #6
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	3b50      	subs	r3, #80	; 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b219      	sxth	r1, r3
 8004e28:	231f      	movs	r3, #31
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2313      	movs	r3, #19
 8004e2e:	2227      	movs	r2, #39	; 0x27
 8004e30:	f7fe f8fa 	bl	8003028 <fillRect>
	fillRect(x+1, y-60, 39, 19, BLUE);
 8004e34:	1dfb      	adds	r3, r7, #7
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	b218      	sxth	r0, r3
 8004e40:	1dbb      	adds	r3, r7, #6
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b3c      	subs	r3, #60	; 0x3c
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	b219      	sxth	r1, r3
 8004e4c:	23ff      	movs	r3, #255	; 0xff
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	2313      	movs	r3, #19
 8004e52:	2227      	movs	r2, #39	; 0x27
 8004e54:	f7fe f8e8 	bl	8003028 <fillRect>
	fillRect(x+1, y-40, 39, 19, GREEN);
 8004e58:	1dfb      	adds	r3, r7, #7
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	3301      	adds	r3, #1
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	b218      	sxth	r0, r3
 8004e64:	1dbb      	adds	r3, r7, #6
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b28      	subs	r3, #40	; 0x28
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	b219      	sxth	r1, r3
 8004e70:	23fc      	movs	r3, #252	; 0xfc
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2313      	movs	r3, #19
 8004e78:	2227      	movs	r2, #39	; 0x27
 8004e7a:	f7fe f8d5 	bl	8003028 <fillRect>
	fillRect(x+1, y-20, 39, 19, YELLOW);
 8004e7e:	1dfb      	adds	r3, r7, #7
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	b218      	sxth	r0, r3
 8004e8a:	1dbb      	adds	r3, r7, #6
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b14      	subs	r3, #20
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	b219      	sxth	r1, r3
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <colorBar_graphics+0x164>)
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	2313      	movs	r3, #19
 8004e9c:	2227      	movs	r2, #39	; 0x27
 8004e9e:	f7fe f8c3 	bl	8003028 <fillRect>
	fillRect(x+1, y, 39, 19, RED);
 8004ea2:	1dfb      	adds	r3, r7, #7
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	b218      	sxth	r0, r3
 8004eae:	1dbb      	adds	r3, r7, #6
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	b219      	sxth	r1, r3
 8004eb4:	23f8      	movs	r3, #248	; 0xf8
 8004eb6:	021b      	lsls	r3, r3, #8
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	2313      	movs	r3, #19
 8004ebc:	2227      	movs	r2, #39	; 0x27
 8004ebe:	f7fe f8b3 	bl	8003028 <fillRect>

}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b002      	add	sp, #8
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	46c0      	nop			; (mov r8, r8)
 8004ecc:	0000ffe0 	.word	0x0000ffe0

08004ed0 <orizzIndicators_graphics>:

static void orizzIndicators_graphics(uint16_t color)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af04      	add	r7, sp, #16
 8004ed6:	0002      	movs	r2, r0
 8004ed8:	1dbb      	adds	r3, r7, #6
 8004eda:	801a      	strh	r2, [r3, #0]
	 * |/                              \|
	 *
	 */


	fillTriangle(0, 128-34, 20, 128-54, 0, 128-74, color);
 8004edc:	1dbb      	adds	r3, r7, #6
 8004ede:	881b      	ldrh	r3, [r3, #0]
 8004ee0:	9302      	str	r3, [sp, #8]
 8004ee2:	2336      	movs	r3, #54	; 0x36
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	234a      	movs	r3, #74	; 0x4a
 8004eec:	2214      	movs	r2, #20
 8004eee:	215e      	movs	r1, #94	; 0x5e
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f7fe fb20 	bl	8003536 <fillTriangle>
	fillTriangle(160, 128-34, 140, 128-54, 160, 128-74, color);
 8004ef6:	1dbb      	adds	r3, r7, #6
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	9302      	str	r3, [sp, #8]
 8004efc:	2336      	movs	r3, #54	; 0x36
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	23a0      	movs	r3, #160	; 0xa0
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	234a      	movs	r3, #74	; 0x4a
 8004f06:	228c      	movs	r2, #140	; 0x8c
 8004f08:	215e      	movs	r1, #94	; 0x5e
 8004f0a:	20a0      	movs	r0, #160	; 0xa0
 8004f0c:	f7fe fb13 	bl	8003536 <fillTriangle>


}
 8004f10:	46c0      	nop			; (mov r8, r8)
 8004f12:	46bd      	mov	sp, r7
 8004f14:	b002      	add	sp, #8
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <HAL_MspInit+0x44>)
 8004f20:	699a      	ldr	r2, [r3, #24]
 8004f22:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <HAL_MspInit+0x44>)
 8004f24:	2101      	movs	r1, #1
 8004f26:	430a      	orrs	r2, r1
 8004f28:	619a      	str	r2, [r3, #24]
 8004f2a:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <HAL_MspInit+0x44>)
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	4013      	ands	r3, r2
 8004f32:	607b      	str	r3, [r7, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_MspInit+0x44>)
 8004f38:	69da      	ldr	r2, [r3, #28]
 8004f3a:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <HAL_MspInit+0x44>)
 8004f3c:	2180      	movs	r1, #128	; 0x80
 8004f3e:	0549      	lsls	r1, r1, #21
 8004f40:	430a      	orrs	r2, r1
 8004f42:	61da      	str	r2, [r3, #28]
 8004f44:	4b05      	ldr	r3, [pc, #20]	; (8004f5c <HAL_MspInit+0x44>)
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	055b      	lsls	r3, r3, #21
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	603b      	str	r3, [r7, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b002      	add	sp, #8
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	40021000 	.word	0x40021000

08004f60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f60:	b590      	push	{r4, r7, lr}
 8004f62:	b08b      	sub	sp, #44	; 0x2c
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f68:	2414      	movs	r4, #20
 8004f6a:	193b      	adds	r3, r7, r4
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	2314      	movs	r3, #20
 8004f70:	001a      	movs	r2, r3
 8004f72:	2100      	movs	r1, #0
 8004f74:	f001 ffd2 	bl	8006f1c <memset>
  if(hadc->Instance==ADC1)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_ADC_MspInit+0x80>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d12a      	bne.n	8004fd8 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f82:	4b18      	ldr	r3, [pc, #96]	; (8004fe4 <HAL_ADC_MspInit+0x84>)
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	4b17      	ldr	r3, [pc, #92]	; (8004fe4 <HAL_ADC_MspInit+0x84>)
 8004f88:	2180      	movs	r1, #128	; 0x80
 8004f8a:	0089      	lsls	r1, r1, #2
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	619a      	str	r2, [r3, #24]
 8004f90:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <HAL_ADC_MspInit+0x84>)
 8004f92:	699a      	ldr	r2, [r3, #24]
 8004f94:	2380      	movs	r3, #128	; 0x80
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4013      	ands	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f9e:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <HAL_ADC_MspInit+0x84>)
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <HAL_ADC_MspInit+0x84>)
 8004fa4:	2180      	movs	r1, #128	; 0x80
 8004fa6:	02c9      	lsls	r1, r1, #11
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	615a      	str	r2, [r3, #20]
 8004fac:	4b0d      	ldr	r3, [pc, #52]	; (8004fe4 <HAL_ADC_MspInit+0x84>)
 8004fae:	695a      	ldr	r2, [r3, #20]
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	02db      	lsls	r3, r3, #11
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC1_IN8_Pin;
 8004fba:	193b      	adds	r3, r7, r4
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fc0:	193b      	adds	r3, r7, r4
 8004fc2:	2203      	movs	r2, #3
 8004fc4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc6:	193b      	adds	r3, r7, r4
 8004fc8:	2200      	movs	r2, #0
 8004fca:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC1_IN8_GPIO_Port, &GPIO_InitStruct);
 8004fcc:	193b      	adds	r3, r7, r4
 8004fce:	4a06      	ldr	r2, [pc, #24]	; (8004fe8 <HAL_ADC_MspInit+0x88>)
 8004fd0:	0019      	movs	r1, r3
 8004fd2:	0010      	movs	r0, r2
 8004fd4:	f000 fe02 	bl	8005bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004fd8:	46c0      	nop			; (mov r8, r8)
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	b00b      	add	sp, #44	; 0x2c
 8004fde:	bd90      	pop	{r4, r7, pc}
 8004fe0:	40012400 	.word	0x40012400
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	48000400 	.word	0x48000400

08004fec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004fec:	b590      	push	{r4, r7, lr}
 8004fee:	b08b      	sub	sp, #44	; 0x2c
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ff4:	2414      	movs	r4, #20
 8004ff6:	193b      	adds	r3, r7, r4
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	2314      	movs	r3, #20
 8004ffc:	001a      	movs	r2, r3
 8004ffe:	2100      	movs	r1, #0
 8005000:	f001 ff8c 	bl	8006f1c <memset>
  if(hspi->Instance==SPI1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1c      	ldr	r2, [pc, #112]	; (800507c <HAL_SPI_MspInit+0x90>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d132      	bne.n	8005074 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800500e:	4b1c      	ldr	r3, [pc, #112]	; (8005080 <HAL_SPI_MspInit+0x94>)
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <HAL_SPI_MspInit+0x94>)
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	0149      	lsls	r1, r1, #5
 8005018:	430a      	orrs	r2, r1
 800501a:	619a      	str	r2, [r3, #24]
 800501c:	4b18      	ldr	r3, [pc, #96]	; (8005080 <HAL_SPI_MspInit+0x94>)
 800501e:	699a      	ldr	r2, [r3, #24]
 8005020:	2380      	movs	r3, #128	; 0x80
 8005022:	015b      	lsls	r3, r3, #5
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
 8005028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502a:	4b15      	ldr	r3, [pc, #84]	; (8005080 <HAL_SPI_MspInit+0x94>)
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	4b14      	ldr	r3, [pc, #80]	; (8005080 <HAL_SPI_MspInit+0x94>)
 8005030:	2180      	movs	r1, #128	; 0x80
 8005032:	0289      	lsls	r1, r1, #10
 8005034:	430a      	orrs	r2, r1
 8005036:	615a      	str	r2, [r3, #20]
 8005038:	4b11      	ldr	r3, [pc, #68]	; (8005080 <HAL_SPI_MspInit+0x94>)
 800503a:	695a      	ldr	r2, [r3, #20]
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	029b      	lsls	r3, r3, #10
 8005040:	4013      	ands	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
 8005044:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005046:	0021      	movs	r1, r4
 8005048:	187b      	adds	r3, r7, r1
 800504a:	22e0      	movs	r2, #224	; 0xe0
 800504c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504e:	187b      	adds	r3, r7, r1
 8005050:	2202      	movs	r2, #2
 8005052:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005054:	187b      	adds	r3, r7, r1
 8005056:	2200      	movs	r2, #0
 8005058:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800505a:	187b      	adds	r3, r7, r1
 800505c:	2203      	movs	r2, #3
 800505e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8005060:	187b      	adds	r3, r7, r1
 8005062:	2200      	movs	r2, #0
 8005064:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005066:	187a      	adds	r2, r7, r1
 8005068:	2390      	movs	r3, #144	; 0x90
 800506a:	05db      	lsls	r3, r3, #23
 800506c:	0011      	movs	r1, r2
 800506e:	0018      	movs	r0, r3
 8005070:	f000 fdb4 	bl	8005bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005074:	46c0      	nop			; (mov r8, r8)
 8005076:	46bd      	mov	sp, r7
 8005078:	b00b      	add	sp, #44	; 0x2c
 800507a:	bd90      	pop	{r4, r7, pc}
 800507c:	40013000 	.word	0x40013000
 8005080:	40021000 	.word	0x40021000

08005084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005088:	e7fe      	b.n	8005088 <NMI_Handler+0x4>

0800508a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800508e:	e7fe      	b.n	800508e <HardFault_Handler+0x4>

08005090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800509e:	46c0      	nop			; (mov r8, r8)
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050a8:	f000 f980 	bl	80053ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80050ac:	46c0      	nop			; (mov r8, r8)
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80050b6:	46c0      	nop			; (mov r8, r8)
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <getTimeMs>:
/*
 *	@ Function; getDelayms
 *  @ Return; uint32_t -> current time in ms
 */
uint32_t getTimeMs(void)
{
 80050bc:	b5b0      	push	{r4, r5, r7, lr}
 80050be:	af00      	add	r7, sp, #0

	// Tick frequency is by default 1kHz (1ms period)
	return ( HAL_GetTick() * HAL_GetTickFreq() );
 80050c0:	f000 f986 	bl	80053d0 <HAL_GetTick>
 80050c4:	0004      	movs	r4, r0
 80050c6:	f000 f98d 	bl	80053e4 <HAL_GetTickFreq>
 80050ca:	0003      	movs	r3, r0
 80050cc:	4363      	muls	r3, r4

}
 80050ce:	0018      	movs	r0, r3
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bdb0      	pop	{r4, r5, r7, pc}

080050d4 <getDelayMs>:
 *	@ Function; getDelayms
 * 	@ Par1; uint32_t timeStamp -> captured time
 *  @ Return; uint32_t tDiff -> time elapsed since timeStamp in ms
 */
uint32_t getDelayMs(uint32_t timeStamp)
{
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]

	uint32_t tDiff;
	uint32_t currentTime;

	currentTime = ( getTimeMs() * HAL_GetTickFreq() );
 80050dc:	f7ff ffee 	bl	80050bc <getTimeMs>
 80050e0:	0004      	movs	r4, r0
 80050e2:	f000 f97f 	bl	80053e4 <HAL_GetTickFreq>
 80050e6:	0003      	movs	r3, r0
 80050e8:	4363      	muls	r3, r4
 80050ea:	60bb      	str	r3, [r7, #8]

	if(currentTime >= timeStamp)
 80050ec:	68ba      	ldr	r2, [r7, #8]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d304      	bcc.n	80050fe <getDelayMs+0x2a>
		tDiff = currentTime - timeStamp;
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	e003      	b.n	8005106 <getDelayMs+0x32>
	else
		tDiff = timeStamp - currentTime;
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	60fb      	str	r3, [r7, #12]

	return tDiff;
 8005106:	68fb      	ldr	r3, [r7, #12]

}
 8005108:	0018      	movs	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	b005      	add	sp, #20
 800510e:	bd90      	pop	{r4, r7, pc}

08005110 <floatToString>:
 *	@ Description; converts a float number into a string
 * 	@ Par1; float f -> float number
 * 	@ Par2; char *s -> string
 */
void floatToString(float f, char *s)
{
 8005110:	b5b0      	push	{r4, r5, r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]

	uint16_t ui16Temp = (uint16_t)( f * 100 );
 800511a:	496a      	ldr	r1, [pc, #424]	; (80052c4 <floatToString+0x1b4>)
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fb fd3d 	bl	8000b9c <__aeabi_fmul>
 8005122:	1c03      	adds	r3, r0, #0
 8005124:	250e      	movs	r5, #14
 8005126:	197c      	adds	r4, r7, r5
 8005128:	1c18      	adds	r0, r3, #0
 800512a:	f7fb f99b 	bl	8000464 <__aeabi_f2uiz>
 800512e:	0003      	movs	r3, r0
 8005130:	8023      	strh	r3, [r4, #0]

	if(ui16Temp >= 1000)
 8005132:	197b      	adds	r3, r7, r5
 8005134:	881a      	ldrh	r2, [r3, #0]
 8005136:	23fa      	movs	r3, #250	; 0xfa
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	429a      	cmp	r2, r3
 800513c:	d36d      	bcc.n	800521a <floatToString+0x10a>
	{

		s[5] = 0;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	3305      	adds	r3, #5
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]

		s[0] = (uint8_t)( ui16Temp / 1000 ) + 0x30;
 8005146:	197b      	adds	r3, r7, r5
 8005148:	881b      	ldrh	r3, [r3, #0]
 800514a:	22fa      	movs	r2, #250	; 0xfa
 800514c:	0091      	lsls	r1, r2, #2
 800514e:	0018      	movs	r0, r3
 8005150:	f7fa ffd8 	bl	8000104 <__udivsi3>
 8005154:	0003      	movs	r3, r0
 8005156:	b29b      	uxth	r3, r3
 8005158:	b2db      	uxtb	r3, r3
 800515a:	3330      	adds	r3, #48	; 0x30
 800515c:	b2da      	uxtb	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	701a      	strb	r2, [r3, #0]
		s[1] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 1000 ) * 1000 ) ) / 100 ) + 0x30;
 8005162:	197b      	adds	r3, r7, r5
 8005164:	881c      	ldrh	r4, [r3, #0]
 8005166:	197b      	adds	r3, r7, r5
 8005168:	881b      	ldrh	r3, [r3, #0]
 800516a:	22fa      	movs	r2, #250	; 0xfa
 800516c:	0091      	lsls	r1, r2, #2
 800516e:	0018      	movs	r0, r3
 8005170:	f7fa ffc8 	bl	8000104 <__udivsi3>
 8005174:	0003      	movs	r3, r0
 8005176:	b29b      	uxth	r3, r3
 8005178:	001a      	movs	r2, r3
 800517a:	0013      	movs	r3, r2
 800517c:	059b      	lsls	r3, r3, #22
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	019b      	lsls	r3, r3, #6
 8005182:	189b      	adds	r3, r3, r2
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	189b      	adds	r3, r3, r2
 8005188:	00db      	lsls	r3, r3, #3
 800518a:	18e3      	adds	r3, r4, r3
 800518c:	2164      	movs	r1, #100	; 0x64
 800518e:	0018      	movs	r0, r3
 8005190:	f7fb f842 	bl	8000218 <__divsi3>
 8005194:	0003      	movs	r3, r0
 8005196:	b2da      	uxtb	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	3230      	adds	r2, #48	; 0x30
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
		s[2] = '.';
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	3302      	adds	r3, #2
 80051a6:	222e      	movs	r2, #46	; 0x2e
 80051a8:	701a      	strb	r2, [r3, #0]
		s[3] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
 80051aa:	197b      	adds	r3, r7, r5
 80051ac:	881c      	ldrh	r4, [r3, #0]
 80051ae:	197b      	adds	r3, r7, r5
 80051b0:	881b      	ldrh	r3, [r3, #0]
 80051b2:	2164      	movs	r1, #100	; 0x64
 80051b4:	0018      	movs	r0, r3
 80051b6:	f7fa ffa5 	bl	8000104 <__udivsi3>
 80051ba:	0003      	movs	r3, r0
 80051bc:	b29b      	uxth	r3, r3
 80051be:	001a      	movs	r2, r3
 80051c0:	0013      	movs	r3, r2
 80051c2:	065b      	lsls	r3, r3, #25
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	189b      	adds	r3, r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	18e3      	adds	r3, r4, r3
 80051d2:	210a      	movs	r1, #10
 80051d4:	0018      	movs	r0, r3
 80051d6:	f7fb f81f 	bl	8000218 <__divsi3>
 80051da:	0003      	movs	r3, r0
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	3303      	adds	r3, #3
 80051e2:	3230      	adds	r2, #48	; 0x30
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	701a      	strb	r2, [r3, #0]
		s[4] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;
 80051e8:	197b      	adds	r3, r7, r5
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b2dc      	uxtb	r4, r3
 80051ee:	197b      	adds	r3, r7, r5
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	210a      	movs	r1, #10
 80051f4:	0018      	movs	r0, r3
 80051f6:	f7fa ff85 	bl	8000104 <__udivsi3>
 80051fa:	0003      	movs	r3, r0
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	1c1a      	adds	r2, r3, #0
 8005202:	0092      	lsls	r2, r2, #2
 8005204:	18d3      	adds	r3, r2, r3
 8005206:	18db      	adds	r3, r3, r3
 8005208:	b2db      	uxtb	r3, r3
 800520a:	1ae3      	subs	r3, r4, r3
 800520c:	b2da      	uxtb	r2, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	3304      	adds	r3, #4
 8005212:	3230      	adds	r2, #48	; 0x30
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]
		s[2] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
		s[3] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;

	}

}
 8005218:	e050      	b.n	80052bc <floatToString+0x1ac>
		s[5] = 0;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	3305      	adds	r3, #5
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]
		s[4] = 0;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	3304      	adds	r3, #4
 8005226:	2200      	movs	r2, #0
 8005228:	701a      	strb	r2, [r3, #0]
		s[0] = (uint8_t)( ui16Temp / 100 ) + 0x30;
 800522a:	250e      	movs	r5, #14
 800522c:	197b      	adds	r3, r7, r5
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	2164      	movs	r1, #100	; 0x64
 8005232:	0018      	movs	r0, r3
 8005234:	f7fa ff66 	bl	8000104 <__udivsi3>
 8005238:	0003      	movs	r3, r0
 800523a:	b29b      	uxth	r3, r3
 800523c:	b2db      	uxtb	r3, r3
 800523e:	3330      	adds	r3, #48	; 0x30
 8005240:	b2da      	uxtb	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	701a      	strb	r2, [r3, #0]
		s[1] = '.';
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	3301      	adds	r3, #1
 800524a:	222e      	movs	r2, #46	; 0x2e
 800524c:	701a      	strb	r2, [r3, #0]
		s[2] = (uint8_t)( ( ui16Temp - ( ( ui16Temp / 100 ) * 100 ) ) / 10 ) + 0x30;
 800524e:	197b      	adds	r3, r7, r5
 8005250:	881c      	ldrh	r4, [r3, #0]
 8005252:	197b      	adds	r3, r7, r5
 8005254:	881b      	ldrh	r3, [r3, #0]
 8005256:	2164      	movs	r1, #100	; 0x64
 8005258:	0018      	movs	r0, r3
 800525a:	f7fa ff53 	bl	8000104 <__udivsi3>
 800525e:	0003      	movs	r3, r0
 8005260:	b29b      	uxth	r3, r3
 8005262:	001a      	movs	r2, r3
 8005264:	0013      	movs	r3, r2
 8005266:	065b      	lsls	r3, r3, #25
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	189b      	adds	r3, r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	1a9b      	subs	r3, r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	18e3      	adds	r3, r4, r3
 8005276:	210a      	movs	r1, #10
 8005278:	0018      	movs	r0, r3
 800527a:	f7fa ffcd 	bl	8000218 <__divsi3>
 800527e:	0003      	movs	r3, r0
 8005280:	b2da      	uxtb	r2, r3
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	3302      	adds	r3, #2
 8005286:	3230      	adds	r2, #48	; 0x30
 8005288:	b2d2      	uxtb	r2, r2
 800528a:	701a      	strb	r2, [r3, #0]
		s[3] = (uint8_t)( ui16Temp - ( ( ui16Temp / 10 ) * 10 ) ) + 0x30;
 800528c:	197b      	adds	r3, r7, r5
 800528e:	881b      	ldrh	r3, [r3, #0]
 8005290:	b2dc      	uxtb	r4, r3
 8005292:	197b      	adds	r3, r7, r5
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	210a      	movs	r1, #10
 8005298:	0018      	movs	r0, r3
 800529a:	f7fa ff33 	bl	8000104 <__udivsi3>
 800529e:	0003      	movs	r3, r0
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	1c1a      	adds	r2, r3, #0
 80052a6:	0092      	lsls	r2, r2, #2
 80052a8:	18d3      	adds	r3, r2, r3
 80052aa:	18db      	adds	r3, r3, r3
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	1ae3      	subs	r3, r4, r3
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	3303      	adds	r3, #3
 80052b6:	3230      	adds	r2, #48	; 0x30
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	701a      	strb	r2, [r3, #0]
}
 80052bc:	46c0      	nop			; (mov r8, r8)
 80052be:	46bd      	mov	sp, r7
 80052c0:	b004      	add	sp, #16
 80052c2:	bdb0      	pop	{r4, r5, r7, pc}
 80052c4:	42c80000 	.word	0x42c80000

080052c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80052c8:	480d      	ldr	r0, [pc, #52]	; (8005300 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80052ca:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80052cc:	f7ff fef1 	bl	80050b2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80052d0:	480c      	ldr	r0, [pc, #48]	; (8005304 <LoopForever+0x6>)
  ldr r1, =_edata
 80052d2:	490d      	ldr	r1, [pc, #52]	; (8005308 <LoopForever+0xa>)
  ldr r2, =_sidata
 80052d4:	4a0d      	ldr	r2, [pc, #52]	; (800530c <LoopForever+0xe>)
  movs r3, #0
 80052d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80052d8:	e002      	b.n	80052e0 <LoopCopyDataInit>

080052da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80052da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052de:	3304      	adds	r3, #4

080052e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052e4:	d3f9      	bcc.n	80052da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052e6:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052e8:	4c0a      	ldr	r4, [pc, #40]	; (8005314 <LoopForever+0x16>)
  movs r3, #0
 80052ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052ec:	e001      	b.n	80052f2 <LoopFillZerobss>

080052ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052f0:	3204      	adds	r2, #4

080052f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052f4:	d3fb      	bcc.n	80052ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80052f6:	f001 fded 	bl	8006ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80052fa:	f7fe ff79 	bl	80041f0 <main>

080052fe <LoopForever>:

LoopForever:
    b LoopForever
 80052fe:	e7fe      	b.n	80052fe <LoopForever>
  ldr   r0, =_estack
 8005300:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005304:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005308:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800530c:	080099a8 	.word	0x080099a8
  ldr r2, =_sbss
 8005310:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8005314:	20000148 	.word	0x20000148

08005318 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005318:	e7fe      	b.n	8005318 <ADC1_IRQHandler>
	...

0800531c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <HAL_Init+0x24>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_Init+0x24>)
 8005326:	2110      	movs	r1, #16
 8005328:	430a      	orrs	r2, r1
 800532a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800532c:	2003      	movs	r0, #3
 800532e:	f000 f809 	bl	8005344 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005332:	f7ff fdf1 	bl	8004f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	0018      	movs	r0, r3
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	46c0      	nop			; (mov r8, r8)
 8005340:	40022000 	.word	0x40022000

08005344 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800534c:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <HAL_InitTick+0x5c>)
 800534e:	681c      	ldr	r4, [r3, #0]
 8005350:	4b14      	ldr	r3, [pc, #80]	; (80053a4 <HAL_InitTick+0x60>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	0019      	movs	r1, r3
 8005356:	23fa      	movs	r3, #250	; 0xfa
 8005358:	0098      	lsls	r0, r3, #2
 800535a:	f7fa fed3 	bl	8000104 <__udivsi3>
 800535e:	0003      	movs	r3, r0
 8005360:	0019      	movs	r1, r3
 8005362:	0020      	movs	r0, r4
 8005364:	f7fa fece 	bl	8000104 <__udivsi3>
 8005368:	0003      	movs	r3, r0
 800536a:	0018      	movs	r0, r3
 800536c:	f000 fc29 	bl	8005bc2 <HAL_SYSTICK_Config>
 8005370:	1e03      	subs	r3, r0, #0
 8005372:	d001      	beq.n	8005378 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e00f      	b.n	8005398 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b03      	cmp	r3, #3
 800537c:	d80b      	bhi.n	8005396 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	2301      	movs	r3, #1
 8005382:	425b      	negs	r3, r3
 8005384:	2200      	movs	r2, #0
 8005386:	0018      	movs	r0, r3
 8005388:	f000 fc06 	bl	8005b98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800538c:	4b06      	ldr	r3, [pc, #24]	; (80053a8 <HAL_InitTick+0x64>)
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	e000      	b.n	8005398 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
}
 8005398:	0018      	movs	r0, r3
 800539a:	46bd      	mov	sp, r7
 800539c:	b003      	add	sp, #12
 800539e:	bd90      	pop	{r4, r7, pc}
 80053a0:	20000028 	.word	0x20000028
 80053a4:	20000030 	.word	0x20000030
 80053a8:	2000002c 	.word	0x2000002c

080053ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053b0:	4b05      	ldr	r3, [pc, #20]	; (80053c8 <HAL_IncTick+0x1c>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	001a      	movs	r2, r3
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_IncTick+0x20>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	18d2      	adds	r2, r2, r3
 80053bc:	4b03      	ldr	r3, [pc, #12]	; (80053cc <HAL_IncTick+0x20>)
 80053be:	601a      	str	r2, [r3, #0]
}
 80053c0:	46c0      	nop			; (mov r8, r8)
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	46c0      	nop			; (mov r8, r8)
 80053c8:	20000030 	.word	0x20000030
 80053cc:	20000144 	.word	0x20000144

080053d0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  return uwTick;
 80053d4:	4b02      	ldr	r3, [pc, #8]	; (80053e0 <HAL_GetTick+0x10>)
 80053d6:	681b      	ldr	r3, [r3, #0]
}
 80053d8:	0018      	movs	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	46c0      	nop			; (mov r8, r8)
 80053e0:	20000144 	.word	0x20000144

080053e4 <HAL_GetTickFreq>:
  * @brief return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80053e8:	4b02      	ldr	r3, [pc, #8]	; (80053f4 <HAL_GetTickFreq+0x10>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	20000030 	.word	0x20000030

080053f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005400:	f7ff ffe6 	bl	80053d0 <HAL_GetTick>
 8005404:	0003      	movs	r3, r0
 8005406:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3301      	adds	r3, #1
 8005410:	d005      	beq.n	800541e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005412:	4b0a      	ldr	r3, [pc, #40]	; (800543c <HAL_Delay+0x44>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	001a      	movs	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	189b      	adds	r3, r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	f7ff ffd6 	bl	80053d0 <HAL_GetTick>
 8005424:	0002      	movs	r2, r0
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	429a      	cmp	r2, r3
 800542e:	d8f7      	bhi.n	8005420 <HAL_Delay+0x28>
  {
  }
}
 8005430:	46c0      	nop			; (mov r8, r8)
 8005432:	46c0      	nop			; (mov r8, r8)
 8005434:	46bd      	mov	sp, r7
 8005436:	b004      	add	sp, #16
 8005438:	bd80      	pop	{r7, pc}
 800543a:	46c0      	nop			; (mov r8, r8)
 800543c:	20000030 	.word	0x20000030

08005440 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005448:	230f      	movs	r3, #15
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e125      	b.n	80056aa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2234      	movs	r2, #52	; 0x34
 8005470:	2100      	movs	r1, #0
 8005472:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	0018      	movs	r0, r3
 8005478:	f7ff fd72 	bl	8004f60 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	2210      	movs	r2, #16
 8005482:	4013      	ands	r3, r2
 8005484:	d000      	beq.n	8005488 <HAL_ADC_Init+0x48>
 8005486:	e103      	b.n	8005690 <HAL_ADC_Init+0x250>
 8005488:	230f      	movs	r3, #15
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d000      	beq.n	8005494 <HAL_ADC_Init+0x54>
 8005492:	e0fd      	b.n	8005690 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	2204      	movs	r2, #4
 800549c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800549e:	d000      	beq.n	80054a2 <HAL_ADC_Init+0x62>
 80054a0:	e0f6      	b.n	8005690 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	4a83      	ldr	r2, [pc, #524]	; (80056b4 <HAL_ADC_Init+0x274>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	2202      	movs	r2, #2
 80054ac:	431a      	orrs	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2203      	movs	r2, #3
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d112      	bne.n	80054e6 <HAL_ADC_Init+0xa6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2201      	movs	r2, #1
 80054c8:	4013      	ands	r3, r2
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d009      	beq.n	80054e2 <HAL_ADC_Init+0xa2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	021b      	lsls	r3, r3, #8
 80054d8:	401a      	ands	r2, r3
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	021b      	lsls	r3, r3, #8
 80054de:	429a      	cmp	r2, r3
 80054e0:	d101      	bne.n	80054e6 <HAL_ADC_Init+0xa6>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <HAL_ADC_Init+0xa8>
 80054e6:	2300      	movs	r3, #0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d116      	bne.n	800551a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2218      	movs	r2, #24
 80054f4:	4393      	bics	r3, r2
 80054f6:	0019      	movs	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	430a      	orrs	r2, r1
 8005502:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	0899      	lsrs	r1, r3, #2
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4964      	ldr	r1, [pc, #400]	; (80056b8 <HAL_ADC_Init+0x278>)
 8005526:	400a      	ands	r2, r1
 8005528:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	7e1b      	ldrb	r3, [r3, #24]
 800552e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	7e5b      	ldrb	r3, [r3, #25]
 8005534:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005536:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	7e9b      	ldrb	r3, [r3, #26]
 800553c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800553e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	2b01      	cmp	r3, #1
 8005546:	d002      	beq.n	800554e <HAL_ADC_Init+0x10e>
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	015b      	lsls	r3, r3, #5
 800554c:	e000      	b.n	8005550 <HAL_ADC_Init+0x110>
 800554e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005550:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005556:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d101      	bne.n	8005564 <HAL_ADC_Init+0x124>
 8005560:	2304      	movs	r3, #4
 8005562:	e000      	b.n	8005566 <HAL_ADC_Init+0x126>
 8005564:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8005566:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2124      	movs	r1, #36	; 0x24
 800556c:	5c5b      	ldrb	r3, [r3, r1]
 800556e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005570:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	4313      	orrs	r3, r2
 8005576:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	7edb      	ldrb	r3, [r3, #27]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d115      	bne.n	80055ac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	7e9b      	ldrb	r3, [r3, #26]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d105      	bne.n	8005594 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2280      	movs	r2, #128	; 0x80
 800558c:	0252      	lsls	r2, r2, #9
 800558e:	4313      	orrs	r3, r2
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	e00b      	b.n	80055ac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005598:	2220      	movs	r2, #32
 800559a:	431a      	orrs	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a4:	2201      	movs	r2, #1
 80055a6:	431a      	orrs	r2, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	23c2      	movs	r3, #194	; 0xc2
 80055b2:	33ff      	adds	r3, #255	; 0xff
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d007      	beq.n	80055c8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80055c0:	4313      	orrs	r3, r2
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68d9      	ldr	r1, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	430a      	orrs	r2, r1
 80055d6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055dc:	2380      	movs	r3, #128	; 0x80
 80055de:	055b      	lsls	r3, r3, #21
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d01b      	beq.n	800561c <HAL_ADC_Init+0x1dc>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d017      	beq.n	800561c <HAL_ADC_Init+0x1dc>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d013      	beq.n	800561c <HAL_ADC_Init+0x1dc>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d00f      	beq.n	800561c <HAL_ADC_Init+0x1dc>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	2b04      	cmp	r3, #4
 8005602:	d00b      	beq.n	800561c <HAL_ADC_Init+0x1dc>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	2b05      	cmp	r3, #5
 800560a:	d007      	beq.n	800561c <HAL_ADC_Init+0x1dc>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	2b06      	cmp	r3, #6
 8005612:	d003      	beq.n	800561c <HAL_ADC_Init+0x1dc>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005618:	2b07      	cmp	r3, #7
 800561a:	d112      	bne.n	8005642 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695a      	ldr	r2, [r3, #20]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2107      	movs	r1, #7
 8005628:	438a      	bics	r2, r1
 800562a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6959      	ldr	r1, [r3, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005636:	2207      	movs	r2, #7
 8005638:	401a      	ands	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <HAL_ADC_Init+0x27c>)
 800564a:	4013      	ands	r3, r2
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	429a      	cmp	r2, r3
 8005650:	d10b      	bne.n	800566a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565c:	2203      	movs	r2, #3
 800565e:	4393      	bics	r3, r2
 8005660:	2201      	movs	r2, #1
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005668:	e01c      	b.n	80056a4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566e:	2212      	movs	r2, #18
 8005670:	4393      	bics	r3, r2
 8005672:	2210      	movs	r2, #16
 8005674:	431a      	orrs	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567e:	2201      	movs	r2, #1
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8005686:	230f      	movs	r3, #15
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	2201      	movs	r2, #1
 800568c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800568e:	e009      	b.n	80056a4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	2210      	movs	r2, #16
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800569c:	230f      	movs	r3, #15
 800569e:	18fb      	adds	r3, r7, r3
 80056a0:	2201      	movs	r2, #1
 80056a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80056a4:	230f      	movs	r3, #15
 80056a6:	18fb      	adds	r3, r7, r3
 80056a8:	781b      	ldrb	r3, [r3, #0]
}
 80056aa:	0018      	movs	r0, r3
 80056ac:	46bd      	mov	sp, r7
 80056ae:	b004      	add	sp, #16
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	46c0      	nop			; (mov r8, r8)
 80056b4:	fffffefd 	.word	0xfffffefd
 80056b8:	fffe0219 	.word	0xfffe0219
 80056bc:	833fffe7 	.word	0x833fffe7

080056c0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b085      	sub	sp, #20
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056c8:	230f      	movs	r3, #15
 80056ca:	18fb      	adds	r3, r7, r3
 80056cc:	2200      	movs	r2, #0
 80056ce:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2204      	movs	r2, #4
 80056d8:	4013      	ands	r3, r2
 80056da:	d138      	bne.n	800574e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2234      	movs	r2, #52	; 0x34
 80056e0:	5c9b      	ldrb	r3, [r3, r2]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_ADC_Start+0x2a>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e038      	b.n	800575c <HAL_ADC_Start+0x9c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2234      	movs	r2, #52	; 0x34
 80056ee:	2101      	movs	r1, #1
 80056f0:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	7e5b      	ldrb	r3, [r3, #25]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d007      	beq.n	800570a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80056fa:	230f      	movs	r3, #15
 80056fc:	18fc      	adds	r4, r7, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	0018      	movs	r0, r3
 8005702:	f000 f933 	bl	800596c <ADC_Enable>
 8005706:	0003      	movs	r3, r0
 8005708:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800570a:	230f      	movs	r3, #15
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d120      	bne.n	8005756 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	4a12      	ldr	r2, [pc, #72]	; (8005764 <HAL_ADC_Start+0xa4>)
 800571a:	4013      	ands	r3, r2
 800571c:	2280      	movs	r2, #128	; 0x80
 800571e:	0052      	lsls	r2, r2, #1
 8005720:	431a      	orrs	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2234      	movs	r2, #52	; 0x34
 8005730:	2100      	movs	r1, #0
 8005732:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	221c      	movs	r2, #28
 800573a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2104      	movs	r1, #4
 8005748:	430a      	orrs	r2, r1
 800574a:	609a      	str	r2, [r3, #8]
 800574c:	e003      	b.n	8005756 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800574e:	230f      	movs	r3, #15
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	2202      	movs	r2, #2
 8005754:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005756:	230f      	movs	r3, #15
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	781b      	ldrb	r3, [r3, #0]
}
 800575c:	0018      	movs	r0, r3
 800575e:	46bd      	mov	sp, r7
 8005760:	b005      	add	sp, #20
 8005762:	bd90      	pop	{r4, r7, pc}
 8005764:	fffff0fe 	.word	0xfffff0fe

08005768 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005776:	0018      	movs	r0, r3
 8005778:	46bd      	mov	sp, r7
 800577a:	b002      	add	sp, #8
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800578a:	230f      	movs	r3, #15
 800578c:	18fb      	adds	r3, r7, r3
 800578e:	2200      	movs	r2, #0
 8005790:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	055b      	lsls	r3, r3, #21
 800579e:	429a      	cmp	r2, r3
 80057a0:	d011      	beq.n	80057c6 <HAL_ADC_ConfigChannel+0x46>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d00d      	beq.n	80057c6 <HAL_ADC_ConfigChannel+0x46>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d009      	beq.n	80057c6 <HAL_ADC_ConfigChannel+0x46>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d005      	beq.n	80057c6 <HAL_ADC_ConfigChannel+0x46>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d001      	beq.n	80057c6 <HAL_ADC_ConfigChannel+0x46>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2234      	movs	r2, #52	; 0x34
 80057ca:	5c9b      	ldrb	r3, [r3, r2]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d101      	bne.n	80057d4 <HAL_ADC_ConfigChannel+0x54>
 80057d0:	2302      	movs	r3, #2
 80057d2:	e0bb      	b.n	800594c <HAL_ADC_ConfigChannel+0x1cc>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2234      	movs	r2, #52	; 0x34
 80057d8:	2101      	movs	r1, #1
 80057da:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2204      	movs	r2, #4
 80057e4:	4013      	ands	r3, r2
 80057e6:	d000      	beq.n	80057ea <HAL_ADC_ConfigChannel+0x6a>
 80057e8:	e09f      	b.n	800592a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	4a59      	ldr	r2, [pc, #356]	; (8005954 <HAL_ADC_ConfigChannel+0x1d4>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d100      	bne.n	80057f6 <HAL_ADC_ConfigChannel+0x76>
 80057f4:	e077      	b.n	80058e6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2201      	movs	r2, #1
 8005802:	409a      	lsls	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	430a      	orrs	r2, r1
 800580a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005810:	2380      	movs	r3, #128	; 0x80
 8005812:	055b      	lsls	r3, r3, #21
 8005814:	429a      	cmp	r2, r3
 8005816:	d037      	beq.n	8005888 <HAL_ADC_ConfigChannel+0x108>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d033      	beq.n	8005888 <HAL_ADC_ConfigChannel+0x108>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	2b02      	cmp	r3, #2
 8005826:	d02f      	beq.n	8005888 <HAL_ADC_ConfigChannel+0x108>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	2b03      	cmp	r3, #3
 800582e:	d02b      	beq.n	8005888 <HAL_ADC_ConfigChannel+0x108>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005834:	2b04      	cmp	r3, #4
 8005836:	d027      	beq.n	8005888 <HAL_ADC_ConfigChannel+0x108>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	2b05      	cmp	r3, #5
 800583e:	d023      	beq.n	8005888 <HAL_ADC_ConfigChannel+0x108>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	2b06      	cmp	r3, #6
 8005846:	d01f      	beq.n	8005888 <HAL_ADC_ConfigChannel+0x108>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	2b07      	cmp	r3, #7
 800584e:	d01b      	beq.n	8005888 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	2107      	movs	r1, #7
 800585c:	400b      	ands	r3, r1
 800585e:	429a      	cmp	r2, r3
 8005860:	d012      	beq.n	8005888 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2107      	movs	r1, #7
 800586e:	438a      	bics	r2, r1
 8005870:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6959      	ldr	r1, [r3, #20]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	2207      	movs	r2, #7
 800587e:	401a      	ands	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b10      	cmp	r3, #16
 800588e:	d003      	beq.n	8005898 <HAL_ADC_ConfigChannel+0x118>
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b11      	cmp	r3, #17
 8005896:	d152      	bne.n	800593e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005898:	4b2f      	ldr	r3, [pc, #188]	; (8005958 <HAL_ADC_ConfigChannel+0x1d8>)
 800589a:	6819      	ldr	r1, [r3, #0]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d102      	bne.n	80058aa <HAL_ADC_ConfigChannel+0x12a>
 80058a4:	2380      	movs	r3, #128	; 0x80
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	e001      	b.n	80058ae <HAL_ADC_ConfigChannel+0x12e>
 80058aa:	2380      	movs	r3, #128	; 0x80
 80058ac:	03db      	lsls	r3, r3, #15
 80058ae:	4a2a      	ldr	r2, [pc, #168]	; (8005958 <HAL_ADC_ConfigChannel+0x1d8>)
 80058b0:	430b      	orrs	r3, r1
 80058b2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d140      	bne.n	800593e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80058bc:	4b27      	ldr	r3, [pc, #156]	; (800595c <HAL_ADC_ConfigChannel+0x1dc>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4927      	ldr	r1, [pc, #156]	; (8005960 <HAL_ADC_ConfigChannel+0x1e0>)
 80058c2:	0018      	movs	r0, r3
 80058c4:	f7fa fc1e 	bl	8000104 <__udivsi3>
 80058c8:	0003      	movs	r3, r0
 80058ca:	001a      	movs	r2, r3
 80058cc:	0013      	movs	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	189b      	adds	r3, r3, r2
 80058d2:	005b      	lsls	r3, r3, #1
 80058d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80058d6:	e002      	b.n	80058de <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	3b01      	subs	r3, #1
 80058dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f9      	bne.n	80058d8 <HAL_ADC_ConfigChannel+0x158>
 80058e4:	e02b      	b.n	800593e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2101      	movs	r1, #1
 80058f2:	4099      	lsls	r1, r3
 80058f4:	000b      	movs	r3, r1
 80058f6:	43d9      	mvns	r1, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	400a      	ands	r2, r1
 80058fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b10      	cmp	r3, #16
 8005906:	d003      	beq.n	8005910 <HAL_ADC_ConfigChannel+0x190>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b11      	cmp	r3, #17
 800590e:	d116      	bne.n	800593e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8005910:	4b11      	ldr	r3, [pc, #68]	; (8005958 <HAL_ADC_ConfigChannel+0x1d8>)
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b10      	cmp	r3, #16
 800591a:	d101      	bne.n	8005920 <HAL_ADC_ConfigChannel+0x1a0>
 800591c:	4a11      	ldr	r2, [pc, #68]	; (8005964 <HAL_ADC_ConfigChannel+0x1e4>)
 800591e:	e000      	b.n	8005922 <HAL_ADC_ConfigChannel+0x1a2>
 8005920:	4a11      	ldr	r2, [pc, #68]	; (8005968 <HAL_ADC_ConfigChannel+0x1e8>)
 8005922:	4b0d      	ldr	r3, [pc, #52]	; (8005958 <HAL_ADC_ConfigChannel+0x1d8>)
 8005924:	400a      	ands	r2, r1
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	e009      	b.n	800593e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	2220      	movs	r2, #32
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8005936:	230f      	movs	r3, #15
 8005938:	18fb      	adds	r3, r7, r3
 800593a:	2201      	movs	r2, #1
 800593c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2234      	movs	r2, #52	; 0x34
 8005942:	2100      	movs	r1, #0
 8005944:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005946:	230f      	movs	r3, #15
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	781b      	ldrb	r3, [r3, #0]
}
 800594c:	0018      	movs	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	b004      	add	sp, #16
 8005952:	bd80      	pop	{r7, pc}
 8005954:	00001001 	.word	0x00001001
 8005958:	40012708 	.word	0x40012708
 800595c:	20000028 	.word	0x20000028
 8005960:	000f4240 	.word	0x000f4240
 8005964:	ff7fffff 	.word	0xff7fffff
 8005968:	ffbfffff 	.word	0xffbfffff

0800596c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2203      	movs	r2, #3
 8005984:	4013      	ands	r3, r2
 8005986:	2b01      	cmp	r3, #1
 8005988:	d112      	bne.n	80059b0 <ADC_Enable+0x44>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2201      	movs	r2, #1
 8005992:	4013      	ands	r3, r2
 8005994:	2b01      	cmp	r3, #1
 8005996:	d009      	beq.n	80059ac <ADC_Enable+0x40>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	2380      	movs	r3, #128	; 0x80
 80059a0:	021b      	lsls	r3, r3, #8
 80059a2:	401a      	ands	r2, r3
 80059a4:	2380      	movs	r3, #128	; 0x80
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d101      	bne.n	80059b0 <ADC_Enable+0x44>
 80059ac:	2301      	movs	r3, #1
 80059ae:	e000      	b.n	80059b2 <ADC_Enable+0x46>
 80059b0:	2300      	movs	r3, #0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d152      	bne.n	8005a5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4a2a      	ldr	r2, [pc, #168]	; (8005a68 <ADC_Enable+0xfc>)
 80059be:	4013      	ands	r3, r2
 80059c0:	d00d      	beq.n	80059de <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	2210      	movs	r2, #16
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	2201      	movs	r2, #1
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e03f      	b.n	8005a5e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2101      	movs	r1, #1
 80059ea:	430a      	orrs	r2, r1
 80059ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80059ee:	4b1f      	ldr	r3, [pc, #124]	; (8005a6c <ADC_Enable+0x100>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	491f      	ldr	r1, [pc, #124]	; (8005a70 <ADC_Enable+0x104>)
 80059f4:	0018      	movs	r0, r3
 80059f6:	f7fa fb85 	bl	8000104 <__udivsi3>
 80059fa:	0003      	movs	r3, r0
 80059fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80059fe:	e002      	b.n	8005a06 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	3b01      	subs	r3, #1
 8005a04:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f9      	bne.n	8005a00 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a0c:	f7ff fce0 	bl	80053d0 <HAL_GetTick>
 8005a10:	0003      	movs	r3, r0
 8005a12:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005a14:	e01b      	b.n	8005a4e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a16:	f7ff fcdb 	bl	80053d0 <HAL_GetTick>
 8005a1a:	0002      	movs	r2, r0
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d914      	bls.n	8005a4e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d00d      	beq.n	8005a4e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a36:	2210      	movs	r2, #16
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a42:	2201      	movs	r2, #1
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e007      	b.n	8005a5e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2201      	movs	r2, #1
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d1dc      	bne.n	8005a16 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	0018      	movs	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	b004      	add	sp, #16
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	80000017 	.word	0x80000017
 8005a6c:	20000028 	.word	0x20000028
 8005a70:	000f4240 	.word	0x000f4240

08005a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a74:	b590      	push	{r4, r7, lr}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	0002      	movs	r2, r0
 8005a7c:	6039      	str	r1, [r7, #0]
 8005a7e:	1dfb      	adds	r3, r7, #7
 8005a80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005a82:	1dfb      	adds	r3, r7, #7
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b7f      	cmp	r3, #127	; 0x7f
 8005a88:	d828      	bhi.n	8005adc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005a8a:	4a2f      	ldr	r2, [pc, #188]	; (8005b48 <__NVIC_SetPriority+0xd4>)
 8005a8c:	1dfb      	adds	r3, r7, #7
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	b25b      	sxtb	r3, r3
 8005a92:	089b      	lsrs	r3, r3, #2
 8005a94:	33c0      	adds	r3, #192	; 0xc0
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	589b      	ldr	r3, [r3, r2]
 8005a9a:	1dfa      	adds	r2, r7, #7
 8005a9c:	7812      	ldrb	r2, [r2, #0]
 8005a9e:	0011      	movs	r1, r2
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	400a      	ands	r2, r1
 8005aa4:	00d2      	lsls	r2, r2, #3
 8005aa6:	21ff      	movs	r1, #255	; 0xff
 8005aa8:	4091      	lsls	r1, r2
 8005aaa:	000a      	movs	r2, r1
 8005aac:	43d2      	mvns	r2, r2
 8005aae:	401a      	ands	r2, r3
 8005ab0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	019b      	lsls	r3, r3, #6
 8005ab6:	22ff      	movs	r2, #255	; 0xff
 8005ab8:	401a      	ands	r2, r3
 8005aba:	1dfb      	adds	r3, r7, #7
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	0018      	movs	r0, r3
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	4003      	ands	r3, r0
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005ac8:	481f      	ldr	r0, [pc, #124]	; (8005b48 <__NVIC_SetPriority+0xd4>)
 8005aca:	1dfb      	adds	r3, r7, #7
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	b25b      	sxtb	r3, r3
 8005ad0:	089b      	lsrs	r3, r3, #2
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	33c0      	adds	r3, #192	; 0xc0
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005ada:	e031      	b.n	8005b40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005adc:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <__NVIC_SetPriority+0xd8>)
 8005ade:	1dfb      	adds	r3, r7, #7
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	0019      	movs	r1, r3
 8005ae4:	230f      	movs	r3, #15
 8005ae6:	400b      	ands	r3, r1
 8005ae8:	3b08      	subs	r3, #8
 8005aea:	089b      	lsrs	r3, r3, #2
 8005aec:	3306      	adds	r3, #6
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	18d3      	adds	r3, r2, r3
 8005af2:	3304      	adds	r3, #4
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	1dfa      	adds	r2, r7, #7
 8005af8:	7812      	ldrb	r2, [r2, #0]
 8005afa:	0011      	movs	r1, r2
 8005afc:	2203      	movs	r2, #3
 8005afe:	400a      	ands	r2, r1
 8005b00:	00d2      	lsls	r2, r2, #3
 8005b02:	21ff      	movs	r1, #255	; 0xff
 8005b04:	4091      	lsls	r1, r2
 8005b06:	000a      	movs	r2, r1
 8005b08:	43d2      	mvns	r2, r2
 8005b0a:	401a      	ands	r2, r3
 8005b0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	019b      	lsls	r3, r3, #6
 8005b12:	22ff      	movs	r2, #255	; 0xff
 8005b14:	401a      	ands	r2, r3
 8005b16:	1dfb      	adds	r3, r7, #7
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	4003      	ands	r3, r0
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005b24:	4809      	ldr	r0, [pc, #36]	; (8005b4c <__NVIC_SetPriority+0xd8>)
 8005b26:	1dfb      	adds	r3, r7, #7
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	001c      	movs	r4, r3
 8005b2c:	230f      	movs	r3, #15
 8005b2e:	4023      	ands	r3, r4
 8005b30:	3b08      	subs	r3, #8
 8005b32:	089b      	lsrs	r3, r3, #2
 8005b34:	430a      	orrs	r2, r1
 8005b36:	3306      	adds	r3, #6
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	18c3      	adds	r3, r0, r3
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	601a      	str	r2, [r3, #0]
}
 8005b40:	46c0      	nop			; (mov r8, r8)
 8005b42:	46bd      	mov	sp, r7
 8005b44:	b003      	add	sp, #12
 8005b46:	bd90      	pop	{r4, r7, pc}
 8005b48:	e000e100 	.word	0xe000e100
 8005b4c:	e000ed00 	.word	0xe000ed00

08005b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	1e5a      	subs	r2, r3, #1
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	045b      	lsls	r3, r3, #17
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d301      	bcc.n	8005b68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b64:	2301      	movs	r3, #1
 8005b66:	e010      	b.n	8005b8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b68:	4b0a      	ldr	r3, [pc, #40]	; (8005b94 <SysTick_Config+0x44>)
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	3a01      	subs	r2, #1
 8005b6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b70:	2301      	movs	r3, #1
 8005b72:	425b      	negs	r3, r3
 8005b74:	2103      	movs	r1, #3
 8005b76:	0018      	movs	r0, r3
 8005b78:	f7ff ff7c 	bl	8005a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b7c:	4b05      	ldr	r3, [pc, #20]	; (8005b94 <SysTick_Config+0x44>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b82:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <SysTick_Config+0x44>)
 8005b84:	2207      	movs	r2, #7
 8005b86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b002      	add	sp, #8
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	e000e010 	.word	0xe000e010

08005b98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	210f      	movs	r1, #15
 8005ba4:	187b      	adds	r3, r7, r1
 8005ba6:	1c02      	adds	r2, r0, #0
 8005ba8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	187b      	adds	r3, r7, r1
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b25b      	sxtb	r3, r3
 8005bb2:	0011      	movs	r1, r2
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f7ff ff5d 	bl	8005a74 <__NVIC_SetPriority>
}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	b004      	add	sp, #16
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	0018      	movs	r0, r3
 8005bce:	f7ff ffbf 	bl	8005b50 <SysTick_Config>
 8005bd2:	0003      	movs	r3, r0
}
 8005bd4:	0018      	movs	r0, r3
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	b002      	add	sp, #8
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bea:	e14f      	b.n	8005e8c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2101      	movs	r1, #1
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4091      	lsls	r1, r2
 8005bf6:	000a      	movs	r2, r1
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d100      	bne.n	8005c04 <HAL_GPIO_Init+0x28>
 8005c02:	e140      	b.n	8005e86 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2203      	movs	r2, #3
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d005      	beq.n	8005c1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2203      	movs	r2, #3
 8005c16:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d130      	bne.n	8005c7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	2203      	movs	r2, #3
 8005c28:	409a      	lsls	r2, r3
 8005c2a:	0013      	movs	r3, r2
 8005c2c:	43da      	mvns	r2, r3
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4013      	ands	r3, r2
 8005c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	005b      	lsls	r3, r3, #1
 8005c3c:	409a      	lsls	r2, r3
 8005c3e:	0013      	movs	r3, r2
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005c52:	2201      	movs	r2, #1
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	409a      	lsls	r2, r3
 8005c58:	0013      	movs	r3, r2
 8005c5a:	43da      	mvns	r2, r3
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	091b      	lsrs	r3, r3, #4
 8005c68:	2201      	movs	r2, #1
 8005c6a:	401a      	ands	r2, r3
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	409a      	lsls	r2, r3
 8005c70:	0013      	movs	r3, r2
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2203      	movs	r2, #3
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d017      	beq.n	8005cba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	2203      	movs	r2, #3
 8005c96:	409a      	lsls	r2, r3
 8005c98:	0013      	movs	r3, r2
 8005c9a:	43da      	mvns	r2, r3
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	409a      	lsls	r2, r3
 8005cac:	0013      	movs	r3, r2
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d123      	bne.n	8005d0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	08da      	lsrs	r2, r3, #3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3208      	adds	r2, #8
 8005cce:	0092      	lsls	r2, r2, #2
 8005cd0:	58d3      	ldr	r3, [r2, r3]
 8005cd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2207      	movs	r2, #7
 8005cd8:	4013      	ands	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	220f      	movs	r2, #15
 8005cde:	409a      	lsls	r2, r3
 8005ce0:	0013      	movs	r3, r2
 8005ce2:	43da      	mvns	r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2107      	movs	r1, #7
 8005cf2:	400b      	ands	r3, r1
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	409a      	lsls	r2, r3
 8005cf8:	0013      	movs	r3, r2
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	08da      	lsrs	r2, r3, #3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3208      	adds	r2, #8
 8005d08:	0092      	lsls	r2, r2, #2
 8005d0a:	6939      	ldr	r1, [r7, #16]
 8005d0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	2203      	movs	r2, #3
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	0013      	movs	r3, r2
 8005d1e:	43da      	mvns	r2, r3
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4013      	ands	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2203      	movs	r2, #3
 8005d2c:	401a      	ands	r2, r3
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	005b      	lsls	r3, r3, #1
 8005d32:	409a      	lsls	r2, r3
 8005d34:	0013      	movs	r3, r2
 8005d36:	693a      	ldr	r2, [r7, #16]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	23c0      	movs	r3, #192	; 0xc0
 8005d48:	029b      	lsls	r3, r3, #10
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	d100      	bne.n	8005d50 <HAL_GPIO_Init+0x174>
 8005d4e:	e09a      	b.n	8005e86 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d50:	4b54      	ldr	r3, [pc, #336]	; (8005ea4 <HAL_GPIO_Init+0x2c8>)
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	4b53      	ldr	r3, [pc, #332]	; (8005ea4 <HAL_GPIO_Init+0x2c8>)
 8005d56:	2101      	movs	r1, #1
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	619a      	str	r2, [r3, #24]
 8005d5c:	4b51      	ldr	r3, [pc, #324]	; (8005ea4 <HAL_GPIO_Init+0x2c8>)
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	2201      	movs	r2, #1
 8005d62:	4013      	ands	r3, r2
 8005d64:	60bb      	str	r3, [r7, #8]
 8005d66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005d68:	4a4f      	ldr	r2, [pc, #316]	; (8005ea8 <HAL_GPIO_Init+0x2cc>)
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	089b      	lsrs	r3, r3, #2
 8005d6e:	3302      	adds	r3, #2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	589b      	ldr	r3, [r3, r2]
 8005d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2203      	movs	r2, #3
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	220f      	movs	r2, #15
 8005d80:	409a      	lsls	r2, r3
 8005d82:	0013      	movs	r3, r2
 8005d84:	43da      	mvns	r2, r3
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	4013      	ands	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	2390      	movs	r3, #144	; 0x90
 8005d90:	05db      	lsls	r3, r3, #23
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d013      	beq.n	8005dbe <HAL_GPIO_Init+0x1e2>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a44      	ldr	r2, [pc, #272]	; (8005eac <HAL_GPIO_Init+0x2d0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00d      	beq.n	8005dba <HAL_GPIO_Init+0x1de>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a43      	ldr	r2, [pc, #268]	; (8005eb0 <HAL_GPIO_Init+0x2d4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d007      	beq.n	8005db6 <HAL_GPIO_Init+0x1da>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a42      	ldr	r2, [pc, #264]	; (8005eb4 <HAL_GPIO_Init+0x2d8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d101      	bne.n	8005db2 <HAL_GPIO_Init+0x1d6>
 8005dae:	2303      	movs	r3, #3
 8005db0:	e006      	b.n	8005dc0 <HAL_GPIO_Init+0x1e4>
 8005db2:	2305      	movs	r3, #5
 8005db4:	e004      	b.n	8005dc0 <HAL_GPIO_Init+0x1e4>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e002      	b.n	8005dc0 <HAL_GPIO_Init+0x1e4>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <HAL_GPIO_Init+0x1e4>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	2103      	movs	r1, #3
 8005dc4:	400a      	ands	r2, r1
 8005dc6:	0092      	lsls	r2, r2, #2
 8005dc8:	4093      	lsls	r3, r2
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005dd0:	4935      	ldr	r1, [pc, #212]	; (8005ea8 <HAL_GPIO_Init+0x2cc>)
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	089b      	lsrs	r3, r3, #2
 8005dd6:	3302      	adds	r3, #2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	693a      	ldr	r2, [r7, #16]
 8005ddc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dde:	4b36      	ldr	r3, [pc, #216]	; (8005eb8 <HAL_GPIO_Init+0x2dc>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	43da      	mvns	r2, r3
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4013      	ands	r3, r2
 8005dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	2380      	movs	r3, #128	; 0x80
 8005df4:	035b      	lsls	r3, r3, #13
 8005df6:	4013      	ands	r3, r2
 8005df8:	d003      	beq.n	8005e02 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005e02:	4b2d      	ldr	r3, [pc, #180]	; (8005eb8 <HAL_GPIO_Init+0x2dc>)
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005e08:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <HAL_GPIO_Init+0x2dc>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	43da      	mvns	r2, r3
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4013      	ands	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685a      	ldr	r2, [r3, #4]
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	039b      	lsls	r3, r3, #14
 8005e20:	4013      	ands	r3, r2
 8005e22:	d003      	beq.n	8005e2c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005e2c:	4b22      	ldr	r3, [pc, #136]	; (8005eb8 <HAL_GPIO_Init+0x2dc>)
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005e32:	4b21      	ldr	r3, [pc, #132]	; (8005eb8 <HAL_GPIO_Init+0x2dc>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	43da      	mvns	r2, r3
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d003      	beq.n	8005e56 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005e56:	4b18      	ldr	r3, [pc, #96]	; (8005eb8 <HAL_GPIO_Init+0x2dc>)
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005e5c:	4b16      	ldr	r3, [pc, #88]	; (8005eb8 <HAL_GPIO_Init+0x2dc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	43da      	mvns	r2, r3
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	025b      	lsls	r3, r3, #9
 8005e74:	4013      	ands	r3, r2
 8005e76:	d003      	beq.n	8005e80 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005e80:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <HAL_GPIO_Init+0x2dc>)
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	40da      	lsrs	r2, r3
 8005e94:	1e13      	subs	r3, r2, #0
 8005e96:	d000      	beq.n	8005e9a <HAL_GPIO_Init+0x2be>
 8005e98:	e6a8      	b.n	8005bec <HAL_GPIO_Init+0x10>
  } 
}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	46c0      	nop			; (mov r8, r8)
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b006      	add	sp, #24
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	48000400 	.word	0x48000400
 8005eb0:	48000800 	.word	0x48000800
 8005eb4:	48000c00 	.word	0x48000c00
 8005eb8:	40010400 	.word	0x40010400

08005ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	000a      	movs	r2, r1
 8005ec6:	1cbb      	adds	r3, r7, #2
 8005ec8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	1cba      	adds	r2, r7, #2
 8005ed0:	8812      	ldrh	r2, [r2, #0]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005ed6:	230f      	movs	r3, #15
 8005ed8:	18fb      	adds	r3, r7, r3
 8005eda:	2201      	movs	r2, #1
 8005edc:	701a      	strb	r2, [r3, #0]
 8005ede:	e003      	b.n	8005ee8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005ee0:	230f      	movs	r3, #15
 8005ee2:	18fb      	adds	r3, r7, r3
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005ee8:	230f      	movs	r3, #15
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	781b      	ldrb	r3, [r3, #0]
  }
 8005eee:	0018      	movs	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	b004      	add	sp, #16
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b082      	sub	sp, #8
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
 8005efe:	0008      	movs	r0, r1
 8005f00:	0011      	movs	r1, r2
 8005f02:	1cbb      	adds	r3, r7, #2
 8005f04:	1c02      	adds	r2, r0, #0
 8005f06:	801a      	strh	r2, [r3, #0]
 8005f08:	1c7b      	adds	r3, r7, #1
 8005f0a:	1c0a      	adds	r2, r1, #0
 8005f0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f0e:	1c7b      	adds	r3, r7, #1
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005f16:	1cbb      	adds	r3, r7, #2
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005f1e:	e003      	b.n	8005f28 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005f20:	1cbb      	adds	r3, r7, #2
 8005f22:	881a      	ldrh	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005f28:	46c0      	nop			; (mov r8, r8)
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b002      	add	sp, #8
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b088      	sub	sp, #32
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e305      	b.n	800654e <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2201      	movs	r2, #1
 8005f48:	4013      	ands	r3, r2
 8005f4a:	d100      	bne.n	8005f4e <HAL_RCC_OscConfig+0x1e>
 8005f4c:	e08d      	b.n	800606a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005f4e:	4bc5      	ldr	r3, [pc, #788]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	220c      	movs	r2, #12
 8005f54:	4013      	ands	r3, r2
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d00e      	beq.n	8005f78 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005f5a:	4bc2      	ldr	r3, [pc, #776]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	220c      	movs	r2, #12
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d116      	bne.n	8005f94 <HAL_RCC_OscConfig+0x64>
 8005f66:	4bbf      	ldr	r3, [pc, #764]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005f68:	685a      	ldr	r2, [r3, #4]
 8005f6a:	23c0      	movs	r3, #192	; 0xc0
 8005f6c:	025b      	lsls	r3, r3, #9
 8005f6e:	401a      	ands	r2, r3
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	025b      	lsls	r3, r3, #9
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d10d      	bne.n	8005f94 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f78:	4bba      	ldr	r3, [pc, #744]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	2380      	movs	r3, #128	; 0x80
 8005f7e:	029b      	lsls	r3, r3, #10
 8005f80:	4013      	ands	r3, r2
 8005f82:	d100      	bne.n	8005f86 <HAL_RCC_OscConfig+0x56>
 8005f84:	e070      	b.n	8006068 <HAL_RCC_OscConfig+0x138>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d000      	beq.n	8005f90 <HAL_RCC_OscConfig+0x60>
 8005f8e:	e06b      	b.n	8006068 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e2dc      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d107      	bne.n	8005fac <HAL_RCC_OscConfig+0x7c>
 8005f9c:	4bb1      	ldr	r3, [pc, #708]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	4bb0      	ldr	r3, [pc, #704]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005fa2:	2180      	movs	r1, #128	; 0x80
 8005fa4:	0249      	lsls	r1, r1, #9
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e02f      	b.n	800600c <HAL_RCC_OscConfig+0xdc>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10c      	bne.n	8005fce <HAL_RCC_OscConfig+0x9e>
 8005fb4:	4bab      	ldr	r3, [pc, #684]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	4baa      	ldr	r3, [pc, #680]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005fba:	49ab      	ldr	r1, [pc, #684]	; (8006268 <HAL_RCC_OscConfig+0x338>)
 8005fbc:	400a      	ands	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	4ba8      	ldr	r3, [pc, #672]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	4ba7      	ldr	r3, [pc, #668]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005fc6:	49a9      	ldr	r1, [pc, #676]	; (800626c <HAL_RCC_OscConfig+0x33c>)
 8005fc8:	400a      	ands	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	e01e      	b.n	800600c <HAL_RCC_OscConfig+0xdc>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	d10e      	bne.n	8005ff4 <HAL_RCC_OscConfig+0xc4>
 8005fd6:	4ba3      	ldr	r3, [pc, #652]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4ba2      	ldr	r3, [pc, #648]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005fdc:	2180      	movs	r1, #128	; 0x80
 8005fde:	02c9      	lsls	r1, r1, #11
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	4b9f      	ldr	r3, [pc, #636]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	4b9e      	ldr	r3, [pc, #632]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005fea:	2180      	movs	r1, #128	; 0x80
 8005fec:	0249      	lsls	r1, r1, #9
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	e00b      	b.n	800600c <HAL_RCC_OscConfig+0xdc>
 8005ff4:	4b9b      	ldr	r3, [pc, #620]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	4b9a      	ldr	r3, [pc, #616]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8005ffa:	499b      	ldr	r1, [pc, #620]	; (8006268 <HAL_RCC_OscConfig+0x338>)
 8005ffc:	400a      	ands	r2, r1
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	4b98      	ldr	r3, [pc, #608]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	4b97      	ldr	r3, [pc, #604]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006006:	4999      	ldr	r1, [pc, #612]	; (800626c <HAL_RCC_OscConfig+0x33c>)
 8006008:	400a      	ands	r2, r1
 800600a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d014      	beq.n	800603e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006014:	f7ff f9dc 	bl	80053d0 <HAL_GetTick>
 8006018:	0003      	movs	r3, r0
 800601a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800601c:	e008      	b.n	8006030 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800601e:	f7ff f9d7 	bl	80053d0 <HAL_GetTick>
 8006022:	0002      	movs	r2, r0
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	2b64      	cmp	r3, #100	; 0x64
 800602a:	d901      	bls.n	8006030 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800602c:	2303      	movs	r3, #3
 800602e:	e28e      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006030:	4b8c      	ldr	r3, [pc, #560]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	2380      	movs	r3, #128	; 0x80
 8006036:	029b      	lsls	r3, r3, #10
 8006038:	4013      	ands	r3, r2
 800603a:	d0f0      	beq.n	800601e <HAL_RCC_OscConfig+0xee>
 800603c:	e015      	b.n	800606a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800603e:	f7ff f9c7 	bl	80053d0 <HAL_GetTick>
 8006042:	0003      	movs	r3, r0
 8006044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006046:	e008      	b.n	800605a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006048:	f7ff f9c2 	bl	80053d0 <HAL_GetTick>
 800604c:	0002      	movs	r2, r0
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	2b64      	cmp	r3, #100	; 0x64
 8006054:	d901      	bls.n	800605a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e279      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800605a:	4b82      	ldr	r3, [pc, #520]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	2380      	movs	r3, #128	; 0x80
 8006060:	029b      	lsls	r3, r3, #10
 8006062:	4013      	ands	r3, r2
 8006064:	d1f0      	bne.n	8006048 <HAL_RCC_OscConfig+0x118>
 8006066:	e000      	b.n	800606a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006068:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2202      	movs	r2, #2
 8006070:	4013      	ands	r3, r2
 8006072:	d100      	bne.n	8006076 <HAL_RCC_OscConfig+0x146>
 8006074:	e06c      	b.n	8006150 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8006076:	4b7b      	ldr	r3, [pc, #492]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	220c      	movs	r2, #12
 800607c:	4013      	ands	r3, r2
 800607e:	d00e      	beq.n	800609e <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8006080:	4b78      	ldr	r3, [pc, #480]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	220c      	movs	r2, #12
 8006086:	4013      	ands	r3, r2
 8006088:	2b08      	cmp	r3, #8
 800608a:	d11f      	bne.n	80060cc <HAL_RCC_OscConfig+0x19c>
 800608c:	4b75      	ldr	r3, [pc, #468]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	23c0      	movs	r3, #192	; 0xc0
 8006092:	025b      	lsls	r3, r3, #9
 8006094:	401a      	ands	r2, r3
 8006096:	2380      	movs	r3, #128	; 0x80
 8006098:	021b      	lsls	r3, r3, #8
 800609a:	429a      	cmp	r2, r3
 800609c:	d116      	bne.n	80060cc <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800609e:	4b71      	ldr	r3, [pc, #452]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2202      	movs	r2, #2
 80060a4:	4013      	ands	r3, r2
 80060a6:	d005      	beq.n	80060b4 <HAL_RCC_OscConfig+0x184>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d001      	beq.n	80060b4 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e24c      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060b4:	4b6b      	ldr	r3, [pc, #428]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	22f8      	movs	r2, #248	; 0xf8
 80060ba:	4393      	bics	r3, r2
 80060bc:	0019      	movs	r1, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	00da      	lsls	r2, r3, #3
 80060c4:	4b67      	ldr	r3, [pc, #412]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80060c6:	430a      	orrs	r2, r1
 80060c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ca:	e041      	b.n	8006150 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d024      	beq.n	800611e <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060d4:	4b63      	ldr	r3, [pc, #396]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b62      	ldr	r3, [pc, #392]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80060da:	2101      	movs	r1, #1
 80060dc:	430a      	orrs	r2, r1
 80060de:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060e0:	f7ff f976 	bl	80053d0 <HAL_GetTick>
 80060e4:	0003      	movs	r3, r0
 80060e6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ea:	f7ff f971 	bl	80053d0 <HAL_GetTick>
 80060ee:	0002      	movs	r2, r0
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e228      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060fc:	4b59      	ldr	r3, [pc, #356]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2202      	movs	r2, #2
 8006102:	4013      	ands	r3, r2
 8006104:	d0f1      	beq.n	80060ea <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006106:	4b57      	ldr	r3, [pc, #348]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	22f8      	movs	r2, #248	; 0xf8
 800610c:	4393      	bics	r3, r2
 800610e:	0019      	movs	r1, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	00da      	lsls	r2, r3, #3
 8006116:	4b53      	ldr	r3, [pc, #332]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006118:	430a      	orrs	r2, r1
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	e018      	b.n	8006150 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800611e:	4b51      	ldr	r3, [pc, #324]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b50      	ldr	r3, [pc, #320]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006124:	2101      	movs	r1, #1
 8006126:	438a      	bics	r2, r1
 8006128:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800612a:	f7ff f951 	bl	80053d0 <HAL_GetTick>
 800612e:	0003      	movs	r3, r0
 8006130:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006132:	e008      	b.n	8006146 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006134:	f7ff f94c 	bl	80053d0 <HAL_GetTick>
 8006138:	0002      	movs	r2, r0
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e203      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006146:	4b47      	ldr	r3, [pc, #284]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2202      	movs	r2, #2
 800614c:	4013      	ands	r3, r2
 800614e:	d1f1      	bne.n	8006134 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2208      	movs	r2, #8
 8006156:	4013      	ands	r3, r2
 8006158:	d036      	beq.n	80061c8 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d019      	beq.n	8006196 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006162:	4b40      	ldr	r3, [pc, #256]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006166:	4b3f      	ldr	r3, [pc, #252]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006168:	2101      	movs	r1, #1
 800616a:	430a      	orrs	r2, r1
 800616c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800616e:	f7ff f92f 	bl	80053d0 <HAL_GetTick>
 8006172:	0003      	movs	r3, r0
 8006174:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006176:	e008      	b.n	800618a <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006178:	f7ff f92a 	bl	80053d0 <HAL_GetTick>
 800617c:	0002      	movs	r2, r0
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	2b02      	cmp	r3, #2
 8006184:	d901      	bls.n	800618a <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8006186:	2303      	movs	r3, #3
 8006188:	e1e1      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800618a:	4b36      	ldr	r3, [pc, #216]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	2202      	movs	r2, #2
 8006190:	4013      	ands	r3, r2
 8006192:	d0f1      	beq.n	8006178 <HAL_RCC_OscConfig+0x248>
 8006194:	e018      	b.n	80061c8 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006196:	4b33      	ldr	r3, [pc, #204]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006198:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800619a:	4b32      	ldr	r3, [pc, #200]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 800619c:	2101      	movs	r1, #1
 800619e:	438a      	bics	r2, r1
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a2:	f7ff f915 	bl	80053d0 <HAL_GetTick>
 80061a6:	0003      	movs	r3, r0
 80061a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061aa:	e008      	b.n	80061be <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061ac:	f7ff f910 	bl	80053d0 <HAL_GetTick>
 80061b0:	0002      	movs	r2, r0
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	2b02      	cmp	r3, #2
 80061b8:	d901      	bls.n	80061be <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e1c7      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061be:	4b29      	ldr	r3, [pc, #164]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	2202      	movs	r2, #2
 80061c4:	4013      	ands	r3, r2
 80061c6:	d1f1      	bne.n	80061ac <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2204      	movs	r2, #4
 80061ce:	4013      	ands	r3, r2
 80061d0:	d100      	bne.n	80061d4 <HAL_RCC_OscConfig+0x2a4>
 80061d2:	e0b5      	b.n	8006340 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061d4:	201f      	movs	r0, #31
 80061d6:	183b      	adds	r3, r7, r0
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061dc:	4b21      	ldr	r3, [pc, #132]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	2380      	movs	r3, #128	; 0x80
 80061e2:	055b      	lsls	r3, r3, #21
 80061e4:	4013      	ands	r3, r2
 80061e6:	d110      	bne.n	800620a <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061e8:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80061ea:	69da      	ldr	r2, [r3, #28]
 80061ec:	4b1d      	ldr	r3, [pc, #116]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80061ee:	2180      	movs	r1, #128	; 0x80
 80061f0:	0549      	lsls	r1, r1, #21
 80061f2:	430a      	orrs	r2, r1
 80061f4:	61da      	str	r2, [r3, #28]
 80061f6:	4b1b      	ldr	r3, [pc, #108]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 80061f8:	69da      	ldr	r2, [r3, #28]
 80061fa:	2380      	movs	r3, #128	; 0x80
 80061fc:	055b      	lsls	r3, r3, #21
 80061fe:	4013      	ands	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006204:	183b      	adds	r3, r7, r0
 8006206:	2201      	movs	r2, #1
 8006208:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620a:	4b19      	ldr	r3, [pc, #100]	; (8006270 <HAL_RCC_OscConfig+0x340>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	2380      	movs	r3, #128	; 0x80
 8006210:	005b      	lsls	r3, r3, #1
 8006212:	4013      	ands	r3, r2
 8006214:	d11a      	bne.n	800624c <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006216:	4b16      	ldr	r3, [pc, #88]	; (8006270 <HAL_RCC_OscConfig+0x340>)
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	4b15      	ldr	r3, [pc, #84]	; (8006270 <HAL_RCC_OscConfig+0x340>)
 800621c:	2180      	movs	r1, #128	; 0x80
 800621e:	0049      	lsls	r1, r1, #1
 8006220:	430a      	orrs	r2, r1
 8006222:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006224:	f7ff f8d4 	bl	80053d0 <HAL_GetTick>
 8006228:	0003      	movs	r3, r0
 800622a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800622e:	f7ff f8cf 	bl	80053d0 <HAL_GetTick>
 8006232:	0002      	movs	r2, r0
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b64      	cmp	r3, #100	; 0x64
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e186      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006240:	4b0b      	ldr	r3, [pc, #44]	; (8006270 <HAL_RCC_OscConfig+0x340>)
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	2380      	movs	r3, #128	; 0x80
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	4013      	ands	r3, r2
 800624a:	d0f0      	beq.n	800622e <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d10f      	bne.n	8006274 <HAL_RCC_OscConfig+0x344>
 8006254:	4b03      	ldr	r3, [pc, #12]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 8006256:	6a1a      	ldr	r2, [r3, #32]
 8006258:	4b02      	ldr	r3, [pc, #8]	; (8006264 <HAL_RCC_OscConfig+0x334>)
 800625a:	2101      	movs	r1, #1
 800625c:	430a      	orrs	r2, r1
 800625e:	621a      	str	r2, [r3, #32]
 8006260:	e036      	b.n	80062d0 <HAL_RCC_OscConfig+0x3a0>
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	40021000 	.word	0x40021000
 8006268:	fffeffff 	.word	0xfffeffff
 800626c:	fffbffff 	.word	0xfffbffff
 8006270:	40007000 	.word	0x40007000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10c      	bne.n	8006296 <HAL_RCC_OscConfig+0x366>
 800627c:	4bb6      	ldr	r3, [pc, #728]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 800627e:	6a1a      	ldr	r2, [r3, #32]
 8006280:	4bb5      	ldr	r3, [pc, #724]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006282:	2101      	movs	r1, #1
 8006284:	438a      	bics	r2, r1
 8006286:	621a      	str	r2, [r3, #32]
 8006288:	4bb3      	ldr	r3, [pc, #716]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	4bb2      	ldr	r3, [pc, #712]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 800628e:	2104      	movs	r1, #4
 8006290:	438a      	bics	r2, r1
 8006292:	621a      	str	r2, [r3, #32]
 8006294:	e01c      	b.n	80062d0 <HAL_RCC_OscConfig+0x3a0>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b05      	cmp	r3, #5
 800629c:	d10c      	bne.n	80062b8 <HAL_RCC_OscConfig+0x388>
 800629e:	4bae      	ldr	r3, [pc, #696]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80062a0:	6a1a      	ldr	r2, [r3, #32]
 80062a2:	4bad      	ldr	r3, [pc, #692]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80062a4:	2104      	movs	r1, #4
 80062a6:	430a      	orrs	r2, r1
 80062a8:	621a      	str	r2, [r3, #32]
 80062aa:	4bab      	ldr	r3, [pc, #684]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80062ac:	6a1a      	ldr	r2, [r3, #32]
 80062ae:	4baa      	ldr	r3, [pc, #680]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80062b0:	2101      	movs	r1, #1
 80062b2:	430a      	orrs	r2, r1
 80062b4:	621a      	str	r2, [r3, #32]
 80062b6:	e00b      	b.n	80062d0 <HAL_RCC_OscConfig+0x3a0>
 80062b8:	4ba7      	ldr	r3, [pc, #668]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80062ba:	6a1a      	ldr	r2, [r3, #32]
 80062bc:	4ba6      	ldr	r3, [pc, #664]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80062be:	2101      	movs	r1, #1
 80062c0:	438a      	bics	r2, r1
 80062c2:	621a      	str	r2, [r3, #32]
 80062c4:	4ba4      	ldr	r3, [pc, #656]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	4ba3      	ldr	r3, [pc, #652]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80062ca:	2104      	movs	r1, #4
 80062cc:	438a      	bics	r2, r1
 80062ce:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d014      	beq.n	8006302 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062d8:	f7ff f87a 	bl	80053d0 <HAL_GetTick>
 80062dc:	0003      	movs	r3, r0
 80062de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e0:	e009      	b.n	80062f6 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062e2:	f7ff f875 	bl	80053d0 <HAL_GetTick>
 80062e6:	0002      	movs	r2, r0
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	1ad3      	subs	r3, r2, r3
 80062ec:	4a9b      	ldr	r2, [pc, #620]	; (800655c <HAL_RCC_OscConfig+0x62c>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d901      	bls.n	80062f6 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e12b      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f6:	4b98      	ldr	r3, [pc, #608]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	2202      	movs	r2, #2
 80062fc:	4013      	ands	r3, r2
 80062fe:	d0f0      	beq.n	80062e2 <HAL_RCC_OscConfig+0x3b2>
 8006300:	e013      	b.n	800632a <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006302:	f7ff f865 	bl	80053d0 <HAL_GetTick>
 8006306:	0003      	movs	r3, r0
 8006308:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800630a:	e009      	b.n	8006320 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800630c:	f7ff f860 	bl	80053d0 <HAL_GetTick>
 8006310:	0002      	movs	r2, r0
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	4a91      	ldr	r2, [pc, #580]	; (800655c <HAL_RCC_OscConfig+0x62c>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d901      	bls.n	8006320 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e116      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006320:	4b8d      	ldr	r3, [pc, #564]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	2202      	movs	r2, #2
 8006326:	4013      	ands	r3, r2
 8006328:	d1f0      	bne.n	800630c <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800632a:	231f      	movs	r3, #31
 800632c:	18fb      	adds	r3, r7, r3
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d105      	bne.n	8006340 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006334:	4b88      	ldr	r3, [pc, #544]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	4b87      	ldr	r3, [pc, #540]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 800633a:	4989      	ldr	r1, [pc, #548]	; (8006560 <HAL_RCC_OscConfig+0x630>)
 800633c:	400a      	ands	r2, r1
 800633e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2210      	movs	r2, #16
 8006346:	4013      	ands	r3, r2
 8006348:	d063      	beq.n	8006412 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d12a      	bne.n	80063a8 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006352:	4b81      	ldr	r3, [pc, #516]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006356:	4b80      	ldr	r3, [pc, #512]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006358:	2104      	movs	r1, #4
 800635a:	430a      	orrs	r2, r1
 800635c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800635e:	4b7e      	ldr	r3, [pc, #504]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006362:	4b7d      	ldr	r3, [pc, #500]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006364:	2101      	movs	r1, #1
 8006366:	430a      	orrs	r2, r1
 8006368:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800636a:	f7ff f831 	bl	80053d0 <HAL_GetTick>
 800636e:	0003      	movs	r3, r0
 8006370:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006374:	f7ff f82c 	bl	80053d0 <HAL_GetTick>
 8006378:	0002      	movs	r2, r0
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e0e3      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006386:	4b74      	ldr	r3, [pc, #464]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800638a:	2202      	movs	r2, #2
 800638c:	4013      	ands	r3, r2
 800638e:	d0f1      	beq.n	8006374 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006390:	4b71      	ldr	r3, [pc, #452]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006394:	22f8      	movs	r2, #248	; 0xf8
 8006396:	4393      	bics	r3, r2
 8006398:	0019      	movs	r1, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	00da      	lsls	r2, r3, #3
 80063a0:	4b6d      	ldr	r3, [pc, #436]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80063a2:	430a      	orrs	r2, r1
 80063a4:	635a      	str	r2, [r3, #52]	; 0x34
 80063a6:	e034      	b.n	8006412 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	3305      	adds	r3, #5
 80063ae:	d111      	bne.n	80063d4 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80063b0:	4b69      	ldr	r3, [pc, #420]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80063b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b4:	4b68      	ldr	r3, [pc, #416]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80063b6:	2104      	movs	r1, #4
 80063b8:	438a      	bics	r2, r1
 80063ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80063bc:	4b66      	ldr	r3, [pc, #408]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80063be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c0:	22f8      	movs	r2, #248	; 0xf8
 80063c2:	4393      	bics	r3, r2
 80063c4:	0019      	movs	r1, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	00da      	lsls	r2, r3, #3
 80063cc:	4b62      	ldr	r3, [pc, #392]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80063ce:	430a      	orrs	r2, r1
 80063d0:	635a      	str	r2, [r3, #52]	; 0x34
 80063d2:	e01e      	b.n	8006412 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80063d4:	4b60      	ldr	r3, [pc, #384]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80063d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d8:	4b5f      	ldr	r3, [pc, #380]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80063da:	2104      	movs	r1, #4
 80063dc:	430a      	orrs	r2, r1
 80063de:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80063e0:	4b5d      	ldr	r3, [pc, #372]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80063e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e4:	4b5c      	ldr	r3, [pc, #368]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80063e6:	2101      	movs	r1, #1
 80063e8:	438a      	bics	r2, r1
 80063ea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ec:	f7fe fff0 	bl	80053d0 <HAL_GetTick>
 80063f0:	0003      	movs	r3, r0
 80063f2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80063f4:	e008      	b.n	8006408 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80063f6:	f7fe ffeb 	bl	80053d0 <HAL_GetTick>
 80063fa:	0002      	movs	r2, r0
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	2b02      	cmp	r3, #2
 8006402:	d901      	bls.n	8006408 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e0a2      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006408:	4b53      	ldr	r3, [pc, #332]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 800640a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640c:	2202      	movs	r2, #2
 800640e:	4013      	ands	r3, r2
 8006410:	d1f1      	bne.n	80063f6 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d100      	bne.n	800641c <HAL_RCC_OscConfig+0x4ec>
 800641a:	e097      	b.n	800654c <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800641c:	4b4e      	ldr	r3, [pc, #312]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	220c      	movs	r2, #12
 8006422:	4013      	ands	r3, r2
 8006424:	2b08      	cmp	r3, #8
 8006426:	d100      	bne.n	800642a <HAL_RCC_OscConfig+0x4fa>
 8006428:	e06b      	b.n	8006502 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d14c      	bne.n	80064cc <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006432:	4b49      	ldr	r3, [pc, #292]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b48      	ldr	r3, [pc, #288]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006438:	494a      	ldr	r1, [pc, #296]	; (8006564 <HAL_RCC_OscConfig+0x634>)
 800643a:	400a      	ands	r2, r1
 800643c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800643e:	f7fe ffc7 	bl	80053d0 <HAL_GetTick>
 8006442:	0003      	movs	r3, r0
 8006444:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006446:	e008      	b.n	800645a <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006448:	f7fe ffc2 	bl	80053d0 <HAL_GetTick>
 800644c:	0002      	movs	r2, r0
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	2b02      	cmp	r3, #2
 8006454:	d901      	bls.n	800645a <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8006456:	2303      	movs	r3, #3
 8006458:	e079      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800645a:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	2380      	movs	r3, #128	; 0x80
 8006460:	049b      	lsls	r3, r3, #18
 8006462:	4013      	ands	r3, r2
 8006464:	d1f0      	bne.n	8006448 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006466:	4b3c      	ldr	r3, [pc, #240]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	220f      	movs	r2, #15
 800646c:	4393      	bics	r3, r2
 800646e:	0019      	movs	r1, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006474:	4b38      	ldr	r3, [pc, #224]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006476:	430a      	orrs	r2, r1
 8006478:	62da      	str	r2, [r3, #44]	; 0x2c
 800647a:	4b37      	ldr	r3, [pc, #220]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	4a3a      	ldr	r2, [pc, #232]	; (8006568 <HAL_RCC_OscConfig+0x638>)
 8006480:	4013      	ands	r3, r2
 8006482:	0019      	movs	r1, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	431a      	orrs	r2, r3
 800648e:	4b32      	ldr	r3, [pc, #200]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006494:	4b30      	ldr	r3, [pc, #192]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	4b2f      	ldr	r3, [pc, #188]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 800649a:	2180      	movs	r1, #128	; 0x80
 800649c:	0449      	lsls	r1, r1, #17
 800649e:	430a      	orrs	r2, r1
 80064a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a2:	f7fe ff95 	bl	80053d0 <HAL_GetTick>
 80064a6:	0003      	movs	r3, r0
 80064a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064aa:	e008      	b.n	80064be <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064ac:	f7fe ff90 	bl	80053d0 <HAL_GetTick>
 80064b0:	0002      	movs	r2, r0
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	2b02      	cmp	r3, #2
 80064b8:	d901      	bls.n	80064be <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e047      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80064be:	4b26      	ldr	r3, [pc, #152]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	049b      	lsls	r3, r3, #18
 80064c6:	4013      	ands	r3, r2
 80064c8:	d0f0      	beq.n	80064ac <HAL_RCC_OscConfig+0x57c>
 80064ca:	e03f      	b.n	800654c <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064cc:	4b22      	ldr	r3, [pc, #136]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	4b21      	ldr	r3, [pc, #132]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80064d2:	4924      	ldr	r1, [pc, #144]	; (8006564 <HAL_RCC_OscConfig+0x634>)
 80064d4:	400a      	ands	r2, r1
 80064d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d8:	f7fe ff7a 	bl	80053d0 <HAL_GetTick>
 80064dc:	0003      	movs	r3, r0
 80064de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064e0:	e008      	b.n	80064f4 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064e2:	f7fe ff75 	bl	80053d0 <HAL_GetTick>
 80064e6:	0002      	movs	r2, r0
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e02c      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80064f4:	4b18      	ldr	r3, [pc, #96]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	2380      	movs	r3, #128	; 0x80
 80064fa:	049b      	lsls	r3, r3, #18
 80064fc:	4013      	ands	r3, r2
 80064fe:	d1f0      	bne.n	80064e2 <HAL_RCC_OscConfig+0x5b2>
 8006500:	e024      	b.n	800654c <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e01f      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800650e:	4b12      	ldr	r3, [pc, #72]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006514:	4b10      	ldr	r3, [pc, #64]	; (8006558 <HAL_RCC_OscConfig+0x628>)
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	23c0      	movs	r3, #192	; 0xc0
 800651e:	025b      	lsls	r3, r3, #9
 8006520:	401a      	ands	r2, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	429a      	cmp	r2, r3
 8006528:	d10e      	bne.n	8006548 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	220f      	movs	r2, #15
 800652e:	401a      	ands	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006534:	429a      	cmp	r2, r3
 8006536:	d107      	bne.n	8006548 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	23f0      	movs	r3, #240	; 0xf0
 800653c:	039b      	lsls	r3, r3, #14
 800653e:	401a      	ands	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	0018      	movs	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	b008      	add	sp, #32
 8006554:	bd80      	pop	{r7, pc}
 8006556:	46c0      	nop			; (mov r8, r8)
 8006558:	40021000 	.word	0x40021000
 800655c:	00001388 	.word	0x00001388
 8006560:	efffffff 	.word	0xefffffff
 8006564:	feffffff 	.word	0xfeffffff
 8006568:	ffc27fff 	.word	0xffc27fff

0800656c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e0b3      	b.n	80066e8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006580:	4b5b      	ldr	r3, [pc, #364]	; (80066f0 <HAL_RCC_ClockConfig+0x184>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2201      	movs	r2, #1
 8006586:	4013      	ands	r3, r2
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	d911      	bls.n	80065b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658e:	4b58      	ldr	r3, [pc, #352]	; (80066f0 <HAL_RCC_ClockConfig+0x184>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2201      	movs	r2, #1
 8006594:	4393      	bics	r3, r2
 8006596:	0019      	movs	r1, r3
 8006598:	4b55      	ldr	r3, [pc, #340]	; (80066f0 <HAL_RCC_ClockConfig+0x184>)
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a0:	4b53      	ldr	r3, [pc, #332]	; (80066f0 <HAL_RCC_ClockConfig+0x184>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2201      	movs	r2, #1
 80065a6:	4013      	ands	r3, r2
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d001      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e09a      	b.n	80066e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2202      	movs	r2, #2
 80065b8:	4013      	ands	r3, r2
 80065ba:	d015      	beq.n	80065e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2204      	movs	r2, #4
 80065c2:	4013      	ands	r3, r2
 80065c4:	d006      	beq.n	80065d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80065c6:	4b4b      	ldr	r3, [pc, #300]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	4b4a      	ldr	r3, [pc, #296]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 80065cc:	21e0      	movs	r1, #224	; 0xe0
 80065ce:	00c9      	lsls	r1, r1, #3
 80065d0:	430a      	orrs	r2, r1
 80065d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065d4:	4b47      	ldr	r3, [pc, #284]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	22f0      	movs	r2, #240	; 0xf0
 80065da:	4393      	bics	r3, r2
 80065dc:	0019      	movs	r1, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	4b44      	ldr	r3, [pc, #272]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2201      	movs	r2, #1
 80065ee:	4013      	ands	r3, r2
 80065f0:	d040      	beq.n	8006674 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d107      	bne.n	800660a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065fa:	4b3e      	ldr	r3, [pc, #248]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	029b      	lsls	r3, r3, #10
 8006602:	4013      	ands	r3, r2
 8006604:	d114      	bne.n	8006630 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e06e      	b.n	80066e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d107      	bne.n	8006622 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006612:	4b38      	ldr	r3, [pc, #224]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	2380      	movs	r3, #128	; 0x80
 8006618:	049b      	lsls	r3, r3, #18
 800661a:	4013      	ands	r3, r2
 800661c:	d108      	bne.n	8006630 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	e062      	b.n	80066e8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006622:	4b34      	ldr	r3, [pc, #208]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2202      	movs	r2, #2
 8006628:	4013      	ands	r3, r2
 800662a:	d101      	bne.n	8006630 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e05b      	b.n	80066e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006630:	4b30      	ldr	r3, [pc, #192]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	2203      	movs	r2, #3
 8006636:	4393      	bics	r3, r2
 8006638:	0019      	movs	r1, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685a      	ldr	r2, [r3, #4]
 800663e:	4b2d      	ldr	r3, [pc, #180]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 8006640:	430a      	orrs	r2, r1
 8006642:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006644:	f7fe fec4 	bl	80053d0 <HAL_GetTick>
 8006648:	0003      	movs	r3, r0
 800664a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800664c:	e009      	b.n	8006662 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800664e:	f7fe febf 	bl	80053d0 <HAL_GetTick>
 8006652:	0002      	movs	r2, r0
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	4a27      	ldr	r2, [pc, #156]	; (80066f8 <HAL_RCC_ClockConfig+0x18c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e042      	b.n	80066e8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006662:	4b24      	ldr	r3, [pc, #144]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	220c      	movs	r2, #12
 8006668:	401a      	ands	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	429a      	cmp	r2, r3
 8006672:	d1ec      	bne.n	800664e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006674:	4b1e      	ldr	r3, [pc, #120]	; (80066f0 <HAL_RCC_ClockConfig+0x184>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2201      	movs	r2, #1
 800667a:	4013      	ands	r3, r2
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d211      	bcs.n	80066a6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006682:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <HAL_RCC_ClockConfig+0x184>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2201      	movs	r2, #1
 8006688:	4393      	bics	r3, r2
 800668a:	0019      	movs	r1, r3
 800668c:	4b18      	ldr	r3, [pc, #96]	; (80066f0 <HAL_RCC_ClockConfig+0x184>)
 800668e:	683a      	ldr	r2, [r7, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006694:	4b16      	ldr	r3, [pc, #88]	; (80066f0 <HAL_RCC_ClockConfig+0x184>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2201      	movs	r2, #1
 800669a:	4013      	ands	r3, r2
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d001      	beq.n	80066a6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e020      	b.n	80066e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2204      	movs	r2, #4
 80066ac:	4013      	ands	r3, r2
 80066ae:	d009      	beq.n	80066c4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80066b0:	4b10      	ldr	r3, [pc, #64]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	4a11      	ldr	r2, [pc, #68]	; (80066fc <HAL_RCC_ClockConfig+0x190>)
 80066b6:	4013      	ands	r3, r2
 80066b8:	0019      	movs	r1, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 80066c0:	430a      	orrs	r2, r1
 80066c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80066c4:	f000 f820 	bl	8006708 <HAL_RCC_GetSysClockFreq>
 80066c8:	0001      	movs	r1, r0
 80066ca:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <HAL_RCC_ClockConfig+0x188>)
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	091b      	lsrs	r3, r3, #4
 80066d0:	220f      	movs	r2, #15
 80066d2:	4013      	ands	r3, r2
 80066d4:	4a0a      	ldr	r2, [pc, #40]	; (8006700 <HAL_RCC_ClockConfig+0x194>)
 80066d6:	5cd3      	ldrb	r3, [r2, r3]
 80066d8:	000a      	movs	r2, r1
 80066da:	40da      	lsrs	r2, r3
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <HAL_RCC_ClockConfig+0x198>)
 80066de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80066e0:	2003      	movs	r0, #3
 80066e2:	f7fe fe2f 	bl	8005344 <HAL_InitTick>
  
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	0018      	movs	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	b004      	add	sp, #16
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	40022000 	.word	0x40022000
 80066f4:	40021000 	.word	0x40021000
 80066f8:	00001388 	.word	0x00001388
 80066fc:	fffff8ff 	.word	0xfffff8ff
 8006700:	08009970 	.word	0x08009970
 8006704:	20000028 	.word	0x20000028

08006708 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	2300      	movs	r3, #0
 8006714:	60bb      	str	r3, [r7, #8]
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	2300      	movs	r3, #0
 800671c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8006722:	4b21      	ldr	r3, [pc, #132]	; (80067a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	220c      	movs	r2, #12
 800672c:	4013      	ands	r3, r2
 800672e:	2b04      	cmp	r3, #4
 8006730:	d002      	beq.n	8006738 <HAL_RCC_GetSysClockFreq+0x30>
 8006732:	2b08      	cmp	r3, #8
 8006734:	d003      	beq.n	800673e <HAL_RCC_GetSysClockFreq+0x36>
 8006736:	e02e      	b.n	8006796 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006738:	4b1c      	ldr	r3, [pc, #112]	; (80067ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800673a:	613b      	str	r3, [r7, #16]
      break;
 800673c:	e02e      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	0c9b      	lsrs	r3, r3, #18
 8006742:	220f      	movs	r2, #15
 8006744:	4013      	ands	r3, r2
 8006746:	4a1a      	ldr	r2, [pc, #104]	; (80067b0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8006748:	5cd3      	ldrb	r3, [r2, r3]
 800674a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800674c:	4b16      	ldr	r3, [pc, #88]	; (80067a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800674e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006750:	220f      	movs	r2, #15
 8006752:	4013      	ands	r3, r2
 8006754:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006756:	5cd3      	ldrb	r3, [r2, r3]
 8006758:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	23c0      	movs	r3, #192	; 0xc0
 800675e:	025b      	lsls	r3, r3, #9
 8006760:	401a      	ands	r2, r3
 8006762:	2380      	movs	r3, #128	; 0x80
 8006764:	025b      	lsls	r3, r3, #9
 8006766:	429a      	cmp	r2, r3
 8006768:	d109      	bne.n	800677e <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800676a:	68b9      	ldr	r1, [r7, #8]
 800676c:	480f      	ldr	r0, [pc, #60]	; (80067ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800676e:	f7f9 fcc9 	bl	8000104 <__udivsi3>
 8006772:	0003      	movs	r3, r0
 8006774:	001a      	movs	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	4353      	muls	r3, r2
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e008      	b.n	8006790 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800677e:	68b9      	ldr	r1, [r7, #8]
 8006780:	480a      	ldr	r0, [pc, #40]	; (80067ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8006782:	f7f9 fcbf 	bl	8000104 <__udivsi3>
 8006786:	0003      	movs	r3, r0
 8006788:	001a      	movs	r2, r3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4353      	muls	r3, r2
 800678e:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	613b      	str	r3, [r7, #16]
      break;
 8006794:	e002      	b.n	800679c <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006796:	4b05      	ldr	r3, [pc, #20]	; (80067ac <HAL_RCC_GetSysClockFreq+0xa4>)
 8006798:	613b      	str	r3, [r7, #16]
      break;
 800679a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800679c:	693b      	ldr	r3, [r7, #16]
}
 800679e:	0018      	movs	r0, r3
 80067a0:	46bd      	mov	sp, r7
 80067a2:	b006      	add	sp, #24
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	40021000 	.word	0x40021000
 80067ac:	007a1200 	.word	0x007a1200
 80067b0:	08009980 	.word	0x08009980
 80067b4:	08009990 	.word	0x08009990

080067b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e0a8      	b.n	800691c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d109      	bne.n	80067e6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	2382      	movs	r3, #130	; 0x82
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	429a      	cmp	r2, r3
 80067dc:	d009      	beq.n	80067f2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	61da      	str	r2, [r3, #28]
 80067e4:	e005      	b.n	80067f2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	225d      	movs	r2, #93	; 0x5d
 80067fc:	5c9b      	ldrb	r3, [r3, r2]
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b00      	cmp	r3, #0
 8006802:	d107      	bne.n	8006814 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	225c      	movs	r2, #92	; 0x5c
 8006808:	2100      	movs	r1, #0
 800680a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	0018      	movs	r0, r3
 8006810:	f7fe fbec 	bl	8004fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	225d      	movs	r2, #93	; 0x5d
 8006818:	2102      	movs	r1, #2
 800681a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2140      	movs	r1, #64	; 0x40
 8006828:	438a      	bics	r2, r1
 800682a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	23e0      	movs	r3, #224	; 0xe0
 8006832:	00db      	lsls	r3, r3, #3
 8006834:	429a      	cmp	r2, r3
 8006836:	d902      	bls.n	800683e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	e002      	b.n	8006844 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800683e:	2380      	movs	r3, #128	; 0x80
 8006840:	015b      	lsls	r3, r3, #5
 8006842:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	23f0      	movs	r3, #240	; 0xf0
 800684a:	011b      	lsls	r3, r3, #4
 800684c:	429a      	cmp	r2, r3
 800684e:	d008      	beq.n	8006862 <HAL_SPI_Init+0xaa>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	23e0      	movs	r3, #224	; 0xe0
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	429a      	cmp	r2, r3
 800685a:	d002      	beq.n	8006862 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	2382      	movs	r3, #130	; 0x82
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	401a      	ands	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6899      	ldr	r1, [r3, #8]
 8006870:	2384      	movs	r3, #132	; 0x84
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	400b      	ands	r3, r1
 8006876:	431a      	orrs	r2, r3
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2102      	movs	r1, #2
 800687e:	400b      	ands	r3, r1
 8006880:	431a      	orrs	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	2101      	movs	r1, #1
 8006888:	400b      	ands	r3, r1
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6999      	ldr	r1, [r3, #24]
 8006890:	2380      	movs	r3, #128	; 0x80
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	400b      	ands	r3, r1
 8006896:	431a      	orrs	r2, r3
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	69db      	ldr	r3, [r3, #28]
 800689c:	2138      	movs	r1, #56	; 0x38
 800689e:	400b      	ands	r3, r1
 80068a0:	431a      	orrs	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a1b      	ldr	r3, [r3, #32]
 80068a6:	2180      	movs	r1, #128	; 0x80
 80068a8:	400b      	ands	r3, r1
 80068aa:	431a      	orrs	r2, r3
 80068ac:	0011      	movs	r1, r2
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	401a      	ands	r2, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	0c1b      	lsrs	r3, r3, #16
 80068c6:	2204      	movs	r2, #4
 80068c8:	401a      	ands	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ce:	2110      	movs	r1, #16
 80068d0:	400b      	ands	r3, r1
 80068d2:	431a      	orrs	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d8:	2108      	movs	r1, #8
 80068da:	400b      	ands	r3, r1
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68d9      	ldr	r1, [r3, #12]
 80068e2:	23f0      	movs	r3, #240	; 0xf0
 80068e4:	011b      	lsls	r3, r3, #4
 80068e6:	400b      	ands	r3, r1
 80068e8:	431a      	orrs	r2, r3
 80068ea:	0011      	movs	r1, r2
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	2380      	movs	r3, #128	; 0x80
 80068f0:	015b      	lsls	r3, r3, #5
 80068f2:	401a      	ands	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	430a      	orrs	r2, r1
 80068fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69da      	ldr	r2, [r3, #28]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4907      	ldr	r1, [pc, #28]	; (8006924 <HAL_SPI_Init+0x16c>)
 8006908:	400a      	ands	r2, r1
 800690a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	225d      	movs	r2, #93	; 0x5d
 8006916:	2101      	movs	r1, #1
 8006918:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	0018      	movs	r0, r3
 800691e:	46bd      	mov	sp, r7
 8006920:	b004      	add	sp, #16
 8006922:	bd80      	pop	{r7, pc}
 8006924:	fffff7ff 	.word	0xfffff7ff

08006928 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af00      	add	r7, sp, #0
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	603b      	str	r3, [r7, #0]
 8006934:	1dbb      	adds	r3, r7, #6
 8006936:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006938:	231f      	movs	r3, #31
 800693a:	18fb      	adds	r3, r7, r3
 800693c:	2200      	movs	r2, #0
 800693e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	225c      	movs	r2, #92	; 0x5c
 8006944:	5c9b      	ldrb	r3, [r3, r2]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d101      	bne.n	800694e <HAL_SPI_Transmit+0x26>
 800694a:	2302      	movs	r3, #2
 800694c:	e147      	b.n	8006bde <HAL_SPI_Transmit+0x2b6>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	225c      	movs	r2, #92	; 0x5c
 8006952:	2101      	movs	r1, #1
 8006954:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006956:	f7fe fd3b 	bl	80053d0 <HAL_GetTick>
 800695a:	0003      	movs	r3, r0
 800695c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800695e:	2316      	movs	r3, #22
 8006960:	18fb      	adds	r3, r7, r3
 8006962:	1dba      	adds	r2, r7, #6
 8006964:	8812      	ldrh	r2, [r2, #0]
 8006966:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	225d      	movs	r2, #93	; 0x5d
 800696c:	5c9b      	ldrb	r3, [r3, r2]
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b01      	cmp	r3, #1
 8006972:	d004      	beq.n	800697e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8006974:	231f      	movs	r3, #31
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	2202      	movs	r2, #2
 800697a:	701a      	strb	r2, [r3, #0]
    goto error;
 800697c:	e128      	b.n	8006bd0 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d003      	beq.n	800698c <HAL_SPI_Transmit+0x64>
 8006984:	1dbb      	adds	r3, r7, #6
 8006986:	881b      	ldrh	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800698c:	231f      	movs	r3, #31
 800698e:	18fb      	adds	r3, r7, r3
 8006990:	2201      	movs	r2, #1
 8006992:	701a      	strb	r2, [r3, #0]
    goto error;
 8006994:	e11c      	b.n	8006bd0 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	225d      	movs	r2, #93	; 0x5d
 800699a:	2103      	movs	r1, #3
 800699c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	1dba      	adds	r2, r7, #6
 80069ae:	8812      	ldrh	r2, [r2, #0]
 80069b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1dba      	adds	r2, r7, #6
 80069b6:	8812      	ldrh	r2, [r2, #0]
 80069b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2244      	movs	r2, #68	; 0x44
 80069c4:	2100      	movs	r1, #0
 80069c6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2246      	movs	r2, #70	; 0x46
 80069cc:	2100      	movs	r1, #0
 80069ce:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	2380      	movs	r3, #128	; 0x80
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d110      	bne.n	8006a0a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2140      	movs	r1, #64	; 0x40
 80069f4:	438a      	bics	r2, r1
 80069f6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	01c9      	lsls	r1, r1, #7
 8006a06:	430a      	orrs	r2, r1
 8006a08:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2240      	movs	r2, #64	; 0x40
 8006a12:	4013      	ands	r3, r2
 8006a14:	2b40      	cmp	r3, #64	; 0x40
 8006a16:	d007      	beq.n	8006a28 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2140      	movs	r1, #64	; 0x40
 8006a24:	430a      	orrs	r2, r1
 8006a26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	68da      	ldr	r2, [r3, #12]
 8006a2c:	23e0      	movs	r3, #224	; 0xe0
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d952      	bls.n	8006ada <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d004      	beq.n	8006a46 <HAL_SPI_Transmit+0x11e>
 8006a3c:	2316      	movs	r3, #22
 8006a3e:	18fb      	adds	r3, r7, r3
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d143      	bne.n	8006ace <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	881a      	ldrh	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	1c9a      	adds	r2, r3, #2
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a6a:	e030      	b.n	8006ace <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2202      	movs	r2, #2
 8006a74:	4013      	ands	r3, r2
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d112      	bne.n	8006aa0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7e:	881a      	ldrh	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	1c9a      	adds	r2, r3, #2
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a9e:	e016      	b.n	8006ace <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aa0:	f7fe fc96 	bl	80053d0 <HAL_GetTick>
 8006aa4:	0002      	movs	r2, r0
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d802      	bhi.n	8006ab6 <HAL_SPI_Transmit+0x18e>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	d102      	bne.n	8006abc <HAL_SPI_Transmit+0x194>
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d108      	bne.n	8006ace <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8006abc:	231f      	movs	r3, #31
 8006abe:	18fb      	adds	r3, r7, r3
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	225d      	movs	r2, #93	; 0x5d
 8006ac8:	2101      	movs	r1, #1
 8006aca:	5499      	strb	r1, [r3, r2]
          goto error;
 8006acc:	e080      	b.n	8006bd0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1c9      	bne.n	8006a6c <HAL_SPI_Transmit+0x144>
 8006ad8:	e053      	b.n	8006b82 <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <HAL_SPI_Transmit+0x1c4>
 8006ae2:	2316      	movs	r3, #22
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d145      	bne.n	8006b78 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	330c      	adds	r3, #12
 8006af6:	7812      	ldrb	r2, [r2, #0]
 8006af8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	1c5a      	adds	r2, r3, #1
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006b12:	e031      	b.n	8006b78 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d113      	bne.n	8006b4a <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	330c      	adds	r3, #12
 8006b2c:	7812      	ldrb	r2, [r2, #0]
 8006b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	3b01      	subs	r3, #1
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006b48:	e016      	b.n	8006b78 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b4a:	f7fe fc41 	bl	80053d0 <HAL_GetTick>
 8006b4e:	0002      	movs	r2, r0
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	1ad3      	subs	r3, r2, r3
 8006b54:	683a      	ldr	r2, [r7, #0]
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d802      	bhi.n	8006b60 <HAL_SPI_Transmit+0x238>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	d102      	bne.n	8006b66 <HAL_SPI_Transmit+0x23e>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d108      	bne.n	8006b78 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8006b66:	231f      	movs	r3, #31
 8006b68:	18fb      	adds	r3, r7, r3
 8006b6a:	2203      	movs	r2, #3
 8006b6c:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	225d      	movs	r2, #93	; 0x5d
 8006b72:	2101      	movs	r1, #1
 8006b74:	5499      	strb	r1, [r3, r2]
          goto error;
 8006b76:	e02b      	b.n	8006bd0 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1c8      	bne.n	8006b14 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b82:	69ba      	ldr	r2, [r7, #24]
 8006b84:	6839      	ldr	r1, [r7, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	0018      	movs	r0, r3
 8006b8a:	f000 f95d 	bl	8006e48 <SPI_EndRxTxTransaction>
 8006b8e:	1e03      	subs	r3, r0, #0
 8006b90:	d002      	beq.n	8006b98 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2220      	movs	r2, #32
 8006b96:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	613b      	str	r3, [r7, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	613b      	str	r3, [r7, #16]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	613b      	str	r3, [r7, #16]
 8006bb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d004      	beq.n	8006bc8 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8006bbe:	231f      	movs	r3, #31
 8006bc0:	18fb      	adds	r3, r7, r3
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	701a      	strb	r2, [r3, #0]
 8006bc6:	e003      	b.n	8006bd0 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	225d      	movs	r2, #93	; 0x5d
 8006bcc:	2101      	movs	r1, #1
 8006bce:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	225c      	movs	r2, #92	; 0x5c
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006bd8:	231f      	movs	r3, #31
 8006bda:	18fb      	adds	r3, r7, r3
 8006bdc:	781b      	ldrb	r3, [r3, #0]
}
 8006bde:	0018      	movs	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	b008      	add	sp, #32
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	1dfb      	adds	r3, r7, #7
 8006bf6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bf8:	f7fe fbea 	bl	80053d0 <HAL_GetTick>
 8006bfc:	0002      	movs	r2, r0
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	1a9b      	subs	r3, r3, r2
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	18d3      	adds	r3, r2, r3
 8006c06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c08:	f7fe fbe2 	bl	80053d0 <HAL_GetTick>
 8006c0c:	0003      	movs	r3, r0
 8006c0e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c10:	4b3a      	ldr	r3, [pc, #232]	; (8006cfc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	015b      	lsls	r3, r3, #5
 8006c16:	0d1b      	lsrs	r3, r3, #20
 8006c18:	69fa      	ldr	r2, [r7, #28]
 8006c1a:	4353      	muls	r3, r2
 8006c1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c1e:	e058      	b.n	8006cd2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	3301      	adds	r3, #1
 8006c24:	d055      	beq.n	8006cd2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c26:	f7fe fbd3 	bl	80053d0 <HAL_GetTick>
 8006c2a:	0002      	movs	r2, r0
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	69fa      	ldr	r2, [r7, #28]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d902      	bls.n	8006c3c <SPI_WaitFlagStateUntilTimeout+0x54>
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d142      	bne.n	8006cc2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	21e0      	movs	r1, #224	; 0xe0
 8006c48:	438a      	bics	r2, r1
 8006c4a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	2382      	movs	r3, #130	; 0x82
 8006c52:	005b      	lsls	r3, r3, #1
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d113      	bne.n	8006c80 <SPI_WaitFlagStateUntilTimeout+0x98>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689a      	ldr	r2, [r3, #8]
 8006c5c:	2380      	movs	r3, #128	; 0x80
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d005      	beq.n	8006c70 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	2380      	movs	r3, #128	; 0x80
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d107      	bne.n	8006c80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2140      	movs	r1, #64	; 0x40
 8006c7c:	438a      	bics	r2, r1
 8006c7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	019b      	lsls	r3, r3, #6
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d110      	bne.n	8006cae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	491a      	ldr	r1, [pc, #104]	; (8006d00 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006c98:	400a      	ands	r2, r1
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2180      	movs	r1, #128	; 0x80
 8006ca8:	0189      	lsls	r1, r1, #6
 8006caa:	430a      	orrs	r2, r1
 8006cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	225d      	movs	r2, #93	; 0x5d
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	225c      	movs	r2, #92	; 0x5c
 8006cba:	2100      	movs	r1, #0
 8006cbc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e017      	b.n	8006cf2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	4013      	ands	r3, r2
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	425a      	negs	r2, r3
 8006ce2:	4153      	adcs	r3, r2
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	001a      	movs	r2, r3
 8006ce8:	1dfb      	adds	r3, r7, #7
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d197      	bne.n	8006c20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	0018      	movs	r0, r3
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	b008      	add	sp, #32
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	46c0      	nop			; (mov r8, r8)
 8006cfc:	20000028 	.word	0x20000028
 8006d00:	ffffdfff 	.word	0xffffdfff

08006d04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
 8006d10:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d12:	2317      	movs	r3, #23
 8006d14:	18fb      	adds	r3, r7, r3
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d1a:	f7fe fb59 	bl	80053d0 <HAL_GetTick>
 8006d1e:	0002      	movs	r2, r0
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	1a9b      	subs	r3, r3, r2
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	18d3      	adds	r3, r2, r3
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d2a:	f7fe fb51 	bl	80053d0 <HAL_GetTick>
 8006d2e:	0003      	movs	r3, r0
 8006d30:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	330c      	adds	r3, #12
 8006d38:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d3a:	4b41      	ldr	r3, [pc, #260]	; (8006e40 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	0013      	movs	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	189b      	adds	r3, r3, r2
 8006d44:	00da      	lsls	r2, r3, #3
 8006d46:	1ad3      	subs	r3, r2, r3
 8006d48:	0d1b      	lsrs	r3, r3, #20
 8006d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d4c:	4353      	muls	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d50:	e068      	b.n	8006e24 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	23c0      	movs	r3, #192	; 0xc0
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d10a      	bne.n	8006d72 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d107      	bne.n	8006d72 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	2117      	movs	r1, #23
 8006d6a:	187b      	adds	r3, r7, r1
 8006d6c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d6e:	187b      	adds	r3, r7, r1
 8006d70:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	3301      	adds	r3, #1
 8006d76:	d055      	beq.n	8006e24 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d78:	f7fe fb2a 	bl	80053d0 <HAL_GetTick>
 8006d7c:	0002      	movs	r2, r0
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d902      	bls.n	8006d8e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d142      	bne.n	8006e14 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	21e0      	movs	r1, #224	; 0xe0
 8006d9a:	438a      	bics	r2, r1
 8006d9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	685a      	ldr	r2, [r3, #4]
 8006da2:	2382      	movs	r3, #130	; 0x82
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d113      	bne.n	8006dd2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	2380      	movs	r3, #128	; 0x80
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d005      	beq.n	8006dc2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	2380      	movs	r3, #128	; 0x80
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d107      	bne.n	8006dd2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2140      	movs	r1, #64	; 0x40
 8006dce:	438a      	bics	r2, r1
 8006dd0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dd6:	2380      	movs	r3, #128	; 0x80
 8006dd8:	019b      	lsls	r3, r3, #6
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d110      	bne.n	8006e00 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4916      	ldr	r1, [pc, #88]	; (8006e44 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006dea:	400a      	ands	r2, r1
 8006dec:	601a      	str	r2, [r3, #0]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2180      	movs	r1, #128	; 0x80
 8006dfa:	0189      	lsls	r1, r1, #6
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	225d      	movs	r2, #93	; 0x5d
 8006e04:	2101      	movs	r1, #1
 8006e06:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	225c      	movs	r2, #92	; 0x5c
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e010      	b.n	8006e36 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	3b01      	subs	r3, #1
 8006e22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d18e      	bne.n	8006d52 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	0018      	movs	r0, r3
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	b00a      	add	sp, #40	; 0x28
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	20000028 	.word	0x20000028
 8006e44:	ffffdfff 	.word	0xffffdfff

08006e48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af02      	add	r7, sp, #8
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	23c0      	movs	r3, #192	; 0xc0
 8006e58:	0159      	lsls	r1, r3, #5
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	0013      	movs	r3, r2
 8006e62:	2200      	movs	r2, #0
 8006e64:	f7ff ff4e 	bl	8006d04 <SPI_WaitFifoStateUntilTimeout>
 8006e68:	1e03      	subs	r3, r0, #0
 8006e6a:	d007      	beq.n	8006e7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e70:	2220      	movs	r2, #32
 8006e72:	431a      	orrs	r2, r3
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e027      	b.n	8006ecc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	68f8      	ldr	r0, [r7, #12]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	0013      	movs	r3, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	2180      	movs	r1, #128	; 0x80
 8006e8a:	f7ff fead 	bl	8006be8 <SPI_WaitFlagStateUntilTimeout>
 8006e8e:	1e03      	subs	r3, r0, #0
 8006e90:	d007      	beq.n	8006ea2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e96:	2220      	movs	r2, #32
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e014      	b.n	8006ecc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	23c0      	movs	r3, #192	; 0xc0
 8006ea6:	00d9      	lsls	r1, r3, #3
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	0013      	movs	r3, r2
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f7ff ff27 	bl	8006d04 <SPI_WaitFifoStateUntilTimeout>
 8006eb6:	1e03      	subs	r3, r0, #0
 8006eb8:	d007      	beq.n	8006eca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	431a      	orrs	r2, r3
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	e000      	b.n	8006ecc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006eca:	2300      	movs	r3, #0
}
 8006ecc:	0018      	movs	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	b004      	add	sp, #16
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <__libc_init_array>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	2600      	movs	r6, #0
 8006ed8:	4d0c      	ldr	r5, [pc, #48]	; (8006f0c <__libc_init_array+0x38>)
 8006eda:	4c0d      	ldr	r4, [pc, #52]	; (8006f10 <__libc_init_array+0x3c>)
 8006edc:	1b64      	subs	r4, r4, r5
 8006ede:	10a4      	asrs	r4, r4, #2
 8006ee0:	42a6      	cmp	r6, r4
 8006ee2:	d109      	bne.n	8006ef8 <__libc_init_array+0x24>
 8006ee4:	2600      	movs	r6, #0
 8006ee6:	f000 f821 	bl	8006f2c <_init>
 8006eea:	4d0a      	ldr	r5, [pc, #40]	; (8006f14 <__libc_init_array+0x40>)
 8006eec:	4c0a      	ldr	r4, [pc, #40]	; (8006f18 <__libc_init_array+0x44>)
 8006eee:	1b64      	subs	r4, r4, r5
 8006ef0:	10a4      	asrs	r4, r4, #2
 8006ef2:	42a6      	cmp	r6, r4
 8006ef4:	d105      	bne.n	8006f02 <__libc_init_array+0x2e>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	00b3      	lsls	r3, r6, #2
 8006efa:	58eb      	ldr	r3, [r5, r3]
 8006efc:	4798      	blx	r3
 8006efe:	3601      	adds	r6, #1
 8006f00:	e7ee      	b.n	8006ee0 <__libc_init_array+0xc>
 8006f02:	00b3      	lsls	r3, r6, #2
 8006f04:	58eb      	ldr	r3, [r5, r3]
 8006f06:	4798      	blx	r3
 8006f08:	3601      	adds	r6, #1
 8006f0a:	e7f2      	b.n	8006ef2 <__libc_init_array+0x1e>
 8006f0c:	080099a0 	.word	0x080099a0
 8006f10:	080099a0 	.word	0x080099a0
 8006f14:	080099a0 	.word	0x080099a0
 8006f18:	080099a4 	.word	0x080099a4

08006f1c <memset>:
 8006f1c:	0003      	movs	r3, r0
 8006f1e:	1882      	adds	r2, r0, r2
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d100      	bne.n	8006f26 <memset+0xa>
 8006f24:	4770      	bx	lr
 8006f26:	7019      	strb	r1, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	e7f9      	b.n	8006f20 <memset+0x4>

08006f2c <_init>:
 8006f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2e:	46c0      	nop			; (mov r8, r8)
 8006f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f32:	bc08      	pop	{r3}
 8006f34:	469e      	mov	lr, r3
 8006f36:	4770      	bx	lr

08006f38 <_fini>:
 8006f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3a:	46c0      	nop			; (mov r8, r8)
 8006f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f3e:	bc08      	pop	{r3}
 8006f40:	469e      	mov	lr, r3
 8006f42:	4770      	bx	lr
